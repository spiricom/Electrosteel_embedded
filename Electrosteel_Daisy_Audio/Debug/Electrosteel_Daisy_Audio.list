
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002e178  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402e410  2402e410  0005d7a8  2**0
                  CONTENTS
  3 .exidx        00000000  2402e410  2402e410  0005d7a8  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402e410  2402e410  0005d7a8  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402e410  2402e410  0003e410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402e414  2402e414  0003e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000a1c  20000000  2402e418  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d7e8  20000a20  2402ee34  00060a20  2**3
                  ALLOC
 14 .itcmram      0000d3a8  00000400  2402ee34  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    02000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  0005d7d6  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  0005d7d6  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  0005d7d6  2**0
                  CONTENTS
 19 .heap         00000000  2001e208  2001e208  0005d7d6  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001e208  2001e208  0005d7d6  2**0
                  CONTENTS
 21 .comment      00000043  00000000  00000000  0005d7d6  2**0
                  CONTENTS, READONLY
 22 .debug_info   0009dc99  00000000  00000000  0005d819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000c1a9  00000000  00000000  000fb4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 00060c91  00000000  00000000  0010765b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00004338  00000000  00000000  001682ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 0000c230  00000000  00000000  0016c624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  00046f04  00000000  00000000  00178854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   0009138e  00000000  00000000  001bf758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00177b2d  00000000  00000000  00250ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_frame  0000ee8c  00000000  00000000  003c8614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000a20 	.word	0x20000a20
240002b4:	00000000 	.word	0x00000000
240002b8:	0000d7a8 	.word	0x0000d7a8

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	20000a24 	.word	0x20000a24
240002d4:	0000d7a8 	.word	0x0000d7a8

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
240002e8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
240002ec:	4602      	mov	r2, r0
240002ee:	b410      	push	{r4}
    if (x > 0.0f)
240002f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240002f4:	dc17      	bgt.n	24000326 <arm_atan2_f32+0x3e>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
240002f6:	d47f      	bmi.n	240003f8 <arm_atan2_f32+0x110>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
240002f8:	eef5 0a40 	vcmp.f32	s1, #0.0
240002fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000300:	f040 820a 	bne.w	24000718 <arm_atan2_f32+0x430>
    {
        if (y > 0.0f)
24000304:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24000308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400030c:	f300 80e9 	bgt.w	240004e2 <arm_atan2_f32+0x1fa>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
24000310:	f140 8202 	bpl.w	24000718 <arm_atan2_f32+0x430>
        {
            *result=-PIHALFF32;
24000314:	f640 73db 	movw	r3, #4059	; 0xfdb
            return(ARM_MATH_SUCCESS);
24000318:	2000      	movs	r0, #0
            *result=-PIHALFF32;
2400031a:	f6cb 73c9 	movt	r3, #49097	; 0xbfc9
2400031e:	6013      	str	r3, [r2, #0]
    }
    

    return(ARM_MATH_NANINF);

}
24000320:	f85d 4b04 	ldr.w	r4, [sp], #4
24000324:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
24000326:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
2400032a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400032e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000332:	f100 8127 	bmi.w	24000584 <arm_atan2_f32+0x29c>
   int sign=0;
24000336:	2400      	movs	r4, #0
   if (x > 1.0f)
24000338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400033c:	eef4 7ae6 	vcmpe.f32	s15, s13
24000340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000344:	f340 80d6 	ble.w	240004f4 <arm_atan2_f32+0x20c>
      x = 1.0f / x;
24000348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400034c:	f249 23a5 	movw	r3, #37541	; 0x92a5
24000350:	f244 50e7 	movw	r0, #17895	; 0x45e7
24000354:	f24b 7108 	movw	r1, #46856	; 0xb708
24000358:	f6cb 5304 	movt	r3, #48388	; 0xbd04
2400035c:	f6c3 6009 	movt	r0, #15881	; 0x3e09
24000360:	f6cb 6132 	movt	r1, #48690	; 0xbe32
24000364:	ee07 3a90 	vmov	s15, r3
24000368:	f64f 43eb 	movw	r3, #64747	; 0xfceb
2400036c:	ee03 0a10 	vmov	s6, r0
24000370:	ee03 1a90 	vmov	s7, r1
24000374:	f6cb 43a9 	movt	r3, #48297	; 0xbca9
24000378:	f646 103c 	movw	r0, #26940	; 0x693c
2400037c:	f245 6143 	movw	r1, #22083	; 0x5643
24000380:	ee04 3a10 	vmov	s8, r3
24000384:	f6c3 605d 	movt	r0, #15965	; 0x3e5d
24000388:	f6cb 3190 	movt	r1, #48016	; 0xbb90
2400038c:	f246 53e5 	movw	r3, #26085	; 0x65e5
24000390:	ee04 0a90 	vmov	s9, r0
24000394:	f640 40c9 	movw	r0, #3273	; 0xcc9
24000398:	ee05 1a10 	vmov	s10, r1
2400039c:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
240003a0:	f2cb 70c0 	movt	r0, #47040	; 0xb7c0
240003a4:	2101      	movs	r1, #1
240003a6:	ee05 3a90 	vmov	s11, r3
      res = PIHALFF32 - arm_atan_limited_f32(x);
240003aa:	f640 73db 	movw	r3, #4059	; 0xfdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240003ae:	ee06 0a10 	vmov	s12, r0
240003b2:	f6c3 7180 	movt	r1, #16256	; 0x3f80
      res = PIHALFF32 - arm_atan_limited_f32(x);
240003b6:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240003ba:	eea7 3a27 	vfma.f32	s6, s14, s15
240003be:	ee06 1a90 	vmov	s13, r1
      res = PIHALFF32 - arm_atan_limited_f32(x);
240003c2:	ee07 3a90 	vmov	s15, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240003c6:	eee7 3a03 	vfma.f32	s7, s14, s6
240003ca:	eea7 4a23 	vfma.f32	s8, s14, s7
240003ce:	eee7 4a04 	vfma.f32	s9, s14, s8
240003d2:	eea7 5a24 	vfma.f32	s10, s14, s9
240003d6:	eee5 5a07 	vfma.f32	s11, s10, s14
240003da:	eea7 6a25 	vfma.f32	s12, s14, s11
240003de:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
240003e2:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
240003e6:	b10c      	cbz	r4, 240003ec <arm_atan2_f32+0x104>
     res = -res;
240003e8:	eef1 7a67 	vneg.f32	s15, s15
        *result=arm_atan_f32(y/x);
240003ec:	edc2 7a00 	vstr	s15, [r2]
        return(ARM_MATH_SUCCESS);
240003f0:	2000      	movs	r0, #0
}
240003f2:	f85d 4b04 	ldr.w	r4, [sp], #4
240003f6:	4770      	bx	lr
        if (y > 0.0f)
240003f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240003fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000400:	f340 80c4 	ble.w	2400058c <arm_atan2_f32+0x2a4>
           *result=arm_atan_f32(y/x) + PI;
24000404:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
24000408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400040c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000410:	f100 817e 	bmi.w	24000710 <arm_atan2_f32+0x428>
   int sign=0;
24000414:	2400      	movs	r4, #0
   if (x > 1.0f)
24000416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400041a:	eef4 7ae6 	vcmpe.f32	s15, s13
2400041e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000422:	f340 812a 	ble.w	2400067a <arm_atan2_f32+0x392>
      x = 1.0f / x;
24000426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400042a:	f249 23a5 	movw	r3, #37541	; 0x92a5
2400042e:	f244 50e7 	movw	r0, #17895	; 0x45e7
24000432:	f24b 7108 	movw	r1, #46856	; 0xb708
24000436:	f6cb 5304 	movt	r3, #48388	; 0xbd04
2400043a:	f6c3 6009 	movt	r0, #15881	; 0x3e09
2400043e:	f6cb 6132 	movt	r1, #48690	; 0xbe32
24000442:	ee07 3a90 	vmov	s15, r3
24000446:	f64f 43eb 	movw	r3, #64747	; 0xfceb
2400044a:	ee03 0a10 	vmov	s6, r0
2400044e:	ee03 1a90 	vmov	s7, r1
24000452:	f6cb 43a9 	movt	r3, #48297	; 0xbca9
24000456:	f646 103c 	movw	r0, #26940	; 0x693c
2400045a:	f245 6143 	movw	r1, #22083	; 0x5643
2400045e:	ee04 3a10 	vmov	s8, r3
24000462:	f6c3 605d 	movt	r0, #15965	; 0x3e5d
24000466:	f6cb 3190 	movt	r1, #48016	; 0xbb90
2400046a:	f246 53e5 	movw	r3, #26085	; 0x65e5
2400046e:	ee04 0a90 	vmov	s9, r0
24000472:	f640 40c9 	movw	r0, #3273	; 0xcc9
24000476:	ee05 1a10 	vmov	s10, r1
2400047a:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
2400047e:	f2cb 70c0 	movt	r0, #47040	; 0xb7c0
24000482:	2101      	movs	r1, #1
24000484:	ee05 3a90 	vmov	s11, r3
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000488:	f640 73db 	movw	r3, #4059	; 0xfdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400048c:	ee06 0a10 	vmov	s12, r0
24000490:	f6c3 7180 	movt	r1, #16256	; 0x3f80
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000494:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000498:	eea7 3a27 	vfma.f32	s6, s14, s15
2400049c:	ee06 1a90 	vmov	s13, r1
      res = PIHALFF32 - arm_atan_limited_f32(x);
240004a0:	ee07 3a90 	vmov	s15, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240004a4:	eee7 3a03 	vfma.f32	s7, s14, s6
240004a8:	eea7 4a23 	vfma.f32	s8, s14, s7
240004ac:	eee7 4a04 	vfma.f32	s9, s14, s8
240004b0:	eea7 5a24 	vfma.f32	s10, s14, s9
240004b4:	eee7 5a05 	vfma.f32	s11, s14, s10
240004b8:	eea7 6a25 	vfma.f32	s12, s14, s11
240004bc:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
240004c0:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
240004c4:	b10c      	cbz	r4, 240004ca <arm_atan2_f32+0x1e2>
     res = -res;
240004c6:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
240004ca:	f640 73db 	movw	r3, #4059	; 0xfdb
        return(ARM_MATH_SUCCESS);
240004ce:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
240004d0:	f2c4 0349 	movt	r3, #16457	; 0x4049
240004d4:	ee07 3a10 	vmov	s14, r3
240004d8:	ee77 7a87 	vadd.f32	s15, s15, s14
240004dc:	edc2 7a00 	vstr	s15, [r2]
240004e0:	e71e      	b.n	24000320 <arm_atan2_f32+0x38>
            *result=PIHALFF32;
240004e2:	f640 73db 	movw	r3, #4059	; 0xfdb
            return(ARM_MATH_SUCCESS);
240004e6:	2000      	movs	r0, #0
            *result=PIHALFF32;
240004e8:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
240004ec:	6013      	str	r3, [r2, #0]
}
240004ee:	f85d 4b04 	ldr.w	r4, [sp], #4
240004f2:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240004f4:	f249 20a5 	movw	r0, #37541	; 0x92a5
240004f8:	f244 51e7 	movw	r1, #17895	; 0x45e7
240004fc:	f24b 7308 	movw	r3, #46856	; 0xb708
24000500:	f6cb 5004 	movt	r0, #48388	; 0xbd04
24000504:	f6c3 6109 	movt	r1, #15881	; 0x3e09
24000508:	f6cb 6332 	movt	r3, #48690	; 0xbe32
2400050c:	ee06 0a10 	vmov	s12, r0
24000510:	ee06 1a90 	vmov	s13, r1
24000514:	ee07 3a10 	vmov	s14, r3
24000518:	f64f 40eb 	movw	r0, #64747	; 0xfceb
2400051c:	eee7 6a86 	vfma.f32	s13, s15, s12
24000520:	f646 133c 	movw	r3, #26940	; 0x693c
24000524:	f6cb 40a9 	movt	r0, #48297	; 0xbca9
24000528:	f245 6143 	movw	r1, #22083	; 0x5643
2400052c:	f6c3 635d 	movt	r3, #15965	; 0x3e5d
24000530:	ee04 0a90 	vmov	s9, r0
24000534:	f6cb 3190 	movt	r1, #48016	; 0xbb90
24000538:	ee05 3a10 	vmov	s10, r3
2400053c:	f246 53e5 	movw	r3, #26085	; 0x65e5
24000540:	ee05 1a90 	vmov	s11, r1
24000544:	f640 41c9 	movw	r1, #3273	; 0xcc9
24000548:	eea7 7aa6 	vfma.f32	s14, s15, s13
2400054c:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
24000550:	f2cb 71c0 	movt	r1, #47040	; 0xb7c0
24000554:	ee06 3a10 	vmov	s12, r3
24000558:	2301      	movs	r3, #1
2400055a:	ee06 1a90 	vmov	s13, r1
2400055e:	f6c3 7380 	movt	r3, #16256	; 0x3f80
24000562:	eee7 4a87 	vfma.f32	s9, s15, s14
24000566:	ee07 3a10 	vmov	s14, r3
2400056a:	eea7 5aa4 	vfma.f32	s10, s15, s9
2400056e:	eee7 5a85 	vfma.f32	s11, s15, s10
24000572:	eea7 6aa5 	vfma.f32	s12, s15, s11
24000576:	eee7 6a86 	vfma.f32	s13, s15, s12
2400057a:	eea7 7aa6 	vfma.f32	s14, s15, s13
2400057e:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
24000582:	e730      	b.n	240003e6 <arm_atan2_f32+0xfe>
      x=-x;
24000584:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
24000588:	2401      	movs	r4, #1
2400058a:	e6d5      	b.n	24000338 <arm_atan2_f32+0x50>
        else if (y < 0.0f)
2400058c:	d406      	bmi.n	2400059c <arm_atan2_f32+0x2b4>
               *result= PI;
2400058e:	f640 73db 	movw	r3, #4059	; 0xfdb
        return(ARM_MATH_SUCCESS);
24000592:	2000      	movs	r0, #0
               *result= PI;
24000594:	f2c4 0349 	movt	r3, #16457	; 0x4049
24000598:	6013      	str	r3, [r2, #0]
2400059a:	e6c1      	b.n	24000320 <arm_atan2_f32+0x38>
           *result=arm_atan_f32(y/x) - PI;
2400059c:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
240005a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240005a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240005a8:	f100 8101 	bmi.w	240007ae <arm_atan2_f32+0x4c6>
   int sign=0;
240005ac:	2400      	movs	r4, #0
   if (x > 1.0f)
240005ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240005b2:	eef4 7ae6 	vcmpe.f32	s15, s13
240005b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240005ba:	f340 80b0 	ble.w	2400071e <arm_atan2_f32+0x436>
      x = 1.0f / x;
240005be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240005c2:	f249 23a5 	movw	r3, #37541	; 0x92a5
240005c6:	f244 50e7 	movw	r0, #17895	; 0x45e7
240005ca:	f24b 7108 	movw	r1, #46856	; 0xb708
240005ce:	f6cb 5304 	movt	r3, #48388	; 0xbd04
240005d2:	f6c3 6009 	movt	r0, #15881	; 0x3e09
240005d6:	f6cb 6132 	movt	r1, #48690	; 0xbe32
240005da:	ee07 3a90 	vmov	s15, r3
240005de:	f64f 43eb 	movw	r3, #64747	; 0xfceb
240005e2:	ee03 0a10 	vmov	s6, r0
240005e6:	ee03 1a90 	vmov	s7, r1
240005ea:	f6cb 43a9 	movt	r3, #48297	; 0xbca9
240005ee:	f646 103c 	movw	r0, #26940	; 0x693c
240005f2:	f245 6143 	movw	r1, #22083	; 0x5643
240005f6:	ee04 3a10 	vmov	s8, r3
240005fa:	f6c3 605d 	movt	r0, #15965	; 0x3e5d
240005fe:	f6cb 3190 	movt	r1, #48016	; 0xbb90
24000602:	f246 53e5 	movw	r3, #26085	; 0x65e5
24000606:	ee04 0a90 	vmov	s9, r0
2400060a:	f640 40c9 	movw	r0, #3273	; 0xcc9
2400060e:	ee05 1a10 	vmov	s10, r1
24000612:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
24000616:	f2cb 70c0 	movt	r0, #47040	; 0xb7c0
2400061a:	2101      	movs	r1, #1
2400061c:	ee05 3a90 	vmov	s11, r3
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000620:	f640 73db 	movw	r3, #4059	; 0xfdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000624:	ee06 0a10 	vmov	s12, r0
24000628:	f6c3 7180 	movt	r1, #16256	; 0x3f80
      res = PIHALFF32 - arm_atan_limited_f32(x);
2400062c:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000630:	eea7 3a27 	vfma.f32	s6, s14, s15
24000634:	ee06 1a90 	vmov	s13, r1
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000638:	ee07 3a90 	vmov	s15, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400063c:	eee7 3a03 	vfma.f32	s7, s14, s6
24000640:	eea7 4a23 	vfma.f32	s8, s14, s7
24000644:	eee7 4a04 	vfma.f32	s9, s14, s8
24000648:	eea7 5a24 	vfma.f32	s10, s14, s9
2400064c:	eee7 5a05 	vfma.f32	s11, s14, s10
24000650:	eea7 6a25 	vfma.f32	s12, s14, s11
24000654:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000658:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
2400065c:	b10c      	cbz	r4, 24000662 <arm_atan2_f32+0x37a>
     res = -res;
2400065e:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
24000662:	f640 73db 	movw	r3, #4059	; 0xfdb
        return(ARM_MATH_SUCCESS);
24000666:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
24000668:	f2c4 0349 	movt	r3, #16457	; 0x4049
2400066c:	ee07 3a10 	vmov	s14, r3
24000670:	ee77 7ac7 	vsub.f32	s15, s15, s14
24000674:	edc2 7a00 	vstr	s15, [r2]
24000678:	e652      	b.n	24000320 <arm_atan2_f32+0x38>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400067a:	f249 20a5 	movw	r0, #37541	; 0x92a5
2400067e:	f244 51e7 	movw	r1, #17895	; 0x45e7
24000682:	f24b 7308 	movw	r3, #46856	; 0xb708
24000686:	f6cb 5004 	movt	r0, #48388	; 0xbd04
2400068a:	f6c3 6109 	movt	r1, #15881	; 0x3e09
2400068e:	f6cb 6332 	movt	r3, #48690	; 0xbe32
24000692:	ee06 0a10 	vmov	s12, r0
24000696:	ee06 1a90 	vmov	s13, r1
2400069a:	ee07 3a10 	vmov	s14, r3
2400069e:	f64f 40eb 	movw	r0, #64747	; 0xfceb
240006a2:	eee7 6a86 	vfma.f32	s13, s15, s12
240006a6:	f646 133c 	movw	r3, #26940	; 0x693c
240006aa:	f6cb 40a9 	movt	r0, #48297	; 0xbca9
240006ae:	f245 6143 	movw	r1, #22083	; 0x5643
240006b2:	f6c3 635d 	movt	r3, #15965	; 0x3e5d
240006b6:	ee04 0a90 	vmov	s9, r0
240006ba:	f6cb 3190 	movt	r1, #48016	; 0xbb90
240006be:	ee05 3a10 	vmov	s10, r3
240006c2:	f246 53e5 	movw	r3, #26085	; 0x65e5
240006c6:	ee05 1a90 	vmov	s11, r1
240006ca:	f640 41c9 	movw	r1, #3273	; 0xcc9
240006ce:	eea7 7aa6 	vfma.f32	s14, s15, s13
240006d2:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
240006d6:	f2cb 71c0 	movt	r1, #47040	; 0xb7c0
240006da:	ee06 3a10 	vmov	s12, r3
240006de:	2301      	movs	r3, #1
240006e0:	ee06 1a90 	vmov	s13, r1
240006e4:	f6c3 7380 	movt	r3, #16256	; 0x3f80
240006e8:	eee7 4a87 	vfma.f32	s9, s15, s14
240006ec:	ee07 3a10 	vmov	s14, r3
240006f0:	eea7 5aa4 	vfma.f32	s10, s15, s9
240006f4:	eee7 5a85 	vfma.f32	s11, s15, s10
240006f8:	eea7 6aa5 	vfma.f32	s12, s15, s11
240006fc:	eee7 6a86 	vfma.f32	s13, s15, s12
24000700:	eea7 7aa6 	vfma.f32	s14, s15, s13
24000704:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
24000708:	2c00      	cmp	r4, #0
2400070a:	f43f aede 	beq.w	240004ca <arm_atan2_f32+0x1e2>
2400070e:	e6da      	b.n	240004c6 <arm_atan2_f32+0x1de>
      x=-x;
24000710:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
24000714:	2401      	movs	r4, #1
24000716:	e67e      	b.n	24000416 <arm_atan2_f32+0x12e>
    return(ARM_MATH_NANINF);
24000718:	f06f 0003 	mvn.w	r0, #3
2400071c:	e600      	b.n	24000320 <arm_atan2_f32+0x38>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400071e:	f249 20a5 	movw	r0, #37541	; 0x92a5
24000722:	f244 51e7 	movw	r1, #17895	; 0x45e7
24000726:	f24b 7308 	movw	r3, #46856	; 0xb708
2400072a:	f6cb 5004 	movt	r0, #48388	; 0xbd04
2400072e:	f6c3 6109 	movt	r1, #15881	; 0x3e09
24000732:	f6cb 6332 	movt	r3, #48690	; 0xbe32
24000736:	ee06 0a10 	vmov	s12, r0
2400073a:	ee06 1a90 	vmov	s13, r1
2400073e:	ee07 3a10 	vmov	s14, r3
24000742:	f64f 40eb 	movw	r0, #64747	; 0xfceb
24000746:	eee7 6a86 	vfma.f32	s13, s15, s12
2400074a:	f646 133c 	movw	r3, #26940	; 0x693c
2400074e:	f6cb 40a9 	movt	r0, #48297	; 0xbca9
24000752:	f245 6143 	movw	r1, #22083	; 0x5643
24000756:	f6c3 635d 	movt	r3, #15965	; 0x3e5d
2400075a:	ee04 0a90 	vmov	s9, r0
2400075e:	f6cb 3190 	movt	r1, #48016	; 0xbb90
24000762:	ee05 3a10 	vmov	s10, r3
24000766:	f246 53e5 	movw	r3, #26085	; 0x65e5
2400076a:	ee05 1a90 	vmov	s11, r1
2400076e:	f640 41c9 	movw	r1, #3273	; 0xcc9
24000772:	eea7 7aa6 	vfma.f32	s14, s15, s13
24000776:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
2400077a:	f2cb 71c0 	movt	r1, #47040	; 0xb7c0
2400077e:	ee06 3a10 	vmov	s12, r3
24000782:	2301      	movs	r3, #1
24000784:	ee06 1a90 	vmov	s13, r1
24000788:	f6c3 7380 	movt	r3, #16256	; 0x3f80
2400078c:	eee7 4a87 	vfma.f32	s9, s15, s14
24000790:	ee07 3a10 	vmov	s14, r3
24000794:	eea7 5aa4 	vfma.f32	s10, s15, s9
24000798:	eee7 5a85 	vfma.f32	s11, s15, s10
2400079c:	eea7 6aa5 	vfma.f32	s12, s15, s11
240007a0:	eee7 6a86 	vfma.f32	s13, s15, s12
240007a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
240007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
240007ac:	e756      	b.n	2400065c <arm_atan2_f32+0x374>
      x=-x;
240007ae:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
240007b2:	2401      	movs	r4, #1
240007b4:	e6fb      	b.n	240005ae <arm_atan2_f32+0x2c6>
240007b6:	bf00      	nop

240007b8 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
240007b8:	f64f 1283 	movw	r2, #63875	; 0xf983

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
240007bc:	f640 73db 	movw	r3, #4059	; 0xfdb
  in = x * 0.159154943092f + 0.25f;
240007c0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
240007c4:	f6c3 6222 	movt	r2, #15906	; 0x3e22
  if (in < 0.0f)
240007c8:	f6cb 73c9 	movt	r3, #49097	; 0xbfc9
  in = x * 0.159154943092f + 0.25f;
240007cc:	ee07 2a10 	vmov	s14, r2
  if (in < 0.0f)
240007d0:	ee06 3a90 	vmov	s13, r3
  in = x * 0.159154943092f + 0.25f;
240007d4:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
240007d8:	eeb4 0ae6 	vcmpe.f32	s0, s13
240007dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
240007e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
240007e4:	d504      	bpl.n	240007f0 <arm_cos_f32+0x38>
  {
    n--;
240007e6:	ee17 3a10 	vmov	r3, s14
240007ea:	3b01      	subs	r3, #1
240007ec:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
240007f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240007f4:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
240007f8:	ee06 3a90 	vmov	s13, r3
  in = in - (float32_t) n;
240007fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
24000800:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
24000804:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24000808:	ee17 3a10 	vmov	r3, s14
2400080c:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
2400080e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24000812:	d21e      	bcs.n	24000852 <arm_cos_f32+0x9a>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
24000814:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
24000818:	461a      	mov	r2, r3
  b = sinTable_f32[index+1];
2400081a:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
2400081c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24000820:	ee37 0ac7 	vsub.f32	s0, s15, s14
  a = sinTable_f32[index];
24000824:	f64e 2354 	movw	r3, #59988	; 0xea54

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
24000828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
2400082c:	f2c2 4301 	movt	r3, #9217	; 0x2401
  cosVal = (1.0f - fract) * a + fract * b;
24000830:	ee37 7a26 	vadd.f32	s14, s14, s13
  b = sinTable_f32[index+1];
24000834:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  a = sinTable_f32[index];
24000838:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
2400083c:	edd1 6a00 	vldr	s13, [r1]
24000840:	ee37 7a67 	vsub.f32	s14, s14, s15
24000844:	edd3 7a00 	vldr	s15, [r3]
24000848:	ee20 0a26 	vmul.f32	s0, s0, s13

  /* Return output value */
  return (cosVal);
}
2400084c:	eea7 0a27 	vfma.f32	s0, s14, s15
24000850:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
24000852:	ee77 7ae6 	vsub.f32	s15, s15, s13
24000856:	2300      	movs	r3, #0
24000858:	2101      	movs	r1, #1
2400085a:	461a      	mov	r2, r3
2400085c:	ee07 3a10 	vmov	s14, r3
24000860:	eeb0 0a67 	vmov.f32	s0, s15
24000864:	e7de      	b.n	24000824 <arm_cos_f32+0x6c>
24000866:	bf00      	nop

24000868 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
24000868:	f64f 1383 	movw	r3, #63875	; 0xf983
2400086c:	f6c3 6322 	movt	r3, #15906	; 0x3e22
24000870:	ee07 3a90 	vmov	s15, r3
24000874:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
24000878:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
2400087c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
24000880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000884:	d504      	bpl.n	24000890 <arm_sin_f32+0x28>
  {
    n--;
24000886:	ee17 3a90 	vmov	r3, s15
2400088a:	3b01      	subs	r3, #1
2400088c:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
24000890:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
24000894:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
24000898:	ee06 3a90 	vmov	s13, r3
  in = in - (float32_t) n;
2400089c:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240008a0:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
240008a4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240008a8:	ee17 3a10 	vmov	r3, s14
240008ac:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
240008ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240008b2:	d21e      	bcs.n	240008f2 <arm_sin_f32+0x8a>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
240008b4:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
240008b8:	461a      	mov	r2, r3
  b = sinTable_f32[index+1];
240008ba:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
240008bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240008c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
  a = sinTable_f32[index];
240008c4:	f64e 2354 	movw	r3, #59988	; 0xea54

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
240008c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
240008cc:	f2c2 4301 	movt	r3, #9217	; 0x2401
  sinVal = (1.0f - fract) * a + fract * b;
240008d0:	ee37 7a26 	vadd.f32	s14, s14, s13
  b = sinTable_f32[index+1];
240008d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  a = sinTable_f32[index];
240008d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
240008dc:	edd1 6a00 	vldr	s13, [r1]
240008e0:	ee37 7a67 	vsub.f32	s14, s14, s15
240008e4:	edd3 7a00 	vldr	s15, [r3]
240008e8:	ee20 0a26 	vmul.f32	s0, s0, s13

  /* Return output value */
  return (sinVal);
}
240008ec:	eea7 0a27 	vfma.f32	s0, s14, s15
240008f0:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
240008f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240008f6:	2300      	movs	r3, #0
240008f8:	2101      	movs	r1, #1
240008fa:	461a      	mov	r2, r3
240008fc:	ee07 3a10 	vmov	s14, r3
24000900:	eeb0 0a67 	vmov.f32	s0, s15
24000904:	e7de      	b.n	240008c4 <arm_sin_f32+0x5c>
24000906:	bf00      	nop

24000908 <dbToATableLookup>:
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
24000908:	f241 11ac 	movw	r1, #4524	; 0x11ac
2400090c:	f241 10a8 	movw	r0, #4520	; 0x11a8
24000910:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
24000914:	2200      	movs	r2, #0
24000916:	f2c2 0100 	movt	r1, #8192	; 0x2000
2400091a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2400091e:	f2c4 637f 	movt	r3, #18047	; 0x467f
24000922:	ee06 2a10 	vmov	s12, r2
24000926:	ed91 7a00 	vldr	s14, [r1]
2400092a:	edd0 7a00 	vldr	s15, [r0]
2400092e:	ee06 3a90 	vmov	s13, r3
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000932:	f643 70ff 	movw	r0, #16383	; 0x3fff
24000936:	f242 0300 	movw	r3, #8192	; 0x2000
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
2400093a:	eed7 7a00 	vfnms.f32	s15, s14, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
2400093e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24000942:	f2c3 0300 	movt	r3, #12288	; 0x3000
24000946:	fe87 0ae6 	vminnm.f32	s0, s15, s13
2400094a:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
    uint32_t inDBIndex = (uint32_t) floatIndex;
2400094e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24000952:	ee17 2a90 	vmov	r2, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000956:	ee77 7a40 	vsub.f32	s15, s14, s0
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
2400095a:	1c51      	adds	r1, r2, #1
    float alpha = floatIndex - (float)inDBIndex;
2400095c:	ee07 2a10 	vmov	s14, r2
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000960:	eb03 0282 	add.w	r2, r3, r2, lsl #2
24000964:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
24000966:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
2400096a:	bf28      	it	cs
2400096c:	4601      	movcs	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
2400096e:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000972:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24000976:	ee77 7a87 	vadd.f32	s15, s15, s14
2400097a:	ed92 7a00 	vldr	s14, [r2]
2400097e:	edd3 6a00 	vldr	s13, [r3]
24000982:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24000986:	eea7 0a27 	vfma.f32	s0, s14, s15
2400098a:	4770      	bx	lr

2400098c <mtofTableLookup>:



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
2400098c:	2000      	movs	r0, #0
2400098e:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
24000992:	4601      	mov	r1, r0
24000994:	4602      	mov	r2, r0
24000996:	f2c4 3023 	movt	r0, #17187	; 0x4323
2400099a:	ee07 3a90 	vmov	s15, r3
2400099e:	f2cc 3123 	movt	r1, #49955	; 0xc323
240009a2:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
240009a6:	ee06 0a10 	vmov	s12, r0
240009aa:	ee06 1a90 	vmov	s13, r1
240009ae:	ee07 2a10 	vmov	s14, r2
240009b2:	fe80 0a46 	vminnm.f32	s0, s0, s12
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240009b6:	f242 0200 	movw	r2, #8192	; 0x2000
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240009ba:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
240009be:	eee0 7a07 	vfma.f32	s15, s0, s14
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240009c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240009c6:	f2c3 0202 	movt	r2, #12290	; 0x3002
	int tempIndexI = (int)tempIndexF;
240009ca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240009ce:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
240009d2:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
240009d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240009da:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
240009e0:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240009e4:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240009e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240009ec:	ee77 7a26 	vadd.f32	s15, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240009f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240009f4:	ed93 7a00 	vldr	s14, [r3]
240009f8:	edd2 6a00 	vldr	s13, [r2]
240009fc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24000a00:	eea7 0a87 	vfma.f32	s0, s15, s14
24000a04:	4770      	bx	lr
24000a06:	bf00      	nop

24000a08 <audioInit>:


void audioInit()
{
24000a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000a0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
24000a10:	f245 258c 	movw	r5, #21132	; 0x528c
24000a14:	f242 0361 	movw	r3, #8289	; 0x2061
24000a18:	f245 7174 	movw	r1, #22388	; 0x5774
24000a1c:	f2c2 0500 	movt	r5, #8192	; 0x2000
24000a20:	f2c4 703b 	movt	r0, #18235	; 0x473b
24000a24:	f64e 2260 	movw	r2, #60000	; 0xea60
24000a28:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000a2c:	ee00 0a10 	vmov	s0, r0
24000a30:	f2c0 0300 	movt	r3, #0
24000a34:	4628      	mov	r0, r5
24000a36:	f245 3470 	movw	r4, #21360	; 0x5370
{
24000a3a:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000a3e:	f01b fd85 	bl	2401c54c <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000a42:	f240 0100 	movw	r1, #0
24000a46:	f245 20e0 	movw	r0, #21216	; 0x52e0
24000a4a:	462b      	mov	r3, r5
24000a4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
24000a50:	f2c2 4104 	movt	r1, #9220	; 0x2404
24000a54:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000a58:	f2c2 0400 	movt	r4, #8192	; 0x2000
24000a5c:	f016 fba6 	bl	240171ac <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000a60:	f240 0100 	movw	r1, #0
24000a64:	f245 2088 	movw	r0, #21128	; 0x5288
24000a68:	462b      	mov	r3, r5
24000a6a:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
24000a6e:	f2cc 0100 	movt	r1, #49152	; 0xc000
24000a72:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000a76:	f016 fb99 	bl	240171ac <tMempool_init>

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24000a7a:	f24b 7217 	movw	r2, #46871	; 0xb717
24000a7e:	f241 236f 	movw	r3, #4719	; 0x126f
24000a82:	2100      	movs	r1, #0
24000a84:	f6cb 2251 	movt	r2, #47697	; 0xba51
24000a88:	f241 10b0 	movw	r0, #4528	; 0x11b0
24000a8c:	f6c3 2383 	movt	r3, #14979	; 0x3a83
24000a90:	ee00 1a90 	vmov	s1, r1
24000a94:	ee01 2a90 	vmov	s3, r2
	leaf.clearOnAllocation = 1;
24000a98:	2201      	movs	r2, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24000a9a:	ee00 3a10 	vmov	s0, r3
24000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24000aa2:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000aa6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	leaf.clearOnAllocation = 1;
24000aaa:	616a      	str	r2, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24000aac:	f016 f8ea 	bl	24016c84 <LEAF_generate_exp>



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000ab0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000ab4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
24000ab8:	f245 10b0 	movw	r0, #20912	; 0x51b0
24000abc:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000ac0:	4613      	mov	r3, r2
24000ac2:	f6c3 62cc 	movt	r2, #16076	; 0x3ecc
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000ac6:	f2c4 517f 	movt	r1, #17791	; 0x457f
24000aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000ace:	f6c3 734c 	movt	r3, #16204	; 0x3f4c
24000ad2:	ee08 2a90 	vmov	s17, r2
		previousStringInputs[i]	= 0;
24000ad6:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000ad8:	6001      	str	r1, [r0, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000ada:	ee08 3a10 	vmov	s16, r3
		previousStringInputs[i]	= 0;
24000ade:	f245 3358 	movw	r3, #21336	; 0x5358
24000ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000ae6:	801a      	strh	r2, [r3, #0]
24000ae8:	805a      	strh	r2, [r3, #2]
24000aea:	809a      	strh	r2, [r3, #4]
24000aec:	80da      	strh	r2, [r3, #6]
24000aee:	811a      	strh	r2, [r3, #8]
24000af0:	815a      	strh	r2, [r3, #10]
24000af2:	819a      	strh	r2, [r3, #12]
24000af4:	81da      	strh	r2, [r3, #14]
24000af6:	821a      	strh	r2, [r3, #16]
24000af8:	825a      	strh	r2, [r3, #18]
24000afa:	829a      	strh	r2, [r3, #20]
24000afc:	82da      	strh	r2, [r3, #22]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000afe:	f02d fc5b 	bl	2402e3b8 <__randomNumber_veneer>
24000b02:	eef0 7a48 	vmov.f32	s15, s16
24000b06:	eee0 7a28 	vfma.f32	s15, s0, s17
24000b0a:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
24000b0e:	42ac      	cmp	r4, r5
24000b10:	d1f5      	bne.n	24000afe <audioInit+0xf6>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000b12:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
24000b16:	f242 0000 	movw	r0, #8192	; 0x2000
24000b1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24000b22:	f2c3 7327 	movt	r3, #14119	; 0x3727
24000b26:	f2c3 0001 	movt	r0, #12289	; 0x3001
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
	atodbTableOffset = 0.00001f * atodbTableScalar;
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b2a:	f24d 6466 	movw	r4, #54886	; 0xd666
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000b2e:	f241 1588 	movw	r5, #4488	; 0x1188
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000b32:	ee00 3a10 	vmov	s0, r3
24000b36:	f016 f915 	bl	24016d64 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
24000b3a:	2200      	movs	r2, #0
24000b3c:	f242 0000 	movw	r0, #8192	; 0x2000
24000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24000b44:	4613      	mov	r3, r2
24000b46:	f2c4 2248 	movt	r2, #16968	; 0x4248
24000b4a:	f2c3 0000 	movt	r0, #12288	; 0x3000
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000b4e:	f2c2 0500 	movt	r5, #8192	; 0x2000
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
24000b52:	f2cc 23b4 	movt	r3, #49844	; 0xc2b4
24000b56:	ee00 2a90 	vmov	s1, r2
24000b5a:	ee00 3a10 	vmov	s0, r3
24000b5e:	f016 f925 	bl	24016dac <LEAF_generate_dbtoa>
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b62:	4620      	mov	r0, r4
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b64:	f24c 327b 	movw	r2, #50043	; 0xc37b
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000b68:	f640 23f9 	movw	r3, #2809	; 0xaf9
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b6c:	f2cc 3023 	movt	r0, #49955	; 0xc323
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000b70:	f64f 41a8 	movw	r1, #64680	; 0xfca8
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b74:	f6c3 6227 	movt	r2, #15911	; 0x3e27
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000b78:	f2c4 23ea 	movt	r3, #17130	; 0x42ea
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b7c:	ee00 0a10 	vmov	s0, r0
24000b80:	f2c4 3423 	movt	r4, #17187	; 0x4323
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b84:	4610      	mov	r0, r2
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000b86:	461a      	mov	r2, r3
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b88:	f241 1384 	movw	r3, #4484	; 0x1184
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000b8c:	f2c4 617f 	movt	r1, #18047	; 0x467f
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b90:	ee00 4a90 	vmov	s1, r4
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000b98:	460c      	mov	r4, r1
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	atodbTableOffset = 0.00001f * atodbTableScalar;
24000b9e:	6018      	str	r0, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000ba0:	f241 10ac 	movw	r0, #4524	; 0x11ac
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24000ba4:	f648 73b7 	movw	r3, #36791	; 0x8fb7
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24000ba8:	602c      	str	r4, [r5, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000baa:	f2c2 0000 	movt	r0, #8192	; 0x2000
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24000bae:	f2cc 6324 	movt	r3, #50724	; 0xc624
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24000bb2:	6002      	str	r2, [r0, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24000bb4:	f241 12a8 	movw	r2, #4520	; 0x11a8
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000bb8:	f242 0000 	movw	r0, #8192	; 0x2000
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24000bbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000bc0:	f2c3 0002 	movt	r0, #12290	; 0x3002
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24000bc4:	6013      	str	r3, [r2, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000bc6:	f016 f91f 	bl	24016e08 <LEAF_generate_mtof>
	}

	else if (numStrings == 10)
	{
		// first two strings are one board each, other 8 are two strings each.
		if (boardNumber == 0)
24000bca:	f244 4331 	movw	r3, #17457	; 0x4431
24000bce:	f2c2 0301 	movt	r3, #8193	; 0x2001
24000bd2:	7819      	ldrb	r1, [r3, #0]
24000bd4:	2900      	cmp	r1, #0
24000bd6:	f040 811f 	bne.w	24000e18 <audioInit+0x410>
		{
			firstString = 0;
24000bda:	f245 13c4 	movw	r3, #20932	; 0x51c4
24000bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000be2:	6019      	str	r1, [r3, #0]
			numStringsThisBoard = 1;
24000be4:	2101      	movs	r1, #1
		}
		else if (boardNumber == 1)
		{
			firstString = 1;
			numStringsThisBoard = 1;
24000be6:	f240 6094 	movw	r0, #1684	; 0x694
24000bea:	f245 2438 	movw	r4, #21048	; 0x5238
	}




	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000bee:	f241 226f 	movw	r2, #4719	; 0x126f
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000bf2:	f245 258c 	movw	r5, #21132	; 0x528c
			numStringsThisBoard = 1;
24000bf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000bfa:	f2c2 0400 	movt	r4, #8192	; 0x2000
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000bfe:	2300      	movs	r3, #0
24000c00:	f6c3 2203 	movt	r2, #14851	; 0x3a03
			numStringsThisBoard = 1;
24000c04:	7001      	strb	r1, [r0, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000c06:	f245 218c 	movw	r1, #21132	; 0x528c
24000c0a:	f244 2058 	movw	r0, #16984	; 0x4258
24000c0e:	f104 0650 	add.w	r6, r4, #80	; 0x50
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000c12:	f2c2 0500 	movt	r5, #8192	; 0x2000
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000c16:	ee00 3a10 	vmov	s0, r3
24000c1a:	ee00 2a90 	vmov	s1, r2
24000c1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000c22:	f2c2 0001 	movt	r0, #8193	; 0x2001
24000c26:	ee08 3a10 	vmov	s16, r3
24000c2a:	ee08 2a90 	vmov	s17, r2
24000c2e:	f012 fadf 	bl	240131f0 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000c32:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
24000c34:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000c36:	eef0 0a68 	vmov.f32	s1, s17
24000c3a:	4629      	mov	r1, r5
24000c3c:	eeb0 0a48 	vmov.f32	s0, s16
24000c40:	f012 fad6 	bl	240131f0 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
24000c44:	42b4      	cmp	r4, r6
24000c46:	d1f4      	bne.n	24000c32 <audioInit+0x22a>
24000c48:	f245 3424 	movw	r4, #21284	; 0x5324
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000c4c:	f245 258c 	movw	r5, #21132	; 0x528c
24000c50:	f2c2 0400 	movt	r4, #8192	; 0x2000
24000c54:	f2c2 0500 	movt	r5, #8192	; 0x2000
24000c58:	f104 0628 	add.w	r6, r4, #40	; 0x28
24000c5c:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24000c5e:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000c60:	eef0 0a68 	vmov.f32	s1, s17
24000c64:	4629      	mov	r1, r5
24000c66:	eeb0 0a48 	vmov.f32	s0, s16
24000c6a:	f012 fac1 	bl	240131f0 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24000c6e:	42b4      	cmp	r4, r6
24000c70:	d1f4      	bne.n	24000c5c <audioInit+0x254>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
24000c72:	f24d 730a 	movw	r3, #55050	; 0xd70a
24000c76:	f245 218c 	movw	r1, #21132	; 0x528c
24000c7a:	f241 10a0 	movw	r0, #4512	; 0x11a0
24000c7e:	eeb0 0a48 	vmov.f32	s0, s16
24000c82:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24000c86:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000c8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000c8e:	f245 14bc 	movw	r4, #20924	; 0x51bc
24000c92:	ee00 3a90 	vmov	s1, r3
24000c96:	ee09 3a90 	vmov	s19, r3
24000c9a:	f012 faa9 	bl	240131f0 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
24000c9e:	f24d 2220 	movw	r2, #53792	; 0xd220
24000ca2:	f24b 7317 	movw	r3, #46871	; 0xb717
24000ca6:	f245 218c 	movw	r1, #21132	; 0x528c
24000caa:	f6c3 727f 	movt	r2, #16255	; 0x3f7f
24000cae:	f241 1098 	movw	r0, #4504	; 0x1198
24000cb2:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
24000cb6:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000cba:	ee00 2a90 	vmov	s1, r2
24000cbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000cc2:	ee00 3a10 	vmov	s0, r3
24000cc6:	ee09 2a10 	vmov	s18, r2
24000cca:	ee08 3a90 	vmov	s17, r3
24000cce:	f010 ff97 	bl	24011c00 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
24000cd2:	f245 218c 	movw	r1, #21132	; 0x528c
24000cd6:	f241 10a4 	movw	r0, #4516	; 0x11a4
24000cda:	eef0 0a69 	vmov.f32	s1, s19
24000cde:	f2c2 0400 	movt	r4, #8192	; 0x2000
24000ce2:	eeb0 0a48 	vmov.f32	s0, s16
24000ce6:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000cea:	f2c2 0000 	movt	r0, #8192	; 0x2000

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000cee:	f245 258c 	movw	r5, #21132	; 0x528c
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
24000cf2:	f012 fa7d 	bl	240131f0 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
24000cf6:	f245 218c 	movw	r1, #21132	; 0x528c
24000cfa:	f241 109c 	movw	r0, #4508	; 0x119c
24000cfe:	eef0 0a49 	vmov.f32	s1, s18
24000d02:	eeb0 0a68 	vmov.f32	s0, s17
24000d06:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000d0a:	f2c2 0000 	movt	r0, #8192	; 0x2000


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24000d0e:	f245 27ec 	movw	r7, #21228	; 0x52ec
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
24000d12:	f010 ff75 	bl	24011c00 <tEnvelopeFollower_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24000d16:	f245 26f0 	movw	r6, #21232	; 0x52f0
	audioInitAdditive();
24000d1a:	f02d fb55 	bl	2402e3c8 <__audioInitAdditive_veneer>
	audioInitVocal();
24000d1e:	f104 0808 	add.w	r8, r4, #8
24000d22:	f02d fb4d 	bl	2402e3c0 <__audioInitVocal_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000d26:	f2c2 0500 	movt	r5, #8192	; 0x2000
	audioInitSynth();
24000d2a:	f003 fb9b 	bl	24004464 <audioInitSynth>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24000d2e:	f2c2 0700 	movt	r7, #8192	; 0x2000
	audioInitString3();
24000d32:	f02d fb39 	bl	2402e3a8 <__audioInitString3_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000d36:	2200      	movs	r2, #0
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24000d38:	f2c2 0600 	movt	r6, #8192	; 0x2000
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000d3c:	4613      	mov	r3, r2
24000d3e:	f2c4 3248 	movt	r2, #17224	; 0x4348
24000d42:	f2c4 2348 	movt	r3, #16968	; 0x4248
24000d46:	ee09 2a10 	vmov	s18, r2
24000d4a:	ee08 3a90 	vmov	s17, r3
24000d4e:	f241 11b0 	movw	r1, #4528	; 0x11b0
24000d52:	eef0 1a49 	vmov.f32	s3, s18
24000d56:	eeb0 1a48 	vmov.f32	s2, s16
24000d5a:	4620      	mov	r0, r4
24000d5c:	eef0 0a68 	vmov.f32	s1, s17
24000d60:	462b      	mov	r3, r5
24000d62:	eeb0 0a48 	vmov.f32	s0, s16
24000d66:	f2c2 0100 	movt	r1, #8192	; 0x2000
24000d6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24000d6e:	3404      	adds	r4, #4
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000d70:	f011 fef6 	bl	24012b60 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24000d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24000d78:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24000d7c:	462a      	mov	r2, r5
24000d7e:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
24000d82:	2103      	movs	r1, #3
24000d84:	4638      	mov	r0, r7
24000d86:	ee00 3a10 	vmov	s0, r3
24000d8a:	f013 fcdd 	bl	24014748 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24000d8e:	f246 6366 	movw	r3, #26214	; 0x6666
24000d92:	462a      	mov	r2, r5
24000d94:	2101      	movs	r1, #1
24000d96:	f6c3 7366 	movt	r3, #16230	; 0x3f66
24000d9a:	4630      	mov	r0, r6
24000d9c:	ee00 3a90 	vmov	s1, r3
24000da0:	2300      	movs	r3, #0
24000da2:	f2c4 4348 	movt	r3, #17480	; 0x4448
24000da6:	ee00 3a10 	vmov	s0, r3
24000daa:	f013 fccd 	bl	24014748 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
24000dae:	f641 53b3 	movw	r3, #7603	; 0x1db3
24000db2:	4638      	mov	r0, r7
24000db4:	f2c4 53b6 	movt	r3, #17846	; 0x45b6
24000db8:	ee00 3a10 	vmov	s0, r3
24000dbc:	f013 fcc8 	bl	24014750 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
24000dc0:	f64f 73d7 	movw	r3, #65495	; 0xffd7
24000dc4:	4630      	mov	r0, r6
24000dc6:	f2c4 5330 	movt	r3, #17712	; 0x4530
24000dca:	ee00 3a10 	vmov	s0, r3
24000dce:	f013 fcbf 	bl	24014750 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
24000dd2:	f245 20e4 	movw	r0, #21220	; 0x52e4
24000dd6:	462a      	mov	r2, r5
24000dd8:	2100      	movs	r1, #0
24000dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
24000dde:	f016 ff63 	bl	24017ca8 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24000de2:	4544      	cmp	r4, r8
24000de4:	d1b3      	bne.n	24000d4e <audioInit+0x346>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24000de6:	f240 0000 	movw	r0, #0
24000dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
24000dee:	2100      	movs	r1, #0
24000df0:	f2c3 0000 	movt	r0, #12288	; 0x3000
24000df4:	f01b fc3c 	bl	2401c670 <memset>
	}

	audioFrameFunction = audioFrameWaiting;
24000df8:	f241 138c 	movw	r3, #4492	; 0x118c
24000dfc:	f241 52c1 	movw	r2, #5569	; 0x15c1
	HAL_Delay(1);
24000e00:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameWaiting;
24000e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000e06:	f2c0 0200 	movt	r2, #0
24000e0a:	601a      	str	r2, [r3, #0]

}
24000e0c:	ecbd 8b04 	vpop	{d8-d9}
24000e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
24000e14:	f004 baba 	b.w	2400538c <HAL_Delay>
		else if (boardNumber == 1)
24000e18:	2901      	cmp	r1, #1
24000e1a:	d008      	beq.n	24000e2e <audioInit+0x426>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24000e1c:	1e4a      	subs	r2, r1, #1
24000e1e:	f245 13c4 	movw	r3, #20932	; 0x51c4
24000e22:	2102      	movs	r1, #2
24000e24:	0052      	lsls	r2, r2, #1
24000e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000e2a:	601a      	str	r2, [r3, #0]
			numStringsThisBoard = 2;
24000e2c:	e6db      	b.n	24000be6 <audioInit+0x1de>
			firstString = 1;
24000e2e:	f245 13c4 	movw	r3, #20932	; 0x51c4
24000e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000e36:	6019      	str	r1, [r3, #0]
			numStringsThisBoard = 1;
24000e38:	e6d5      	b.n	24000be6 <audioInit+0x1de>
24000e3a:	bf00      	nop

24000e3c <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24000e3c:	b570      	push	{r4, r5, r6, lr}
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000e3e:	f240 0400 	movw	r4, #0
{
24000e42:	4606      	mov	r6, r0
	HAL_Delay(1);
24000e44:	2001      	movs	r0, #1
{
24000e46:	460d      	mov	r5, r1
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000e48:	f2c3 0400 	movt	r4, #12288	; 0x3000
	HAL_Delay(1);
24000e4c:	f004 fa9e 	bl	2400538c <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000e50:	f44f 7280 	mov.w	r2, #256	; 0x100
24000e54:	4630      	mov	r0, r6
24000e56:	4621      	mov	r1, r4
24000e58:	f00a fb90 	bl	2400b57c <HAL_SAI_Transmit_DMA>
24000e5c:	f244 2348 	movw	r3, #16968	; 0x4248
24000e60:	4606      	mov	r6, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000e62:	f44f 7280 	mov.w	r2, #256	; 0x100
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000e66:	f2c2 0301 	movt	r3, #8193	; 0x2001
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000e6a:	f504 6180 	add.w	r1, r4, #1024	; 0x400
24000e6e:	4628      	mov	r0, r5
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000e70:	701e      	strb	r6, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000e72:	f00a fc23 	bl	2400b6bc <HAL_SAI_Receive_DMA>
24000e76:	f245 7370 	movw	r3, #22384	; 0x5770
24000e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
24000e7e:	7018      	strb	r0, [r3, #0]
}
24000e80:	bd70      	pop	{r4, r5, r6, pc}
24000e82:	bf00      	nop

24000e84 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24000e84:	f44f 4388 	mov.w	r3, #17408	; 0x4400

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24000e88:	2200      	movs	r2, #0
24000e8a:	2109      	movs	r1, #9
24000e8c:	2081      	movs	r0, #129	; 0x81
  __HAL_RCC_BDMA_CLK_ENABLE();
24000e8e:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
24000e92:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
24000e94:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24000e98:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24000e9a:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24000e9e:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24000eaa:	9301      	str	r3, [sp, #4]
24000eac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24000eae:	f004 fa9d 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24000eb2:	2081      	movs	r0, #129	; 0x81
24000eb4:	f004 fadc 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 10, 0);
24000eb8:	2082      	movs	r0, #130	; 0x82
24000eba:	2200      	movs	r2, #0
24000ebc:	210a      	movs	r1, #10
24000ebe:	f004 fa95 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24000ec2:	2082      	movs	r0, #130	; 0x82

}
24000ec4:	b002      	add	sp, #8
24000ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24000eca:	f004 bad1 	b.w	24005470 <HAL_NVIC_EnableIRQ>
24000ece:	bf00      	nop

24000ed0 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24000ed0:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
24000ed2:	231e      	movs	r3, #30
{
24000ed4:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000ed6:	25fa      	movs	r5, #250	; 0xfa
24000ed8:	2134      	movs	r1, #52	; 0x34
24000eda:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24000edc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000ee0:	9500      	str	r5, [sp, #0]
24000ee2:	2302      	movs	r3, #2
{
24000ee4:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000ee6:	f006 ff81 	bl	24007dec <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24000eea:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24000eec:	260a      	movs	r6, #10
    HAL_Delay(10);
24000eee:	f004 fa4d 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000ef2:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000ef6:	2302      	movs	r3, #2
24000ef8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000efa:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000efe:	4620      	mov	r0, r4
24000f00:	aa03      	add	r2, sp, #12
24000f02:	9500      	str	r5, [sp, #0]
24000f04:	f006 ff72 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f08:	200a      	movs	r0, #10
24000f0a:	f004 fa3f 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000f0e:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f12:	2302      	movs	r3, #2
24000f14:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000f16:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f1a:	4620      	mov	r0, r4
24000f1c:	aa03      	add	r2, sp, #12
24000f1e:	9500      	str	r5, [sp, #0]
24000f20:	f006 ff64 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f24:	200a      	movs	r0, #10
24000f26:	f004 fa31 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000f2a:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f2c:	2302      	movs	r3, #2
24000f2e:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000f30:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f34:	4620      	mov	r0, r4
24000f36:	aa03      	add	r2, sp, #12
24000f38:	9500      	str	r5, [sp, #0]
24000f3a:	f006 ff57 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f3e:	200a      	movs	r0, #10
24000f40:	f004 fa24 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000f44:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f46:	2302      	movs	r3, #2
24000f48:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000f4a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f4e:	4620      	mov	r0, r4
24000f50:	aa03      	add	r2, sp, #12
24000f52:	9500      	str	r5, [sp, #0]
24000f54:	f006 ff4a 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f58:	200a      	movs	r0, #10
24000f5a:	f004 fa17 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000f5e:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f62:	2302      	movs	r3, #2
24000f64:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000f66:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f6a:	4620      	mov	r0, r4
24000f6c:	aa03      	add	r2, sp, #12
24000f6e:	9500      	str	r5, [sp, #0]
24000f70:	f006 ff3c 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f74:	4630      	mov	r0, r6
24000f76:	f004 fa09 	bl	2400538c <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f7a:	aa03      	add	r2, sp, #12
24000f7c:	2302      	movs	r3, #2
24000f7e:	2134      	movs	r1, #52	; 0x34
24000f80:	4620      	mov	r0, r4
24000f82:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24000f84:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f88:	f006 ff30 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000f8c:	4630      	mov	r0, r6
24000f8e:	f004 f9fd 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000f92:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f96:	aa03      	add	r2, sp, #12
24000f98:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000f9a:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000f9e:	4620      	mov	r0, r4
24000fa0:	2302      	movs	r3, #2
24000fa2:	9500      	str	r5, [sp, #0]
24000fa4:	f006 ff22 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000fa8:	4630      	mov	r0, r6
24000faa:	f004 f9ef 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000fae:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fb2:	aa03      	add	r2, sp, #12
24000fb4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000fb6:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fba:	4620      	mov	r0, r4
24000fbc:	2302      	movs	r3, #2
24000fbe:	9500      	str	r5, [sp, #0]
24000fc0:	f006 ff14 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000fc4:	4630      	mov	r0, r6
24000fc6:	f004 f9e1 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000fca:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fcc:	aa03      	add	r2, sp, #12
24000fce:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000fd0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fd4:	4620      	mov	r0, r4
24000fd6:	2302      	movs	r3, #2
24000fd8:	9500      	str	r5, [sp, #0]
24000fda:	f006 ff07 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000fde:	4630      	mov	r0, r6
24000fe0:	f004 f9d4 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000fe4:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fe6:	aa03      	add	r2, sp, #12
24000fe8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000fea:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000fee:	4620      	mov	r0, r4
24000ff0:	2302      	movs	r3, #2
24000ff2:	9500      	str	r5, [sp, #0]
24000ff4:	f006 fefa 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000ff8:	4630      	mov	r0, r6
24000ffa:	f004 f9c7 	bl	2400538c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000ffe:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001002:	aa03      	add	r2, sp, #12
24001004:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24001006:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400100a:	4620      	mov	r0, r4
2400100c:	2134      	movs	r1, #52	; 0x34
2400100e:	9500      	str	r5, [sp, #0]
24001010:	f006 feec 	bl	24007dec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001014:	4630      	mov	r0, r6
24001016:	f004 f9b9 	bl	2400538c <HAL_Delay>
}
2400101a:	b004      	add	sp, #16
2400101c:	bd70      	pop	{r4, r5, r6, pc}
2400101e:	bf00      	nop

24001020 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001020:	f44f 4388 	mov.w	r3, #17408	; 0x4400

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001024:	2200      	movs	r2, #0
24001026:	2102      	movs	r1, #2
24001028:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
2400102a:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
2400102e:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24001030:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24001034:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24001036:	f044 0401 	orr.w	r4, r4, #1
2400103a:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
2400103e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24001042:	f003 0301 	and.w	r3, r3, #1
24001046:	9301      	str	r3, [sp, #4]
24001048:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
2400104a:	f004 f9cf 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
2400104e:	200b      	movs	r0, #11
24001050:	f004 fa0e 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
24001054:	2200      	movs	r2, #0
24001056:	2105      	movs	r1, #5
24001058:	200c      	movs	r0, #12
2400105a:	f004 f9c7 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
2400105e:	200c      	movs	r0, #12
24001060:	f004 fa06 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
24001064:	2200      	movs	r2, #0
24001066:	2106      	movs	r1, #6
24001068:	200d      	movs	r0, #13
2400106a:	f004 f9bf 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
2400106e:	200d      	movs	r0, #13
24001070:	f004 f9fe 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
24001074:	2200      	movs	r2, #0
24001076:	2104      	movs	r1, #4
24001078:	200e      	movs	r0, #14
2400107a:	f004 f9b7 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
2400107e:	200e      	movs	r0, #14
24001080:	f004 f9f6 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
24001084:	2200      	movs	r2, #0
24001086:	2103      	movs	r1, #3
24001088:	200f      	movs	r0, #15
2400108a:	f004 f9af 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
2400108e:	200f      	movs	r0, #15
24001090:	f004 f9ee 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
24001094:	2200      	movs	r2, #0
24001096:	2101      	movs	r1, #1
24001098:	2011      	movs	r0, #17
2400109a:	f004 f9a7 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
2400109e:	2011      	movs	r0, #17
240010a0:	f004 f9e6 	bl	24005470 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
240010a4:	2066      	movs	r0, #102	; 0x66
240010a6:	2200      	movs	r2, #0
240010a8:	2108      	movs	r1, #8
240010aa:	f004 f99f 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
240010ae:	2066      	movs	r0, #102	; 0x66

}
240010b0:	b002      	add	sp, #8
240010b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
240010b6:	f004 b9db 	b.w	24005470 <HAL_NVIC_EnableIRQ>
240010ba:	bf00      	nop

240010bc <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240010bc:	f244 2064 	movw	r0, #16996	; 0x4264
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240010c0:	2208      	movs	r2, #8
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240010c2:	f244 1340 	movw	r3, #16704	; 0x4140
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
240010c6:	2100      	movs	r1, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240010c8:	f2c2 0001 	movt	r0, #8193	; 0x2001
240010cc:	f2c5 2300 	movt	r3, #20992	; 0x5200
{
240010d0:	b530      	push	{r4, r5, lr}
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
240010d2:	2401      	movs	r4, #1
{
240010d4:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
240010d6:	6041      	str	r1, [r0, #4]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240010d8:	2520      	movs	r5, #32
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 8;
240010da:	9201      	str	r2, [sp, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
240010dc:	61c1      	str	r1, [r0, #28]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240010de:	f44f 7180 	mov.w	r1, #256	; 0x100
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240010e2:	6003      	str	r3, [r0, #0]
  SdramTiming.LoadToActiveDelay = 2;
240010e4:	2302      	movs	r3, #2
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240010e6:	6105      	str	r5, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
240010e8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
240010ec:	9300      	str	r3, [sp, #0]
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
240010ee:	9306      	str	r3, [sp, #24]
  SdramTiming.WriteRecoveryTime = 3;
240010f0:	2302      	movs	r3, #2
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
240010f2:	6205      	str	r5, [r0, #32]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240010f4:	e9c0 4202 	strd	r4, r2, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240010f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
240010fc:	2440      	movs	r4, #64	; 0x40
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240010fe:	6242      	str	r2, [r0, #36]	; 0x24
  SdramTiming.SelfRefreshTime = 5;
24001100:	2205      	movs	r2, #5
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001102:	e9c0 4105 	strd	r4, r1, [r0, #20]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  SdramTiming.RowCycleDelay = 6;
2400110a:	2406      	movs	r4, #6
  SdramTiming.SelfRefreshTime = 5;
2400110c:	9202      	str	r2, [sp, #8]
  SdramTiming.WriteRecoveryTime = 3;
2400110e:	2203      	movs	r2, #3
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001110:	6281      	str	r1, [r0, #40]	; 0x28

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001112:	4669      	mov	r1, sp
  SdramTiming.RowCycleDelay = 6;
24001114:	9403      	str	r4, [sp, #12]
  SdramTiming.WriteRecoveryTime = 3;
24001116:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
2400111a:	f00b fabd 	bl	2400c698 <HAL_SDRAM_Init>
2400111e:	b908      	cbnz	r0, 24001124 <MX_FMC_Init+0x68>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24001120:	b009      	add	sp, #36	; 0x24
24001122:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
24001124:	f002 fd26 	bl	24003b74 <Error_Handler>
}
24001128:	b009      	add	sp, #36	; 0x24
2400112a:	bd30      	pop	{r4, r5, pc}

2400112c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
2400112c:	f244 2360 	movw	r3, #16992	; 0x4260
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001130:	2200      	movs	r2, #0
  if (FMC_Initialized) {
24001132:	f2c2 0301 	movt	r3, #8193	; 0x2001
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24001136:	b5f0      	push	{r4, r5, r6, r7, lr}
24001138:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
2400113a:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400113c:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
2400113e:	2c00      	cmp	r4, #0
24001140:	d168      	bne.n	24001214 <HAL_SDRAM_MspInit+0xe8>
  __HAL_RCC_FMC_CLK_ENABLE();
24001142:	f44f 4288 	mov.w	r2, #17408	; 0x4400
  FMC_Initialized = 1;
24001146:	2101      	movs	r1, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001148:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400114c:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
2400114e:	f6c5 0202 	movt	r2, #22530	; 0x5802
  FMC_Initialized = 1;
24001152:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001154:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001156:	f6c5 0002 	movt	r0, #22530	; 0x5802
  __HAL_RCC_FMC_CLK_ENABLE();
2400115a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400115e:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001160:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001164:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001168:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
2400116c:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001170:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
24001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001176:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24001178:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
2400117a:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
2400117c:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400117e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001180:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001184:	f006 fba4 	bl	240078d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001188:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
2400118c:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001190:	a902      	add	r1, sp, #8
24001192:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001196:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001198:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400119a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400119c:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240011a0:	f006 fb96 	bl	240078d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240011a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
240011a8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240011ac:	a902      	add	r1, sp, #8
240011ae:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
240011b2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240011b4:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240011b8:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240011bc:	f006 fb88 	bl	240078d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240011c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
240011c4:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240011c8:	a902      	add	r1, sp, #8
240011ca:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
240011ce:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240011d0:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240011d4:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240011d8:	f006 fb7a 	bl	240078d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240011dc:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
240011e0:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240011e4:	a902      	add	r1, sp, #8
240011e6:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
240011ea:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240011ec:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240011f0:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240011f4:	f006 fb6c 	bl	240078d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240011f8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
240011fc:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001200:	a902      	add	r1, sp, #8
24001202:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001206:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001208:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
2400120a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400120c:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001210:	f006 fb5e 	bl	240078d0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24001214:	b009      	add	sp, #36	; 0x24
24001216:	bdf0      	pop	{r4, r5, r6, r7, pc}

24001218 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001218:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
2400121c:	2182      	movs	r1, #130	; 0x82
{
2400121e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001222:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
24001226:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001228:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
2400122a:	f44f 6680 	mov.w	r6, #1024	; 0x400

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
2400122e:	f44f 58c0 	mov.w	r8, #6144	; 0x1800

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001232:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001236:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001238:	f6c5 0602 	movt	r6, #22530	; 0x5802
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
2400123c:	f6c5 0802 	movt	r8, #22530	; 0x5802

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001240:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001242:	f6c5 0a02 	movt	sl, #22530	; 0x5802
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001246:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001248:	f44f 6940 	mov.w	r9, #3072	; 0xc00
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
2400124c:	f6c5 0702 	movt	r7, #22530	; 0x5802
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001250:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001252:	f6c5 0902 	movt	r9, #22530	; 0x5802
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001256:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
2400125a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
2400125e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001262:	f042 0210 	orr.w	r2, r2, #16
24001266:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400126a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400126e:	f002 0210 	and.w	r2, r2, #16
24001272:	9201      	str	r2, [sp, #4]
24001274:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001276:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400127a:	f042 0202 	orr.w	r2, r2, #2
2400127e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001282:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001286:	f002 0202 	and.w	r2, r2, #2
2400128a:	9202      	str	r2, [sp, #8]
2400128c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
2400128e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001296:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400129a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400129e:	f002 0240 	and.w	r2, r2, #64	; 0x40
240012a2:	9203      	str	r2, [sp, #12]
240012a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
240012a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012aa:	f042 0208 	orr.w	r2, r2, #8
240012ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240012b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012b6:	f002 0208 	and.w	r2, r2, #8
240012ba:	9204      	str	r2, [sp, #16]
240012bc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
240012be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012c2:	f042 0204 	orr.w	r2, r2, #4
240012c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240012ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012ce:	f002 0204 	and.w	r2, r2, #4
240012d2:	9205      	str	r2, [sp, #20]
240012d4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
240012d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012da:	f042 0201 	orr.w	r2, r2, #1
240012de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240012e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012e6:	f002 0201 	and.w	r2, r2, #1
240012ea:	9206      	str	r2, [sp, #24]
240012ec:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
240012ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240012f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240012fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240012fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
24001302:	9207      	str	r2, [sp, #28]
24001304:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24001306:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400130a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400130e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001312:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001316:	f002 0280 	and.w	r2, r2, #128	; 0x80
2400131a:	9208      	str	r2, [sp, #32]
2400131c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
2400131e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001322:	f042 0220 	orr.w	r2, r2, #32
24001326:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
2400132a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
2400132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001330:	f003 0320 	and.w	r3, r3, #32
24001334:	9309      	str	r3, [sp, #36]	; 0x24
24001336:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001338:	f006 fc2a 	bl	24007b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
2400133c:	4622      	mov	r2, r4
2400133e:	4640      	mov	r0, r8
24001340:	f44f 7100 	mov.w	r1, #512	; 0x200
24001344:	f006 fc24 	bl	24007b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001348:	4622      	mov	r2, r4
2400134a:	4650      	mov	r0, sl
2400134c:	2193      	movs	r1, #147	; 0x93
2400134e:	f006 fc1f 	bl	24007b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001352:	4622      	mov	r2, r4
24001354:	4638      	mov	r0, r7
24001356:	2109      	movs	r1, #9
24001358:	f006 fc1a 	bl	24007b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
2400135c:	4622      	mov	r2, r4
2400135e:	4648      	mov	r0, r9
24001360:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001364:	f006 fc14 	bl	24007b90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001368:	f247 02c0 	movw	r2, #28864	; 0x70c0
2400136c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400136e:	a90a      	add	r1, sp, #40	; 0x28
24001370:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001372:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001374:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001378:	f006 faaa 	bl	240078d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
2400137c:	f243 02f8 	movw	r2, #12536	; 0x30f8
24001380:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001382:	a90a      	add	r1, sp, #40	; 0x28
24001384:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001386:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001388:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400138c:	f006 faa0 	bl	240078d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001390:	f44f 421f 	mov.w	r2, #40704	; 0x9f00
24001394:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001396:	a90a      	add	r1, sp, #40	; 0x28
24001398:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400139a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
2400139c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240013a0:	f006 fa96 	bl	240078d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
240013a4:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240013a6:	a90a      	add	r1, sp, #40	; 0x28
240013a8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
240013aa:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240013ac:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240013ae:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240013b2:	f006 fa8d 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
240013b6:	2300      	movs	r3, #0
240013b8:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240013ba:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_6;
240013bc:	f2c0 0321 	movt	r3, #33	; 0x21
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240013c0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240013c2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
240013c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240013c8:	f006 fa82 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
240013cc:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240013d0:	a90a      	add	r1, sp, #40	; 0x28
240013d2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
240013d4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240013d6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240013d8:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240013dc:	f006 fa78 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240013e0:	f24e 026c 	movw	r2, #57452	; 0xe06c
240013e4:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240013e6:	a90a      	add	r1, sp, #40	; 0x28
240013e8:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240013ea:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240013ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240013f0:	f006 fa6e 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240013f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
240013f8:	f44f 6210 	mov.w	r2, #2304	; 0x900
240013fc:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240013fe:	a90a      	add	r1, sp, #40	; 0x28
24001400:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001404:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001406:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
2400140a:	f006 fa61 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
2400140e:	2393      	movs	r3, #147	; 0x93
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001410:	4650      	mov	r0, sl
24001412:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001414:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001416:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001418:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400141c:	f006 fa58 	bl	240078d0 <HAL_GPIO_Init>
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001420:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001424:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001428:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400142a:	a90a      	add	r1, sp, #40	; 0x28
2400142c:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001430:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001432:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001436:	f006 fa4b 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
2400143a:	2300      	movs	r3, #0
2400143c:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400143e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001440:	f2c0 0331 	movt	r3, #49	; 0x31
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001444:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001446:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001448:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400144c:	f006 fa40 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001450:	f242 4205 	movw	r2, #9221	; 0x2405
24001454:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001456:	a90a      	add	r1, sp, #40	; 0x28
24001458:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400145a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
2400145c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001460:	f006 fa36 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001464:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001468:	22c0      	movs	r2, #192	; 0xc0
2400146a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400146c:	a90a      	add	r1, sp, #40	; 0x28
2400146e:	f6c5 0002 	movt	r0, #22530	; 0x5802
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001472:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001474:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001478:	f006 fa2a 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
2400147c:	2202      	movs	r2, #2
2400147e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001480:	a90a      	add	r1, sp, #40	; 0x28
24001482:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001484:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001486:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400148a:	f006 fa21 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
2400148e:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001490:	a90a      	add	r1, sp, #40	; 0x28
24001492:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001494:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001496:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001498:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400149c:	f006 fa18 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
240014a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240014a4:	4648      	mov	r0, r9
240014a6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
240014a8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240014aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240014ac:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240014b0:	f006 fa0e 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
240014b4:	2204      	movs	r2, #4
240014b6:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240014b8:	4638      	mov	r0, r7
240014ba:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240014bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
240014be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240014c2:	f006 fa05 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
240014c6:	2300      	movs	r3, #0
240014c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240014cc:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
240014ce:	f2c0 0311 	movt	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240014d2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240014d4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
240014d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240014da:	f006 f9f9 	bl	240078d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
240014de:	2300      	movs	r3, #0
240014e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240014e4:	4630      	mov	r0, r6
240014e6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240014e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
240014ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240014ee:	f006 f9ef 	bl	240078d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
240014f2:	4622      	mov	r2, r4
240014f4:	4621      	mov	r1, r4
240014f6:	2017      	movs	r0, #23
240014f8:	f003 ff78 	bl	240053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
240014fc:	2017      	movs	r0, #23
240014fe:	f003 ffb7 	bl	24005470 <HAL_NVIC_EnableIRQ>

}
24001502:	b010      	add	sp, #64	; 0x40
24001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24001508 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001508:	f244 3088 	movw	r0, #17288	; 0x4388
2400150c:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
  hi2c1.Init.Timing = 0x0050174F;
24001510:	f241 724f 	movw	r2, #5967	; 0x174f
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001514:	2300      	movs	r3, #0
  hi2c1.Instance = I2C1;
24001516:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400151a:	f2c4 0100 	movt	r1, #16384	; 0x4000
  hi2c1.Init.Timing = 0x0050174F;
2400151e:	f2c0 0250 	movt	r2, #80	; 0x50
{
24001522:	b510      	push	{r4, lr}
  hi2c1.Init.OwnAddress1 = 68;
24001524:	2444      	movs	r4, #68	; 0x44
  hi2c1.Instance = I2C1;
24001526:	6001      	str	r1, [r0, #0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001528:	2101      	movs	r1, #1
  hi2c1.Init.OwnAddress1 = 68;
2400152a:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
2400152e:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
24001532:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001536:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
2400153a:	f006 fbf9 	bl	24007d30 <HAL_I2C_Init>
2400153e:	b9a0      	cbnz	r0, 2400156a <MX_I2C1_Init+0x62>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001540:	f244 3088 	movw	r0, #17288	; 0x4388
24001544:	2100      	movs	r1, #0
24001546:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400154a:	f007 f9af 	bl	240088ac <HAL_I2CEx_ConfigAnalogFilter>
2400154e:	b9b0      	cbnz	r0, 2400157e <MX_I2C1_Init+0x76>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001550:	f244 3088 	movw	r0, #17288	; 0x4388
24001554:	2100      	movs	r1, #0
24001556:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400155a:	f007 f9db 	bl	24008914 <HAL_I2CEx_ConfigDigitalFilter>
2400155e:	b938      	cbnz	r0, 24001570 <MX_I2C1_Init+0x68>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001560:	2001      	movs	r0, #1
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24001562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001566:	f007 ba01 	b.w	2400896c <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
2400156a:	f002 fb03 	bl	24003b74 <Error_Handler>
2400156e:	e7e7      	b.n	24001540 <MX_I2C1_Init+0x38>
    Error_Handler();
24001570:	f002 fb00 	bl	24003b74 <Error_Handler>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001574:	2001      	movs	r0, #1
}
24001576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
2400157a:	f007 b9f7 	b.w	2400896c <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
2400157e:	f002 faf9 	bl	24003b74 <Error_Handler>
24001582:	e7e5      	b.n	24001550 <MX_I2C1_Init+0x48>

24001584 <MX_I2C2_Init>:
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001584:	f244 30dc 	movw	r0, #17372	; 0x43dc
24001588:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
  hi2c2.Init.Timing = 0x00B03FDB;
2400158c:	f643 72db 	movw	r2, #16347	; 0x3fdb
  hi2c2.Init.OwnAddress1 = 0;
24001590:	2300      	movs	r3, #0
  hi2c2.Instance = I2C2;
24001592:	f2c2 0001 	movt	r0, #8193	; 0x2001
24001596:	f2c4 0100 	movt	r1, #16384	; 0x4000
  hi2c2.Init.Timing = 0x00B03FDB;
2400159a:	f2c0 02b0 	movt	r2, #176	; 0xb0
{
2400159e:	b510      	push	{r4, lr}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
240015a0:	2401      	movs	r4, #1
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
240015a2:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
240015a4:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
240015a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
240015ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
240015b0:	f006 fbbe 	bl	24007d30 <HAL_I2C_Init>
240015b4:	b980      	cbnz	r0, 240015d8 <MX_I2C2_Init+0x54>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240015b6:	f244 30dc 	movw	r0, #17372	; 0x43dc
240015ba:	2100      	movs	r1, #0
240015bc:	f2c2 0001 	movt	r0, #8193	; 0x2001
240015c0:	f007 f974 	bl	240088ac <HAL_I2CEx_ConfigAnalogFilter>
240015c4:	b978      	cbnz	r0, 240015e6 <MX_I2C2_Init+0x62>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240015c6:	f244 30dc 	movw	r0, #17372	; 0x43dc
240015ca:	2100      	movs	r1, #0
240015cc:	f2c2 0001 	movt	r0, #8193	; 0x2001
240015d0:	f007 f9a0 	bl	24008914 <HAL_I2CEx_ConfigDigitalFilter>
240015d4:	b918      	cbnz	r0, 240015de <MX_I2C2_Init+0x5a>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
240015d6:	bd10      	pop	{r4, pc}
    Error_Handler();
240015d8:	f002 facc 	bl	24003b74 <Error_Handler>
240015dc:	e7eb      	b.n	240015b6 <MX_I2C2_Init+0x32>
}
240015de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240015e2:	f002 bac7 	b.w	24003b74 <Error_Handler>
    Error_Handler();
240015e6:	f002 fac5 	bl	24003b74 <Error_Handler>
240015ea:	e7ec      	b.n	240015c6 <MX_I2C2_Init+0x42>

240015ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
240015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
240015ee:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240015f0:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240015f2:	22c0      	movs	r2, #192	; 0xc0
{
240015f4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240015f6:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240015f8:	9106      	str	r1, [sp, #24]
240015fa:	e9cd 1107 	strd	r1, r1, [sp, #28]
240015fe:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001602:	f01b f835 	bl	2401c670 <memset>
  if(i2cHandle->Instance==I2C1)
24001606:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
2400160a:	6822      	ldr	r2, [r4, #0]
2400160c:	f2c4 0300 	movt	r3, #16384	; 0x4000
24001610:	429a      	cmp	r2, r3
24001612:	d008      	beq.n	24001626 <HAL_I2C_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001614:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
24001618:	f2c4 0300 	movt	r3, #16384	; 0x4000
2400161c:	429a      	cmp	r2, r3
2400161e:	f000 8097 	beq.w	24001750 <HAL_I2C_MspInit+0x164>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001622:	b03d      	add	sp, #244	; 0xf4
24001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001626:	2208      	movs	r2, #8
24001628:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400162a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
2400162c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001630:	f008 f974 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
24001634:	2800      	cmp	r0, #0
24001636:	f040 80f4 	bne.w	24001822 <HAL_I2C_MspInit+0x236>
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400163a:	f44f 4588 	mov.w	r5, #17408	; 0x4400
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400163e:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001642:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001644:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001646:	f6c5 0502 	movt	r5, #22530	; 0x5802
    hdma_i2c1_rx.Instance = DMA1_Stream3;
2400164a:	f244 2698 	movw	r6, #17048	; 0x4298
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400164e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001652:	f2c2 0601 	movt	r6, #8193	; 0x2001
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001656:	f043 0302 	orr.w	r3, r3, #2
2400165a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
2400165e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001662:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001664:	f003 0302 	and.w	r3, r3, #2
24001668:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400166a:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400166c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400166e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001672:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001676:	2200      	movs	r2, #0
24001678:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400167a:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400167e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001682:	f006 f925 	bl	240078d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001686:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400168a:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
2400168c:	2121      	movs	r1, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
2400168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001692:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001694:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24001698:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400169c:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
2400169e:	2258      	movs	r2, #88	; 0x58
    __HAL_RCC_I2C1_CLK_ENABLE();
240016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
240016a4:	6071      	str	r1, [r6, #4]
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240016a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240016aa:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
240016ac:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240016ae:	2300      	movs	r3, #0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240016b0:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
240016b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240016b6:	60b3      	str	r3, [r6, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240016b8:	60f3      	str	r3, [r6, #12]
    __HAL_RCC_I2C1_CLK_ENABLE();
240016ba:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
240016bc:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240016be:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240016c2:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
240016c6:	f44f 7380 	mov.w	r3, #256	; 0x100
240016ca:	61f3      	str	r3, [r6, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240016cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
240016d0:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
240016d2:	f004 f863 	bl	2400579c <HAL_DMA_Init>
240016d6:	2800      	cmp	r0, #0
240016d8:	f040 80a0 	bne.w	2400181c <HAL_I2C_MspInit+0x230>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240016dc:	f244 3510 	movw	r5, #17168	; 0x4310
240016e0:	2270      	movs	r2, #112	; 0x70
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240016e2:	2122      	movs	r1, #34	; 0x22
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240016e4:	2300      	movs	r3, #0
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240016e6:	f2c2 0501 	movt	r5, #8193	; 0x2001
240016ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
240016ee:	63e6      	str	r6, [r4, #60]	; 0x3c
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240016f0:	6069      	str	r1, [r5, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240016f2:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240016f4:	602a      	str	r2, [r5, #0]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
240016f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
240016fa:	4628      	mov	r0, r5
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
240016fc:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
240016fe:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001700:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001702:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001706:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
2400170a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400170e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001712:	e9c5 3106 	strd	r3, r1, [r5, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001716:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001718:	2104      	movs	r1, #4
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400171a:	2201      	movs	r2, #1
2400171c:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001720:	f004 f83c 	bl	2400579c <HAL_DMA_Init>
24001724:	2800      	cmp	r0, #0
24001726:	d176      	bne.n	24001816 <HAL_I2C_MspInit+0x22a>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001728:	2200      	movs	r2, #0
2400172a:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
2400172c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
2400172e:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001730:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001732:	f003 fe5b 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
24001736:	201f      	movs	r0, #31
24001738:	f003 fe9a 	bl	24005470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
2400173c:	2200      	movs	r2, #0
2400173e:	2101      	movs	r1, #1
24001740:	2020      	movs	r0, #32
24001742:	f003 fe53 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
24001746:	2020      	movs	r0, #32
24001748:	f003 fe92 	bl	24005470 <HAL_NVIC_EnableIRQ>
}
2400174c:	b03d      	add	sp, #244	; 0xf4
2400174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001750:	2208      	movs	r2, #8
24001752:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001754:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001756:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400175a:	f008 f8df 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
2400175e:	2800      	cmp	r0, #0
24001760:	d162      	bne.n	24001828 <HAL_I2C_MspInit+0x23c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001762:	f44f 4488 	mov.w	r4, #17408	; 0x4400
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001766:	2610      	movs	r6, #16
24001768:	2712      	movs	r7, #18
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400176a:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400176e:	f6c5 0402 	movt	r4, #22530	; 0x5802
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001772:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001774:	a906      	add	r1, sp, #24
24001776:	f6c5 0002 	movt	r0, #22530	; 0x5802
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400177a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24001782:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001786:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400178e:	9303      	str	r3, [sp, #12]
24001790:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001792:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001796:	f043 0302 	orr.w	r3, r3, #2
2400179a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400179e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240017a2:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
240017a4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240017a8:	e9cd 6706 	strd	r6, r7, [sp, #24]
240017ac:	2600      	movs	r6, #0
240017ae:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
240017b0:	9304      	str	r3, [sp, #16]
240017b2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240017b4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240017b8:	f006 f88a 	bl	240078d0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240017bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240017c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240017c4:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240017c6:	a906      	add	r1, sp, #24
240017c8:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240017cc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240017ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
240017d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240017d6:	f006 f87b 	bl	240078d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
240017da:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240017de:	2200      	movs	r2, #0
240017e0:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
240017e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240017e6:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
240017e8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240017ec:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240017f4:	9305      	str	r3, [sp, #20]
240017f6:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240017f8:	f003 fdf8 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
240017fc:	2021      	movs	r0, #33	; 0x21
240017fe:	f003 fe37 	bl	24005470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
24001802:	2200      	movs	r2, #0
24001804:	2101      	movs	r1, #1
24001806:	2022      	movs	r0, #34	; 0x22
24001808:	f003 fdf0 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
2400180c:	2022      	movs	r0, #34	; 0x22
2400180e:	f003 fe2f 	bl	24005470 <HAL_NVIC_EnableIRQ>
}
24001812:	b03d      	add	sp, #244	; 0xf4
24001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24001816:	f002 f9ad 	bl	24003b74 <Error_Handler>
2400181a:	e785      	b.n	24001728 <HAL_I2C_MspInit+0x13c>
      Error_Handler();
2400181c:	f002 f9aa 	bl	24003b74 <Error_Handler>
24001820:	e75c      	b.n	240016dc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
24001822:	f002 f9a7 	bl	24003b74 <Error_Handler>
24001826:	e708      	b.n	2400163a <HAL_I2C_MspInit+0x4e>
      Error_Handler();
24001828:	f002 f9a4 	bl	24003b74 <Error_Handler>
2400182c:	e799      	b.n	24001762 <HAL_I2C_MspInit+0x176>
2400182e:	bf00      	nop

24001830 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
24001830:	b530      	push	{r4, r5, lr}
24001832:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24001834:	224c      	movs	r2, #76	; 0x4c
24001836:	2100      	movs	r1, #0
24001838:	a80c      	add	r0, sp, #48	; 0x30
2400183a:	f01a ff19 	bl	2401c670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2400183e:	2220      	movs	r2, #32
24001840:	2100      	movs	r1, #0
24001842:	a804      	add	r0, sp, #16
24001844:	f01a ff14 	bl	2401c670 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24001848:	2002      	movs	r0, #2
2400184a:	f007 f8a9 	bl	240089a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2400184e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001852:	2100      	movs	r1, #0
24001854:	f44f 4290 	mov.w	r2, #18432	; 0x4800
24001858:	f6c5 0300 	movt	r3, #22528	; 0x5800
2400185c:	9101      	str	r1, [sp, #4]
2400185e:	f6c5 0202 	movt	r2, #22530	; 0x5802
24001862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24001864:	f021 0101 	bic.w	r1, r1, #1
24001868:	62d9      	str	r1, [r3, #44]	; 0x2c
2400186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400186c:	f003 0301 	and.w	r3, r3, #1
24001870:	9301      	str	r3, [sp, #4]
24001872:	6993      	ldr	r3, [r2, #24]
24001874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24001878:	6193      	str	r3, [r2, #24]
2400187a:	6993      	ldr	r3, [r2, #24]
2400187c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001880:	9301      	str	r3, [sp, #4]
24001882:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001884:	6993      	ldr	r3, [r2, #24]
24001886:	0499      	lsls	r1, r3, #18
24001888:	d5fc      	bpl.n	24001884 <SystemClock_Config+0x54>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400188a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400188e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24001892:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24001896:	f041 0102 	orr.w	r1, r1, #2
2400189a:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400189e:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240018a4:	f003 0302 	and.w	r3, r3, #2
240018a8:	9302      	str	r3, [sp, #8]
240018aa:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240018ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
240018b0:	9103      	str	r1, [sp, #12]
240018b2:	6991      	ldr	r1, [r2, #24]
240018b4:	f6c5 0300 	movt	r3, #22528	; 0x5800
240018b8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240018bc:	6191      	str	r1, [r2, #24]
240018be:	6992      	ldr	r2, [r2, #24]
240018c0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240018c4:	9203      	str	r2, [sp, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240018c6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240018ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240018cc:	f6c5 0202 	movt	r2, #22530	; 0x5802
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240018d0:	f041 0101 	orr.w	r1, r1, #1
240018d4:	62d9      	str	r1, [r3, #44]	; 0x2c
240018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240018d8:	f003 0301 	and.w	r3, r3, #1
240018dc:	9303      	str	r3, [sp, #12]
240018de:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240018e0:	6993      	ldr	r3, [r2, #24]
240018e2:	049b      	lsls	r3, r3, #18
240018e4:	d5fc      	bpl.n	240018e0 <SystemClock_Config+0xb0>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240018e6:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240018e8:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240018ea:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
240018ec:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
240018ee:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240018f0:	f2c0 0101 	movt	r1, #1
240018f4:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240018f6:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240018f8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
240018fa:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240018fc:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240018fe:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24001902:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 60;
24001904:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
24001906:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400190a:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400190c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24001910:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24001912:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24001914:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24001918:	f007 f8fc 	bl	24008b14 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400191c:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400191e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24001920:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24001924:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24001926:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24001928:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2400192a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400192c:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400192e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24001930:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24001932:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24001936:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400193a:	f007 fcef 	bl	2400931c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400193e:	b021      	add	sp, #132	; 0x84
24001940:	bd30      	pop	{r4, r5, pc}
24001942:	bf00      	nop

24001944 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24001944:	b530      	push	{r4, r5, lr}
24001946:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001948:	f44f 7480 	mov.w	r4, #256	; 0x100
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400194c:	22a0      	movs	r2, #160	; 0xa0
2400194e:	2100      	movs	r1, #0
24001950:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001952:	f2c0 1401 	movt	r4, #257	; 0x101
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001956:	f01a fe8b 	bl	2401c670 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
2400195a:	2500      	movs	r5, #0
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400195c:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2N = 37;
  PeriphClkInitStruct.PLL2.PLL2P = 8;
2400195e:	2208      	movs	r2, #8
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24001960:	200c      	movs	r0, #12
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24001962:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001964:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
24001966:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 4;
24001968:	2104      	movs	r1, #4
  PeriphClkInitStruct.PLL3.PLL3N = 12;
2400196a:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
2400196c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24001970:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24001972:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
24001974:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001976:	e9cd 4500 	strd	r4, r5, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 37;
2400197a:	2425      	movs	r4, #37	; 0x25
  PeriphClkInitStruct.PLL2.PLL2R = 3;
2400197c:	25c0      	movs	r5, #192	; 0xc0
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
2400197e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24001982:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24001984:	f640 1138 	movw	r1, #2360	; 0x938
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24001988:	2410      	movs	r4, #16
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
2400198e:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24001992:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.PLL2.PLL2R = 3;
24001996:	2403      	movs	r4, #3
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
24001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400199c:	4668      	mov	r0, sp
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400199e:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240019a0:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240019a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240019a6:	f007 ffb9 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240019aa:	b031      	add	sp, #196	; 0xc4
240019ac:	bd30      	pop	{r4, r5, pc}
240019ae:	bf00      	nop

240019b0 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240019b0:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240019b2:	2301      	movs	r3, #1
240019b4:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
240019b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
240019bc:	b002      	add	sp, #8
240019be:	4770      	bx	lr

240019c0 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
240019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240019c4:	2301      	movs	r3, #1
{
240019c6:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
240019c8:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
240019cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
240019d0:	b94b      	cbnz	r3, 240019e6 <getPresetNamesFromSDCard+0x26>
240019d2:	f244 4a8c 	movw	sl, #17548	; 0x448c
240019d6:	f2c2 0a01 	movt	sl, #8193	; 0x2001
			}

		}

	}
	diskBusy = 0;
240019da:	2300      	movs	r3, #0
240019dc:	f88a 3000 	strb.w	r3, [sl]
	return;
}
240019e0:	b009      	add	sp, #36	; 0x24
240019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240019e6:	f240 0300 	movw	r3, #0
240019ea:	f2c3 0300 	movt	r3, #12288	; 0x3000
240019ee:	075a      	lsls	r2, r3, #29
240019f0:	f040 8313 	bne.w	2400201a <getPresetNamesFromSDCard+0x65a>
			audioOutBuffer[i] = 0;
240019f4:	2000      	movs	r0, #0
240019f6:	2100      	movs	r1, #0
240019f8:	f503 6280 	add.w	r2, r3, #1024	; 0x400
240019fc:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24001a00:	429a      	cmp	r2, r3
24001a02:	d1fb      	bne.n	240019fc <getPresetNamesFromSDCard+0x3c>
		diskBusy = 1;
24001a04:	f244 4a8c 	movw	sl, #17548	; 0x448c
		loadFailed = 0;
24001a08:	f248 6370 	movw	r3, #34416	; 0x8670
24001a0c:	2400      	movs	r4, #0
		diskBusy = 1;
24001a0e:	2501      	movs	r5, #1
		loadFailed = 0;
24001a10:	f2c2 0301 	movt	r3, #8193	; 0x2001
		diskBusy = 1;
24001a14:	f2c2 0a01 	movt	sl, #8193	; 0x2001
		disk_initialize(0);
24001a18:	4620      	mov	r0, r4
		loadFailed = 0;
24001a1a:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
24001a1c:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
24001a20:	f00d f800 	bl	2400ea24 <disk_initialize>
	    disk_status(0);
24001a24:	4620      	mov	r0, r4
24001a26:	f00c fff1 	bl	2400ea0c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24001a2a:	f64d 6194 	movw	r1, #56980	; 0xde94
24001a2e:	f64d 2034 	movw	r0, #55860	; 0xda34
24001a32:	462a      	mov	r2, r5
24001a34:	f2c2 0101 	movt	r1, #8193	; 0x2001
24001a38:	f2c2 0001 	movt	r0, #8193	; 0x2001
24001a3c:	f00f fa78 	bl	24010f30 <f_mount>
24001a40:	2800      	cmp	r0, #0
24001a42:	d1ca      	bne.n	240019da <getPresetNamesFromSDCard+0x1a>
24001a44:	f24f 2658 	movw	r6, #62040	; 0xf258
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001a48:	f64d 6994 	movw	r9, #56980	; 0xde94
24001a4c:	f246 48f4 	movw	r8, #25844	; 0x64f4
24001a50:	f244 4754 	movw	r7, #17492	; 0x4454
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24001a54:	4605      	mov	r5, r0
24001a56:	f2c2 4601 	movt	r6, #9217	; 0x2401
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001a5a:	f2c2 0901 	movt	r9, #8193	; 0x2001
24001a5e:	f2c2 0801 	movt	r8, #8193	; 0x2001
24001a62:	f2c2 0701 	movt	r7, #8193	; 0x2001
24001a66:	e017      	b.n	24001a98 <getPresetNamesFromSDCard+0xd8>
					strcat(charBuf, "*.ebp");
24001a68:	aa02      	add	r2, sp, #8
24001a6a:	6830      	ldr	r0, [r6, #0]
24001a6c:	88b1      	ldrh	r1, [r6, #4]
24001a6e:	f10d 0c08 	add.w	ip, sp, #8
24001a72:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
24001a74:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
24001a76:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
24001a7a:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
24001a7c:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
24001a7e:	4661      	mov	r1, ip
24001a80:	f01a fe28 	bl	2401c6d4 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001a84:	ab05      	add	r3, sp, #20
24001a86:	464a      	mov	r2, r9
24001a88:	4641      	mov	r1, r8
24001a8a:	4638      	mov	r0, r7
24001a8c:	f00f ff70 	bl	24011970 <f_findfirst>
				if(res == FR_OK)
24001a90:	b358      	cbz	r0, 24001aea <getPresetNamesFromSDCard+0x12a>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24001a92:	3501      	adds	r5, #1
24001a94:	2d40      	cmp	r5, #64	; 0x40
24001a96:	d0a0      	beq.n	240019da <getPresetNamesFromSDCard+0x1a>
				itoa(i, charBuf, 10);
24001a98:	220a      	movs	r2, #10
24001a9a:	a902      	add	r1, sp, #8
24001a9c:	4628      	mov	r0, r5
24001a9e:	f01a fda3 	bl	2401c5e8 <itoa>
				int len = ((strlen(charBuf)));
24001aa2:	a802      	add	r0, sp, #8
24001aa4:	f7fe fc18 	bl	240002d8 <strlen>
				if (len == 1)
24001aa8:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001aaa:	4603      	mov	r3, r0
				if (len == 1)
24001aac:	d1dc      	bne.n	24001a68 <getPresetNamesFromSDCard+0xa8>
					finalString[2] = charBuf[1];
24001aae:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
24001ab2:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
24001ab4:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
24001ab8:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24001aba:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
24001abe:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
24001ac0:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
24001ac4:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
24001ac8:	f7fe fc06 	bl	240002d8 <strlen>
24001acc:	a905      	add	r1, sp, #20
24001ace:	4603      	mov	r3, r0
24001ad0:	88b2      	ldrh	r2, [r6, #4]
24001ad2:	4419      	add	r1, r3
24001ad4:	6830      	ldr	r0, [r6, #0]
24001ad6:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001ad8:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
24001ada:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001adc:	4638      	mov	r0, r7
24001ade:	464a      	mov	r2, r9
24001ae0:	4641      	mov	r1, r8
24001ae2:	f00f ff45 	bl	24011970 <f_findfirst>
				if(res == FR_OK)
24001ae6:	2800      	cmp	r0, #0
24001ae8:	d1d3      	bne.n	24001a92 <getPresetNamesFromSDCard+0xd2>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24001aea:	f64d 4b68 	movw	fp, #56424	; 0xdc68
24001aee:	f246 510a 	movw	r1, #25866	; 0x650a
24001af2:	2211      	movs	r2, #17
24001af4:	f2c2 0b01 	movt	fp, #8193	; 0x2001
24001af8:	f2c2 0101 	movt	r1, #8193	; 0x2001
24001afc:	4658      	mov	r0, fp
24001afe:	f00f fa65 	bl	24010fcc <f_open>
24001b02:	2800      	cmp	r0, #0
24001b04:	d1c5      	bne.n	24001a92 <getPresetNamesFromSDCard+0xd2>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24001b06:	f242 3480 	movw	r4, #9088	; 0x2380
24001b0a:	ab01      	add	r3, sp, #4
24001b0c:	f8db 200c 	ldr.w	r2, [fp, #12]
24001b10:	4658      	mov	r0, fp
24001b12:	f2c3 0404 	movt	r4, #12292	; 0x3004
24001b16:	4621      	mov	r1, r4
24001b18:	f00f fbc0 	bl	2401129c <f_read>
						f_close(&SDFile);
24001b1c:	4658      	mov	r0, fp
24001b1e:	f00f fe27 	bl	24011770 <f_close>
						if (buffer[bufferIndex] == 17)
24001b22:	7822      	ldrb	r2, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
24001b24:	f242 0100 	movw	r1, #8192	; 0x2000
24001b28:	ebc5 0cc5 	rsb	ip, r5, r5, lsl #3
						if (buffer[bufferIndex] == 17)
24001b2c:	f1a2 0211 	sub.w	r2, r2, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001b30:	20c8      	movs	r0, #200	; 0xc8
							presetNamesArray[i][j] = buffer[bufferIndex];
24001b32:	f2c3 0104 	movt	r1, #12292	; 0x3004
						if (buffer[bufferIndex] == 17)
24001b36:	fab2 f282 	clz	r2, r2
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001b3a:	fb05 f000 	mul.w	r0, r5, r0
						if (buffer[bufferIndex] == 17)
24001b3e:	0952      	lsrs	r2, r2, #5
24001b40:	0093      	lsls	r3, r2, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
24001b42:	f814 e022 	ldrb.w	lr, [r4, r2, lsl #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001b46:	f243 3280 	movw	r2, #13184	; 0x3380
							presetNamesArray[i][j] = buffer[bufferIndex];
24001b4a:	f801 e01c 	strb.w	lr, [r1, ip, lsl #1]
24001b4e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
24001b52:	f103 0c01 	add.w	ip, r3, #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001b56:	f2c3 0204 	movt	r2, #12292	; 0x3004
							presetNamesArray[i][j] = buffer[bufferIndex];
24001b5a:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b5e:	f881 c001 	strb.w	ip, [r1, #1]
24001b62:	f103 0c02 	add.w	ip, r3, #2
24001b66:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b6a:	f881 c002 	strb.w	ip, [r1, #2]
24001b6e:	f103 0c03 	add.w	ip, r3, #3
24001b72:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b76:	f881 c003 	strb.w	ip, [r1, #3]
24001b7a:	f103 0c04 	add.w	ip, r3, #4
24001b7e:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b82:	f881 c004 	strb.w	ip, [r1, #4]
24001b86:	f103 0c05 	add.w	ip, r3, #5
24001b8a:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b8e:	f881 c005 	strb.w	ip, [r1, #5]
24001b92:	f103 0c06 	add.w	ip, r3, #6
24001b96:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001b9a:	f881 c006 	strb.w	ip, [r1, #6]
24001b9e:	f103 0c07 	add.w	ip, r3, #7
24001ba2:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001ba6:	f881 c007 	strb.w	ip, [r1, #7]
24001baa:	f103 0c08 	add.w	ip, r3, #8
24001bae:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001bb2:	f881 c008 	strb.w	ip, [r1, #8]
24001bb6:	f103 0c09 	add.w	ip, r3, #9
24001bba:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001bbe:	f881 c009 	strb.w	ip, [r1, #9]
24001bc2:	f103 0c0a 	add.w	ip, r3, #10
24001bc6:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001bca:	f881 c00a 	strb.w	ip, [r1, #10]
24001bce:	f103 0c0b 	add.w	ip, r3, #11
24001bd2:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001bd6:	f881 c00b 	strb.w	ip, [r1, #11]
24001bda:	f103 0c0c 	add.w	ip, r3, #12
24001bde:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001be2:	f881 c00c 	strb.w	ip, [r1, #12]
24001be6:	f103 0c0d 	add.w	ip, r3, #13
24001bea:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001bee:	f881 c00d 	strb.w	ip, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001bf2:	f103 010e 	add.w	r1, r3, #14
24001bf6:	5c61      	ldrb	r1, [r4, r1]
24001bf8:	5411      	strb	r1, [r2, r0]
24001bfa:	f103 010f 	add.w	r1, r3, #15
24001bfe:	4402      	add	r2, r0
24001c00:	5c61      	ldrb	r1, [r4, r1]
24001c02:	7051      	strb	r1, [r2, #1]
24001c04:	f103 0110 	add.w	r1, r3, #16
24001c08:	5c61      	ldrb	r1, [r4, r1]
24001c0a:	7091      	strb	r1, [r2, #2]
24001c0c:	f103 0111 	add.w	r1, r3, #17
24001c10:	5c61      	ldrb	r1, [r4, r1]
24001c12:	70d1      	strb	r1, [r2, #3]
24001c14:	f103 0112 	add.w	r1, r3, #18
24001c18:	5c61      	ldrb	r1, [r4, r1]
24001c1a:	7111      	strb	r1, [r2, #4]
24001c1c:	f103 0113 	add.w	r1, r3, #19
24001c20:	5c61      	ldrb	r1, [r4, r1]
24001c22:	7151      	strb	r1, [r2, #5]
24001c24:	f103 0114 	add.w	r1, r3, #20
24001c28:	5c61      	ldrb	r1, [r4, r1]
24001c2a:	7191      	strb	r1, [r2, #6]
24001c2c:	f103 0115 	add.w	r1, r3, #21
24001c30:	5c61      	ldrb	r1, [r4, r1]
24001c32:	71d1      	strb	r1, [r2, #7]
24001c34:	f103 0116 	add.w	r1, r3, #22
24001c38:	5c61      	ldrb	r1, [r4, r1]
24001c3a:	7211      	strb	r1, [r2, #8]
24001c3c:	f103 0117 	add.w	r1, r3, #23
24001c40:	5c61      	ldrb	r1, [r4, r1]
24001c42:	7291      	strb	r1, [r2, #10]
24001c44:	f103 0118 	add.w	r1, r3, #24
24001c48:	5c61      	ldrb	r1, [r4, r1]
24001c4a:	72d1      	strb	r1, [r2, #11]
24001c4c:	f103 0119 	add.w	r1, r3, #25
24001c50:	5c61      	ldrb	r1, [r4, r1]
24001c52:	7311      	strb	r1, [r2, #12]
24001c54:	f103 011a 	add.w	r1, r3, #26
24001c58:	5c61      	ldrb	r1, [r4, r1]
24001c5a:	7351      	strb	r1, [r2, #13]
24001c5c:	f103 011b 	add.w	r1, r3, #27
24001c60:	5c61      	ldrb	r1, [r4, r1]
24001c62:	7391      	strb	r1, [r2, #14]
24001c64:	f103 011c 	add.w	r1, r3, #28
24001c68:	5c61      	ldrb	r1, [r4, r1]
24001c6a:	73d1      	strb	r1, [r2, #15]
24001c6c:	f103 011d 	add.w	r1, r3, #29
24001c70:	5c61      	ldrb	r1, [r4, r1]
24001c72:	7411      	strb	r1, [r2, #16]
24001c74:	f103 011e 	add.w	r1, r3, #30
24001c78:	5c61      	ldrb	r1, [r4, r1]
24001c7a:	7451      	strb	r1, [r2, #17]
24001c7c:	f103 011f 	add.w	r1, r3, #31
24001c80:	5c61      	ldrb	r1, [r4, r1]
24001c82:	7491      	strb	r1, [r2, #18]
24001c84:	f103 0120 	add.w	r1, r3, #32
24001c88:	5c61      	ldrb	r1, [r4, r1]
24001c8a:	7511      	strb	r1, [r2, #20]
24001c8c:	f103 0121 	add.w	r1, r3, #33	; 0x21
24001c90:	5c61      	ldrb	r1, [r4, r1]
24001c92:	7551      	strb	r1, [r2, #21]
24001c94:	f103 0122 	add.w	r1, r3, #34	; 0x22
24001c98:	5c61      	ldrb	r1, [r4, r1]
24001c9a:	7591      	strb	r1, [r2, #22]
24001c9c:	f103 0123 	add.w	r1, r3, #35	; 0x23
24001ca0:	5c61      	ldrb	r1, [r4, r1]
24001ca2:	75d1      	strb	r1, [r2, #23]
24001ca4:	f103 0124 	add.w	r1, r3, #36	; 0x24
24001ca8:	5c61      	ldrb	r1, [r4, r1]
24001caa:	7611      	strb	r1, [r2, #24]
24001cac:	f103 0125 	add.w	r1, r3, #37	; 0x25
24001cb0:	5c61      	ldrb	r1, [r4, r1]
24001cb2:	7651      	strb	r1, [r2, #25]
24001cb4:	f103 0126 	add.w	r1, r3, #38	; 0x26
24001cb8:	5c61      	ldrb	r1, [r4, r1]
24001cba:	7691      	strb	r1, [r2, #26]
24001cbc:	f103 0127 	add.w	r1, r3, #39	; 0x27
24001cc0:	5c61      	ldrb	r1, [r4, r1]
24001cc2:	76d1      	strb	r1, [r2, #27]
24001cc4:	f103 0128 	add.w	r1, r3, #40	; 0x28
24001cc8:	5c61      	ldrb	r1, [r4, r1]
24001cca:	7711      	strb	r1, [r2, #28]
24001ccc:	f103 0129 	add.w	r1, r3, #41	; 0x29
24001cd0:	5c61      	ldrb	r1, [r4, r1]
24001cd2:	7791      	strb	r1, [r2, #30]
24001cd4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
24001cd8:	5c61      	ldrb	r1, [r4, r1]
24001cda:	77d1      	strb	r1, [r2, #31]
24001cdc:	f103 012b 	add.w	r1, r3, #43	; 0x2b
24001ce0:	5c61      	ldrb	r1, [r4, r1]
24001ce2:	f882 1020 	strb.w	r1, [r2, #32]
24001ce6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
24001cea:	5c61      	ldrb	r1, [r4, r1]
24001cec:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
24001cf0:	f103 012d 	add.w	r1, r3, #45	; 0x2d
24001cf4:	5c61      	ldrb	r1, [r4, r1]
24001cf6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
24001cfa:	f103 012e 	add.w	r1, r3, #46	; 0x2e
24001cfe:	5c61      	ldrb	r1, [r4, r1]
24001d00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
24001d04:	f103 012f 	add.w	r1, r3, #47	; 0x2f
24001d08:	5c61      	ldrb	r1, [r4, r1]
24001d0a:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
24001d0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
24001d12:	5c61      	ldrb	r1, [r4, r1]
24001d14:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
24001d18:	f103 0131 	add.w	r1, r3, #49	; 0x31
24001d1c:	5c61      	ldrb	r1, [r4, r1]
24001d1e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
24001d22:	f103 0132 	add.w	r1, r3, #50	; 0x32
24001d26:	5c61      	ldrb	r1, [r4, r1]
24001d28:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
24001d2c:	f103 0133 	add.w	r1, r3, #51	; 0x33
24001d30:	5c61      	ldrb	r1, [r4, r1]
24001d32:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
24001d36:	f103 0134 	add.w	r1, r3, #52	; 0x34
24001d3a:	5c61      	ldrb	r1, [r4, r1]
24001d3c:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
24001d40:	f103 0135 	add.w	r1, r3, #53	; 0x35
24001d44:	5c61      	ldrb	r1, [r4, r1]
24001d46:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
24001d4a:	f103 0136 	add.w	r1, r3, #54	; 0x36
24001d4e:	5c61      	ldrb	r1, [r4, r1]
24001d50:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
24001d54:	f103 0137 	add.w	r1, r3, #55	; 0x37
24001d58:	5c61      	ldrb	r1, [r4, r1]
24001d5a:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
24001d5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
24001d62:	5c61      	ldrb	r1, [r4, r1]
24001d64:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
24001d68:	f103 0139 	add.w	r1, r3, #57	; 0x39
24001d6c:	5c61      	ldrb	r1, [r4, r1]
24001d6e:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
24001d72:	f103 013a 	add.w	r1, r3, #58	; 0x3a
24001d76:	5c61      	ldrb	r1, [r4, r1]
24001d78:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
24001d7c:	f103 013b 	add.w	r1, r3, #59	; 0x3b
24001d80:	5c61      	ldrb	r1, [r4, r1]
24001d82:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
24001d86:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24001d8a:	5c61      	ldrb	r1, [r4, r1]
24001d8c:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
24001d90:	f103 013d 	add.w	r1, r3, #61	; 0x3d
24001d94:	5c61      	ldrb	r1, [r4, r1]
24001d96:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
24001d9a:	f103 013e 	add.w	r1, r3, #62	; 0x3e
24001d9e:	5c61      	ldrb	r1, [r4, r1]
24001da0:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
24001da4:	f103 013f 	add.w	r1, r3, #63	; 0x3f
24001da8:	5c61      	ldrb	r1, [r4, r1]
24001daa:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
24001dae:	f103 0140 	add.w	r1, r3, #64	; 0x40
24001db2:	5c61      	ldrb	r1, [r4, r1]
24001db4:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
24001db8:	f103 0141 	add.w	r1, r3, #65	; 0x41
24001dbc:	5c61      	ldrb	r1, [r4, r1]
24001dbe:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
24001dc2:	f103 0142 	add.w	r1, r3, #66	; 0x42
24001dc6:	5c61      	ldrb	r1, [r4, r1]
24001dc8:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
24001dcc:	f103 0143 	add.w	r1, r3, #67	; 0x43
24001dd0:	5c61      	ldrb	r1, [r4, r1]
24001dd2:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
24001dd6:	f103 0144 	add.w	r1, r3, #68	; 0x44
24001dda:	5c61      	ldrb	r1, [r4, r1]
24001ddc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
24001de0:	f103 0145 	add.w	r1, r3, #69	; 0x45
24001de4:	5c61      	ldrb	r1, [r4, r1]
24001de6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
24001dea:	f103 0146 	add.w	r1, r3, #70	; 0x46
24001dee:	5c61      	ldrb	r1, [r4, r1]
24001df0:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
24001df4:	f103 0147 	add.w	r1, r3, #71	; 0x47
24001df8:	5c61      	ldrb	r1, [r4, r1]
24001dfa:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
24001dfe:	f103 0148 	add.w	r1, r3, #72	; 0x48
24001e02:	5c61      	ldrb	r1, [r4, r1]
24001e04:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
24001e08:	f103 0149 	add.w	r1, r3, #73	; 0x49
24001e0c:	5c61      	ldrb	r1, [r4, r1]
24001e0e:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
24001e12:	f103 014a 	add.w	r1, r3, #74	; 0x4a
24001e16:	5c61      	ldrb	r1, [r4, r1]
24001e18:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
24001e1c:	f103 014b 	add.w	r1, r3, #75	; 0x4b
24001e20:	5c61      	ldrb	r1, [r4, r1]
24001e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
24001e26:	f103 014c 	add.w	r1, r3, #76	; 0x4c
24001e2a:	5c61      	ldrb	r1, [r4, r1]
24001e2c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
24001e30:	f103 014d 	add.w	r1, r3, #77	; 0x4d
24001e34:	5c61      	ldrb	r1, [r4, r1]
24001e36:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
24001e3a:	f103 014e 	add.w	r1, r3, #78	; 0x4e
24001e3e:	5c61      	ldrb	r1, [r4, r1]
24001e40:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
24001e44:	f103 014f 	add.w	r1, r3, #79	; 0x4f
24001e48:	5c61      	ldrb	r1, [r4, r1]
24001e4a:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
24001e4e:	f103 0150 	add.w	r1, r3, #80	; 0x50
24001e52:	5c61      	ldrb	r1, [r4, r1]
24001e54:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
24001e58:	f103 0151 	add.w	r1, r3, #81	; 0x51
24001e5c:	5c61      	ldrb	r1, [r4, r1]
24001e5e:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
24001e62:	f103 0152 	add.w	r1, r3, #82	; 0x52
24001e66:	5c61      	ldrb	r1, [r4, r1]
24001e68:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
24001e6c:	f103 0153 	add.w	r1, r3, #83	; 0x53
24001e70:	5c61      	ldrb	r1, [r4, r1]
24001e72:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
24001e76:	f103 0154 	add.w	r1, r3, #84	; 0x54
24001e7a:	5c61      	ldrb	r1, [r4, r1]
24001e7c:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
24001e80:	f103 0155 	add.w	r1, r3, #85	; 0x55
24001e84:	5c61      	ldrb	r1, [r4, r1]
24001e86:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
24001e8a:	f103 0156 	add.w	r1, r3, #86	; 0x56
24001e8e:	5c61      	ldrb	r1, [r4, r1]
24001e90:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
24001e94:	f103 0157 	add.w	r1, r3, #87	; 0x57
24001e98:	5c61      	ldrb	r1, [r4, r1]
24001e9a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
24001e9e:	f103 0158 	add.w	r1, r3, #88	; 0x58
24001ea2:	5c61      	ldrb	r1, [r4, r1]
24001ea4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
24001ea8:	f103 0159 	add.w	r1, r3, #89	; 0x59
24001eac:	5c61      	ldrb	r1, [r4, r1]
24001eae:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
24001eb2:	f103 015a 	add.w	r1, r3, #90	; 0x5a
24001eb6:	5c61      	ldrb	r1, [r4, r1]
24001eb8:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
24001ebc:	f103 015b 	add.w	r1, r3, #91	; 0x5b
24001ec0:	5c61      	ldrb	r1, [r4, r1]
24001ec2:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
24001ec6:	f103 015c 	add.w	r1, r3, #92	; 0x5c
24001eca:	5c61      	ldrb	r1, [r4, r1]
24001ecc:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
24001ed0:	f103 015d 	add.w	r1, r3, #93	; 0x5d
24001ed4:	5c61      	ldrb	r1, [r4, r1]
24001ed6:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
24001eda:	f103 015e 	add.w	r1, r3, #94	; 0x5e
24001ede:	5c61      	ldrb	r1, [r4, r1]
24001ee0:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
24001ee4:	f103 015f 	add.w	r1, r3, #95	; 0x5f
24001ee8:	5c61      	ldrb	r1, [r4, r1]
24001eea:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
24001eee:	f103 0160 	add.w	r1, r3, #96	; 0x60
24001ef2:	5c61      	ldrb	r1, [r4, r1]
24001ef4:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
24001ef8:	f103 0161 	add.w	r1, r3, #97	; 0x61
24001efc:	5c61      	ldrb	r1, [r4, r1]
24001efe:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
24001f02:	f103 0162 	add.w	r1, r3, #98	; 0x62
24001f06:	5c61      	ldrb	r1, [r4, r1]
24001f08:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
24001f0c:	f103 0163 	add.w	r1, r3, #99	; 0x63
24001f10:	5c61      	ldrb	r1, [r4, r1]
24001f12:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
24001f16:	f103 0164 	add.w	r1, r3, #100	; 0x64
24001f1a:	5c61      	ldrb	r1, [r4, r1]
24001f1c:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
24001f20:	f103 0165 	add.w	r1, r3, #101	; 0x65
24001f24:	5c61      	ldrb	r1, [r4, r1]
24001f26:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
24001f2a:	f103 0166 	add.w	r1, r3, #102	; 0x66
24001f2e:	5c61      	ldrb	r1, [r4, r1]
24001f30:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
24001f34:	f103 0167 	add.w	r1, r3, #103	; 0x67
24001f38:	5c61      	ldrb	r1, [r4, r1]
24001f3a:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
24001f3e:	f103 0168 	add.w	r1, r3, #104	; 0x68
24001f42:	5c61      	ldrb	r1, [r4, r1]
24001f44:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
24001f48:	f103 0169 	add.w	r1, r3, #105	; 0x69
24001f4c:	5c61      	ldrb	r1, [r4, r1]
24001f4e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
24001f52:	f103 016a 	add.w	r1, r3, #106	; 0x6a
24001f56:	5c61      	ldrb	r1, [r4, r1]
24001f58:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
24001f5c:	f103 016b 	add.w	r1, r3, #107	; 0x6b
24001f60:	5c61      	ldrb	r1, [r4, r1]
24001f62:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
24001f66:	f103 016c 	add.w	r1, r3, #108	; 0x6c
24001f6a:	5c61      	ldrb	r1, [r4, r1]
24001f6c:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
24001f70:	f103 016d 	add.w	r1, r3, #109	; 0x6d
24001f74:	5c61      	ldrb	r1, [r4, r1]
24001f76:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
24001f7a:	f103 016e 	add.w	r1, r3, #110	; 0x6e
24001f7e:	5c61      	ldrb	r1, [r4, r1]
24001f80:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
24001f84:	f103 016f 	add.w	r1, r3, #111	; 0x6f
24001f88:	5c61      	ldrb	r1, [r4, r1]
24001f8a:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
24001f8e:	f103 0170 	add.w	r1, r3, #112	; 0x70
24001f92:	5c61      	ldrb	r1, [r4, r1]
24001f94:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
24001f98:	f103 0171 	add.w	r1, r3, #113	; 0x71
24001f9c:	5c61      	ldrb	r1, [r4, r1]
24001f9e:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
24001fa2:	f103 0172 	add.w	r1, r3, #114	; 0x72
24001fa6:	5c61      	ldrb	r1, [r4, r1]
24001fa8:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
24001fac:	f103 0173 	add.w	r1, r3, #115	; 0x73
24001fb0:	5c61      	ldrb	r1, [r4, r1]
24001fb2:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
24001fb6:	f103 0174 	add.w	r1, r3, #116	; 0x74
24001fba:	5c61      	ldrb	r1, [r4, r1]
24001fbc:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
24001fc0:	f103 0175 	add.w	r1, r3, #117	; 0x75
24001fc4:	5c61      	ldrb	r1, [r4, r1]
24001fc6:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
24001fca:	f103 0176 	add.w	r1, r3, #118	; 0x76
24001fce:	5c61      	ldrb	r1, [r4, r1]
24001fd0:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
24001fd4:	f103 0177 	add.w	r1, r3, #119	; 0x77
24001fd8:	5c61      	ldrb	r1, [r4, r1]
24001fda:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
24001fde:	f103 0178 	add.w	r1, r3, #120	; 0x78
24001fe2:	5c61      	ldrb	r1, [r4, r1]
24001fe4:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
24001fe8:	f103 0179 	add.w	r1, r3, #121	; 0x79
24001fec:	5c61      	ldrb	r1, [r4, r1]
24001fee:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
24001ff2:	f103 017a 	add.w	r1, r3, #122	; 0x7a
24001ff6:	5c61      	ldrb	r1, [r4, r1]
24001ff8:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
24001ffc:	f103 017b 	add.w	r1, r3, #123	; 0x7b
24002000:	5c61      	ldrb	r1, [r4, r1]
24002002:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
24002006:	f103 017c 	add.w	r1, r3, #124	; 0x7c
2400200a:	337d      	adds	r3, #125	; 0x7d
2400200c:	5c61      	ldrb	r1, [r4, r1]
2400200e:	5ce3      	ldrb	r3, [r4, r3]
24002010:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
24002014:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
24002018:	e53b      	b.n	24001a92 <getPresetNamesFromSDCard+0xd2>
			audioOutBuffer[i] = 0;
2400201a:	2200      	movs	r2, #0
2400201c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
24002020:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002024:	3308      	adds	r3, #8
24002026:	4299      	cmp	r1, r3
24002028:	d1fa      	bne.n	24002020 <getPresetNamesFromSDCard+0x660>
2400202a:	e4eb      	b.n	24001a04 <getPresetNamesFromSDCard+0x44>

2400202c <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
2400202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002030:	f244 2464 	movw	r4, #16996	; 0x4264
{
24002034:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002036:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
24002038:	2600      	movs	r6, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400203a:	f2c2 0401 	movt	r4, #8193	; 0x2001
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400203e:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002040:	a902      	add	r1, sp, #8
24002042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002046:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002048:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
2400204c:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400204e:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
24002052:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002056:	f00a fb49 	bl	2400c6ec <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
2400205a:	4628      	mov	r0, r5
2400205c:	f003 f996 	bl	2400538c <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002060:	a902      	add	r1, sp, #8
24002062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002066:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002068:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
2400206a:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
2400206e:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002072:	f00a fb3b 	bl	2400c6ec <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002076:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002078:	a902      	add	r1, sp, #8
2400207a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400207e:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002080:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002082:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002084:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
24002086:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400208a:	f00a fb2f 	bl	2400c6ec <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
2400208e:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002092:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002094:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002096:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
2400209c:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400209e:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
240020a0:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
240020a2:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
240020a4:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240020a8:	f00a fb20 	bl	2400c6ec <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
240020ac:	f240 21fa 	movw	r1, #762	; 0x2fa
240020b0:	4620      	mov	r0, r4
240020b2:	f00a fb3b 	bl	2400c72c <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
240020b6:	b006      	add	sp, #24
240020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

240020bc <setEffectsFunctions>:
volatile uint8_t chorusAssignment = 255;
volatile uint8_t delayAssignment = 255;

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
240020bc:	f244 43e0 	movw	r3, #17632	; 0x44e0
240020c0:	2201      	movs	r2, #1
240020c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
240020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	effectsActive[i] = 1;
240020c8:	545a      	strb	r2, [r3, r1]
	switch (effectType)
240020ca:	2815      	cmp	r0, #21
240020cc:	d83f      	bhi.n	2400214e <setEffectsFunctions+0x92>
240020ce:	e8df f010 	tbh	[pc, r0, lsl #1]
240020d2:	038d      	.short	0x038d
240020d4:	0347036a 	.word	0x0347036a
240020d8:	03150324 	.word	0x03150324
240020dc:	02cd02f0 	.word	0x02cd02f0
240020e0:	021c02a0 	.word	0x021c02a0
240020e4:	027901ef 	.word	0x027901ef
240020e8:	016101c2 	.word	0x016101c2
240020ec:	0117013c 	.word	0x0117013c
240020f0:	00cd00f2 	.word	0x00cd00f2
240020f4:	008700aa 	.word	0x008700aa
240020f8:	00160064 	.word	0x00160064
240020fc:	003f      	.short	0x003f
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
			  effectSetters[i].setParam4 = &blankFunction;;
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  case FXNotch :
			  effectTick[i] = FXVZbandrejectTick;
240020fe:	f24d 3324 	movw	r3, #54052	; 0xd324
24002102:	f24b 3001 	movw	r0, #45825	; 0xb301
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002106:	f244 4290 	movw	r2, #17552	; 0x4490
2400210a:	f24b 5401 	movw	r4, #46337	; 0xb501
			  effectTick[i] = FXVZbandrejectTick;
2400210e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002112:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002116:	eb01 0581 	add.w	r5, r1, r1, lsl #2
2400211a:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = FXVZbandrejectTick;
2400211e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002122:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002126:	f24b 6041 	movw	r0, #46657	; 0xb641
			  effectSetters[i].setParam3 = &FXNotchParam3;;
2400212a:	f64b 0141 	movw	r1, #47169	; 0xb841
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400212e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
24002132:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002136:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;;
2400213a:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXNotchParam3;;
2400213e:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam4 = &blankFunction;;
24002142:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002146:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;;
2400214a:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
2400214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXLadderLowpassTick;
24002150:	f24d 3324 	movw	r3, #54052	; 0xd324
24002154:	f24b 3221 	movw	r2, #45857	; 0xb321
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002158:	f244 4090 	movw	r0, #17552	; 0x4490
2400215c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
24002160:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002164:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002168:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400216c:	f24b 5441 	movw	r4, #46401	; 0xb541
			  effectTick[i] = &FXLadderLowpassTick;
24002170:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
24002174:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002178:	f64b 0181 	movw	r1, #47233	; 0xb881
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400217c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
24002180:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002184:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002188:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400218c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
24002190:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;;
24002192:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002194:	e9c2 1302 	strd	r1, r3, [r2, #8]
}
24002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = FXVZhighshelfTick;
2400219a:	f24d 3324 	movw	r3, #54052	; 0xd324
2400219e:	f24b 20e1 	movw	r0, #45793	; 0xb2e1
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
240021a2:	f244 4290 	movw	r2, #17552	; 0x4490
240021a6:	f24b 44c1 	movw	r4, #46273	; 0xb4c1
			  effectTick[i] = FXVZhighshelfTick;
240021aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
240021ae:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
240021b2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240021b6:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = FXVZhighshelfTick;
240021ba:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
240021be:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
240021c2:	f24b 6001 	movw	r0, #46593	; 0xb601
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
240021c6:	f64b 0101 	movw	r1, #47105	; 0xb801
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
240021ca:	eb02 0385 	add.w	r3, r2, r5, lsl #2
240021ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
240021d2:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;;
240021d6:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
240021da:	f2c0 0100 	movt	r1, #0
240021de:	e7b0      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &FXVZlowshelfTick;
240021e0:	f24d 3324 	movw	r3, #54052	; 0xd324
240021e4:	f24b 20c1 	movw	r0, #45761	; 0xb2c1
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
240021e8:	f244 4290 	movw	r2, #17552	; 0x4490
240021ec:	f24b 4481 	movw	r4, #46209	; 0xb481
			  effectTick[i] = &FXVZlowshelfTick;
240021f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
240021f4:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
240021f8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240021fc:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &FXVZlowshelfTick;
24002200:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002204:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24002208:	f24b 50c1 	movw	r0, #46529	; 0xb5c1
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
2400220c:	f24b 71c1 	movw	r1, #47041	; 0xb7c1
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002210:	eb02 0385 	add.w	r3, r2, r5, lsl #2
24002214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24002218:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
2400221c:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002220:	f2c0 0100 	movt	r1, #0
24002224:	e78d      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &FXVZpeakTick;
24002226:	f24d 3324 	movw	r3, #54052	; 0xd324
2400222a:	f24b 20a1 	movw	r0, #45729	; 0xb2a1
			  effectSetters[i].setParam1 = &FXPeakParam1;
2400222e:	f244 4290 	movw	r2, #17552	; 0x4490
24002232:	f24b 4441 	movw	r4, #46145	; 0xb441
			  effectTick[i] = &FXVZpeakTick;
24002236:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400223a:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &FXPeakParam1;
2400223e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
24002242:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &FXVZpeakTick;
24002246:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
2400224a:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &FXPeakParam2;
2400224e:	f24b 5081 	movw	r0, #46465	; 0xb581
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002252:	f24b 7181 	movw	r1, #46977	; 0xb781
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002256:	eb02 0385 	add.w	r3, r2, r5, lsl #2
2400225a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
2400225e:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
24002262:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002266:	f2c0 0100 	movt	r1, #0
2400226a:	e76a      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &FXdiodeLowpassTick;
2400226c:	f24d 3324 	movw	r3, #54052	; 0xd324
24002270:	f24b 2281 	movw	r2, #45697	; 0xb281
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002274:	f244 4090 	movw	r0, #17552	; 0x4490
24002278:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
2400227c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002280:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002284:	f2c2 0001 	movt	r0, #8193	; 0x2001
24002288:	f24b 4401 	movw	r4, #46081	; 0xb401
			  effectTick[i] = &FXdiodeLowpassTick;
2400228c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002290:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002294:	f24b 7141 	movw	r1, #46913	; 0xb741
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002298:	eb00 0285 	add.w	r2, r0, r5, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
2400229c:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240022a0:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240022a4:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240022a8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
240022ac:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
240022ae:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240022b0:	e9c2 1302 	strd	r1, r3, [r2, #8]
}
240022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXbandpassTick;
240022b6:	f24d 3324 	movw	r3, #54052	; 0xd324
240022ba:	f24b 2261 	movw	r2, #45665	; 0xb261
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240022be:	f244 4090 	movw	r0, #17552	; 0x4490
240022c2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
240022c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
240022ca:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240022ce:	f2c2 0001 	movt	r0, #8193	; 0x2001
240022d2:	f24b 34c1 	movw	r4, #46017	; 0xb3c1
			  effectTick[i] = &FXbandpassTick;
240022d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
240022da:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXBandpassParam3;
240022de:	f24b 7101 	movw	r1, #46849	; 0xb701
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240022e2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
240022e6:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240022ea:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &FXBandpassParam3;
240022ee:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240022f2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
240022f6:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
240022f8:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
240022fa:	e9c2 1302 	strd	r1, r3, [r2, #8]
}
240022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXhighpassTick;
24002300:	f24d 3324 	movw	r3, #54052	; 0xd324
24002304:	f24b 2241 	movw	r2, #45633	; 0xb241
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002308:	f244 4090 	movw	r0, #17552	; 0x4490
2400230c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24002310:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002314:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002318:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400231c:	f24b 3481 	movw	r4, #45953	; 0xb381
			  effectTick[i] = &FXhighpassTick;
24002320:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002324:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002328:	f24b 61c1 	movw	r1, #46785	; 0xb6c1
			  effectSetters[i].setParam1 = &FXHighpassParam1;
2400232c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002330:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002334:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002338:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &FXHighpassParam1;
2400233c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002340:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002342:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002344:	e9c2 1302 	strd	r1, r3, [r2, #8]
}
24002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXlowpassTick;
2400234a:	f24d 3324 	movw	r3, #54052	; 0xd324
2400234e:	f24b 2221 	movw	r2, #45601	; 0xb221
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002352:	f244 4090 	movw	r0, #17552	; 0x4490
24002356:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
2400235a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400235e:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002362:	f2c2 0001 	movt	r0, #8193	; 0x2001
24002366:	f24b 3441 	movw	r4, #45889	; 0xb341
			  effectTick[i] = &FXlowpassTick;
2400236a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
2400236e:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002372:	f24b 6181 	movw	r1, #46721	; 0xb681
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002376:	eb00 0285 	add.w	r2, r0, r5, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
2400237a:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam1 = &FXLowpassParam1;
2400237e:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002382:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002386:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
2400238a:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;;
2400238c:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
2400238e:	e9c2 1302 	strd	r1, r3, [r2, #8]
}
24002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  if (delayAssignment != 255)
24002394:	f240 60ac 	movw	r0, #1708	; 0x6ac
24002398:	f2c2 0000 	movt	r0, #8192	; 0x2000
2400239c:	7803      	ldrb	r3, [r0, #0]
2400239e:	2bff      	cmp	r3, #255	; 0xff
240023a0:	f000 8243 	beq.w	2400282a <setEffectsFunctions+0x76e>
				  effectTick[delayAssignment] = &blankTick;
240023a4:	f24d 3224 	movw	r2, #54052	; 0xd324
240023a8:	f64a 5381 	movw	r3, #44417	; 0xad81
240023ac:	7804      	ldrb	r4, [r0, #0]
240023ae:	f2c0 0300 	movt	r3, #0
240023b2:	f2c2 0201 	movt	r2, #8193	; 0x2001
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
240023b6:	7806      	ldrb	r6, [r0, #0]
				  effectTick[delayAssignment] = &blankTick;
240023b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
240023bc:	f244 4390 	movw	r3, #17552	; 0x4490
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
240023c0:	7805      	ldrb	r5, [r0, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
240023c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
240023c6:	7804      	ldrb	r4, [r0, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
240023c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
240023cc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
240023d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
240023d4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
240023d8:	eb03 0784 	add.w	r7, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
240023dc:	7804      	ldrb	r4, [r0, #0]
240023de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
240023e2:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
240023e6:	7804      	ldrb	r4, [r0, #0]
240023e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
240023ec:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
240023f0:	f242 0441 	movw	r4, #8257	; 0x2041
240023f4:	f2c0 0400 	movt	r4, #0
240023f8:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
240023fc:	606c      	str	r4, [r5, #4]
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
240023fe:	60bc      	str	r4, [r7, #8]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
24002400:	f8ce 400c 	str.w	r4, [lr, #12]
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
24002404:	f8cc 4010 	str.w	r4, [ip, #16]
			  delayAssignment = i;
24002408:	b2cc      	uxtb	r4, r1
			  effectSetters[i].setParam1 = &delayParam1;
2400240a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  delayAssignment = i;
2400240e:	7004      	strb	r4, [r0, #0]
			  effectTick[i] = &delayTick;
24002410:	f245 005d 	movw	r0, #20573	; 0x505d
			  effectSetters[i].setParam2 = &delayParam2;
24002414:	f64a 2461 	movw	r4, #43617	; 0xaa61
			  effectTick[i] = &delayTick;
24002418:	f2c2 4000 	movt	r0, #9216	; 0x2400
			  effectSetters[i].setParam2 = &delayParam2;
2400241c:	f2c0 0400 	movt	r4, #0
			  effectTick[i] = &delayTick;
24002420:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
24002424:	f64a 2121 	movw	r1, #43553	; 0xaa21
24002428:	eb03 0285 	add.w	r2, r3, r5, lsl #2
			  effectSetters[i].setParam3 = &delayParam3;
2400242c:	f64a 20c1 	movw	r0, #43713	; 0xaac1
			  effectSetters[i].setParam1 = &delayParam1;
24002430:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam3 = &delayParam3;
24002434:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &delayParam1;
24002438:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
			  effectSetters[i].setParam4 = &delayParam4;
2400243c:	f64a 3101 	movw	r1, #43777	; 0xab01
			  effectSetters[i].setParam5 = &delayParam5;
24002440:	f64a 3341 	movw	r3, #43841	; 0xab41
			  effectSetters[i].setParam4 = &delayParam4;
24002444:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam5 = &delayParam5;
24002448:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam3 = &delayParam3;
2400244c:	e9c2 4001 	strd	r4, r0, [r2, #4]
			  effectSetters[i].setParam5 = &delayParam5;
24002450:	e9c2 1303 	strd	r1, r3, [r2, #12]
}
24002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &wavefolderTick;
24002456:	f24d 3324 	movw	r3, #54052	; 0xd324
2400245a:	f24a 70e1 	movw	r0, #42977	; 0xa7e1
			  effectSetters[i].setParam1 = &wavefolderParam1;
2400245e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
24002462:	f244 4290 	movw	r2, #17552	; 0x4490
			  effectTick[i] = &wavefolderTick;
24002466:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400246a:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &wavefolderParam1;
2400246e:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectSetters[i].setParam2 = &offsetParam2;
24002472:	f24a 4461 	movw	r4, #42081	; 0xa461
			  effectTick[i] = &wavefolderTick;
24002476:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
2400247a:	f24a 01e1 	movw	r1, #41185	; 0xa0e1
			  effectSetters[i].setParam3 = &wavefolderParam3;
2400247e:	f24a 1021 	movw	r0, #41249	; 0xa121
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002482:	eb02 0385 	add.w	r3, r2, r5, lsl #2
24002486:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam2 = &offsetParam2;
2400248a:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &wavefolderParam3;
2400248e:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002492:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			  effectSetters[i].setParam4 = &param4Linear;
24002496:	f24a 61a1 	movw	r1, #42657	; 0xa6a1
			  effectSetters[i].setParam5 = &param5Linear;
2400249a:	f24a 62c1 	movw	r2, #42689	; 0xa6c1
			  effectSetters[i].setParam4 = &param4Linear;
2400249e:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam5 = &param5Linear;
240024a2:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam3 = &wavefolderParam3;
240024a6:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
240024aa:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
240024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &bcTick;
240024b0:	f24d 3324 	movw	r3, #54052	; 0xd324
240024b4:	f24b 10c1 	movw	r0, #45505	; 0xb1c1
			  effectSetters[i].setParam1 = &clipperGainSet;
240024b8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240024bc:	f244 4290 	movw	r2, #17552	; 0x4490
			  effectTick[i] = &bcTick;
240024c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
240024c4:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
240024c8:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectSetters[i].setParam2 = &param2BC;
240024cc:	f24a 64e1 	movw	r4, #42721	; 0xa6e1
			  effectTick[i] = &bcTick;
240024d0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240024d4:	f24a 01a1 	movw	r1, #41121	; 0xa0a1
240024d8:	eb02 0385 	add.w	r3, r2, r5, lsl #2
			  effectSetters[i].setParam3 = &param3BC;
240024dc:	f24a 7001 	movw	r0, #42753	; 0xa701
			  effectSetters[i].setParam1 = &clipperGainSet;
240024e0:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam2 = &param2BC;
240024e4:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &param3BC;
240024e8:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
240024ec:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			  effectSetters[i].setParam4 = &param4BC;
240024f0:	f24a 7141 	movw	r1, #42817	; 0xa741
			  effectSetters[i].setParam5 = &param5BC;
240024f4:	f24a 7261 	movw	r2, #42849	; 0xa761
			  effectSetters[i].setParam4 = &param4BC;
240024f8:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam5 = &param5BC;
240024fc:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam3 = &param3BC;
24002500:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5BC;
24002504:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  if (chorusAssignment != 255)
2400250a:	f240 60a4 	movw	r0, #1700	; 0x6a4
2400250e:	f2c2 0000 	movt	r0, #8192	; 0x2000
24002512:	7803      	ldrb	r3, [r0, #0]
24002514:	2bff      	cmp	r3, #255	; 0xff
24002516:	f000 8191 	beq.w	2400283c <setEffectsFunctions+0x780>
				  effectTick[chorusAssignment] = &blankTick;
2400251a:	f24d 3224 	movw	r2, #54052	; 0xd324
2400251e:	f64a 5381 	movw	r3, #44417	; 0xad81
24002522:	7804      	ldrb	r4, [r0, #0]
24002524:	f2c0 0300 	movt	r3, #0
24002528:	f2c2 0201 	movt	r2, #8193	; 0x2001
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
2400252c:	f890 c000 	ldrb.w	ip, [r0]
				  effectTick[chorusAssignment] = &blankTick;
24002530:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002534:	f244 4390 	movw	r3, #17552	; 0x4490
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002538:	7807      	ldrb	r7, [r0, #0]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
2400253a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
2400253e:	7804      	ldrb	r4, [r0, #0]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002540:	f2c2 0301 	movt	r3, #8193	; 0x2001
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002544:	eb07 0787 	add.w	r7, r7, r7, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002548:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
2400254c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002550:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
24002554:	7804      	ldrb	r4, [r0, #0]
24002556:	eb04 0484 	add.w	r4, r4, r4, lsl #2
2400255a:	eb03 0684 	add.w	r6, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
2400255e:	7804      	ldrb	r4, [r0, #0]
24002560:	eb04 0484 	add.w	r4, r4, r4, lsl #2
24002564:	eb03 0584 	add.w	r5, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002568:	f242 0441 	movw	r4, #8257	; 0x2041
2400256c:	f2c0 0400 	movt	r4, #0
24002570:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002574:	607c      	str	r4, [r7, #4]
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002576:	f8ce 4008 	str.w	r4, [lr, #8]
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
2400257a:	60f4      	str	r4, [r6, #12]
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
2400257c:	612c      	str	r4, [r5, #16]
			  effectTick[i] = &chorusTick;
2400257e:	f64a 3581 	movw	r5, #43905	; 0xab81
			  effectSetters[i].setParam1 = &chorusParam1;
24002582:	eb01 0681 	add.w	r6, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
24002586:	f2c0 0500 	movt	r5, #0
2400258a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
			  chorusAssignment = i;
2400258e:	b2c9      	uxtb	r1, r1
			  effectSetters[i].setParam1 = &chorusParam1;
24002590:	eb03 0286 	add.w	r2, r3, r6, lsl #2
			  chorusAssignment = i;
24002594:	7001      	strb	r1, [r0, #0]
			  effectSetters[i].setParam1 = &chorusParam1;
24002596:	f64a 1121 	movw	r1, #43297	; 0xa921
			  effectSetters[i].setParam2 = &chorusParam2;
2400259a:	f64a 1061 	movw	r0, #43361	; 0xa961
			  effectSetters[i].setParam5 = &blankFunction;
2400259e:	6114      	str	r4, [r2, #16]
			  effectSetters[i].setParam1 = &chorusParam1;
240025a0:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam2 = &chorusParam2;
240025a4:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &chorusParam1;
240025a8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
240025ac:	f64a 11a1 	movw	r1, #43425	; 0xa9a1
			  effectSetters[i].setParam4 = &chorusParam4;
240025b0:	f64a 13e1 	movw	r3, #43489	; 0xa9e1
			  effectSetters[i].setParam3 = &chorusParam3;
240025b4:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam4 = &chorusParam4;
240025b8:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam3 = &chorusParam3;
240025bc:	e9c2 0101 	strd	r0, r1, [r2, #4]
			  effectSetters[i].setParam4 = &chorusParam4;
240025c0:	60d3      	str	r3, [r2, #12]
}
240025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &tiltFilterTick;
240025c4:	f24d 3324 	movw	r3, #54052	; 0xd324
240025c8:	f64a 50a1 	movw	r0, #44449	; 0xada1
			  effectSetters[i].setParam1 = &tiltParam1;
240025cc:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240025d0:	f244 4290 	movw	r2, #17552	; 0x4490
			  effectTick[i] = &tiltFilterTick;
240025d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
240025d8:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &tiltParam1;
240025dc:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectSetters[i].setParam2 = &tiltParam2;
240025e0:	f24a 14a1 	movw	r4, #41377	; 0xa1a1
			  effectTick[i] = &tiltFilterTick;
240025e4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
240025e8:	f24a 1161 	movw	r1, #41313	; 0xa161
			  effectSetters[i].setParam3 = &tiltParam3;
240025ec:	f24a 2021 	movw	r0, #41505	; 0xa221
			  effectSetters[i].setParam1 = &tiltParam1;
240025f0:	eb02 0385 	add.w	r3, r2, r5, lsl #2
240025f4:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam2 = &tiltParam2;
240025f8:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &tiltParam3;
240025fc:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &tiltParam1;
24002600:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			  effectSetters[i].setParam4 = &tiltParam4;
24002604:	f24a 2161 	movw	r1, #41569	; 0xa261
			  effectSetters[i].setParam5 = &param5Linear;
24002608:	f24a 62c1 	movw	r2, #42689	; 0xa6c1
			  effectSetters[i].setParam4 = &tiltParam4;
2400260c:	f2c0 0100 	movt	r1, #0
24002610:	e747      	b.n	240024a2 <setEffectsFunctions+0x3e6>
			  effectTick[i] = &compressorTick;
24002612:	f24d 3324 	movw	r3, #54052	; 0xd324
24002616:	f24b 2001 	movw	r0, #45569	; 0xb201
			  effectSetters[i].setParam1 = &compressorParam1;
2400261a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
2400261e:	f244 4290 	movw	r2, #17552	; 0x4490
			  effectTick[i] = &compressorTick;
24002622:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002626:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &compressorParam1;
2400262a:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectSetters[i].setParam2 = &compressorParam2;
2400262e:	f24a 24c1 	movw	r4, #41665	; 0xa2c1
			  effectTick[i] = &compressorTick;
24002632:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
24002636:	f24a 21a1 	movw	r1, #41633	; 0xa2a1
2400263a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
			  effectSetters[i].setParam3 = &compressorParam3;
2400263e:	f24a 3001 	movw	r0, #41729	; 0xa301
			  effectSetters[i].setParam1 = &compressorParam1;
24002642:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam2 = &compressorParam2;
24002646:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &compressorParam3;
2400264a:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &compressorParam1;
2400264e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
			  effectSetters[i].setParam4 = &compressorParam4;
24002652:	f24a 3121 	movw	r1, #41761	; 0xa321
			  effectSetters[i].setParam5 = &compressorParam5;
24002656:	f24a 32c1 	movw	r2, #41921	; 0xa3c1
			  effectSetters[i].setParam4 = &compressorParam4;
2400265a:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam5 = &compressorParam5;
2400265e:	f2c0 0200 	movt	r2, #0
			  effectSetters[i].setParam3 = &compressorParam3;
24002662:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24002666:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
2400266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &shaperTick;
2400266c:	f24d 3324 	movw	r3, #54052	; 0xd324
24002670:	f64a 4081 	movw	r0, #44161	; 0xac81
			  effectSetters[i].setParam1 = &param1Linear;
24002674:	f244 4290 	movw	r2, #17552	; 0x4490
24002678:	f24a 0481 	movw	r4, #41089	; 0xa081
			  effectTick[i] = &shaperTick;
2400267c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002680:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &param1Linear;
24002684:	eb01 0581 	add.w	r5, r1, r1, lsl #2
24002688:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &shaperTick;
2400268c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &param1Linear;
24002690:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &offsetParam2;
24002694:	f24a 4061 	movw	r0, #42081	; 0xa461
			  effectSetters[i].setParam3 = &param3Linear;
24002698:	f24a 41c1 	movw	r1, #42177	; 0xa4c1
			  effectSetters[i].setParam1 = &param1Linear;
2400269c:	eb02 0385 	add.w	r3, r2, r5, lsl #2
240026a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240026a4:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
240026a8:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &param3Linear;
240026ac:	f2c0 0100 	movt	r1, #0
240026b0:	e547      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectSetters[i].setParam1 = &clipperGainSet;
240026b2:	f244 4090 	movw	r0, #17552	; 0x4490
			  effectTick[i] = &tanhTick;
240026b6:	f24d 3324 	movw	r3, #54052	; 0xd324
240026ba:	f64a 52e1 	movw	r2, #44513	; 0xade1
			  effectSetters[i].setParam1 = &clipperGainSet;
240026be:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240026c2:	f2c2 0001 	movt	r0, #8193	; 0x2001
			  effectTick[i] = &tanhTick;
240026c6:	f2c2 0301 	movt	r3, #8193	; 0x2001
240026ca:	f2c0 0200 	movt	r2, #0
240026ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240026d2:	f24a 04a1 	movw	r4, #41121	; 0xa0a1
			  effectSetters[i].setParam2 = &offsetParam2;
240026d6:	f24a 4161 	movw	r1, #42081	; 0xa461
			  effectSetters[i].setParam3 = &blankFunction;
240026da:	f242 0341 	movw	r3, #8257	; 0x2041
			  effectSetters[i].setParam1 = &clipperGainSet;
240026de:	eb00 0285 	add.w	r2, r0, r5, lsl #2
240026e2:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam3 = &blankFunction;
240026e6:	f2c0 0300 	movt	r3, #0
			  effectSetters[i].setParam2 = &offsetParam2;
240026ea:	f2c0 0100 	movt	r1, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
240026ee:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240026f2:	6051      	str	r1, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
240026f4:	6113      	str	r3, [r2, #16]
			  effectSetters[i].setParam4 = &blankFunction;
240026f6:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
240026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectSetters[i].setParam1 = &clipperGainSet;
240026fc:	f244 4090 	movw	r0, #17552	; 0x4490
			  effectTick[i] = &satTick;
24002700:	f24d 3324 	movw	r3, #54052	; 0xd324
24002704:	f24b 02e1 	movw	r2, #45281	; 0xb0e1
			  effectSetters[i].setParam1 = &clipperGainSet;
24002708:	eb01 0581 	add.w	r5, r1, r1, lsl #2
2400270c:	f2c2 0001 	movt	r0, #8193	; 0x2001
			  effectTick[i] = &satTick;
24002710:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002714:	f2c0 0200 	movt	r2, #0
24002718:	e7d9      	b.n	240026ce <setEffectsFunctions+0x612>
			  effectTick[i] = &polynomialShaperTick;
2400271a:	f24d 3324 	movw	r3, #54052	; 0xd324
2400271e:	f24b 0001 	movw	r0, #45057	; 0xb001
			  effectSetters[i].setParam1 = &clipperGainSet;
24002722:	f244 4290 	movw	r2, #17552	; 0x4490
24002726:	f24a 04a1 	movw	r4, #41121	; 0xa0a1
			  effectTick[i] = &polynomialShaperTick;
2400272a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400272e:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
24002732:	eb01 0581 	add.w	r5, r1, r1, lsl #2
24002736:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &polynomialShaperTick;
2400273a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
2400273e:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &offsetParam2;
24002742:	f24a 4061 	movw	r0, #42081	; 0xa461
			  effectSetters[i].setParam3 = &param3Poly;
24002746:	f24a 51e1 	movw	r1, #42465	; 0xa5e1
			  effectSetters[i].setParam1 = &clipperGainSet;
2400274a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
2400274e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002752:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
24002756:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &param3Poly;
2400275a:	f2c0 0100 	movt	r1, #0
2400275e:	e4f0      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &hardClipTick;
24002760:	f24d 3324 	movw	r3, #54052	; 0xd324
24002764:	f64a 7061 	movw	r0, #44897	; 0xaf61
			  effectSetters[i].setParam1 = &clipperGainSet;
24002768:	f244 4290 	movw	r2, #17552	; 0x4490
2400276c:	f24a 04a1 	movw	r4, #41121	; 0xa0a1
			  effectTick[i] = &hardClipTick;
24002770:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002774:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
24002778:	eb01 0581 	add.w	r5, r1, r1, lsl #2
2400277c:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &hardClipTick;
24002780:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002784:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &offsetParam2;
24002788:	f24a 4061 	movw	r0, #42081	; 0xa461
			  effectSetters[i].setParam3 = &param3Hard;
2400278c:	f24a 5161 	movw	r1, #42337	; 0xa561
			  effectSetters[i].setParam1 = &clipperGainSet;
24002790:	eb02 0385 	add.w	r3, r2, r5, lsl #2
24002794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002798:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
2400279c:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &param3Hard;
240027a0:	f2c0 0100 	movt	r1, #0
240027a4:	e4cd      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &softClipTick;
240027a6:	f24d 3324 	movw	r3, #54052	; 0xd324
240027aa:	f64a 60e1 	movw	r0, #44769	; 0xaee1
			  effectSetters[i].setParam1 = &clipperGainSet;
240027ae:	f244 4290 	movw	r2, #17552	; 0x4490
240027b2:	f24a 04a1 	movw	r4, #41121	; 0xa0a1
			  effectTick[i] = &softClipTick;
240027b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
240027ba:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &clipperGainSet;
240027be:	eb01 0581 	add.w	r5, r1, r1, lsl #2
240027c2:	f2c2 0201 	movt	r2, #8193	; 0x2001
			  effectTick[i] = &softClipTick;
240027c6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240027ca:	f2c0 0400 	movt	r4, #0
			  effectSetters[i].setParam2 = &offsetParam2;
240027ce:	f24a 4061 	movw	r0, #42081	; 0xa461
			  effectSetters[i].setParam3 = &param3Soft;
240027d2:	f24a 41e1 	movw	r1, #42209	; 0xa4e1
			  effectSetters[i].setParam1 = &clipperGainSet;
240027d6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
240027da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240027de:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam4 = &blankFunction;
240027e2:	f242 0241 	movw	r2, #8257	; 0x2041
			  effectSetters[i].setParam3 = &param3Soft;
240027e6:	f2c0 0100 	movt	r1, #0
240027ea:	e4aa      	b.n	24002142 <setEffectsFunctions+0x86>
			  effectTick[i] = &blankTick;
240027ec:	f24d 3224 	movw	r2, #54052	; 0xd324
240027f0:	f64a 5081 	movw	r0, #44417	; 0xad81
			  effectSetters[i].setParam1 = &blankFunction;
240027f4:	f244 4490 	movw	r4, #17552	; 0x4490
240027f8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  effectTick[i] = &blankTick;
240027fc:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002800:	f2c0 0000 	movt	r0, #0
			  effectSetters[i].setParam1 = &blankFunction;
24002804:	f2c2 0401 	movt	r4, #8193	; 0x2001
			  effectTick[i] = &blankTick;
24002808:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			  effectSetters[i].setParam1 = &blankFunction;
2400280c:	f242 0241 	movw	r2, #8257	; 0x2041
24002810:	eb04 0085 	add.w	r0, r4, r5, lsl #2
24002814:	f2c0 0200 	movt	r2, #0
24002818:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
			  effectsActive[i] = 0;
2400281c:	2400      	movs	r4, #0
			  effectSetters[i].setParam3 = &blankFunction;
2400281e:	e9c0 2201 	strd	r2, r2, [r0, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002822:	e9c0 2203 	strd	r2, r2, [r0, #12]
			  effectsActive[i] = 0;
24002826:	545c      	strb	r4, [r3, r1]
}
24002828:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400282a:	f24d 3224 	movw	r2, #54052	; 0xd324
2400282e:	f244 4390 	movw	r3, #17552	; 0x4490
24002832:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002836:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400283a:	e5e5      	b.n	24002408 <setEffectsFunctions+0x34c>
2400283c:	f24d 3224 	movw	r2, #54052	; 0xd324
24002840:	f244 4390 	movw	r3, #17552	; 0x4490
24002844:	f242 0441 	movw	r4, #8257	; 0x2041
24002848:	f2c2 0201 	movt	r2, #8193	; 0x2001
2400284c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002850:	f2c0 0400 	movt	r4, #0
24002854:	e693      	b.n	2400257e <setEffectsFunctions+0x4c2>
24002856:	bf00      	nop

24002858 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002858:	b410      	push	{r4}
	switch (filterType)
2400285a:	2808      	cmp	r0, #8
2400285c:	d825      	bhi.n	240028aa <setFilterTypes+0x52>
2400285e:	e8df f010 	tbh	[pc, r0, lsl #1]
24002862:	0045      	.short	0x0045
24002864:	00810063 	.word	0x00810063
24002868:	00bd009f 	.word	0x00bd009f
2400286c:	00f900db 	.word	0x00f900db
24002870:	00270009 	.word	0x00270009
				  filterTick[i] = &VZhighshelfTick;
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
24002874:	f24d 3298 	movw	r2, #54168	; 0xd398
24002878:	f249 4401 	movw	r4, #37889	; 0x9401
				  filterSetters[i].setQ = &VZbandrejectSetQ;
2400287c:	f246 43e4 	movw	r3, #25828	; 0x64e4
24002880:	f249 6081 	movw	r0, #38529	; 0x9681
				  filterTick[i] = &VZbandrejectTick;
24002884:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002888:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &VZbandrejectSetQ;
2400288c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002890:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &VZbandrejectTick;
24002894:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002898:	f649 0281 	movw	r2, #39041	; 0x9881
2400289c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &VZbandrejectSetQ;
240028a0:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
240028a4:	f2c0 0200 	movt	r2, #0
240028a8:	6062      	str	r2, [r4, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
240028aa:	f85d 4b04 	ldr.w	r4, [sp], #4
240028ae:	4770      	bx	lr
				  filterTick[i] = &LadderLowpassTick;
240028b0:	f24d 3298 	movw	r2, #54168	; 0xd398
240028b4:	f249 4461 	movw	r4, #37985	; 0x9461
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240028b8:	f246 43e4 	movw	r3, #25828	; 0x64e4
240028bc:	f249 60a1 	movw	r0, #38561	; 0x96a1
				  filterTick[i] = &LadderLowpassTick;
240028c0:	f2c2 0201 	movt	r2, #8193	; 0x2001
240028c4:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240028c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
240028cc:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &LadderLowpassTick;
240028d0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
240028d4:	f649 02c1 	movw	r2, #39105	; 0x98c1
240028d8:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240028dc:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
240028e0:	f2c0 0200 	movt	r2, #0
240028e4:	6062      	str	r2, [r4, #4]
}
240028e6:	f85d 4b04 	ldr.w	r4, [sp], #4
240028ea:	4770      	bx	lr
				  filterTick[i] = &lowpassTick;
240028ec:	f24d 3298 	movw	r2, #54168	; 0xd398
240028f0:	f249 14c1 	movw	r4, #37313	; 0x91c1
				  filterSetters[i].setQ = &lowpassSetQ;
240028f4:	f246 43e4 	movw	r3, #25828	; 0x64e4
240028f8:	f249 50a1 	movw	r0, #38305	; 0x95a1
				  filterTick[i] = &lowpassTick;
240028fc:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002900:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &lowpassSetQ;
24002904:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002908:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &lowpassTick;
2400290c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002910:	f249 62c1 	movw	r2, #38593	; 0x96c1
24002914:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &lowpassSetQ;
24002918:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
2400291c:	f2c0 0200 	movt	r2, #0
24002920:	6062      	str	r2, [r4, #4]
}
24002922:	f85d 4b04 	ldr.w	r4, [sp], #4
24002926:	4770      	bx	lr
				  filterTick[i] = &highpassTick;
24002928:	f24d 3298 	movw	r2, #54168	; 0xd398
2400292c:	f249 2421 	movw	r4, #37409	; 0x9221
				  filterSetters[i].setQ = &highpassSetQ;
24002930:	f246 43e4 	movw	r3, #25828	; 0x64e4
24002934:	f249 50c1 	movw	r0, #38337	; 0x95c1
				  filterTick[i] = &highpassTick;
24002938:	f2c2 0201 	movt	r2, #8193	; 0x2001
2400293c:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &highpassSetQ;
24002940:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002944:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &highpassTick;
24002948:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
2400294c:	f249 7201 	movw	r2, #38657	; 0x9701
24002950:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &highpassSetQ;
24002954:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002958:	f2c0 0200 	movt	r2, #0
2400295c:	6062      	str	r2, [r4, #4]
}
2400295e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002962:	4770      	bx	lr
				  filterTick[i] = &bandpassTick;
24002964:	f24d 3298 	movw	r2, #54168	; 0xd398
24002968:	f249 2481 	movw	r4, #37505	; 0x9281
				  filterSetters[i].setQ = &bandpassSetQ;
2400296c:	f246 43e4 	movw	r3, #25828	; 0x64e4
24002970:	f249 50e1 	movw	r0, #38369	; 0x95e1
				  filterTick[i] = &bandpassTick;
24002974:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002978:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &bandpassSetQ;
2400297c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002980:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &bandpassTick;
24002984:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24002988:	f249 7241 	movw	r2, #38721	; 0x9741
2400298c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &bandpassSetQ;
24002990:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002994:	f2c0 0200 	movt	r2, #0
24002998:	6062      	str	r2, [r4, #4]
}
2400299a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400299e:	4770      	bx	lr
				  filterTick[i] = &diodeLowpassTick;
240029a0:	f24d 3298 	movw	r2, #54168	; 0xd398
240029a4:	f249 24e1 	movw	r4, #37601	; 0x92e1
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240029a8:	f246 43e4 	movw	r3, #25828	; 0x64e4
240029ac:	f249 6001 	movw	r0, #38401	; 0x9601
				  filterTick[i] = &diodeLowpassTick;
240029b0:	f2c2 0201 	movt	r2, #8193	; 0x2001
240029b4:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240029b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
240029bc:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &diodeLowpassTick;
240029c0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
240029c4:	f249 7281 	movw	r2, #38785	; 0x9781
240029c8:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240029cc:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
240029d0:	f2c0 0200 	movt	r2, #0
240029d4:	6062      	str	r2, [r4, #4]
}
240029d6:	f85d 4b04 	ldr.w	r4, [sp], #4
240029da:	4770      	bx	lr
				  filterTick[i] = &VZpeakTick;
240029dc:	f24d 3298 	movw	r2, #54168	; 0xd398
240029e0:	f249 3441 	movw	r4, #37697	; 0x9341
				  filterSetters[i].setQ = &VZpeakSetQ;
240029e4:	f246 43e4 	movw	r3, #25828	; 0x64e4
240029e8:	f249 6021 	movw	r0, #38433	; 0x9621
				  filterTick[i] = &VZpeakTick;
240029ec:	f2c2 0201 	movt	r2, #8193	; 0x2001
240029f0:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &VZpeakSetQ;
240029f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
240029f8:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &VZpeakTick;
240029fc:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002a00:	f249 72c1 	movw	r2, #38849	; 0x97c1
24002a04:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &VZpeakSetQ;
24002a08:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002a0c:	f2c0 0200 	movt	r2, #0
24002a10:	6062      	str	r2, [r4, #4]
}
24002a12:	f85d 4b04 	ldr.w	r4, [sp], #4
24002a16:	4770      	bx	lr
				  filterTick[i] = &VZlowshelfTick;
24002a18:	f24d 3298 	movw	r2, #54168	; 0xd398
24002a1c:	f249 3481 	movw	r4, #37761	; 0x9381
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002a20:	f246 43e4 	movw	r3, #25828	; 0x64e4
24002a24:	f249 6041 	movw	r0, #38465	; 0x9641
				  filterTick[i] = &VZlowshelfTick;
24002a28:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002a2c:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002a30:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002a34:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &VZlowshelfTick;
24002a38:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002a3c:	f649 0201 	movw	r2, #38913	; 0x9801
24002a40:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002a44:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002a48:	f2c0 0200 	movt	r2, #0
24002a4c:	6062      	str	r2, [r4, #4]
}
24002a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002a52:	4770      	bx	lr
				  filterTick[i] = &VZhighshelfTick;
24002a54:	f24d 3298 	movw	r2, #54168	; 0xd398
24002a58:	f249 34c1 	movw	r4, #37825	; 0x93c1
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002a5c:	f246 43e4 	movw	r3, #25828	; 0x64e4
24002a60:	f249 6061 	movw	r0, #38497	; 0x9661
				  filterTick[i] = &VZhighshelfTick;
24002a64:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002a68:	f2c0 0400 	movt	r4, #0
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002a6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24002a70:	f2c0 0000 	movt	r0, #0
				  filterTick[i] = &VZhighshelfTick;
24002a74:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002a78:	f649 0241 	movw	r2, #38977	; 0x9841
24002a7c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002a80:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002a84:	f2c0 0200 	movt	r2, #0
24002a88:	6062      	str	r2, [r4, #4]
}
24002a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002a8e:	4770      	bx	lr

24002a90 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24002a90:	b500      	push	{lr}
	switch(LFOShape)
24002a92:	2805      	cmp	r0, #5
24002a94:	d826      	bhi.n	24002ae4 <setLFOShapes+0x54>
24002a96:	e8df f000 	tbb	[pc, r0]
24002a9a:	6f4b      	.short	0x6f4b
24002a9c:	2703b793 	.word	0x2703b793
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
24002aa0:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002aa4:	f649 50e1 	movw	r0, #40417	; 0x9de1
			lfoSetters[i].setRate = &lfoSawSetRate;
24002aa8:	f248 6340 	movw	r3, #34368	; 0x8640
24002aac:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
24002ab0:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002ab4:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoSawSetRate;
24002ab8:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoSawTick;
24002abc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002ac0:	f649 60c1 	movw	r0, #40641	; 0x9ec1
			lfoSetters[i].setShape = &lfoSawSetShape;
24002ac4:	f24a 0141 	movw	r1, #41025	; 0xa041
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002ac8:	f649 7281 	movw	r2, #40833	; 0x9f81
			lfoSetters[i].setRate = &lfoSawSetRate;
24002acc:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002ad0:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoSawSetShape;
24002ad4:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002ad8:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoSawSetRate;
24002adc:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002ae0:	e9cc 1201 	strd	r1, r2, [ip, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
24002ae4:	f85d fb04 	ldr.w	pc, [sp], #4
			lfoShapeTick[i] = &lfoPulseTick;
24002ae8:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002aec:	f649 6021 	movw	r0, #40481	; 0x9e21
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002af0:	f248 6340 	movw	r3, #34368	; 0x8640
24002af4:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24002af8:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002afc:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002b00:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoPulseTick;
24002b04:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002b08:	f649 60e1 	movw	r0, #40673	; 0x9ee1
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002b0c:	f24a 0161 	movw	r1, #41057	; 0xa061
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002b10:	f649 72a1 	movw	r2, #40865	; 0x9fa1
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002b14:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002b18:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002b1c:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002b20:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002b24:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002b28:	e9cc 1201 	strd	r1, r2, [ip, #4]
}
24002b2c:	f85d fb04 	ldr.w	pc, [sp], #4
			lfoShapeTick[i] = &lfoSineTriTick;
24002b30:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002b34:	f649 5081 	movw	r0, #40321	; 0x9d81
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002b38:	f248 6340 	movw	r3, #34368	; 0x8640
24002b3c:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002b40:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002b44:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002b48:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoSineTriTick;
24002b4c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002b50:	f649 6061 	movw	r0, #40545	; 0x9e61
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002b54:	f649 71e1 	movw	r1, #40929	; 0x9fe1
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002b58:	f649 7221 	movw	r2, #40737	; 0x9f21
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002b5c:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002b60:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002b64:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002b68:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002b6c:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002b70:	e9cc 1201 	strd	r1, r2, [ip, #4]
}
24002b74:	f85d fb04 	ldr.w	pc, [sp], #4
			lfoShapeTick[i] = &lfoSawSquareTick;
24002b78:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002b7c:	f649 5061 	movw	r0, #40289	; 0x9d61
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002b80:	f248 6340 	movw	r3, #34368	; 0x8640
24002b84:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002b88:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002b8c:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002b90:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoSawSquareTick;
24002b94:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002b98:	f649 6041 	movw	r0, #40513	; 0x9e41
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002b9c:	f649 71c1 	movw	r1, #40897	; 0x9fc1
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002ba0:	f649 7201 	movw	r2, #40705	; 0x9f01
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ba4:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002ba8:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002bac:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002bb0:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002bb4:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002bb8:	e9cc 1201 	strd	r1, r2, [ip, #4]
}
24002bbc:	f85d fb04 	ldr.w	pc, [sp], #4
			lfoShapeTick[i] = &lfoSineTick;
24002bc0:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002bc4:	f649 50a1 	movw	r0, #40353	; 0x9da1
			lfoSetters[i].setRate = &lfoSineSetRate;
24002bc8:	f248 6340 	movw	r3, #34368	; 0x8640
24002bcc:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
24002bd0:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002bd4:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoSineSetRate;
24002bd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoSineTick;
24002bdc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24002be0:	f649 6081 	movw	r0, #40577	; 0x9e81
			lfoSetters[i].setShape = &lfoSineSetShape;
24002be4:	f24a 0101 	movw	r1, #40961	; 0xa001
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002be8:	f649 7241 	movw	r2, #40769	; 0x9f41
			lfoSetters[i].setRate = &lfoSineSetRate;
24002bec:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002bf0:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoSineSetShape;
24002bf4:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002bf8:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoSineSetRate;
24002bfc:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002c00:	e9cc 1201 	strd	r1, r2, [ip, #4]
}
24002c04:	f85d fb04 	ldr.w	pc, [sp], #4
			lfoShapeTick[i] = &lfoTriTick;
24002c08:	f24d 429c 	movw	r2, #54428	; 0xd49c
24002c0c:	f649 50c1 	movw	r0, #40385	; 0x9dc1
			lfoSetters[i].setRate = &lfoTriSetRate;
24002c10:	f248 6340 	movw	r3, #34368	; 0x8640
24002c14:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24002c18:	f2c2 0201 	movt	r2, #8193	; 0x2001
24002c1c:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setRate = &lfoTriSetRate;
24002c20:	f2c2 0301 	movt	r3, #8193	; 0x2001
			lfoShapeTick[i] = &lfoTriTick;
24002c24:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
24002c28:	f649 60a1 	movw	r0, #40609	; 0x9ea1
			lfoSetters[i].setShape = &lfoTriSetShape;
24002c2c:	f24a 0121 	movw	r1, #40993	; 0xa021
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002c30:	f649 7261 	movw	r2, #40801	; 0x9f61
			lfoSetters[i].setRate = &lfoTriSetRate;
24002c34:	eb03 0c8e 	add.w	ip, r3, lr, lsl #2
24002c38:	f2c0 0000 	movt	r0, #0
			lfoSetters[i].setShape = &lfoTriSetShape;
24002c3c:	f2c0 0100 	movt	r1, #0
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002c40:	f2c0 0200 	movt	r2, #0
			lfoSetters[i].setRate = &lfoTriSetRate;
24002c44:	f843 002e 	str.w	r0, [r3, lr, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002c48:	e9cc 1201 	strd	r1, r2, [ip, #4]
}
24002c4c:	f85d fb04 	ldr.w	pc, [sp], #4

24002c50 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24002c50:	f44f 436d 	mov.w	r3, #60672	; 0xed00
24002c54:	f2ce 0300 	movt	r3, #57344	; 0xe000
{
24002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24002c5c:	ed2d 8b02 	vpush	{d8}
24002c60:	695a      	ldr	r2, [r3, #20]
24002c62:	b0b5      	sub	sp, #212	; 0xd4
24002c64:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
24002c68:	d111      	bne.n	24002c8e <main+0x3e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24002c6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002c6e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24002c72:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24002c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002c7a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24002c7e:	695a      	ldr	r2, [r3, #20]
24002c80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24002c84:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24002c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002c8a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24002c8e:	f44f 416d 	mov.w	r1, #60672	; 0xed00
24002c92:	f2ce 0100 	movt	r1, #57344	; 0xe000
24002c96:	694b      	ldr	r3, [r1, #20]
24002c98:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24002c9c:	d124      	bne.n	24002ce8 <main+0x98>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24002c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24002ca2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24002ca6:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002caa:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24002cae:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24002cb2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24002cb6:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002cb8:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24002cbc:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002cbe:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24002cc2:	3b01      	subs	r3, #1
24002cc4:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002cc6:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
24002cca:	d1f8      	bne.n	24002cbe <main+0x6e>
    } while(sets-- != 0U);
24002ccc:	3c20      	subs	r4, #32
24002cce:	f114 0f20 	cmn.w	r4, #32
24002cd2:	d1f1      	bne.n	24002cb8 <main+0x68>
24002cd4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24002cd8:	694b      	ldr	r3, [r1, #20]
24002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002cde:	614b      	str	r3, [r1, #20]
24002ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002ce4:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002ce8:	ae2e      	add	r6, sp, #184	; 0xb8
24002cea:	2400      	movs	r4, #0
  HAL_Init();
24002cec:	f002 fb06 	bl	240052fc <HAL_Init>
	  /* Disables the MPU */
	  HAL_MPU_Disable();

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002cf0:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002cf2:	942e      	str	r4, [sp, #184]	; 0xb8

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24002cf4:	f04f 0804 	mov.w	r8, #4
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002cf8:	60f4      	str	r4, [r6, #12]
24002cfa:	e9c6 4401 	strd	r4, r4, [r6, #4]
	  HAL_MPU_Disable();
24002cfe:	f002 fbdf 	bl	240054c0 <HAL_MPU_Disable>
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002d02:	f248 721f 	movw	r2, #34591	; 0x871f
24002d06:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d0a:	4630      	mov	r0, r6
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002d0c:	f8ad 50b8 	strh.w	r5, [sp, #184]	; 0xb8
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002d10:	9331      	str	r3, [sp, #196]	; 0xc4
24002d12:	e9cd 422f 	strd	r4, r2, [sp, #188]	; 0xbc
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d16:	f002 fbf3 	bl	24005500 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002d1a:	4623      	mov	r3, r4
24002d1c:	2211      	movs	r2, #17
	  MPU_InitStruct.BaseAddress = 0x024000000;
24002d1e:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002d22:	f2c0 1301 	movt	r3, #257	; 0x101
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d26:	4630      	mov	r0, r6
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002d28:	f2c0 3201 	movt	r2, #769	; 0x301
	  MPU_InitStruct.BaseAddress = 0x024000000;
24002d2c:	912f      	str	r1, [sp, #188]	; 0xbc
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002d2e:	9331      	str	r3, [sp, #196]	; 0xc4
24002d30:	9230      	str	r2, [sp, #192]	; 0xc0
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24002d32:	f88d 50b9 	strb.w	r5, [sp, #185]	; 0xb9
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d36:	f002 fbe3 	bl	24005500 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x24040000;
24002d3a:	4623      	mov	r3, r4
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24002d3c:	2202      	movs	r2, #2
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d3e:	4630      	mov	r0, r6
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24002d40:	f88d 50c4 	strb.w	r5, [sp, #196]	; 0xc4
	  MPU_InitStruct.BaseAddress = 0x24040000;
24002d44:	f2c2 4304 	movt	r3, #9220	; 0x2404
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24002d48:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.BaseAddress = 0x24040000;
24002d4c:	932f      	str	r3, [sp, #188]	; 0xbc
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d4e:	f002 fbd7 	bl	24005500 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x30000000;
24002d52:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24002d56:	2203      	movs	r2, #3
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d58:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x30000000;
24002d5a:	932f      	str	r3, [sp, #188]	; 0xbc
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24002d5c:	2312      	movs	r3, #18
	  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24002d5e:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24002d62:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d66:	f002 fbcb 	bl	24005500 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24002d6a:	230c      	movs	r3, #12
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d6c:	4630      	mov	r0, r6
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24002d6e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24002d72:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24002d76:	f8ad 50c5 	strh.w	r5, [sp, #197]	; 0xc5
	  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24002d7a:	f88d 80b9 	strb.w	r8, [sp, #185]	; 0xb9
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24002d7e:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d82:	f002 fbbd 	bl	24005500 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
	  MPU_InitStruct.BaseAddress = 0x38000000;
24002d86:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24002d8a:	2205      	movs	r2, #5
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d8c:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x38000000;
24002d8e:	932f      	str	r3, [sp, #188]	; 0xbc
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24002d90:	230f      	movs	r3, #15
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24002d92:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24002d96:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002d9a:	f002 fbb1 	bl	24005500 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
	  MPU_InitStruct.BaseAddress = 0x38800000;
24002d9e:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24002da2:	2206      	movs	r2, #6
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002da4:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x38800000;
24002da6:	932f      	str	r3, [sp, #188]	; 0xbc
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24002da8:	230b      	movs	r3, #11
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24002daa:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24002dae:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002db2:	f002 fba5 	bl	24005500 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
	  MPU_InitStruct.BaseAddress = 0xc0000000;
24002db6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24002dba:	2207      	movs	r2, #7
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002dbc:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0xc0000000;
24002dbe:	932f      	str	r3, [sp, #188]	; 0xbc
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24002dc0:	2319      	movs	r3, #25
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24002dc2:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24002dc6:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002dca:	f002 fb99 	bl	24005500 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
	  MPU_InitStruct.BaseAddress = 0x90040000;
24002dce:	4623      	mov	r3, r4
	  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24002dd0:	2208      	movs	r2, #8

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002dd2:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x90040000;
24002dd4:	f2c9 0304 	movt	r3, #36868	; 0x9004
	  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24002dd8:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
	  MPU_InitStruct.BaseAddress = 0x90040000;
24002ddc:	932f      	str	r3, [sp, #188]	; 0xbc
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002dde:	f002 fb8f 	bl	24005500 <HAL_MPU_ConfigRegion>
	  /* Enables the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24002de2:	4640      	mov	r0, r8
24002de4:	f002 fb7a 	bl	240054dc <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
24002de8:	b662      	cpsie	i
  SystemClock_Config();
24002dea:	f7fe fd21 	bl	24001830 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24002dee:	f244 4b31 	movw	fp, #17457	; 0x4431
  PeriphCommonClock_Config();
24002df2:	f7fe fda7 	bl	24001944 <PeriphCommonClock_Config>
  MX_GPIO_Init();
24002df6:	f7fe fa0f 	bl	24001218 <MX_GPIO_Init>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24002dfa:	f2c2 0b01 	movt	fp, #8193	; 0x2001
  MX_DMA_Init();
24002dfe:	f7fe f90f 	bl	24001020 <MX_DMA_Init>
  MX_BDMA_Init();
24002e02:	f7fe f83f 	bl	24000e84 <MX_BDMA_Init>
  MX_I2C2_Init();
24002e06:	f7fe fbbd 	bl	24001584 <MX_I2C2_Init>
  MX_SAI1_Init();
24002e0a:	f000 fef9 	bl	24003c00 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24002e0e:	f001 f813 	bl	24003e38 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24002e12:	f001 f87f 	bl	24003f14 <MX_SPI1_Init>
  MX_I2C1_Init();
24002e16:	f7fe fb77 	bl	24001508 <MX_I2C1_Init>
  MX_FMC_Init();
24002e1a:	f7fe f94f 	bl	240010bc <MX_FMC_Init>
  MX_FATFS_Init();
24002e1e:	f00b fd03 	bl	2400e828 <MX_FATFS_Init>
  MX_SPI6_Init();
24002e22:	f001 f8a1 	bl	24003f68 <MX_SPI6_Init>
  MX_RNG_Init();
24002e26:	f000 fea7 	bl	24003b78 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24002e2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
24002e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24002e32:	f6c5 0002 	movt	r0, #22530	; 0x5802
24002e36:	f004 fea5 	bl	24007b84 <HAL_GPIO_ReadPin>
24002e3a:	4607      	mov	r7, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24002e3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
24002e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24002e44:	f6c5 0002 	movt	r0, #22530	; 0x5802
24002e48:	f004 fe9c 	bl	24007b84 <HAL_GPIO_ReadPin>
24002e4c:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24002e4e:	2000      	movs	r0, #0
24002e50:	4641      	mov	r1, r8
24002e52:	f6c5 0002 	movt	r0, #22530	; 0x5802
24002e56:	f004 fe95 	bl	24007b84 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24002e5a:	00a3      	lsls	r3, r4, #2
24002e5c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
24002e60:	4418      	add	r0, r3
24002e62:	b2c4      	uxtb	r4, r0
24002e64:	f88b 4000 	strb.w	r4, [fp]
	if (boardNumber == 0)
24002e68:	2c00      	cmp	r4, #0
24002e6a:	f000 8660 	beq.w	24003b2e <main+0xede>
	HAL_Delay(500);
24002e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24002e72:	f002 fa8b 	bl	2400538c <HAL_Delay>
    if (boardNumber !=0)
24002e76:	f89b 3000 	ldrb.w	r3, [fp]
24002e7a:	2b00      	cmp	r3, #0
24002e7c:	f040 8649 	bne.w	24003b12 <main+0xec2>
   PWR->CR1 |= PWR_CR1_DBP;
24002e80:	f44f 4290 	mov.w	r2, #18432	; 0x4800
24002e84:	f6c5 0202 	movt	r2, #22530	; 0x5802
24002e88:	6813      	ldr	r3, [r2, #0]
24002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002e8e:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24002e90:	6813      	ldr	r3, [r2, #0]
24002e92:	05d9      	lsls	r1, r3, #23
24002e94:	d5fc      	bpl.n	24002e90 <main+0x240>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002e96:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002e9a:	2200      	movs	r2, #0
24002e9c:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002e9e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24002ea2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24002ea6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
24002eaa:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002eae:	f44f 6000 	mov.w	r0, #2048	; 0x800
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002eb6:	f6c5 0002 	movt	r0, #22530	; 0x5802
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24002ebe:	9320      	str	r3, [sp, #128]	; 0x80
24002ec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002ec2:	f004 fe65 	bl	24007b90 <HAL_GPIO_WritePin>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
24002ec6:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
24002ece:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24002ed2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  if ((*(uint32_t*)0xE0001FB4) & 1)
24002ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24002eda:	f2ce 0200 	movt	r2, #57344	; 0xe000
  if ((*(uint32_t*)0xE0001FB4) & 1)
24002ede:	f2ce 0300 	movt	r3, #57344	; 0xe000
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24002ee2:	f8d2 10fc 	ldr.w	r1, [r2, #252]	; 0xfc
24002ee6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
24002eea:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24002eee:	f8d3 2fb4 	ldr.w	r2, [r3, #4020]	; 0xfb4
24002ef2:	07d2      	lsls	r2, r2, #31
24002ef4:	d505      	bpl.n	24002f02 <main+0x2b2>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24002ef6:	f64c 6255 	movw	r2, #52821	; 0xce55
24002efa:	f2cc 52ac 	movt	r2, #50604	; 0xc5ac
24002efe:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24002f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  DWT->CTRL = 0x40000001;
24002f06:	2201      	movs	r2, #1
	  buffer[i] = 0;
24002f08:	f242 3480 	movw	r4, #9088	; 0x2380
  DWT->CYCCNT = 0;
24002f0c:	2100      	movs	r1, #0
24002f0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
  DWT->CTRL = 0x40000001;
24002f12:	f2c4 0200 	movt	r2, #16384	; 0x4000
	  SPI_PLUCK_TX[i] = 0;
24002f16:	f240 0000 	movw	r0, #0
	  buffer[i] = 0;
24002f1a:	f2c3 0404 	movt	r4, #12292	; 0x3004
  DWT->CYCCNT = 0;
24002f1e:	6059      	str	r1, [r3, #4]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24002f20:	2500      	movs	r5, #0
  DWT->CTRL = 0x40000001;
24002f22:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
24002f24:	f6c3 0000 	movt	r0, #14336	; 0x3800
24002f28:	2240      	movs	r2, #64	; 0x40
	  buffer[i] = 0;
24002f2a:	9414      	str	r4, [sp, #80]	; 0x50
	  SPI_PLUCK_TX[i] = 0;
24002f2c:	f019 fba0 	bl	2401c670 <memset>
	  buffer[i] = 0;
24002f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002f34:	2100      	movs	r1, #0
24002f36:	4620      	mov	r0, r4
24002f38:	f019 fb9a 	bl	2401c670 <memset>
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002f3c:	f24d 730a 	movw	r3, #55050	; 0xd70a
  buffer[15+112] = NUM_PARAMS;
24002f40:	229c      	movs	r2, #156	; 0x9c
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002f42:	f64a 00cc 	movw	r0, #43212	; 0xa8cc
24002f46:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24002f4a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
24002f4e:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002f52:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
24002f56:	ee00 3a10 	vmov	s0, r3
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24002f5a:	f64e 73ef 	movw	r3, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002f62:	f2c2 0001 	movt	r0, #8193	; 0x2001
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24002f66:	f8a4 31b8 	strh.w	r3, [r4, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+19+112] = 1;
24002f6a:	2301      	movs	r3, #1
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24002f6c:	f6c5 0502 	movt	r5, #22530	; 0x5802
  buffer[NUM_PARAMS*2+19+112] = 1;
24002f70:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24002f74:	f64f 63fe 	movw	r3, #65278	; 0xfefe
24002f78:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24002f7c:	2403      	movs	r4, #3
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002f7e:	f013 fea9 	bl	24016cd4 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24002f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24002f86:	2200      	movs	r2, #0
24002f88:	f244 40e4 	movw	r0, #17636	; 0x44e4
24002f8c:	f2c4 639c 	movt	r3, #18076	; 0x469c
24002f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002f94:	f2c4 527a 	movt	r2, #17786	; 0x457a
24002f98:	f2c2 0001 	movt	r0, #8193	; 0x2001
24002f9c:	ee00 3a90 	vmov	s1, r3
24002fa0:	2300      	movs	r3, #0
24002fa2:	ee01 2a10 	vmov	s2, r2
24002fa6:	ee00 3a10 	vmov	s0, r3
24002faa:	9303      	str	r3, [sp, #12]
24002fac:	f013 fe92 	bl	24016cd4 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24002fb0:	f246 6040 	movw	r0, #26176	; 0x6640
24002fb4:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24002fb8:	ed9d 0a03 	vldr	s0, [sp, #12]
24002fbc:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24002fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002fc4:	f2c2 0001 	movt	r0, #8193	; 0x2001
24002fc8:	f013 fe84 	bl	24016cd4 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24002fcc:	2201      	movs	r2, #1
24002fce:	4628      	mov	r0, r5
24002fd0:	4611      	mov	r1, r2
24002fd2:	f004 fddd 	bl	24007b90 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002fd6:	200a      	movs	r0, #10
24002fd8:	f002 f9d8 	bl	2400538c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
24002fdc:	4628      	mov	r0, r5
24002fde:	2200      	movs	r2, #0
24002fe0:	2101      	movs	r1, #1
24002fe2:	f004 fdd5 	bl	24007b90 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002fe6:	200a      	movs	r0, #10
24002fe8:	f002 f9d0 	bl	2400538c <HAL_Delay>
  for (int i = 0; i < 3; i++)
24002fec:	3c01      	subs	r4, #1
24002fee:	d1ed      	bne.n	24002fcc <main+0x37c>
  if (boardNumber == 0)
24002ff0:	f89b 3000 	ldrb.w	r3, [fp]
24002ff4:	2b00      	cmp	r3, #0
24002ff6:	f000 8588 	beq.w	24003b0a <main+0xeba>
	  diskBusy = 1;
24002ffa:	f244 438c 	movw	r3, #17548	; 0x448c
  specialModeMacroNames[0][0] = "Feedback  ";
24002ffe:	f64c 05cc 	movw	r5, #51404	; 0xc8cc
  specialModeMacroNames[1][9] = "Harmonic  ";
24003002:	f24f 3734 	movw	r7, #62260	; 0xf334
  specialModeMacroNames[1][3] = "PickupPos ";
24003006:	f24f 24f8 	movw	r4, #62200	; 0xf2f8
	  diskBusy = 1;
2400300a:	461a      	mov	r2, r3
2400300c:	2301      	movs	r3, #1
  specialModeMacroNames[0][0] = "Feedback  ";
2400300e:	f2c2 0501 	movt	r5, #8193	; 0x2001
  specialModeMacroNames[1][9] = "Harmonic  ";
24003012:	f2c2 4701 	movt	r7, #9217	; 0x2401
	  diskBusy = 1;
24003016:	f2c2 0201 	movt	r2, #8193	; 0x2001
  specialModeMacroNames[1][3] = "PickupPos ";
2400301a:	f2c2 4401 	movt	r4, #9217	; 0x2401
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400301e:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	  diskBusy = 1;
24003022:	7013      	strb	r3, [r2, #0]
24003024:	9206      	str	r2, [sp, #24]
  SDRAM_init();
24003026:	f7ff f801 	bl	2400202c <SDRAM_init>
  codec_init(&hi2c2);
2400302a:	f244 30dc 	movw	r0, #17372	; 0x43dc
2400302e:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003032:	f7fd ff4d 	bl	24000ed0 <codec_init>
  audioInit();
24003036:	f7fd fce7 	bl	24000a08 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
2400303a:	f64c 2c5c 	movw	ip, #51804	; 0xca5c
2400303e:	f24f 2360 	movw	r3, #62048	; 0xf260
  specialModeMacroNames[1][2] = "PluckPos  ";
24003042:	f24f 21ec 	movw	r1, #62188	; 0xf2ec
  specialModeNames[0] = "PHYS STR1     ";
24003046:	f2c2 0c01 	movt	ip, #8193	; 0x2001
  specialModeNames[1] = "PHYS STR2     ";
2400304a:	f24f 22c4 	movw	r2, #62148	; 0xf2c4
  specialModeNames[0] = "PHYS STR1     ";
2400304e:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[1][2] = "PluckPos  ";
24003052:	f2c2 4101 	movt	r1, #9217	; 0x2401
  specialModeNames[1] = "PHYS STR2     ";
24003056:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[1][9] = "Harmonic  ";
2400305a:	676f      	str	r7, [r5, #116]	; 0x74
  specialModeNames[0] = "PHYS STR1     ";
2400305c:	f8cc 3000 	str.w	r3, [ip]
  specialModeMacroNames[0][0] = "Feedback  ";
24003060:	f24f 2370 	movw	r3, #62064	; 0xf270
  specialModeMacroNames[1][2] = "PluckPos  ";
24003064:	65a9      	str	r1, [r5, #88]	; 0x58
  specialModeMacroNames[1][6] = "FB Amp    ";
24003066:	f24f 3110 	movw	r1, #62224	; 0xf310
  specialModeMacroNames[0][0] = "Feedback  ";
2400306a:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeNames[1] = "PHYS STR2     ";
2400306e:	f8cc 2004 	str.w	r2, [ip, #4]
  specialModeMacroNames[1][6] = "FB Amp    ";
24003072:	f2c2 4101 	movt	r1, #9217	; 0x2401
  specialModeMacroNames[1][0] = "DecayTime ";
24003076:	f24f 22d4 	movw	r2, #62164	; 0xf2d4
  specialModeMacroNames[0][0] = "Feedback  ";
2400307a:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
2400307c:	f24f 237c 	movw	r3, #62076	; 0xf27c
  specialModeMacroNames[1][6] = "FB Amp    ";
24003080:	66a9      	str	r1, [r5, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
24003082:	f24f 311c 	movw	r1, #62236	; 0xf31c
  specialModeMacroNames[0][1] = "SlideNois ";
24003086:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[1][0] = "DecayTime ";
2400308a:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[1][7] = "FB Speed  ";
2400308e:	f2c2 4101 	movt	r1, #9217	; 0x2401
  specialModeMacroNames[1][5] = "Stiffness ";
24003092:	f24f 3004 	movw	r0, #62212	; 0xf304
  specialModeMacroNames[0][1] = "SlideNois ";
24003096:	606b      	str	r3, [r5, #4]
  specialModeMacroNames[1][10] = "HarmPosX  ";
24003098:	f24f 3740 	movw	r7, #62272	; 0xf340
  specialModeMacroNames[1][4] = "SlideNois ";
2400309c:	662b      	str	r3, [r5, #96]	; 0x60
  specialModeMacroNames[0][2] = "PluckWidt ";
2400309e:	f24f 2388 	movw	r3, #62088	; 0xf288
  specialModeMacroNames[1][0] = "DecayTime ";
240030a2:	652a      	str	r2, [r5, #80]	; 0x50
  specialModeMacroNames[1][1] = "Tone      ";
240030a4:	f24f 22e0 	movw	r2, #62176	; 0xf2e0
  specialModeMacroNames[0][2] = "PluckWidt ";
240030a8:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[1][7] = "FB Speed  ";
240030ac:	66e9      	str	r1, [r5, #108]	; 0x6c
  specialModeMacroNames[1][8] = "PU Filter ";
240030ae:	f24f 3128 	movw	r1, #62248	; 0xf328
  specialModeMacroNames[1][1] = "Tone      ";
240030b2:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[0][2] = "PluckWidt ";
240030b6:	60ab      	str	r3, [r5, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
240030b8:	f24f 2394 	movw	r3, #62100	; 0xf294
  specialModeMacroNames[1][8] = "PU Filter ";
240030bc:	f2c2 4101 	movt	r1, #9217	; 0x2401
  specialModeMacroNames[1][5] = "Stiffness ";
240030c0:	f2c2 4001 	movt	r0, #9217	; 0x2401
  specialModeMacroNames[0][3] = "PickNoise ";
240030c4:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[1][10] = "HarmPosX  ";
240030c8:	f2c2 4701 	movt	r7, #9217	; 0x2401
  specialModeMacroNames[1][1] = "Tone      ";
240030cc:	656a      	str	r2, [r5, #84]	; 0x54
240030ce:	f242 0e00 	movw	lr, #8192	; 0x2000
  specialModeMacroNames[0][3] = "PickNoise ";
240030d2:	60eb      	str	r3, [r5, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
240030d4:	f24f 23a0 	movw	r3, #62112	; 0xf2a0
  specialModeMacroNames[1][3] = "PickupPos ";
240030d8:	65ec      	str	r4, [r5, #92]	; 0x5c
240030da:	f2c3 0e04 	movt	lr, #12292	; 0x3004
  specialModeMacroNames[0][4] = "PickupSim ";
240030de:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[1][8] = "PU Filter ";
240030e2:	6729      	str	r1, [r5, #112]	; 0x70
  specialModeMacroNames[1][5] = "Stiffness ";
240030e4:	6668      	str	r0, [r5, #100]	; 0x64
  specialModeMacroNames[0][4] = "PickupSim ";
240030e6:	612b      	str	r3, [r5, #16]
  specialModeMacroNames[0][5] = "E-bow     ";
240030e8:	f24f 23ac 	movw	r3, #62124	; 0xf2ac
240030ec:	f2c2 4301 	movt	r3, #9217	; 0x2401
240030f0:	616b      	str	r3, [r5, #20]
  specialModeMacroNames[0][6] = "          ";
240030f2:	f24f 23b8 	movw	r3, #62136	; 0xf2b8
240030f6:	f2c2 4301 	movt	r3, #9217	; 0x2401
  specialModeMacroNames[0][7] = "          ";
240030fa:	e9c5 3306 	strd	r3, r3, [r5, #24]
  specialModeMacroNames[0][9] = "          ";
240030fe:	e9c5 3308 	strd	r3, r3, [r5, #32]
  specialModeMacroNames[0][11] = "          ";
24003102:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
  specialModeMacroNames[0][13] = "          ";
24003106:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
  specialModeMacroNames[0][15] = "          ";
2400310a:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
  specialModeMacroNames[0][17] = "          ";
2400310e:	e9c5 3310 	strd	r3, r3, [r5, #64]	; 0x40
  specialModeMacroNames[0][19] = "          ";
24003112:	e9c5 3312 	strd	r3, r3, [r5, #72]	; 0x48
  specialModeMacroNames[1][10] = "HarmPosX  ";
24003116:	67af      	str	r7, [r5, #120]	; 0x78
  specialModeMacroNames[4][19] = "          ";
24003118:	273f      	movs	r7, #63	; 0x3f
  specialModeMacroNames[2][10] = "Tone      ";
2400311a:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
  specialModeMacroNames[1][11] = "HarmPosY  ";
2400311e:	f24f 324c 	movw	r2, #62284	; 0xf34c
  specialModeMacroNames[2][3] = "PickupPos ";
24003122:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
  specialModeNames[3] = "VOCAL        ";
24003126:	f24f 441c 	movw	r4, #62492	; 0xf41c
  specialModeMacroNames[1][11] = "HarmPosY  ";
2400312a:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[2][9] = "          ";
2400312e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  specialModeNames[3] = "VOCAL        ";
24003132:	f2c2 4401 	movt	r4, #9217	; 0x2401
  specialModeMacroNames[1][11] = "HarmPosY  ";
24003136:	67ea      	str	r2, [r5, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
24003138:	f24f 3258 	movw	r2, #62296	; 0xf358
  specialModeNames[3] = "VOCAL        ";
2400313c:	f8cc 400c 	str.w	r4, [ip, #12]
  specialModeMacroNames[3][0] = "Size      ";
24003140:	f24f 442c 	movw	r4, #62508	; 0xf42c
  specialModeMacroNames[1][12] = "PUModRate ";
24003144:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[3][0] = "Size      ";
24003148:	f2c2 4401 	movt	r4, #9217	; 0x2401
  specialModeMacroNames[1][12] = "PUModRate ";
2400314c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
24003150:	f24f 3264 	movw	r2, #62308	; 0xf364
  specialModeMacroNames[3][0] = "Size      ";
24003154:	f8c5 40f0 	str.w	r4, [r5, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
24003158:	f24f 4438 	movw	r4, #62520	; 0xf438
  specialModeMacroNames[1][13] = "PUModAmp  ";
2400315c:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[3][1] = "Chipmunk  ";
24003160:	f2c2 4401 	movt	r4, #9217	; 0x2401
  specialModeMacroNames[1][13] = "PUModAmp  ";
24003164:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
  specialModeMacroNames[1][14] = "PhantomH  ";
24003168:	f24f 3270 	movw	r2, #62320	; 0xf370
2400316c:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003170:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
24003174:	f24f 327c 	movw	r2, #62332	; 0xf37c
24003178:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400317c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Frq ";
24003180:	f24f 3288 	movw	r2, #62344	; 0xf388
24003184:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003188:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Q   ";
2400318c:	f24f 3294 	movw	r2, #62356	; 0xf394
24003190:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003194:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
24003198:	f24f 32a0 	movw	r2, #62368	; 0xf3a0
2400319c:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031a0:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
240031a4:	f24f 32ac 	movw	r2, #62380	; 0xf3ac
240031a8:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031ac:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
240031b0:	f24f 32b8 	movw	r2, #62392	; 0xf3b8
240031b4:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031b8:	f8cc 2008 	str.w	r2, [ip, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
240031bc:	f24f 32c8 	movw	r2, #62408	; 0xf3c8
240031c0:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031c4:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
240031c8:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
240031cc:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031d0:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
240031d4:	f24f 32e0 	movw	r2, #62432	; 0xf3e0
240031d8:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031dc:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
  specialModeMacroNames[2][4] = "PickupAmp ";
240031e0:	f24f 32ec 	movw	r2, #62444	; 0xf3ec
240031e4:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031e8:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
240031ec:	f24f 32f8 	movw	r2, #62456	; 0xf3f8
240031f0:	f2c2 4201 	movt	r2, #9217	; 0x2401
240031f4:	f8c5 20b4 	str.w	r2, [r5, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
240031f8:	f24f 4204 	movw	r2, #62468	; 0xf404
240031fc:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003200:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
  specialModeMacroNames[2][11] = "Decay     ";
24003204:	f24f 4210 	movw	r2, #62480	; 0xf410
24003208:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[2][8] = "          ";
2400320c:	e9c5 332f 	strd	r3, r3, [r5, #188]	; 0xbc
  specialModeMacroNames[2][11] = "Decay     ";
24003210:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
  specialModeMacroNames[2][13] = "          ";
24003214:	e9c5 3334 	strd	r3, r3, [r5, #208]	; 0xd0
  specialModeMacroNames[2][15] = "          ";
24003218:	e9c5 3336 	strd	r3, r3, [r5, #216]	; 0xd8
  specialModeMacroNames[2][17] = "          ";
2400321c:	e9c5 3338 	strd	r3, r3, [r5, #224]	; 0xe0
  specialModeMacroNames[2][19] = "          ";
24003220:	e9c5 333a 	strd	r3, r3, [r5, #232]	; 0xe8
  specialModeMacroNames[3][1] = "Chipmunk  ";
24003224:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
  specialModeMacroNames[3][2] = "Diameter  ";
24003228:	f243 3480 	movw	r4, #13184	; 0x3380
  specialModeMacroNames[4][8] = "Decay     ";
2400322c:	f8c5 2160 	str.w	r2, [r5, #352]	; 0x160
  specialModeMacroNames[3][2] = "Diameter  ";
24003230:	f24f 4244 	movw	r2, #62532	; 0xf444
  specialModeMacroNames[4][3] = "PU Filter ";
24003234:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
24003238:	f2c3 0404 	movt	r4, #12292	; 0x3004
  specialModeMacroNames[3][2] = "Diameter  ";
2400323c:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[4][0] = "Stiffness ";
24003240:	f8c5 0140 	str.w	r0, [r5, #320]	; 0x140
  specialModeMacroNames[4][12] = "          ";
24003244:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
  specialModeMacroNames[4][19] = "          ";
24003248:	2150      	movs	r1, #80	; 0x50
  specialModeMacroNames[3][2] = "Diameter  ";
2400324a:	f8c5 20f8 	str.w	r2, [r5, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
2400324e:	f24f 4250 	movw	r2, #62544	; 0xf450
24003252:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003256:	f8c5 20fc 	str.w	r2, [r5, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
2400325a:	f24f 425c 	movw	r2, #62556	; 0xf45c
2400325e:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003262:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
24003266:	f24f 4268 	movw	r2, #62568	; 0xf468
2400326a:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400326e:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
  specialModeMacroNames[3][8] = "BackPos   ";
24003272:	f24f 4274 	movw	r2, #62580	; 0xf474
24003276:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400327a:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
2400327e:	f24f 4280 	movw	r2, #62592	; 0xf480
24003282:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003286:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
2400328a:	f24f 428c 	movw	r2, #62604	; 0xf48c
2400328e:	f2c2 4201 	movt	r2, #9217	; 0x2401
24003292:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
24003296:	f24f 4298 	movw	r2, #62616	; 0xf498
2400329a:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400329e:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
240032a2:	f24f 42a4 	movw	r2, #62628	; 0xf4a4
240032a6:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032aa:	f8cc 2010 	str.w	r2, [ip, #16]
  specialModeMacroNames[4][1] = "PU Prop   ";
240032ae:	f24f 42b4 	movw	r2, #62644	; 0xf4b4
240032b2:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032b6:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
240032ba:	f24f 42c0 	movw	r2, #62656	; 0xf4c0
240032be:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032c2:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
  specialModeMacroNames[4][4] = "NoiseFilt ";
240032c6:	f24f 42cc 	movw	r2, #62668	; 0xf4cc
240032ca:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032ce:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
  specialModeMacroNames[4][5] = "NoiseGain ";
240032d2:	f24f 42d8 	movw	r2, #62680	; 0xf4d8
240032d6:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032da:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
  specialModeMacroNames[4][9] = "Damping   ";
240032de:	f24f 42e4 	movw	r2, #62692	; 0xf4e4
240032e2:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032e6:	f8c5 2164 	str.w	r2, [r5, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
240032ea:	f24f 42f0 	movw	r2, #62704	; 0xf4f0
240032ee:	f2c2 4201 	movt	r2, #9217	; 0x2401
240032f2:	f8c5 2168 	str.w	r2, [r5, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
240032f6:	f24f 42fc 	movw	r2, #62716	; 0xf4fc
240032fa:	f2c2 4201 	movt	r2, #9217	; 0x2401
  specialModeMacroNames[3][7] = "          ";
240032fe:	e9c5 3342 	strd	r3, r3, [r5, #264]	; 0x108
  specialModeMacroNames[3][13] = "          ";
24003302:	e9c5 3348 	strd	r3, r3, [r5, #288]	; 0x120
  specialModeMacroNames[3][15] = "          ";
24003306:	e9c5 334a 	strd	r3, r3, [r5, #296]	; 0x128
  specialModeMacroNames[3][17] = "          ";
2400330a:	e9c5 334c 	strd	r3, r3, [r5, #304]	; 0x130
  specialModeMacroNames[3][19] = "          ";
2400330e:	e9c5 334e 	strd	r3, r3, [r5, #312]	; 0x138
  specialModeMacroNames[4][7] = "          ";
24003312:	e9c5 3356 	strd	r3, r3, [r5, #344]	; 0x158
  specialModeMacroNames[4][11] = "PU Pos   ";
24003316:	f8c5 216c 	str.w	r2, [r5, #364]	; 0x16c
  specialModeMacroNames[4][14] = "          ";
2400331a:	e9c5 335d 	strd	r3, r3, [r5, #372]	; 0x174
  specialModeMacroNames[4][16] = "          ";
2400331e:	e9c5 335f 	strd	r3, r3, [r5, #380]	; 0x17c
  specialModeMacroNames[4][18] = "          ";
24003322:	e9c5 3361 	strd	r3, r3, [r5, #388]	; 0x184
  specialModeMacroNames[4][19] = "          ";
24003326:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
  for (int i = 0; i < 5; i++)
2400332a:	3d04      	subs	r5, #4
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400332c:	f85c 2b04 	ldr.w	r2, [ip], #4
24003330:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
24003334:	4628      	mov	r0, r5
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003336:	fb08 f907 	mul.w	r9, r8, r7
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400333a:	f80e 1013 	strb.w	r1, [lr, r3, lsl #1]
2400333e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
24003342:	7851      	ldrb	r1, [r2, #1]
24003344:	7059      	strb	r1, [r3, #1]
24003346:	7891      	ldrb	r1, [r2, #2]
24003348:	7099      	strb	r1, [r3, #2]
2400334a:	78d1      	ldrb	r1, [r2, #3]
2400334c:	70d9      	strb	r1, [r3, #3]
2400334e:	7911      	ldrb	r1, [r2, #4]
24003350:	7119      	strb	r1, [r3, #4]
24003352:	7951      	ldrb	r1, [r2, #5]
24003354:	7159      	strb	r1, [r3, #5]
24003356:	7991      	ldrb	r1, [r2, #6]
24003358:	7199      	strb	r1, [r3, #6]
2400335a:	79d1      	ldrb	r1, [r2, #7]
2400335c:	71d9      	strb	r1, [r3, #7]
2400335e:	7a11      	ldrb	r1, [r2, #8]
24003360:	7219      	strb	r1, [r3, #8]
24003362:	7a51      	ldrb	r1, [r2, #9]
24003364:	7259      	strb	r1, [r3, #9]
24003366:	7a91      	ldrb	r1, [r2, #10]
24003368:	7299      	strb	r1, [r3, #10]
2400336a:	7ad1      	ldrb	r1, [r2, #11]
2400336c:	72d9      	strb	r1, [r3, #11]
2400336e:	7b11      	ldrb	r1, [r2, #12]
24003370:	7319      	strb	r1, [r3, #12]
	  for (int k = 0; k < 20; k++)
24003372:	2100      	movs	r1, #0
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003374:	7b52      	ldrb	r2, [r2, #13]
24003376:	735a      	strb	r2, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003378:	f850 2f04 	ldr.w	r2, [r0, #4]!
2400337c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
	  for (int k = 0; k < 20; k++)
24003380:	3101      	adds	r1, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003382:	f892 a000 	ldrb.w	sl, [r2]
24003386:	eb09 0343 	add.w	r3, r9, r3, lsl #1
	  for (int k = 0; k < 20; k++)
2400338a:	2914      	cmp	r1, #20
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400338c:	f804 a003 	strb.w	sl, [r4, r3]
24003390:	4423      	add	r3, r4
24003392:	f892 a001 	ldrb.w	sl, [r2, #1]
24003396:	f883 a001 	strb.w	sl, [r3, #1]
2400339a:	f892 a002 	ldrb.w	sl, [r2, #2]
2400339e:	f883 a002 	strb.w	sl, [r3, #2]
240033a2:	f892 a003 	ldrb.w	sl, [r2, #3]
240033a6:	f883 a003 	strb.w	sl, [r3, #3]
240033aa:	f892 a004 	ldrb.w	sl, [r2, #4]
240033ae:	f883 a004 	strb.w	sl, [r3, #4]
240033b2:	f892 a005 	ldrb.w	sl, [r2, #5]
240033b6:	f883 a005 	strb.w	sl, [r3, #5]
240033ba:	f892 a006 	ldrb.w	sl, [r2, #6]
240033be:	f883 a006 	strb.w	sl, [r3, #6]
240033c2:	f892 a007 	ldrb.w	sl, [r2, #7]
240033c6:	f883 a007 	strb.w	sl, [r3, #7]
240033ca:	f892 a008 	ldrb.w	sl, [r2, #8]
240033ce:	f883 a008 	strb.w	sl, [r3, #8]
240033d2:	7a52      	ldrb	r2, [r2, #9]
240033d4:	725a      	strb	r2, [r3, #9]
	  for (int k = 0; k < 20; k++)
240033d6:	d1cf      	bne.n	24003378 <main+0x728>
  for (int i = 0; i < 5; i++)
240033d8:	2f3b      	cmp	r7, #59	; 0x3b
240033da:	f105 0550 	add.w	r5, r5, #80	; 0x50
240033de:	d004      	beq.n	240033ea <main+0x79a>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
240033e0:	f8dc 3000 	ldr.w	r3, [ip]
240033e4:	3f01      	subs	r7, #1
240033e6:	7819      	ldrb	r1, [r3, #0]
240033e8:	e7a0      	b.n	2400332c <main+0x6dc>
240033ea:	f24a 4278 	movw	r2, #42104	; 0xa478
  for (int i = 0; i < 20; i++)
240033ee:	2300      	movs	r3, #0
	  prevKnobByte[i] = 256;
240033f0:	f44f 7180 	mov.w	r1, #256	; 0x100
240033f4:	f2c2 0201 	movt	r2, #8193	; 0x2001
240033f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < 20; i++)
240033fc:	3301      	adds	r3, #1
240033fe:	2b14      	cmp	r3, #20
24003400:	d1fa      	bne.n	240033f8 <main+0x7a8>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003402:	f240 0240 	movw	r2, #64	; 0x40
24003406:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
2400340a:	2340      	movs	r3, #64	; 0x40
2400340c:	f240 0400 	movw	r4, #0
24003410:	f6c3 0200 	movt	r2, #14336	; 0x3800
24003414:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003418:	f2c3 0400 	movt	r4, #12288	; 0x3000
2400341c:	f244 2a04 	movw	sl, #16900	; 0x4204
24003420:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
24003424:	f244 4744 	movw	r7, #17476	; 0x4444
24003428:	f009 fb0e 	bl	2400ca48 <HAL_SPI_TransmitReceive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
2400342c:	f640 0200 	movw	r2, #2048	; 0x800
24003430:	2340      	movs	r3, #64	; 0x40
24003432:	f64c 7008 	movw	r0, #53000	; 0xcf08
24003436:	f2c3 0200 	movt	r2, #12288	; 0x3000
2400343a:	f244 4550 	movw	r5, #17488	; 0x4450
2400343e:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003442:	f2c2 0a01 	movt	sl, #8193	; 0x2001
24003446:	18d1      	adds	r1, r2, r3
24003448:	f2c2 0701 	movt	r7, #8193	; 0x2001
2400344c:	f009 fafc 	bl	2400ca48 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24003450:	f64c 317c 	movw	r1, #52092	; 0xcb7c
24003454:	f64c 4014 	movw	r0, #52244	; 0xcc14
24003458:	f2c2 0501 	movt	r5, #8193	; 0x2001
2400345c:	f2c2 0101 	movt	r1, #8193	; 0x2001
24003460:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003464:	f7fd fcea 	bl	24000e3c <audioStart>
24003468:	f240 0300 	movw	r3, #0
2400346c:	f24a 4270 	movw	r2, #42096	; 0xa470
24003470:	f2cc 13e0 	movt	r3, #49632	; 0xc1e0
24003474:	f2c2 0201 	movt	r2, #8193	; 0x2001
24003478:	9319      	str	r3, [sp, #100]	; 0x64
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
2400347a:	230d      	movs	r3, #13
2400347c:	4691      	mov	r9, r2
2400347e:	f6c2 7380 	movt	r3, #12160	; 0x2f80
24003482:	ee08 3a10 	vmov	s16, r3
24003486:	f24a 436c 	movw	r3, #42092	; 0xa46c
2400348a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400348e:	9304      	str	r3, [sp, #16]
24003490:	f246 630e 	movw	r3, #26126	; 0x660e
24003494:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003498:	9309      	str	r3, [sp, #36]	; 0x24
2400349a:	f24a 436a 	movw	r3, #42090	; 0xa46a
2400349e:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034a2:	9307      	str	r3, [sp, #28]
240034a4:	f240 639c 	movw	r3, #1692	; 0x69c
240034a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
240034ac:	9310      	str	r3, [sp, #64]	; 0x40
240034ae:	f244 234c 	movw	r3, #16972	; 0x424c
240034b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034b6:	930f      	str	r3, [sp, #60]	; 0x3c
240034b8:	f248 6370 	movw	r3, #34416	; 0x8670
240034bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034c0:	930a      	str	r3, [sp, #40]	; 0x28
240034c2:	f24f 2358 	movw	r3, #62040	; 0xf258
240034c6:	f2c2 4301 	movt	r3, #9217	; 0x2401
240034ca:	9311      	str	r3, [sp, #68]	; 0x44
240034cc:	f246 43f4 	movw	r3, #25844	; 0x64f4
240034d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034d4:	9315      	str	r3, [sp, #84]	; 0x54
240034d6:	f64d 4368 	movw	r3, #56424	; 0xdc68
240034da:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034de:	9317      	str	r3, [sp, #92]	; 0x5c
240034e0:	f24a 4374 	movw	r3, #42100	; 0xa474
240034e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034e8:	9308      	str	r3, [sp, #32]
240034ea:	f24a 436b 	movw	r3, #42091	; 0xa46b
240034ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
240034f2:	930c      	str	r3, [sp, #48]	; 0x30
240034f4:	f24f 5308 	movw	r3, #62728	; 0xf508
240034f8:	f2c2 4301 	movt	r3, #9217	; 0x2401
240034fc:	9318      	str	r3, [sp, #96]	; 0x60
240034fe:	f244 4340 	movw	r3, #17472	; 0x4440
24003502:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003506:	931a      	str	r3, [sp, #104]	; 0x68
24003508:	f249 0344 	movw	r3, #36932	; 0x9044
2400350c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003510:	931b      	str	r3, [sp, #108]	; 0x6c
24003512:	f246 630c 	movw	r3, #26124	; 0x660c
24003516:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400351a:	931c      	str	r3, [sp, #112]	; 0x70
2400351c:	f244 4334 	movw	r3, #17460	; 0x4434
24003520:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003524:	931d      	str	r3, [sp, #116]	; 0x74
24003526:	f249 3308 	movw	r3, #37640	; 0x9308
2400352a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400352e:	9305      	str	r3, [sp, #20]
24003530:	f24a 43c8 	movw	r3, #42184	; 0xa4c8
24003534:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003538:	9303      	str	r3, [sp, #12]
					finalString[17] = '.';
2400353a:	f246 532e 	movw	r3, #25902	; 0x652e
2400353e:	f2c7 0362 	movt	r3, #28770	; 0x7062
24003542:	9316      	str	r3, [sp, #88]	; 0x58
	  if (rand > TWO_TO_31)
24003544:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
24003548:	ee08 3a90 	vmov	s17, r3
2400354c:	f004 0307 	and.w	r3, r4, #7
24003550:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24003554:	930b      	str	r3, [sp, #44]	; 0x2c
24003556:	e026      	b.n	240035a6 <main+0x956>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24003558:	f8ba 3000 	ldrh.w	r3, [sl]
2400355c:	b29b      	uxth	r3, r3
2400355e:	b90b      	cbnz	r3, 24003564 <main+0x914>
24003560:	f8ba 3002 	ldrh.w	r3, [sl, #2]
	  if (brainFirmwareUpdateRequested)
24003564:	683b      	ldr	r3, [r7, #0]
24003566:	2b00      	cmp	r3, #0
24003568:	d136      	bne.n	240035d8 <main+0x988>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
2400356a:	f64c 2074 	movw	r0, #51828	; 0xca74
2400356e:	4631      	mov	r1, r6
24003570:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003574:	f007 fd0a 	bl	2400af8c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24003578:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
2400357c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24003580:	eef4 7ae8 	vcmpe.f32	s15, s17
24003584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003588:	dd03      	ble.n	24003592 <main+0x942>
		  myTestInt++;
2400358a:	9a05      	ldr	r2, [sp, #20]
2400358c:	6813      	ldr	r3, [r2, #0]
2400358e:	3301      	adds	r3, #1
24003590:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
24003592:	782b      	ldrb	r3, [r5, #0]
24003594:	ee67 7a88 	vmul.f32	s15, s15, s16
24003598:	1c5a      	adds	r2, r3, #1
2400359a:	702a      	strb	r2, [r5, #0]
2400359c:	9a03      	ldr	r2, [sp, #12]
2400359e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240035a2:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
240035a6:	f89b 3000 	ldrb.w	r3, [fp]
240035aa:	b953      	cbnz	r3, 240035c2 <main+0x972>
		  if (presetWaitingToLoad > 0)
240035ac:	9b04      	ldr	r3, [sp, #16]
240035ae:	6819      	ldr	r1, [r3, #0]
240035b0:	2900      	cmp	r1, #0
240035b2:	d04a      	beq.n	2400364a <main+0x9fa>
			  if (!i2cSending)
240035b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
240035b6:	781b      	ldrb	r3, [r3, #0]
240035b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240035bc:	2b00      	cmp	r3, #0
240035be:	f000 813f 	beq.w	24003840 <main+0xbf0>
	  if (presetWaitingToParse > 0)
240035c2:	f8d9 3000 	ldr.w	r3, [r9]
240035c6:	2b00      	cmp	r3, #0
240035c8:	d0c6      	beq.n	24003558 <main+0x908>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
240035ca:	9b07      	ldr	r3, [sp, #28]
240035cc:	f8d9 0000 	ldr.w	r0, [r9]
240035d0:	7819      	ldrb	r1, [r3, #0]
240035d2:	f02a ff0d 	bl	2402e3f0 <__parsePreset_veneer>
240035d6:	e7bf      	b.n	24003558 <main+0x908>
	if (boardNumber == 0)
240035d8:	f89b 2000 	ldrb.w	r2, [fp]
240035dc:	2a00      	cmp	r2, #0
240035de:	d1c4      	bne.n	2400356a <main+0x91a>
  __IO uint8_t status = SD_PRESENT;
240035e0:	2301      	movs	r3, #1
240035e2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  return status;
240035e6:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
		if(BSP_SD_IsDetected())
240035ea:	b34b      	cbz	r3, 24003640 <main+0x9f0>
240035ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
240035ee:	2b00      	cmp	r3, #0
240035f0:	f040 81c0 	bne.w	24003974 <main+0xd24>
240035f4:	f240 0300 	movw	r3, #0
				audioOutBuffer[i] = 0;
240035f8:	2000      	movs	r0, #0
240035fa:	2100      	movs	r1, #0
240035fc:	f2c3 0300 	movt	r3, #12288	; 0x3000
24003600:	e8e3 0102 	strd	r0, r1, [r3], #8
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003604:	429c      	cmp	r4, r3
24003606:	d1fb      	bne.n	24003600 <main+0x9b0>
			loadFailed = 0;
24003608:	f04f 0800 	mov.w	r8, #0
2400360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			diskBusy = 1;
2400360e:	2201      	movs	r2, #1
			loadFailed = 0;
24003610:	f883 8000 	strb.w	r8, [r3]
			disk_initialize(0);
24003614:	4640      	mov	r0, r8
			diskBusy = 1;
24003616:	9b06      	ldr	r3, [sp, #24]
24003618:	701a      	strb	r2, [r3, #0]
			disk_initialize(0);
2400361a:	f00b fa03 	bl	2400ea24 <disk_initialize>
			disk_status(0);
2400361e:	4640      	mov	r0, r8
24003620:	f00b f9f4 	bl	2400ea0c <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003624:	f64d 6194 	movw	r1, #56980	; 0xde94
24003628:	f64d 2034 	movw	r0, #55860	; 0xda34
2400362c:	2201      	movs	r2, #1
2400362e:	f2c2 0101 	movt	r1, #8193	; 0x2001
24003632:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003636:	f00d fc7b 	bl	24010f30 <f_mount>
2400363a:	2800      	cmp	r0, #0
2400363c:	f000 8143 	beq.w	240038c6 <main+0xc76>
		brainFirmwareUpdateRequested = 0;
24003640:	2300      	movs	r3, #0
		diskBusy = 0;
24003642:	9a06      	ldr	r2, [sp, #24]
		brainFirmwareUpdateRequested = 0;
24003644:	603b      	str	r3, [r7, #0]
		diskBusy = 0;
24003646:	7013      	strb	r3, [r2, #0]
24003648:	e78f      	b.n	2400356a <main+0x91a>
		  else if (presetWaitingToWrite > 0)
2400364a:	9b08      	ldr	r3, [sp, #32]
2400364c:	681b      	ldr	r3, [r3, #0]
2400364e:	2b00      	cmp	r3, #0
24003650:	d0b7      	beq.n	240035c2 <main+0x972>
				  writePresetToSDCard(presetWaitingToWrite);
24003652:	9b08      	ldr	r3, [sp, #32]
24003654:	681b      	ldr	r3, [r3, #0]
24003656:	930e      	str	r3, [sp, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
24003658:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
2400365a:	f240 0000 	movw	r0, #0
2400365e:	f44f 6280 	mov.w	r2, #1024	; 0x400
24003662:	910d      	str	r1, [sp, #52]	; 0x34
24003664:	f2c3 0000 	movt	r0, #12288	; 0x3000
24003668:	f019 f802 	bl	2401c670 <memset>
  __IO uint8_t status = SD_PRESENT;
2400366c:	2301      	movs	r3, #1
2400366e:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
  return status;
24003672:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
	if(BSP_SD_IsDetected())
24003676:	2b00      	cmp	r3, #0
24003678:	f000 80db 	beq.w	24003832 <main+0xbe2>
2400367c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2400367e:	990d      	ldr	r1, [sp, #52]	; 0x34
24003680:	2b00      	cmp	r3, #0
24003682:	f040 8218 	bne.w	24003ab6 <main+0xe66>
24003686:	f240 0300 	movw	r3, #0
					audioOutBuffer[i] = 0;
2400368a:	2000      	movs	r0, #0
2400368c:	2100      	movs	r1, #0
2400368e:	f2c3 0300 	movt	r3, #12288	; 0x3000
24003692:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003696:	429c      	cmp	r4, r3
24003698:	d1fb      	bne.n	24003692 <main+0xa42>
				diskBusy = 1;
2400369a:	2301      	movs	r3, #1
2400369c:	9a06      	ldr	r2, [sp, #24]
2400369e:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
240036a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
240036a2:	7813      	ldrb	r3, [r2, #0]
240036a4:	2b63      	cmp	r3, #99	; 0x63
240036a6:	d901      	bls.n	240036ac <main+0xa5c>
			        presetNumberToSave = 99;
240036a8:	2363      	movs	r3, #99	; 0x63
240036aa:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBufC, 10);
240036ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
240036ae:	220a      	movs	r2, #10
240036b0:	a922      	add	r1, sp, #136	; 0x88
240036b2:	7818      	ldrb	r0, [r3, #0]
240036b4:	f018 ff98 	bl	2401c5e8 <itoa>
				int len = ((strlen(charBufC)));
240036b8:	a822      	add	r0, sp, #136	; 0x88
240036ba:	f7fc fe0d 	bl	240002d8 <strlen>
				if (len == 1)
240036be:	2801      	cmp	r0, #1
				int len = ((strlen(charBufC)));
240036c0:	4602      	mov	r2, r0
				if (len == 1)
240036c2:	f000 8167 	beq.w	24003994 <main+0xd44>
					strcat(charBufC, "*.ebp");
240036c6:	9911      	ldr	r1, [sp, #68]	; 0x44
240036c8:	ab22      	add	r3, sp, #136	; 0x88
240036ca:	6808      	ldr	r0, [r1, #0]
240036cc:	8889      	ldrh	r1, [r1, #4]
240036ce:	5098      	str	r0, [r3, r2]
240036d0:	4413      	add	r3, r2
					strcpy(finalStringC, charBufC);
240036d2:	a825      	add	r0, sp, #148	; 0x94
240036d4:	3206      	adds	r2, #6
					strcat(charBufC, "*.ebp");
240036d6:	8099      	strh	r1, [r3, #4]
					strcpy(finalStringC, charBufC);
240036d8:	a922      	add	r1, sp, #136	; 0x88
240036da:	f018 fffb 	bl	2401c6d4 <memcpy>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
240036de:	f64d 6394 	movw	r3, #56980	; 0xde94
240036e2:	f246 42f4 	movw	r2, #25844	; 0x64f4
240036e6:	f244 4854 	movw	r8, #17492	; 0x4454
240036ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
240036ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
240036f2:	f2c2 0201 	movt	r2, #8193	; 0x2001
240036f6:	f2c2 0801 	movt	r8, #8193	; 0x2001
240036fa:	4692      	mov	sl, r2
240036fc:	e9cd b712 	strd	fp, r7, [sp, #72]	; 0x48
24003700:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
24003704:	461f      	mov	r7, r3
24003706:	e004      	b.n	24003712 <main+0xac2>
					if((res == FR_OK) && (fno.fname[0]))
24003708:	f89b 3016 	ldrb.w	r3, [fp, #22]
2400370c:	b173      	cbz	r3, 2400372c <main+0xadc>
						f_unlink (fno.fname);
2400370e:	f00e f979 	bl	24011a04 <f_unlink>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
24003712:	ab25      	add	r3, sp, #148	; 0x94
24003714:	463a      	mov	r2, r7
24003716:	4651      	mov	r1, sl
24003718:	4640      	mov	r0, r8
2400371a:	f00e f929 	bl	24011970 <f_findfirst>
2400371e:	4603      	mov	r3, r0
						f_unlink (fno.fname);
24003720:	f246 500a 	movw	r0, #25866	; 0x650a
24003724:	f2c2 0001 	movt	r0, #8193	; 0x2001
					if((res == FR_OK) && (fno.fname[0]))
24003728:	2b00      	cmp	r3, #0
2400372a:	d0ed      	beq.n	24003708 <main+0xab8>
				itoa(presetNumberToSave, charBuf, 10);
2400372c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400372e:	220a      	movs	r2, #10
24003730:	a928      	add	r1, sp, #160	; 0xa0
24003732:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
24003736:	7818      	ldrb	r0, [r3, #0]
24003738:	e9dd b712 	ldrd	fp, r7, [sp, #72]	; 0x48
2400373c:	f018 ff54 	bl	2401c5e8 <itoa>
				len = ((strlen(charBuf)));
24003740:	a828      	add	r0, sp, #160	; 0xa0
24003742:	f7fc fdc9 	bl	240002d8 <strlen>
						finalString[i+3] = buffer[i+4];
24003746:	9a14      	ldr	r2, [sp, #80]	; 0x50
					finalString[17] = '.';
24003748:	9b16      	ldr	r3, [sp, #88]	; 0x58
2400374a:	f8cd 30c9 	str.w	r3, [sp, #201]	; 0xc9
						finalString[i+3] = buffer[i+4];
2400374e:	7913      	ldrb	r3, [r2, #4]
							finalString[i+3] = '_';
24003750:	2b20      	cmp	r3, #32
24003752:	bf08      	it	eq
24003754:	235f      	moveq	r3, #95	; 0x5f
24003756:	f88d 30bb 	strb.w	r3, [sp, #187]	; 0xbb
						finalString[i+3] = buffer[i+4];
2400375a:	7953      	ldrb	r3, [r2, #5]
							finalString[i+3] = '_';
2400375c:	2b20      	cmp	r3, #32
2400375e:	bf08      	it	eq
24003760:	235f      	moveq	r3, #95	; 0x5f
24003762:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
						finalString[i+3] = buffer[i+4];
24003766:	7993      	ldrb	r3, [r2, #6]
							finalString[i+3] = '_';
24003768:	2b20      	cmp	r3, #32
2400376a:	bf08      	it	eq
2400376c:	235f      	moveq	r3, #95	; 0x5f
2400376e:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
						finalString[i+3] = buffer[i+4];
24003772:	79d3      	ldrb	r3, [r2, #7]
							finalString[i+3] = '_';
24003774:	2b20      	cmp	r3, #32
24003776:	bf08      	it	eq
24003778:	235f      	moveq	r3, #95	; 0x5f
2400377a:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
						finalString[i+3] = buffer[i+4];
2400377e:	7a13      	ldrb	r3, [r2, #8]
							finalString[i+3] = '_';
24003780:	2b20      	cmp	r3, #32
24003782:	bf08      	it	eq
24003784:	235f      	moveq	r3, #95	; 0x5f
24003786:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
						finalString[i+3] = buffer[i+4];
2400378a:	7a53      	ldrb	r3, [r2, #9]
							finalString[i+3] = '_';
2400378c:	2b20      	cmp	r3, #32
2400378e:	bf08      	it	eq
24003790:	235f      	moveq	r3, #95	; 0x5f
24003792:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
						finalString[i+3] = buffer[i+4];
24003796:	7a93      	ldrb	r3, [r2, #10]
							finalString[i+3] = '_';
24003798:	2b20      	cmp	r3, #32
2400379a:	bf08      	it	eq
2400379c:	235f      	moveq	r3, #95	; 0x5f
2400379e:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
						finalString[i+3] = buffer[i+4];
240037a2:	7ad3      	ldrb	r3, [r2, #11]
							finalString[i+3] = '_';
240037a4:	2b20      	cmp	r3, #32
240037a6:	bf08      	it	eq
240037a8:	235f      	moveq	r3, #95	; 0x5f
240037aa:	f88d 30c2 	strb.w	r3, [sp, #194]	; 0xc2
						finalString[i+3] = buffer[i+4];
240037ae:	7b13      	ldrb	r3, [r2, #12]
							finalString[i+3] = '_';
240037b0:	2b20      	cmp	r3, #32
240037b2:	bf08      	it	eq
240037b4:	235f      	moveq	r3, #95	; 0x5f
240037b6:	f88d 30c3 	strb.w	r3, [sp, #195]	; 0xc3
						finalString[i+3] = buffer[i+4];
240037ba:	7b53      	ldrb	r3, [r2, #13]
							finalString[i+3] = '_';
240037bc:	2b20      	cmp	r3, #32
240037be:	bf08      	it	eq
240037c0:	235f      	moveq	r3, #95	; 0x5f
240037c2:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
						finalString[i+3] = buffer[i+4];
240037c6:	7b93      	ldrb	r3, [r2, #14]
							finalString[i+3] = '_';
240037c8:	2b20      	cmp	r3, #32
240037ca:	bf08      	it	eq
240037cc:	235f      	moveq	r3, #95	; 0x5f
240037ce:	f88d 30c5 	strb.w	r3, [sp, #197]	; 0xc5
						finalString[i+3] = buffer[i+4];
240037d2:	7bd3      	ldrb	r3, [r2, #15]
							finalString[i+3] = '_';
240037d4:	2b20      	cmp	r3, #32
240037d6:	bf08      	it	eq
240037d8:	235f      	moveq	r3, #95	; 0x5f
240037da:	f88d 30c6 	strb.w	r3, [sp, #198]	; 0xc6
						finalString[i+3] = buffer[i+4];
240037de:	7c13      	ldrb	r3, [r2, #16]
							finalString[i+3] = '_';
240037e0:	2b20      	cmp	r3, #32
240037e2:	bf08      	it	eq
240037e4:	235f      	moveq	r3, #95	; 0x5f
240037e6:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
						finalString[i+3] = buffer[i+4];
240037ea:	7c53      	ldrb	r3, [r2, #17]
							finalString[i+3] = '_';
240037ec:	2b20      	cmp	r3, #32
240037ee:	bf08      	it	eq
240037f0:	235f      	moveq	r3, #95	; 0x5f
				if (len == 1)
240037f2:	2801      	cmp	r0, #1
240037f4:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
					finalString[21] = 0;
240037f8:	f04f 0300 	mov.w	r3, #0
240037fc:	f88d 30cd 	strb.w	r3, [sp, #205]	; 0xcd
					finalString[2] = '_';
24003800:	f04f 035f 	mov.w	r3, #95	; 0x5f
24003804:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
				if (len == 1)
24003808:	f000 80be 	beq.w	24003988 <main+0xd38>
					finalString[1] = charBuf[1];
2400380c:	f89d 30a1 	ldrb.w	r3, [sp, #161]	; 0xa1
24003810:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
					finalString[0] = charBuf[0];
24003814:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003818:	f64d 4068 	movw	r0, #56424	; 0xdc68
2400381c:	220a      	movs	r2, #10
2400381e:	4631      	mov	r1, r6
					finalString[0] = '0';
24003820:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003824:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003828:	f00d fbd0 	bl	24010fcc <f_open>
2400382c:	2800      	cmp	r0, #0
2400382e:	f000 80c8 	beq.w	240039c2 <main+0xd72>
	presetWaitingToWrite = 0;
24003832:	2300      	movs	r3, #0
24003834:	9a08      	ldr	r2, [sp, #32]
24003836:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24003838:	9a06      	ldr	r2, [sp, #24]
2400383a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
2400383c:	b662      	cpsie	i
}
2400383e:	e6c0      	b.n	240035c2 <main+0x972>
				  checkForSDCardPreset(presetNumberToLoad);
24003840:	9b07      	ldr	r3, [sp, #28]
24003842:	f893 8000 	ldrb.w	r8, [r3]
	prevVoice = numberToLoad;
24003846:	9b10      	ldr	r3, [sp, #64]	; 0x40
				  checkForSDCardPreset(presetNumberToLoad);
24003848:	fa5f f888 	uxtb.w	r8, r8
	prevVoice = numberToLoad;
2400384c:	f8c3 8000 	str.w	r8, [r3]
	voice = numberToLoad;
24003850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
24003852:	f8c3 8000 	str.w	r8, [r3]
  __IO uint8_t status = SD_PRESENT;
24003856:	2301      	movs	r3, #1
24003858:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
  return status;
2400385c:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
	if(BSP_SD_IsDetected())
24003860:	b353      	cbz	r3, 240038b8 <main+0xc68>
24003862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24003864:	2b00      	cmp	r3, #0
24003866:	f040 8130 	bne.w	24003aca <main+0xe7a>
2400386a:	f240 0300 	movw	r3, #0
			audioOutBuffer[i] = 0;
2400386e:	2000      	movs	r0, #0
24003870:	2100      	movs	r1, #0
24003872:	f2c3 0300 	movt	r3, #12288	; 0x3000
24003876:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400387a:	429c      	cmp	r4, r3
2400387c:	d1fb      	bne.n	24003876 <main+0xc26>
		loadFailed = 0;
2400387e:	2300      	movs	r3, #0
24003880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		diskBusy = 1;
24003882:	9906      	ldr	r1, [sp, #24]
		loadFailed = 0;
24003884:	7013      	strb	r3, [r2, #0]
		disk_initialize(0);
24003886:	4618      	mov	r0, r3
		presetWaitingToLoad = 0;
24003888:	9a04      	ldr	r2, [sp, #16]
2400388a:	6013      	str	r3, [r2, #0]
		diskBusy = 1;
2400388c:	2201      	movs	r2, #1
2400388e:	700a      	strb	r2, [r1, #0]
		disk_initialize(0);
24003890:	f00b f8c8 	bl	2400ea24 <disk_initialize>
	    disk_status(0);
24003894:	2300      	movs	r3, #0
24003896:	4618      	mov	r0, r3
24003898:	f00b f8b8 	bl	2400ea0c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400389c:	f64d 6194 	movw	r1, #56980	; 0xde94
240038a0:	f64d 2034 	movw	r0, #55860	; 0xda34
240038a4:	2201      	movs	r2, #1
240038a6:	f2c2 0101 	movt	r1, #8193	; 0x2001
240038aa:	f2c2 0001 	movt	r0, #8193	; 0x2001
240038ae:	f00d fb3f 	bl	24010f30 <f_mount>
240038b2:	2800      	cmp	r0, #0
240038b4:	f000 8098 	beq.w	240039e8 <main+0xd98>
		loadFailed = 1;
240038b8:	2301      	movs	r3, #1
240038ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
240038bc:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
240038be:	2300      	movs	r3, #0
240038c0:	9a06      	ldr	r2, [sp, #24]
240038c2:	7013      	strb	r3, [r2, #0]
	return found;
240038c4:	e67d      	b.n	240035c2 <main+0x972>
				char finalString[10] = "brain.bin";
240038c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
240038c8:	46b4      	mov	ip, r6
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240038ca:	4633      	mov	r3, r6
				char finalString[10] = "brain.bin";
240038cc:	ca07      	ldmia	r2, {r0, r1, r2}
240038ce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240038d2:	f246 41f4 	movw	r1, #25844	; 0x64f4
240038d6:	f244 4054 	movw	r0, #17492	; 0x4454
				char finalString[10] = "brain.bin";
240038da:	f8ac 2000 	strh.w	r2, [ip]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240038de:	f64d 6294 	movw	r2, #56980	; 0xde94
240038e2:	f2c2 0101 	movt	r1, #8193	; 0x2001
240038e6:	f2c2 0001 	movt	r0, #8193	; 0x2001
240038ea:	f2c2 0201 	movt	r2, #8193	; 0x2001
240038ee:	f00e f83f 	bl	24011970 <f_findfirst>
				if(res == FR_OK)
240038f2:	2800      	cmp	r0, #0
240038f4:	f47f aea4 	bne.w	24003640 <main+0x9f0>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
240038f8:	f64d 4068 	movw	r0, #56424	; 0xdc68
240038fc:	f246 510a 	movw	r1, #25866	; 0x650a
24003900:	2211      	movs	r2, #17
24003902:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003906:	f2c2 0101 	movt	r1, #8193	; 0x2001
2400390a:	f00d fb5f 	bl	24010fcc <f_open>
2400390e:	2800      	cmp	r0, #0
24003910:	f47f ae96 	bne.w	24003640 <main+0x9f0>
						brainFirmwareSize = f_size(&SDFile);
24003914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003916:	f240 0100 	movw	r1, #0
2400391a:	f64d 4068 	movw	r0, #56424	; 0xdc68
						brainFirmwareSize = f_size(&SDFile);
2400391e:	68da      	ldr	r2, [r3, #12]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003920:	f2cc 11e0 	movt	r1, #49632	; 0xc1e0
						brainFirmwareSize = f_size(&SDFile);
24003924:	9b1a      	ldr	r3, [sp, #104]	; 0x68
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003926:	f2c2 0001 	movt	r0, #8193	; 0x2001
						brainFirmwareSize = f_size(&SDFile);
2400392a:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
2400392c:	ab28      	add	r3, sp, #160	; 0xa0
2400392e:	f00d fcb5 	bl	2401129c <f_read>
						f_close(&SDFile);
24003932:	f64d 4068 	movw	r0, #56424	; 0xdc68
24003936:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400393a:	f00d ff19 	bl	24011770 <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
2400393e:	f64f 73ff 	movw	r3, #65535	; 0xffff
24003942:	9a19      	ldr	r2, [sp, #100]	; 0x64
24003944:	f2cc 13df 	movt	r3, #49631	; 0xc1df
24003948:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
2400394c:	f1c2 0001 	rsb	r0, r2, #1
24003950:	18c2      	adds	r2, r0, r3
							memoryTest[i] = brainFirmwareBuffer[i];
24003952:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003956:	f80c 1002 	strb.w	r1, [ip, r2]
						for (uint_fast16_t i = 0; i< 700; i++)
2400395a:	f240 22bb 	movw	r2, #699	; 0x2bb
2400395e:	f2cc 12e0 	movt	r2, #49632	; 0xc1e0
24003962:	429a      	cmp	r2, r3
24003964:	d1f4      	bne.n	24003950 <main+0xd00>
						foundBrainFirmware = 1;
24003966:	2301      	movs	r3, #1
24003968:	9a1c      	ldr	r2, [sp, #112]	; 0x70
2400396a:	7013      	strb	r3, [r2, #0]
						brainFirmwareBufferIndex = 0;
2400396c:	2300      	movs	r3, #0
2400396e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
24003970:	6013      	str	r3, [r2, #0]
24003972:	e665      	b.n	24003640 <main+0x9f0>
24003974:	f240 0300 	movw	r3, #0
24003978:	f2c3 0300 	movt	r3, #12288	; 0x3000
				audioOutBuffer[i + 1] = 0;
2400397c:	e9c3 2200 	strd	r2, r2, [r3]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003980:	3308      	adds	r3, #8
24003982:	429c      	cmp	r4, r3
24003984:	d1fa      	bne.n	2400397c <main+0xd2c>
24003986:	e63f      	b.n	24003608 <main+0x9b8>
					finalString[1] = charBuf[0];
24003988:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
2400398c:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
					finalString[0] = '0';
24003990:	2330      	movs	r3, #48	; 0x30
24003992:	e741      	b.n	24003818 <main+0xbc8>
					finalStringC[2] = charBufC[1];
24003994:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
					strcat(finalStringC, "*.ebp");
24003998:	a825      	add	r0, sp, #148	; 0x94
					finalStringC[2] = charBufC[1];
2400399a:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
					finalStringC[1] = charBufC[0];
2400399e:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
240039a2:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
					finalStringC[0] = '0';
240039a6:	2330      	movs	r3, #48	; 0x30
240039a8:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
					strcat(finalStringC, "*.ebp");
240039ac:	f7fc fc94 	bl	240002d8 <strlen>
240039b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
240039b2:	4603      	mov	r3, r0
240039b4:	a925      	add	r1, sp, #148	; 0x94
240039b6:	6810      	ldr	r0, [r2, #0]
240039b8:	8892      	ldrh	r2, [r2, #4]
240039ba:	50c8      	str	r0, [r1, r3]
240039bc:	440b      	add	r3, r1
240039be:	809a      	strh	r2, [r3, #4]
240039c0:	e68d      	b.n	240036de <main+0xa8e>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
240039c2:	f242 3180 	movw	r1, #9088	; 0x2380
240039c6:	f64d 4068 	movw	r0, #56424	; 0xdc68
240039ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
240039cc:	ab21      	add	r3, sp, #132	; 0x84
240039ce:	f2c3 0104 	movt	r1, #12292	; 0x3004
240039d2:	f2c2 0001 	movt	r0, #8193	; 0x2001
240039d6:	f00d fd87 	bl	240114e8 <f_write>
					f_close(&SDFile);
240039da:	f64d 4068 	movw	r0, #56424	; 0xdc68
240039de:	f2c2 0001 	movt	r0, #8193	; 0x2001
240039e2:	f00d fec5 	bl	24011770 <f_close>
240039e6:	e724      	b.n	24003832 <main+0xbe2>
			itoa(numberToLoad, charBuf, 10);
240039e8:	220a      	movs	r2, #10
240039ea:	a928      	add	r1, sp, #160	; 0xa0
240039ec:	4640      	mov	r0, r8
240039ee:	f018 fdfb 	bl	2401c5e8 <itoa>
			int len = ((strlen(charBuf)));
240039f2:	a828      	add	r0, sp, #160	; 0xa0
240039f4:	f7fc fc70 	bl	240002d8 <strlen>
			if (len == 1)
240039f8:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
240039fa:	4602      	mov	r2, r0
			if (len == 1)
240039fc:	d06f      	beq.n	24003ade <main+0xe8e>
				strcat(charBuf, "*.ebp");
240039fe:	9911      	ldr	r1, [sp, #68]	; 0x44
24003a00:	ab28      	add	r3, sp, #160	; 0xa0
24003a02:	6808      	ldr	r0, [r1, #0]
24003a04:	8889      	ldrh	r1, [r1, #4]
24003a06:	5098      	str	r0, [r3, r2]
24003a08:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003a0a:	4630      	mov	r0, r6
24003a0c:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
24003a0e:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003a10:	a928      	add	r1, sp, #160	; 0xa0
24003a12:	f018 fe5f 	bl	2401c6d4 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a16:	f64d 6294 	movw	r2, #56980	; 0xde94
24003a1a:	f246 41f4 	movw	r1, #25844	; 0x64f4
24003a1e:	f244 4054 	movw	r0, #17492	; 0x4454
24003a22:	4633      	mov	r3, r6
24003a24:	f2c2 0201 	movt	r2, #8193	; 0x2001
24003a28:	f2c2 0101 	movt	r1, #8193	; 0x2001
24003a2c:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003a30:	f00d ff9e 	bl	24011970 <f_findfirst>
			if(res == FR_OK)
24003a34:	2800      	cmp	r0, #0
24003a36:	f47f af3f 	bne.w	240038b8 <main+0xc68>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003a3a:	f64d 4068 	movw	r0, #56424	; 0xdc68
24003a3e:	f246 510a 	movw	r1, #25866	; 0x650a
24003a42:	2211      	movs	r2, #17
24003a44:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003a48:	f2c2 0101 	movt	r1, #8193	; 0x2001
24003a4c:	f00d fabe 	bl	24010fcc <f_open>
24003a50:	4680      	mov	r8, r0
24003a52:	2800      	cmp	r0, #0
24003a54:	f47f af30 	bne.w	240038b8 <main+0xc68>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003a58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
24003a5a:	f242 3180 	movw	r1, #9088	; 0x2380
24003a5e:	f64d 4068 	movw	r0, #56424	; 0xdc68
24003a62:	ab25      	add	r3, sp, #148	; 0x94
24003a64:	f2c3 0104 	movt	r1, #12292	; 0x3004
24003a68:	68d2      	ldr	r2, [r2, #12]
24003a6a:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003a6e:	f00d fc15 	bl	2401129c <f_read>
					f_close(&SDFile);
24003a72:	f64d 4068 	movw	r0, #56424	; 0xdc68
					presetWaitingToParse = bytesRead;
24003a76:	9b25      	ldr	r3, [sp, #148]	; 0x94
					f_close(&SDFile);
24003a78:	f2c2 0001 	movt	r0, #8193	; 0x2001
					presetWaitingToParse = bytesRead;
24003a7c:	f8c9 3000 	str.w	r3, [r9]
					f_close(&SDFile);
24003a80:	f00d fe76 	bl	24011770 <f_close>
	  	i2cSending = 1;
24003a84:	2301      	movs	r3, #1
24003a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
24003a88:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003a8a:	b672      	cpsid	i
	  	HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003a8c:	f242 7310 	movw	r3, #10000	; 0x2710
24003a90:	f242 3280 	movw	r2, #9088	; 0x2380
24003a94:	f244 3088 	movw	r0, #17288	; 0x4388
24003a98:	2144      	movs	r1, #68	; 0x44
24003a9a:	9300      	str	r3, [sp, #0]
24003a9c:	f2c3 0204 	movt	r2, #12292	; 0x3004
24003aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003aa4:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003aa8:	f004 f9a0 	bl	24007dec <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003aac:	b662      	cpsie	i
	  	i2cSending = 0;
24003aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
24003ab0:	f882 8000 	strb.w	r8, [r2]
24003ab4:	e703      	b.n	240038be <main+0xc6e>
24003ab6:	f240 0300 	movw	r3, #0
24003aba:	f2c3 0300 	movt	r3, #12288	; 0x3000
					audioOutBuffer[i + 1] = 0;
24003abe:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003ac2:	3308      	adds	r3, #8
24003ac4:	42a3      	cmp	r3, r4
24003ac6:	d1fa      	bne.n	24003abe <main+0xe6e>
24003ac8:	e5e7      	b.n	2400369a <main+0xa4a>
24003aca:	f240 0300 	movw	r3, #0
24003ace:	f2c3 0300 	movt	r3, #12288	; 0x3000
			audioOutBuffer[i + 1] = 0;
24003ad2:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003ad6:	3308      	adds	r3, #8
24003ad8:	429c      	cmp	r4, r3
24003ada:	d1fa      	bne.n	24003ad2 <main+0xe82>
24003adc:	e6cf      	b.n	2400387e <main+0xc2e>
				finalString[2] = charBuf[1];
24003ade:	f89d 30a1 	ldrb.w	r3, [sp, #161]	; 0xa1
				strcat(finalString, "*.ebp");
24003ae2:	4630      	mov	r0, r6
				finalString[2] = charBuf[1];
24003ae4:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
				finalString[1] = charBuf[0];
24003ae8:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
24003aec:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
				finalString[0] = '0';
24003af0:	2330      	movs	r3, #48	; 0x30
24003af2:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
				strcat(finalString, "*.ebp");
24003af6:	f7fc fbef 	bl	240002d8 <strlen>
24003afa:	9a11      	ldr	r2, [sp, #68]	; 0x44
24003afc:	4603      	mov	r3, r0
24003afe:	6810      	ldr	r0, [r2, #0]
24003b00:	8892      	ldrh	r2, [r2, #4]
24003b02:	50f0      	str	r0, [r6, r3]
24003b04:	4433      	add	r3, r6
24003b06:	809a      	strh	r2, [r3, #4]
24003b08:	e785      	b.n	24003a16 <main+0xdc6>
	  getPresetNamesFromSDCard();
24003b0a:	f7fd ff59 	bl	240019c0 <getPresetNamesFromSDCard>
	  diskBusy = 1;
24003b0e:	f7ff ba74 	b.w	24002ffa <main+0x3aa>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003b12:	f242 3180 	movw	r1, #9088	; 0x2380
24003b16:	f244 3088 	movw	r0, #17288	; 0x4388
24003b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003b1e:	f2c3 0104 	movt	r1, #12292	; 0x3004
24003b22:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003b26:	f004 fb3b 	bl	240081a0 <HAL_I2C_Slave_Receive_IT>
24003b2a:	f7ff b9a9 	b.w	24002e80 <main+0x230>
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003b2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24003b32:	952f      	str	r5, [sp, #188]	; 0xbc
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003b34:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003b38:	4631      	mov	r1, r6
24003b3a:	f6c5 0002 	movt	r0, #22530	; 0x5802
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003b3e:	9430      	str	r4, [sp, #192]	; 0xc0
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003b40:	952e      	str	r5, [sp, #184]	; 0xb8
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003b42:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003b46:	f003 fec3 	bl	240078d0 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003b4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
24003b4e:	4622      	mov	r2, r4
24003b50:	4629      	mov	r1, r5
24003b52:	f6c5 0002 	movt	r0, #22530	; 0x5802
24003b56:	f004 f81b 	bl	24007b90 <HAL_GPIO_WritePin>
24003b5a:	f7ff b988 	b.w	24002e6e <main+0x21e>
24003b5e:	bf00      	nop

24003b60 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003b60:	2840      	cmp	r0, #64	; 0x40
{
24003b62:	4601      	mov	r1, r0
  if(GPIO_Pin == GPIO_PIN_6) {
24003b64:	d000      	beq.n	24003b68 <HAL_GPIO_EXTI_Callback+0x8>
}
24003b66:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003b68:	f44f 6080 	mov.w	r0, #1024	; 0x400
24003b6c:	f6c5 0002 	movt	r0, #22530	; 0x5802
24003b70:	f004 b808 	b.w	24007b84 <HAL_GPIO_ReadPin>

24003b74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24003b74:	4770      	bx	lr
24003b76:	bf00      	nop

24003b78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003b78:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003b7a:	f64c 2074 	movw	r0, #51828	; 0xca74
24003b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003b82:	2200      	movs	r2, #0
  hrng.Instance = RNG;
24003b84:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003b88:	f6c4 0302 	movt	r3, #18434	; 0x4802
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003b8c:	e9c0 3200 	strd	r3, r2, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24003b90:	f007 f9ba 	bl	2400af08 <HAL_RNG_Init>
24003b94:	b900      	cbnz	r0, 24003b98 <MX_RNG_Init+0x20>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003b96:	bd08      	pop	{r3, pc}
24003b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003b9c:	f7ff bfea 	b.w	24003b74 <Error_Handler>

24003ba0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003ba0:	b510      	push	{r4, lr}
24003ba2:	b0b2      	sub	sp, #200	; 0xc8
24003ba4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003ba6:	22c0      	movs	r2, #192	; 0xc0
24003ba8:	2100      	movs	r1, #0
24003baa:	a802      	add	r0, sp, #8
24003bac:	f018 fd60 	bl	2401c670 <memset>
  if(rngHandle->Instance==RNG)
24003bb0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
24003bb4:	6822      	ldr	r2, [r4, #0]
24003bb6:	f6c4 0302 	movt	r3, #18434	; 0x4802
24003bba:	429a      	cmp	r2, r3
24003bbc:	d001      	beq.n	24003bc2 <HAL_RNG_MspInit+0x22>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003bbe:	b032      	add	sp, #200	; 0xc8
24003bc0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003bc2:	2200      	movs	r2, #0
24003bc4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003bc6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003bc8:	f2c0 0202 	movt	r2, #2
24003bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003bd0:	f005 fea4 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
24003bd4:	b988      	cbnz	r0, 24003bfa <HAL_RNG_MspInit+0x5a>
    __HAL_RCC_RNG_CLK_ENABLE();
24003bd6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24003bda:	f6c5 0302 	movt	r3, #22530	; 0x5802
24003bde:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003be6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003bea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003bf2:	9301      	str	r3, [sp, #4]
24003bf4:	9b01      	ldr	r3, [sp, #4]
}
24003bf6:	b032      	add	sp, #200	; 0xc8
24003bf8:	bd10      	pop	{r4, pc}
      Error_Handler();
24003bfa:	f7ff ffbb 	bl	24003b74 <Error_Handler>
24003bfe:	e7ea      	b.n	24003bd6 <HAL_RNG_MspInit+0x36>

24003c00 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003c00:	f64c 307c 	movw	r0, #52092	; 0xcb7c
24003c04:	f645 0304 	movw	r3, #22532	; 0x5804
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003c08:	2101      	movs	r1, #1
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003c0a:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24003c0c:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003c10:	f2c4 0301 	movt	r3, #16385	; 0x4001
{
24003c14:	b510      	push	{r4, lr}
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003c16:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003c1a:	6082      	str	r2, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003c1c:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003c1e:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003c22:	2302      	movs	r3, #2
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003c24:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003c28:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003c2c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003c30:	461a      	mov	r2, r3
24003c32:	f007 fbe9 	bl	2400b408 <HAL_SAI_InitProtocol>
24003c36:	b9c0      	cbnz	r0, 24003c6a <MX_SAI1_Init+0x6a>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
24003c38:	f64c 4014 	movw	r0, #52244	; 0xcc14
24003c3c:	f645 0424 	movw	r4, #22564	; 0x5824
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003c40:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003c42:	2302      	movs	r3, #2
  hsai_BlockB1.Instance = SAI1_Block_B;
24003c44:	f2c2 0001 	movt	r0, #8193	; 0x2001
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003c48:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003c4a:	f2c4 0401 	movt	r4, #16385	; 0x4001
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003c4e:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003c50:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003c52:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24003c54:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24003c56:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003c58:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003c5c:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003c5e:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003c62:	f007 fbd1 	bl	2400b408 <HAL_SAI_InitProtocol>
24003c66:	b918      	cbnz	r0, 24003c70 <MX_SAI1_Init+0x70>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003c68:	bd10      	pop	{r4, pc}
    Error_Handler();
24003c6a:	f7ff ff83 	bl	24003b74 <Error_Handler>
24003c6e:	e7e3      	b.n	24003c38 <MX_SAI1_Init+0x38>
}
24003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003c74:	f7ff bf7e 	b.w	24003b74 <Error_Handler>

24003c78 <HAL_SAI_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003c78:	f645 0204 	movw	r2, #22532	; 0x5804
{
24003c7c:	b570      	push	{r4, r5, r6, lr}
    if(saiHandle->Instance==SAI1_Block_A)
24003c7e:	f2c4 0201 	movt	r2, #16385	; 0x4001
24003c82:	6803      	ldr	r3, [r0, #0]
{
24003c84:	b08c      	sub	sp, #48	; 0x30
24003c86:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
24003c88:	4293      	cmp	r3, r2
24003c8a:	d007      	beq.n	24003c9c <HAL_SAI_MspInit+0x24>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24003c8c:	f645 0224 	movw	r2, #22564	; 0x5824
24003c90:	f2c4 0201 	movt	r2, #16385	; 0x4001
24003c94:	4293      	cmp	r3, r2
24003c96:	d05f      	beq.n	24003d58 <HAL_SAI_MspInit+0xe0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003c98:	b00c      	add	sp, #48	; 0x30
24003c9a:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
24003c9c:	f64c 2388 	movw	r3, #51848	; 0xca88
24003ca0:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003ca4:	681a      	ldr	r2, [r3, #0]
24003ca6:	2a00      	cmp	r2, #0
24003ca8:	f000 80ac 	beq.w	24003e04 <HAL_SAI_MspInit+0x18c>
    SAI1_client ++;
24003cac:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003cae:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003cb0:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003cb2:	2102      	movs	r1, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003cb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    SAI1_client ++;
24003cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003cba:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003cbc:	2306      	movs	r3, #6
    hdma_sai1_a.Instance = DMA1_Stream1;
24003cbe:	f64c 258c 	movw	r5, #51852	; 0xca8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003cc2:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003cc6:	910a      	str	r1, [sp, #40]	; 0x28
    hdma_sai1_a.Instance = DMA1_Stream1;
24003cc8:	f2c2 0501 	movt	r5, #8193	; 0x2001
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003ccc:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003cce:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003cd2:	a907      	add	r1, sp, #28
24003cd4:	f003 fdfc 	bl	240078d0 <HAL_GPIO_Init>
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003cd8:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Instance = DMA1_Stream1;
24003cda:	2328      	movs	r3, #40	; 0x28
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003cdc:	4628      	mov	r0, r5
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003cde:	606a      	str	r2, [r5, #4]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
24003ce4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003ce8:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003cea:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Instance = DMA1_Stream1;
24003cf0:	602b      	str	r3, [r5, #0]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003cf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003cf6:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003cfa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003d02:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003d06:	2304      	movs	r3, #4
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24003d08:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003d0c:	e9c5 660a 	strd	r6, r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003d10:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003d12:	f001 fd43 	bl	2400579c <HAL_DMA_Init>
24003d16:	2800      	cmp	r0, #0
24003d18:	f040 808b 	bne.w	24003e32 <HAL_SAI_MspInit+0x1ba>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003d1c:	2206      	movs	r2, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003d22:	f64c 208c 	movw	r0, #51852	; 0xca8c
24003d26:	a903      	add	r1, sp, #12
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003d28:	e9cd 2303 	strd	r2, r3, [sp, #12]
    pSyncConfig.SyncEnable = DISABLE;
24003d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
24003d30:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003d32:	f2c2 0001 	movt	r0, #8193	; 0x2001
    pSyncConfig.SyncEnable = DISABLE;
24003d36:	f8ad 2014 	strh.w	r2, [sp, #20]
    pSyncConfig.RequestNumber = 1;
24003d3a:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003d3c:	f003 fd5e 	bl	240077fc <HAL_DMAEx_ConfigMuxSync>
24003d40:	2800      	cmp	r0, #0
24003d42:	d173      	bne.n	24003e2c <HAL_SAI_MspInit+0x1b4>
    if(saiHandle->Instance==SAI1_Block_B)
24003d44:	f645 0224 	movw	r2, #22564	; 0x5824
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24003d48:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24003d4a:	6823      	ldr	r3, [r4, #0]
24003d4c:	f2c4 0201 	movt	r2, #16385	; 0x4001
24003d50:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003d52:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24003d56:	d19f      	bne.n	24003c98 <HAL_SAI_MspInit+0x20>
      if (SAI1_client == 0)
24003d58:	f64c 2388 	movw	r3, #51848	; 0xca88
24003d5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003d60:	681a      	ldr	r2, [r3, #0]
24003d62:	2a00      	cmp	r2, #0
24003d64:	d03d      	beq.n	24003de2 <HAL_SAI_MspInit+0x16a>
    SAI1_client ++;
24003d66:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003d68:	2508      	movs	r5, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003d6a:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003d6c:	2102      	movs	r1, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003d6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    SAI1_client ++;
24003d72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003d74:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003d76:	2306      	movs	r3, #6
    hdma_sai1_b.Instance = DMA1_Stream2;
24003d78:	f64c 3504 	movw	r5, #51972	; 0xcb04
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003d7c:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003d80:	910a      	str	r1, [sp, #40]	; 0x28
    hdma_sai1_b.Instance = DMA1_Stream2;
24003d82:	f2c2 0501 	movt	r5, #8193	; 0x2001
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003d86:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003d88:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003d8c:	a907      	add	r1, sp, #28
24003d8e:	f003 fd9f 	bl	240078d0 <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003d92:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Instance = DMA1_Stream2;
24003d94:	2340      	movs	r3, #64	; 0x40
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003d96:	4628      	mov	r0, r5
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003d98:	606a      	str	r2, [r5, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003d9a:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Instance = DMA1_Stream2;
24003d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003da0:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
24003da2:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Instance = DMA1_Stream2;
24003da4:	602b      	str	r3, [r5, #0]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003daa:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003dac:	616b      	str	r3, [r5, #20]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
24003dae:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003db2:	e9c5 2602 	strd	r2, r6, [r5, #8]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
24003dba:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
24003dc0:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003dc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24003dc8:	2304      	movs	r3, #4
24003dca:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003dce:	f001 fce5 	bl	2400579c <HAL_DMA_Init>
24003dd2:	bb40      	cbnz	r0, 24003e26 <HAL_SAI_MspInit+0x1ae>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003dd4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24003dd8:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24003dda:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24003dde:	b00c      	add	sp, #48	; 0x30
24003de0:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24003de2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24003de6:	f6c5 0102 	movt	r1, #22530	; 0x5802
24003dea:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003dee:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003df2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003df6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003dfa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003dfe:	9102      	str	r1, [sp, #8]
24003e00:	9902      	ldr	r1, [sp, #8]
24003e02:	e7b0      	b.n	24003d66 <HAL_SAI_MspInit+0xee>
       __HAL_RCC_SAI1_CLK_ENABLE();
24003e04:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24003e08:	f6c5 0102 	movt	r1, #22530	; 0x5802
24003e0c:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003e10:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003e14:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003e18:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003e1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003e20:	9101      	str	r1, [sp, #4]
24003e22:	9901      	ldr	r1, [sp, #4]
24003e24:	e742      	b.n	24003cac <HAL_SAI_MspInit+0x34>
      Error_Handler();
24003e26:	f7ff fea5 	bl	24003b74 <Error_Handler>
24003e2a:	e7d3      	b.n	24003dd4 <HAL_SAI_MspInit+0x15c>
      Error_Handler();
24003e2c:	f7ff fea2 	bl	24003b74 <Error_Handler>
24003e30:	e788      	b.n	24003d44 <HAL_SAI_MspInit+0xcc>
      Error_Handler();
24003e32:	f7ff fe9f 	bl	24003b74 <Error_Handler>
24003e36:	e771      	b.n	24003d1c <HAL_SAI_MspInit+0xa4>

24003e38 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24003e38:	f64c 43ac 	movw	r3, #52396	; 0xccac
24003e3c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24003e40:	2200      	movs	r2, #0
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24003e42:	2019      	movs	r0, #25
  hsd1.Instance = SDMMC1;
24003e44:	f2c2 0301 	movt	r3, #8193	; 0x2001
24003e48:	f2c5 2100 	movt	r1, #20992	; 0x5200
{
24003e4c:	b410      	push	{r4}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003e4e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24003e52:	e9c3 1200 	strd	r1, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003e56:	e9c3 2402 	strd	r2, r4, [r3, #8]
  hsd1.Init.ClockDiv = 25;
24003e5a:	e9c3 2004 	strd	r2, r0, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24003e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
24003e62:	4770      	bx	lr

24003e64 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
24003e64:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
{
24003e68:	b570      	push	{r4, r5, r6, lr}
  if(sdHandle->Instance==SDMMC1)
24003e6a:	f2c5 2300 	movt	r3, #20992	; 0x5200
24003e6e:	6802      	ldr	r2, [r0, #0]
{
24003e70:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003e72:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
24003e74:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003e76:	9408      	str	r4, [sp, #32]
24003e78:	e9cd 4404 	strd	r4, r4, [sp, #16]
24003e7c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24003e80:	d001      	beq.n	24003e86 <HAL_SD_MspInit+0x22>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24003e82:	b00a      	add	sp, #40	; 0x28
24003e84:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003e86:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003e8e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003e90:	260c      	movs	r6, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003e92:	f6c5 0302 	movt	r3, #22530	; 0x5802
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e96:	a904      	add	r1, sp, #16
24003e98:	f6c5 0002 	movt	r0, #22530	; 0x5802
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003e9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24003ea0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24003ea4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
24003ea8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24003eac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
24003eb0:	9201      	str	r2, [sp, #4]
24003eb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24003eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003eb8:	f042 0204 	orr.w	r2, r2, #4
24003ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003ec4:	f002 0204 	and.w	r2, r2, #4
24003ec8:	9202      	str	r2, [sp, #8]
24003eca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003ed0:	f042 0208 	orr.w	r2, r2, #8
24003ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003ed8:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003ee0:	f003 0308 	and.w	r3, r3, #8
24003ee4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003ee6:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003ee8:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003eec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003ef0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003ef2:	f003 fced 	bl	240078d0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003ef6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24003efa:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003efc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003efe:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003f00:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24003f04:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003f08:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003f0c:	f003 fce0 	bl	240078d0 <HAL_GPIO_Init>
}
24003f10:	b00a      	add	sp, #40	; 0x28
24003f12:	bd70      	pop	{r4, r5, r6, pc}

24003f14 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24003f14:	f64c 7008 	movw	r0, #53000	; 0xcf08
24003f18:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  hspi1.Init.Mode = SPI_MODE_SLAVE;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24003f1c:	2107      	movs	r1, #7
  hspi1.Instance = SPI1;
24003f1e:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003f22:	f2c4 0201 	movt	r2, #16385	; 0x4001
{
24003f26:	b538      	push	{r3, r4, r5, lr}
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003f28:	2400      	movs	r4, #0
24003f2a:	2500      	movs	r5, #0
  hspi1.Init.Mode = SPI_MODE_SLAVE;
24003f2c:	2300      	movs	r3, #0
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003f2e:	e9c0 4508 	strd	r4, r5, [r0, #32]
24003f32:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
24003f36:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24003f3a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24003f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24003f42:	6183      	str	r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24003f44:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24003f48:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24003f4c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24003f50:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24003f54:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24003f58:	f008 fca0 	bl	2400c89c <HAL_SPI_Init>
24003f5c:	b900      	cbnz	r0, 24003f60 <MX_SPI1_Init+0x4c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24003f5e:	bd38      	pop	{r3, r4, r5, pc}
24003f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
24003f64:	f7ff be06 	b.w	24003b74 <Error_Handler>

24003f68 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24003f68:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
24003f6c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  hspi6.Init.Mode = SPI_MODE_SLAVE;
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24003f70:	2107      	movs	r1, #7
  hspi6.Instance = SPI6;
24003f72:	f2c2 0001 	movt	r0, #8193	; 0x2001
24003f76:	f6c5 0200 	movt	r2, #22528	; 0x5800
{
24003f7a:	b538      	push	{r3, r4, r5, lr}
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003f7c:	2400      	movs	r4, #0
24003f7e:	2500      	movs	r5, #0
  hspi6.Init.Mode = SPI_MODE_SLAVE;
24003f80:	2300      	movs	r3, #0
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003f82:	e9c0 4508 	strd	r4, r5, [r0, #32]
24003f86:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
  hspi6.Instance = SPI6;
24003f8a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24003f8e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
24003f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24003f96:	6183      	str	r3, [r0, #24]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24003f98:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24003f9c:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24003fa0:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24003fa4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24003fa8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24003fac:	f008 fc76 	bl	2400c89c <HAL_SPI_Init>
24003fb0:	b900      	cbnz	r0, 24003fb4 <MX_SPI6_Init+0x4c>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
24003fb2:	bd38      	pop	{r3, r4, r5, pc}
24003fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
24003fb8:	f7ff bddc 	b.w	24003b74 <Error_Handler>

24003fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
24003fbe:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003fc0:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003fc2:	22c0      	movs	r2, #192	; 0xc0
{
24003fc4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003fc6:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003fc8:	9106      	str	r1, [sp, #24]
24003fca:	e9cd 1107 	strd	r1, r1, [sp, #28]
24003fce:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003fd2:	f018 fb4d 	bl	2401c670 <memset>
  if(spiHandle->Instance==SPI1)
24003fd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
24003fda:	6822      	ldr	r2, [r4, #0]
24003fdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
24003fe0:	429a      	cmp	r2, r3
24003fe2:	d008      	beq.n	24003ff6 <HAL_SPI_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
24003fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
24003fe8:	f6c5 0300 	movt	r3, #22528	; 0x5800
24003fec:	429a      	cmp	r2, r3
24003fee:	f000 80ac 	beq.w	2400414a <HAL_SPI_MspInit+0x18e>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24003ff2:	b03d      	add	sp, #244	; 0xf4
24003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24003ff6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003ffa:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003ffc:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24003ffe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004002:	f005 fc8b 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
24004006:	2800      	cmp	r0, #0
24004008:	f040 8125 	bne.w	24004256 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI1_CLK_ENABLE();
2400400c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004010:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004014:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004016:	2505      	movs	r5, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
24004018:	f6c5 0302 	movt	r3, #22530	; 0x5802
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400401c:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400401e:	f6c5 0002 	movt	r0, #22530	; 0x5802
24004022:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI1_CLK_ENABLE();
24004024:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24004028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400402c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
24004030:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24004034:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24004038:	9201      	str	r2, [sp, #4]
2400403a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400403c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004040:	f042 0202 	orr.w	r2, r2, #2
24004044:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24004048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400404c:	f002 0202 	and.w	r2, r2, #2
24004050:	9202      	str	r2, [sp, #8]
24004052:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004054:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400405c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004060:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004066:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400406c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400406e:	2302      	movs	r3, #2
24004070:	e9cd 6708 	strd	r6, r7, [sp, #32]
24004074:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004078:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400407a:	f003 fc29 	bl	240078d0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400407e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004082:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24004086:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004088:	a906      	add	r1, sp, #24
2400408a:	f6c5 0002 	movt	r0, #22530	; 0x5802
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400408e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004090:	e9cd 6708 	strd	r6, r7, [sp, #32]
    hdma_spi1_rx.Instance = DMA1_Stream6;
24004094:	f64c 5628 	movw	r6, #52520	; 0xcd28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004098:	e9cd 2306 	strd	r2, r3, [sp, #24]
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400409c:	f2c2 0601 	movt	r6, #8193	; 0x2001
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240040a0:	f003 fc16 	bl	240078d0 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240040a4:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240040a6:	2125      	movs	r1, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream6;
240040a8:	22a0      	movs	r2, #160	; 0xa0
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240040aa:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
240040ac:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Instance = DMA1_Stream6;
240040ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240040b2:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240040b4:	e9c6 1301 	strd	r1, r3, [r6, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240040b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Instance = DMA1_Stream6;
240040bc:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240040be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240040c2:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240040c6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240040ca:	e9c6 1207 	strd	r1, r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240040ce:	2104      	movs	r1, #4
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240040d0:	2201      	movs	r2, #1
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240040d2:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240040d6:	6271      	str	r1, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240040d8:	62b2      	str	r2, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240040da:	f001 fb5f 	bl	2400579c <HAL_DMA_Init>
240040de:	2800      	cmp	r0, #0
240040e0:	f040 80b6 	bne.w	24004250 <HAL_SPI_MspInit+0x294>
    hdma_spi1_tx.Instance = DMA1_Stream0;
240040e4:	f64c 55a0 	movw	r5, #52640	; 0xcda0
240040e8:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240040ea:	2126      	movs	r1, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240040ec:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
240040ee:	f2c2 0501 	movt	r5, #8193	; 0x2001
240040f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
240040f6:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240040f8:	6069      	str	r1, [r5, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240040fa:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Instance = DMA1_Stream0;
240040fc:	602a      	str	r2, [r5, #0]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
240040fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004102:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24004104:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24004106:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24004108:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400410a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
2400410e:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004112:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004116:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400411a:	e9c5 3106 	strd	r3, r1, [r5, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400411e:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004120:	2104      	movs	r1, #4
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004122:	2201      	movs	r2, #1
24004124:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004128:	f001 fb38 	bl	2400579c <HAL_DMA_Init>
2400412c:	2800      	cmp	r0, #0
2400412e:	f040 808c 	bne.w	2400424a <HAL_SPI_MspInit+0x28e>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004132:	2200      	movs	r2, #0
24004134:	2101      	movs	r1, #1
24004136:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
24004138:	67a5      	str	r5, [r4, #120]	; 0x78
2400413a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
2400413c:	f001 f956 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24004140:	2023      	movs	r0, #35	; 0x23
24004142:	f001 f995 	bl	24005470 <HAL_NVIC_EnableIRQ>
}
24004146:	b03d      	add	sp, #244	; 0xf4
24004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
2400414a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
2400414e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004150:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004152:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004156:	f005 fbe1 	bl	2400991c <HAL_RCCEx_PeriphCLKConfig>
2400415a:	2800      	cmp	r0, #0
2400415c:	d17e      	bne.n	2400425c <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI6_CLK_ENABLE();
2400415e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004162:	2000      	movs	r0, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004164:	f64c 6618 	movw	r6, #52760	; 0xce18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004168:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
2400416a:	f6c5 0302 	movt	r3, #22530	; 0x5802
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400416e:	f6c5 0002 	movt	r0, #22530	; 0x5802
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004172:	f2c2 0601 	movt	r6, #8193	; 0x2001
    __HAL_RCC_SPI6_CLK_ENABLE();
24004176:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400417a:	f042 0220 	orr.w	r2, r2, #32
2400417e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004182:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004186:	f002 0220 	and.w	r2, r2, #32
2400418a:	9204      	str	r2, [sp, #16]
2400418c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400418e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004192:	f042 0201 	orr.w	r2, r2, #1
24004196:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
2400419a:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240041a0:	f003 0301 	and.w	r3, r3, #1
240041a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
240041a6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
240041a8:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
240041aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
240041ae:	2200      	movs	r2, #0
240041b0:	2302      	movs	r3, #2
240041b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240041b6:	2308      	movs	r3, #8
240041b8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240041ba:	f003 fb89 	bl	240078d0 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240041be:	210b      	movs	r1, #11
    hdma_spi6_rx.Instance = BDMA_Channel0;
240041c0:	f245 4208 	movw	r2, #21512	; 0x5408
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240041c4:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240041c6:	4630      	mov	r0, r6
    hdma_spi6_rx.Instance = BDMA_Channel0;
240041c8:	f6c5 0202 	movt	r2, #22530	; 0x5802
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240041cc:	6071      	str	r1, [r6, #4]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240041ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Instance = BDMA_Channel0;
240041d2:	6032      	str	r2, [r6, #0]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240041d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240041d8:	6131      	str	r1, [r6, #16]
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240041da:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240041de:	6232      	str	r2, [r6, #32]
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240041e0:	61f1      	str	r1, [r6, #28]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240041e2:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240041e6:	e9c6 3305 	strd	r3, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240041ea:	f001 fad7 	bl	2400579c <HAL_DMA_Init>
240041ee:	2800      	cmp	r0, #0
240041f0:	d13a      	bne.n	24004268 <HAL_SPI_MspInit+0x2ac>
    hdma_spi6_tx.Instance = BDMA_Channel1;
240041f2:	f64c 6590 	movw	r5, #52880	; 0xce90
240041f6:	f245 421c 	movw	r2, #21532	; 0x541c
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
240041fa:	210c      	movs	r1, #12
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240041fc:	2300      	movs	r3, #0
    hdma_spi6_tx.Instance = BDMA_Channel1;
240041fe:	f2c2 0501 	movt	r5, #8193	; 0x2001
24004202:	f6c5 0202 	movt	r2, #22530	; 0x5802
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24004206:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
24004208:	6069      	str	r1, [r5, #4]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400420a:	2140      	movs	r1, #64	; 0x40
    hdma_spi6_tx.Instance = BDMA_Channel1;
2400420c:	602a      	str	r2, [r5, #0]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
2400420e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
24004212:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24004214:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004216:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
2400421a:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
2400421e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004222:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
24004226:	e9c5 3106 	strd	r3, r1, [r5, #24]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400422a:	622a      	str	r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
2400422c:	f001 fab6 	bl	2400579c <HAL_DMA_Init>
24004230:	b9b8      	cbnz	r0, 24004262 <HAL_SPI_MspInit+0x2a6>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
24004232:	2200      	movs	r2, #0
24004234:	2107      	movs	r1, #7
24004236:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi6_tx);
24004238:	67a5      	str	r5, [r4, #120]	; 0x78
2400423a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
2400423c:	f001 f8d6 	bl	240053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
24004240:	2056      	movs	r0, #86	; 0x56
24004242:	f001 f915 	bl	24005470 <HAL_NVIC_EnableIRQ>
}
24004246:	b03d      	add	sp, #244	; 0xf4
24004248:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
2400424a:	f7ff fc93 	bl	24003b74 <Error_Handler>
2400424e:	e770      	b.n	24004132 <HAL_SPI_MspInit+0x176>
      Error_Handler();
24004250:	f7ff fc90 	bl	24003b74 <Error_Handler>
24004254:	e746      	b.n	240040e4 <HAL_SPI_MspInit+0x128>
      Error_Handler();
24004256:	f7ff fc8d 	bl	24003b74 <Error_Handler>
2400425a:	e6d7      	b.n	2400400c <HAL_SPI_MspInit+0x50>
      Error_Handler();
2400425c:	f7ff fc8a 	bl	24003b74 <Error_Handler>
24004260:	e77d      	b.n	2400415e <HAL_SPI_MspInit+0x1a2>
      Error_Handler();
24004262:	f7ff fc87 	bl	24003b74 <Error_Handler>
24004266:	e7e4      	b.n	24004232 <HAL_SPI_MspInit+0x276>
      Error_Handler();
24004268:	f7ff fc84 	bl	24003b74 <Error_Handler>
2400426c:	e7c1      	b.n	240041f2 <HAL_SPI_MspInit+0x236>
2400426e:	bf00      	nop

24004270 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24004270:	e7fe      	b.n	24004270 <Default_Handler>
24004272:	bf00      	nop

24004274 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24004274:	f8df d0e0 	ldr.w	sp, [pc, #224]	; 24004358 <Reset_Handler+0xe4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24004278:	f240 0000 	movw	r0, #0
2400427c:	f640 221c 	movw	r2, #2588	; 0xa1c
24004280:	f2c2 0000 	movt	r0, #8192	; 0x2000
24004284:	f2c2 0200 	movt	r2, #8192	; 0x2000
24004288:	4290      	cmp	r0, r2
2400428a:	d006      	beq.n	2400429a <Reset_Handler+0x26>
		*pDest = *pSource;
2400428c:	f24e 4118 	movw	r1, #58392	; 0xe418
24004290:	1a12      	subs	r2, r2, r0
24004292:	f2c2 4102 	movt	r1, #9218	; 0x2402
24004296:	f018 fa1d 	bl	2401c6d4 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
2400429a:	f640 2020 	movw	r0, #2592	; 0xa20
2400429e:	f24e 2208 	movw	r2, #57864	; 0xe208
240042a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
240042a6:	f2c2 0201 	movt	r2, #8193	; 0x2001
240042aa:	4290      	cmp	r0, r2
240042ac:	d003      	beq.n	240042b6 <Reset_Handler+0x42>
		*pDest = 0;
240042ae:	1a12      	subs	r2, r2, r0
240042b0:	2100      	movs	r1, #0
240042b2:	f018 f9dd 	bl	2401c670 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
240042b6:	f240 0000 	movw	r0, #0
240042ba:	f240 0200 	movw	r2, #0
240042be:	f2c2 4004 	movt	r0, #9220	; 0x2404
240042c2:	f2c2 4208 	movt	r2, #9224	; 0x2408
240042c6:	4290      	cmp	r0, r2
240042c8:	d003      	beq.n	240042d2 <Reset_Handler+0x5e>
		*pDest = 0;
240042ca:	1a12      	subs	r2, r2, r0
240042cc:	2100      	movs	r1, #0
240042ce:	f018 f9cf 	bl	2401c670 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
240042d2:	f240 0000 	movw	r0, #0
240042d6:	f640 0280 	movw	r2, #2176	; 0x880
240042da:	f2c3 0000 	movt	r0, #12288	; 0x3000
240042de:	f2c3 0200 	movt	r2, #12288	; 0x3000
240042e2:	4290      	cmp	r0, r2
240042e4:	d003      	beq.n	240042ee <Reset_Handler+0x7a>
		*pDest = 0;
240042e6:	1a12      	subs	r2, r2, r0
240042e8:	2100      	movs	r1, #0
240042ea:	f018 f9c1 	bl	2401c670 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
240042ee:	f242 0000 	movw	r0, #8192	; 0x2000
240042f2:	f246 5280 	movw	r2, #25984	; 0x6580
240042f6:	f2c3 0000 	movt	r0, #12288	; 0x3000
240042fa:	f2c3 0204 	movt	r2, #12292	; 0x3004
240042fe:	4290      	cmp	r0, r2
24004300:	d003      	beq.n	2400430a <Reset_Handler+0x96>
		*pDest = 0;
24004302:	1a12      	subs	r2, r2, r0
24004304:	2100      	movs	r1, #0
24004306:	f018 f9b3 	bl	2401c670 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
2400430a:	f240 0000 	movw	r0, #0
2400430e:	f240 0280 	movw	r2, #128	; 0x80
24004312:	f6c3 0000 	movt	r0, #14336	; 0x3800
24004316:	f6c3 0200 	movt	r2, #14336	; 0x3800
2400431a:	4290      	cmp	r0, r2
2400431c:	d003      	beq.n	24004326 <Reset_Handler+0xb2>
		*pDest = 0;
2400431e:	1a12      	subs	r2, r2, r0
24004320:	2100      	movs	r1, #0
24004322:	f018 f9a5 	bl	2401c670 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24004326:	f240 4000 	movw	r0, #1024	; 0x400
2400432a:	f24d 72a8 	movw	r2, #55208	; 0xd7a8
2400432e:	f2c0 0000 	movt	r0, #0
24004332:	f2c0 0200 	movt	r2, #0
24004336:	4290      	cmp	r0, r2
24004338:	d006      	beq.n	24004348 <Reset_Handler+0xd4>
		*pDest = *pSource;
2400433a:	f64e 6134 	movw	r1, #60980	; 0xee34
2400433e:	1a12      	subs	r2, r2, r0
24004340:	f2c2 4102 	movt	r1, #9218	; 0x2402
24004344:	f018 f9c6 	bl	2401c6d4 <memcpy>
	SystemInit();
24004348:	f000 ff22 	bl	24005190 <SystemInit>
	__libc_init_array();
2400434c:	f018 f99e 	bl	2401c68c <__libc_init_array>
	(void)main();
24004350:	f7fe fc7e 	bl	24002c50 <main>
	for (;;) ;
24004354:	e7fe      	b.n	24004354 <Reset_Handler+0xe0>
24004356:	0000      	.short	0x0000
24004358:	20020000 	.word	0x20020000

2400435c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400435c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
{
24004360:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004362:	f6c5 0302 	movt	r3, #22530	; 0x5802
24004366:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400436a:	f042 0202 	orr.w	r2, r2, #2
2400436e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004376:	f003 0302 	and.w	r3, r3, #2
2400437a:	9301      	str	r3, [sp, #4]
2400437c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400437e:	b002      	add	sp, #8
24004380:	4770      	bx	lr
24004382:	bf00      	nop

24004384 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004384:	e7fe      	b.n	24004384 <NMI_Handler>
24004386:	bf00      	nop

24004388 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24004388:	e7fe      	b.n	24004388 <HardFault_Handler>
2400438a:	bf00      	nop

2400438c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2400438c:	e7fe      	b.n	2400438c <MemManage_Handler>
2400438e:	bf00      	nop

24004390 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004390:	e7fe      	b.n	24004390 <BusFault_Handler>
24004392:	bf00      	nop

24004394 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24004394:	e7fe      	b.n	24004394 <UsageFault_Handler>
24004396:	bf00      	nop

24004398 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24004398:	4770      	bx	lr
2400439a:	bf00      	nop

2400439c <DebugMon_Handler>:
2400439c:	4770      	bx	lr
2400439e:	bf00      	nop

240043a0 <PendSV_Handler>:
240043a0:	4770      	bx	lr
240043a2:	bf00      	nop

240043a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240043a4:	f000 bfde 	b.w	24005364 <HAL_IncTick>

240043a8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
240043a8:	f64c 50a0 	movw	r0, #52640	; 0xcda0
240043ac:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043b0:	f002 bcd6 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043b4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240043b4:	f64c 208c 	movw	r0, #51852	; 0xca8c
240043b8:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043bc:	f002 bcd0 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043c0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
240043c0:	f64c 3004 	movw	r0, #51972	; 0xcb04
240043c4:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043c8:	f002 bcca 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043cc <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
240043cc:	f244 2098 	movw	r0, #17048	; 0x4298
240043d0:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043d4:	f002 bcc4 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043d8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
240043d8:	f244 3010 	movw	r0, #17168	; 0x4310
240043dc:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043e0:	f002 bcbe 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043e4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
240043e4:	f64c 5028 	movw	r0, #52520	; 0xcd28
240043e8:	f2c2 0001 	movt	r0, #8193	; 0x2001
240043ec:	f002 bcb8 	b.w	24006d60 <HAL_DMA_IRQHandler>

240043f0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
240043f0:	2040      	movs	r0, #64	; 0x40
240043f2:	f003 bbd1 	b.w	24007b98 <HAL_GPIO_EXTI_IRQHandler>
240043f6:	bf00      	nop

240043f8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
240043f8:	f244 3088 	movw	r0, #17288	; 0x4388
240043fc:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004400:	f003 bf04 	b.w	2400820c <HAL_I2C_EV_IRQHandler>

24004404 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24004404:	f244 3088 	movw	r0, #17288	; 0x4388
24004408:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400440c:	f004 b87a 	b.w	24008504 <HAL_I2C_ER_IRQHandler>

24004410 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24004410:	f244 30dc 	movw	r0, #17372	; 0x43dc
24004414:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004418:	f003 bef8 	b.w	2400820c <HAL_I2C_EV_IRQHandler>

2400441c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
2400441c:	f244 30dc 	movw	r0, #17372	; 0x43dc
24004420:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004424:	f004 b86e 	b.w	24008504 <HAL_I2C_ER_IRQHandler>

24004428 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24004428:	f64c 7008 	movw	r0, #53000	; 0xcf08
2400442c:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004430:	f008 bd72 	b.w	2400cf18 <HAL_SPI_IRQHandler>

24004434 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24004434:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
24004438:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400443c:	f008 bd6c 	b.w	2400cf18 <HAL_SPI_IRQHandler>

24004440 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24004440:	f64c 208c 	movw	r0, #51852	; 0xca8c
24004444:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004448:	f003 ba12 	b.w	24007870 <HAL_DMAEx_MUX_IRQHandler>

2400444c <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
2400444c:	f64c 6018 	movw	r0, #52760	; 0xce18
24004450:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004454:	f002 bc84 	b.w	24006d60 <HAL_DMA_IRQHandler>

24004458 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_tx);
24004458:	f64c 6090 	movw	r0, #52880	; 0xce90
2400445c:	f2c2 0001 	movt	r0, #8193	; 0x2001
24004460:	f002 bc7e 	b.w	24006d60 <HAL_DMA_IRQHandler>

24004464 <audioInitSynth>:

void audioInitSynth()
{
	for (int i = 0; i < OVERSAMPLE; i++)
    {
        oversamplerArray[i] = 0.0f;
24004464:	2200      	movs	r2, #0
24004466:	f24d 63d4 	movw	r3, #54996	; 0xd6d4
2400446a:	f24d 6198 	movw	r1, #54936	; 0xd698
2400446e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004472:	f2c2 0101 	movt	r1, #8193	; 0x2001
{
24004476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        oversamplerArray[i] = 0.0f;
2400447a:	4693      	mov	fp, r2
2400447c:	f24d 661c 	movw	r6, #54812	; 0xd61c
    }
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24004480:	f245 248c 	movw	r4, #21132	; 0x528c
24004484:	f2c2 0601 	movt	r6, #8193	; 0x2001
24004488:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
2400448c:	ed2d 8b0a 	vpush	{d8-d12}
        oversamplerArray[i] = 0.0f;
24004490:	f8c3 b000 	str.w	fp, [r3]
{
24004494:	b0b7      	sub	sp, #220	; 0xdc
        oversamplerArray[i] = 0.0f;
24004496:	f8c3 b004 	str.w	fp, [r3, #4]
			midiAdd[i][v] = 0.0f;

		}
		for (int i = 0; i < NUM_FILT; i++)
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400449a:	f243 3333 	movw	r3, #13107	; 0x3333
        oversamplerArray[i] = 0.0f;
2400449e:	ee09 2a90 	vmov	s19, r2
240044a2:	f24d 72d4 	movw	r2, #55252	; 0xd7d4
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240044a6:	f6c3 7333 	movt	r3, #16179	; 0x3f33
240044aa:	9125      	str	r1, [sp, #148]	; 0x94
240044ac:	f2c2 0201 	movt	r2, #8193	; 0x2001
240044b0:	ee0a 3a10 	vmov	s20, r3
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
240044b4:	f243 3333 	movw	r3, #13107	; 0x3333
240044b8:	9226      	str	r2, [sp, #152]	; 0x98
240044ba:	f6c3 73f3 	movt	r3, #16371	; 0x3ff3
240044be:	ee0b 3a10 	vmov	s22, r3
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilterBR_init(&VZfilterBR[i][v], 2000.f, 1.0f, &leaf);
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
			//tLadderFilter_setOversampling(&Ladderfilter[i][v], 2);
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
240044c2:	f24d 730a 	movw	r3, #55050	; 0xd70a
240044c6:	f6c3 4323 	movt	r3, #15395	; 0x3c23
240044ca:	ee09 3a10 	vmov	s18, r3
240044ce:	f24d 73b8 	movw	r3, #55224	; 0xd7b8
240044d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
240044d6:	9327      	str	r3, [sp, #156]	; 0x9c
240044d8:	f64d 0350 	movw	r3, #55376	; 0xd850
240044dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
240044e0:	9314      	str	r3, [sp, #80]	; 0x50
240044e2:	f64d 13ec 	movw	r3, #55788	; 0xd9ec
240044e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
240044ea:	9315      	str	r3, [sp, #84]	; 0x54
240044ec:	f24d 73ec 	movw	r3, #55276	; 0xd7ec
240044f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
240044f4:	9316      	str	r3, [sp, #88]	; 0x58
240044f6:	f64d 0368 	movw	r3, #55400	; 0xd868
240044fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
240044fe:	9317      	str	r3, [sp, #92]	; 0x5c
24004500:	f24d 737c 	movw	r3, #55164	; 0xd77c
24004504:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004508:	9332      	str	r3, [sp, #200]	; 0xc8
2400450a:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
2400450e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004512:	9318      	str	r3, [sp, #96]	; 0x60
24004514:	f24d 631c 	movw	r3, #54812	; 0xd61c
24004518:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400451c:	9319      	str	r3, [sp, #100]	; 0x64
2400451e:	f24d 530c 	movw	r3, #54540	; 0xd50c
24004522:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004526:	931d      	str	r3, [sp, #116]	; 0x74
24004528:	f24d 4308 	movw	r3, #54280	; 0xd408
2400452c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004530:	931e      	str	r3, [sp, #120]	; 0x78
24004532:	f24d 2334 	movw	r3, #53812	; 0xd234
24004536:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400453a:	931f      	str	r3, [sp, #124]	; 0x7c
2400453c:	f24d 3314 	movw	r3, #54036	; 0xd314
24004540:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004544:	9333      	str	r3, [sp, #204]	; 0xcc
24004546:	f24d 2318 	movw	r3, #53784	; 0xd218
2400454a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400454e:	9334      	str	r3, [sp, #208]	; 0xd0
24004550:	f24d 2308 	movw	r3, #53768	; 0xd208
24004554:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004558:	9335      	str	r3, [sp, #212]	; 0xd4
2400455a:	f24d 13f8 	movw	r3, #53752	; 0xd1f8
2400455e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004562:	9320      	str	r3, [sp, #128]	; 0x80
24004564:	f24d 13e8 	movw	r3, #53736	; 0xd1e8
24004568:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400456c:	931a      	str	r3, [sp, #104]	; 0x68
2400456e:	f24d 13d8 	movw	r3, #53720	; 0xd1d8
24004572:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004576:	931b      	str	r3, [sp, #108]	; 0x6c
24004578:	f24d 3378 	movw	r3, #54136	; 0xd378
2400457c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004580:	931c      	str	r3, [sp, #112]	; 0x70
24004582:	f24d 435c 	movw	r3, #54364	; 0xd45c
24004586:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400458a:	932c      	str	r3, [sp, #176]	; 0xb0
2400458c:	f24d 433c 	movw	r3, #54332	; 0xd43c
24004590:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004594:	932d      	str	r3, [sp, #180]	; 0xb4
24004596:	f24d 43ac 	movw	r3, #54444	; 0xd4ac
2400459a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400459e:	9312      	str	r3, [sp, #72]	; 0x48
240045a0:	f24d 43ec 	movw	r3, #54508	; 0xd4ec
240045a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045a8:	932e      	str	r3, [sp, #184]	; 0xb8
240045aa:	f24d 43cc 	movw	r3, #54476	; 0xd4cc
240045ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045b2:	932f      	str	r3, [sp, #188]	; 0xbc
240045b4:	f24d 437c 	movw	r3, #54396	; 0xd47c
240045b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045bc:	9330      	str	r3, [sp, #192]	; 0xc0
240045be:	f24d 6390 	movw	r3, #54928	; 0xd690
240045c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045c6:	9331      	str	r3, [sp, #196]	; 0xc4
240045c8:	f24d 6374 	movw	r3, #54900	; 0xd674
240045cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045d0:	9329      	str	r3, [sp, #164]	; 0xa4
240045d2:	f24d 2344 	movw	r3, #53828	; 0xd244
240045d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045da:	932a      	str	r3, [sp, #168]	; 0xa8
240045dc:	f24d 23a4 	movw	r3, #53924	; 0xd2a4
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240045e0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
240045e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045e8:	932b      	str	r3, [sp, #172]	; 0xac
240045ea:	f24d 23c4 	movw	r3, #53956	; 0xd2c4
240045ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045f2:	930b      	str	r3, [sp, #44]	; 0x2c
240045f4:	f24d 03b8 	movw	r3, #53432	; 0xd0b8
240045f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
240045fc:	930c      	str	r3, [sp, #48]	; 0x30
240045fe:	f24d 2364 	movw	r3, #53860	; 0xd264
24004602:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004606:	930d      	str	r3, [sp, #52]	; 0x34
24004608:	f24d 2384 	movw	r3, #53892	; 0xd284
2400460c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004610:	930e      	str	r3, [sp, #56]	; 0x38
24004612:	f24d 6334 	movw	r3, #54836	; 0xd634
24004616:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400461a:	930f      	str	r3, [sp, #60]	; 0x3c
2400461c:	f24d 6354 	movw	r3, #54868	; 0xd654
24004620:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004624:	9310      	str	r3, [sp, #64]	; 0x40
24004626:	f24d 3358 	movw	r3, #54104	; 0xd358
2400462a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400462e:	9311      	str	r3, [sp, #68]	; 0x44
24004630:	f24d 13b8 	movw	r3, #53688	; 0xd1b8
24004634:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004638:	9324      	str	r3, [sp, #144]	; 0x90
2400463a:	f24d 1398 	movw	r3, #53656	; 0xd198
2400463e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004642:	9303      	str	r3, [sp, #12]
24004644:	f24d 1358 	movw	r3, #53592	; 0xd158
24004648:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400464c:	9304      	str	r3, [sp, #16]
2400464e:	f24d 1378 	movw	r3, #53624	; 0xd178
24004652:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004656:	9305      	str	r3, [sp, #20]
24004658:	f24d 1338 	movw	r3, #53560	; 0xd138
2400465c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004660:	9306      	str	r3, [sp, #24]
24004662:	f24d 1318 	movw	r3, #53528	; 0xd118
24004666:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400466a:	9307      	str	r3, [sp, #28]
2400466c:	f24d 03f8 	movw	r3, #53496	; 0xd0f8
24004670:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004674:	9308      	str	r3, [sp, #32]
24004676:	f24d 03d8 	movw	r3, #53464	; 0xd0d8
2400467a:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400467e:	9309      	str	r3, [sp, #36]	; 0x24
24004680:	f24d 0398 	movw	r3, #53400	; 0xd098
24004684:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004688:	930a      	str	r3, [sp, #40]	; 0x28
2400468a:	f24d 33a0 	movw	r3, #54176	; 0xd3a0
2400468e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004692:	9328      	str	r3, [sp, #160]	; 0xa0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
24004694:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
24004698:	ee0c 3a10 	vmov	s24, r3
2400469c:	f24d 3358 	movw	r3, #54104	; 0xd358
240046a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
240046a4:	9313      	str	r3, [sp, #76]	; 0x4c
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
240046a6:	9825      	ldr	r0, [sp, #148]	; 0x94
240046a8:	4623      	mov	r3, r4
240046aa:	2200      	movs	r2, #0
240046ac:	2102      	movs	r1, #2
240046ae:	4458      	add	r0, fp
240046b0:	465d      	mov	r5, fp
240046b2:	f00d fef7 	bl	240124a4 <tOversampler_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
240046b6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
			freqMult[i][v] = 1.0f;
240046ba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240046be:	f10b 0818 	add.w	r8, fp, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
240046c2:	f6c3 534c 	movt	r3, #15692	; 0x3d4c
240046c6:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
240046ca:	ee08 3a10 	vmov	s16, r3
240046ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
240046d0:	eb03 090b 	add.w	r9, r3, fp
240046d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
240046d6:	eb03 070b 	add.w	r7, r3, fp
240046da:	46b3      	mov	fp, r6
240046dc:	464e      	mov	r6, r9
240046de:	46a9      	mov	r9, r5
			tPBSaw_init(&saw[i][v], &leaf);
240046e0:	4630      	mov	r0, r6
240046e2:	4621      	mov	r1, r4
240046e4:	f013 f992 	bl	24017a0c <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
240046e8:	4638      	mov	r0, r7
240046ea:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
240046ec:	3608      	adds	r6, #8
			tPBPulse_init(&pulse[i][v], &leaf);
240046ee:	f013 f8ad 	bl	2401784c <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
240046f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
240046f4:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
240046f6:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
240046f8:	1958      	adds	r0, r3, r5
240046fa:	f012 fd77 	bl	240171ec <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
240046fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
24004700:	4621      	mov	r1, r4
24004702:	1958      	adds	r0, r3, r5
24004704:	f012 fe0c 	bl	24017320 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
24004708:	9b16      	ldr	r3, [sp, #88]	; 0x58
2400470a:	4621      	mov	r1, r4
2400470c:	1958      	adds	r0, r3, r5
2400470e:	f013 f9f9 	bl	24017b04 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
24004712:	9b17      	ldr	r3, [sp, #92]	; 0x5c
24004714:	4621      	mov	r1, r4
24004716:	1958      	adds	r0, r3, r5
24004718:	f012 ff48 	bl	240175ac <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
2400471c:	eb0a 0005 	add.w	r0, sl, r5
24004720:	eef0 0a48 	vmov.f32	s1, s16
24004724:	4621      	mov	r1, r4
24004726:	eeb0 0a4c 	vmov.f32	s0, s24
2400472a:	f00e fd61 	bl	240131f0 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
2400472e:	9b18      	ldr	r3, [sp, #96]	; 0x60
24004730:	195a      	adds	r2, r3, r5
			midiAdd[i][v] = 0.0f;
24004732:	9b19      	ldr	r3, [sp, #100]	; 0x64
			freqMult[i][v] = 1.0f;
24004734:	edc2 8a00 	vstr	s17, [r2]
			midiAdd[i][v] = 0.0f;
24004738:	195a      	adds	r2, r3, r5
		for(int i = 0; i < NUM_OSC; i++)
2400473a:	3508      	adds	r5, #8
			midiAdd[i][v] = 0.0f;
2400473c:	edc2 9a00 	vstr	s19, [r2]
		for(int i = 0; i < NUM_OSC; i++)
24004740:	4545      	cmp	r5, r8
24004742:	d1cd      	bne.n	240046e0 <audioInitSynth+0x27c>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24004744:	2300      	movs	r3, #0
24004746:	465e      	mov	r6, fp
24004748:	464d      	mov	r5, r9
2400474a:	f109 0710 	add.w	r7, r9, #16
2400474e:	f2c4 43fa 	movt	r3, #17658	; 0x44fa
24004752:	46c8      	mov	r8, r9
24004754:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
24004758:	ee08 3a10 	vmov	s16, r3
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
2400475c:	f649 139a 	movw	r3, #39322	; 0x999a
24004760:	f6c3 7319 	movt	r3, #16153	; 0x3f19
24004764:	e9dd 9a33 	ldrd	r9, sl, [sp, #204]	; 0xcc
24004768:	ee08 3a90 	vmov	s17, r3
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400476c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
2400476e:	eef0 0a4a 	vmov.f32	s1, s20
24004772:	eeb0 0a48 	vmov.f32	s0, s16
24004776:	2101      	movs	r1, #1
24004778:	1958      	adds	r0, r3, r5
2400477a:	4622      	mov	r2, r4
2400477c:	f00f f948 	bl	24013a10 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24004780:	9b1e      	ldr	r3, [sp, #120]	; 0x78
24004782:	eef0 0a4a 	vmov.f32	s1, s20
24004786:	4622      	mov	r2, r4
24004788:	1958      	adds	r0, r3, r5
2400478a:	eeb0 0a48 	vmov.f32	s0, s16
2400478e:	2100      	movs	r1, #0
24004790:	f00f f93e 	bl	24013a10 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24004794:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
24004796:	4622      	mov	r2, r4
24004798:	eef0 0a4a 	vmov.f32	s1, s20
2400479c:	1958      	adds	r0, r3, r5
2400479e:	eeb0 0a48 	vmov.f32	s0, s16
240047a2:	2102      	movs	r1, #2
240047a4:	f00f f934 	bl	24013a10 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240047a8:	eb09 0005 	add.w	r0, r9, r5
240047ac:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240047b0:	4621      	mov	r1, r4
240047b2:	eeb0 0a48 	vmov.f32	s0, s16
240047b6:	f011 faef 	bl	24015d98 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
240047ba:	eb0a 0005 	add.w	r0, sl, r5
240047be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240047c2:	4621      	mov	r1, r4
240047c4:	eef0 0a4b 	vmov.f32	s1, s22
240047c8:	eeb0 0a48 	vmov.f32	s0, s16
240047cc:	f010 ffa8 	bl	24015720 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240047d0:	eb0b 0005 	add.w	r0, fp, r5
240047d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240047d8:	4621      	mov	r1, r4
240047da:	eef0 0a68 	vmov.f32	s1, s17
240047de:	eeb0 0a48 	vmov.f32	s0, s16
240047e2:	f010 fab7 	bl	24014d54 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240047e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
240047e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240047ec:	4621      	mov	r1, r4
240047ee:	1958      	adds	r0, r3, r5
240047f0:	eef0 0a68 	vmov.f32	s1, s17
240047f4:	eeb0 0a48 	vmov.f32	s0, s16
240047f8:	f010 fd2a 	bl	24015250 <tVZFilterHS_init>
			tVZFilterBR_init(&VZfilterBR[i][v], 2000.f, 1.0f, &leaf);
240047fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
240047fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004802:	4621      	mov	r1, r4
24004804:	1958      	adds	r0, r3, r5
24004806:	eeb0 0a48 	vmov.f32	s0, s16
2400480a:	f011 f979 	bl	24015b00 <tVZFilterBR_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
2400480e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
24004810:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004814:	4621      	mov	r1, r4
24004816:	1958      	adds	r0, r3, r5
24004818:	eeb0 0a48 	vmov.f32	s0, s16
2400481c:	f011 ff04 	bl	24016628 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24004820:	9b1c      	ldr	r3, [sp, #112]	; 0x70
24004822:	eef0 0a49 	vmov.f32	s1, s18
24004826:	4621      	mov	r1, r4
24004828:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
2400482a:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400482c:	eeb0 0a4c 	vmov.f32	s0, s24
24004830:	f00e fcde 	bl	240131f0 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24004834:	42bd      	cmp	r5, r7
24004836:	d199      	bne.n	2400476c <audioInitSynth+0x308>
		}

		for (int i = 0; i < NUM_LFOS; i++)
		{
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24004838:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
2400483a:	46c3      	mov	fp, r8
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400483c:	9602      	str	r6, [sp, #8]
2400483e:	2500      	movs	r5, #0
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24004840:	4498      	add	r8, r3
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24004842:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
24004844:	9e30      	ldr	r6, [sp, #192]	; 0xc0
24004846:	eb03 070b 	add.w	r7, r3, fp
2400484a:	e9dd 9a2e 	ldrd	r9, sl, [sp, #184]	; 0xb8
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
2400484e:	eb08 0005 	add.w	r0, r8, r5
24004852:	4621      	mov	r1, r4
24004854:	f013 faae 	bl	24017db4 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24004858:	1978      	adds	r0, r7, r5
2400485a:	4621      	mov	r1, r4
2400485c:	f013 faf2 	bl	24017e44 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24004860:	9b12      	ldr	r3, [sp, #72]	; 0x48
24004862:	4621      	mov	r1, r4
24004864:	eb03 000b 	add.w	r0, r3, fp
24004868:	4428      	add	r0, r5
2400486a:	f012 fcbf 	bl	240171ec <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
2400486e:	eb09 000b 	add.w	r0, r9, fp
24004872:	4621      	mov	r1, r4
24004874:	4428      	add	r0, r5
24004876:	f013 fce3 	bl	24018240 <tTriLFO_init>

			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
2400487a:	eb0a 000b 	add.w	r0, sl, fp
2400487e:	4621      	mov	r1, r4
24004880:	4428      	add	r0, r5
24004882:	f013 fd3b 	bl	240182fc <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24004886:	eb06 000b 	add.w	r0, r6, fp
2400488a:	4621      	mov	r1, r4
2400488c:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
2400488e:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24004890:	f013 fc0e 	bl	240180b0 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24004894:	2d20      	cmp	r5, #32
24004896:	d1da      	bne.n	2400484e <audioInitSynth+0x3ea>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24004898:	2300      	movs	r3, #0
2400489a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
2400489c:	9e02      	ldr	r6, [sp, #8]
2400489e:	f2c4 437a 	movt	r3, #17530	; 0x447a
240048a2:	f1a7 0520 	sub.w	r5, r7, #32
240048a6:	ee0a 3a90 	vmov	s21, r3
240048aa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
240048ae:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
240048b2:	ee08 3a90 	vmov	s17, r3
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048b6:	f64f 73ac 	movw	r3, #65452	; 0xffac
240048ba:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
240048be:	ee08 3a10 	vmov	s16, r3
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240048c2:	f241 11b0 	movw	r1, #4528	; 0x11b0
240048c6:	4628      	mov	r0, r5
240048c8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240048cc:	4623      	mov	r3, r4
240048ce:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240048d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
240048d6:	eef0 0a6a 	vmov.f32	s1, s21
240048da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240048de:	eeb0 0a68 	vmov.f32	s0, s17
240048e2:	f00e f93d 	bl	24012b60 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048e6:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
240048e8:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048ea:	eeb0 0a48 	vmov.f32	s0, s16
240048ee:	f00e f9e9 	bl	24012cc4 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
240048f2:	42bd      	cmp	r5, r7
240048f4:	d1e5      	bne.n	240048c2 <audioInitSynth+0x45e>
		}

		//noise
		tTiltFilter_init(&noiseTilt[v], 1000.0f, &leaf);
240048f6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
240048f8:	eeb0 0a6a 	vmov.f32	s0, s21
240048fc:	4621      	mov	r1, r4
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
240048fe:	465d      	mov	r5, fp
		tTiltFilter_init(&noiseTilt[v], 1000.0f, &leaf);
24004900:	eb03 000b 	add.w	r0, r3, fp
24004904:	f012 f8f6 	bl	24016af4 <tTiltFilter_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24004908:	f248 531f 	movw	r3, #34079	; 0x851f
2400490c:	eef0 0a4b 	vmov.f32	s1, s22
24004910:	4621      	mov	r1, r4
24004912:	f6c3 738b 	movt	r3, #16267	; 0x3f8b
24004916:	eeb0 0a6a 	vmov.f32	s0, s21
2400491a:	ee01 3a10 	vmov	s2, r3
2400491e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
24004920:	eb03 000b 	add.w	r0, r3, fp
24004924:	f010 fefc 	bl	24015720 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400492c:	f2c4 73bb 	movt	r3, #18363	; 0x47bb
24004930:	ee08 3a10 	vmov	s16, r3
			tTiltFilter_init(&FXTilt[i][v],1000.0f, &leaf);
			tTiltFilter_setSampleRate(&FXTilt[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24004934:	2300      	movs	r3, #0
24004936:	f2cc 23b4 	movt	r3, #49844	; 0xc2b4
2400493a:	ee0b 3a90 	vmov	s23, r3
2400493e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
24004940:	eb03 0a0b 	add.w	sl, r3, fp
24004944:	9b2b      	ldr	r3, [sp, #172]	; 0xac
24004946:	eb03 070b 	add.w	r7, r3, fp
2400494a:	f10b 0320 	add.w	r3, fp, #32
2400494e:	e9cd 6b22 	strd	r6, fp, [sp, #136]	; 0x88
24004952:	461e      	mov	r6, r3
24004954:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
			tCrusher_init(&bc[i][v],&leaf);
24004958:	4650      	mov	r0, sl
2400495a:	4621      	mov	r1, r4
2400495c:	f00d feae 	bl	240126bc <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24004960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24004962:	4621      	mov	r1, r4
24004964:	4638      	mov	r0, r7
24004966:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400496a:	eb03 0805 	add.w	r8, r3, r5
2400496e:	f00f fbfd 	bl	2401416c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004972:	4638      	mov	r0, r7
24004974:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
24004978:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400497c:	f00f fc56 	bl	2401422c <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24004980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24004982:	4621      	mov	r1, r4
24004984:	4640      	mov	r0, r8
24004986:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400498a:	eb03 0905 	add.w	r9, r3, r5
2400498e:	f00f fbed 	bl	2401416c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
24004992:	4640      	mov	r0, r8
24004994:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
24004998:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
2400499a:	f00f fc47 	bl	2401422c <tHighpass_setSampleRate>
			tTiltFilter_init(&FXTilt[i][v],1000.0f, &leaf);
2400499e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
240049a0:	4621      	mov	r1, r4
240049a2:	4648      	mov	r0, r9
240049a4:	eeb0 0a6a 	vmov.f32	s0, s21
240049a8:	eb03 0805 	add.w	r8, r3, r5
240049ac:	f012 f8a2 	bl	24016af4 <tTiltFilter_init>
			tTiltFilter_setSampleRate(&FXTilt[i][v], SAMPLE_RATE * OVERSAMPLE);
240049b0:	4648      	mov	r0, r9
240049b2:	eeb0 0a48 	vmov.f32	s0, s16
240049b6:	f012 f941 	bl	24016c3c <tTiltFilter_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
240049ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
240049bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240049c0:	4621      	mov	r1, r4
240049c2:	eb03 0905 	add.w	r9, r3, r5
240049c6:	eef0 0a4b 	vmov.f32	s1, s22
240049ca:	4640      	mov	r0, r8
240049cc:	eeb0 0a6a 	vmov.f32	s0, s21
240049d0:	f010 fea6 	bl	24015720 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
240049d4:	eeb0 0a48 	vmov.f32	s0, s16
240049d8:	4640      	mov	r0, r8
240049da:	f010 fea5 	bl	24015728 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
240049de:	4648      	mov	r0, r9
240049e0:	4621      	mov	r1, r4
240049e2:	f00d ff49 	bl	24012878 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
240049e6:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
240049ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
240049ec:	f242 0200 	movw	r2, #8192	; 0x2000
240049f0:	f2c3 7327 	movt	r3, #14119	; 0x3727
240049f4:	f242 0100 	movw	r1, #8192	; 0x2000
240049f8:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
240049fc:	f2c3 0200 	movt	r2, #12288	; 0x3000
24004a00:	ee00 3a10 	vmov	s0, r3
24004a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24004a08:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24004a0c:	eb00 0805 	add.w	r8, r0, r5
24004a10:	eeb0 1a6b 	vmov.f32	s2, s23
24004a14:	f2c3 0101 	movt	r1, #12289	; 0x3001
24004a18:	4648      	mov	r0, r9
24004a1a:	9300      	str	r3, [sp, #0]
24004a1c:	f00d ffe8 	bl	240129f0 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a20:	eeb0 0a48 	vmov.f32	s0, s16
24004a24:	4648      	mov	r0, r9
24004a26:	f00e f809 	bl	24012a3c <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
24004a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
24004a2c:	4621      	mov	r1, r4
24004a2e:	4640      	mov	r0, r8
24004a30:	eb03 0905 	add.w	r9, r3, r5
24004a34:	f012 fbda 	bl	240171ec <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a38:	eeb0 0a48 	vmov.f32	s0, s16
24004a3c:	4640      	mov	r0, r8
24004a3e:	f012 fc57 	bl	240172f0 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
24004a42:	4621      	mov	r1, r4
24004a44:	4648      	mov	r0, r9
24004a46:	f012 fbd1 	bl	240171ec <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a4a:	4648      	mov	r0, r9
24004a4c:	eeb0 0a48 	vmov.f32	s0, s16
24004a50:	f012 fc4e 	bl	240172f0 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24004a54:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24004a58:	4640      	mov	r0, r8
24004a5a:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
24004a5e:	ee00 3a10 	vmov	s0, r3
24004a62:	f012 fc27 	bl	240172b4 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24004a66:	f648 6339 	movw	r3, #36409	; 0x8e39
24004a6a:	4648      	mov	r0, r9
24004a6c:	f6c3 6363 	movt	r3, #15971	; 0x3e63
24004a70:	ee00 3a10 	vmov	s0, r3
24004a74:	f012 fc1e 	bl	240172b4 <tCycle_setFreq>


	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
24004a78:	f247 03a4 	movw	r3, #28836	; 0x70a4
24004a7c:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
24004a80:	4622      	mov	r2, r4
24004a82:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
24004a86:	eef0 0a49 	vmov.f32	s1, s18
24004a8a:	2100      	movs	r1, #0
24004a8c:	ee00 3a10 	vmov	s0, r3
24004a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
24004a92:	1958      	adds	r0, r3, r5
24004a94:	f00d ffd6 	bl	24012a44 <tFeedbackLeveler_init>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24004a98:	2300      	movs	r3, #0
24004a9a:	eb0b 0005 	add.w	r0, fp, r5
24004a9e:	eef0 0a4a 	vmov.f32	s1, s20
24004aa2:	f2c4 43fa 	movt	r3, #17658	; 0x44fa
24004aa6:	4622      	mov	r2, r4
24004aa8:	2101      	movs	r1, #1
24004aaa:	9002      	str	r0, [sp, #8]
24004aac:	ee08 3a90 	vmov	s17, r3
24004ab0:	ee00 3a10 	vmov	s0, r3
24004ab4:	9b03      	ldr	r3, [sp, #12]
24004ab6:	eb03 0805 	add.w	r8, r3, r5
24004aba:	f00e ffa9 	bl	24013a10 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004abe:	eeb0 0a48 	vmov.f32	s0, s16
24004ac2:	9802      	ldr	r0, [sp, #8]
24004ac4:	f00f fa2e 	bl	24013f24 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24004ac8:	9b04      	ldr	r3, [sp, #16]
24004aca:	eef0 0a4a 	vmov.f32	s1, s20
24004ace:	4622      	mov	r2, r4
24004ad0:	2100      	movs	r1, #0
24004ad2:	4640      	mov	r0, r8
24004ad4:	eeb0 0a68 	vmov.f32	s0, s17
24004ad8:	eb03 0905 	add.w	r9, r3, r5
24004adc:	f00e ff98 	bl	24013a10 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004ae0:	4640      	mov	r0, r8
24004ae2:	eeb0 0a48 	vmov.f32	s0, s16
24004ae6:	f00f fa1d 	bl	24013f24 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24004aea:	9b05      	ldr	r3, [sp, #20]
24004aec:	4622      	mov	r2, r4
24004aee:	eef0 0a4a 	vmov.f32	s1, s20
24004af2:	eb03 0805 	add.w	r8, r3, r5
24004af6:	2102      	movs	r1, #2
24004af8:	4648      	mov	r0, r9
24004afa:	eeb0 0a68 	vmov.f32	s0, s17
24004afe:	f00e ff87 	bl	24013a10 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004b02:	4648      	mov	r0, r9
24004b04:	eeb0 0a48 	vmov.f32	s0, s16
24004b08:	f00f fa0c 	bl	24013f24 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24004b0c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004b10:	4621      	mov	r1, r4
24004b12:	4640      	mov	r0, r8
24004b14:	eeb0 0a68 	vmov.f32	s0, s17
24004b18:	f011 f93e 	bl	24015d98 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
24004b1c:	4640      	mov	r0, r8
24004b1e:	eeb0 0a48 	vmov.f32	s0, s16
24004b22:	f011 fd59 	bl	240165d8 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
24004b26:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24004b2a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004b2e:	4621      	mov	r1, r4
24004b30:	f6c3 73cc 	movt	r3, #16332	; 0x3fcc
24004b34:	eeb0 0a68 	vmov.f32	s0, s17
24004b38:	ee00 3a90 	vmov	s1, r3
24004b3c:	9b06      	ldr	r3, [sp, #24]
24004b3e:	1958      	adds	r0, r3, r5
24004b40:	9b07      	ldr	r3, [sp, #28]
24004b42:	9002      	str	r0, [sp, #8]
24004b44:	eb03 0805 	add.w	r8, r3, r5
24004b48:	f010 fdea 	bl	24015720 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
24004b4c:	eeb0 0a48 	vmov.f32	s0, s16
24004b50:	9802      	ldr	r0, [sp, #8]
24004b52:	f010 fde9 	bl	24015728 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004b56:	f649 139a 	movw	r3, #39322	; 0x999a
24004b5a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004b5e:	4621      	mov	r1, r4
24004b60:	f6c3 7319 	movt	r3, #16153	; 0x3f19
24004b64:	4640      	mov	r0, r8
24004b66:	eeb0 0a68 	vmov.f32	s0, s17
24004b6a:	ee00 3a90 	vmov	s1, r3
24004b6e:	9302      	str	r3, [sp, #8]
24004b70:	9b08      	ldr	r3, [sp, #32]
24004b72:	eb03 0905 	add.w	r9, r3, r5
24004b76:	f010 f8ed 	bl	24014d54 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
24004b7a:	4640      	mov	r0, r8
24004b7c:	eeb0 0a48 	vmov.f32	s0, s16
24004b80:	f010 f8ec 	bl	24014d5c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
24004b86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004b8a:	eddd 0a02 	vldr	s1, [sp, #8]
24004b8e:	4621      	mov	r1, r4
24004b90:	4648      	mov	r0, r9
24004b92:	eeb0 0a68 	vmov.f32	s0, s17
24004b96:	eb03 0805 	add.w	r8, r3, r5
24004b9a:	f010 fb59 	bl	24015250 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
24004b9e:	4648      	mov	r0, r9
24004ba0:	eeb0 0a48 	vmov.f32	s0, s16
24004ba4:	f010 fb58 	bl	24015258 <tVZFilterHS_setSampleRate>
			tVZFilterBR_init(&FXVZfilterBR[i][v], 2000.f, 1.0f, &leaf);
24004ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24004baa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004bae:	4621      	mov	r1, r4
24004bb0:	eb03 0905 	add.w	r9, r3, r5
24004bb4:	eeb0 0a68 	vmov.f32	s0, s17
24004bb8:	4640      	mov	r0, r8
		for (int i = 0; i < NUM_EFFECT; i++)
24004bba:	3508      	adds	r5, #8
			tVZFilterBR_init(&FXVZfilterBR[i][v], 2000.f, 1.0f, &leaf);
24004bbc:	f010 ffa0 	bl	24015b00 <tVZFilterBR_init>
			tVZFilterBR_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
24004bc0:	eeb0 0a48 	vmov.f32	s0, s16
24004bc4:	4640      	mov	r0, r8
24004bc6:	f011 f839 	bl	24015c3c <tVZFilterBR_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
24004bca:	eeb0 0a68 	vmov.f32	s0, s17
24004bce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004bd2:	4621      	mov	r1, r4
24004bd4:	4648      	mov	r0, r9
24004bd6:	f011 fd27 	bl	24016628 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
24004bda:	eeb0 0a48 	vmov.f32	s0, s16
24004bde:	4648      	mov	r0, r9
24004be0:	f011 ff5c 	bl	24016a9c <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
24004be4:	42ae      	cmp	r6, r5
24004be6:	f47f aeb7 	bne.w	24004958 <audioInitSynth+0x4f4>
24004bea:	e9dd 6b22 	ldrd	r6, fp, [sp, #136]	; 0x88
24004bee:	f5a6 7580 	sub.w	r5, r6, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
24004bf2:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24004bf4:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
24004bf6:	eef0 0a49 	vmov.f32	s1, s18
24004bfa:	4621      	mov	r1, r4
24004bfc:	eeb0 0a69 	vmov.f32	s0, s19
24004c00:	f00e faf6 	bl	240131f0 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24004c04:	42ae      	cmp	r6, r5
24004c06:	d1f4      	bne.n	24004bf2 <audioInitSynth+0x78e>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		}

		tSVF_LP_init(&finalLowpass[v], 19000.f, 0.2f, &leaf);
24004c0a:	4621      	mov	r1, r4
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004c0c:	3604      	adds	r6, #4
24004c0e:	3304      	adds	r3, #4
24004c10:	9313      	str	r3, [sp, #76]	; 0x4c
		tSVF_LP_init(&finalLowpass[v], 19000.f, 0.2f, &leaf);
24004c12:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24004c16:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
24004c1a:	ee00 3a90 	vmov	s1, r3
24004c1e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
24004c22:	f2c4 6394 	movt	r3, #18068	; 0x4694
24004c26:	ee00 3a10 	vmov	s0, r3
24004c2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
24004c2c:	eb03 000b 	add.w	r0, r3, fp
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004c30:	f10b 0b04 	add.w	fp, fp, #4
		tSVF_LP_init(&finalLowpass[v], 19000.f, 0.2f, &leaf);
24004c34:	f00f f9a0 	bl	24013f78 <tSVF_LP_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
24004c3a:	b123      	cbz	r3, 24004c46 <audioInitSynth+0x7e2>
	}

}
24004c3c:	b037      	add	sp, #220	; 0xdc
24004c3e:	ecbd 8b0a 	vpop	{d8-d12}
24004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24004c46:	2301      	movs	r3, #1
24004c48:	9321      	str	r3, [sp, #132]	; 0x84
24004c4a:	e52c      	b.n	240046a6 <audioInitSynth+0x242>

24004c4c <audioFreeSynth>:

void  audioFreeSynth()
{
24004c4c:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		//for (int i = 0; i < NUM_EFFECT; i++)
		{
			tTapeDelay_free(&tapeDelay[v]);
24004c4e:	f64d 16b0 	movw	r6, #55728	; 0xd9b0
			tLinearDelay_free(&delay2[v]);
24004c52:	f24d 25ec 	movw	r5, #53996	; 0xd2ec
			tLinearDelay_free(&delay1[v]);
24004c56:	f24d 24e4 	movw	r4, #53988	; 0xd2e4
			tTapeDelay_free(&tapeDelay[v]);
24004c5a:	f2c2 0601 	movt	r6, #8193	; 0x2001
			tLinearDelay_free(&delay2[v]);
24004c5e:	f2c2 0501 	movt	r5, #8193	; 0x2001
			tLinearDelay_free(&delay1[v]);
24004c62:	f2c2 0401 	movt	r4, #8193	; 0x2001
			tTapeDelay_free(&tapeDelay[v]);
24004c66:	4630      	mov	r0, r6
24004c68:	f00d fb66 	bl	24012338 <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
24004c6c:	4628      	mov	r0, r5
24004c6e:	f00d f8b9 	bl	24011de4 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
24004c72:	4620      	mov	r0, r4
24004c74:	f00d f8b6 	bl	24011de4 <tLinearDelay_free>
			tTapeDelay_free(&tapeDelay[v]);
24004c78:	1d30      	adds	r0, r6, #4
24004c7a:	f00d fb5d 	bl	24012338 <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
24004c7e:	1d28      	adds	r0, r5, #4
24004c80:	f00d f8b0 	bl	24011de4 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
24004c84:	1d20      	adds	r0, r4, #4
		}
	}
}
24004c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			tLinearDelay_free(&delay1[v]);
24004c8a:	f00d b8ab 	b.w	24011de4 <tLinearDelay_free>
24004c8e:	bf00      	nop

24004c90 <audioSwitchToSynth>:

void  audioSwitchToSynth()
{
24004c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != SynthLoaded)
24004c94:	f244 285d 	movw	r8, #16989	; 0x425d
24004c98:	f2c2 0801 	movt	r8, #8193	; 0x2001
{
24004c9c:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != SynthLoaded)
24004ca0:	f898 3000 	ldrb.w	r3, [r8]
24004ca4:	2b04      	cmp	r3, #4
24004ca6:	d041      	beq.n	24004d2c <audioSwitchToSynth+0x9c>
	{
		if (whichStringModelLoaded == String1Loaded)
24004ca8:	2b01      	cmp	r3, #1
24004caa:	d071      	beq.n	24004d90 <audioSwitchToSynth+0x100>
		{
			audioFreeString1();
		}
		if (whichStringModelLoaded == String2Loaded)
24004cac:	2b02      	cmp	r3, #2
24004cae:	d075      	beq.n	24004d9c <audioSwitchToSynth+0x10c>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
		{
			//for (int i = 0; i < NUM_EFFECT; i++)
			{

				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
24004cb0:	2300      	movs	r3, #0
24004cb2:	f24d 24e4 	movw	r4, #53988	; 0xd2e4
24004cb6:	f24d 27ec 	movw	r7, #53996	; 0xd2ec
24004cba:	f64d 16b0 	movw	r6, #55728	; 0xd9b0
24004cbe:	f2c4 537a 	movt	r3, #17786	; 0x457a
24004cc2:	f2c2 0401 	movt	r4, #8193	; 0x2001
24004cc6:	f245 25e0 	movw	r5, #21216	; 0x52e0
24004cca:	f2c2 0701 	movt	r7, #8193	; 0x2001
24004cce:	ee08 3a10 	vmov	s16, r3
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004cd2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
24004cd6:	f2c2 0601 	movt	r6, #8193	; 0x2001
24004cda:	f104 0908 	add.w	r9, r4, #8
24004cde:	f2c4 636a 	movt	r3, #18026	; 0x466a
				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
24004ce2:	f2c2 0500 	movt	r5, #8192	; 0x2000
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004ce6:	ee08 3a90 	vmov	s17, r3
				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
24004cea:	4620      	mov	r0, r4
24004cec:	eeb0 0a48 	vmov.f32	s0, s16
24004cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24004cf4:	462a      	mov	r2, r5
24004cf6:	f00d f805 	bl	24011d04 <tLinearDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004cfa:	3404      	adds	r4, #4
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
24004cfc:	4638      	mov	r0, r7
24004cfe:	eeb0 0a48 	vmov.f32	s0, s16
24004d02:	462a      	mov	r2, r5
24004d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24004d08:	f00c fffc 	bl	24011d04 <tLinearDelay_initToPool>
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004d0c:	4630      	mov	r0, r6
24004d0e:	eeb0 0a68 	vmov.f32	s0, s17
24004d12:	462a      	mov	r2, r5
24004d14:	f644 6120 	movw	r1, #20000	; 0x4e20
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d18:	3704      	adds	r7, #4
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004d1a:	f00d fad1 	bl	240122c0 <tTapeDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d1e:	454c      	cmp	r4, r9
24004d20:	f106 0604 	add.w	r6, r6, #4
24004d24:	d1e1      	bne.n	24004cea <audioSwitchToSynth+0x5a>
			}
		}
		whichStringModelLoaded = SynthLoaded;
24004d26:	2304      	movs	r3, #4
24004d28:	f888 3000 	strb.w	r3, [r8]
24004d2c:	f245 2438 	movw	r4, #21048	; 0x5238
	}
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
24004d30:	f241 236f 	movw	r3, #4719	; 0x126f
24004d34:	f245 16d4 	movw	r6, #20948	; 0x51d4
{
24004d38:	2500      	movs	r5, #0
24004d3a:	f2c2 0400 	movt	r4, #8192	; 0x2000
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
24004d3e:	f6c3 2383 	movt	r3, #14979	; 0x3a83
24004d42:	f2c2 0600 	movt	r6, #8192	; 0x2000
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
24004d46:	f04f 0801 	mov.w	r8, #1
24004d4a:	f104 0750 	add.w	r7, r4, #80	; 0x50
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
24004d4e:	ee08 3a10 	vmov	s16, r3
24004d52:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
24004d54:	3404      	adds	r4, #4
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
24004d56:	eeb0 0a48 	vmov.f32	s0, s16
24004d5a:	f00e fa99 	bl	24013290 <tExpSmooth_setFactor>
	for (int i = 0; i < 20; i++)
24004d5e:	42a7      	cmp	r7, r4
		knobFrozen[i] = 1;
24004d60:	f806 8005 	strb.w	r8, [r6, r5]
	for (int i = 0; i < 20; i++)
24004d64:	f105 0501 	add.w	r5, r5, #1
24004d68:	d1f3      	bne.n	24004d52 <audioSwitchToSynth+0xc2>
	}
	antiClickFade = 0.0f;
24004d6a:	f24d 2130 	movw	r1, #53808	; 0xd230
	audioFrameFunction = audioFrameSynth;
24004d6e:	f241 138c 	movw	r3, #4492	; 0x118c
24004d72:	f24c 7281 	movw	r2, #51073	; 0xc781
	antiClickFade = 0.0f;
24004d76:	2000      	movs	r0, #0
24004d78:	f2c2 0101 	movt	r1, #8193	; 0x2001
	audioFrameFunction = audioFrameSynth;
24004d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
24004d80:	f2c0 0200 	movt	r2, #0
	antiClickFade = 0.0f;
24004d84:	6008      	str	r0, [r1, #0]
	audioFrameFunction = audioFrameSynth;
24004d86:	601a      	str	r2, [r3, #0]
}
24004d88:	ecbd 8b02 	vpop	{d8}
24004d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeString1();
24004d90:	f029 fb2a 	bl	2402e3e8 <__audioFreeString1_veneer>
		if (whichStringModelLoaded == String2Loaded)
24004d94:	f898 3000 	ldrb.w	r3, [r8]
24004d98:	2b02      	cmp	r3, #2
24004d9a:	d189      	bne.n	24004cb0 <audioSwitchToSynth+0x20>
			audioFreeString2();
24004d9c:	f029 fb34 	bl	2402e408 <__audioFreeString2_veneer>
24004da0:	e786      	b.n	24004cb0 <audioSwitchToSynth+0x20>
24004da2:	bf00      	nop

24004da4 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
24004da4:	f24d 73b4 	movw	r3, #55220	; 0xd7b4
{
24004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newOS != prevOversample)
24004dac:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
24004db0:	ed2d 8b02 	vpush	{d8}
24004db4:	b099      	sub	sp, #100	; 0x64
24004db6:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
	if (newOS != prevOversample)
24004dba:	681b      	ldr	r3, [r3, #0]
24004dbc:	4283      	cmp	r3, r0
24004dbe:	f000 8144 	beq.w	2400504a <changeOversampling+0x2a6>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
24004dc2:	f240 6394 	movw	r3, #1684	; 0x694
24004dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
24004dca:	9311      	str	r3, [sp, #68]	; 0x44
24004dcc:	781b      	ldrb	r3, [r3, #0]
24004dce:	2b00      	cmp	r3, #0
24004dd0:	f000 813b 	beq.w	2400504a <changeOversampling+0x2a6>
24004dd4:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004dd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
24004dda:	3301      	adds	r3, #1
24004ddc:	f2c4 723b 	movt	r2, #18235	; 0x473b
24004de0:	ee07 3a90 	vmov	s15, r3
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004de4:	2320      	movs	r3, #32
24004de6:	9306      	str	r3, [sp, #24]
24004de8:	f24d 13b8 	movw	r3, #53688	; 0xd1b8
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004dec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
24004df0:	ee07 2a90 	vmov	s15, r2
24004df4:	f2c2 0301 	movt	r3, #8193	; 0x2001
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004df8:	2200      	movs	r2, #0
24004dfa:	9312      	str	r3, [sp, #72]	; 0x48
24004dfc:	f24d 1398 	movw	r3, #53656	; 0xd198
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004e00:	ee28 8a27 	vmul.f32	s16, s16, s15
		for (int v = 0; v < numStringsThisBoard; v++)
24004e04:	920d      	str	r2, [sp, #52]	; 0x34
24004e06:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e0a:	9313      	str	r3, [sp, #76]	; 0x4c
24004e0c:	f24d 1358 	movw	r3, #53592	; 0xd158
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004e10:	eebc 8ac8 	vcvt.u32.f32	s16, s16
24004e14:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e18:	9314      	str	r3, [sp, #80]	; 0x50
24004e1a:	f24d 1378 	movw	r3, #53624	; 0xd178
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004e1e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
24004e22:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e26:	9315      	str	r3, [sp, #84]	; 0x54
24004e28:	f24d 1338 	movw	r3, #53560	; 0xd138
24004e2c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e30:	9316      	str	r3, [sp, #88]	; 0x58
24004e32:	f24d 1318 	movw	r3, #53528	; 0xd118
24004e36:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e3a:	9317      	str	r3, [sp, #92]	; 0x5c
24004e3c:	f24d 23a4 	movw	r3, #53924	; 0xd2a4
24004e40:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e44:	9307      	str	r3, [sp, #28]
24004e46:	f24d 23c4 	movw	r3, #53956	; 0xd2c4
24004e4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e4e:	9308      	str	r3, [sp, #32]
24004e50:	f24d 03b8 	movw	r3, #53432	; 0xd0b8
24004e54:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e58:	9309      	str	r3, [sp, #36]	; 0x24
24004e5a:	f24d 2384 	movw	r3, #53892	; 0xd284
24004e5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e62:	930a      	str	r3, [sp, #40]	; 0x28
24004e64:	f24d 6334 	movw	r3, #54836	; 0xd634
24004e68:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
24004e6e:	f24d 6354 	movw	r3, #54868	; 0xd654
24004e72:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e76:	930c      	str	r3, [sp, #48]	; 0x30
24004e78:	f24d 03f8 	movw	r3, #53496	; 0xd0f8
24004e7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e80:	9301      	str	r3, [sp, #4]
24004e82:	f24d 03d8 	movw	r3, #53464	; 0xd0d8
24004e86:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e8a:	9302      	str	r3, [sp, #8]
24004e8c:	f24d 0398 	movw	r3, #53400	; 0xd098
24004e90:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004e94:	9303      	str	r3, [sp, #12]
24004e96:	f24d 2344 	movw	r3, #53828	; 0xd244
24004e9a:	9906      	ldr	r1, [sp, #24]
		for (int v = 0; v < numStringsThisBoard; v++)
24004e9c:	4614      	mov	r4, r2
24004e9e:	920e      	str	r2, [sp, #56]	; 0x38
24004ea0:	f2c2 0301 	movt	r3, #8193	; 0x2001
24004ea4:	eb03 0b01 	add.w	fp, r3, r1
24004ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
24004eaa:	eb03 0a02 	add.w	sl, r3, r2
24004eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
24004eb0:	eb03 0902 	add.w	r9, r3, r2
24004eb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
24004eb6:	eb03 0802 	add.w	r8, r3, r2
24004eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
24004ebc:	189f      	adds	r7, r3, r2
24004ebe:	9b16      	ldr	r3, [sp, #88]	; 0x58
24004ec0:	189e      	adds	r6, r3, r2
24004ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
24004ec4:	189d      	adds	r5, r3, r2
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004ec6:	9b07      	ldr	r3, [sp, #28]
24004ec8:	eeb0 0a48 	vmov.f32	s0, s16
24004ecc:	1918      	adds	r0, r3, r4
24004ece:	f00f f9ad 	bl	2401422c <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
24004ed2:	9b08      	ldr	r3, [sp, #32]
24004ed4:	eeb0 0a48 	vmov.f32	s0, s16
24004ed8:	1918      	adds	r0, r3, r4
24004eda:	f00f f9a7 	bl	2401422c <tHighpass_setSampleRate>
				tTiltFilter_setSampleRate(&FXTilt[i][v], osMult);
24004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
24004ee0:	eeb0 0a48 	vmov.f32	s0, s16
24004ee4:	1918      	adds	r0, r3, r4
24004ee6:	f011 fea9 	bl	24016c3c <tTiltFilter_setSampleRate>
				//tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
				//tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
				//tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
				//tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
24004eea:	4658      	mov	r0, fp
24004eec:	eeb0 0a48 	vmov.f32	s0, s16
24004ef0:	f010 fc1a 	bl	24015728 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24004ef4:	f8db 3000 	ldr.w	r3, [fp]
24004ef8:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
24004efa:	f10b 0b08 	add.w	fp, fp, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24004efe:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004f02:	f010 fcfd 	bl	24015900 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
24004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24004f08:	eeb0 0a48 	vmov.f32	s0, s16
24004f0c:	1918      	adds	r0, r3, r4
24004f0e:	f00d fd95 	bl	24012a3c <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
24004f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24004f14:	eeb0 0a48 	vmov.f32	s0, s16
24004f18:	1918      	adds	r0, r3, r4
24004f1a:	f012 f9e9 	bl	240172f0 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
24004f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24004f20:	eeb0 0a48 	vmov.f32	s0, s16
24004f24:	1918      	adds	r0, r3, r4
24004f26:	f012 f9e3 	bl	240172f0 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
24004f2a:	4650      	mov	r0, sl
24004f2c:	eeb0 0a48 	vmov.f32	s0, s16
24004f30:	f00e fff8 	bl	24013f24 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
24004f34:	f8da 3000 	ldr.w	r3, [sl]
24004f38:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
24004f3a:	f10a 0a08 	add.w	sl, sl, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
24004f3e:	ed93 0a04 	vldr	s0, [r3, #16]
24004f42:	f00e ff89 	bl	24013e58 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
24004f46:	4648      	mov	r0, r9
24004f48:	eeb0 0a48 	vmov.f32	s0, s16
24004f4c:	f00e ffea 	bl	24013f24 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24004f50:	f8d9 3000 	ldr.w	r3, [r9]
24004f54:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
24004f56:	f109 0908 	add.w	r9, r9, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24004f5a:	ed93 0a04 	vldr	s0, [r3, #16]
24004f5e:	f00e ff7b 	bl	24013e58 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
24004f62:	4640      	mov	r0, r8
24004f64:	eeb0 0a48 	vmov.f32	s0, s16
24004f68:	f00e ffdc 	bl	24013f24 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
24004f6c:	f8d8 3000 	ldr.w	r3, [r8]
24004f70:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
24004f72:	f108 0808 	add.w	r8, r8, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
24004f76:	ed93 0a04 	vldr	s0, [r3, #16]
24004f7a:	f00e ff6d 	bl	24013e58 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
24004f7e:	4638      	mov	r0, r7
24004f80:	eeb0 0a48 	vmov.f32	s0, s16
24004f84:	f011 fb28 	bl	240165d8 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
24004f88:	683b      	ldr	r3, [r7, #0]
24004f8a:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
24004f8c:	3708      	adds	r7, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
24004f8e:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
24004f92:	f011 fb21 	bl	240165d8 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
24004f96:	4630      	mov	r0, r6
24004f98:	eeb0 0a48 	vmov.f32	s0, s16
24004f9c:	f010 fbc4 	bl	24015728 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
24004fa0:	6833      	ldr	r3, [r6, #0]
24004fa2:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
24004fa4:	3608      	adds	r6, #8
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
24004fa6:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004faa:	f010 fca9 	bl	24015900 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
24004fae:	4628      	mov	r0, r5
24004fb0:	eeb0 0a48 	vmov.f32	s0, s16
24004fb4:	f00f fed2 	bl	24014d5c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
24004fb8:	682b      	ldr	r3, [r5, #0]
24004fba:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
24004fbc:	3508      	adds	r5, #8
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
24004fbe:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004fc2:	9b01      	ldr	r3, [sp, #4]
24004fc4:	4423      	add	r3, r4
24004fc6:	9304      	str	r3, [sp, #16]
24004fc8:	f00f ff1c 	bl	24014e04 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
24004fcc:	9b04      	ldr	r3, [sp, #16]
24004fce:	eeb0 0a48 	vmov.f32	s0, s16
24004fd2:	4618      	mov	r0, r3
24004fd4:	f010 f940 	bl	24015258 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
24004fd8:	9b04      	ldr	r3, [sp, #16]
24004fda:	4618      	mov	r0, r3
24004fdc:	9b01      	ldr	r3, [sp, #4]
24004fde:	591b      	ldr	r3, [r3, r4]
24004fe0:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004fe4:	f010 f98c 	bl	24015300 <tVZFilterHS_setFreqFast>
				tVZFilterBR_setSampleRate(&FXVZfilterBR[i][v], osMult);
24004fe8:	9b02      	ldr	r3, [sp, #8]
24004fea:	9a03      	ldr	r2, [sp, #12]
24004fec:	eeb0 0a48 	vmov.f32	s0, s16
24004ff0:	1918      	adds	r0, r3, r4
24004ff2:	1913      	adds	r3, r2, r4
24004ff4:	e9cd 0304 	strd	r0, r3, [sp, #16]
24004ff8:	f010 fe20 	bl	24015c3c <tVZFilterBR_setSampleRate>
				tVZFilterBR_setFreqFast(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->cutoffMIDI);
24004ffc:	9b02      	ldr	r3, [sp, #8]
24004ffe:	9804      	ldr	r0, [sp, #16]
24005000:	591a      	ldr	r2, [r3, r4]
24005002:	ed92 0a07 	vldr	s0, [r2, #28]
24005006:	f010 fe6b 	bl	24015ce0 <tVZFilterBR_setFreqFast>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
2400500a:	9b05      	ldr	r3, [sp, #20]
2400500c:	eeb0 0a48 	vmov.f32	s0, s16
24005010:	4618      	mov	r0, r3
24005012:	9304      	str	r3, [sp, #16]
24005014:	f011 fd42 	bl	24016a9c <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24005018:	9b04      	ldr	r3, [sp, #16]
2400501a:	9a03      	ldr	r2, [sp, #12]
2400501c:	4618      	mov	r0, r3
2400501e:	5913      	ldr	r3, [r2, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
24005020:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24005022:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24005026:	f011 fced 	bl	24016a04 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
2400502a:	9b06      	ldr	r3, [sp, #24]
2400502c:	429c      	cmp	r4, r3
2400502e:	f47f af4a 	bne.w	24004ec6 <changeOversampling+0x122>
		for (int v = 0; v < numStringsThisBoard; v++)
24005032:	3304      	adds	r3, #4
24005034:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
24005038:	9306      	str	r3, [sp, #24]
2400503a:	9b11      	ldr	r3, [sp, #68]	; 0x44
2400503c:	3101      	adds	r1, #1
2400503e:	3204      	adds	r2, #4
24005040:	781b      	ldrb	r3, [r3, #0]
24005042:	910d      	str	r1, [sp, #52]	; 0x34
24005044:	428b      	cmp	r3, r1
24005046:	f73f af26 	bgt.w	24004e96 <changeOversampling+0xf2>
			}
		}
	}
	prevOversample = newOS;
2400504a:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
2400504e:	601a      	str	r2, [r3, #0]
}
24005050:	b019      	add	sp, #100	; 0x64
24005052:	ecbd 8b02 	vpop	{d8}
24005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400505a:	bf00      	nop

2400505c <delayTick>:
}



float delayTick(float sample, int v, int string)
{
2400505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sample *= param5[v][string];

    sample = sample + (delayFB[v][string] * param2[v][string]);
2400505e:	f24d 25f4 	movw	r5, #54004	; 0xd2f4
24005062:	f24d 64fc 	movw	r4, #55036	; 0xd6fc
    sample *= param5[v][string];
24005066:	eb01 0340 	add.w	r3, r1, r0, lsl #1
2400506a:	f24d 725c 	movw	r2, #55132	; 0xd75c
    sample = sample + (delayFB[v][string] * param2[v][string]);
2400506e:	f2c2 0501 	movt	r5, #8193	; 0x2001
24005072:	f2c2 0401 	movt	r4, #8193	; 0x2001
    sample *= param5[v][string];
24005076:	f2c2 0201 	movt	r2, #8193	; 0x2001

    sample = fast_tanh5(sample);

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
2400507a:	f24d 3058 	movw	r0, #54104	; 0xd358
    sample = sample + (delayFB[v][string] * param2[v][string]);
2400507e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

inline float InvSqrt(float x)
{
    Lfloat xhalf = 0.5f*x;
    int i = *(int*)&x; // get bits for floating value
    i = 0x5f3759df - (i>>1); // gives initial guess y0
24005082:	f645 16df 	movw	r6, #23007	; 0x59df
24005086:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
2400508a:	f2c2 0001 	movt	r0, #8193	; 0x2001
    sample *= param5[v][string];
2400508e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24005092:	f6c5 7637 	movt	r6, #24375	; 0x5f37
    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
24005096:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
2400509a:	460f      	mov	r7, r1
2400509c:	ed2d 8b06 	vpush	{d8-d10}
    sample = sample + (delayFB[v][string] * param2[v][string]);
240050a0:	ed94 7a00 	vldr	s14, [r4]

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    Lfloat den = InvSqrt(1.0f + a * a);
240050a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
240050a8:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
240050ac:	009c      	lsls	r4, r3, #2
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240050ae:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    sample = sample + (delayFB[v][string] * param2[v][string]);
240050b2:	ee67 7a87 	vmul.f32	s15, s15, s14
240050b6:	ed92 7a00 	vldr	s14, [r2]
240050ba:	f247 5286 	movw	r2, #30086	; 0x7586
240050be:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
240050c2:	eee7 7a00 	vfma.f32	s15, s14, s0
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240050c6:	f6c3 4221 	movt	r2, #15393	; 0x3c21
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240050ca:	eeb0 0a4a 	vmov.f32	s0, s20
240050ce:	ee09 2a90 	vmov	s19, r2
240050d2:	f64d 1227 	movw	r2, #55591	; 0xd927
240050d6:	f6c3 6228 	movt	r2, #15912	; 0x3e28
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240050da:	ee27 7aa7 	vmul.f32	s14, s15, s15
240050de:	ee06 2a90 	vmov	s13, r2
240050e2:	ee08 2a10 	vmov	s16, r2
240050e6:	eee7 6a29 	vfma.f32	s13, s14, s19
240050ea:	ee27 7a87 	vmul.f32	s14, s15, s14
240050ee:	eee7 7a26 	vfma.f32	s15, s14, s13
    Lfloat den = InvSqrt(1.0f + a * a);
240050f2:	eeb0 7a49 	vmov.f32	s14, s18
240050f6:	eea7 7aa7 	vfma.f32	s14, s15, s15
    x = *(Lfloat*)&i; // convert bits back to float
240050fa:	ee17 3a10 	vmov	r3, s14
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240050fe:	ee67 6a28 	vmul.f32	s13, s14, s17
    x = *(Lfloat*)&i; // convert bits back to float
24005102:	eba6 0363 	sub.w	r3, r6, r3, asr #1
24005106:	ee07 3a10 	vmov	s14, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2400510a:	ee67 6a66 	vnmul.f32	s13, s14, s13
    return a * den;
2400510e:	ee67 7a87 	vmul.f32	s15, s15, s14
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24005112:	eea6 0a87 	vfma.f32	s0, s13, s14
    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
24005116:	ee27 0a80 	vmul.f32	s0, s15, s0
2400511a:	f00d fcfb 	bl	24012b14 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
2400511e:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
24005122:	f2c2 0001 	movt	r0, #8193	; 0x2001
24005126:	eb00 0087 	add.w	r0, r0, r7, lsl #2
2400512a:	f00d f911 	bl	24012350 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
2400512e:	f24d 10b8 	movw	r0, #53688	; 0xd1b8
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
24005132:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24005136:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400513a:	4420      	add	r0, r4
2400513c:	f00e fdb4 	bl	24013ca8 <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24005140:	f24d 1098 	movw	r0, #53656	; 0xd198
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24005144:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24005148:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400514c:	4420      	add	r0, r4
2400514e:	f00e fdab 	bl	24013ca8 <tSVF_tick>
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24005152:	ee60 7a00 	vmul.f32	s15, s0, s0
24005156:	eea7 8aa9 	vfma.f32	s16, s15, s19
2400515a:	ee60 7a27 	vmul.f32	s15, s0, s15
2400515e:	eea8 0a27 	vfma.f32	s0, s16, s15
    Lfloat den = InvSqrt(1.0f + a * a);
24005162:	eea0 9a00 	vfma.f32	s18, s0, s0
    x = *(Lfloat*)&i; // convert bits back to float
24005166:	ee19 3a10 	vmov	r3, s18
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2400516a:	ee69 8a28 	vmul.f32	s17, s18, s17
    x = *(Lfloat*)&i; // convert bits back to float
2400516e:	eba6 0363 	sub.w	r3, r6, r3, asr #1
24005172:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24005176:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return a * den;
2400517a:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2400517e:	eea7 aae8 	vfms.f32	s20, s15, s17
    return a * den;
24005182:	ee20 0a0a 	vmul.f32	s0, s0, s20
    sample = fast_tanh5(sample);
    delayFB[v][string] = sample;
24005186:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
2400518a:	ecbd 8b06 	vpop	{d8-d10}
2400518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24005190 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24005190:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24005194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24005198:	f2ce 0200 	movt	r2, #57344	; 0xe000
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400519c:	f2c5 2300 	movt	r3, #20992	; 0x5200
{
240051a0:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240051a2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
{
240051a6:	b082      	sub	sp, #8
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240051a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
240051ac:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240051b0:	681a      	ldr	r2, [r3, #0]
240051b2:	f002 020f 	and.w	r2, r2, #15
240051b6:	2a06      	cmp	r2, #6
240051b8:	d805      	bhi.n	240051c6 <SystemInit+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240051ba:	681a      	ldr	r2, [r3, #0]
240051bc:	f022 020f 	bic.w	r2, r2, #15
240051c0:	f042 0207 	orr.w	r2, r2, #7
240051c4:	601a      	str	r2, [r3, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
240051c6:	f44f 4388 	mov.w	r3, #17408	; 0x4400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
240051ca:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
240051cc:	f64e 527f 	movw	r2, #60799	; 0xed7f

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240051d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  RCC->CR |= RCC_CR_HSION;
240051d4:	f6c5 0302 	movt	r3, #22530	; 0x5802
  RCC->CR &= 0xEAF6ED7FU;
240051d8:	f6ce 22f6 	movt	r2, #60150	; 0xeaf6
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240051dc:	f2c5 2100 	movt	r1, #20992	; 0x5200
  RCC->CR |= RCC_CR_HSION;
240051e0:	6818      	ldr	r0, [r3, #0]
240051e2:	f040 0001 	orr.w	r0, r0, #1
240051e6:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
240051e8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
240051ea:	6818      	ldr	r0, [r3, #0]
240051ec:	4002      	ands	r2, r0
240051ee:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240051f0:	680b      	ldr	r3, [r1, #0]
240051f2:	071b      	lsls	r3, r3, #28
240051f4:	d505      	bpl.n	24005202 <SystemInit+0x72>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240051f6:	680b      	ldr	r3, [r1, #0]
240051f8:	f023 030f 	bic.w	r3, r3, #15
240051fc:	f043 0307 	orr.w	r3, r3, #7
24005200:	600b      	str	r3, [r1, #0]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24005202:	2400      	movs	r4, #0
  RCC->D1CFGR = 0x00000000;
24005204:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  RCC->PLLCKSELR = 0x02020200;
24005208:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
2400520c:	f44f 7120 	mov.w	r1, #640	; 0x280
  RCC->D1CFGR = 0x00000000;
24005210:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005214:	4622      	mov	r2, r4
  RCC->PLL1DIVR = 0x01010280;
24005216:	f2c0 1101 	movt	r1, #257	; 0x101
  RCC->PLLCKSELR = 0x02020200;
2400521a:	f2c0 2002 	movt	r0, #514	; 0x202
  RCC->PLLCFGR = 0x01FF0000;
2400521e:	f2c0 14ff 	movt	r4, #511	; 0x1ff
  RCC->D1CFGR = 0x00000000;
24005222:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24005224:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24005226:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24005228:	6298      	str	r0, [r3, #40]	; 0x28
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400522a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  RCC->PLLCFGR = 0x01FF0000;
2400522e:	62dc      	str	r4, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24005230:	6319      	str	r1, [r3, #48]	; 0x30
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005232:	f6c5 4000 	movt	r0, #23552	; 0x5c00
  RCC->PLL1FRACR = 0x00000000;
24005236:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
24005238:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
2400523a:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
2400523c:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
2400523e:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
24005240:	6819      	ldr	r1, [r3, #0]
24005242:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
24005246:	6019      	str	r1, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005248:	4611      	mov	r1, r2
  RCC->CIER = 0x00000000;
2400524a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400524c:	f6cf 71ff 	movt	r1, #65535	; 0xffff
24005250:	6803      	ldr	r3, [r0, #0]
24005252:	4019      	ands	r1, r3
24005254:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005258:	d206      	bcs.n	24005268 <SystemInit+0xd8>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
2400525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400525e:	2201      	movs	r2, #1
24005260:	f2c5 1300 	movt	r3, #20736	; 0x5100
24005264:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005268:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400526c:	f44f 4080 	mov.w	r0, #16384	; 0x4000

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005270:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24005274:	f243 05d2 	movw	r5, #12498	; 0x30d2
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005278:	f6c5 0302 	movt	r3, #22530	; 0x5802
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400527c:	f2c5 2000 	movt	r0, #20992	; 0x5200
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005280:	f2ce 0100 	movt	r1, #57344	; 0xe000
24005284:	f04f 5410 	mov.w	r4, #603979776	; 0x24000000
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005288:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
2400528c:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
24005290:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
24005294:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24005298:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
2400529a:	9b01      	ldr	r3, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400529c:	6005      	str	r5, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
2400529e:	608c      	str	r4, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240052a0:	b002      	add	sp, #8
240052a2:	bc30      	pop	{r4, r5}
240052a4:	4770      	bx	lr
240052a6:	bf00      	nop

240052a8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240052a8:	f640 1334 	movw	r3, #2356	; 0x934
240052ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
240052b0:	781b      	ldrb	r3, [r3, #0]
240052b2:	b90b      	cbnz	r3, 240052b8 <HAL_InitTick+0x10>
  {
    return HAL_ERROR;
240052b4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
240052b6:	4770      	bx	lr
{
240052b8:	b510      	push	{r4, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240052ba:	f640 02ec 	movw	r2, #2284	; 0x8ec
240052be:	4604      	mov	r4, r0
240052c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240052c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
240052c8:	fbb0 f3f3 	udiv	r3, r0, r3
240052cc:	6810      	ldr	r0, [r2, #0]
240052ce:	fbb0 f0f3 	udiv	r0, r0, r3
240052d2:	f000 f8db 	bl	2400548c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240052d6:	2c0f      	cmp	r4, #15
240052d8:	d800      	bhi.n	240052dc <HAL_InitTick+0x34>
240052da:	b108      	cbz	r0, 240052e0 <HAL_InitTick+0x38>
    return HAL_ERROR;
240052dc:	2001      	movs	r0, #1
}
240052de:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240052e0:	2200      	movs	r2, #0
240052e2:	4621      	mov	r1, r4
240052e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240052e8:	f000 f880 	bl	240053ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
240052ec:	f640 1338 	movw	r3, #2360	; 0x938
240052f0:	2000      	movs	r0, #0
240052f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
240052f6:	601c      	str	r4, [r3, #0]
}
240052f8:	bd10      	pop	{r4, pc}
240052fa:	bf00      	nop

240052fc <HAL_Init>:
{
240052fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240052fe:	2003      	movs	r0, #3
24005300:	f000 f860 	bl	240053c4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005304:	f003 ff44 	bl	24009190 <HAL_RCC_GetSysClockFreq>
24005308:	f44f 4188 	mov.w	r1, #17408	; 0x4400
2400530c:	f24f 5314 	movw	r3, #62740	; 0xf514
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005310:	f640 02f0 	movw	r2, #2288	; 0x8f0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005314:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005318:	f2c2 4301 	movt	r3, #9217	; 0x2401
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400531c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005320:	698c      	ldr	r4, [r1, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005322:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005324:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005328:	f001 010f 	and.w	r1, r1, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400532c:	5d1c      	ldrb	r4, [r3, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400532e:	5c5b      	ldrb	r3, [r3, r1]
  SystemCoreClock = common_system_clock;
24005330:	f640 01ec 	movw	r1, #2284	; 0x8ec
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005334:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005338:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
2400533c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005340:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005342:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24005346:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24005348:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400534a:	6013      	str	r3, [r2, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400534c:	f7ff ffac 	bl	240052a8 <HAL_InitTick>
24005350:	b110      	cbz	r0, 24005358 <HAL_Init+0x5c>
    return HAL_ERROR;
24005352:	2401      	movs	r4, #1
}
24005354:	4620      	mov	r0, r4
24005356:	bd10      	pop	{r4, pc}
24005358:	4604      	mov	r4, r0
  HAL_MspInit();
2400535a:	f7fe ffff 	bl	2400435c <HAL_MspInit>
}
2400535e:	4620      	mov	r0, r4
24005360:	bd10      	pop	{r4, pc}
24005362:	bf00      	nop

24005364 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24005364:	f64d 2330 	movw	r3, #55856	; 0xda30
24005368:	f640 1234 	movw	r2, #2356	; 0x934
2400536c:	f2c2 0301 	movt	r3, #8193	; 0x2001
24005370:	f2c2 0200 	movt	r2, #8192	; 0x2000
24005374:	6819      	ldr	r1, [r3, #0]
24005376:	7812      	ldrb	r2, [r2, #0]
24005378:	440a      	add	r2, r1
2400537a:	601a      	str	r2, [r3, #0]
}
2400537c:	4770      	bx	lr
2400537e:	bf00      	nop

24005380 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24005380:	f64d 2330 	movw	r3, #55856	; 0xda30
24005384:	f2c2 0301 	movt	r3, #8193	; 0x2001
24005388:	6818      	ldr	r0, [r3, #0]
}
2400538a:	4770      	bx	lr

2400538c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2400538c:	b538      	push	{r3, r4, r5, lr}
2400538e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24005390:	f7ff fff6 	bl	24005380 <HAL_GetTick>
24005394:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24005396:	1c63      	adds	r3, r4, #1
24005398:	d005      	beq.n	240053a6 <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
2400539a:	f640 1334 	movw	r3, #2356	; 0x934
2400539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
240053a2:	781b      	ldrb	r3, [r3, #0]
240053a4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240053a6:	f7ff ffeb 	bl	24005380 <HAL_GetTick>
240053aa:	1b43      	subs	r3, r0, r5
240053ac:	42a3      	cmp	r3, r4
240053ae:	d3fa      	bcc.n	240053a6 <HAL_Delay+0x1a>
  {
  }
}
240053b0:	bd38      	pop	{r3, r4, r5, pc}
240053b2:	bf00      	nop

240053b4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
240053b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
240053b8:	f6c5 4300 	movt	r3, #23552	; 0x5c00
240053bc:	6818      	ldr	r0, [r3, #0]
}
240053be:	0c00      	lsrs	r0, r0, #16
240053c0:	4770      	bx	lr
240053c2:	bf00      	nop

240053c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240053c4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240053c8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240053cc:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
240053ce:	2300      	movs	r3, #0
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240053d0:	f2ce 0200 	movt	r2, #57344	; 0xe000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240053d4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
240053d8:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240053dc:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240053de:	ea01 010c 	and.w	r1, r1, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
240053e2:	4308      	orrs	r0, r1
  reg_value  =  (reg_value                                   |
240053e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
240053e6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
240053e8:	4770      	bx	lr
240053ea:	bf00      	nop

240053ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
240053ec:	f44f 436d 	mov.w	r3, #60672	; 0xed00
240053f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240053f4:	b500      	push	{lr}
240053f6:	68db      	ldr	r3, [r3, #12]
240053f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240053fc:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005400:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24005404:	f1be 0f04 	cmp.w	lr, #4
24005408:	bf28      	it	cs
2400540a:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400540e:	f1bc 0f06 	cmp.w	ip, #6
24005412:	d91d      	bls.n	24005450 <HAL_NVIC_SetPriority+0x64>
24005414:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24005416:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400541a:	fa0c fc03 	lsl.w	ip, ip, r3
2400541e:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24005422:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24005426:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24005428:	fa0c fc0e 	lsl.w	ip, ip, lr
2400542c:	ea21 010c 	bic.w	r1, r1, ip
24005430:	fa01 f103 	lsl.w	r1, r1, r3
24005434:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24005438:	db0d      	blt.n	24005456 <HAL_NVIC_SetPriority+0x6a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400543a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
2400543e:	0109      	lsls	r1, r1, #4
24005440:	f2ce 0300 	movt	r3, #57344	; 0xe000
24005444:	b2c9      	uxtb	r1, r1
24005446:	4403      	add	r3, r0
24005448:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
2400544c:	f85d fb04 	ldr.w	pc, [sp], #4
24005450:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005452:	4613      	mov	r3, r2
24005454:	e7e5      	b.n	24005422 <HAL_NVIC_SetPriority+0x36>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005456:	f64e 43fc 	movw	r3, #60668	; 0xecfc
2400545a:	f000 000f 	and.w	r0, r0, #15
2400545e:	0109      	lsls	r1, r1, #4
24005460:	f2ce 0300 	movt	r3, #57344	; 0xe000
24005464:	b2c9      	uxtb	r1, r1
24005466:	4403      	add	r3, r0
24005468:	7619      	strb	r1, [r3, #24]
2400546a:	f85d fb04 	ldr.w	pc, [sp], #4
2400546e:	bf00      	nop

24005470 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24005470:	2800      	cmp	r0, #0
24005472:	db0a      	blt.n	2400548a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24005474:	2301      	movs	r3, #1
24005476:	f000 011f 	and.w	r1, r0, #31
2400547a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
2400547e:	0940      	lsrs	r0, r0, #5
24005480:	408b      	lsls	r3, r1
24005482:	f2ce 0200 	movt	r2, #57344	; 0xe000
24005486:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
2400548a:	4770      	bx	lr

2400548c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2400548c:	3801      	subs	r0, #1
2400548e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
24005492:	d213      	bcs.n	240054bc <HAL_SYSTICK_Config+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005494:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24005498:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2400549c:	2200      	movs	r2, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400549e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
240054a2:	f2ce 0100 	movt	r1, #57344	; 0xe000
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
240054a6:	b410      	push	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240054a8:	2407      	movs	r4, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240054aa:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240054ac:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240054b0:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240054b2:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240054b4:	611c      	str	r4, [r3, #16]
   return SysTick_Config(TicksNumb);
}
240054b6:	f85d 4b04 	ldr.w	r4, [sp], #4
240054ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
240054bc:	2001      	movs	r0, #1
240054be:	4770      	bx	lr

240054c0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
240054c0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240054c4:	f44f 436d 	mov.w	r3, #60672	; 0xed00

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
240054c8:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240054ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
240054ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240054d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240054d4:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
240054d6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
240054da:	4770      	bx	lr

240054dc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
240054dc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
240054e0:	f040 0001 	orr.w	r0, r0, #1
240054e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
240054e8:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
240054ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240054ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240054f2:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
240054f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240054f8:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
240054fc:	4770      	bx	lr
240054fe:	bf00      	nop

24005500 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24005500:	f44f 426d 	mov.w	r2, #60672	; 0xed00
24005504:	7843      	ldrb	r3, [r0, #1]
24005506:	f2ce 0200 	movt	r2, #57344	; 0xe000
2400550a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
2400550e:	7803      	ldrb	r3, [r0, #0]
24005510:	b313      	cbz	r3, 24005558 <HAL_MPU_ConfigRegion+0x58>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24005512:	6843      	ldr	r3, [r0, #4]
24005514:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24005518:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400551a:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
2400551e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24005520:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005522:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24005526:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400552a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
2400552c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400552e:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24005532:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005536:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
2400553a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400553c:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24005540:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24005548:	7a01      	ldrb	r1, [r0, #8]
2400554a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400554e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005552:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24005556:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24005558:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
2400555c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
24005560:	4770      	bx	lr
24005562:	bf00      	nop

24005564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24005564:	b500      	push	{lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005566:	2310      	movs	r3, #16
24005568:	f04f 0e28 	mov.w	lr, #40	; 0x28
2400556c:	6802      	ldr	r2, [r0, #0]
2400556e:	f04f 0c40 	mov.w	ip, #64	; 0x40
24005572:	f2c4 0302 	movt	r3, #16386	; 0x4002
24005576:	f2c4 0e02 	movt	lr, #16386	; 0x4002
2400557a:	f2c4 0c02 	movt	ip, #16386	; 0x4002
{
2400557e:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005580:	4572      	cmp	r2, lr
24005582:	bf18      	it	ne
24005584:	429a      	cmpne	r2, r3
24005586:	f04f 0058 	mov.w	r0, #88	; 0x58
2400558a:	bf0c      	ite	eq
2400558c:	2301      	moveq	r3, #1
2400558e:	2300      	movne	r3, #0
24005590:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005594:	4562      	cmp	r2, ip
24005596:	bf08      	it	eq
24005598:	f043 0301 	orreq.w	r3, r3, #1
2400559c:	f04f 0c70 	mov.w	ip, #112	; 0x70
240055a0:	4282      	cmp	r2, r0
240055a2:	bf08      	it	eq
240055a4:	f043 0301 	orreq.w	r3, r3, #1
240055a8:	f2c4 0c02 	movt	ip, #16386	; 0x4002
240055ac:	2088      	movs	r0, #136	; 0x88
240055ae:	4562      	cmp	r2, ip
240055b0:	bf08      	it	eq
240055b2:	f043 0301 	orreq.w	r3, r3, #1
240055b6:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
240055ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
240055be:	f2c4 0c02 	movt	ip, #16386	; 0x4002
240055c2:	4282      	cmp	r2, r0
240055c4:	bf08      	it	eq
240055c6:	f043 0301 	orreq.w	r3, r3, #1
240055ca:	20b8      	movs	r0, #184	; 0xb8
240055cc:	4562      	cmp	r2, ip
240055ce:	bf08      	it	eq
240055d0:	f043 0301 	orreq.w	r3, r3, #1
240055d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240055d8:	f44f 6c82 	mov.w	ip, #1040	; 0x410
240055dc:	4282      	cmp	r2, r0
240055de:	bf08      	it	eq
240055e0:	f043 0301 	orreq.w	r3, r3, #1
240055e4:	f44f 6085 	mov.w	r0, #1064	; 0x428
240055e8:	f2c4 0c02 	movt	ip, #16386	; 0x4002
240055ec:	f2c4 0002 	movt	r0, #16386	; 0x4002
240055f0:	4562      	cmp	r2, ip
240055f2:	bf08      	it	eq
240055f4:	f043 0301 	orreq.w	r3, r3, #1
240055f8:	f44f 6c88 	mov.w	ip, #1088	; 0x440
240055fc:	4282      	cmp	r2, r0
240055fe:	bf08      	it	eq
24005600:	f043 0301 	orreq.w	r3, r3, #1
24005604:	f2c4 0c02 	movt	ip, #16386	; 0x4002
24005608:	f44f 608b 	mov.w	r0, #1112	; 0x458
2400560c:	4562      	cmp	r2, ip
2400560e:	bf08      	it	eq
24005610:	f043 0301 	orreq.w	r3, r3, #1
24005614:	f44f 6c8e 	mov.w	ip, #1136	; 0x470
24005618:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400561c:	f2c4 0c02 	movt	ip, #16386	; 0x4002
24005620:	4282      	cmp	r2, r0
24005622:	bf08      	it	eq
24005624:	f043 0301 	orreq.w	r3, r3, #1
24005628:	f44f 6091 	mov.w	r0, #1160	; 0x488
2400562c:	4562      	cmp	r2, ip
2400562e:	bf08      	it	eq
24005630:	f043 0301 	orreq.w	r3, r3, #1
24005634:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005638:	4282      	cmp	r2, r0
2400563a:	bf08      	it	eq
2400563c:	f043 0301 	orreq.w	r3, r3, #1
24005640:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
24005644:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005648:	4282      	cmp	r2, r0
2400564a:	bf08      	it	eq
2400564c:	f043 0301 	orreq.w	r3, r3, #1
24005650:	b92b      	cbnz	r3, 2400565e <DMA_CalcBaseAndBitshift+0xfa>
24005652:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
24005656:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400565a:	429a      	cmp	r2, r3
2400565c:	d11c      	bne.n	24005698 <DMA_CalcBaseAndBitshift+0x134>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400565e:	b2d3      	uxtb	r3, r2
24005660:	f64a 20ab 	movw	r0, #43691	; 0xaaab

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005664:	f24f 5c24 	movw	ip, #62756	; 0xf524
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005668:	3b10      	subs	r3, #16
2400566a:	f6ca 20aa 	movt	r0, #43690	; 0xaaaa
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400566e:	f2c2 4c01 	movt	ip, #9217	; 0x2401
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005672:	fba0 e003 	umull	lr, r0, r0, r3

    if (stream_number > 3U)
24005676:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005678:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400567c:	f81c 0000 	ldrb.w	r0, [ip, r0]
24005680:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24005682:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
24005686:	f6cf 70ff 	movt	r0, #65535	; 0xffff
2400568a:	ea00 0002 	and.w	r0, r0, r2
2400568e:	bf88      	it	hi
24005690:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24005692:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24005694:	f85d fb04 	ldr.w	pc, [sp], #4
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24005698:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
2400569c:	e7f9      	b.n	24005692 <DMA_CalcBaseAndBitshift+0x12e>
2400569e:	bf00      	nop

240056a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240056a0:	f245 4208 	movw	r2, #21512	; 0x5408
240056a4:	f245 411c 	movw	r1, #21532	; 0x541c
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240056a8:	6803      	ldr	r3, [r0, #0]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240056aa:	f245 4c30 	movw	ip, #21552	; 0x5430
240056ae:	f6c5 0202 	movt	r2, #22530	; 0x5802
240056b2:	f6c5 0102 	movt	r1, #22530	; 0x5802
240056b6:	f6c5 0c02 	movt	ip, #22530	; 0x5802
240056ba:	428b      	cmp	r3, r1
240056bc:	bf18      	it	ne
240056be:	4293      	cmpne	r3, r2
240056c0:	f245 4144 	movw	r1, #21572	; 0x5444
240056c4:	bf0c      	ite	eq
240056c6:	2201      	moveq	r2, #1
240056c8:	2200      	movne	r2, #0
240056ca:	f6c5 0102 	movt	r1, #22530	; 0x5802
240056ce:	4563      	cmp	r3, ip
240056d0:	bf08      	it	eq
240056d2:	f042 0201 	orreq.w	r2, r2, #1
240056d6:	f245 4c58 	movw	ip, #21592	; 0x5458
240056da:	428b      	cmp	r3, r1
240056dc:	bf08      	it	eq
240056de:	f042 0201 	orreq.w	r2, r2, #1
240056e2:	f6c5 0c02 	movt	ip, #22530	; 0x5802
240056e6:	f245 416c 	movw	r1, #21612	; 0x546c
240056ea:	4563      	cmp	r3, ip
240056ec:	bf08      	it	eq
240056ee:	f042 0201 	orreq.w	r2, r2, #1
240056f2:	f6c5 0102 	movt	r1, #22530	; 0x5802
240056f6:	428b      	cmp	r3, r1
240056f8:	bf08      	it	eq
240056fa:	f042 0201 	orreq.w	r2, r2, #1
240056fe:	f44f 41a9 	mov.w	r1, #21632	; 0x5480
24005702:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005706:	428b      	cmp	r3, r1
24005708:	bf08      	it	eq
2400570a:	f042 0201 	orreq.w	r2, r2, #1
{
2400570e:	b410      	push	{r4}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005710:	b92a      	cbnz	r2, 2400571e <DMA_CalcDMAMUXChannelBaseAndMask+0x7e>
24005712:	f245 4294 	movw	r2, #21652	; 0x5494
24005716:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400571a:	4293      	cmp	r3, r2
2400571c:	d11d      	bne.n	2400575a <DMA_CalcDMAMUXChannelBaseAndMask+0xba>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400571e:	b2db      	uxtb	r3, r3
24005720:	f64c 41cd 	movw	r1, #52429	; 0xcccd
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005724:	f44f 4216 	mov.w	r2, #38400	; 0x9600
24005728:	f44f 44b1 	mov.w	r4, #22656	; 0x5880
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400572c:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
24005730:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005732:	f2c1 6200 	movt	r2, #5632	; 0x1600
24005736:	f6c5 0402 	movt	r4, #22530	; 0x5802
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400573a:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400573e:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005740:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005744:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005748:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400574a:	fa01 f303 	lsl.w	r3, r1, r3
2400574e:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24005750:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24005754:	f85d 4b04 	ldr.w	r4, [sp], #4
24005758:	4770      	bx	lr
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2400575a:	f64f 32f0 	movw	r2, #64496	; 0xfbf0
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400575e:	b2d9      	uxtb	r1, r3
24005760:	f64a 24ab 	movw	r4, #43691	; 0xaaab
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005764:	f6cb 72fd 	movt	r2, #49149	; 0xbffd
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005768:	3910      	subs	r1, #16
2400576a:	f6ca 24aa 	movt	r4, #43690	; 0xaaaa
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2400576e:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005770:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005774:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005776:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2400577a:	d800      	bhi.n	2400577e <DMA_CalcDMAMUXChannelBaseAndMask+0xde>
      stream_number += 8U;
2400577c:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2400577e:	f44f 4202 	mov.w	r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005782:	f001 041f 	and.w	r4, r1, #31
24005786:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005788:	f2c1 0200 	movt	r2, #4096	; 0x1000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400578c:	40a3      	lsls	r3, r4
2400578e:	f44f 6408 	mov.w	r4, #2176	; 0x880
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005792:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005794:	f2c4 0402 	movt	r4, #16386	; 0x4002
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005798:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400579a:	e7d8      	b.n	2400574e <DMA_CalcDMAMUXChannelBaseAndMask+0xae>

2400579c <HAL_DMA_Init>:
{
2400579c:	b538      	push	{r3, r4, r5, lr}
2400579e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240057a0:	f7ff fdee 	bl	24005380 <HAL_GetTick>
  if(hdma == NULL)
240057a4:	2c00      	cmp	r4, #0
240057a6:	f000 81c0 	beq.w	24005b2a <HAL_DMA_Init+0x38e>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240057aa:	2310      	movs	r3, #16
240057ac:	6822      	ldr	r2, [r4, #0]
240057ae:	4605      	mov	r5, r0
240057b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
240057b4:	429a      	cmp	r2, r3
240057b6:	d06d      	beq.n	24005894 <HAL_DMA_Init+0xf8>
240057b8:	2328      	movs	r3, #40	; 0x28
240057ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
240057be:	429a      	cmp	r2, r3
240057c0:	d068      	beq.n	24005894 <HAL_DMA_Init+0xf8>
240057c2:	2358      	movs	r3, #88	; 0x58
240057c4:	2140      	movs	r1, #64	; 0x40
240057c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
240057ca:	f2c4 0102 	movt	r1, #16386	; 0x4002
240057ce:	428a      	cmp	r2, r1
240057d0:	bf18      	it	ne
240057d2:	429a      	cmpne	r2, r3
240057d4:	f04f 0170 	mov.w	r1, #112	; 0x70
240057d8:	bf0c      	ite	eq
240057da:	2301      	moveq	r3, #1
240057dc:	2300      	movne	r3, #0
240057de:	f2c4 0102 	movt	r1, #16386	; 0x4002
240057e2:	428a      	cmp	r2, r1
240057e4:	bf08      	it	eq
240057e6:	f043 0301 	orreq.w	r3, r3, #1
240057ea:	2188      	movs	r1, #136	; 0x88
240057ec:	f2c4 0102 	movt	r1, #16386	; 0x4002
240057f0:	428a      	cmp	r2, r1
240057f2:	bf08      	it	eq
240057f4:	f043 0301 	orreq.w	r3, r3, #1
240057f8:	21a0      	movs	r1, #160	; 0xa0
240057fa:	f2c4 0102 	movt	r1, #16386	; 0x4002
240057fe:	428a      	cmp	r2, r1
24005800:	bf08      	it	eq
24005802:	f043 0301 	orreq.w	r3, r3, #1
24005806:	21b8      	movs	r1, #184	; 0xb8
24005808:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400580c:	428a      	cmp	r2, r1
2400580e:	bf08      	it	eq
24005810:	f043 0301 	orreq.w	r3, r3, #1
24005814:	f44f 6182 	mov.w	r1, #1040	; 0x410
24005818:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400581c:	428a      	cmp	r2, r1
2400581e:	bf08      	it	eq
24005820:	f043 0301 	orreq.w	r3, r3, #1
24005824:	f44f 6185 	mov.w	r1, #1064	; 0x428
24005828:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400582c:	428a      	cmp	r2, r1
2400582e:	bf08      	it	eq
24005830:	f043 0301 	orreq.w	r3, r3, #1
24005834:	f44f 6188 	mov.w	r1, #1088	; 0x440
24005838:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400583c:	428a      	cmp	r2, r1
2400583e:	bf08      	it	eq
24005840:	f043 0301 	orreq.w	r3, r3, #1
24005844:	f44f 618b 	mov.w	r1, #1112	; 0x458
24005848:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400584c:	428a      	cmp	r2, r1
2400584e:	bf08      	it	eq
24005850:	f043 0301 	orreq.w	r3, r3, #1
24005854:	f44f 618e 	mov.w	r1, #1136	; 0x470
24005858:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400585c:	428a      	cmp	r2, r1
2400585e:	bf08      	it	eq
24005860:	f043 0301 	orreq.w	r3, r3, #1
24005864:	f44f 6191 	mov.w	r1, #1160	; 0x488
24005868:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400586c:	428a      	cmp	r2, r1
2400586e:	bf08      	it	eq
24005870:	f043 0301 	orreq.w	r3, r3, #1
24005874:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
24005878:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400587c:	428a      	cmp	r2, r1
2400587e:	bf08      	it	eq
24005880:	f043 0301 	orreq.w	r3, r3, #1
24005884:	b933      	cbnz	r3, 24005894 <HAL_DMA_Init+0xf8>
24005886:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
2400588a:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400588e:	429a      	cmp	r2, r3
24005890:	f040 81d5 	bne.w	24005c3e <HAL_DMA_Init+0x4a2>
    hdma->State = HAL_DMA_STATE_BUSY;
24005894:	2302      	movs	r3, #2
24005896:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
2400589a:	2300      	movs	r3, #0
2400589c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
240058a0:	6813      	ldr	r3, [r2, #0]
240058a2:	f023 0301 	bic.w	r3, r3, #1
240058a6:	6013      	str	r3, [r2, #0]
240058a8:	e005      	b.n	240058b6 <HAL_DMA_Init+0x11a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240058aa:	f7ff fd69 	bl	24005380 <HAL_GetTick>
240058ae:	1b43      	subs	r3, r0, r5
240058b0:	2b05      	cmp	r3, #5
240058b2:	f200 812b 	bhi.w	24005b0c <HAL_DMA_Init+0x370>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240058b6:	6823      	ldr	r3, [r4, #0]
240058b8:	681a      	ldr	r2, [r3, #0]
240058ba:	07d0      	lsls	r0, r2, #31
240058bc:	d4f5      	bmi.n	240058aa <HAL_DMA_Init+0x10e>
    registerValue |=  hdma->Init.Direction           |
240058be:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240058c2:	6920      	ldr	r0, [r4, #16]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
240058c4:	f248 013f 	movw	r1, #32831	; 0x803f
    registerValue |=  hdma->Init.Direction           |
240058c8:	432a      	orrs	r2, r5
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
240058ca:	681d      	ldr	r5, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
240058cc:	f6cf 6110 	movt	r1, #65040	; 0xfe10
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240058d0:	4302      	orrs	r2, r0
240058d2:	6960      	ldr	r0, [r4, #20]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
240058d4:	4029      	ands	r1, r5
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240058d6:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240058d8:	69a0      	ldr	r0, [r4, #24]
240058da:	4302      	orrs	r2, r0
240058dc:	69e0      	ldr	r0, [r4, #28]
240058de:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
240058e0:	6a20      	ldr	r0, [r4, #32]
240058e2:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240058e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
240058e6:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
240058e8:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240058ec:	d103      	bne.n	240058f6 <HAL_DMA_Init+0x15a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
240058ee:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
240058f2:	4301      	orrs	r1, r0
240058f4:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
240058f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
240058fa:	2100      	movs	r1, #0
240058fc:	f6c5 4000 	movt	r0, #23552	; 0x5c00
24005900:	f6cf 71ff 	movt	r1, #65535	; 0xffff
24005904:	6800      	ldr	r0, [r0, #0]
24005906:	4001      	ands	r1, r0
24005908:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400590c:	d30a      	bcc.n	24005924 <HAL_DMA_Init+0x188>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2400590e:	6861      	ldr	r1, [r4, #4]
24005910:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24005914:	281f      	cmp	r0, #31
24005916:	f240 8100 	bls.w	24005b1a <HAL_DMA_Init+0x37e>
2400591a:	394f      	subs	r1, #79	; 0x4f
2400591c:	2903      	cmp	r1, #3
2400591e:	d801      	bhi.n	24005924 <HAL_DMA_Init+0x188>
        registerValue |= DMA_SxCR_TRBUFF;
24005920:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24005924:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24005926:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24005928:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2400592a:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400592c:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2400592e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24005932:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005936:	d10e      	bne.n	24005956 <HAL_DMA_Init+0x1ba>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24005938:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
2400593c:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2400593e:	b150      	cbz	r0, 24005956 <HAL_DMA_Init+0x1ba>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24005940:	69a5      	ldr	r5, [r4, #24]
24005942:	2d00      	cmp	r5, #0
24005944:	f040 8156 	bne.w	24005bf4 <HAL_DMA_Init+0x458>
    switch (hdma->Init.FIFOThreshold)
24005948:	2a01      	cmp	r2, #1
2400594a:	f000 8173 	beq.w	24005c34 <HAL_DMA_Init+0x498>
2400594e:	f032 0202 	bics.w	r2, r2, #2
24005952:	f000 8157 	beq.w	24005c04 <HAL_DMA_Init+0x468>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24005956:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005958:	4620      	mov	r0, r4
2400595a:	f7ff fe03 	bl	24005564 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400595e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005960:	233f      	movs	r3, #63	; 0x3f
24005962:	f002 021f 	and.w	r2, r2, #31
24005966:	4093      	lsls	r3, r2
24005968:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400596a:	2310      	movs	r3, #16
2400596c:	2028      	movs	r0, #40	; 0x28
2400596e:	6822      	ldr	r2, [r4, #0]
24005970:	2140      	movs	r1, #64	; 0x40
24005972:	f2c4 0302 	movt	r3, #16386	; 0x4002
24005976:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400597a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400597e:	4282      	cmp	r2, r0
24005980:	bf18      	it	ne
24005982:	429a      	cmpne	r2, r3
24005984:	f04f 0058 	mov.w	r0, #88	; 0x58
24005988:	bf0c      	ite	eq
2400598a:	2301      	moveq	r3, #1
2400598c:	2300      	movne	r3, #0
2400598e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005992:	428a      	cmp	r2, r1
24005994:	bf08      	it	eq
24005996:	f043 0301 	orreq.w	r3, r3, #1
2400599a:	2170      	movs	r1, #112	; 0x70
2400599c:	4282      	cmp	r2, r0
2400599e:	bf08      	it	eq
240059a0:	f043 0301 	orreq.w	r3, r3, #1
240059a4:	f2c4 0102 	movt	r1, #16386	; 0x4002
240059a8:	2088      	movs	r0, #136	; 0x88
240059aa:	428a      	cmp	r2, r1
240059ac:	bf08      	it	eq
240059ae:	f043 0301 	orreq.w	r3, r3, #1
240059b2:	21a0      	movs	r1, #160	; 0xa0
240059b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240059b8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240059bc:	4282      	cmp	r2, r0
240059be:	bf08      	it	eq
240059c0:	f043 0301 	orreq.w	r3, r3, #1
240059c4:	20b8      	movs	r0, #184	; 0xb8
240059c6:	428a      	cmp	r2, r1
240059c8:	bf08      	it	eq
240059ca:	f043 0301 	orreq.w	r3, r3, #1
240059ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
240059d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
240059d6:	4282      	cmp	r2, r0
240059d8:	bf08      	it	eq
240059da:	f043 0301 	orreq.w	r3, r3, #1
240059de:	f44f 6085 	mov.w	r0, #1064	; 0x428
240059e2:	f2c4 0102 	movt	r1, #16386	; 0x4002
240059e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
240059ea:	428a      	cmp	r2, r1
240059ec:	bf08      	it	eq
240059ee:	f043 0301 	orreq.w	r3, r3, #1
240059f2:	f44f 6188 	mov.w	r1, #1088	; 0x440
240059f6:	4282      	cmp	r2, r0
240059f8:	bf08      	it	eq
240059fa:	f043 0301 	orreq.w	r3, r3, #1
240059fe:	f2c4 0102 	movt	r1, #16386	; 0x4002
24005a02:	f44f 608b 	mov.w	r0, #1112	; 0x458
24005a06:	428a      	cmp	r2, r1
24005a08:	bf08      	it	eq
24005a0a:	f043 0301 	orreq.w	r3, r3, #1
24005a0e:	f44f 618e 	mov.w	r1, #1136	; 0x470
24005a12:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005a16:	f2c4 0102 	movt	r1, #16386	; 0x4002
24005a1a:	4282      	cmp	r2, r0
24005a1c:	bf08      	it	eq
24005a1e:	f043 0301 	orreq.w	r3, r3, #1
24005a22:	f44f 6091 	mov.w	r0, #1160	; 0x488
24005a26:	428a      	cmp	r2, r1
24005a28:	bf08      	it	eq
24005a2a:	f043 0301 	orreq.w	r3, r3, #1
24005a2e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005a32:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
24005a36:	4282      	cmp	r2, r0
24005a38:	bf08      	it	eq
24005a3a:	f043 0301 	orreq.w	r3, r3, #1
24005a3e:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
24005a42:	f2c4 0102 	movt	r1, #16386	; 0x4002
24005a46:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005a4a:	428a      	cmp	r2, r1
24005a4c:	bf08      	it	eq
24005a4e:	f043 0301 	orreq.w	r3, r3, #1
24005a52:	f245 4108 	movw	r1, #21512	; 0x5408
24005a56:	4282      	cmp	r2, r0
24005a58:	bf08      	it	eq
24005a5a:	f043 0301 	orreq.w	r3, r3, #1
24005a5e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005a62:	f245 401c 	movw	r0, #21532	; 0x541c
24005a66:	428a      	cmp	r2, r1
24005a68:	bf08      	it	eq
24005a6a:	f043 0301 	orreq.w	r3, r3, #1
24005a6e:	f245 4130 	movw	r1, #21552	; 0x5430
24005a72:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005a76:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005a7a:	4282      	cmp	r2, r0
24005a7c:	bf08      	it	eq
24005a7e:	f043 0301 	orreq.w	r3, r3, #1
24005a82:	f245 4044 	movw	r0, #21572	; 0x5444
24005a86:	428a      	cmp	r2, r1
24005a88:	bf08      	it	eq
24005a8a:	f043 0301 	orreq.w	r3, r3, #1
24005a8e:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005a92:	f245 4158 	movw	r1, #21592	; 0x5458
24005a96:	4282      	cmp	r2, r0
24005a98:	bf08      	it	eq
24005a9a:	f043 0301 	orreq.w	r3, r3, #1
24005a9e:	f245 406c 	movw	r0, #21612	; 0x546c
24005aa2:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005aa6:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005aaa:	428a      	cmp	r2, r1
24005aac:	bf08      	it	eq
24005aae:	f043 0301 	orreq.w	r3, r3, #1
24005ab2:	f44f 41a9 	mov.w	r1, #21632	; 0x5480
24005ab6:	4282      	cmp	r2, r0
24005ab8:	bf08      	it	eq
24005aba:	f043 0301 	orreq.w	r3, r3, #1
24005abe:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005ac2:	428a      	cmp	r2, r1
24005ac4:	bf08      	it	eq
24005ac6:	f043 0301 	orreq.w	r3, r3, #1
24005aca:	b92b      	cbnz	r3, 24005ad8 <HAL_DMA_Init+0x33c>
24005acc:	f245 4394 	movw	r3, #21652	; 0x5494
24005ad0:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005ad4:	429a      	cmp	r2, r3
24005ad6:	d113      	bne.n	24005b00 <HAL_DMA_Init+0x364>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24005ad8:	4620      	mov	r0, r4
24005ada:	f7ff fde1 	bl	240056a0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24005ade:	68a3      	ldr	r3, [r4, #8]
24005ae0:	2b80      	cmp	r3, #128	; 0x80
24005ae2:	d024      	beq.n	24005b2e <HAL_DMA_Init+0x392>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24005ae4:	7922      	ldrb	r2, [r4, #4]
24005ae6:	6e23      	ldr	r3, [r4, #96]	; 0x60
24005ae8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005aea:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24005aee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24005af0:	6861      	ldr	r1, [r4, #4]
24005af2:	1e4a      	subs	r2, r1, #1
24005af4:	2a07      	cmp	r2, #7
24005af6:	d91e      	bls.n	24005b36 <HAL_DMA_Init+0x39a>
      hdma->DMAmuxRequestGen = 0U;
24005af8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24005afa:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24005afe:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005b00:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24005b02:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005b04:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24005b06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005b0a:	bd38      	pop	{r3, r4, r5, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005b0c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24005b0e:	2303      	movs	r3, #3
        return HAL_ERROR;
24005b10:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005b12:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24005b14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005b18:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24005b1a:	213f      	movs	r1, #63	; 0x3f
24005b1c:	f2cc 31c0 	movt	r1, #50112	; 0xc3c0
24005b20:	40c1      	lsrs	r1, r0
24005b22:	07c9      	lsls	r1, r1, #31
24005b24:	f57f aefe 	bpl.w	24005924 <HAL_DMA_Init+0x188>
24005b28:	e6fa      	b.n	24005920 <HAL_DMA_Init+0x184>
    return HAL_ERROR;
24005b2a:	2001      	movs	r0, #1
}
24005b2c:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24005b2e:	2300      	movs	r3, #0
24005b30:	461a      	mov	r2, r3
24005b32:	6063      	str	r3, [r4, #4]
24005b34:	e7d7      	b.n	24005ae6 <HAL_DMA_Init+0x34a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005b36:	f245 4308 	movw	r3, #21512	; 0x5408
24005b3a:	f245 451c 	movw	r5, #21532	; 0x541c
24005b3e:	6820      	ldr	r0, [r4, #0]
24005b40:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005b44:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b48:	42a8      	cmp	r0, r5
24005b4a:	bf18      	it	ne
24005b4c:	4298      	cmpne	r0, r3
24005b4e:	f245 4530 	movw	r5, #21552	; 0x5430
24005b52:	bf0c      	ite	eq
24005b54:	2301      	moveq	r3, #1
24005b56:	2300      	movne	r3, #0
24005b58:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b5c:	42a8      	cmp	r0, r5
24005b5e:	bf08      	it	eq
24005b60:	f043 0301 	orreq.w	r3, r3, #1
24005b64:	f245 4544 	movw	r5, #21572	; 0x5444
24005b68:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b6c:	42a8      	cmp	r0, r5
24005b6e:	bf08      	it	eq
24005b70:	f043 0301 	orreq.w	r3, r3, #1
24005b74:	f245 4558 	movw	r5, #21592	; 0x5458
24005b78:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b7c:	42a8      	cmp	r0, r5
24005b7e:	bf08      	it	eq
24005b80:	f043 0301 	orreq.w	r3, r3, #1
24005b84:	f245 456c 	movw	r5, #21612	; 0x546c
24005b88:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b8c:	42a8      	cmp	r0, r5
24005b8e:	bf08      	it	eq
24005b90:	f043 0301 	orreq.w	r3, r3, #1
24005b94:	f44f 45a9 	mov.w	r5, #21632	; 0x5480
24005b98:	f6c5 0502 	movt	r5, #22530	; 0x5802
24005b9c:	42a8      	cmp	r0, r5
24005b9e:	bf08      	it	eq
24005ba0:	f043 0301 	orreq.w	r3, r3, #1
24005ba4:	b983      	cbnz	r3, 24005bc8 <HAL_DMA_Init+0x42c>
24005ba6:	f245 4394 	movw	r3, #21652	; 0x5494
24005baa:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005bae:	4298      	cmp	r0, r3
24005bb0:	d00a      	beq.n	24005bc8 <HAL_DMA_Init+0x42c>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005bb2:	f248 233f 	movw	r3, #33343	; 0x823f

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005bb6:	f44f 6014 	mov.w	r0, #2368	; 0x940
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005bba:	f2c1 0300 	movt	r3, #4096	; 0x1000
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005bbe:	f2c4 0002 	movt	r0, #16386	; 0x4002
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005bc2:	440b      	add	r3, r1
24005bc4:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005bc6:	e009      	b.n	24005bdc <HAL_DMA_Init+0x440>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24005bc8:	f249 633f 	movw	r3, #38463	; 0x963f
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24005bcc:	f645 1040 	movw	r0, #22848	; 0x5940
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24005bd0:	f2c1 6300 	movt	r3, #5632	; 0x1600
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24005bd4:	f6c5 0002 	movt	r0, #22530	; 0x5802
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24005bd8:	440b      	add	r3, r1
24005bda:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24005bdc:	2101      	movs	r1, #1
24005bde:	fa01 f202 	lsl.w	r2, r1, r2
      hdma->DMAmuxRequestGen->RGCR = 0U;
24005be2:	2100      	movs	r1, #0
24005be4:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24005be8:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24005bea:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005bec:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24005bf0:	605a      	str	r2, [r3, #4]
24005bf2:	e785      	b.n	24005b00 <HAL_DMA_Init+0x364>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24005bf4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24005bf8:	d00e      	beq.n	24005c18 <HAL_DMA_Init+0x47c>
    switch (hdma->Init.FIFOThreshold)
24005bfa:	2a02      	cmp	r2, #2
24005bfc:	d905      	bls.n	24005c0a <HAL_DMA_Init+0x46e>
24005bfe:	2a03      	cmp	r2, #3
24005c00:	f47f aea9 	bne.w	24005956 <HAL_DMA_Init+0x1ba>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24005c04:	01c2      	lsls	r2, r0, #7
24005c06:	f57f aea6 	bpl.w	24005956 <HAL_DMA_Init+0x1ba>
          hdma->State = HAL_DMA_STATE_READY;
24005c0a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005c0c:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24005c0e:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005c10:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24005c12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005c16:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24005c18:	2a03      	cmp	r2, #3
24005c1a:	f63f ae9c 	bhi.w	24005956 <HAL_DMA_Init+0x1ba>
24005c1e:	a501      	add	r5, pc, #4	; (adr r5, 24005c24 <HAL_DMA_Init+0x488>)
24005c20:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24005c24:	24005c0b 	.word	0x24005c0b
24005c28:	24005c05 	.word	0x24005c05
24005c2c:	24005c0b 	.word	0x24005c0b
24005c30:	24005c35 	.word	0x24005c35
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24005c34:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24005c38:	f47f ae8d 	bne.w	24005956 <HAL_DMA_Init+0x1ba>
24005c3c:	e7e5      	b.n	24005c0a <HAL_DMA_Init+0x46e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24005c3e:	f245 4308 	movw	r3, #21512	; 0x5408
24005c42:	f245 401c 	movw	r0, #21532	; 0x541c
24005c46:	f245 4130 	movw	r1, #21552	; 0x5430
24005c4a:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005c4e:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005c52:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005c56:	4282      	cmp	r2, r0
24005c58:	bf18      	it	ne
24005c5a:	429a      	cmpne	r2, r3
24005c5c:	f245 4044 	movw	r0, #21572	; 0x5444
24005c60:	bf0c      	ite	eq
24005c62:	2301      	moveq	r3, #1
24005c64:	2300      	movne	r3, #0
24005c66:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005c6a:	428a      	cmp	r2, r1
24005c6c:	bf08      	it	eq
24005c6e:	f043 0301 	orreq.w	r3, r3, #1
24005c72:	f245 4158 	movw	r1, #21592	; 0x5458
24005c76:	4282      	cmp	r2, r0
24005c78:	bf08      	it	eq
24005c7a:	f043 0301 	orreq.w	r3, r3, #1
24005c7e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005c82:	f245 406c 	movw	r0, #21612	; 0x546c
24005c86:	428a      	cmp	r2, r1
24005c88:	bf08      	it	eq
24005c8a:	f043 0301 	orreq.w	r3, r3, #1
24005c8e:	f44f 41a9 	mov.w	r1, #21632	; 0x5480
24005c92:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005c96:	f6c5 0102 	movt	r1, #22530	; 0x5802
24005c9a:	4282      	cmp	r2, r0
24005c9c:	bf08      	it	eq
24005c9e:	f043 0301 	orreq.w	r3, r3, #1
24005ca2:	428a      	cmp	r2, r1
24005ca4:	bf08      	it	eq
24005ca6:	f043 0301 	orreq.w	r3, r3, #1
24005caa:	b92b      	cbnz	r3, 24005cb8 <HAL_DMA_Init+0x51c>
24005cac:	f245 4394 	movw	r3, #21652	; 0x5494
24005cb0:	f6c5 0302 	movt	r3, #22530	; 0x5802
24005cb4:	429a      	cmp	r2, r3
24005cb6:	d142      	bne.n	24005d3e <HAL_DMA_Init+0x5a2>
    __HAL_UNLOCK(hdma);
24005cb8:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24005cba:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005cbc:	210f      	movs	r1, #15
    hdma->State = HAL_DMA_STATE_BUSY;
24005cbe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005cc2:	f6cf 71fe 	movt	r1, #65534	; 0xfffe
    __HAL_UNLOCK(hdma);
24005cc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24005cca:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005ccc:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005cce:	68a3      	ldr	r3, [r4, #8]
24005cd0:	2b40      	cmp	r3, #64	; 0x40
24005cd2:	d032      	beq.n	24005d3a <HAL_DMA_Init+0x59e>
24005cd4:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
24005cd8:	fab3 f383 	clz	r3, r3
24005cdc:	095b      	lsrs	r3, r3, #5
24005cde:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24005ce0:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24005ce4:	08db      	lsrs	r3, r3, #3
24005ce6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24005cea:	6965      	ldr	r5, [r4, #20]
24005cec:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24005cf0:	69a5      	ldr	r5, [r4, #24]
24005cf2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24005cf6:	69e5      	ldr	r5, [r4, #28]
24005cf8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24005cfc:	6a25      	ldr	r5, [r4, #32]
24005cfe:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24005d02:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005d04:	f64a 31f8 	movw	r1, #44024	; 0xabf8
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005d08:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005d0a:	f2ca 71fd 	movt	r1, #43005	; 0xa7fd
24005d0e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24005d12:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005d14:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005d16:	6822      	ldr	r2, [r4, #0]
24005d18:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
24005d1c:	4411      	add	r1, r2
24005d1e:	fba3 2301 	umull	r2, r3, r3, r1
24005d22:	091b      	lsrs	r3, r3, #4
24005d24:	009b      	lsls	r3, r3, #2
24005d26:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005d28:	f7ff fc1c 	bl	24005564 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005d2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005d2e:	2301      	movs	r3, #1
24005d30:	f002 021f 	and.w	r2, r2, #31
24005d34:	4093      	lsls	r3, r2
24005d36:	6043      	str	r3, [r0, #4]
24005d38:	e617      	b.n	2400596a <HAL_DMA_Init+0x1ce>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005d3a:	2010      	movs	r0, #16
24005d3c:	e7d0      	b.n	24005ce0 <HAL_DMA_Init+0x544>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005d3e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24005d40:	2303      	movs	r3, #3
    return HAL_ERROR;
24005d42:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005d44:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24005d46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005d4a:	bd38      	pop	{r3, r4, r5, pc}

24005d4c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24005d4c:	2800      	cmp	r0, #0
24005d4e:	f000 835c 	beq.w	2400640a <HAL_DMA_Start_IT+0x6be>
24005d52:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24005d54:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24005d58:	2801      	cmp	r0, #1
24005d5a:	f000 8358 	beq.w	2400640e <HAL_DMA_Start_IT+0x6c2>
24005d5e:	2001      	movs	r0, #1
{
24005d60:	b530      	push	{r4, r5, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
24005d62:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24005d66:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24005d6a:	4284      	cmp	r4, r0
24005d6c:	d007      	beq.n	24005d7e <HAL_DMA_Start_IT+0x32>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24005d72:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005d74:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005d78:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24005d7c:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
24005d7e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24005d80:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005d84:	f04f 0e28 	mov.w	lr, #40	; 0x28
    hdma->State = HAL_DMA_STATE_BUSY;
24005d88:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005d8c:	2000      	movs	r0, #0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005d8e:	f2c4 0e02 	movt	lr, #16386	; 0x4002
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005d92:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24005d96:	6820      	ldr	r0, [r4, #0]
24005d98:	f020 0001 	bic.w	r0, r0, #1
24005d9c:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005d9e:	2010      	movs	r0, #16
24005da0:	f8dc 4000 	ldr.w	r4, [ip]
24005da4:	f2c4 0002 	movt	r0, #16386	; 0x4002
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005da8:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005dac:	4574      	cmp	r4, lr
24005dae:	bf18      	it	ne
24005db0:	4284      	cmpne	r4, r0
24005db2:	f04f 0e40 	mov.w	lr, #64	; 0x40
24005db6:	bf0c      	ite	eq
24005db8:	2001      	moveq	r0, #1
24005dba:	2000      	movne	r0, #0
24005dbc:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005dc0:	4574      	cmp	r4, lr
24005dc2:	bf08      	it	eq
24005dc4:	f040 0001 	orreq.w	r0, r0, #1
24005dc8:	f04f 0e58 	mov.w	lr, #88	; 0x58
24005dcc:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005dd0:	4574      	cmp	r4, lr
24005dd2:	bf08      	it	eq
24005dd4:	f040 0001 	orreq.w	r0, r0, #1
24005dd8:	f04f 0e70 	mov.w	lr, #112	; 0x70
24005ddc:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005de0:	4574      	cmp	r4, lr
24005de2:	bf08      	it	eq
24005de4:	f040 0001 	orreq.w	r0, r0, #1
24005de8:	f04f 0e88 	mov.w	lr, #136	; 0x88
24005dec:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005df0:	4574      	cmp	r4, lr
24005df2:	bf08      	it	eq
24005df4:	f040 0001 	orreq.w	r0, r0, #1
24005df8:	f04f 0ea0 	mov.w	lr, #160	; 0xa0
24005dfc:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e00:	4574      	cmp	r4, lr
24005e02:	bf08      	it	eq
24005e04:	f040 0001 	orreq.w	r0, r0, #1
24005e08:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
24005e0c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e10:	4574      	cmp	r4, lr
24005e12:	bf08      	it	eq
24005e14:	f040 0001 	orreq.w	r0, r0, #1
24005e18:	f44f 6e82 	mov.w	lr, #1040	; 0x410
24005e1c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e20:	4574      	cmp	r4, lr
24005e22:	bf08      	it	eq
24005e24:	f040 0001 	orreq.w	r0, r0, #1
24005e28:	f44f 6e85 	mov.w	lr, #1064	; 0x428
24005e2c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e30:	4574      	cmp	r4, lr
24005e32:	bf08      	it	eq
24005e34:	f040 0001 	orreq.w	r0, r0, #1
24005e38:	f44f 6e88 	mov.w	lr, #1088	; 0x440
24005e3c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e40:	4574      	cmp	r4, lr
24005e42:	bf08      	it	eq
24005e44:	f040 0001 	orreq.w	r0, r0, #1
24005e48:	f44f 6e8b 	mov.w	lr, #1112	; 0x458
24005e4c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e50:	4574      	cmp	r4, lr
24005e52:	bf08      	it	eq
24005e54:	f040 0001 	orreq.w	r0, r0, #1
24005e58:	f44f 6e8e 	mov.w	lr, #1136	; 0x470
24005e5c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e60:	4574      	cmp	r4, lr
24005e62:	bf08      	it	eq
24005e64:	f040 0001 	orreq.w	r0, r0, #1
24005e68:	f44f 6e91 	mov.w	lr, #1160	; 0x488
24005e6c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e70:	4574      	cmp	r4, lr
24005e72:	bf08      	it	eq
24005e74:	f040 0001 	orreq.w	r0, r0, #1
24005e78:	f44f 6e94 	mov.w	lr, #1184	; 0x4a0
24005e7c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e80:	4574      	cmp	r4, lr
24005e82:	bf08      	it	eq
24005e84:	f040 0001 	orreq.w	r0, r0, #1
24005e88:	f44f 6e97 	mov.w	lr, #1208	; 0x4b8
24005e8c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005e90:	4574      	cmp	r4, lr
24005e92:	bf08      	it	eq
24005e94:	f040 0001 	orreq.w	r0, r0, #1
24005e98:	f245 4e08 	movw	lr, #21512	; 0x5408
24005e9c:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005ea0:	4574      	cmp	r4, lr
24005ea2:	bf08      	it	eq
24005ea4:	f040 0001 	orreq.w	r0, r0, #1
24005ea8:	f245 4e1c 	movw	lr, #21532	; 0x541c
24005eac:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005eb0:	4574      	cmp	r4, lr
24005eb2:	bf08      	it	eq
24005eb4:	f040 0001 	orreq.w	r0, r0, #1
24005eb8:	f245 4e30 	movw	lr, #21552	; 0x5430
24005ebc:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005ec0:	4574      	cmp	r4, lr
24005ec2:	bf08      	it	eq
24005ec4:	f040 0001 	orreq.w	r0, r0, #1
24005ec8:	f245 4e44 	movw	lr, #21572	; 0x5444
24005ecc:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005ed0:	4574      	cmp	r4, lr
24005ed2:	bf08      	it	eq
24005ed4:	f040 0001 	orreq.w	r0, r0, #1
24005ed8:	f245 4e58 	movw	lr, #21592	; 0x5458
24005edc:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005ee0:	4574      	cmp	r4, lr
24005ee2:	bf08      	it	eq
24005ee4:	f040 0001 	orreq.w	r0, r0, #1
24005ee8:	f245 4e6c 	movw	lr, #21612	; 0x546c
24005eec:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005ef0:	4574      	cmp	r4, lr
24005ef2:	bf08      	it	eq
24005ef4:	f040 0001 	orreq.w	r0, r0, #1
24005ef8:	f44f 4ea9 	mov.w	lr, #21632	; 0x5480
24005efc:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24005f00:	4574      	cmp	r4, lr
24005f02:	bf08      	it	eq
24005f04:	f040 0001 	orreq.w	r0, r0, #1
24005f08:	b928      	cbnz	r0, 24005f16 <HAL_DMA_Start_IT+0x1ca>
24005f0a:	f245 4094 	movw	r0, #21652	; 0x5494
24005f0e:	f6c5 0002 	movt	r0, #22530	; 0x5802
24005f12:	4284      	cmp	r4, r0
24005f14:	d10a      	bne.n	24005f2c <HAL_DMA_Start_IT+0x1e0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005f16:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
24005f1a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005f1c:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005f20:	b110      	cbz	r0, 24005f28 <HAL_DMA_Start_IT+0x1dc>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005f22:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
24005f26:	6044      	str	r4, [r0, #4]
24005f28:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005f2c:	2010      	movs	r0, #16
24005f2e:	f04f 0e28 	mov.w	lr, #40	; 0x28
24005f32:	f2c4 0002 	movt	r0, #16386	; 0x4002
24005f36:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f3a:	4574      	cmp	r4, lr
24005f3c:	bf18      	it	ne
24005f3e:	4284      	cmpne	r4, r0
24005f40:	f04f 0e40 	mov.w	lr, #64	; 0x40
24005f44:	bf0c      	ite	eq
24005f46:	2001      	moveq	r0, #1
24005f48:	2000      	movne	r0, #0
24005f4a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f4e:	4574      	cmp	r4, lr
24005f50:	bf08      	it	eq
24005f52:	f040 0001 	orreq.w	r0, r0, #1
24005f56:	f04f 0e58 	mov.w	lr, #88	; 0x58
24005f5a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f5e:	4574      	cmp	r4, lr
24005f60:	bf08      	it	eq
24005f62:	f040 0001 	orreq.w	r0, r0, #1
24005f66:	f04f 0e70 	mov.w	lr, #112	; 0x70
24005f6a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f6e:	4574      	cmp	r4, lr
24005f70:	bf08      	it	eq
24005f72:	f040 0001 	orreq.w	r0, r0, #1
24005f76:	f04f 0e88 	mov.w	lr, #136	; 0x88
24005f7a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f7e:	4574      	cmp	r4, lr
24005f80:	bf08      	it	eq
24005f82:	f040 0001 	orreq.w	r0, r0, #1
24005f86:	f04f 0ea0 	mov.w	lr, #160	; 0xa0
24005f8a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f8e:	4574      	cmp	r4, lr
24005f90:	bf08      	it	eq
24005f92:	f040 0001 	orreq.w	r0, r0, #1
24005f96:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
24005f9a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005f9e:	4574      	cmp	r4, lr
24005fa0:	bf08      	it	eq
24005fa2:	f040 0001 	orreq.w	r0, r0, #1
24005fa6:	f44f 6e82 	mov.w	lr, #1040	; 0x410
24005faa:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005fae:	4574      	cmp	r4, lr
24005fb0:	bf08      	it	eq
24005fb2:	f040 0001 	orreq.w	r0, r0, #1
24005fb6:	f44f 6e85 	mov.w	lr, #1064	; 0x428
24005fba:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005fbe:	4574      	cmp	r4, lr
24005fc0:	bf08      	it	eq
24005fc2:	f040 0001 	orreq.w	r0, r0, #1
24005fc6:	f44f 6e88 	mov.w	lr, #1088	; 0x440
24005fca:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005fce:	4574      	cmp	r4, lr
24005fd0:	bf08      	it	eq
24005fd2:	f040 0001 	orreq.w	r0, r0, #1
24005fd6:	f44f 6e8b 	mov.w	lr, #1112	; 0x458
24005fda:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005fde:	4574      	cmp	r4, lr
24005fe0:	bf08      	it	eq
24005fe2:	f040 0001 	orreq.w	r0, r0, #1
24005fe6:	f44f 6e8e 	mov.w	lr, #1136	; 0x470
24005fea:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005fee:	4574      	cmp	r4, lr
24005ff0:	bf08      	it	eq
24005ff2:	f040 0001 	orreq.w	r0, r0, #1
24005ff6:	f44f 6e91 	mov.w	lr, #1160	; 0x488
24005ffa:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24005ffe:	4574      	cmp	r4, lr
24006000:	bf08      	it	eq
24006002:	f040 0001 	orreq.w	r0, r0, #1
24006006:	f44f 6e94 	mov.w	lr, #1184	; 0x4a0
2400600a:	f2c4 0e02 	movt	lr, #16386	; 0x4002
2400600e:	4574      	cmp	r4, lr
24006010:	bf08      	it	eq
24006012:	f040 0001 	orreq.w	r0, r0, #1
24006016:	b930      	cbnz	r0, 24006026 <HAL_DMA_Start_IT+0x2da>
24006018:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
2400601c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006020:	4284      	cmp	r4, r0
24006022:	f040 81f6 	bne.w	24006412 <HAL_DMA_Start_IT+0x6c6>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006026:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
2400602a:	f000 041f 	and.w	r4, r0, #31
2400602e:	203f      	movs	r0, #63	; 0x3f
24006030:	40a0      	lsls	r0, r4
24006032:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24006034:	f8dc 4000 	ldr.w	r4, [ip]
24006038:	6820      	ldr	r0, [r4, #0]
2400603a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
2400603e:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006040:	f8dc 0000 	ldr.w	r0, [ip]
24006044:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006046:	f8dc 3008 	ldr.w	r3, [ip, #8]
2400604a:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2400604c:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006050:	f000 81d6 	beq.w	24006400 <HAL_DMA_Start_IT+0x6b4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24006054:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24006056:	f8dc 3000 	ldr.w	r3, [ip]
2400605a:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400605c:	2310      	movs	r3, #16
2400605e:	2128      	movs	r1, #40	; 0x28
24006060:	f8dc 4000 	ldr.w	r4, [ip]
24006064:	2240      	movs	r2, #64	; 0x40
24006066:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400606a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400606e:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006072:	428c      	cmp	r4, r1
24006074:	bf18      	it	ne
24006076:	429c      	cmpne	r4, r3
24006078:	f04f 0158 	mov.w	r1, #88	; 0x58
2400607c:	bf0c      	ite	eq
2400607e:	2301      	moveq	r3, #1
24006080:	2300      	movne	r3, #0
24006082:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006086:	4294      	cmp	r4, r2
24006088:	bf08      	it	eq
2400608a:	f043 0301 	orreq.w	r3, r3, #1
2400608e:	2270      	movs	r2, #112	; 0x70
24006090:	428c      	cmp	r4, r1
24006092:	bf08      	it	eq
24006094:	f043 0301 	orreq.w	r3, r3, #1
24006098:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400609c:	2188      	movs	r1, #136	; 0x88
2400609e:	4294      	cmp	r4, r2
240060a0:	bf08      	it	eq
240060a2:	f043 0301 	orreq.w	r3, r3, #1
240060a6:	22a0      	movs	r2, #160	; 0xa0
240060a8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240060ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
240060b0:	428c      	cmp	r4, r1
240060b2:	bf08      	it	eq
240060b4:	f043 0301 	orreq.w	r3, r3, #1
240060b8:	21b8      	movs	r1, #184	; 0xb8
240060ba:	4294      	cmp	r4, r2
240060bc:	bf08      	it	eq
240060be:	f043 0301 	orreq.w	r3, r3, #1
240060c2:	f2c4 0102 	movt	r1, #16386	; 0x4002
240060c6:	f44f 6282 	mov.w	r2, #1040	; 0x410
240060ca:	428c      	cmp	r4, r1
240060cc:	bf08      	it	eq
240060ce:	f043 0301 	orreq.w	r3, r3, #1
240060d2:	f44f 6185 	mov.w	r1, #1064	; 0x428
240060d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
240060da:	f2c4 0102 	movt	r1, #16386	; 0x4002
240060de:	4294      	cmp	r4, r2
240060e0:	bf08      	it	eq
240060e2:	f043 0301 	orreq.w	r3, r3, #1
240060e6:	f44f 6288 	mov.w	r2, #1088	; 0x440
240060ea:	428c      	cmp	r4, r1
240060ec:	bf08      	it	eq
240060ee:	f043 0301 	orreq.w	r3, r3, #1
240060f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
240060f6:	f44f 618b 	mov.w	r1, #1112	; 0x458
240060fa:	4294      	cmp	r4, r2
240060fc:	bf08      	it	eq
240060fe:	f043 0301 	orreq.w	r3, r3, #1
24006102:	f44f 628e 	mov.w	r2, #1136	; 0x470
24006106:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400610a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400610e:	428c      	cmp	r4, r1
24006110:	bf08      	it	eq
24006112:	f043 0301 	orreq.w	r3, r3, #1
24006116:	f44f 6191 	mov.w	r1, #1160	; 0x488
2400611a:	4294      	cmp	r4, r2
2400611c:	bf08      	it	eq
2400611e:	f043 0301 	orreq.w	r3, r3, #1
24006122:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006126:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
2400612a:	428c      	cmp	r4, r1
2400612c:	bf08      	it	eq
2400612e:	f043 0301 	orreq.w	r3, r3, #1
24006132:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006136:	4294      	cmp	r4, r2
24006138:	bf08      	it	eq
2400613a:	f043 0301 	orreq.w	r3, r3, #1
2400613e:	b933      	cbnz	r3, 2400614e <HAL_DMA_Start_IT+0x402>
24006140:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
24006144:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006148:	429c      	cmp	r4, r3
2400614a:	f040 81ac 	bne.w	240064a6 <HAL_DMA_Start_IT+0x75a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2400614e:	6823      	ldr	r3, [r4, #0]
24006150:	f023 031e 	bic.w	r3, r3, #30
24006154:	f043 0316 	orr.w	r3, r3, #22
24006158:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400615a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400615e:	b12b      	cbz	r3, 2400616c <HAL_DMA_Start_IT+0x420>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24006160:	f8dc 2000 	ldr.w	r2, [ip]
24006164:	6813      	ldr	r3, [r2, #0]
24006166:	f043 0308 	orr.w	r3, r3, #8
2400616a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400616c:	2310      	movs	r3, #16
2400616e:	2128      	movs	r1, #40	; 0x28
24006170:	f8dc 4000 	ldr.w	r4, [ip]
24006174:	2240      	movs	r2, #64	; 0x40
24006176:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400617a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400617e:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006182:	428c      	cmp	r4, r1
24006184:	bf18      	it	ne
24006186:	429c      	cmpne	r4, r3
24006188:	f04f 0158 	mov.w	r1, #88	; 0x58
2400618c:	bf0c      	ite	eq
2400618e:	2301      	moveq	r3, #1
24006190:	2300      	movne	r3, #0
24006192:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006196:	4294      	cmp	r4, r2
24006198:	bf08      	it	eq
2400619a:	f043 0301 	orreq.w	r3, r3, #1
2400619e:	2270      	movs	r2, #112	; 0x70
240061a0:	428c      	cmp	r4, r1
240061a2:	bf08      	it	eq
240061a4:	f043 0301 	orreq.w	r3, r3, #1
240061a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
240061ac:	2188      	movs	r1, #136	; 0x88
240061ae:	4294      	cmp	r4, r2
240061b0:	bf08      	it	eq
240061b2:	f043 0301 	orreq.w	r3, r3, #1
240061b6:	22a0      	movs	r2, #160	; 0xa0
240061b8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240061bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
240061c0:	428c      	cmp	r4, r1
240061c2:	bf08      	it	eq
240061c4:	f043 0301 	orreq.w	r3, r3, #1
240061c8:	21b8      	movs	r1, #184	; 0xb8
240061ca:	4294      	cmp	r4, r2
240061cc:	bf08      	it	eq
240061ce:	f043 0301 	orreq.w	r3, r3, #1
240061d2:	f2c4 0102 	movt	r1, #16386	; 0x4002
240061d6:	f44f 6282 	mov.w	r2, #1040	; 0x410
240061da:	428c      	cmp	r4, r1
240061dc:	bf08      	it	eq
240061de:	f043 0301 	orreq.w	r3, r3, #1
240061e2:	f44f 6185 	mov.w	r1, #1064	; 0x428
240061e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
240061ea:	f2c4 0102 	movt	r1, #16386	; 0x4002
240061ee:	4294      	cmp	r4, r2
240061f0:	bf08      	it	eq
240061f2:	f043 0301 	orreq.w	r3, r3, #1
240061f6:	f44f 6288 	mov.w	r2, #1088	; 0x440
240061fa:	428c      	cmp	r4, r1
240061fc:	bf08      	it	eq
240061fe:	f043 0301 	orreq.w	r3, r3, #1
24006202:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006206:	f44f 618b 	mov.w	r1, #1112	; 0x458
2400620a:	4294      	cmp	r4, r2
2400620c:	bf08      	it	eq
2400620e:	f043 0301 	orreq.w	r3, r3, #1
24006212:	f44f 628e 	mov.w	r2, #1136	; 0x470
24006216:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400621a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400621e:	428c      	cmp	r4, r1
24006220:	bf08      	it	eq
24006222:	f043 0301 	orreq.w	r3, r3, #1
24006226:	f44f 6191 	mov.w	r1, #1160	; 0x488
2400622a:	4294      	cmp	r4, r2
2400622c:	bf08      	it	eq
2400622e:	f043 0301 	orreq.w	r3, r3, #1
24006232:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006236:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
2400623a:	428c      	cmp	r4, r1
2400623c:	bf08      	it	eq
2400623e:	f043 0301 	orreq.w	r3, r3, #1
24006242:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
24006246:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400624a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400624e:	4294      	cmp	r4, r2
24006250:	bf08      	it	eq
24006252:	f043 0301 	orreq.w	r3, r3, #1
24006256:	f245 4208 	movw	r2, #21512	; 0x5408
2400625a:	428c      	cmp	r4, r1
2400625c:	bf08      	it	eq
2400625e:	f043 0301 	orreq.w	r3, r3, #1
24006262:	f6c5 0202 	movt	r2, #22530	; 0x5802
24006266:	f245 411c 	movw	r1, #21532	; 0x541c
2400626a:	4294      	cmp	r4, r2
2400626c:	bf08      	it	eq
2400626e:	f043 0301 	orreq.w	r3, r3, #1
24006272:	f245 4230 	movw	r2, #21552	; 0x5430
24006276:	f6c5 0102 	movt	r1, #22530	; 0x5802
2400627a:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400627e:	428c      	cmp	r4, r1
24006280:	bf08      	it	eq
24006282:	f043 0301 	orreq.w	r3, r3, #1
24006286:	f245 4144 	movw	r1, #21572	; 0x5444
2400628a:	4294      	cmp	r4, r2
2400628c:	bf08      	it	eq
2400628e:	f043 0301 	orreq.w	r3, r3, #1
24006292:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006296:	f245 4258 	movw	r2, #21592	; 0x5458
2400629a:	428c      	cmp	r4, r1
2400629c:	bf08      	it	eq
2400629e:	f043 0301 	orreq.w	r3, r3, #1
240062a2:	f245 416c 	movw	r1, #21612	; 0x546c
240062a6:	f6c5 0202 	movt	r2, #22530	; 0x5802
240062aa:	f6c5 0102 	movt	r1, #22530	; 0x5802
240062ae:	4294      	cmp	r4, r2
240062b0:	bf08      	it	eq
240062b2:	f043 0301 	orreq.w	r3, r3, #1
240062b6:	f44f 42a9 	mov.w	r2, #21632	; 0x5480
240062ba:	428c      	cmp	r4, r1
240062bc:	bf08      	it	eq
240062be:	f043 0301 	orreq.w	r3, r3, #1
240062c2:	f6c5 0202 	movt	r2, #22530	; 0x5802
240062c6:	4294      	cmp	r4, r2
240062c8:	bf08      	it	eq
240062ca:	f043 0301 	orreq.w	r3, r3, #1
240062ce:	b92b      	cbnz	r3, 240062dc <HAL_DMA_Start_IT+0x590>
240062d0:	f245 4394 	movw	r3, #21652	; 0x5494
240062d4:	f6c5 0302 	movt	r3, #22530	; 0x5802
240062d8:	429c      	cmp	r4, r3
240062da:	d111      	bne.n	24006300 <HAL_DMA_Start_IT+0x5b4>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240062dc:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
240062e0:	681a      	ldr	r2, [r3, #0]
240062e2:	03d2      	lsls	r2, r2, #15
240062e4:	d503      	bpl.n	240062ee <HAL_DMA_Start_IT+0x5a2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240062e6:	681a      	ldr	r2, [r3, #0]
240062e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240062ec:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
240062ee:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
240062f2:	b11b      	cbz	r3, 240062fc <HAL_DMA_Start_IT+0x5b0>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240062f4:	681a      	ldr	r2, [r3, #0]
240062f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240062fa:	601a      	str	r2, [r3, #0]
240062fc:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
24006300:	2310      	movs	r3, #16
24006302:	2128      	movs	r1, #40	; 0x28
24006304:	2240      	movs	r2, #64	; 0x40
24006306:	2058      	movs	r0, #88	; 0x58
24006308:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400630c:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006310:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006314:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006318:	428c      	cmp	r4, r1
2400631a:	bf18      	it	ne
2400631c:	429c      	cmpne	r4, r3
2400631e:	f04f 0188 	mov.w	r1, #136	; 0x88
24006322:	bf0c      	ite	eq
24006324:	2301      	moveq	r3, #1
24006326:	2300      	movne	r3, #0
24006328:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400632c:	4294      	cmp	r4, r2
2400632e:	bf08      	it	eq
24006330:	f043 0301 	orreq.w	r3, r3, #1
24006334:	2270      	movs	r2, #112	; 0x70
24006336:	4284      	cmp	r4, r0
24006338:	bf08      	it	eq
2400633a:	f043 0301 	orreq.w	r3, r3, #1
2400633e:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006342:	20b8      	movs	r0, #184	; 0xb8
24006344:	4294      	cmp	r4, r2
24006346:	bf08      	it	eq
24006348:	f043 0301 	orreq.w	r3, r3, #1
2400634c:	22a0      	movs	r2, #160	; 0xa0
2400634e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006352:	428c      	cmp	r4, r1
24006354:	bf08      	it	eq
24006356:	f043 0301 	orreq.w	r3, r3, #1
2400635a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400635e:	f44f 6185 	mov.w	r1, #1064	; 0x428
24006362:	4294      	cmp	r4, r2
24006364:	bf08      	it	eq
24006366:	f043 0301 	orreq.w	r3, r3, #1
2400636a:	f44f 6282 	mov.w	r2, #1040	; 0x410
2400636e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006372:	4284      	cmp	r4, r0
24006374:	bf08      	it	eq
24006376:	f043 0301 	orreq.w	r3, r3, #1
2400637a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400637e:	f44f 608b 	mov.w	r0, #1112	; 0x458
24006382:	4294      	cmp	r4, r2
24006384:	bf08      	it	eq
24006386:	f043 0301 	orreq.w	r3, r3, #1
2400638a:	f44f 6288 	mov.w	r2, #1088	; 0x440
2400638e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006392:	428c      	cmp	r4, r1
24006394:	bf08      	it	eq
24006396:	f043 0301 	orreq.w	r3, r3, #1
2400639a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2400639e:	f44f 6191 	mov.w	r1, #1160	; 0x488
240063a2:	4294      	cmp	r4, r2
240063a4:	bf08      	it	eq
240063a6:	f043 0301 	orreq.w	r3, r3, #1
240063aa:	f44f 628e 	mov.w	r2, #1136	; 0x470
240063ae:	f2c4 0102 	movt	r1, #16386	; 0x4002
240063b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
240063b6:	4284      	cmp	r4, r0
240063b8:	bf08      	it	eq
240063ba:	f043 0301 	orreq.w	r3, r3, #1
240063be:	4294      	cmp	r4, r2
240063c0:	bf08      	it	eq
240063c2:	f043 0301 	orreq.w	r3, r3, #1
240063c6:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
240063ca:	428c      	cmp	r4, r1
240063cc:	bf08      	it	eq
240063ce:	f043 0301 	orreq.w	r3, r3, #1
240063d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
240063d6:	4294      	cmp	r4, r2
240063d8:	bf08      	it	eq
240063da:	f043 0301 	orreq.w	r3, r3, #1
240063de:	b94b      	cbnz	r3, 240063f4 <HAL_DMA_Start_IT+0x6a8>
240063e0:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
240063e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240063e8:	1a20      	subs	r0, r4, r0
240063ea:	fab0 f080 	clz	r0, r0
240063ee:	0940      	lsrs	r0, r0, #5
240063f0:	2800      	cmp	r0, #0
240063f2:	d053      	beq.n	2400649c <HAL_DMA_Start_IT+0x750>
240063f4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
240063f6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
240063f8:	f043 0301 	orr.w	r3, r3, #1
240063fc:	6023      	str	r3, [r4, #0]
}
240063fe:	bd30      	pop	{r4, r5, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006400:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24006402:	f8dc 3000 	ldr.w	r3, [ip]
24006406:	60d9      	str	r1, [r3, #12]
24006408:	e628      	b.n	2400605c <HAL_DMA_Start_IT+0x310>
    return HAL_ERROR;
2400640a:	2001      	movs	r0, #1
2400640c:	4770      	bx	lr
  __HAL_LOCK(hdma);
2400640e:	2002      	movs	r0, #2
}
24006410:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24006412:	f245 4008 	movw	r0, #21512	; 0x5408
24006416:	f245 4e1c 	movw	lr, #21532	; 0x541c
2400641a:	f6c5 0002 	movt	r0, #22530	; 0x5802
2400641e:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006422:	4574      	cmp	r4, lr
24006424:	bf18      	it	ne
24006426:	4284      	cmpne	r4, r0
24006428:	f245 4e30 	movw	lr, #21552	; 0x5430
2400642c:	bf0c      	ite	eq
2400642e:	2001      	moveq	r0, #1
24006430:	2000      	movne	r0, #0
24006432:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006436:	4574      	cmp	r4, lr
24006438:	bf08      	it	eq
2400643a:	f040 0001 	orreq.w	r0, r0, #1
2400643e:	f245 4e44 	movw	lr, #21572	; 0x5444
24006442:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006446:	4574      	cmp	r4, lr
24006448:	bf08      	it	eq
2400644a:	f040 0001 	orreq.w	r0, r0, #1
2400644e:	f245 4e58 	movw	lr, #21592	; 0x5458
24006452:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006456:	4574      	cmp	r4, lr
24006458:	bf08      	it	eq
2400645a:	f040 0001 	orreq.w	r0, r0, #1
2400645e:	f245 4e6c 	movw	lr, #21612	; 0x546c
24006462:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006466:	4574      	cmp	r4, lr
24006468:	bf08      	it	eq
2400646a:	f040 0001 	orreq.w	r0, r0, #1
2400646e:	f44f 4ea9 	mov.w	lr, #21632	; 0x5480
24006472:	f6c5 0e02 	movt	lr, #22530	; 0x5802
24006476:	4574      	cmp	r4, lr
24006478:	bf08      	it	eq
2400647a:	f040 0001 	orreq.w	r0, r0, #1
2400647e:	b928      	cbnz	r0, 2400648c <HAL_DMA_Start_IT+0x740>
24006480:	f245 4094 	movw	r0, #21652	; 0x5494
24006484:	f6c5 0002 	movt	r0, #22530	; 0x5802
24006488:	4284      	cmp	r4, r0
2400648a:	d10c      	bne.n	240064a6 <HAL_DMA_Start_IT+0x75a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400648c:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24006490:	f000 041f 	and.w	r4, r0, #31
24006494:	2001      	movs	r0, #1
24006496:	40a0      	lsls	r0, r4
24006498:	6068      	str	r0, [r5, #4]
2400649a:	e5d1      	b.n	24006040 <HAL_DMA_Start_IT+0x2f4>
    __HAL_DMA_ENABLE(hdma);
2400649c:	6823      	ldr	r3, [r4, #0]
2400649e:	f043 0301 	orr.w	r3, r3, #1
240064a2:	6023      	str	r3, [r4, #0]
}
240064a4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
240064a6:	6823      	ldr	r3, [r4, #0]
240064a8:	f023 030e 	bic.w	r3, r3, #14
240064ac:	f043 030a 	orr.w	r3, r3, #10
240064b0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
240064b2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
240064b6:	2b00      	cmp	r3, #0
240064b8:	f43f ae58 	beq.w	2400616c <HAL_DMA_Start_IT+0x420>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
240064bc:	f8dc 2000 	ldr.w	r2, [ip]
240064c0:	6813      	ldr	r3, [r2, #0]
240064c2:	f043 0304 	orr.w	r3, r3, #4
240064c6:	6013      	str	r3, [r2, #0]
240064c8:	e650      	b.n	2400616c <HAL_DMA_Start_IT+0x420>
240064ca:	bf00      	nop

240064cc <HAL_DMA_Abort>:
{
240064cc:	b570      	push	{r4, r5, r6, lr}
240064ce:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
240064d0:	f7fe ff56 	bl	24005380 <HAL_GetTick>
  if(hdma == NULL)
240064d4:	2e00      	cmp	r6, #0
240064d6:	f000 82ae 	beq.w	24006a36 <HAL_DMA_Abort+0x56a>
  if(hdma->State != HAL_DMA_STATE_BUSY)
240064da:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
240064de:	2b02      	cmp	r3, #2
240064e0:	f040 8298 	bne.w	24006a14 <HAL_DMA_Abort+0x548>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240064e4:	2310      	movs	r3, #16
240064e6:	2128      	movs	r1, #40	; 0x28
240064e8:	6832      	ldr	r2, [r6, #0]
240064ea:	4604      	mov	r4, r0
240064ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
240064f0:	f2c4 0102 	movt	r1, #16386	; 0x4002
240064f4:	428a      	cmp	r2, r1
240064f6:	bf18      	it	ne
240064f8:	429a      	cmpne	r2, r3
240064fa:	f04f 0140 	mov.w	r1, #64	; 0x40
240064fe:	bf0c      	ite	eq
24006500:	2301      	moveq	r3, #1
24006502:	2300      	movne	r3, #0
24006504:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006508:	428a      	cmp	r2, r1
2400650a:	bf08      	it	eq
2400650c:	f043 0301 	orreq.w	r3, r3, #1
24006510:	2158      	movs	r1, #88	; 0x58
24006512:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006516:	428a      	cmp	r2, r1
24006518:	bf08      	it	eq
2400651a:	f043 0301 	orreq.w	r3, r3, #1
2400651e:	2170      	movs	r1, #112	; 0x70
24006520:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006524:	428a      	cmp	r2, r1
24006526:	bf08      	it	eq
24006528:	f043 0301 	orreq.w	r3, r3, #1
2400652c:	2188      	movs	r1, #136	; 0x88
2400652e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006532:	428a      	cmp	r2, r1
24006534:	bf08      	it	eq
24006536:	f043 0301 	orreq.w	r3, r3, #1
2400653a:	21a0      	movs	r1, #160	; 0xa0
2400653c:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006540:	428a      	cmp	r2, r1
24006542:	bf08      	it	eq
24006544:	f043 0301 	orreq.w	r3, r3, #1
24006548:	21b8      	movs	r1, #184	; 0xb8
2400654a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400654e:	428a      	cmp	r2, r1
24006550:	bf08      	it	eq
24006552:	f043 0301 	orreq.w	r3, r3, #1
24006556:	f44f 6182 	mov.w	r1, #1040	; 0x410
2400655a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400655e:	428a      	cmp	r2, r1
24006560:	bf08      	it	eq
24006562:	f043 0301 	orreq.w	r3, r3, #1
24006566:	f44f 6185 	mov.w	r1, #1064	; 0x428
2400656a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400656e:	428a      	cmp	r2, r1
24006570:	bf08      	it	eq
24006572:	f043 0301 	orreq.w	r3, r3, #1
24006576:	f44f 6188 	mov.w	r1, #1088	; 0x440
2400657a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400657e:	428a      	cmp	r2, r1
24006580:	bf08      	it	eq
24006582:	f043 0301 	orreq.w	r3, r3, #1
24006586:	f44f 618b 	mov.w	r1, #1112	; 0x458
2400658a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400658e:	428a      	cmp	r2, r1
24006590:	bf08      	it	eq
24006592:	f043 0301 	orreq.w	r3, r3, #1
24006596:	f44f 618e 	mov.w	r1, #1136	; 0x470
2400659a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400659e:	428a      	cmp	r2, r1
240065a0:	bf08      	it	eq
240065a2:	f043 0301 	orreq.w	r3, r3, #1
240065a6:	f44f 6191 	mov.w	r1, #1160	; 0x488
240065aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
240065ae:	428a      	cmp	r2, r1
240065b0:	bf08      	it	eq
240065b2:	f043 0301 	orreq.w	r3, r3, #1
240065b6:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
240065ba:	f2c4 0102 	movt	r1, #16386	; 0x4002
240065be:	428a      	cmp	r2, r1
240065c0:	bf08      	it	eq
240065c2:	f043 0301 	orreq.w	r3, r3, #1
240065c6:	b933      	cbnz	r3, 240065d6 <HAL_DMA_Abort+0x10a>
240065c8:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
240065cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
240065d0:	429a      	cmp	r2, r3
240065d2:	f040 823a 	bne.w	24006a4a <HAL_DMA_Abort+0x57e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240065d6:	6813      	ldr	r3, [r2, #0]
240065d8:	f023 031e 	bic.w	r3, r3, #30
240065dc:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240065de:	6832      	ldr	r2, [r6, #0]
240065e0:	6953      	ldr	r3, [r2, #20]
240065e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240065e6:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
240065e8:	6832      	ldr	r2, [r6, #0]
240065ea:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240065ec:	2310      	movs	r3, #16
240065ee:	2128      	movs	r1, #40	; 0x28
240065f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
240065f4:	f2c4 0102 	movt	r1, #16386	; 0x4002
240065f8:	428a      	cmp	r2, r1
240065fa:	bf18      	it	ne
240065fc:	429a      	cmpne	r2, r3
240065fe:	f04f 0140 	mov.w	r1, #64	; 0x40
24006602:	bf0c      	ite	eq
24006604:	2301      	moveq	r3, #1
24006606:	2300      	movne	r3, #0
24006608:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400660c:	428a      	cmp	r2, r1
2400660e:	bf08      	it	eq
24006610:	f043 0301 	orreq.w	r3, r3, #1
24006614:	2158      	movs	r1, #88	; 0x58
24006616:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400661a:	428a      	cmp	r2, r1
2400661c:	bf08      	it	eq
2400661e:	f043 0301 	orreq.w	r3, r3, #1
24006622:	2170      	movs	r1, #112	; 0x70
24006624:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006628:	428a      	cmp	r2, r1
2400662a:	bf08      	it	eq
2400662c:	f043 0301 	orreq.w	r3, r3, #1
24006630:	2188      	movs	r1, #136	; 0x88
24006632:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006636:	428a      	cmp	r2, r1
24006638:	bf08      	it	eq
2400663a:	f043 0301 	orreq.w	r3, r3, #1
2400663e:	21a0      	movs	r1, #160	; 0xa0
24006640:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006644:	428a      	cmp	r2, r1
24006646:	bf08      	it	eq
24006648:	f043 0301 	orreq.w	r3, r3, #1
2400664c:	21b8      	movs	r1, #184	; 0xb8
2400664e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006652:	428a      	cmp	r2, r1
24006654:	bf08      	it	eq
24006656:	f043 0301 	orreq.w	r3, r3, #1
2400665a:	f44f 6182 	mov.w	r1, #1040	; 0x410
2400665e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006662:	428a      	cmp	r2, r1
24006664:	bf08      	it	eq
24006666:	f043 0301 	orreq.w	r3, r3, #1
2400666a:	f44f 6185 	mov.w	r1, #1064	; 0x428
2400666e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006672:	428a      	cmp	r2, r1
24006674:	bf08      	it	eq
24006676:	f043 0301 	orreq.w	r3, r3, #1
2400667a:	f44f 6188 	mov.w	r1, #1088	; 0x440
2400667e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006682:	428a      	cmp	r2, r1
24006684:	bf08      	it	eq
24006686:	f043 0301 	orreq.w	r3, r3, #1
2400668a:	f44f 618b 	mov.w	r1, #1112	; 0x458
2400668e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006692:	428a      	cmp	r2, r1
24006694:	bf08      	it	eq
24006696:	f043 0301 	orreq.w	r3, r3, #1
2400669a:	f44f 618e 	mov.w	r1, #1136	; 0x470
2400669e:	f2c4 0102 	movt	r1, #16386	; 0x4002
240066a2:	428a      	cmp	r2, r1
240066a4:	bf08      	it	eq
240066a6:	f043 0301 	orreq.w	r3, r3, #1
240066aa:	f44f 6191 	mov.w	r1, #1160	; 0x488
240066ae:	f2c4 0102 	movt	r1, #16386	; 0x4002
240066b2:	428a      	cmp	r2, r1
240066b4:	bf08      	it	eq
240066b6:	f043 0301 	orreq.w	r3, r3, #1
240066ba:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
240066be:	f2c4 0102 	movt	r1, #16386	; 0x4002
240066c2:	428a      	cmp	r2, r1
240066c4:	bf08      	it	eq
240066c6:	f043 0301 	orreq.w	r3, r3, #1
240066ca:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
240066ce:	f2c4 0102 	movt	r1, #16386	; 0x4002
240066d2:	428a      	cmp	r2, r1
240066d4:	bf08      	it	eq
240066d6:	f043 0301 	orreq.w	r3, r3, #1
240066da:	f245 4108 	movw	r1, #21512	; 0x5408
240066de:	f6c5 0102 	movt	r1, #22530	; 0x5802
240066e2:	428a      	cmp	r2, r1
240066e4:	bf08      	it	eq
240066e6:	f043 0301 	orreq.w	r3, r3, #1
240066ea:	f245 411c 	movw	r1, #21532	; 0x541c
240066ee:	f6c5 0102 	movt	r1, #22530	; 0x5802
240066f2:	428a      	cmp	r2, r1
240066f4:	bf08      	it	eq
240066f6:	f043 0301 	orreq.w	r3, r3, #1
240066fa:	f245 4130 	movw	r1, #21552	; 0x5430
240066fe:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006702:	428a      	cmp	r2, r1
24006704:	bf08      	it	eq
24006706:	f043 0301 	orreq.w	r3, r3, #1
2400670a:	f245 4144 	movw	r1, #21572	; 0x5444
2400670e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006712:	428a      	cmp	r2, r1
24006714:	bf08      	it	eq
24006716:	f043 0301 	orreq.w	r3, r3, #1
2400671a:	f245 4158 	movw	r1, #21592	; 0x5458
2400671e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006722:	428a      	cmp	r2, r1
24006724:	bf08      	it	eq
24006726:	f043 0301 	orreq.w	r3, r3, #1
2400672a:	f245 416c 	movw	r1, #21612	; 0x546c
2400672e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006732:	428a      	cmp	r2, r1
24006734:	bf08      	it	eq
24006736:	f043 0301 	orreq.w	r3, r3, #1
2400673a:	f44f 41a9 	mov.w	r1, #21632	; 0x5480
2400673e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006742:	428a      	cmp	r2, r1
24006744:	bf08      	it	eq
24006746:	f043 0301 	orreq.w	r3, r3, #1
2400674a:	b92b      	cbnz	r3, 24006758 <HAL_DMA_Abort+0x28c>
2400674c:	f245 4394 	movw	r3, #21652	; 0x5494
24006750:	f6c5 0302 	movt	r3, #22530	; 0x5802
24006754:	429a      	cmp	r2, r3
24006756:	d105      	bne.n	24006764 <HAL_DMA_Abort+0x298>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006758:	6e32      	ldr	r2, [r6, #96]	; 0x60
2400675a:	6813      	ldr	r3, [r2, #0]
2400675c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006760:	6013      	str	r3, [r2, #0]
24006762:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
24006764:	6813      	ldr	r3, [r2, #0]
24006766:	f023 0301 	bic.w	r3, r3, #1
2400676a:	6013      	str	r3, [r2, #0]
2400676c:	e005      	b.n	2400677a <HAL_DMA_Abort+0x2ae>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400676e:	f7fe fe07 	bl	24005380 <HAL_GetTick>
24006772:	1b00      	subs	r0, r0, r4
24006774:	2805      	cmp	r0, #5
24006776:	f200 8154 	bhi.w	24006a22 <HAL_DMA_Abort+0x556>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2400677a:	682b      	ldr	r3, [r5, #0]
2400677c:	07db      	lsls	r3, r3, #31
2400677e:	d4f6      	bmi.n	2400676e <HAL_DMA_Abort+0x2a2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006780:	2310      	movs	r3, #16
24006782:	2028      	movs	r0, #40	; 0x28
24006784:	6832      	ldr	r2, [r6, #0]
24006786:	2140      	movs	r1, #64	; 0x40
24006788:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400678c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006790:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006794:	4282      	cmp	r2, r0
24006796:	bf18      	it	ne
24006798:	429a      	cmpne	r2, r3
2400679a:	f04f 0058 	mov.w	r0, #88	; 0x58
2400679e:	bf0c      	ite	eq
240067a0:	2301      	moveq	r3, #1
240067a2:	2300      	movne	r3, #0
240067a4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240067a8:	428a      	cmp	r2, r1
240067aa:	bf08      	it	eq
240067ac:	f043 0301 	orreq.w	r3, r3, #1
240067b0:	2170      	movs	r1, #112	; 0x70
240067b2:	4282      	cmp	r2, r0
240067b4:	bf08      	it	eq
240067b6:	f043 0301 	orreq.w	r3, r3, #1
240067ba:	f2c4 0102 	movt	r1, #16386	; 0x4002
240067be:	2088      	movs	r0, #136	; 0x88
240067c0:	428a      	cmp	r2, r1
240067c2:	bf08      	it	eq
240067c4:	f043 0301 	orreq.w	r3, r3, #1
240067c8:	21a0      	movs	r1, #160	; 0xa0
240067ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
240067ce:	f2c4 0102 	movt	r1, #16386	; 0x4002
240067d2:	4282      	cmp	r2, r0
240067d4:	bf08      	it	eq
240067d6:	f043 0301 	orreq.w	r3, r3, #1
240067da:	20b8      	movs	r0, #184	; 0xb8
240067dc:	428a      	cmp	r2, r1
240067de:	bf08      	it	eq
240067e0:	f043 0301 	orreq.w	r3, r3, #1
240067e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240067e8:	f44f 6182 	mov.w	r1, #1040	; 0x410
240067ec:	4282      	cmp	r2, r0
240067ee:	bf08      	it	eq
240067f0:	f043 0301 	orreq.w	r3, r3, #1
240067f4:	f44f 6085 	mov.w	r0, #1064	; 0x428
240067f8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240067fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006800:	428a      	cmp	r2, r1
24006802:	bf08      	it	eq
24006804:	f043 0301 	orreq.w	r3, r3, #1
24006808:	f44f 6188 	mov.w	r1, #1088	; 0x440
2400680c:	4282      	cmp	r2, r0
2400680e:	bf08      	it	eq
24006810:	f043 0301 	orreq.w	r3, r3, #1
24006814:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006818:	f44f 608b 	mov.w	r0, #1112	; 0x458
2400681c:	428a      	cmp	r2, r1
2400681e:	bf08      	it	eq
24006820:	f043 0301 	orreq.w	r3, r3, #1
24006824:	f44f 618e 	mov.w	r1, #1136	; 0x470
24006828:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400682c:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006830:	4282      	cmp	r2, r0
24006832:	bf08      	it	eq
24006834:	f043 0301 	orreq.w	r3, r3, #1
24006838:	f44f 6091 	mov.w	r0, #1160	; 0x488
2400683c:	428a      	cmp	r2, r1
2400683e:	bf08      	it	eq
24006840:	f043 0301 	orreq.w	r3, r3, #1
24006844:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006848:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
2400684c:	4282      	cmp	r2, r0
2400684e:	bf08      	it	eq
24006850:	f043 0301 	orreq.w	r3, r3, #1
24006854:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006858:	428a      	cmp	r2, r1
2400685a:	bf08      	it	eq
2400685c:	f043 0301 	orreq.w	r3, r3, #1
24006860:	b933      	cbnz	r3, 24006870 <HAL_DMA_Abort+0x3a4>
24006862:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
24006866:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400686a:	429a      	cmp	r2, r3
2400686c:	f040 80e5 	bne.w	24006a3a <HAL_DMA_Abort+0x56e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006870:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24006872:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006874:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006876:	f002 021f 	and.w	r2, r2, #31
2400687a:	4093      	lsls	r3, r2
2400687c:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400687e:	2310      	movs	r3, #16
24006880:	2028      	movs	r0, #40	; 0x28
24006882:	6832      	ldr	r2, [r6, #0]
24006884:	2140      	movs	r1, #64	; 0x40
24006886:	f2c4 0302 	movt	r3, #16386	; 0x4002
2400688a:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400688e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006892:	4282      	cmp	r2, r0
24006894:	bf18      	it	ne
24006896:	429a      	cmpne	r2, r3
24006898:	f04f 0058 	mov.w	r0, #88	; 0x58
2400689c:	bf0c      	ite	eq
2400689e:	2301      	moveq	r3, #1
240068a0:	2300      	movne	r3, #0
240068a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
240068a6:	428a      	cmp	r2, r1
240068a8:	bf08      	it	eq
240068aa:	f043 0301 	orreq.w	r3, r3, #1
240068ae:	2170      	movs	r1, #112	; 0x70
240068b0:	4282      	cmp	r2, r0
240068b2:	bf08      	it	eq
240068b4:	f043 0301 	orreq.w	r3, r3, #1
240068b8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240068bc:	2088      	movs	r0, #136	; 0x88
240068be:	428a      	cmp	r2, r1
240068c0:	bf08      	it	eq
240068c2:	f043 0301 	orreq.w	r3, r3, #1
240068c6:	21a0      	movs	r1, #160	; 0xa0
240068c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
240068cc:	f2c4 0102 	movt	r1, #16386	; 0x4002
240068d0:	4282      	cmp	r2, r0
240068d2:	bf08      	it	eq
240068d4:	f043 0301 	orreq.w	r3, r3, #1
240068d8:	20b8      	movs	r0, #184	; 0xb8
240068da:	428a      	cmp	r2, r1
240068dc:	bf08      	it	eq
240068de:	f043 0301 	orreq.w	r3, r3, #1
240068e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
240068e6:	f44f 6182 	mov.w	r1, #1040	; 0x410
240068ea:	4282      	cmp	r2, r0
240068ec:	bf08      	it	eq
240068ee:	f043 0301 	orreq.w	r3, r3, #1
240068f2:	f44f 6085 	mov.w	r0, #1064	; 0x428
240068f6:	f2c4 0102 	movt	r1, #16386	; 0x4002
240068fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
240068fe:	428a      	cmp	r2, r1
24006900:	bf08      	it	eq
24006902:	f043 0301 	orreq.w	r3, r3, #1
24006906:	f44f 6188 	mov.w	r1, #1088	; 0x440
2400690a:	4282      	cmp	r2, r0
2400690c:	bf08      	it	eq
2400690e:	f043 0301 	orreq.w	r3, r3, #1
24006912:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006916:	f44f 608b 	mov.w	r0, #1112	; 0x458
2400691a:	428a      	cmp	r2, r1
2400691c:	bf08      	it	eq
2400691e:	f043 0301 	orreq.w	r3, r3, #1
24006922:	f44f 618e 	mov.w	r1, #1136	; 0x470
24006926:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400692a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400692e:	4282      	cmp	r2, r0
24006930:	bf08      	it	eq
24006932:	f043 0301 	orreq.w	r3, r3, #1
24006936:	f44f 6091 	mov.w	r0, #1160	; 0x488
2400693a:	428a      	cmp	r2, r1
2400693c:	bf08      	it	eq
2400693e:	f043 0301 	orreq.w	r3, r3, #1
24006942:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006946:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
2400694a:	4282      	cmp	r2, r0
2400694c:	bf08      	it	eq
2400694e:	f043 0301 	orreq.w	r3, r3, #1
24006952:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
24006956:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400695a:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400695e:	428a      	cmp	r2, r1
24006960:	bf08      	it	eq
24006962:	f043 0301 	orreq.w	r3, r3, #1
24006966:	f245 4108 	movw	r1, #21512	; 0x5408
2400696a:	4282      	cmp	r2, r0
2400696c:	bf08      	it	eq
2400696e:	f043 0301 	orreq.w	r3, r3, #1
24006972:	f6c5 0102 	movt	r1, #22530	; 0x5802
24006976:	f245 401c 	movw	r0, #21532	; 0x541c
2400697a:	428a      	cmp	r2, r1
2400697c:	bf08      	it	eq
2400697e:	f043 0301 	orreq.w	r3, r3, #1
24006982:	f245 4130 	movw	r1, #21552	; 0x5430
24006986:	f6c5 0002 	movt	r0, #22530	; 0x5802
2400698a:	f6c5 0102 	movt	r1, #22530	; 0x5802
2400698e:	4282      	cmp	r2, r0
24006990:	bf08      	it	eq
24006992:	f043 0301 	orreq.w	r3, r3, #1
24006996:	f245 4044 	movw	r0, #21572	; 0x5444
2400699a:	428a      	cmp	r2, r1
2400699c:	bf08      	it	eq
2400699e:	f043 0301 	orreq.w	r3, r3, #1
240069a2:	f6c5 0002 	movt	r0, #22530	; 0x5802
240069a6:	f245 4158 	movw	r1, #21592	; 0x5458
240069aa:	4282      	cmp	r2, r0
240069ac:	bf08      	it	eq
240069ae:	f043 0301 	orreq.w	r3, r3, #1
240069b2:	f245 406c 	movw	r0, #21612	; 0x546c
240069b6:	f6c5 0102 	movt	r1, #22530	; 0x5802
240069ba:	f6c5 0002 	movt	r0, #22530	; 0x5802
240069be:	428a      	cmp	r2, r1
240069c0:	bf08      	it	eq
240069c2:	f043 0301 	orreq.w	r3, r3, #1
240069c6:	f44f 41a9 	mov.w	r1, #21632	; 0x5480
240069ca:	4282      	cmp	r2, r0
240069cc:	bf08      	it	eq
240069ce:	f043 0301 	orreq.w	r3, r3, #1
240069d2:	f6c5 0102 	movt	r1, #22530	; 0x5802
240069d6:	428a      	cmp	r2, r1
240069d8:	bf08      	it	eq
240069da:	f043 0301 	orreq.w	r3, r3, #1
240069de:	b92b      	cbnz	r3, 240069ec <HAL_DMA_Abort+0x520>
240069e0:	f245 4394 	movw	r3, #21652	; 0x5494
240069e4:	f6c5 0302 	movt	r3, #22530	; 0x5802
240069e8:	429a      	cmp	r2, r3
240069ea:	d10b      	bne.n	24006a04 <HAL_DMA_Abort+0x538>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240069ec:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
240069f0:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
240069f2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
240069f4:	b133      	cbz	r3, 24006a04 <HAL_DMA_Abort+0x538>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240069f6:	681a      	ldr	r2, [r3, #0]
240069f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240069fc:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240069fe:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
24006a02:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
24006a04:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
24006a06:	2201      	movs	r2, #1
  return HAL_OK;
24006a08:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
24006a0a:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24006a0e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24006a12:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006a14:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
24006a16:	2300      	movs	r3, #0
    return HAL_ERROR;
24006a18:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006a1a:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24006a1c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24006a20:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24006a22:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24006a24:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
24006a26:	2300      	movs	r3, #0
        return HAL_ERROR;
24006a28:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24006a2a:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
24006a2c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
24006a30:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
24006a34:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24006a36:	2001      	movs	r0, #1
}
24006a38:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a3a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24006a3c:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006a3e:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a40:	f002 021f 	and.w	r2, r2, #31
24006a44:	4093      	lsls	r3, r2
24006a46:	604b      	str	r3, [r1, #4]
24006a48:	e719      	b.n	2400687e <HAL_DMA_Abort+0x3b2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006a4a:	6813      	ldr	r3, [r2, #0]
24006a4c:	f023 030e 	bic.w	r3, r3, #14
24006a50:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24006a52:	6832      	ldr	r2, [r6, #0]
24006a54:	4615      	mov	r5, r2
24006a56:	e5c9      	b.n	240065ec <HAL_DMA_Abort+0x120>

24006a58 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24006a58:	2800      	cmp	r0, #0
24006a5a:	f000 8097 	beq.w	24006b8c <HAL_DMA_Abort_IT+0x134>
  if(hdma->State != HAL_DMA_STATE_BUSY)
24006a5e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24006a62:	4603      	mov	r3, r0
24006a64:	2a02      	cmp	r2, #2
24006a66:	f040 808d 	bne.w	24006b84 <HAL_DMA_Abort_IT+0x12c>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006a6a:	2110      	movs	r1, #16
{
24006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006a70:	f2c4 0102 	movt	r1, #16386	; 0x4002
24006a74:	6802      	ldr	r2, [r0, #0]
{
24006a76:	b087      	sub	sp, #28
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006a78:	428a      	cmp	r2, r1
24006a7a:	d078      	beq.n	24006b6e <HAL_DMA_Abort_IT+0x116>
24006a7c:	2028      	movs	r0, #40	; 0x28
24006a7e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006a82:	4282      	cmp	r2, r0
24006a84:	d073      	beq.n	24006b6e <HAL_DMA_Abort_IT+0x116>
24006a86:	f04f 0858 	mov.w	r8, #88	; 0x58
24006a8a:	f04f 0940 	mov.w	r9, #64	; 0x40
24006a8e:	2770      	movs	r7, #112	; 0x70
24006a90:	2688      	movs	r6, #136	; 0x88
24006a92:	f2c4 0802 	movt	r8, #16386	; 0x4002
24006a96:	f2c4 0902 	movt	r9, #16386	; 0x4002
24006a9a:	f2c4 0702 	movt	r7, #16386	; 0x4002
24006a9e:	f2c4 0602 	movt	r6, #16386	; 0x4002
24006aa2:	454a      	cmp	r2, r9
24006aa4:	bf18      	it	ne
24006aa6:	4542      	cmpne	r2, r8
24006aa8:	f04f 05a0 	mov.w	r5, #160	; 0xa0
24006aac:	f04f 0bb8 	mov.w	fp, #184	; 0xb8
24006ab0:	f44f 6482 	mov.w	r4, #1040	; 0x410
24006ab4:	bf0c      	ite	eq
24006ab6:	f04f 0a01 	moveq.w	sl, #1
24006aba:	f04f 0a00 	movne.w	sl, #0
24006abe:	f2c4 0502 	movt	r5, #16386	; 0x4002
24006ac2:	f2c4 0b02 	movt	fp, #16386	; 0x4002
24006ac6:	42ba      	cmp	r2, r7
24006ac8:	bf08      	it	eq
24006aca:	f04a 0a01 	orreq.w	sl, sl, #1
24006ace:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006ad2:	f44f 6e91 	mov.w	lr, #1160	; 0x488
24006ad6:	f44f 6c94 	mov.w	ip, #1184	; 0x4a0
24006ada:	42b2      	cmp	r2, r6
24006adc:	bf08      	it	eq
24006ade:	f04a 0a01 	orreq.w	sl, sl, #1
24006ae2:	9401      	str	r4, [sp, #4]
24006ae4:	f2c4 0e02 	movt	lr, #16386	; 0x4002
24006ae8:	f2c4 0c02 	movt	ip, #16386	; 0x4002
24006aec:	42aa      	cmp	r2, r5
24006aee:	bf08      	it	eq
24006af0:	f04a 0a01 	orreq.w	sl, sl, #1
24006af4:	455a      	cmp	r2, fp
24006af6:	bf08      	it	eq
24006af8:	f04a 0a01 	orreq.w	sl, sl, #1
24006afc:	42a2      	cmp	r2, r4
24006afe:	bf08      	it	eq
24006b00:	f04a 0a01 	orreq.w	sl, sl, #1
24006b04:	f44f 6485 	mov.w	r4, #1064	; 0x428
24006b08:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006b0c:	42a2      	cmp	r2, r4
24006b0e:	bf08      	it	eq
24006b10:	f04a 0a01 	orreq.w	sl, sl, #1
24006b14:	9402      	str	r4, [sp, #8]
24006b16:	f44f 6488 	mov.w	r4, #1088	; 0x440
24006b1a:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006b1e:	42a2      	cmp	r2, r4
24006b20:	bf08      	it	eq
24006b22:	f04a 0a01 	orreq.w	sl, sl, #1
24006b26:	9403      	str	r4, [sp, #12]
24006b28:	f44f 648b 	mov.w	r4, #1112	; 0x458
24006b2c:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006b30:	42a2      	cmp	r2, r4
24006b32:	bf08      	it	eq
24006b34:	f04a 0a01 	orreq.w	sl, sl, #1
24006b38:	9404      	str	r4, [sp, #16]
24006b3a:	f44f 648e 	mov.w	r4, #1136	; 0x470
24006b3e:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006b42:	42a2      	cmp	r2, r4
24006b44:	bf08      	it	eq
24006b46:	f04a 0a01 	orreq.w	sl, sl, #1
24006b4a:	9405      	str	r4, [sp, #20]
24006b4c:	4572      	cmp	r2, lr
24006b4e:	bf08      	it	eq
24006b50:	f04a 0a01 	orreq.w	sl, sl, #1
24006b54:	4562      	cmp	r2, ip
24006b56:	bf08      	it	eq
24006b58:	f04a 0a01 	orreq.w	sl, sl, #1
24006b5c:	f1ba 0f00 	cmp.w	sl, #0
24006b60:	d105      	bne.n	24006b6e <HAL_DMA_Abort_IT+0x116>
24006b62:	f44f 6a97 	mov.w	sl, #1208	; 0x4b8
24006b66:	f2c4 0a02 	movt	sl, #16386	; 0x4002
24006b6a:	4552      	cmp	r2, sl
24006b6c:	d110      	bne.n	24006b90 <HAL_DMA_Abort_IT+0x138>
      hdma->State = HAL_DMA_STATE_ABORT;
24006b6e:	2104      	movs	r1, #4
  return HAL_OK;
24006b70:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
24006b72:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
24006b76:	6813      	ldr	r3, [r2, #0]
24006b78:	f023 0301 	bic.w	r3, r3, #1
24006b7c:	6013      	str	r3, [r2, #0]
}
24006b7e:	b007      	add	sp, #28
24006b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006b84:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24006b86:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006b88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24006b8a:	4770      	bx	lr
    return HAL_ERROR;
24006b8c:	2001      	movs	r0, #1
}
24006b8e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006b90:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006b92:	2040      	movs	r0, #64	; 0x40
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006b94:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006b98:	f2c4 0002 	movt	r0, #16386	; 0x4002
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006b9c:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
24006b9e:	681a      	ldr	r2, [r3, #0]
24006ba0:	4614      	mov	r4, r2
24006ba2:	6812      	ldr	r2, [r2, #0]
24006ba4:	f022 0201 	bic.w	r2, r2, #1
24006ba8:	6022      	str	r2, [r4, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006baa:	2210      	movs	r2, #16
24006bac:	2428      	movs	r4, #40	; 0x28
24006bae:	6819      	ldr	r1, [r3, #0]
24006bb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006bb4:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006bb8:	42a1      	cmp	r1, r4
24006bba:	bf18      	it	ne
24006bbc:	4291      	cmpne	r1, r2
24006bbe:	f04f 0458 	mov.w	r4, #88	; 0x58
24006bc2:	bf0c      	ite	eq
24006bc4:	2201      	moveq	r2, #1
24006bc6:	2200      	movne	r2, #0
24006bc8:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006bcc:	4281      	cmp	r1, r0
24006bce:	bf08      	it	eq
24006bd0:	f042 0201 	orreq.w	r2, r2, #1
24006bd4:	2070      	movs	r0, #112	; 0x70
24006bd6:	42a1      	cmp	r1, r4
24006bd8:	bf08      	it	eq
24006bda:	f042 0201 	orreq.w	r2, r2, #1
24006bde:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006be2:	2488      	movs	r4, #136	; 0x88
24006be4:	4281      	cmp	r1, r0
24006be6:	bf08      	it	eq
24006be8:	f042 0201 	orreq.w	r2, r2, #1
24006bec:	20a0      	movs	r0, #160	; 0xa0
24006bee:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006bf2:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006bf6:	42a1      	cmp	r1, r4
24006bf8:	bf08      	it	eq
24006bfa:	f042 0201 	orreq.w	r2, r2, #1
24006bfe:	24b8      	movs	r4, #184	; 0xb8
24006c00:	4281      	cmp	r1, r0
24006c02:	bf08      	it	eq
24006c04:	f042 0201 	orreq.w	r2, r2, #1
24006c08:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006c0c:	f44f 6082 	mov.w	r0, #1040	; 0x410
24006c10:	42a1      	cmp	r1, r4
24006c12:	bf08      	it	eq
24006c14:	f042 0201 	orreq.w	r2, r2, #1
24006c18:	f44f 6485 	mov.w	r4, #1064	; 0x428
24006c1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006c20:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006c24:	4281      	cmp	r1, r0
24006c26:	bf08      	it	eq
24006c28:	f042 0201 	orreq.w	r2, r2, #1
24006c2c:	f44f 6088 	mov.w	r0, #1088	; 0x440
24006c30:	42a1      	cmp	r1, r4
24006c32:	bf08      	it	eq
24006c34:	f042 0201 	orreq.w	r2, r2, #1
24006c38:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006c3c:	f44f 648b 	mov.w	r4, #1112	; 0x458
24006c40:	4281      	cmp	r1, r0
24006c42:	bf08      	it	eq
24006c44:	f042 0201 	orreq.w	r2, r2, #1
24006c48:	f44f 608e 	mov.w	r0, #1136	; 0x470
24006c4c:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006c50:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006c54:	42a1      	cmp	r1, r4
24006c56:	bf08      	it	eq
24006c58:	f042 0201 	orreq.w	r2, r2, #1
24006c5c:	f44f 6491 	mov.w	r4, #1160	; 0x488
24006c60:	4281      	cmp	r1, r0
24006c62:	bf08      	it	eq
24006c64:	f042 0201 	orreq.w	r2, r2, #1
24006c68:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006c6c:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
24006c70:	42a1      	cmp	r1, r4
24006c72:	bf08      	it	eq
24006c74:	f042 0201 	orreq.w	r2, r2, #1
24006c78:	f44f 6497 	mov.w	r4, #1208	; 0x4b8
24006c7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006c80:	f2c4 0402 	movt	r4, #16386	; 0x4002
24006c84:	4281      	cmp	r1, r0
24006c86:	bf08      	it	eq
24006c88:	f042 0201 	orreq.w	r2, r2, #1
24006c8c:	f245 4008 	movw	r0, #21512	; 0x5408
24006c90:	42a1      	cmp	r1, r4
24006c92:	bf08      	it	eq
24006c94:	f042 0201 	orreq.w	r2, r2, #1
24006c98:	f6c5 0002 	movt	r0, #22530	; 0x5802
24006c9c:	f245 441c 	movw	r4, #21532	; 0x541c
24006ca0:	4281      	cmp	r1, r0
24006ca2:	bf08      	it	eq
24006ca4:	f042 0201 	orreq.w	r2, r2, #1
24006ca8:	f245 4030 	movw	r0, #21552	; 0x5430
24006cac:	f6c5 0402 	movt	r4, #22530	; 0x5802
24006cb0:	f6c5 0002 	movt	r0, #22530	; 0x5802
24006cb4:	42a1      	cmp	r1, r4
24006cb6:	bf08      	it	eq
24006cb8:	f042 0201 	orreq.w	r2, r2, #1
24006cbc:	f245 4444 	movw	r4, #21572	; 0x5444
24006cc0:	4281      	cmp	r1, r0
24006cc2:	bf08      	it	eq
24006cc4:	f042 0201 	orreq.w	r2, r2, #1
24006cc8:	f6c5 0402 	movt	r4, #22530	; 0x5802
24006ccc:	f245 4058 	movw	r0, #21592	; 0x5458
24006cd0:	42a1      	cmp	r1, r4
24006cd2:	bf08      	it	eq
24006cd4:	f042 0201 	orreq.w	r2, r2, #1
24006cd8:	f245 446c 	movw	r4, #21612	; 0x546c
24006cdc:	f6c5 0002 	movt	r0, #22530	; 0x5802
24006ce0:	f6c5 0402 	movt	r4, #22530	; 0x5802
24006ce4:	4281      	cmp	r1, r0
24006ce6:	bf08      	it	eq
24006ce8:	f042 0201 	orreq.w	r2, r2, #1
24006cec:	f44f 40a9 	mov.w	r0, #21632	; 0x5480
24006cf0:	42a1      	cmp	r1, r4
24006cf2:	bf08      	it	eq
24006cf4:	f042 0201 	orreq.w	r2, r2, #1
24006cf8:	f6c5 0002 	movt	r0, #22530	; 0x5802
24006cfc:	4281      	cmp	r1, r0
24006cfe:	bf08      	it	eq
24006d00:	f042 0201 	orreq.w	r2, r2, #1
24006d04:	b92a      	cbnz	r2, 24006d12 <HAL_DMA_Abort_IT+0x2ba>
24006d06:	f245 4294 	movw	r2, #21652	; 0x5494
24006d0a:	f6c5 0202 	movt	r2, #22530	; 0x5802
24006d0e:	4291      	cmp	r1, r2
24006d10:	d117      	bne.n	24006d42 <HAL_DMA_Abort_IT+0x2ea>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006d12:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006d14:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006d16:	6801      	ldr	r1, [r0, #0]
24006d18:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24006d1c:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006d1e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006d22:	f001 011f 	and.w	r1, r1, #31
24006d26:	408a      	lsls	r2, r1
24006d28:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006d2a:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24006d2e:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24006d30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24006d32:	b132      	cbz	r2, 24006d42 <HAL_DMA_Abort_IT+0x2ea>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006d34:	6811      	ldr	r1, [r2, #0]
24006d36:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24006d3a:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006d3c:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
24006d40:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
24006d42:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24006d44:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24006d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24006d48:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24006d4c:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24006d50:	b11a      	cbz	r2, 24006d5a <HAL_DMA_Abort_IT+0x302>
        hdma->XferAbortCallback(hdma);
24006d52:	4618      	mov	r0, r3
24006d54:	4790      	blx	r2
  return HAL_OK;
24006d56:	4620      	mov	r0, r4
24006d58:	e711      	b.n	24006b7e <HAL_DMA_Abort_IT+0x126>
24006d5a:	4610      	mov	r0, r2
24006d5c:	e70f      	b.n	24006b7e <HAL_DMA_Abort_IT+0x126>
24006d5e:	bf00      	nop

24006d60 <HAL_DMA_IRQHandler>:
{
24006d60:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
24006d62:	2200      	movs	r2, #0
{
24006d64:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
24006d66:	f640 03ec 	movw	r3, #2284	; 0x8ec
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006d6a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
24006d6c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006d6e:	2210      	movs	r2, #16
  uint32_t timeout = SystemCoreClock / 9600U;
24006d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tmpisr_dma  = regs_dma->ISR;
24006d74:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006d76:	f2c4 0202 	movt	r2, #16386	; 0x4002
{
24006d7a:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
24006d7c:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006d7e:	6803      	ldr	r3, [r0, #0]
  tmpisr_bdma = regs_bdma->ISR;
24006d80:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006d82:	4293      	cmp	r3, r2
24006d84:	d06d      	beq.n	24006e62 <HAL_DMA_IRQHandler+0x102>
24006d86:	2228      	movs	r2, #40	; 0x28
24006d88:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006d8c:	4293      	cmp	r3, r2
24006d8e:	d068      	beq.n	24006e62 <HAL_DMA_IRQHandler+0x102>
24006d90:	2240      	movs	r2, #64	; 0x40
24006d92:	2058      	movs	r0, #88	; 0x58
24006d94:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006d98:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006d9c:	4283      	cmp	r3, r0
24006d9e:	bf18      	it	ne
24006da0:	4293      	cmpne	r3, r2
24006da2:	f04f 0070 	mov.w	r0, #112	; 0x70
24006da6:	bf0c      	ite	eq
24006da8:	2201      	moveq	r2, #1
24006daa:	2200      	movne	r2, #0
24006dac:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006db0:	4283      	cmp	r3, r0
24006db2:	bf08      	it	eq
24006db4:	f042 0201 	orreq.w	r2, r2, #1
24006db8:	2088      	movs	r0, #136	; 0x88
24006dba:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006dbe:	4283      	cmp	r3, r0
24006dc0:	bf08      	it	eq
24006dc2:	f042 0201 	orreq.w	r2, r2, #1
24006dc6:	20a0      	movs	r0, #160	; 0xa0
24006dc8:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006dcc:	4283      	cmp	r3, r0
24006dce:	bf08      	it	eq
24006dd0:	f042 0201 	orreq.w	r2, r2, #1
24006dd4:	20b8      	movs	r0, #184	; 0xb8
24006dd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006dda:	4283      	cmp	r3, r0
24006ddc:	bf08      	it	eq
24006dde:	f042 0201 	orreq.w	r2, r2, #1
24006de2:	f44f 6082 	mov.w	r0, #1040	; 0x410
24006de6:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006dea:	4283      	cmp	r3, r0
24006dec:	bf08      	it	eq
24006dee:	f042 0201 	orreq.w	r2, r2, #1
24006df2:	f44f 6085 	mov.w	r0, #1064	; 0x428
24006df6:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006dfa:	4283      	cmp	r3, r0
24006dfc:	bf08      	it	eq
24006dfe:	f042 0201 	orreq.w	r2, r2, #1
24006e02:	f44f 6088 	mov.w	r0, #1088	; 0x440
24006e06:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006e0a:	4283      	cmp	r3, r0
24006e0c:	bf08      	it	eq
24006e0e:	f042 0201 	orreq.w	r2, r2, #1
24006e12:	f44f 608b 	mov.w	r0, #1112	; 0x458
24006e16:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006e1a:	4283      	cmp	r3, r0
24006e1c:	bf08      	it	eq
24006e1e:	f042 0201 	orreq.w	r2, r2, #1
24006e22:	f44f 608e 	mov.w	r0, #1136	; 0x470
24006e26:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006e2a:	4283      	cmp	r3, r0
24006e2c:	bf08      	it	eq
24006e2e:	f042 0201 	orreq.w	r2, r2, #1
24006e32:	f44f 6091 	mov.w	r0, #1160	; 0x488
24006e36:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006e3a:	4283      	cmp	r3, r0
24006e3c:	bf08      	it	eq
24006e3e:	f042 0201 	orreq.w	r2, r2, #1
24006e42:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
24006e46:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006e4a:	4283      	cmp	r3, r0
24006e4c:	bf08      	it	eq
24006e4e:	f042 0201 	orreq.w	r2, r2, #1
24006e52:	b932      	cbnz	r2, 24006e62 <HAL_DMA_IRQHandler+0x102>
24006e54:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
24006e58:	f2c4 0202 	movt	r2, #16386	; 0x4002
24006e5c:	4293      	cmp	r3, r2
24006e5e:	f040 8322 	bne.w	240074a6 <HAL_DMA_IRQHandler+0x746>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006e62:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
24006e66:	2208      	movs	r2, #8
24006e68:	f00e 011f 	and.w	r1, lr, #31
24006e6c:	408a      	lsls	r2, r1
24006e6e:	422a      	tst	r2, r5
24006e70:	f040 8203 	bne.w	2400727a <HAL_DMA_IRQHandler+0x51a>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006e74:	fa25 f201 	lsr.w	r2, r5, r1
24006e78:	07d2      	lsls	r2, r2, #31
24006e7a:	d50e      	bpl.n	24006e9a <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006e7c:	695a      	ldr	r2, [r3, #20]
24006e7e:	0612      	lsls	r2, r2, #24
24006e80:	f140 82db 	bpl.w	2400743a <HAL_DMA_IRQHandler+0x6da>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006e84:	2301      	movs	r3, #1
24006e86:	408b      	lsls	r3, r1
24006e88:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24006e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006e8c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24006e90:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006e94:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24006e98:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006e9a:	f04f 0c04 	mov.w	ip, #4
24006e9e:	fa0c fc01 	lsl.w	ip, ip, r1
24006ea2:	ea1c 0f05 	tst.w	ip, r5
24006ea6:	f000 8087 	beq.w	24006fb8 <HAL_DMA_IRQHandler+0x258>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006eaa:	2310      	movs	r3, #16
24006eac:	2028      	movs	r0, #40	; 0x28
24006eae:	6822      	ldr	r2, [r4, #0]
24006eb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006eb8:	4282      	cmp	r2, r0
24006eba:	bf18      	it	ne
24006ebc:	429a      	cmpne	r2, r3
24006ebe:	f04f 0340 	mov.w	r3, #64	; 0x40
24006ec2:	bf0c      	ite	eq
24006ec4:	2001      	moveq	r0, #1
24006ec6:	2000      	movne	r0, #0
24006ec8:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006ecc:	429a      	cmp	r2, r3
24006ece:	bf08      	it	eq
24006ed0:	f040 0001 	orreq.w	r0, r0, #1
24006ed4:	2358      	movs	r3, #88	; 0x58
24006ed6:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006eda:	429a      	cmp	r2, r3
24006edc:	bf08      	it	eq
24006ede:	f040 0001 	orreq.w	r0, r0, #1
24006ee2:	2370      	movs	r3, #112	; 0x70
24006ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006ee8:	429a      	cmp	r2, r3
24006eea:	bf08      	it	eq
24006eec:	f040 0001 	orreq.w	r0, r0, #1
24006ef0:	2388      	movs	r3, #136	; 0x88
24006ef2:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006ef6:	429a      	cmp	r2, r3
24006ef8:	bf08      	it	eq
24006efa:	f040 0001 	orreq.w	r0, r0, #1
24006efe:	23a0      	movs	r3, #160	; 0xa0
24006f00:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f04:	429a      	cmp	r2, r3
24006f06:	bf08      	it	eq
24006f08:	f040 0001 	orreq.w	r0, r0, #1
24006f0c:	23b8      	movs	r3, #184	; 0xb8
24006f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f12:	429a      	cmp	r2, r3
24006f14:	bf08      	it	eq
24006f16:	f040 0001 	orreq.w	r0, r0, #1
24006f1a:	f44f 6382 	mov.w	r3, #1040	; 0x410
24006f1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f22:	429a      	cmp	r2, r3
24006f24:	bf08      	it	eq
24006f26:	f040 0001 	orreq.w	r0, r0, #1
24006f2a:	f44f 6385 	mov.w	r3, #1064	; 0x428
24006f2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f32:	429a      	cmp	r2, r3
24006f34:	bf08      	it	eq
24006f36:	f040 0001 	orreq.w	r0, r0, #1
24006f3a:	f44f 6388 	mov.w	r3, #1088	; 0x440
24006f3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f42:	429a      	cmp	r2, r3
24006f44:	bf08      	it	eq
24006f46:	f040 0001 	orreq.w	r0, r0, #1
24006f4a:	f44f 638b 	mov.w	r3, #1112	; 0x458
24006f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f52:	429a      	cmp	r2, r3
24006f54:	bf08      	it	eq
24006f56:	f040 0001 	orreq.w	r0, r0, #1
24006f5a:	f44f 638e 	mov.w	r3, #1136	; 0x470
24006f5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f62:	429a      	cmp	r2, r3
24006f64:	bf08      	it	eq
24006f66:	f040 0001 	orreq.w	r0, r0, #1
24006f6a:	f44f 6391 	mov.w	r3, #1160	; 0x488
24006f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f72:	429a      	cmp	r2, r3
24006f74:	bf08      	it	eq
24006f76:	f040 0001 	orreq.w	r0, r0, #1
24006f7a:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
24006f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006f82:	429a      	cmp	r2, r3
24006f84:	bf08      	it	eq
24006f86:	f040 0001 	orreq.w	r0, r0, #1
24006f8a:	4613      	mov	r3, r2
24006f8c:	b930      	cbnz	r0, 24006f9c <HAL_DMA_IRQHandler+0x23c>
24006f8e:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
24006f92:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006f96:	4282      	cmp	r2, r0
24006f98:	f040 82d7 	bne.w	2400754a <HAL_DMA_IRQHandler+0x7ea>
24006f9c:	681a      	ldr	r2, [r3, #0]
24006f9e:	0790      	lsls	r0, r2, #30
24006fa0:	f140 8257 	bpl.w	24007452 <HAL_DMA_IRQHandler+0x6f2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006fa4:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006fa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006faa:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006fae:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006fb2:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006fb6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006fb8:	f04f 0c10 	mov.w	ip, #16
24006fbc:	fa0c fc01 	lsl.w	ip, ip, r1
24006fc0:	ea1c 0f05 	tst.w	ip, r5
24006fc4:	f000 8092 	beq.w	240070ec <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24006fc8:	2310      	movs	r3, #16
24006fca:	2028      	movs	r0, #40	; 0x28
24006fcc:	6822      	ldr	r2, [r4, #0]
24006fce:	f2c4 0002 	movt	r0, #16386	; 0x4002
24006fd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006fd6:	4282      	cmp	r2, r0
24006fd8:	bf18      	it	ne
24006fda:	429a      	cmpne	r2, r3
24006fdc:	f04f 0340 	mov.w	r3, #64	; 0x40
24006fe0:	bf0c      	ite	eq
24006fe2:	2001      	moveq	r0, #1
24006fe4:	2000      	movne	r0, #0
24006fe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006fea:	429a      	cmp	r2, r3
24006fec:	bf08      	it	eq
24006fee:	f040 0001 	orreq.w	r0, r0, #1
24006ff2:	2358      	movs	r3, #88	; 0x58
24006ff4:	f2c4 0302 	movt	r3, #16386	; 0x4002
24006ff8:	429a      	cmp	r2, r3
24006ffa:	bf08      	it	eq
24006ffc:	f040 0001 	orreq.w	r0, r0, #1
24007000:	2370      	movs	r3, #112	; 0x70
24007002:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007006:	429a      	cmp	r2, r3
24007008:	bf08      	it	eq
2400700a:	f040 0001 	orreq.w	r0, r0, #1
2400700e:	2388      	movs	r3, #136	; 0x88
24007010:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007014:	429a      	cmp	r2, r3
24007016:	bf08      	it	eq
24007018:	f040 0001 	orreq.w	r0, r0, #1
2400701c:	23a0      	movs	r3, #160	; 0xa0
2400701e:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007022:	429a      	cmp	r2, r3
24007024:	bf08      	it	eq
24007026:	f040 0001 	orreq.w	r0, r0, #1
2400702a:	23b8      	movs	r3, #184	; 0xb8
2400702c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007030:	429a      	cmp	r2, r3
24007032:	bf08      	it	eq
24007034:	f040 0001 	orreq.w	r0, r0, #1
24007038:	f44f 6382 	mov.w	r3, #1040	; 0x410
2400703c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007040:	429a      	cmp	r2, r3
24007042:	bf08      	it	eq
24007044:	f040 0001 	orreq.w	r0, r0, #1
24007048:	f44f 6385 	mov.w	r3, #1064	; 0x428
2400704c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007050:	429a      	cmp	r2, r3
24007052:	bf08      	it	eq
24007054:	f040 0001 	orreq.w	r0, r0, #1
24007058:	f44f 6388 	mov.w	r3, #1088	; 0x440
2400705c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007060:	429a      	cmp	r2, r3
24007062:	bf08      	it	eq
24007064:	f040 0001 	orreq.w	r0, r0, #1
24007068:	f44f 638b 	mov.w	r3, #1112	; 0x458
2400706c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007070:	429a      	cmp	r2, r3
24007072:	bf08      	it	eq
24007074:	f040 0001 	orreq.w	r0, r0, #1
24007078:	f44f 638e 	mov.w	r3, #1136	; 0x470
2400707c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007080:	429a      	cmp	r2, r3
24007082:	bf08      	it	eq
24007084:	f040 0001 	orreq.w	r0, r0, #1
24007088:	f44f 6391 	mov.w	r3, #1160	; 0x488
2400708c:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007090:	429a      	cmp	r2, r3
24007092:	bf08      	it	eq
24007094:	f040 0001 	orreq.w	r0, r0, #1
24007098:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
2400709c:	f2c4 0302 	movt	r3, #16386	; 0x4002
240070a0:	429a      	cmp	r2, r3
240070a2:	bf08      	it	eq
240070a4:	f040 0001 	orreq.w	r0, r0, #1
240070a8:	4613      	mov	r3, r2
240070aa:	b930      	cbnz	r0, 240070ba <HAL_DMA_IRQHandler+0x35a>
240070ac:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
240070b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
240070b4:	4282      	cmp	r2, r0
240070b6:	f040 8183 	bne.w	240073c0 <HAL_DMA_IRQHandler+0x660>
240070ba:	681a      	ldr	r2, [r3, #0]
240070bc:	0712      	lsls	r2, r2, #28
240070be:	f140 81b5 	bpl.w	2400742c <HAL_DMA_IRQHandler+0x6cc>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
240070c2:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240070c6:	6823      	ldr	r3, [r4, #0]
240070c8:	681a      	ldr	r2, [r3, #0]
240070ca:	0350      	lsls	r0, r2, #13
240070cc:	f100 81ca 	bmi.w	24007464 <HAL_DMA_IRQHandler+0x704>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240070d0:	681a      	ldr	r2, [r3, #0]
240070d2:	05d2      	lsls	r2, r2, #23
240070d4:	d403      	bmi.n	240070de <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240070d6:	681a      	ldr	r2, [r3, #0]
240070d8:	f022 0208 	bic.w	r2, r2, #8
240070dc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
240070de:	6c23      	ldr	r3, [r4, #64]	; 0x40
240070e0:	b10b      	cbz	r3, 240070e6 <HAL_DMA_IRQHandler+0x386>
            hdma->XferHalfCpltCallback(hdma);
240070e2:	4620      	mov	r0, r4
240070e4:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240070e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240070e8:	f001 011f 	and.w	r1, r1, #31
240070ec:	2320      	movs	r3, #32
240070ee:	fa03 f101 	lsl.w	r1, r3, r1
240070f2:	4229      	tst	r1, r5
240070f4:	f000 808e 	beq.w	24007214 <HAL_DMA_IRQHandler+0x4b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240070f8:	2210      	movs	r2, #16
240070fa:	2028      	movs	r0, #40	; 0x28
240070fc:	6823      	ldr	r3, [r4, #0]
240070fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
24007102:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007106:	4283      	cmp	r3, r0
24007108:	bf18      	it	ne
2400710a:	4293      	cmpne	r3, r2
2400710c:	f04f 0040 	mov.w	r0, #64	; 0x40
24007110:	bf0c      	ite	eq
24007112:	2201      	moveq	r2, #1
24007114:	2200      	movne	r2, #0
24007116:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400711a:	4283      	cmp	r3, r0
2400711c:	bf08      	it	eq
2400711e:	f042 0201 	orreq.w	r2, r2, #1
24007122:	2058      	movs	r0, #88	; 0x58
24007124:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007128:	4283      	cmp	r3, r0
2400712a:	bf08      	it	eq
2400712c:	f042 0201 	orreq.w	r2, r2, #1
24007130:	2070      	movs	r0, #112	; 0x70
24007132:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007136:	4283      	cmp	r3, r0
24007138:	bf08      	it	eq
2400713a:	f042 0201 	orreq.w	r2, r2, #1
2400713e:	2088      	movs	r0, #136	; 0x88
24007140:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007144:	4283      	cmp	r3, r0
24007146:	bf08      	it	eq
24007148:	f042 0201 	orreq.w	r2, r2, #1
2400714c:	20a0      	movs	r0, #160	; 0xa0
2400714e:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007152:	4283      	cmp	r3, r0
24007154:	bf08      	it	eq
24007156:	f042 0201 	orreq.w	r2, r2, #1
2400715a:	20b8      	movs	r0, #184	; 0xb8
2400715c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007160:	4283      	cmp	r3, r0
24007162:	bf08      	it	eq
24007164:	f042 0201 	orreq.w	r2, r2, #1
24007168:	f44f 6082 	mov.w	r0, #1040	; 0x410
2400716c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007170:	4283      	cmp	r3, r0
24007172:	bf08      	it	eq
24007174:	f042 0201 	orreq.w	r2, r2, #1
24007178:	f44f 6085 	mov.w	r0, #1064	; 0x428
2400717c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007180:	4283      	cmp	r3, r0
24007182:	bf08      	it	eq
24007184:	f042 0201 	orreq.w	r2, r2, #1
24007188:	f44f 6088 	mov.w	r0, #1088	; 0x440
2400718c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007190:	4283      	cmp	r3, r0
24007192:	bf08      	it	eq
24007194:	f042 0201 	orreq.w	r2, r2, #1
24007198:	f44f 608b 	mov.w	r0, #1112	; 0x458
2400719c:	f2c4 0002 	movt	r0, #16386	; 0x4002
240071a0:	4283      	cmp	r3, r0
240071a2:	bf08      	it	eq
240071a4:	f042 0201 	orreq.w	r2, r2, #1
240071a8:	f44f 608e 	mov.w	r0, #1136	; 0x470
240071ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
240071b0:	4283      	cmp	r3, r0
240071b2:	bf08      	it	eq
240071b4:	f042 0201 	orreq.w	r2, r2, #1
240071b8:	f44f 6091 	mov.w	r0, #1160	; 0x488
240071bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
240071c0:	4283      	cmp	r3, r0
240071c2:	bf08      	it	eq
240071c4:	f042 0201 	orreq.w	r2, r2, #1
240071c8:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
240071cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
240071d0:	4283      	cmp	r3, r0
240071d2:	bf08      	it	eq
240071d4:	f042 0201 	orreq.w	r2, r2, #1
240071d8:	b932      	cbnz	r2, 240071e8 <HAL_DMA_IRQHandler+0x488>
240071da:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
240071de:	f2c4 0202 	movt	r2, #16386	; 0x4002
240071e2:	4293      	cmp	r3, r2
240071e4:	f040 80f9 	bne.w	240073da <HAL_DMA_IRQHandler+0x67a>
240071e8:	681b      	ldr	r3, [r3, #0]
240071ea:	06dd      	lsls	r5, r3, #27
240071ec:	d512      	bpl.n	24007214 <HAL_DMA_IRQHandler+0x4b4>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
240071ee:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
240071f0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
240071f4:	2b04      	cmp	r3, #4
240071f6:	f000 80f5 	beq.w	240073e4 <HAL_DMA_IRQHandler+0x684>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240071fa:	6823      	ldr	r3, [r4, #0]
240071fc:	681a      	ldr	r2, [r3, #0]
240071fe:	0352      	lsls	r2, r2, #13
24007200:	f140 8139 	bpl.w	24007476 <HAL_DMA_IRQHandler+0x716>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24007204:	681b      	ldr	r3, [r3, #0]
24007206:	031e      	lsls	r6, r3, #12
24007208:	f140 8144 	bpl.w	24007494 <HAL_DMA_IRQHandler+0x734>
          if(hdma->XferCpltCallback != NULL)
2400720c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400720e:	b10b      	cbz	r3, 24007214 <HAL_DMA_IRQHandler+0x4b4>
            hdma->XferCpltCallback(hdma);
24007210:	4620      	mov	r0, r4
24007212:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24007214:	6d63      	ldr	r3, [r4, #84]	; 0x54
24007216:	2b00      	cmp	r3, #0
24007218:	f000 8106 	beq.w	24007428 <HAL_DMA_IRQHandler+0x6c8>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2400721c:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400721e:	07dd      	lsls	r5, r3, #31
24007220:	d522      	bpl.n	24007268 <HAL_DMA_IRQHandler+0x508>
        __HAL_DMA_DISABLE(hdma);
24007222:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
24007224:	2004      	movs	r0, #4
24007226:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
2400722a:	6813      	ldr	r3, [r2, #0]
2400722c:	f023 0301 	bic.w	r3, r3, #1
24007230:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24007232:	f248 12b5 	movw	r2, #33205	; 0x81b5
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24007236:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24007238:	f6c1 324e 	movt	r2, #6990	; 0x1b4e
2400723c:	fba2 7207 	umull	r7, r2, r2, r7
24007240:	0a92      	lsrs	r2, r2, #10
24007242:	e002      	b.n	2400724a <HAL_DMA_IRQHandler+0x4ea>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24007244:	680b      	ldr	r3, [r1, #0]
24007246:	07d8      	lsls	r0, r3, #31
24007248:	d504      	bpl.n	24007254 <HAL_DMA_IRQHandler+0x4f4>
          if (++count > timeout)
2400724a:	9b01      	ldr	r3, [sp, #4]
2400724c:	3301      	adds	r3, #1
2400724e:	4293      	cmp	r3, r2
24007250:	9301      	str	r3, [sp, #4]
24007252:	d9f7      	bls.n	24007244 <HAL_DMA_IRQHandler+0x4e4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24007254:	680b      	ldr	r3, [r1, #0]
24007256:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24007258:	bf4c      	ite	mi
2400725a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
2400725c:	2301      	movpl	r3, #1
2400725e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24007262:	2300      	movs	r3, #0
24007264:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24007268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
2400726a:	2b00      	cmp	r3, #0
2400726c:	f000 80dc 	beq.w	24007428 <HAL_DMA_IRQHandler+0x6c8>
        hdma->XferErrorCallback(hdma);
24007270:	4620      	mov	r0, r4
}
24007272:	b003      	add	sp, #12
24007274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
24007278:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
2400727a:	681a      	ldr	r2, [r3, #0]
2400727c:	0752      	lsls	r2, r2, #29
2400727e:	d511      	bpl.n	240072a4 <HAL_DMA_IRQHandler+0x544>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24007280:	681a      	ldr	r2, [r3, #0]
24007282:	f022 0204 	bic.w	r2, r2, #4
24007286:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24007288:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2400728a:	f003 021f 	and.w	r2, r3, #31
2400728e:	2308      	movs	r3, #8
24007290:	4093      	lsls	r3, r2
24007292:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24007294:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007296:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2400729a:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400729e:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240072a2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240072a4:	fa25 f301 	lsr.w	r3, r5, r1
240072a8:	07d8      	lsls	r0, r3, #31
240072aa:	f57f adf6 	bpl.w	24006e9a <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240072ae:	2310      	movs	r3, #16
240072b0:	2028      	movs	r0, #40	; 0x28
240072b2:	6822      	ldr	r2, [r4, #0]
240072b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240072b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
240072bc:	4282      	cmp	r2, r0
240072be:	bf18      	it	ne
240072c0:	429a      	cmpne	r2, r3
240072c2:	f04f 0340 	mov.w	r3, #64	; 0x40
240072c6:	bf0c      	ite	eq
240072c8:	2001      	moveq	r0, #1
240072ca:	2000      	movne	r0, #0
240072cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
240072d0:	429a      	cmp	r2, r3
240072d2:	bf08      	it	eq
240072d4:	f040 0001 	orreq.w	r0, r0, #1
240072d8:	2358      	movs	r3, #88	; 0x58
240072da:	f2c4 0302 	movt	r3, #16386	; 0x4002
240072de:	429a      	cmp	r2, r3
240072e0:	bf08      	it	eq
240072e2:	f040 0001 	orreq.w	r0, r0, #1
240072e6:	2370      	movs	r3, #112	; 0x70
240072e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
240072ec:	429a      	cmp	r2, r3
240072ee:	bf08      	it	eq
240072f0:	f040 0001 	orreq.w	r0, r0, #1
240072f4:	2388      	movs	r3, #136	; 0x88
240072f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
240072fa:	429a      	cmp	r2, r3
240072fc:	bf08      	it	eq
240072fe:	f040 0001 	orreq.w	r0, r0, #1
24007302:	23a0      	movs	r3, #160	; 0xa0
24007304:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007308:	429a      	cmp	r2, r3
2400730a:	bf08      	it	eq
2400730c:	f040 0001 	orreq.w	r0, r0, #1
24007310:	23b8      	movs	r3, #184	; 0xb8
24007312:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007316:	429a      	cmp	r2, r3
24007318:	bf08      	it	eq
2400731a:	f040 0001 	orreq.w	r0, r0, #1
2400731e:	f44f 6382 	mov.w	r3, #1040	; 0x410
24007322:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007326:	429a      	cmp	r2, r3
24007328:	bf08      	it	eq
2400732a:	f040 0001 	orreq.w	r0, r0, #1
2400732e:	f44f 6385 	mov.w	r3, #1064	; 0x428
24007332:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007336:	429a      	cmp	r2, r3
24007338:	bf08      	it	eq
2400733a:	f040 0001 	orreq.w	r0, r0, #1
2400733e:	f44f 6388 	mov.w	r3, #1088	; 0x440
24007342:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007346:	429a      	cmp	r2, r3
24007348:	bf08      	it	eq
2400734a:	f040 0001 	orreq.w	r0, r0, #1
2400734e:	f44f 638b 	mov.w	r3, #1112	; 0x458
24007352:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007356:	429a      	cmp	r2, r3
24007358:	bf08      	it	eq
2400735a:	f040 0001 	orreq.w	r0, r0, #1
2400735e:	f44f 638e 	mov.w	r3, #1136	; 0x470
24007362:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007366:	429a      	cmp	r2, r3
24007368:	bf08      	it	eq
2400736a:	f040 0001 	orreq.w	r0, r0, #1
2400736e:	f44f 6391 	mov.w	r3, #1160	; 0x488
24007372:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007376:	429a      	cmp	r2, r3
24007378:	bf08      	it	eq
2400737a:	f040 0001 	orreq.w	r0, r0, #1
2400737e:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
24007382:	f2c4 0302 	movt	r3, #16386	; 0x4002
24007386:	429a      	cmp	r2, r3
24007388:	bf08      	it	eq
2400738a:	f040 0001 	orreq.w	r0, r0, #1
2400738e:	4613      	mov	r3, r2
24007390:	2800      	cmp	r0, #0
24007392:	f47f ad73 	bne.w	24006e7c <HAL_DMA_IRQHandler+0x11c>
24007396:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
2400739a:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400739e:	4282      	cmp	r2, r0
240073a0:	f43f ad6c 	beq.w	24006e7c <HAL_DMA_IRQHandler+0x11c>
240073a4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240073a6:	2304      	movs	r3, #4
240073a8:	408b      	lsls	r3, r1
240073aa:	422b      	tst	r3, r5
240073ac:	f040 80cd 	bne.w	2400754a <HAL_DMA_IRQHandler+0x7ea>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240073b0:	f04f 0c10 	mov.w	ip, #16
240073b4:	fa0c fc01 	lsl.w	ip, ip, r1
240073b8:	ea15 0f0c 	tst.w	r5, ip
240073bc:	f43f ae96 	beq.w	240070ec <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240073c0:	6813      	ldr	r3, [r2, #0]
240073c2:	075b      	lsls	r3, r3, #29
240073c4:	f53f ae7d 	bmi.w	240070c2 <HAL_DMA_IRQHandler+0x362>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240073c8:	f00e 0e1f 	and.w	lr, lr, #31
240073cc:	2120      	movs	r1, #32
240073ce:	fa01 f10e 	lsl.w	r1, r1, lr
240073d2:	420d      	tst	r5, r1
240073d4:	f43f af1e 	beq.w	24007214 <HAL_DMA_IRQHandler+0x4b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240073d8:	4613      	mov	r3, r2
240073da:	681b      	ldr	r3, [r3, #0]
240073dc:	0798      	lsls	r0, r3, #30
240073de:	f57f af19 	bpl.w	24007214 <HAL_DMA_IRQHandler+0x4b4>
240073e2:	e704      	b.n	240071ee <HAL_DMA_IRQHandler+0x48e>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
240073e4:	6822      	ldr	r2, [r4, #0]
240073e6:	6813      	ldr	r3, [r2, #0]
240073e8:	f023 0316 	bic.w	r3, r3, #22
240073ec:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240073ee:	6822      	ldr	r2, [r4, #0]
240073f0:	6953      	ldr	r3, [r2, #20]
240073f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240073f6:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240073f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
240073fa:	2b00      	cmp	r3, #0
240073fc:	d04f      	beq.n	2400749e <HAL_DMA_IRQHandler+0x73e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240073fe:	6822      	ldr	r2, [r4, #0]
24007400:	6813      	ldr	r3, [r2, #0]
24007402:	f023 0308 	bic.w	r3, r3, #8
24007406:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007408:	6de2      	ldr	r2, [r4, #92]	; 0x5c
2400740a:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
2400740c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400740e:	f002 021f 	and.w	r2, r2, #31
24007412:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24007414:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007416:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
24007418:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
2400741a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
2400741e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24007422:	2b00      	cmp	r3, #0
24007424:	f47f af24 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
}
24007428:	b003      	add	sp, #12
2400742a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400742c:	2220      	movs	r2, #32
2400742e:	fa02 f101 	lsl.w	r1, r2, r1
24007432:	420d      	tst	r5, r1
24007434:	f47f aed8 	bne.w	240071e8 <HAL_DMA_IRQHandler+0x488>
24007438:	e6ec      	b.n	24007214 <HAL_DMA_IRQHandler+0x4b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400743a:	f04f 0c04 	mov.w	ip, #4
2400743e:	fa0c fc01 	lsl.w	ip, ip, r1
24007442:	ea15 0f0c 	tst.w	r5, ip
24007446:	f43f adb7 	beq.w	24006fb8 <HAL_DMA_IRQHandler+0x258>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400744a:	681a      	ldr	r2, [r3, #0]
2400744c:	0790      	lsls	r0, r2, #30
2400744e:	f53f ada9 	bmi.w	24006fa4 <HAL_DMA_IRQHandler+0x244>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007452:	f04f 0c10 	mov.w	ip, #16
24007456:	fa0c fc01 	lsl.w	ip, ip, r1
2400745a:	ea15 0f0c 	tst.w	r5, ip
2400745e:	f47f ae2c 	bne.w	240070ba <HAL_DMA_IRQHandler+0x35a>
24007462:	e643      	b.n	240070ec <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24007464:	681b      	ldr	r3, [r3, #0]
24007466:	0319      	lsls	r1, r3, #12
24007468:	f57f ae39 	bpl.w	240070de <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1HalfCpltCallback != NULL)
2400746c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2400746e:	2b00      	cmp	r3, #0
24007470:	f47f ae37 	bne.w	240070e2 <HAL_DMA_IRQHandler+0x382>
24007474:	e637      	b.n	240070e6 <HAL_DMA_IRQHandler+0x386>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24007476:	681a      	ldr	r2, [r3, #0]
24007478:	f412 7280 	ands.w	r2, r2, #256	; 0x100
2400747c:	f47f aec6 	bne.w	2400720c <HAL_DMA_IRQHandler+0x4ac>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24007480:	6819      	ldr	r1, [r3, #0]
24007482:	f021 0110 	bic.w	r1, r1, #16
24007486:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24007488:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
2400748a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
2400748e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24007492:	e6bb      	b.n	2400720c <HAL_DMA_IRQHandler+0x4ac>
            if(hdma->XferM1CpltCallback != NULL)
24007494:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007496:	2b00      	cmp	r3, #0
24007498:	f47f aeba 	bne.w	24007210 <HAL_DMA_IRQHandler+0x4b0>
2400749c:	e6ba      	b.n	24007214 <HAL_DMA_IRQHandler+0x4b4>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2400749e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240074a0:	2b00      	cmp	r3, #0
240074a2:	d1ac      	bne.n	240073fe <HAL_DMA_IRQHandler+0x69e>
240074a4:	e7b0      	b.n	24007408 <HAL_DMA_IRQHandler+0x6a8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
240074a6:	f245 4208 	movw	r2, #21512	; 0x5408
240074aa:	f245 401c 	movw	r0, #21532	; 0x541c
240074ae:	f6c5 0202 	movt	r2, #22530	; 0x5802
240074b2:	f6c5 0002 	movt	r0, #22530	; 0x5802
240074b6:	4283      	cmp	r3, r0
240074b8:	bf18      	it	ne
240074ba:	4293      	cmpne	r3, r2
240074bc:	f245 4030 	movw	r0, #21552	; 0x5430
240074c0:	bf0c      	ite	eq
240074c2:	2201      	moveq	r2, #1
240074c4:	2200      	movne	r2, #0
240074c6:	f6c5 0002 	movt	r0, #22530	; 0x5802
240074ca:	4283      	cmp	r3, r0
240074cc:	bf08      	it	eq
240074ce:	f042 0201 	orreq.w	r2, r2, #1
240074d2:	f245 4044 	movw	r0, #21572	; 0x5444
240074d6:	f6c5 0002 	movt	r0, #22530	; 0x5802
240074da:	4283      	cmp	r3, r0
240074dc:	bf08      	it	eq
240074de:	f042 0201 	orreq.w	r2, r2, #1
240074e2:	f245 4058 	movw	r0, #21592	; 0x5458
240074e6:	f6c5 0002 	movt	r0, #22530	; 0x5802
240074ea:	4283      	cmp	r3, r0
240074ec:	bf08      	it	eq
240074ee:	f042 0201 	orreq.w	r2, r2, #1
240074f2:	f245 406c 	movw	r0, #21612	; 0x546c
240074f6:	f6c5 0002 	movt	r0, #22530	; 0x5802
240074fa:	4283      	cmp	r3, r0
240074fc:	bf08      	it	eq
240074fe:	f042 0201 	orreq.w	r2, r2, #1
24007502:	f44f 40a9 	mov.w	r0, #21632	; 0x5480
24007506:	f6c5 0002 	movt	r0, #22530	; 0x5802
2400750a:	4283      	cmp	r3, r0
2400750c:	bf08      	it	eq
2400750e:	f042 0201 	orreq.w	r2, r2, #1
24007512:	b92a      	cbnz	r2, 24007520 <HAL_DMA_IRQHandler+0x7c0>
24007514:	f245 4294 	movw	r2, #21652	; 0x5494
24007518:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400751c:	4293      	cmp	r3, r2
2400751e:	d183      	bne.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24007520:	6de0      	ldr	r0, [r4, #92]	; 0x5c
24007522:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24007524:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24007526:	f000 001f 	and.w	r0, r0, #31
2400752a:	4085      	lsls	r5, r0
2400752c:	420d      	tst	r5, r1
2400752e:	d018      	beq.n	24007562 <HAL_DMA_IRQHandler+0x802>
24007530:	0757      	lsls	r7, r2, #29
24007532:	d516      	bpl.n	24007562 <HAL_DMA_IRQHandler+0x802>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007534:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24007536:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007538:	d544      	bpl.n	240075c4 <HAL_DMA_IRQHandler+0x864>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
2400753a:	03d2      	lsls	r2, r2, #15
2400753c:	f100 80c0 	bmi.w	240076c0 <HAL_DMA_IRQHandler+0x960>
          if(hdma->XferM1HalfCpltCallback != NULL)
24007540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24007542:	2b00      	cmp	r3, #0
24007544:	f47f ae94 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
24007548:	e76e      	b.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400754a:	f00e 011f 	and.w	r1, lr, #31
2400754e:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24007552:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007554:	fa0c fc01 	lsl.w	ip, ip, r1
24007558:	ea15 0f0c 	tst.w	r5, ip
2400755c:	f47f af30 	bne.w	240073c0 <HAL_DMA_IRQHandler+0x660>
24007560:	e5c4      	b.n	240070ec <HAL_DMA_IRQHandler+0x38c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24007562:	2502      	movs	r5, #2
24007564:	4085      	lsls	r5, r0
24007566:	420d      	tst	r5, r1
24007568:	d00d      	beq.n	24007586 <HAL_DMA_IRQHandler+0x826>
2400756a:	0797      	lsls	r7, r2, #30
2400756c:	d50b      	bpl.n	24007586 <HAL_DMA_IRQHandler+0x826>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
2400756e:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007570:	0416      	lsls	r6, r2, #16
24007572:	f140 80aa 	bpl.w	240076ca <HAL_DMA_IRQHandler+0x96a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24007576:	03d5      	lsls	r5, r2, #15
24007578:	f100 812b 	bmi.w	240077d2 <HAL_DMA_IRQHandler+0xa72>
          if(hdma->XferM1CpltCallback != NULL)
2400757c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400757e:	2b00      	cmp	r3, #0
24007580:	f47f ae76 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
24007584:	e750      	b.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24007586:	2508      	movs	r5, #8
24007588:	fa05 f000 	lsl.w	r0, r5, r0
2400758c:	4208      	tst	r0, r1
2400758e:	f43f af4b 	beq.w	24007428 <HAL_DMA_IRQHandler+0x6c8>
24007592:	0711      	lsls	r1, r2, #28
24007594:	f57f af48 	bpl.w	24007428 <HAL_DMA_IRQHandler+0x6c8>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24007598:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400759a:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2400759c:	f021 010e 	bic.w	r1, r1, #14
240075a0:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
240075a2:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240075a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240075a6:	f003 031f 	and.w	r3, r3, #31
240075aa:	fa02 f303 	lsl.w	r3, r2, r3
240075ae:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
240075b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240075b2:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
240075b4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
240075b8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
240075bc:	2b00      	cmp	r3, #0
240075be:	f47f ae57 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
240075c2:	e731      	b.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240075c4:	0693      	lsls	r3, r2, #26
240075c6:	d47b      	bmi.n	240076c0 <HAL_DMA_IRQHandler+0x960>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
240075c8:	2310      	movs	r3, #16
240075ca:	2028      	movs	r0, #40	; 0x28
240075cc:	6822      	ldr	r2, [r4, #0]
240075ce:	2140      	movs	r1, #64	; 0x40
240075d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
240075d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240075d8:	f2c4 0102 	movt	r1, #16386	; 0x4002
240075dc:	4282      	cmp	r2, r0
240075de:	bf18      	it	ne
240075e0:	429a      	cmpne	r2, r3
240075e2:	f04f 0058 	mov.w	r0, #88	; 0x58
240075e6:	bf0c      	ite	eq
240075e8:	2301      	moveq	r3, #1
240075ea:	2300      	movne	r3, #0
240075ec:	f2c4 0002 	movt	r0, #16386	; 0x4002
240075f0:	428a      	cmp	r2, r1
240075f2:	bf08      	it	eq
240075f4:	f043 0301 	orreq.w	r3, r3, #1
240075f8:	2170      	movs	r1, #112	; 0x70
240075fa:	4282      	cmp	r2, r0
240075fc:	bf08      	it	eq
240075fe:	f043 0301 	orreq.w	r3, r3, #1
24007602:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007606:	2088      	movs	r0, #136	; 0x88
24007608:	428a      	cmp	r2, r1
2400760a:	bf08      	it	eq
2400760c:	f043 0301 	orreq.w	r3, r3, #1
24007610:	21a0      	movs	r1, #160	; 0xa0
24007612:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007616:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400761a:	4282      	cmp	r2, r0
2400761c:	bf08      	it	eq
2400761e:	f043 0301 	orreq.w	r3, r3, #1
24007622:	20b8      	movs	r0, #184	; 0xb8
24007624:	428a      	cmp	r2, r1
24007626:	bf08      	it	eq
24007628:	f043 0301 	orreq.w	r3, r3, #1
2400762c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007630:	f44f 6182 	mov.w	r1, #1040	; 0x410
24007634:	4282      	cmp	r2, r0
24007636:	bf08      	it	eq
24007638:	f043 0301 	orreq.w	r3, r3, #1
2400763c:	f44f 6085 	mov.w	r0, #1064	; 0x428
24007640:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007644:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007648:	428a      	cmp	r2, r1
2400764a:	bf08      	it	eq
2400764c:	f043 0301 	orreq.w	r3, r3, #1
24007650:	f44f 6188 	mov.w	r1, #1088	; 0x440
24007654:	4282      	cmp	r2, r0
24007656:	bf08      	it	eq
24007658:	f043 0301 	orreq.w	r3, r3, #1
2400765c:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007660:	f44f 608b 	mov.w	r0, #1112	; 0x458
24007664:	428a      	cmp	r2, r1
24007666:	bf08      	it	eq
24007668:	f043 0301 	orreq.w	r3, r3, #1
2400766c:	f44f 618e 	mov.w	r1, #1136	; 0x470
24007670:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007674:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007678:	4282      	cmp	r2, r0
2400767a:	bf08      	it	eq
2400767c:	f043 0301 	orreq.w	r3, r3, #1
24007680:	f44f 6091 	mov.w	r0, #1160	; 0x488
24007684:	428a      	cmp	r2, r1
24007686:	bf08      	it	eq
24007688:	f043 0301 	orreq.w	r3, r3, #1
2400768c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007690:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
24007694:	4282      	cmp	r2, r0
24007696:	bf08      	it	eq
24007698:	f043 0301 	orreq.w	r3, r3, #1
2400769c:	f2c4 0102 	movt	r1, #16386	; 0x4002
240076a0:	428a      	cmp	r2, r1
240076a2:	bf08      	it	eq
240076a4:	f043 0301 	orreq.w	r3, r3, #1
240076a8:	b933      	cbnz	r3, 240076b8 <HAL_DMA_IRQHandler+0x958>
240076aa:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
240076ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
240076b2:	429a      	cmp	r2, r3
240076b4:	f040 8092 	bne.w	240077dc <HAL_DMA_IRQHandler+0xa7c>
240076b8:	6813      	ldr	r3, [r2, #0]
240076ba:	f023 0308 	bic.w	r3, r3, #8
240076be:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
240076c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
240076c2:	2b00      	cmp	r3, #0
240076c4:	f47f add4 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
240076c8:	e6ae      	b.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240076ca:	0690      	lsls	r0, r2, #26
240076cc:	f100 8081 	bmi.w	240077d2 <HAL_DMA_IRQHandler+0xa72>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
240076d0:	2310      	movs	r3, #16
240076d2:	2028      	movs	r0, #40	; 0x28
240076d4:	6822      	ldr	r2, [r4, #0]
240076d6:	2140      	movs	r1, #64	; 0x40
240076d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
240076dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
240076e0:	f2c4 0102 	movt	r1, #16386	; 0x4002
240076e4:	4282      	cmp	r2, r0
240076e6:	bf18      	it	ne
240076e8:	429a      	cmpne	r2, r3
240076ea:	f04f 0058 	mov.w	r0, #88	; 0x58
240076ee:	bf0c      	ite	eq
240076f0:	2301      	moveq	r3, #1
240076f2:	2300      	movne	r3, #0
240076f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
240076f8:	428a      	cmp	r2, r1
240076fa:	bf08      	it	eq
240076fc:	f043 0301 	orreq.w	r3, r3, #1
24007700:	2170      	movs	r1, #112	; 0x70
24007702:	4282      	cmp	r2, r0
24007704:	bf08      	it	eq
24007706:	f043 0301 	orreq.w	r3, r3, #1
2400770a:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400770e:	2088      	movs	r0, #136	; 0x88
24007710:	428a      	cmp	r2, r1
24007712:	bf08      	it	eq
24007714:	f043 0301 	orreq.w	r3, r3, #1
24007718:	21a0      	movs	r1, #160	; 0xa0
2400771a:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400771e:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007722:	4282      	cmp	r2, r0
24007724:	bf08      	it	eq
24007726:	f043 0301 	orreq.w	r3, r3, #1
2400772a:	20b8      	movs	r0, #184	; 0xb8
2400772c:	428a      	cmp	r2, r1
2400772e:	bf08      	it	eq
24007730:	f043 0301 	orreq.w	r3, r3, #1
24007734:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007738:	f44f 6182 	mov.w	r1, #1040	; 0x410
2400773c:	4282      	cmp	r2, r0
2400773e:	bf08      	it	eq
24007740:	f043 0301 	orreq.w	r3, r3, #1
24007744:	f44f 6085 	mov.w	r0, #1064	; 0x428
24007748:	f2c4 0102 	movt	r1, #16386	; 0x4002
2400774c:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007750:	428a      	cmp	r2, r1
24007752:	bf08      	it	eq
24007754:	f043 0301 	orreq.w	r3, r3, #1
24007758:	f44f 6188 	mov.w	r1, #1088	; 0x440
2400775c:	4282      	cmp	r2, r0
2400775e:	bf08      	it	eq
24007760:	f043 0301 	orreq.w	r3, r3, #1
24007764:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007768:	f44f 608b 	mov.w	r0, #1112	; 0x458
2400776c:	428a      	cmp	r2, r1
2400776e:	bf08      	it	eq
24007770:	f043 0301 	orreq.w	r3, r3, #1
24007774:	f44f 618e 	mov.w	r1, #1136	; 0x470
24007778:	f2c4 0002 	movt	r0, #16386	; 0x4002
2400777c:	f2c4 0102 	movt	r1, #16386	; 0x4002
24007780:	4282      	cmp	r2, r0
24007782:	bf08      	it	eq
24007784:	f043 0301 	orreq.w	r3, r3, #1
24007788:	f44f 6091 	mov.w	r0, #1160	; 0x488
2400778c:	428a      	cmp	r2, r1
2400778e:	bf08      	it	eq
24007790:	f043 0301 	orreq.w	r3, r3, #1
24007794:	f2c4 0002 	movt	r0, #16386	; 0x4002
24007798:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
2400779c:	4282      	cmp	r2, r0
2400779e:	bf08      	it	eq
240077a0:	f043 0301 	orreq.w	r3, r3, #1
240077a4:	f2c4 0102 	movt	r1, #16386	; 0x4002
240077a8:	428a      	cmp	r2, r1
240077aa:	bf08      	it	eq
240077ac:	f043 0301 	orreq.w	r3, r3, #1
240077b0:	b92b      	cbnz	r3, 240077be <HAL_DMA_IRQHandler+0xa5e>
240077b2:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
240077b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
240077ba:	429a      	cmp	r2, r3
240077bc:	d113      	bne.n	240077e6 <HAL_DMA_IRQHandler+0xa86>
240077be:	6813      	ldr	r3, [r2, #0]
240077c0:	f023 0314 	bic.w	r3, r3, #20
240077c4:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
240077c6:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
240077c8:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
240077ca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
240077ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
240077d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240077d4:	2b00      	cmp	r3, #0
240077d6:	f47f ad4b 	bne.w	24007270 <HAL_DMA_IRQHandler+0x510>
240077da:	e625      	b.n	24007428 <HAL_DMA_IRQHandler+0x6c8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
240077dc:	6813      	ldr	r3, [r2, #0]
240077de:	f023 0304 	bic.w	r3, r3, #4
240077e2:	6013      	str	r3, [r2, #0]
240077e4:	e76c      	b.n	240076c0 <HAL_DMA_IRQHandler+0x960>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
240077e6:	6813      	ldr	r3, [r2, #0]
240077e8:	f023 030a 	bic.w	r3, r3, #10
240077ec:	6013      	str	r3, [r2, #0]
240077ee:	e7ea      	b.n	240077c6 <HAL_DMA_IRQHandler+0xa66>

240077f0 <HAL_DMA_GetState>:
  return hdma->State;
240077f0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
240077f4:	4770      	bx	lr
240077f6:	bf00      	nop

240077f8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
240077f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
240077fa:	4770      	bx	lr

240077fc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
240077fc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
240077fe:	7a0a      	ldrb	r2, [r1, #8]
{
24007800:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24007802:	2a01      	cmp	r2, #1
24007804:	d02e      	beq.n	24007864 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24007806:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24007808:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
2400780a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
2400780e:	2a01      	cmp	r2, #1
24007810:	b2d0      	uxtb	r0, r2
24007812:	d122      	bne.n	2400785a <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24007814:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
24007818:	2a01      	cmp	r2, #1
2400781a:	d026      	beq.n	2400786a <HAL_DMAEx_ConfigMuxSync+0x6e>
2400781c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24007820:	f04f 0c00 	mov.w	ip, #0
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007824:	6e18      	ldr	r0, [r3, #96]	; 0x60
24007826:	6802      	ldr	r2, [r0, #0]
24007828:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
2400782c:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400782e:	68ca      	ldr	r2, [r1, #12]
24007830:	6e1e      	ldr	r6, [r3, #96]	; 0x60
24007832:	1e50      	subs	r0, r2, #1
24007834:	7a0a      	ldrb	r2, [r1, #8]
24007836:	f891 e009 	ldrb.w	lr, [r1, #9]
2400783a:	0412      	lsls	r2, r2, #16
2400783c:	6831      	ldr	r1, [r6, #0]
2400783e:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
24007842:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007844:	b2c9      	uxtb	r1, r1
24007846:	430a      	orrs	r2, r1
24007848:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
2400784c:	4322      	orrs	r2, r4
2400784e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
24007852:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24007854:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24007858:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400785a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
2400785e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007860:	655a      	str	r2, [r3, #84]	; 0x54
}
24007862:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24007864:	e9d1 5400 	ldrd	r5, r4, [r1]
24007868:	e7cf      	b.n	2400780a <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
2400786a:	2002      	movs	r0, #2
}
2400786c:	bd70      	pop	{r4, r5, r6, pc}
2400786e:	bf00      	nop

24007870 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24007870:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007872:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
24007876:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007878:	6812      	ldr	r2, [r2, #0]
2400787a:	421a      	tst	r2, r3
2400787c:	d00e      	beq.n	2400789c <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400787e:	6e02      	ldr	r2, [r0, #96]	; 0x60
24007880:	6813      	ldr	r3, [r2, #0]
24007882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24007886:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007888:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
2400788c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
2400788e:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24007890:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24007896:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
24007898:	b102      	cbz	r2, 2400789c <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
2400789a:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
2400789c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
2400789e:	b1ab      	cbz	r3, 240078cc <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240078a0:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
240078a4:	6809      	ldr	r1, [r1, #0]
240078a6:	4211      	tst	r1, r2
240078a8:	d010      	beq.n	240078cc <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240078aa:	681a      	ldr	r2, [r3, #0]
240078ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240078b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240078b2:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
240078b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240078b8:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
240078ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240078bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
240078c0:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
240078c2:	b11a      	cbz	r2, 240078cc <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240078c4:	4620      	mov	r0, r4
      }
    }
  }
}
240078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
240078ca:	4710      	bx	r2
}
240078cc:	bd10      	pop	{r4, pc}
240078ce:	bf00      	nop

240078d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240078d0:	680b      	ldr	r3, [r1, #0]
240078d2:	2b00      	cmp	r3, #0
240078d4:	f000 8140 	beq.w	24007b58 <HAL_GPIO_Init+0x288>
240078d8:	f04f 0c00 	mov.w	ip, #0
{
240078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240078e0:	f44f 6400 	mov.w	r4, #2048	; 0x800
{
240078e4:	b089      	sub	sp, #36	; 0x24
240078e6:	f44f 6680 	mov.w	r6, #1024	; 0x400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240078ea:	f44f 4588 	mov.w	r5, #17408	; 0x4400
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240078ee:	f6c5 0402 	movt	r4, #22530	; 0x5802
240078f2:	4667      	mov	r7, ip
240078f4:	f6c5 0600 	movt	r6, #22528	; 0x5800
240078f8:	f44f 6880 	mov.w	r8, #1024	; 0x400
240078fc:	9401      	str	r4, [sp, #4]
240078fe:	f44f 6440 	mov.w	r4, #3072	; 0xc00
24007902:	f6c5 0702 	movt	r7, #22530	; 0x5802
  uint32_t position = 0x00U;
24007906:	4662      	mov	r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007908:	f6c5 0402 	movt	r4, #22530	; 0x5802
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400790c:	f6c5 0502 	movt	r5, #22530	; 0x5802
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007910:	f6c5 0802 	movt	r8, #22530	; 0x5802
24007914:	46b6      	mov	lr, r6
24007916:	9402      	str	r4, [sp, #8]
24007918:	f44f 5480 	mov.w	r4, #4096	; 0x1000
2400791c:	9700      	str	r7, [sp, #0]
2400791e:	f6c5 0402 	movt	r4, #22530	; 0x5802
24007922:	9403      	str	r4, [sp, #12]
24007924:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
24007928:	f6c5 0402 	movt	r4, #22530	; 0x5802
2400792c:	9404      	str	r4, [sp, #16]
2400792e:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
24007932:	f6c5 0402 	movt	r4, #22530	; 0x5802
24007936:	9405      	str	r4, [sp, #20]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24007938:	f04f 0901 	mov.w	r9, #1
2400793c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24007940:	ea19 0603 	ands.w	r6, r9, r3
24007944:	f000 80c2 	beq.w	24007acc <HAL_GPIO_Init+0x1fc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24007948:	684b      	ldr	r3, [r1, #4]
2400794a:	f003 0303 	and.w	r3, r3, #3
2400794e:	1e5c      	subs	r4, r3, #1
24007950:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007952:	f04f 0403 	mov.w	r4, #3
24007956:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400795a:	f240 80c1 	bls.w	24007ae0 <HAL_GPIO_Init+0x210>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400795e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007960:	2b03      	cmp	r3, #3
24007962:	d027      	beq.n	240079b4 <HAL_GPIO_Init+0xe4>
      temp = GPIOx->PUPDR;
24007964:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24007966:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2400796a:	688b      	ldr	r3, [r1, #8]
2400796c:	fa03 f30c 	lsl.w	r3, r3, ip
24007970:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24007974:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24007976:	684b      	ldr	r3, [r1, #4]
24007978:	f003 0303 	and.w	r3, r3, #3
2400797c:	2b02      	cmp	r3, #2
2400797e:	d119      	bne.n	240079b4 <HAL_GPIO_Init+0xe4>
        temp = GPIOx->AFR[position >> 3U];
24007980:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24007984:	f002 0a07 	and.w	sl, r2, #7
24007988:	f04f 0b0f 	mov.w	fp, #15
2400798c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
24007990:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
24007994:	f8d9 3020 	ldr.w	r3, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24007998:	fa0b fb0a 	lsl.w	fp, fp, sl
2400799c:	ea23 0b0b 	bic.w	fp, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
240079a0:	690b      	ldr	r3, [r1, #16]
240079a2:	fa03 f30a 	lsl.w	r3, r3, sl
240079a6:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->AFR[position >> 3U] = temp;
240079aa:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240079ae:	684b      	ldr	r3, [r1, #4]
240079b0:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
240079b4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240079b8:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
240079bc:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240079c0:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
240079c2:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240079c4:	684b      	ldr	r3, [r1, #4]
240079c6:	f413 3f40 	tst.w	r3, #196608	; 0x30000
240079ca:	d07e      	beq.n	24007aca <HAL_GPIO_Init+0x1fa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240079cc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240079d0:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240079d4:	f002 0903 	and.w	r9, r2, #3
240079d8:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240079dc:	f043 0302 	orr.w	r3, r3, #2
240079e0:	4474      	add	r4, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240079e2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240079e6:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
240079ea:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240079ee:	fa0a fa09 	lsl.w	sl, sl, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240079f2:	9f00      	ldr	r7, [sp, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240079f4:	f003 0302 	and.w	r3, r3, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240079f8:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240079fa:	9307      	str	r3, [sp, #28]
240079fc:	9b07      	ldr	r3, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2U];
240079fe:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007a00:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007a04:	d031      	beq.n	24007a6a <HAL_GPIO_Init+0x19a>
24007a06:	4540      	cmp	r0, r8
24007a08:	f000 808a 	beq.w	24007b20 <HAL_GPIO_Init+0x250>
24007a0c:	9f01      	ldr	r7, [sp, #4]
24007a0e:	42b8      	cmp	r0, r7
24007a10:	f000 808d 	beq.w	24007b2e <HAL_GPIO_Init+0x25e>
24007a14:	9f02      	ldr	r7, [sp, #8]
24007a16:	42b8      	cmp	r0, r7
24007a18:	d07b      	beq.n	24007b12 <HAL_GPIO_Init+0x242>
24007a1a:	9f03      	ldr	r7, [sp, #12]
24007a1c:	42b8      	cmp	r0, r7
24007a1e:	f000 8094 	beq.w	24007b4a <HAL_GPIO_Init+0x27a>
24007a22:	9f04      	ldr	r7, [sp, #16]
24007a24:	42b8      	cmp	r0, r7
24007a26:	f000 8098 	beq.w	24007b5a <HAL_GPIO_Init+0x28a>
24007a2a:	9f05      	ldr	r7, [sp, #20]
24007a2c:	42b8      	cmp	r0, r7
24007a2e:	f000 8085 	beq.w	24007b3c <HAL_GPIO_Init+0x26c>
24007a32:	f44f 5ae0 	mov.w	sl, #7168	; 0x1c00
24007a36:	f6c5 0a02 	movt	sl, #22530	; 0x5802
24007a3a:	4550      	cmp	r0, sl
24007a3c:	f000 8094 	beq.w	24007b68 <HAL_GPIO_Init+0x298>
24007a40:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
24007a44:	f6c5 0a02 	movt	sl, #22530	; 0x5802
24007a48:	4550      	cmp	r0, sl
24007a4a:	f000 8094 	beq.w	24007b76 <HAL_GPIO_Init+0x2a6>
24007a4e:	f44f 5a10 	mov.w	sl, #9216	; 0x2400
24007a52:	f6c5 0a02 	movt	sl, #22530	; 0x5802
24007a56:	4550      	cmp	r0, sl
24007a58:	bf0c      	ite	eq
24007a5a:	f04f 0a09 	moveq.w	sl, #9
24007a5e:	f04f 0a0a 	movne.w	sl, #10
24007a62:	fa0a f909 	lsl.w	r9, sl, r9
24007a66:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24007a6a:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24007a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24007a70:	684f      	ldr	r7, [r1, #4]
        temp &= ~(iocurrent);
24007a72:	43f4      	mvns	r4, r6
        temp = EXTI->RTSR1;
24007a74:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
24007a76:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24007a7a:	02ff      	lsls	r7, r7, #11
        temp &= ~(iocurrent);
24007a7c:	bf54      	ite	pl
24007a7e:	4023      	andpl	r3, r4
          temp |= iocurrent;
24007a80:	4333      	orrmi	r3, r6
        EXTI->RTSR1 = temp;
24007a82:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24007a86:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->FTSR1;
24007a88:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24007a8c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24007a90:	02bf      	lsls	r7, r7, #10
        temp &= ~(iocurrent);
24007a92:	bf54      	ite	pl
24007a94:	4023      	andpl	r3, r4
          temp |= iocurrent;
24007a96:	4333      	orrmi	r3, r6
        EXTI->FTSR1 = temp;
24007a98:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24007a9c:	684f      	ldr	r7, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
24007a9e:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
24007aa2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24007aa6:	03bf      	lsls	r7, r7, #14
        temp &= ~(iocurrent);
24007aa8:	bf54      	ite	pl
24007aaa:	4023      	andpl	r3, r4
          temp |= iocurrent;
24007aac:	4333      	orrmi	r3, r6
        EXTI_CurrentCPU->EMR1 = temp;
24007aae:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24007ab2:	684f      	ldr	r7, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
24007ab4:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24007ab8:	03ff      	lsls	r7, r7, #15
        temp &= ~(iocurrent);
24007aba:	bf54      	ite	pl
24007abc:	ea04 0603 	andpl.w	r6, r4, r3
        {
          temp |= iocurrent;
24007ac0:	431e      	orrmi	r6, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
24007ac2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
24007ac6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24007aca:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
24007acc:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24007ace:	f10c 0c02 	add.w	ip, ip, #2
24007ad2:	fa33 f402 	lsrs.w	r4, r3, r2
24007ad6:	f47f af2f 	bne.w	24007938 <HAL_GPIO_Init+0x68>
  }
}
24007ada:	b009      	add	sp, #36	; 0x24
24007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
24007ae0:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007ae2:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24007ae6:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007ae8:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24007aea:	fa03 f30c 	lsl.w	r3, r3, ip
24007aee:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
24007af2:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007af4:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
24007af6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007afa:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24007afe:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007b02:	4093      	lsls	r3, r2
24007b04:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24007b08:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007b0a:	684b      	ldr	r3, [r1, #4]
24007b0c:	f003 0303 	and.w	r3, r3, #3
24007b10:	e726      	b.n	24007960 <HAL_GPIO_Init+0x90>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007b12:	f04f 0a03 	mov.w	sl, #3
24007b16:	fa0a f909 	lsl.w	r9, sl, r9
24007b1a:	ea43 0309 	orr.w	r3, r3, r9
24007b1e:	e7a4      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b20:	f04f 0a01 	mov.w	sl, #1
24007b24:	fa0a f909 	lsl.w	r9, sl, r9
24007b28:	ea43 0309 	orr.w	r3, r3, r9
24007b2c:	e79d      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b2e:	f04f 0a02 	mov.w	sl, #2
24007b32:	fa0a f909 	lsl.w	r9, sl, r9
24007b36:	ea43 0309 	orr.w	r3, r3, r9
24007b3a:	e796      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b3c:	f04f 0a06 	mov.w	sl, #6
24007b40:	fa0a f909 	lsl.w	r9, sl, r9
24007b44:	ea43 0309 	orr.w	r3, r3, r9
24007b48:	e78f      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b4a:	f04f 0a04 	mov.w	sl, #4
24007b4e:	fa0a f909 	lsl.w	r9, sl, r9
24007b52:	ea43 0309 	orr.w	r3, r3, r9
24007b56:	e788      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b58:	4770      	bx	lr
24007b5a:	f04f 0a05 	mov.w	sl, #5
24007b5e:	fa0a f909 	lsl.w	r9, sl, r9
24007b62:	ea43 0309 	orr.w	r3, r3, r9
24007b66:	e780      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b68:	f04f 0a07 	mov.w	sl, #7
24007b6c:	fa0a f909 	lsl.w	r9, sl, r9
24007b70:	ea43 0309 	orr.w	r3, r3, r9
24007b74:	e779      	b.n	24007a6a <HAL_GPIO_Init+0x19a>
24007b76:	f04f 0a08 	mov.w	sl, #8
24007b7a:	fa0a f909 	lsl.w	r9, sl, r9
24007b7e:	ea43 0309 	orr.w	r3, r3, r9
24007b82:	e772      	b.n	24007a6a <HAL_GPIO_Init+0x19a>

24007b84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24007b84:	6903      	ldr	r3, [r0, #16]
24007b86:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24007b88:	bf14      	ite	ne
24007b8a:	2001      	movne	r0, #1
24007b8c:	2000      	moveq	r0, #0
24007b8e:	4770      	bx	lr

24007b90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24007b90:	b902      	cbnz	r2, 24007b94 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24007b92:	0409      	lsls	r1, r1, #16
24007b94:	6181      	str	r1, [r0, #24]
  }
}
24007b96:	4770      	bx	lr

24007b98 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
24007b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24007b9c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
24007ba0:	4201      	tst	r1, r0
24007ba2:	d100      	bne.n	24007ba6 <HAL_GPIO_EXTI_IRQHandler+0xe>
24007ba4:	4770      	bx	lr
{
24007ba6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
24007ba8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24007bac:	f7fb ffd8 	bl	24003b60 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24007bb0:	bd08      	pop	{r3, pc}
24007bb2:	bf00      	nop

24007bb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007bb8:	6803      	ldr	r3, [r0, #0]
{
24007bba:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007bbc:	699a      	ldr	r2, [r3, #24]
24007bbe:	0694      	lsls	r4, r2, #26
24007bc0:	d470      	bmi.n	24007ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
24007bc2:	4605      	mov	r5, r0
24007bc4:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007bc6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
24007bca:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24007bcc:	f014 0410 	ands.w	r4, r4, #16
24007bd0:	d06b      	beq.n	24007caa <I2C_WaitOnSTOPFlagUntilTimeout+0xf6>
  uint32_t error_code = 0;
24007bd2:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007bd4:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24007bd8:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007bda:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007bdc:	46b2      	mov	sl, r6
24007bde:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007be0:	699a      	ldr	r2, [r3, #24]
24007be2:	d164      	bne.n	24007cae <I2C_WaitOnSTOPFlagUntilTimeout+0xfa>
24007be4:	0690      	lsls	r0, r2, #26
24007be6:	f100 8088 	bmi.w	24007cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
24007bea:	f1ba 0f00 	cmp.w	sl, #0
24007bee:	d105      	bne.n	24007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
24007bf0:	699c      	ldr	r4, [r3, #24]
24007bf2:	06a1      	lsls	r1, r4, #26
24007bf4:	d5fc      	bpl.n	24007bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007bf6:	2220      	movs	r2, #32
24007bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24007bfa:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24007bfc:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
24007c00:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
24007c02:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007c04:	05d0      	lsls	r0, r2, #23
24007c06:	d538      	bpl.n	24007c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007c08:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007c0c:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
24007c0e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007c12:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007c14:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007c16:	d505      	bpl.n	24007c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24007c1c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007c20:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007c22:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007c24:	0597      	lsls	r7, r2, #22
24007c26:	d505      	bpl.n	24007c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007c28:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007c2c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007c30:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007c32:	682b      	ldr	r3, [r5, #0]
24007c34:	699a      	ldr	r2, [r3, #24]
24007c36:	0790      	lsls	r0, r2, #30
24007c38:	d502      	bpl.n	24007c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24007c3a:	2200      	movs	r2, #0
24007c3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007c3e:	682b      	ldr	r3, [r5, #0]
24007c40:	699a      	ldr	r2, [r3, #24]
24007c42:	07d1      	lsls	r1, r2, #31
24007c44:	d404      	bmi.n	24007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007c46:	699a      	ldr	r2, [r3, #24]
24007c48:	f042 0201 	orr.w	r2, r2, #1
24007c4c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24007c4e:	682b      	ldr	r3, [r5, #0]
24007c50:	f44f 4668 	mov.w	r6, #59392	; 0xe800
24007c54:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007c56:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
24007c58:	2720      	movs	r7, #32
    I2C_RESET_CR2(hi2c);
24007c5a:	f6cf 6600 	movt	r6, #65024	; 0xfe00
      return HAL_ERROR;
24007c5e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24007c60:	4032      	ands	r2, r6
24007c62:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
24007c64:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007c66:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24007c6a:	4323      	orrs	r3, r4
24007c6c:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24007c6e:	f885 7041 	strb.w	r7, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007c72:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
24007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007c7a:	0550      	lsls	r0, r2, #21
24007c7c:	d4cc      	bmi.n	24007c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007c7e:	0596      	lsls	r6, r2, #22
24007c80:	d4d2      	bmi.n	24007c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
24007c82:	2900      	cmp	r1, #0
24007c84:	d1d6      	bne.n	24007c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007c86:	f7fd fb7b 	bl	24005380 <HAL_GetTick>
24007c8a:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24007c8e:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007c90:	42b8      	cmp	r0, r7
24007c92:	d800      	bhi.n	24007c96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe2>
24007c94:	b91f      	cbnz	r7, 24007c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24007c96:	699a      	ldr	r2, [r3, #24]
24007c98:	f012 0220 	ands.w	r2, r2, #32
24007c9c:	d032      	beq.n	24007d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007c9e:	699a      	ldr	r2, [r3, #24]
24007ca0:	0692      	lsls	r2, r2, #26
24007ca2:	d592      	bpl.n	24007bca <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
24007ca4:	2000      	movs	r0, #0
}
24007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
24007caa:	4621      	mov	r1, r4
24007cac:	e7a9      	b.n	24007c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007cae:	0692      	lsls	r2, r2, #26
24007cb0:	d423      	bmi.n	24007cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
24007cb2:	f1ba 0f00 	cmp.w	sl, #0
24007cb6:	d1a1      	bne.n	24007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007cb8:	f7fd fb62 	bl	24005380 <HAL_GetTick>
24007cbc:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24007cbe:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007cc0:	4287      	cmp	r7, r0
24007cc2:	d301      	bcc.n	24007cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
24007cc4:	2f00      	cmp	r7, #0
24007cc6:	d18a      	bne.n	24007bde <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24007cc8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24007cca:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007cce:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24007cd0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007cd2:	0409      	lsls	r1, r1, #16
24007cd4:	d503      	bpl.n	24007cde <I2C_WaitOnSTOPFlagUntilTimeout+0x12a>
              (tmp1 != I2C_CR2_STOP) && \
24007cd6:	0441      	lsls	r1, r0, #17
24007cd8:	d401      	bmi.n	24007cde <I2C_WaitOnSTOPFlagUntilTimeout+0x12a>
24007cda:	2a20      	cmp	r2, #32
24007cdc:	d11f      	bne.n	24007d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x16a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007cde:	699a      	ldr	r2, [r3, #24]
24007ce0:	0690      	lsls	r0, r2, #26
24007ce2:	f53f af7c 	bmi.w	24007bde <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24007ce6:	f7fd fb4b 	bl	24005380 <HAL_GetTick>
24007cea:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007cec:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24007cee:	2819      	cmp	r0, #25
24007cf0:	d9f5      	bls.n	24007cde <I2C_WaitOnSTOPFlagUntilTimeout+0x12a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24007cf2:	2620      	movs	r6, #32
              status = HAL_ERROR;
24007cf4:	f04f 0a01 	mov.w	sl, #1
24007cf8:	e771      	b.n	24007bde <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24007cfa:	f1ba 0f00 	cmp.w	sl, #0
24007cfe:	f43f af7a 	beq.w	24007bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24007d02:	e77b      	b.n	24007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007d04:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007d06:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
24007d08:	2001      	movs	r0, #1
24007d0a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007d0e:	430b      	orrs	r3, r1
24007d10:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007d12:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007d16:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24007d1e:	685a      	ldr	r2, [r3, #4]
24007d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24007d24:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24007d26:	f7fd fb2b 	bl	24005380 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007d2a:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24007d2c:	4604      	mov	r4, r0
24007d2e:	e7d6      	b.n	24007cde <I2C_WaitOnSTOPFlagUntilTimeout+0x12a>

24007d30 <HAL_I2C_Init>:
  if (hi2c == NULL)
24007d30:	2800      	cmp	r0, #0
24007d32:	d059      	beq.n	24007de8 <HAL_I2C_Init+0xb8>
{
24007d34:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24007d36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007d3a:	4604      	mov	r4, r0
24007d3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24007d40:	2b00      	cmp	r3, #0
24007d42:	d04c      	beq.n	24007dde <HAL_I2C_Init+0xae>
  __HAL_I2C_DISABLE(hi2c);
24007d44:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24007d46:	2324      	movs	r3, #36	; 0x24
24007d48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24007d4c:	6813      	ldr	r3, [r2, #0]
24007d4e:	f023 0301 	bic.w	r3, r3, #1
24007d52:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24007d54:	e9d4 2300 	ldrd	r2, r3, [r4]
24007d58:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24007d5c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24007d5e:	6822      	ldr	r2, [r4, #0]
24007d60:	6893      	ldr	r3, [r2, #8]
24007d62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24007d66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24007d68:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24007d6a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24007d6c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24007d6e:	68a3      	ldr	r3, [r4, #8]
24007d70:	bf0c      	ite	eq
24007d72:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24007d76:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
24007d7a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007d7c:	68e3      	ldr	r3, [r4, #12]
24007d7e:	2b02      	cmp	r3, #2
24007d80:	d103      	bne.n	24007d8a <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24007d82:	6823      	ldr	r3, [r4, #0]
24007d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007d88:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24007d8a:	6822      	ldr	r2, [r4, #0]
24007d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hi2c->State = HAL_I2C_STATE_READY;
24007d90:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24007d94:	6851      	ldr	r1, [r2, #4]
24007d96:	f2c0 2300 	movt	r3, #512	; 0x200
24007d9a:	430b      	orrs	r3, r1
24007d9c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24007d9e:	6822      	ldr	r2, [r4, #0]
24007da0:	68d3      	ldr	r3, [r2, #12]
24007da2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24007da6:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24007da8:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24007daa:	6821      	ldr	r1, [r4, #0]
24007dac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
24007db0:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007db2:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24007db4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
24007db8:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24007dba:	6821      	ldr	r1, [r4, #0]
24007dbc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
24007dc0:	4303      	orrs	r3, r0
  return HAL_OK;
24007dc2:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24007dc4:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
24007dc6:	6821      	ldr	r1, [r4, #0]
24007dc8:	680b      	ldr	r3, [r1, #0]
24007dca:	f043 0301 	orr.w	r3, r3, #1
24007dce:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007dd0:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24007dd2:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24007dd6:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007dd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24007ddc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24007dde:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24007de2:	f7f9 fc03 	bl	240015ec <HAL_I2C_MspInit>
24007de6:	e7ad      	b.n	24007d44 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
24007de8:	2001      	movs	r0, #1
}
24007dea:	4770      	bx	lr

24007dec <HAL_I2C_Master_Transmit>:
{
24007dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24007df0:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
24007df2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24007df6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24007df8:	2b20      	cmp	r3, #32
24007dfa:	d12c      	bne.n	24007e56 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24007dfc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24007e00:	4683      	mov	fp, r0
24007e02:	2b01      	cmp	r3, #1
24007e04:	d027      	beq.n	24007e56 <HAL_I2C_Master_Transmit+0x6a>
24007e06:	2301      	movs	r3, #1
24007e08:	468a      	mov	sl, r1
24007e0a:	4616      	mov	r6, r2
24007e0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
24007e10:	f7fd fab6 	bl	24005380 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007e14:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24007e18:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007e1a:	699a      	ldr	r2, [r3, #24]
24007e1c:	0417      	lsls	r7, r2, #16
24007e1e:	d51d      	bpl.n	24007e5c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007e20:	f7fd faae 	bl	24005380 <HAL_GetTick>
24007e24:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007e28:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007e2c:	2819      	cmp	r0, #25
24007e2e:	d9f4      	bls.n	24007e1a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007e30:	699a      	ldr	r2, [r3, #24]
24007e32:	0410      	lsls	r0, r2, #16
24007e34:	d5f1      	bpl.n	24007e1a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007e36:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007e3a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007e3c:	2200      	movs	r2, #0
      return HAL_ERROR;
24007e3e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007e40:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
24007e42:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007e46:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007e4a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007e4e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
24007e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24007e56:	2002      	movs	r0, #2
}
24007e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24007e5c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007e5e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
24007e60:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24007e64:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24007e68:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
24007e6a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24007e6e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007e72:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24007e76:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24007e7a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24007e7e:	b292      	uxth	r2, r2
24007e80:	2aff      	cmp	r2, #255	; 0xff
24007e82:	f200 8088 	bhi.w	24007f96 <HAL_I2C_Master_Transmit+0x1aa>
      hi2c->XferSize = hi2c->XferCount;
24007e86:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24007e8a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
      hi2c->XferSize = hi2c->XferCount;
24007e8e:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
24007e90:	f6cf 4100 	movt	r1, #64512	; 0xfc00
      hi2c->XferSize = hi2c->XferCount;
24007e94:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24007e98:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
24007e9a:	6858      	ldr	r0, [r3, #4]
24007e9c:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24007e9e:	f3ca 0109 	ubfx	r1, sl, #0, #10
24007ea2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24007ea6:	4301      	orrs	r1, r0
24007ea8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24007eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24007eb0:	f2c0 2100 	movt	r1, #512	; 0x200
24007eb4:	4311      	orrs	r1, r2
24007eb6:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24007eb8:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
24007ebc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24007ec0:	b29b      	uxth	r3, r3
24007ec2:	2b00      	cmp	r3, #0
24007ec4:	f000 8117 	beq.w	240080f6 <HAL_I2C_Master_Transmit+0x30a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24007ec8:	f8db 3000 	ldr.w	r3, [fp]
24007ecc:	699c      	ldr	r4, [r3, #24]
24007ece:	f014 0402 	ands.w	r4, r4, #2
24007ed2:	f040 80d0 	bne.w	24008076 <HAL_I2C_Master_Transmit+0x28a>
  uint32_t itflag   = hi2c->Instance->ISR;
24007ed6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24007ed8:	f012 0210 	ands.w	r2, r2, #16
24007edc:	f000 8097 	beq.w	2400800e <HAL_I2C_Master_Transmit+0x222>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007ee0:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24007ee2:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24007ee4:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007ee6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007ee8:	f8db 3000 	ldr.w	r3, [fp]
24007eec:	1c69      	adds	r1, r5, #1
24007eee:	699a      	ldr	r2, [r3, #24]
24007ef0:	f040 808f 	bne.w	24008012 <HAL_I2C_Master_Transmit+0x226>
24007ef4:	0690      	lsls	r0, r2, #26
24007ef6:	f100 8119 	bmi.w	2400812c <HAL_I2C_Master_Transmit+0x340>
24007efa:	b937      	cbnz	r7, 24007f0a <HAL_I2C_Master_Transmit+0x11e>
24007efc:	699a      	ldr	r2, [r3, #24]
24007efe:	0691      	lsls	r1, r2, #26
24007f00:	d5fc      	bpl.n	24007efc <HAL_I2C_Master_Transmit+0x110>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007f02:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24007f06:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24007f0a:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
24007f0e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
24007f10:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007f12:	05ce      	lsls	r6, r1, #23
24007f14:	d554      	bpl.n	24007fc0 <HAL_I2C_Master_Transmit+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007f16:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007f1a:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
24007f1c:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007f20:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007f22:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007f26:	d506      	bpl.n	24007f36 <HAL_I2C_Master_Transmit+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007f28:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24007f2c:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007f30:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007f32:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007f36:	0589      	lsls	r1, r1, #22
24007f38:	d506      	bpl.n	24007f48 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007f3e:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007f42:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007f44:	f8db 3000 	ldr.w	r3, [fp]
24007f48:	6999      	ldr	r1, [r3, #24]
24007f4a:	078e      	lsls	r6, r1, #30
24007f4c:	d503      	bpl.n	24007f56 <HAL_I2C_Master_Transmit+0x16a>
    hi2c->Instance->TXDR = 0x00U;
24007f4e:	2100      	movs	r1, #0
24007f50:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007f52:	f8db 3000 	ldr.w	r3, [fp]
24007f56:	6999      	ldr	r1, [r3, #24]
24007f58:	07cd      	lsls	r5, r1, #31
24007f5a:	d405      	bmi.n	24007f68 <HAL_I2C_Master_Transmit+0x17c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007f5c:	6999      	ldr	r1, [r3, #24]
24007f5e:	f041 0101 	orr.w	r1, r1, #1
24007f62:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24007f64:	f8db 3000 	ldr.w	r3, [fp]
24007f68:	f44f 4568 	mov.w	r5, #59392	; 0xe800
24007f6c:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007f6e:	2400      	movs	r4, #0
    hi2c->State = HAL_I2C_STATE_READY;
24007f70:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24007f72:	f6cf 6500 	movt	r5, #65024	; 0xfe00
        return HAL_ERROR;
24007f76:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24007f78:	4029      	ands	r1, r5
24007f7a:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24007f7c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24007f80:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24007f84:	4313      	orrs	r3, r2
24007f86:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24007f8a:	f88b 6041 	strb.w	r6, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007f8e:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
24007f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
24007f96:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24007f98:	f44f 4118 	mov.w	r1, #38912	; 0x9800
      hi2c->XferSize = MAX_NBYTE_SIZE;
24007f9c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24007fa0:	f6cf 4100 	movt	r1, #64512	; 0xfc00
24007fa4:	685a      	ldr	r2, [r3, #4]
24007fa6:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24007fa8:	f3ca 0109 	ubfx	r1, sl, #0, #10
24007fac:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24007fb0:	4311      	orrs	r1, r2
24007fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24007fb6:	f2c0 12ff 	movt	r2, #511	; 0x1ff
24007fba:	430a      	orrs	r2, r1
24007fbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24007fbe:	e77b      	b.n	24007eb8 <HAL_I2C_Master_Transmit+0xcc>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007fc0:	054c      	lsls	r4, r1, #21
24007fc2:	d4b1      	bmi.n	24007f28 <HAL_I2C_Master_Transmit+0x13c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007fc4:	058f      	lsls	r7, r1, #22
24007fc6:	d4b8      	bmi.n	24007f3a <HAL_I2C_Master_Transmit+0x14e>
  if (status != HAL_OK)
24007fc8:	2800      	cmp	r0, #0
24007fca:	d1bd      	bne.n	24007f48 <HAL_I2C_Master_Transmit+0x15c>
    if (Timeout != HAL_MAX_DELAY)
24007fcc:	1c6c      	adds	r4, r5, #1
24007fce:	f43f af7d 	beq.w	24007ecc <HAL_I2C_Master_Transmit+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007fd2:	f7fd f9d5 	bl	24005380 <HAL_GetTick>
24007fd6:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007fda:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007fde:	4285      	cmp	r5, r0
24007fe0:	d302      	bcc.n	24007fe8 <HAL_I2C_Master_Transmit+0x1fc>
24007fe2:	2d00      	cmp	r5, #0
24007fe4:	f47f af72 	bne.w	24007ecc <HAL_I2C_Master_Transmit+0xe0>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007fe8:	699a      	ldr	r2, [r3, #24]
24007fea:	f012 0202 	ands.w	r2, r2, #2
24007fee:	f47f af6d 	bne.w	24007ecc <HAL_I2C_Master_Transmit+0xe0>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007ff2:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007ff6:	2120      	movs	r1, #32
        return HAL_ERROR;
24007ff8:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24007ffa:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007ffe:	430b      	orrs	r3, r1
24008000:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008004:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24008008:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
2400800c:	e724      	b.n	24007e58 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
2400800e:	4610      	mov	r0, r2
24008010:	e77e      	b.n	24007f10 <HAL_I2C_Master_Transmit+0x124>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008012:	0692      	lsls	r2, r2, #26
24008014:	f100 808a 	bmi.w	2400812c <HAL_I2C_Master_Transmit+0x340>
24008018:	2f00      	cmp	r7, #0
2400801a:	f47f af76 	bne.w	24007f0a <HAL_I2C_Master_Transmit+0x11e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400801e:	f7fd f9af 	bl	24005380 <HAL_GetTick>
24008022:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24008024:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008028:	4285      	cmp	r5, r0
2400802a:	d302      	bcc.n	24008032 <HAL_I2C_Master_Transmit+0x246>
2400802c:	2d00      	cmp	r5, #0
2400802e:	f47f af5d 	bne.w	24007eec <HAL_I2C_Master_Transmit+0x100>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24008032:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24008034:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24008038:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
2400803a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400803c:	0409      	lsls	r1, r1, #16
2400803e:	d50c      	bpl.n	2400805a <HAL_I2C_Master_Transmit+0x26e>
              (tmp1 != I2C_CR2_STOP) && \
24008040:	0441      	lsls	r1, r0, #17
24008042:	d40a      	bmi.n	2400805a <HAL_I2C_Master_Transmit+0x26e>
24008044:	2a20      	cmp	r2, #32
24008046:	d008      	beq.n	2400805a <HAL_I2C_Master_Transmit+0x26e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24008048:	685a      	ldr	r2, [r3, #4]
2400804a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400804e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24008050:	f7fd f996 	bl	24005380 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24008054:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24008058:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400805a:	699a      	ldr	r2, [r3, #24]
2400805c:	0690      	lsls	r0, r2, #26
2400805e:	f53f af45 	bmi.w	24007eec <HAL_I2C_Master_Transmit+0x100>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24008062:	f7fd f98d 	bl	24005380 <HAL_GetTick>
24008066:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008068:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400806c:	2819      	cmp	r0, #25
2400806e:	d9f4      	bls.n	2400805a <HAL_I2C_Master_Transmit+0x26e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24008070:	2420      	movs	r4, #32
              status = HAL_ERROR;
24008072:	2701      	movs	r7, #1
24008074:	e73a      	b.n	24007eec <HAL_I2C_Master_Transmit+0x100>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24008076:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
2400807a:	7812      	ldrb	r2, [r2, #0]
2400807c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400807e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
24008082:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
24008086:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
24008088:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
2400808c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
2400808e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24008090:	3101      	adds	r1, #1
      hi2c->XferSize--;
24008092:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
24008094:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24008098:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
2400809c:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240080a0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
240080a2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240080a6:	2b00      	cmp	r3, #0
240080a8:	f47f af08 	bne.w	24007ebc <HAL_I2C_Master_Transmit+0xd0>
240080ac:	2a00      	cmp	r2, #0
240080ae:	f43f af05 	beq.w	24007ebc <HAL_I2C_Master_Transmit+0xd0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240080b2:	f8db 2000 	ldr.w	r2, [fp]
240080b6:	1c68      	adds	r0, r5, #1
240080b8:	d13c      	bne.n	24008134 <HAL_I2C_Master_Transmit+0x348>
240080ba:	6993      	ldr	r3, [r2, #24]
240080bc:	0619      	lsls	r1, r3, #24
240080be:	d5fc      	bpl.n	240080ba <HAL_I2C_Master_Transmit+0x2ce>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240080c0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240080c4:	b29b      	uxth	r3, r3
240080c6:	2bff      	cmp	r3, #255	; 0xff
240080c8:	d953      	bls.n	24008172 <HAL_I2C_Master_Transmit+0x386>
          hi2c->XferSize = MAX_NBYTE_SIZE;
240080ca:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240080cc:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
          hi2c->XferSize = MAX_NBYTE_SIZE;
240080d0:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240080d4:	f6cf 4100 	movt	r1, #64512	; 0xfc00
240080d8:	6853      	ldr	r3, [r2, #4]
240080da:	400b      	ands	r3, r1
240080dc:	2100      	movs	r1, #0
240080de:	ea4a 0303 	orr.w	r3, sl, r3
240080e2:	f2c0 11ff 	movt	r1, #511	; 0x1ff
240080e6:	4319      	orrs	r1, r3
240080e8:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
240080ea:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240080ee:	b29b      	uxth	r3, r3
240080f0:	2b00      	cmp	r3, #0
240080f2:	f47f aee9 	bne.w	24007ec8 <HAL_I2C_Master_Transmit+0xdc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
240080f6:	4642      	mov	r2, r8
240080f8:	4629      	mov	r1, r5
240080fa:	4658      	mov	r0, fp
240080fc:	f7ff fd5a 	bl	24007bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
24008100:	2800      	cmp	r0, #0
24008102:	d14a      	bne.n	2400819a <HAL_I2C_Master_Transmit+0x3ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008104:	f8db 3000 	ldr.w	r3, [fp]
24008108:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
2400810a:	f44f 4468 	mov.w	r4, #59392	; 0xe800
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400810e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24008110:	f8db 1000 	ldr.w	r1, [fp]
24008114:	f6cf 6400 	movt	r4, #65024	; 0xfe00
24008118:	684b      	ldr	r3, [r1, #4]
2400811a:	4023      	ands	r3, r4
2400811c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
2400811e:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24008122:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24008126:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
2400812a:	e695      	b.n	24007e58 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
2400812c:	2f00      	cmp	r7, #0
2400812e:	f43f aee8 	beq.w	24007f02 <HAL_I2C_Master_Transmit+0x116>
24008132:	e6ea      	b.n	24007f0a <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24008134:	6993      	ldr	r3, [r2, #24]
24008136:	061b      	lsls	r3, r3, #24
24008138:	d4c2      	bmi.n	240080c0 <HAL_I2C_Master_Transmit+0x2d4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400813a:	f7fd f921 	bl	24005380 <HAL_GetTick>
2400813e:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24008142:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24008146:	4285      	cmp	r5, r0
24008148:	d301      	bcc.n	2400814e <HAL_I2C_Master_Transmit+0x362>
2400814a:	2d00      	cmp	r5, #0
2400814c:	d1b3      	bne.n	240080b6 <HAL_I2C_Master_Transmit+0x2ca>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400814e:	6993      	ldr	r3, [r2, #24]
24008150:	f013 0380 	ands.w	r3, r3, #128	; 0x80
24008154:	d1af      	bne.n	240080b6 <HAL_I2C_Master_Transmit+0x2ca>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008156:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400815a:	2120      	movs	r1, #32
          return HAL_ERROR;
2400815c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
2400815e:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008162:	430a      	orrs	r2, r1
24008164:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008168:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400816c:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24008170:	e672      	b.n	24007e58 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
24008172:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24008176:	f44f 401c 	mov.w	r0, #39936	; 0x9c00
          hi2c->XferSize = hi2c->XferCount;
2400817a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
2400817c:	f6cf 4000 	movt	r0, #64512	; 0xfc00
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24008180:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
24008182:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24008186:	6853      	ldr	r3, [r2, #4]
24008188:	4003      	ands	r3, r0
2400818a:	ea4a 0303 	orr.w	r3, sl, r3
2400818e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24008192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24008196:	6053      	str	r3, [r2, #4]
}
24008198:	e690      	b.n	24007ebc <HAL_I2C_Master_Transmit+0xd0>
      return HAL_ERROR;
2400819a:	2001      	movs	r0, #1
2400819c:	e65c      	b.n	24007e58 <HAL_I2C_Master_Transmit+0x6c>
2400819e:	bf00      	nop

240081a0 <HAL_I2C_Slave_Receive_IT>:
{
240081a0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
240081a2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
240081a6:	2820      	cmp	r0, #32
240081a8:	d12a      	bne.n	24008200 <HAL_I2C_Slave_Receive_IT+0x60>
{
240081aa:	b470      	push	{r4, r5, r6}
240081ac:	b2c4      	uxtb	r4, r0
    __HAL_LOCK(hi2c);
240081ae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
240081b2:	2801      	cmp	r0, #1
240081b4:	d026      	beq.n	24008204 <HAL_I2C_Slave_Receive_IT+0x64>
240081b6:	2001      	movs	r0, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240081b8:	681e      	ldr	r6, [r3, #0]
    __HAL_LOCK(hi2c);
240081ba:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
240081be:	2022      	movs	r0, #34	; 0x22
240081c0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240081c4:	2000      	movs	r0, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
240081c6:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240081ca:	6458      	str	r0, [r3, #68]	; 0x44
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240081cc:	4605      	mov	r5, r0
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240081ce:	6874      	ldr	r4, [r6, #4]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240081d0:	f6cf 75ff 	movt	r5, #65535	; 0xffff
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240081d4:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
240081d8:	6074      	str	r4, [r6, #4]
    hi2c->XferCount   = Size;
240081da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240081dc:	f248 7205 	movw	r2, #34565	; 0x8705
    hi2c->XferSize    = hi2c->XferCount;
240081e0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
240081e2:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240081e4:	f2c2 4200 	movt	r2, #9216	; 0x2400
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240081e8:	6819      	ldr	r1, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240081ea:	62dd      	str	r5, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
240081ec:	851c      	strh	r4, [r3, #40]	; 0x28
    __HAL_UNLOCK(hi2c);
240081ee:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240081f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240081f4:	680b      	ldr	r3, [r1, #0]
240081f6:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
240081fa:	600b      	str	r3, [r1, #0]
}
240081fc:	bc70      	pop	{r4, r5, r6}
240081fe:	4770      	bx	lr
    return HAL_BUSY;
24008200:	2002      	movs	r0, #2
}
24008202:	4770      	bx	lr
    return HAL_BUSY;
24008204:	2002      	movs	r0, #2
}
24008206:	bc70      	pop	{r4, r5, r6}
24008208:	4770      	bx	lr
2400820a:	bf00      	nop

2400820c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400820c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
2400820e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24008210:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24008212:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24008214:	b103      	cbz	r3, 24008218 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24008216:	4718      	bx	r3
}
24008218:	4770      	bx	lr
2400821a:	bf00      	nop

2400821c <HAL_I2C_SlaveTxCpltCallback>:
2400821c:	4770      	bx	lr
2400821e:	bf00      	nop

24008220 <I2C_ITSlaveSeqCplt>:
{
24008220:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008222:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008224:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008226:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008228:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400822c:	0451      	lsls	r1, r2, #17
2400822e:	d526      	bpl.n	2400827e <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24008230:	681a      	ldr	r2, [r3, #0]
24008232:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24008236:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24008238:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400823c:	2b29      	cmp	r3, #41	; 0x29
2400823e:	d028      	beq.n	24008292 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24008240:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008244:	2b2a      	cmp	r3, #42	; 0x2a
24008246:	d000      	beq.n	2400824a <I2C_ITSlaveSeqCplt+0x2a>
}
24008248:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400824a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400824c:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400824e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24008250:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008254:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24008258:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400825a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400825e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008260:	f002 0228 	and.w	r2, r2, #40	; 0x28
24008264:	2a28      	cmp	r2, #40	; 0x28
24008266:	bf0c      	ite	eq
24008268:	f06f 0244 	mvneq.w	r2, #68	; 0x44
2400826c:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008270:	4013      	ands	r3, r2
24008272:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24008274:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24008278:	f026 f8c2 	bl	2402e400 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
2400827c:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400827e:	0412      	lsls	r2, r2, #16
24008280:	d5da      	bpl.n	24008238 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008282:	681a      	ldr	r2, [r3, #0]
24008284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008288:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400828a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400828e:	2b29      	cmp	r3, #41	; 0x29
24008290:	d1d6      	bne.n	24008240 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008292:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24008294:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008296:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24008298:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400829c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240082a0:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240082a2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240082a6:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240082a8:	f002 0228 	and.w	r2, r2, #40	; 0x28
240082ac:	2a28      	cmp	r2, #40	; 0x28
240082ae:	bf0c      	ite	eq
240082b0:	f06f 0242 	mvneq.w	r2, #66	; 0x42
240082b4:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240082b8:	4013      	ands	r3, r2
240082ba:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
240082bc:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
240082c0:	f7ff ffac 	bl	2400821c <HAL_I2C_SlaveTxCpltCallback>
}
240082c4:	bd08      	pop	{r3, pc}
240082c6:	bf00      	nop

240082c8 <HAL_I2C_AddrCallback>:
}
240082c8:	4770      	bx	lr
240082ca:	bf00      	nop

240082cc <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
240082cc:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
240082ce:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
240082d0:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240082d2:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
240082d4:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
240082d6:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240082d8:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
240082da:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
240082dc:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
240082e0:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
240082e4:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
240082e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240082ea:	d10f      	bne.n	2400830c <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
240082ec:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
240082f0:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
240082f4:	f013 0306 	ands.w	r3, r3, #6
240082f8:	d106      	bne.n	24008308 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
240082fa:	6c85      	ldr	r5, [r0, #72]	; 0x48
240082fc:	3501      	adds	r5, #1
240082fe:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24008300:	6c85      	ldr	r5, [r0, #72]	; 0x48
24008302:	2d02      	cmp	r5, #2
24008304:	d00c      	beq.n	24008320 <I2C_ITAddrCplt.part.0+0x54>
}
24008306:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24008308:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400830c:	6823      	ldr	r3, [r4, #0]
2400830e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24008312:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24008314:	2300      	movs	r3, #0
24008316:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400831a:	f7ff ffd5 	bl	240082c8 <HAL_I2C_AddrCallback>
}
2400831e:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24008320:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24008322:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24008324:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24008326:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400832a:	f7ff ffcd 	bl	240082c8 <HAL_I2C_AddrCallback>
}
2400832e:	bd70      	pop	{r4, r5, r6, pc}

24008330 <HAL_I2C_ListenCpltCallback>:
24008330:	4770      	bx	lr
24008332:	bf00      	nop

24008334 <HAL_I2C_AbortCpltCallback>:
24008334:	4770      	bx	lr
24008336:	bf00      	nop

24008338 <I2C_DMAAbort>:
{
24008338:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400833a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
2400833c:	6b83      	ldr	r3, [r0, #56]	; 0x38
2400833e:	b10b      	cbz	r3, 24008344 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24008340:	2200      	movs	r2, #0
24008342:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24008344:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24008346:	b10b      	cbz	r3, 2400834c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24008348:	2200      	movs	r2, #0
2400834a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400834c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008350:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24008352:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008356:	d005      	beq.n	24008364 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24008358:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400835a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400835e:	f026 f837 	bl	2402e3d0 <__HAL_I2C_ErrorCallback_veneer>
}
24008362:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24008364:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24008366:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
2400836a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400836e:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24008370:	f7ff ffe0 	bl	24008334 <HAL_I2C_AbortCpltCallback>
}
24008374:	bd08      	pop	{r3, pc}
24008376:	bf00      	nop

24008378 <I2C_ITError>:
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24008378:	2200      	movs	r2, #0
{
2400837a:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400837c:	4615      	mov	r5, r2
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400837e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24008382:	f6cf 72ff 	movt	r2, #65535	; 0xffff
{
24008386:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24008388:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400838c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400838e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24008390:	8545      	strh	r5, [r0, #42]	; 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24008392:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24008394:	6c42      	ldr	r2, [r0, #68]	; 0x44
24008396:	ea41 0102 	orr.w	r1, r1, r2
2400839a:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400839c:	d87d      	bhi.n	2400849a <I2C_ITError+0x122>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400839e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083a2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083a6:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240083aa:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083ac:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083b0:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240083b2:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083b4:	bf14      	ite	ne
240083b6:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
240083ba:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083be:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240083c0:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240083c4:	bf18      	it	ne
240083c6:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240083ca:	4013      	ands	r3, r2
240083cc:	f248 7205 	movw	r2, #34565	; 0x8705
240083d0:	f2c2 4200 	movt	r2, #9216	; 0x2400
240083d4:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240083d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
240083da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
240083dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
240083de:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
240083e0:	b118      	cbz	r0, 240083ea <I2C_ITError+0x72>
240083e2:	2b11      	cmp	r3, #17
240083e4:	d01e      	beq.n	24008424 <I2C_ITError+0xac>
240083e6:	2b21      	cmp	r3, #33	; 0x21
240083e8:	d01c      	beq.n	24008424 <I2C_ITError+0xac>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
240083ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
240083ec:	b118      	cbz	r0, 240083f6 <I2C_ITError+0x7e>
240083ee:	2b12      	cmp	r3, #18
240083f0:	d033      	beq.n	2400845a <I2C_ITError+0xe2>
240083f2:	2b22      	cmp	r3, #34	; 0x22
240083f4:	d031      	beq.n	2400845a <I2C_ITError+0xe2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
240083f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240083fa:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
240083fc:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008400:	d006      	beq.n	24008410 <I2C_ITError+0x98>
    HAL_I2C_ErrorCallback(hi2c);
24008402:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24008404:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24008406:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400840a:	f025 ffe1 	bl	2402e3d0 <__HAL_I2C_ErrorCallback_veneer>
}
2400840e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24008410:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24008412:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24008414:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24008418:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400841c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
2400841e:	f7ff ff89 	bl	24008334 <HAL_I2C_AbortCpltCallback>
}
24008422:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24008424:	6823      	ldr	r3, [r4, #0]
24008426:	681a      	ldr	r2, [r3, #0]
24008428:	0451      	lsls	r1, r2, #17
2400842a:	d465      	bmi.n	240084f8 <I2C_ITError+0x180>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400842c:	f7ff f9e0 	bl	240077f0 <HAL_DMA_GetState>
24008430:	2801      	cmp	r0, #1
24008432:	d0e0      	beq.n	240083f6 <I2C_ITError+0x7e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24008434:	f248 3339 	movw	r3, #33593	; 0x8339
24008438:	6ba1      	ldr	r1, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
2400843a:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400843c:	f2c2 4300 	movt	r3, #9216	; 0x2400
24008440:	650b      	str	r3, [r1, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24008442:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24008446:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24008448:	f7fe fb06 	bl	24006a58 <HAL_DMA_Abort_IT>
2400844c:	2800      	cmp	r0, #0
2400844e:	d0de      	beq.n	2400840e <I2C_ITError+0x96>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24008450:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24008452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24008456:	6d03      	ldr	r3, [r0, #80]	; 0x50
24008458:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400845a:	6823      	ldr	r3, [r4, #0]
2400845c:	681a      	ldr	r2, [r3, #0]
2400845e:	0412      	lsls	r2, r2, #16
24008460:	d504      	bpl.n	2400846c <I2C_ITError+0xf4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008462:	681a      	ldr	r2, [r3, #0]
24008464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008468:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400846a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400846c:	f7ff f9c0 	bl	240077f0 <HAL_DMA_GetState>
24008470:	2801      	cmp	r0, #1
24008472:	d0c0      	beq.n	240083f6 <I2C_ITError+0x7e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24008474:	f248 3339 	movw	r3, #33593	; 0x8339
24008478:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
2400847a:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400847c:	f2c2 4300 	movt	r3, #9216	; 0x2400
24008480:	650b      	str	r3, [r1, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24008482:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24008486:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008488:	f7fe fae6 	bl	24006a58 <HAL_DMA_Abort_IT>
2400848c:	2800      	cmp	r0, #0
2400848e:	d0be      	beq.n	2400840e <I2C_ITError+0x96>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24008490:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24008492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24008496:	6d03      	ldr	r3, [r0, #80]	; 0x50
24008498:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400849a:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400849c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240084a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240084a4:	6813      	ldr	r3, [r2, #0]
240084a6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240084aa:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240084ac:	6803      	ldr	r3, [r0, #0]
240084ae:	699a      	ldr	r2, [r3, #24]
240084b0:	0792      	lsls	r2, r2, #30
240084b2:	d501      	bpl.n	240084b8 <I2C_ITError+0x140>
    hi2c->Instance->TXDR = 0x00U;
240084b4:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240084b6:	6803      	ldr	r3, [r0, #0]
240084b8:	699a      	ldr	r2, [r3, #24]
240084ba:	07d6      	lsls	r6, r2, #31
240084bc:	d403      	bmi.n	240084c6 <I2C_ITError+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240084be:	699a      	ldr	r2, [r3, #24]
240084c0:	f042 0201 	orr.w	r2, r2, #1
240084c4:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
240084c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240084ca:	2b60      	cmp	r3, #96	; 0x60
240084cc:	d012      	beq.n	240084f4 <I2C_ITError+0x17c>
      hi2c->State         = HAL_I2C_STATE_READY;
240084ce:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240084d0:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
240084d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240084d6:	699a      	ldr	r2, [r3, #24]
240084d8:	0695      	lsls	r5, r2, #26
240084da:	d50b      	bpl.n	240084f4 <I2C_ITError+0x17c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
240084dc:	699a      	ldr	r2, [r3, #24]
240084de:	06d0      	lsls	r0, r2, #27
240084e0:	d506      	bpl.n	240084f0 <I2C_ITError+0x178>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240084e2:	2210      	movs	r2, #16
240084e4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240084e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240084e8:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240084ea:	f042 0204 	orr.w	r2, r2, #4
240084ee:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240084f0:	2220      	movs	r2, #32
240084f2:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
240084f4:	2200      	movs	r2, #0
240084f6:	e770      	b.n	240083da <I2C_ITError+0x62>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240084f8:	681a      	ldr	r2, [r3, #0]
240084fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
240084fe:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24008500:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24008502:	e793      	b.n	2400842c <I2C_ITError+0xb4>

24008504 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24008504:	6803      	ldr	r3, [r0, #0]
{
24008506:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24008508:	699a      	ldr	r2, [r3, #24]
2400850a:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400850c:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400850e:	f412 7f80 	tst.w	r2, #256	; 0x100
24008512:	d032      	beq.n	2400857a <HAL_I2C_ER_IRQHandler+0x76>
24008514:	f011 0f80 	tst.w	r1, #128	; 0x80
24008518:	d021      	beq.n	2400855e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400851a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400851c:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24008520:	f041 0101 	orr.w	r1, r1, #1
24008524:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24008526:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24008528:	0553      	lsls	r3, r2, #21
2400852a:	d507      	bpl.n	2400853c <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400852c:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400852e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24008530:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24008534:	f041 0108 	orr.w	r1, r1, #8
24008538:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400853a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400853c:	0592      	lsls	r2, r2, #22
2400853e:	d507      	bpl.n	24008550 <HAL_I2C_ER_IRQHandler+0x4c>
24008540:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24008542:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24008544:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24008548:	f043 0302 	orr.w	r3, r3, #2
2400854c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400854e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24008550:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24008552:	f011 0f0b 	tst.w	r1, #11
24008556:	d10c      	bne.n	24008572 <HAL_I2C_ER_IRQHandler+0x6e>
}
24008558:	f85d 4b04 	ldr.w	r4, [sp], #4
2400855c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400855e:	0553      	lsls	r3, r2, #21
24008560:	d4f6      	bmi.n	24008550 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24008562:	0593      	lsls	r3, r2, #22
24008564:	d5f4      	bpl.n	24008550 <HAL_I2C_ER_IRQHandler+0x4c>
24008566:	060a      	lsls	r2, r1, #24
24008568:	d4eb      	bmi.n	24008542 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
2400856a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400856c:	f011 0f0b 	tst.w	r1, #11
24008570:	d0f2      	beq.n	24008558 <HAL_I2C_ER_IRQHandler+0x54>
}
24008572:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
24008576:	f7ff beff 	b.w	24008378 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400857a:	f412 6f80 	tst.w	r2, #1024	; 0x400
2400857e:	d0f0      	beq.n	24008562 <HAL_I2C_ER_IRQHandler+0x5e>
24008580:	0609      	lsls	r1, r1, #24
24008582:	d5e5      	bpl.n	24008550 <HAL_I2C_ER_IRQHandler+0x4c>
24008584:	e7d3      	b.n	2400852e <HAL_I2C_ER_IRQHandler+0x2a>
24008586:	bf00      	nop

24008588 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24008588:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400858a:	6802      	ldr	r2, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
2400858c:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400858e:	6815      	ldr	r5, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24008590:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008594:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24008596:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400859a:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400859c:	2b21      	cmp	r3, #33	; 0x21
2400859e:	d173      	bne.n	24008688 <I2C_ITSlaveCplt.constprop.0+0x100>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240085a0:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240085a2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240085a6:	6802      	ldr	r2, [r0, #0]
240085a8:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
240085ac:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240085ae:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240085b0:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
240085b2:	f44f 4068 	mov.w	r0, #59392	; 0xe800
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240085b6:	6853      	ldr	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
240085b8:	f6cf 6000 	movt	r0, #65024	; 0xfe00
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240085bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240085c0:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
240085c2:	6822      	ldr	r2, [r4, #0]
240085c4:	6853      	ldr	r3, [r2, #4]
240085c6:	4003      	ands	r3, r0
240085c8:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240085ca:	6823      	ldr	r3, [r4, #0]
240085cc:	699a      	ldr	r2, [r3, #24]
240085ce:	0792      	lsls	r2, r2, #30
240085d0:	d502      	bpl.n	240085d8 <I2C_ITSlaveCplt.constprop.0+0x50>
    hi2c->Instance->TXDR = 0x00U;
240085d2:	2200      	movs	r2, #0
240085d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240085d6:	6823      	ldr	r3, [r4, #0]
240085d8:	699a      	ldr	r2, [r3, #24]
240085da:	07d6      	lsls	r6, r2, #31
240085dc:	d403      	bmi.n	240085e6 <I2C_ITSlaveCplt.constprop.0+0x5e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240085de:	699a      	ldr	r2, [r3, #24]
240085e0:	f042 0201 	orr.w	r2, r2, #1
240085e4:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
240085e6:	0468      	lsls	r0, r5, #17
240085e8:	d559      	bpl.n	2400869e <I2C_ITSlaveCplt.constprop.0+0x116>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240085ea:	6822      	ldr	r2, [r4, #0]
240085ec:	6813      	ldr	r3, [r2, #0]
240085ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240085f2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
240085f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240085f6:	b11a      	cbz	r2, 24008600 <I2C_ITSlaveCplt.constprop.0+0x78>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
240085f8:	6812      	ldr	r2, [r2, #0]
240085fa:	6853      	ldr	r3, [r2, #4]
240085fc:	b29b      	uxth	r3, r3
240085fe:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24008600:	074b      	lsls	r3, r1, #29
24008602:	d508      	bpl.n	24008616 <I2C_ITSlaveCplt.constprop.0+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008604:	6822      	ldr	r2, [r4, #0]
24008606:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008608:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400860a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
2400860c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400860e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24008610:	3301      	adds	r3, #1
24008612:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008614:	bb8a      	cbnz	r2, 2400867a <I2C_ITSlaveCplt.constprop.0+0xf2>
  if (hi2c->XferCount != 0U)
24008616:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008618:	b29b      	uxth	r3, r3
2400861a:	b11b      	cbz	r3, 24008624 <I2C_ITSlaveCplt.constprop.0+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400861c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400861e:	f043 0304 	orr.w	r3, r3, #4
24008622:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008624:	2600      	movs	r6, #0
24008626:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400862a:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
2400862c:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400862e:	2d00      	cmp	r5, #0
24008630:	d140      	bne.n	240086b4 <I2C_ITSlaveCplt.constprop.0+0x12c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24008632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008634:	2600      	movs	r6, #0
24008636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400863a:	f6cf 76ff 	movt	r6, #65535	; 0xffff
2400863e:	d10e      	bne.n	2400865e <I2C_ITSlaveCplt.constprop.0+0xd6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24008640:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24008644:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24008646:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400864a:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
2400864c:	f04f 0320 	mov.w	r3, #32
24008650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24008654:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24008656:	d052      	beq.n	240086fe <I2C_ITSlaveCplt.constprop.0+0x176>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24008658:	f7ff fde0 	bl	2400821c <HAL_I2C_SlaveTxCpltCallback>
}
2400865c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
2400865e:	4620      	mov	r0, r4
24008660:	f7ff fdde 	bl	24008220 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24008664:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008666:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24008668:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
2400866a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400866e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24008672:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24008674:	f7ff fe5c 	bl	24008330 <HAL_I2C_ListenCpltCallback>
}
24008678:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
2400867a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
2400867c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400867e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24008680:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008682:	b29b      	uxth	r3, r3
24008684:	8563      	strh	r3, [r4, #42]	; 0x2a
24008686:	e7c6      	b.n	24008616 <I2C_ITSlaveCplt.constprop.0+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24008688:	2b22      	cmp	r3, #34	; 0x22
2400868a:	d191      	bne.n	240085b0 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400868c:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400868e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008692:	6802      	ldr	r2, [r0, #0]
24008694:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24008698:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400869a:	6323      	str	r3, [r4, #48]	; 0x30
2400869c:	e788      	b.n	240085b0 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400869e:	042a      	lsls	r2, r5, #16
240086a0:	d5ae      	bpl.n	24008600 <I2C_ITSlaveCplt.constprop.0+0x78>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240086a2:	6822      	ldr	r2, [r4, #0]
240086a4:	6813      	ldr	r3, [r2, #0]
240086a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240086aa:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
240086ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240086ae:	2a00      	cmp	r2, #0
240086b0:	d1a2      	bne.n	240085f8 <I2C_ITSlaveCplt.constprop.0+0x70>
240086b2:	e7a5      	b.n	24008600 <I2C_ITSlaveCplt.constprop.0+0x78>
    I2C_ITError(hi2c, hi2c->ErrorCode);
240086b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
240086b6:	4620      	mov	r0, r4
240086b8:	f7ff fe5e 	bl	24008378 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
240086bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240086c0:	2b28      	cmp	r3, #40	; 0x28
240086c2:	d1cb      	bne.n	2400865c <I2C_ITSlaveCplt.constprop.0+0xd4>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240086c4:	4633      	mov	r3, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240086c6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240086c8:	2120      	movs	r1, #32
  hi2c->XferISR = NULL;
240086ca:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240086cc:	f6cf 73ff 	movt	r3, #65535	; 0xffff
  HAL_I2C_ListenCpltCallback(hi2c);
240086d0:	4620      	mov	r0, r4
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240086d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
240086d4:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
240086d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240086da:	2110      	movs	r1, #16
  hi2c->Mode = HAL_I2C_MODE_NONE;
240086dc:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240086e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240086e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240086e8:	6813      	ldr	r3, [r2, #0]
240086ea:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240086ee:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240086f0:	6823      	ldr	r3, [r4, #0]
240086f2:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
240086f4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
240086f8:	f7ff fe1a 	bl	24008330 <HAL_I2C_ListenCpltCallback>
}
240086fc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
240086fe:	f025 fe7f 	bl	2402e400 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24008702:	bd70      	pop	{r4, r5, r6, pc}

24008704 <I2C_Slave_ISR_IT>:
{
24008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24008706:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
2400870a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
2400870c:	2b01      	cmp	r3, #1
2400870e:	f000 8081 	beq.w	24008814 <I2C_Slave_ISR_IT+0x110>
24008712:	4617      	mov	r7, r2
24008714:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24008716:	068a      	lsls	r2, r1, #26
24008718:	4604      	mov	r4, r0
2400871a:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
2400871c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24008720:	d501      	bpl.n	24008726 <I2C_Slave_ISR_IT+0x22>
24008722:	06bb      	lsls	r3, r7, #26
24008724:	d462      	bmi.n	240087ec <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24008726:	06ea      	lsls	r2, r5, #27
24008728:	d51c      	bpl.n	24008764 <I2C_Slave_ISR_IT+0x60>
2400872a:	06fb      	lsls	r3, r7, #27
2400872c:	d51a      	bpl.n	24008764 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
2400872e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008730:	b29b      	uxth	r3, r3
24008732:	2b00      	cmp	r3, #0
24008734:	d15f      	bne.n	240087f6 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24008736:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
2400873a:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
2400873e:	b2d2      	uxtb	r2, r2
24008740:	d101      	bne.n	24008746 <I2C_Slave_ISR_IT+0x42>
24008742:	2a28      	cmp	r2, #40	; 0x28
24008744:	d07f      	beq.n	24008846 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24008746:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400874a:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400874c:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400874e:	6823      	ldr	r3, [r4, #0]
24008750:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24008752:	d102      	bne.n	2400875a <I2C_Slave_ISR_IT+0x56>
24008754:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24008758:	d162      	bne.n	24008820 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
2400875a:	2300      	movs	r3, #0
  return HAL_OK;
2400875c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
2400875e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24008762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24008764:	076a      	lsls	r2, r5, #29
24008766:	d40d      	bmi.n	24008784 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24008768:	0728      	lsls	r0, r5, #28
2400876a:	d529      	bpl.n	240087c0 <I2C_Slave_ISR_IT+0xbc>
2400876c:	0739      	lsls	r1, r7, #28
2400876e:	d527      	bpl.n	240087c0 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24008770:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24008774:	f003 0328 	and.w	r3, r3, #40	; 0x28
24008778:	2b28      	cmp	r3, #40	; 0x28
2400877a:	d060      	beq.n	2400883e <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400877c:	6823      	ldr	r3, [r4, #0]
2400877e:	2208      	movs	r2, #8
24008780:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24008782:	e7ea      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24008784:	077b      	lsls	r3, r7, #29
24008786:	d5ef      	bpl.n	24008768 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
24008788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400878a:	b29b      	uxth	r3, r3
2400878c:	b16b      	cbz	r3, 240087aa <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400878e:	6822      	ldr	r2, [r4, #0]
24008790:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008792:	6a52      	ldr	r2, [r2, #36]	; 0x24
24008794:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24008796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24008798:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
2400879a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400879c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
2400879e:	3101      	adds	r1, #1
      hi2c->XferSize--;
240087a0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240087a2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
240087a4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240087a6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240087a8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
240087aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240087ac:	b29b      	uxth	r3, r3
240087ae:	2b00      	cmp	r3, #0
240087b0:	d1d3      	bne.n	2400875a <I2C_Slave_ISR_IT+0x56>
240087b2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
240087b6:	d0d0      	beq.n	2400875a <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
240087b8:	4620      	mov	r0, r4
240087ba:	f7ff fd31 	bl	24008220 <I2C_ITSlaveSeqCplt>
240087be:	e7cc      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
240087c0:	07aa      	lsls	r2, r5, #30
240087c2:	d5ca      	bpl.n	2400875a <I2C_Slave_ISR_IT+0x56>
240087c4:	07bb      	lsls	r3, r7, #30
240087c6:	d5c8      	bpl.n	2400875a <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
240087c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240087ca:	b29b      	uxth	r3, r3
240087cc:	b323      	cbz	r3, 24008818 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240087ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
240087d0:	6823      	ldr	r3, [r4, #0]
240087d2:	7812      	ldrb	r2, [r2, #0]
240087d4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
240087d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
240087d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240087da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240087dc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
240087de:	3101      	adds	r1, #1
      hi2c->XferSize--;
240087e0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240087e2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
240087e4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240087e6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240087e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240087ea:	e7b6      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
240087ec:	f7ff fecc 	bl	24008588 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
240087f0:	06ea      	lsls	r2, r5, #27
240087f2:	d5b7      	bpl.n	24008764 <I2C_Slave_ISR_IT+0x60>
240087f4:	e799      	b.n	2400872a <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240087f6:	6823      	ldr	r3, [r4, #0]
240087f8:	2210      	movs	r2, #16
240087fa:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240087fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
240087fe:	f043 0304 	orr.w	r3, r3, #4
24008802:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24008804:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24008808:	d1a7      	bne.n	2400875a <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400880a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400880c:	4620      	mov	r0, r4
2400880e:	f7ff fdb3 	bl	24008378 <I2C_ITError>
24008812:	e7a2      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
24008814:	2002      	movs	r0, #2
}
24008816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24008818:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
2400881c:	d19d      	bne.n	2400875a <I2C_Slave_ISR_IT+0x56>
2400881e:	e7cb      	b.n	240087b8 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24008820:	6823      	ldr	r3, [r4, #0]
24008822:	699a      	ldr	r2, [r3, #24]
24008824:	0790      	lsls	r0, r2, #30
24008826:	d502      	bpl.n	2400882e <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24008828:	2200      	movs	r2, #0
2400882a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400882c:	6823      	ldr	r3, [r4, #0]
2400882e:	699a      	ldr	r2, [r3, #24]
24008830:	07d1      	lsls	r1, r2, #31
24008832:	d4c1      	bmi.n	240087b8 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24008834:	699a      	ldr	r2, [r3, #24]
24008836:	f042 0201 	orr.w	r2, r2, #1
2400883a:	619a      	str	r2, [r3, #24]
2400883c:	e7bc      	b.n	240087b8 <I2C_Slave_ISR_IT+0xb4>
2400883e:	4620      	mov	r0, r4
24008840:	f7ff fd44 	bl	240082cc <I2C_ITAddrCplt.part.0>
24008844:	e789      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008846:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
24008848:	2120      	movs	r1, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400884a:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
2400884c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400884e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
24008852:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24008854:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24008856:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400885a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400885e:	d512      	bpl.n	24008886 <I2C_Slave_ISR_IT+0x182>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008860:	6822      	ldr	r2, [r4, #0]
24008862:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008864:	6a52      	ldr	r2, [r2, #36]	; 0x24
24008866:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24008868:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400886a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
2400886c:	3301      	adds	r3, #1
2400886e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008870:	b14a      	cbz	r2, 24008886 <I2C_Slave_ISR_IT+0x182>
      hi2c->XferCount--;
24008872:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24008874:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24008876:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24008878:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400887a:	b29b      	uxth	r3, r3
2400887c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400887e:	6c63      	ldr	r3, [r4, #68]	; 0x44
24008880:	f043 0304 	orr.w	r3, r3, #4
24008884:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008886:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008888:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400888a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
2400888e:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008890:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008894:	6813      	ldr	r3, [r2, #0]
24008896:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400889a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400889c:	6823      	ldr	r3, [r4, #0]
2400889e:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
240088a0:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
240088a2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
240088a6:	f7ff fd43 	bl	24008330 <HAL_I2C_ListenCpltCallback>
}
240088aa:	e756      	b.n	2400875a <I2C_Slave_ISR_IT+0x56>

240088ac <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240088ac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240088b0:	2a20      	cmp	r2, #32
240088b2:	d129      	bne.n	24008908 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
240088b4:	4603      	mov	r3, r0
{
240088b6:	b500      	push	{lr}
240088b8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240088bc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240088c0:	2a01      	cmp	r2, #1
240088c2:	d023      	beq.n	2400890c <HAL_I2CEx_ConfigAnalogFilter+0x60>
240088c4:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240088c6:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240088c8:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240088d0:	2224      	movs	r2, #36	; 0x24
240088d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240088d6:	6802      	ldr	r2, [r0, #0]
240088d8:	f022 0201 	bic.w	r2, r2, #1
240088dc:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240088de:	6818      	ldr	r0, [r3, #0]
240088e0:	6802      	ldr	r2, [r0, #0]
240088e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
240088e6:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
240088e8:	6818      	ldr	r0, [r3, #0]
240088ea:	6802      	ldr	r2, [r0, #0]
240088ec:	4311      	orrs	r1, r2
240088ee:	6001      	str	r1, [r0, #0]

    return HAL_OK;
240088f0:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
240088f2:	6819      	ldr	r1, [r3, #0]
240088f4:	680a      	ldr	r2, [r1, #0]
240088f6:	f042 0201 	orr.w	r2, r2, #1
240088fa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
240088fc:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24008900:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24008904:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24008908:	2002      	movs	r0, #2
}
2400890a:	4770      	bx	lr
    return HAL_BUSY;
2400890c:	2002      	movs	r0, #2
}
2400890e:	f85d fb04 	ldr.w	pc, [sp], #4
24008912:	bf00      	nop

24008914 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24008914:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
24008918:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
2400891a:	2a20      	cmp	r2, #32
2400891c:	fa5f fc82 	uxtb.w	ip, r2
24008920:	d121      	bne.n	24008966 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24008922:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24008926:	2a01      	cmp	r2, #1
24008928:	d01d      	beq.n	24008966 <HAL_I2CEx_ConfigDigitalFilter+0x52>
2400892a:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400892c:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
2400892e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24008932:	2224      	movs	r2, #36	; 0x24
24008934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24008938:	6802      	ldr	r2, [r0, #0]
2400893a:	f022 0201 	bic.w	r2, r2, #1
2400893e:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24008940:	6818      	ldr	r0, [r3, #0]
24008942:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24008944:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24008948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400894c:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
2400894e:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
24008950:	6818      	ldr	r0, [r3, #0]
24008952:	6802      	ldr	r2, [r0, #0]
24008954:	f042 0201 	orr.w	r2, r2, #1
24008958:	6002      	str	r2, [r0, #0]

    return HAL_OK;
2400895a:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
2400895c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24008960:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
24008964:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
24008966:	2002      	movs	r0, #2
  }
}
24008968:	4770      	bx	lr
2400896a:	bf00      	nop

2400896c <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400896c:	f44f 4388 	mov.w	r3, #17408	; 0x4400

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24008970:	f44f 6280 	mov.w	r2, #1024	; 0x400
{
24008974:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24008976:	f6c5 0302 	movt	r3, #22530	; 0x5802
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400897a:	f6c5 0200 	movt	r2, #22528	; 0x5800
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400897e:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24008982:	f041 0102 	orr.w	r1, r1, #2
24008986:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
2400898a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400898e:	f003 0302 	and.w	r3, r3, #2
24008992:	9301      	str	r3, [sp, #4]
24008994:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24008996:	6853      	ldr	r3, [r2, #4]
24008998:	4318      	orrs	r0, r3
2400899a:	6050      	str	r0, [r2, #4]
}
2400899c:	b002      	add	sp, #8
2400899e:	4770      	bx	lr

240089a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240089a0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240089a2:	f44f 4490 	mov.w	r4, #18432	; 0x4800
240089a6:	f6c5 0402 	movt	r4, #22530	; 0x5802
240089aa:	68e3      	ldr	r3, [r4, #12]
240089ac:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240089b0:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240089b2:	d105      	bne.n	240089c0 <HAL_PWREx_ConfigSupply+0x20>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240089b4:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240089b8:	1a18      	subs	r0, r3, r0
240089ba:	bf18      	it	ne
240089bc:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
240089be:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240089c0:	f023 0307 	bic.w	r3, r3, #7
240089c4:	4303      	orrs	r3, r0
240089c6:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
240089c8:	f7fc fcda 	bl	24005380 <HAL_GetTick>
240089cc:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240089ce:	e005      	b.n	240089dc <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240089d0:	f7fc fcd6 	bl	24005380 <HAL_GetTick>
240089d4:	1b40      	subs	r0, r0, r5
240089d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
240089da:	d804      	bhi.n	240089e6 <HAL_PWREx_ConfigSupply+0x46>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240089dc:	6863      	ldr	r3, [r4, #4]
240089de:	049b      	lsls	r3, r3, #18
240089e0:	d5f6      	bpl.n	240089d0 <HAL_PWREx_ConfigSupply+0x30>
  return HAL_OK;
240089e2:	2000      	movs	r0, #0
}
240089e4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
240089e6:	2001      	movs	r0, #1
}
240089e8:	bd38      	pop	{r3, r4, r5, pc}
240089ea:	bf00      	nop

240089ec <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240089ec:	f44f 4388 	mov.w	r3, #17408	; 0x4400
240089f0:	f6c5 0302 	movt	r3, #22530	; 0x5802
uint32_t HAL_RCC_GetSysClockFreq(void)
240089f4:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240089f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240089f8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240089fa:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
240089fc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24008a02:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24008a06:	d041      	beq.n	24008a8c <HAL_RCC_GetSysClockFreq.part.0+0xa0>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008a08:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008a0c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008a10:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008a14:	fb05 f101 	mul.w	r1, r5, r1
24008a18:	2a01      	cmp	r2, #1
24008a1a:	ee07 1a90 	vmov	s15, r1
24008a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      {
        switch (pllsource)
24008a22:	d002      	beq.n	24008a2a <HAL_RCC_GetSysClockFreq.part.0+0x3e>
24008a24:	2a02      	cmp	r2, #2
24008a26:	d05c      	beq.n	24008ae2 <HAL_RCC_GetSysClockFreq.part.0+0xf6>
24008a28:	b392      	cbz	r2, 24008a90 <HAL_RCC_GetSysClockFreq.part.0+0xa4>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008a2a:	ee07 0a90 	vmov	s15, r0
24008a2e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24008a32:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008a38:	eef8 4ae7 	vcvt.f32.s32	s9, s15
24008a3c:	f6c4 2274 	movt	r2, #19060	; 0x4a74
24008a40:	ee06 2a10 	vmov	s12, r2
24008a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008a48:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
24008a4c:	ee86 7a24 	vdiv.f32	s14, s12, s9
24008a50:	ee07 3a90 	vmov	s15, r3
24008a54:	ee05 1a90 	vmov	s11, r1
24008a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008a5c:	ee77 7a85 	vadd.f32	s15, s15, s10
24008a60:	eee6 7aa5 	vfma.f32	s15, s13, s11
24008a64:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24008a68:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008a6c:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008a72:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008a76:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24008a78:	ee07 3a90 	vmov	s15, r3
24008a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008a80:	eec7 6a27 	vdiv.f32	s13, s14, s15
24008a84:	eefc 7ae6 	vcvt.u32.f32	s15, s13
24008a88:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24008a8c:	bc30      	pop	{r4, r5}
24008a8e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008a90:	681a      	ldr	r2, [r3, #0]
24008a92:	0692      	lsls	r2, r2, #26
24008a94:	d531      	bpl.n	24008afa <HAL_RCC_GetSysClockFreq.part.0+0x10e>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008a96:	6819      	ldr	r1, [r3, #0]
24008a98:	f44f 4210 	mov.w	r2, #36864	; 0x9000
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008a9e:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008aa2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
24008aa6:	f2c0 32d0 	movt	r2, #976	; 0x3d0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008aae:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008ab2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008ab8:	ee07 3a90 	vmov	s15, r3
24008abc:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
24008ac0:	ee06 2a10 	vmov	s12, r2
24008ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008ac8:	ee05 3a90 	vmov	s11, r3
24008acc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24008ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
24008ad4:	ee86 7a05 	vdiv.f32	s14, s12, s10
24008ad8:	eee6 7aa5 	vfma.f32	s15, s13, s11
24008adc:	ee27 7a27 	vmul.f32	s14, s14, s15
24008ae0:	e7c2      	b.n	24008a68 <HAL_RCC_GetSysClockFreq.part.0+0x7c>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ae2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24008ae6:	ee07 0a90 	vmov	s15, r0
24008aea:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008af0:	eef8 4ae7 	vcvt.f32.s32	s9, s15
24008af4:	f6c4 3274 	movt	r2, #19316	; 0x4b74
24008af8:	e7a2      	b.n	24008a40 <HAL_RCC_GetSysClockFreq.part.0+0x54>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008afa:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24008afe:	ee07 0a90 	vmov	s15, r0
24008b02:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008b08:	eef8 4ae7 	vcvt.f32.s32	s9, s15
24008b0c:	f6c4 4274 	movt	r2, #19572	; 0x4c74
24008b10:	e796      	b.n	24008a40 <HAL_RCC_GetSysClockFreq.part.0+0x54>
24008b12:	bf00      	nop

24008b14 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24008b14:	2800      	cmp	r0, #0
24008b16:	f000 8228 	beq.w	24008f6a <HAL_RCC_OscConfig+0x456>
{
24008b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24008b1c:	6803      	ldr	r3, [r0, #0]
24008b1e:	4604      	mov	r4, r0
24008b20:	07d9      	lsls	r1, r3, #31
24008b22:	d537      	bpl.n	24008b94 <HAL_RCC_OscConfig+0x80>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008b24:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24008b28:	f6c5 0102 	movt	r1, #22530	; 0x5802
24008b2c:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008b2e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008b30:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24008b34:	2a10      	cmp	r2, #16
24008b36:	f000 8129 	beq.w	24008d8c <HAL_RCC_OscConfig+0x278>
24008b3a:	2a18      	cmp	r2, #24
24008b3c:	f000 8121 	beq.w	24008d82 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008b40:	6863      	ldr	r3, [r4, #4]
24008b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008b46:	f000 8155 	beq.w	24008df4 <HAL_RCC_OscConfig+0x2e0>
24008b4a:	2b00      	cmp	r3, #0
24008b4c:	f040 81bb 	bne.w	24008ec6 <HAL_RCC_OscConfig+0x3b2>
24008b50:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008b54:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008b58:	681a      	ldr	r2, [r3, #0]
24008b5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24008b5e:	601a      	str	r2, [r3, #0]
24008b60:	681a      	ldr	r2, [r3, #0]
24008b62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24008b66:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24008b68:	6863      	ldr	r3, [r4, #4]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b6a:	f44f 4688 	mov.w	r6, #17408	; 0x4400
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24008b6e:	2b00      	cmp	r3, #0
24008b70:	f000 8189 	beq.w	24008e86 <HAL_RCC_OscConfig+0x372>
        tickstart = HAL_GetTick();
24008b74:	f7fc fc04 	bl	24005380 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b78:	f6c5 0602 	movt	r6, #22530	; 0x5802
        tickstart = HAL_GetTick();
24008b7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b7e:	e005      	b.n	24008b8c <HAL_RCC_OscConfig+0x78>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24008b80:	f7fc fbfe 	bl	24005380 <HAL_GetTick>
24008b84:	1b40      	subs	r0, r0, r5
24008b86:	2864      	cmp	r0, #100	; 0x64
24008b88:	f200 817b 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b8c:	6833      	ldr	r3, [r6, #0]
24008b8e:	039b      	lsls	r3, r3, #14
24008b90:	d5f6      	bpl.n	24008b80 <HAL_RCC_OscConfig+0x6c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24008b92:	6823      	ldr	r3, [r4, #0]
24008b94:	079d      	lsls	r5, r3, #30
24008b96:	f100 8099 	bmi.w	24008ccc <HAL_RCC_OscConfig+0x1b8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008b9a:	06d9      	lsls	r1, r3, #27
24008b9c:	d539      	bpl.n	24008c12 <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008b9e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24008ba2:	f6c5 0202 	movt	r2, #22530	; 0x5802
24008ba6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008ba8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24008bae:	2b08      	cmp	r3, #8
24008bb0:	f000 80ff 	beq.w	24008db2 <HAL_RCC_OscConfig+0x29e>
24008bb4:	2b18      	cmp	r3, #24
24008bb6:	f000 80f7 	beq.w	24008da8 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_ENABLE();
24008bba:	f44f 4588 	mov.w	r5, #17408	; 0x4400
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24008bbe:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24008bc0:	f6c5 0502 	movt	r5, #22530	; 0x5802
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24008bc4:	2b00      	cmp	r3, #0
24008bc6:	f000 81a0 	beq.w	24008f0a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_CSI_ENABLE();
24008bca:	682b      	ldr	r3, [r5, #0]
24008bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24008bd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008bd2:	f7fc fbd5 	bl	24005380 <HAL_GetTick>
24008bd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008bd8:	e005      	b.n	24008be6 <HAL_RCC_OscConfig+0xd2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24008bda:	f7fc fbd1 	bl	24005380 <HAL_GetTick>
24008bde:	1b80      	subs	r0, r0, r6
24008be0:	2802      	cmp	r0, #2
24008be2:	f200 814e 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008be6:	682b      	ldr	r3, [r5, #0]
24008be8:	05db      	lsls	r3, r3, #23
24008bea:	d5f6      	bpl.n	24008bda <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008bec:	f7fc fbe2 	bl	240053b4 <HAL_GetREVID>
24008bf0:	f241 0303 	movw	r3, #4099	; 0x1003
24008bf4:	4298      	cmp	r0, r3
24008bf6:	f200 829d 	bhi.w	24009134 <HAL_RCC_OscConfig+0x620>
24008bfa:	6a22      	ldr	r2, [r4, #32]
24008bfc:	686b      	ldr	r3, [r5, #4]
24008bfe:	2a20      	cmp	r2, #32
24008c00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24008c04:	bf0c      	ite	eq
24008c06:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24008c0a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24008c0e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008c10:	6823      	ldr	r3, [r4, #0]
24008c12:	071d      	lsls	r5, r3, #28
24008c14:	d519      	bpl.n	24008c4a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_LSI_ENABLE();
24008c16:	f44f 4588 	mov.w	r5, #17408	; 0x4400
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24008c1a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
24008c1c:	f6c5 0502 	movt	r5, #22530	; 0x5802
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24008c20:	2b00      	cmp	r3, #0
24008c22:	f000 813f 	beq.w	24008ea4 <HAL_RCC_OscConfig+0x390>
      __HAL_RCC_LSI_ENABLE();
24008c26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008c28:	f043 0301 	orr.w	r3, r3, #1
24008c2c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24008c2e:	f7fc fba7 	bl	24005380 <HAL_GetTick>
24008c32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24008c34:	e005      	b.n	24008c42 <HAL_RCC_OscConfig+0x12e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24008c36:	f7fc fba3 	bl	24005380 <HAL_GetTick>
24008c3a:	1b80      	subs	r0, r0, r6
24008c3c:	2802      	cmp	r0, #2
24008c3e:	f200 8120 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24008c42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008c44:	0798      	lsls	r0, r3, #30
24008c46:	d5f6      	bpl.n	24008c36 <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24008c48:	6823      	ldr	r3, [r4, #0]
24008c4a:	069a      	lsls	r2, r3, #26
24008c4c:	d519      	bpl.n	24008c82 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSI48_ENABLE();
24008c4e:	f44f 4588 	mov.w	r5, #17408	; 0x4400
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24008c52:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24008c54:	f6c5 0502 	movt	r5, #22530	; 0x5802
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24008c58:	2b00      	cmp	r3, #0
24008c5a:	f000 8145 	beq.w	24008ee8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSI48_ENABLE();
24008c5e:	682b      	ldr	r3, [r5, #0]
24008c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24008c64:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24008c66:	f7fc fb8b 	bl	24005380 <HAL_GetTick>
24008c6a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24008c6c:	e005      	b.n	24008c7a <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24008c6e:	f7fc fb87 	bl	24005380 <HAL_GetTick>
24008c72:	1b80      	subs	r0, r0, r6
24008c74:	2802      	cmp	r0, #2
24008c76:	f200 8104 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24008c7a:	682b      	ldr	r3, [r5, #0]
24008c7c:	049f      	lsls	r7, r3, #18
24008c7e:	d5f6      	bpl.n	24008c6e <HAL_RCC_OscConfig+0x15a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24008c80:	6823      	ldr	r3, [r4, #0]
24008c82:	0759      	lsls	r1, r3, #29
24008c84:	f100 80bf 	bmi.w	24008e06 <HAL_RCC_OscConfig+0x2f2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24008c88:	6a60      	ldr	r0, [r4, #36]	; 0x24
24008c8a:	b1e8      	cbz	r0, 24008cc8 <HAL_RCC_OscConfig+0x1b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24008c8c:	f44f 4588 	mov.w	r5, #17408	; 0x4400
24008c90:	f6c5 0502 	movt	r5, #22530	; 0x5802
24008c94:	692b      	ldr	r3, [r5, #16]
24008c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008c9a:	2b18      	cmp	r3, #24
24008c9c:	f000 81e2 	beq.w	24009064 <HAL_RCC_OscConfig+0x550>
        __HAL_RCC_PLL_DISABLE();
24008ca0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24008ca2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24008ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24008ca8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24008caa:	f000 816d 	beq.w	24008f88 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
24008cae:	f7fc fb67 	bl	24005380 <HAL_GetTick>
24008cb2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008cb4:	e005      	b.n	24008cc2 <HAL_RCC_OscConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24008cb6:	f7fc fb63 	bl	24005380 <HAL_GetTick>
24008cba:	1b00      	subs	r0, r0, r4
24008cbc:	2802      	cmp	r0, #2
24008cbe:	f200 80e0 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008cc2:	682b      	ldr	r3, [r5, #0]
24008cc4:	019b      	lsls	r3, r3, #6
24008cc6:	d4f6      	bmi.n	24008cb6 <HAL_RCC_OscConfig+0x1a2>
  return HAL_OK;
24008cc8:	2000      	movs	r0, #0
}
24008cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008ccc:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24008cd0:	f6c5 0202 	movt	r2, #22530	; 0x5802
24008cd4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008cd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24008cd8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24008cdc:	d133      	bne.n	24008d46 <HAL_RCC_OscConfig+0x232>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24008cde:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008ce2:	68e2      	ldr	r2, [r4, #12]
24008ce4:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008ce8:	681b      	ldr	r3, [r3, #0]
24008cea:	0759      	lsls	r1, r3, #29
24008cec:	d501      	bpl.n	24008cf2 <HAL_RCC_OscConfig+0x1de>
24008cee:	2a00      	cmp	r2, #0
24008cf0:	d058      	beq.n	24008da4 <HAL_RCC_OscConfig+0x290>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008cf2:	f44f 4588 	mov.w	r5, #17408	; 0x4400
24008cf6:	f6c5 0502 	movt	r5, #22530	; 0x5802
24008cfa:	682b      	ldr	r3, [r5, #0]
24008cfc:	f023 0319 	bic.w	r3, r3, #25
24008d00:	4313      	orrs	r3, r2
24008d02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008d04:	f7fc fb3c 	bl	24005380 <HAL_GetTick>
24008d08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008d0a:	e005      	b.n	24008d18 <HAL_RCC_OscConfig+0x204>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24008d0c:	f7fc fb38 	bl	24005380 <HAL_GetTick>
24008d10:	1b80      	subs	r0, r0, r6
24008d12:	2802      	cmp	r0, #2
24008d14:	f200 80b5 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008d18:	682b      	ldr	r3, [r5, #0]
24008d1a:	075b      	lsls	r3, r3, #29
24008d1c:	d5f6      	bpl.n	24008d0c <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24008d1e:	f7fc fb49 	bl	240053b4 <HAL_GetREVID>
24008d22:	f241 0303 	movw	r3, #4099	; 0x1003
24008d26:	4298      	cmp	r0, r3
24008d28:	f200 8116 	bhi.w	24008f58 <HAL_RCC_OscConfig+0x444>
24008d2c:	6922      	ldr	r2, [r4, #16]
24008d2e:	686b      	ldr	r3, [r5, #4]
24008d30:	2a40      	cmp	r2, #64	; 0x40
24008d32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24008d36:	bf0c      	ite	eq
24008d38:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
24008d3c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24008d40:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008d42:	6823      	ldr	r3, [r4, #0]
24008d44:	e729      	b.n	24008b9a <HAL_RCC_OscConfig+0x86>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24008d46:	2b18      	cmp	r3, #24
24008d48:	f000 8102 	beq.w	24008f50 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008d4c:	f44f 4588 	mov.w	r5, #17408	; 0x4400
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24008d50:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008d52:	f6c5 0502 	movt	r5, #22530	; 0x5802
24008d56:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24008d58:	2a00      	cmp	r2, #0
24008d5a:	f000 80e8 	beq.w	24008f2e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008d5e:	f023 0319 	bic.w	r3, r3, #25
24008d62:	4313      	orrs	r3, r2
24008d64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008d66:	f7fc fb0b 	bl	24005380 <HAL_GetTick>
24008d6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008d6c:	e005      	b.n	24008d7a <HAL_RCC_OscConfig+0x266>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24008d6e:	f7fc fb07 	bl	24005380 <HAL_GetTick>
24008d72:	1b80      	subs	r0, r0, r6
24008d74:	2802      	cmp	r0, #2
24008d76:	f200 8084 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008d7a:	682b      	ldr	r3, [r5, #0]
24008d7c:	075f      	lsls	r7, r3, #29
24008d7e:	d5f6      	bpl.n	24008d6e <HAL_RCC_OscConfig+0x25a>
24008d80:	e7cd      	b.n	24008d1e <HAL_RCC_OscConfig+0x20a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24008d82:	f001 0103 	and.w	r1, r1, #3
24008d86:	2902      	cmp	r1, #2
24008d88:	f47f aeda 	bne.w	24008b40 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24008d8c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24008d90:	f6c5 0202 	movt	r2, #22530	; 0x5802
24008d94:	6812      	ldr	r2, [r2, #0]
24008d96:	0392      	lsls	r2, r2, #14
24008d98:	f57f aefc 	bpl.w	24008b94 <HAL_RCC_OscConfig+0x80>
24008d9c:	6862      	ldr	r2, [r4, #4]
24008d9e:	2a00      	cmp	r2, #0
24008da0:	f47f aef8 	bne.w	24008b94 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
24008da4:	2001      	movs	r0, #1
}
24008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24008da8:	f002 0203 	and.w	r2, r2, #3
24008dac:	2a01      	cmp	r2, #1
24008dae:	f47f af04 	bne.w	24008bba <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24008db2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008db6:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008dba:	681b      	ldr	r3, [r3, #0]
24008dbc:	05da      	lsls	r2, r3, #23
24008dbe:	d502      	bpl.n	24008dc6 <HAL_RCC_OscConfig+0x2b2>
24008dc0:	69e3      	ldr	r3, [r4, #28]
24008dc2:	2b80      	cmp	r3, #128	; 0x80
24008dc4:	d1ee      	bne.n	24008da4 <HAL_RCC_OscConfig+0x290>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008dc6:	f7fc faf5 	bl	240053b4 <HAL_GetREVID>
24008dca:	f241 0303 	movw	r3, #4099	; 0x1003
24008dce:	4298      	cmp	r0, r3
24008dd0:	f200 80cd 	bhi.w	24008f6e <HAL_RCC_OscConfig+0x45a>
24008dd4:	6a22      	ldr	r2, [r4, #32]
24008dd6:	2a20      	cmp	r2, #32
24008dd8:	f000 81ce 	beq.w	24009178 <HAL_RCC_OscConfig+0x664>
24008ddc:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24008de0:	f6c5 0102 	movt	r1, #22530	; 0x5802
24008de4:	684b      	ldr	r3, [r1, #4]
24008de6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24008dea:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24008dee:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008df0:	6823      	ldr	r3, [r4, #0]
24008df2:	e70e      	b.n	24008c12 <HAL_RCC_OscConfig+0xfe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008df4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008df8:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008dfc:	681a      	ldr	r2, [r3, #0]
24008dfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24008e02:	601a      	str	r2, [r3, #0]
24008e04:	e6b0      	b.n	24008b68 <HAL_RCC_OscConfig+0x54>
    PWR->CR1 |= PWR_CR1_DBP;
24008e06:	f44f 4590 	mov.w	r5, #18432	; 0x4800
24008e0a:	f6c5 0502 	movt	r5, #22530	; 0x5802
24008e0e:	682b      	ldr	r3, [r5, #0]
24008e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008e14:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24008e16:	f7fc fab3 	bl	24005380 <HAL_GetTick>
24008e1a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008e1c:	e004      	b.n	24008e28 <HAL_RCC_OscConfig+0x314>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008e1e:	f7fc faaf 	bl	24005380 <HAL_GetTick>
24008e22:	1b80      	subs	r0, r0, r6
24008e24:	2864      	cmp	r0, #100	; 0x64
24008e26:	d82c      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008e28:	682b      	ldr	r3, [r5, #0]
24008e2a:	05da      	lsls	r2, r3, #23
24008e2c:	d5f7      	bpl.n	24008e1e <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24008e2e:	68a3      	ldr	r3, [r4, #8]
24008e30:	2b01      	cmp	r3, #1
24008e32:	f000 8188 	beq.w	24009146 <HAL_RCC_OscConfig+0x632>
24008e36:	2b00      	cmp	r3, #0
24008e38:	f040 818e 	bne.w	24009158 <HAL_RCC_OscConfig+0x644>
24008e3c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008e40:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24008e46:	f022 0201 	bic.w	r2, r2, #1
24008e4a:	671a      	str	r2, [r3, #112]	; 0x70
24008e4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24008e4e:	f022 0204 	bic.w	r2, r2, #4
24008e52:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24008e54:	68a3      	ldr	r3, [r4, #8]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008e56:	f44f 4688 	mov.w	r6, #17408	; 0x4400
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24008e5a:	2b00      	cmp	r3, #0
24008e5c:	f000 8158 	beq.w	24009110 <HAL_RCC_OscConfig+0x5fc>
      tickstart = HAL_GetTick();
24008e60:	f7fc fa8e 	bl	24005380 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008e64:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008e68:	f6c5 0602 	movt	r6, #22530	; 0x5802
      tickstart = HAL_GetTick();
24008e6c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008e6e:	e004      	b.n	24008e7a <HAL_RCC_OscConfig+0x366>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008e70:	f7fc fa86 	bl	24005380 <HAL_GetTick>
24008e74:	1b40      	subs	r0, r0, r5
24008e76:	42b8      	cmp	r0, r7
24008e78:	d803      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008e7a:	6f33      	ldr	r3, [r6, #112]	; 0x70
24008e7c:	079b      	lsls	r3, r3, #30
24008e7e:	d5f7      	bpl.n	24008e70 <HAL_RCC_OscConfig+0x35c>
24008e80:	e702      	b.n	24008c88 <HAL_RCC_OscConfig+0x174>
            return HAL_TIMEOUT;
24008e82:	2003      	movs	r0, #3
}
24008e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
24008e86:	f7fc fa7b 	bl	24005380 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008e8a:	f6c5 0602 	movt	r6, #22530	; 0x5802
        tickstart = HAL_GetTick();
24008e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008e90:	e004      	b.n	24008e9c <HAL_RCC_OscConfig+0x388>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24008e92:	f7fc fa75 	bl	24005380 <HAL_GetTick>
24008e96:	1b40      	subs	r0, r0, r5
24008e98:	2864      	cmp	r0, #100	; 0x64
24008e9a:	d8f2      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008e9c:	6833      	ldr	r3, [r6, #0]
24008e9e:	039f      	lsls	r7, r3, #14
24008ea0:	d4f7      	bmi.n	24008e92 <HAL_RCC_OscConfig+0x37e>
24008ea2:	e676      	b.n	24008b92 <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
24008ea4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008ea6:	f023 0301 	bic.w	r3, r3, #1
24008eaa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24008eac:	f7fc fa68 	bl	24005380 <HAL_GetTick>
24008eb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24008eb2:	e004      	b.n	24008ebe <HAL_RCC_OscConfig+0x3aa>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24008eb4:	f7fc fa64 	bl	24005380 <HAL_GetTick>
24008eb8:	1b80      	subs	r0, r0, r6
24008eba:	2802      	cmp	r0, #2
24008ebc:	d8e1      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24008ebe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008ec0:	0799      	lsls	r1, r3, #30
24008ec2:	d4f7      	bmi.n	24008eb4 <HAL_RCC_OscConfig+0x3a0>
24008ec4:	e6c0      	b.n	24008c48 <HAL_RCC_OscConfig+0x134>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24008eca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24008ece:	f6c5 0302 	movt	r3, #22530	; 0x5802
24008ed2:	681a      	ldr	r2, [r3, #0]
24008ed4:	f47f ae41 	bne.w	24008b5a <HAL_RCC_OscConfig+0x46>
24008ed8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24008edc:	601a      	str	r2, [r3, #0]
24008ede:	681a      	ldr	r2, [r3, #0]
24008ee0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24008ee4:	601a      	str	r2, [r3, #0]
24008ee6:	e63f      	b.n	24008b68 <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSI48_DISABLE();
24008ee8:	682b      	ldr	r3, [r5, #0]
24008eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24008eee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24008ef0:	f7fc fa46 	bl	24005380 <HAL_GetTick>
24008ef4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24008ef6:	e004      	b.n	24008f02 <HAL_RCC_OscConfig+0x3ee>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24008ef8:	f7fc fa42 	bl	24005380 <HAL_GetTick>
24008efc:	1b80      	subs	r0, r0, r6
24008efe:	2802      	cmp	r0, #2
24008f00:	d8bf      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24008f02:	682b      	ldr	r3, [r5, #0]
24008f04:	0498      	lsls	r0, r3, #18
24008f06:	d4f7      	bmi.n	24008ef8 <HAL_RCC_OscConfig+0x3e4>
24008f08:	e6ba      	b.n	24008c80 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_CSI_DISABLE();
24008f0a:	682b      	ldr	r3, [r5, #0]
24008f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24008f10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008f12:	f7fc fa35 	bl	24005380 <HAL_GetTick>
24008f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24008f18:	e004      	b.n	24008f24 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24008f1a:	f7fc fa31 	bl	24005380 <HAL_GetTick>
24008f1e:	1b80      	subs	r0, r0, r6
24008f20:	2802      	cmp	r0, #2
24008f22:	d8ae      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24008f24:	682b      	ldr	r3, [r5, #0]
24008f26:	05df      	lsls	r7, r3, #23
24008f28:	d4f7      	bmi.n	24008f1a <HAL_RCC_OscConfig+0x406>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008f2a:	6823      	ldr	r3, [r4, #0]
24008f2c:	e671      	b.n	24008c12 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
24008f2e:	f023 0301 	bic.w	r3, r3, #1
24008f32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008f34:	f7fc fa24 	bl	24005380 <HAL_GetTick>
24008f38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24008f3a:	e004      	b.n	24008f46 <HAL_RCC_OscConfig+0x432>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24008f3c:	f7fc fa20 	bl	24005380 <HAL_GetTick>
24008f40:	1b80      	subs	r0, r0, r6
24008f42:	2802      	cmp	r0, #2
24008f44:	d89d      	bhi.n	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24008f46:	682b      	ldr	r3, [r5, #0]
24008f48:	0758      	lsls	r0, r3, #29
24008f4a:	d4f7      	bmi.n	24008f3c <HAL_RCC_OscConfig+0x428>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008f4c:	6823      	ldr	r3, [r4, #0]
24008f4e:	e624      	b.n	24008b9a <HAL_RCC_OscConfig+0x86>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24008f50:	0790      	lsls	r0, r2, #30
24008f52:	f47f aefb 	bne.w	24008d4c <HAL_RCC_OscConfig+0x238>
24008f56:	e6c2      	b.n	24008cde <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24008f58:	686b      	ldr	r3, [r5, #4]
24008f5a:	6922      	ldr	r2, [r4, #16]
24008f5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24008f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24008f64:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008f66:	6823      	ldr	r3, [r4, #0]
24008f68:	e617      	b.n	24008b9a <HAL_RCC_OscConfig+0x86>
    return HAL_ERROR;
24008f6a:	2001      	movs	r0, #1
}
24008f6c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008f6e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24008f72:	6a21      	ldr	r1, [r4, #32]
24008f74:	f6c5 0202 	movt	r2, #22530	; 0x5802
24008f78:	68d3      	ldr	r3, [r2, #12]
24008f7a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24008f7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24008f82:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008f84:	6823      	ldr	r3, [r4, #0]
24008f86:	e644      	b.n	24008c12 <HAL_RCC_OscConfig+0xfe>
        tickstart = HAL_GetTick();
24008f88:	f7fc f9fa 	bl	24005380 <HAL_GetTick>
24008f8c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008f8e:	e005      	b.n	24008f9c <HAL_RCC_OscConfig+0x488>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24008f90:	f7fc f9f6 	bl	24005380 <HAL_GetTick>
24008f94:	1b80      	subs	r0, r0, r6
24008f96:	2802      	cmp	r0, #2
24008f98:	f63f af73 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008f9c:	682b      	ldr	r3, [r5, #0]
24008f9e:	0199      	lsls	r1, r3, #6
24008fa0:	d4f6      	bmi.n	24008f90 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008fa2:	f64f 430c 	movw	r3, #64524	; 0xfc0c
24008fa6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24008fa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008faa:	f44f 4688 	mov.w	r6, #17408	; 0x4400
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008fae:	f6cf 73ff 	movt	r3, #65535	; 0xffff
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008fb2:	f6c5 0602 	movt	r6, #22530	; 0x5802
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008fb6:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008fb8:	2107      	movs	r1, #7
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008fba:	4313      	orrs	r3, r2
24008fbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008fbe:	f6cf 71ff 	movt	r1, #65535	; 0xffff
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008fc2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24008fc6:	62ab      	str	r3, [r5, #40]	; 0x28
24008fc8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24008fcc:	3b01      	subs	r3, #1
24008fce:	3a01      	subs	r2, #1
24008fd0:	025b      	lsls	r3, r3, #9
24008fd2:	0412      	lsls	r2, r2, #16
24008fd4:	b29b      	uxth	r3, r3
24008fd6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008fda:	4313      	orrs	r3, r2
24008fdc:	6b22      	ldr	r2, [r4, #48]	; 0x30
24008fde:	3a01      	subs	r2, #1
24008fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008fe4:	4313      	orrs	r3, r2
24008fe6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24008fe8:	3a01      	subs	r2, #1
24008fea:	0612      	lsls	r2, r2, #24
24008fec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008ff0:	4313      	orrs	r3, r2
24008ff2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24008ff4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008ff6:	f023 0301 	bic.w	r3, r3, #1
24008ffa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008ffc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24008ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24009000:	4011      	ands	r1, r2
24009002:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
24009006:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24009008:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400900a:	6c22      	ldr	r2, [r4, #64]	; 0x40
2400900c:	f023 030c 	bic.w	r3, r3, #12
24009010:	4313      	orrs	r3, r2
24009012:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24009014:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009016:	6c62      	ldr	r2, [r4, #68]	; 0x44
24009018:	f023 0302 	bic.w	r3, r3, #2
2400901c:	4313      	orrs	r3, r2
2400901e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24009020:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009026:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009028:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400902a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400902e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24009030:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24009036:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24009038:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400903a:	f043 0301 	orr.w	r3, r3, #1
2400903e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24009040:	682b      	ldr	r3, [r5, #0]
24009042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24009046:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009048:	f7fc f99a 	bl	24005380 <HAL_GetTick>
2400904c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400904e:	e005      	b.n	2400905c <HAL_RCC_OscConfig+0x548>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24009050:	f7fc f996 	bl	24005380 <HAL_GetTick>
24009054:	1b00      	subs	r0, r0, r4
24009056:	2802      	cmp	r0, #2
24009058:	f63f af13 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400905c:	6833      	ldr	r3, [r6, #0]
2400905e:	019a      	lsls	r2, r3, #6
24009060:	d5f6      	bpl.n	24009050 <HAL_RCC_OscConfig+0x53c>
24009062:	e631      	b.n	24008cc8 <HAL_RCC_OscConfig+0x1b4>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24009064:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
24009066:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24009068:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400906a:	f43f ae2e 	beq.w	24008cca <HAL_RCC_OscConfig+0x1b6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400906e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24009072:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24009074:	428b      	cmp	r3, r1
24009076:	f47f ae95 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400907a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400907e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009080:	429a      	cmp	r2, r3
24009082:	f47f ae8f 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24009086:	6b23      	ldr	r3, [r4, #48]	; 0x30
24009088:	f3c6 0208 	ubfx	r2, r6, #0, #9
2400908c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400908e:	429a      	cmp	r2, r3
24009090:	f47f ae88 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24009094:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009096:	f3c6 2246 	ubfx	r2, r6, #9, #7
2400909a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400909c:	429a      	cmp	r2, r3
2400909e:	f47f ae81 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240090a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240090a4:	f3c6 4206 	ubfx	r2, r6, #16, #7
240090a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240090aa:	429a      	cmp	r2, r3
240090ac:	f47f ae7a 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240090b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240090b2:	f3c6 6606 	ubfx	r6, r6, #24, #7
240090b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240090b8:	429e      	cmp	r6, r3
240090ba:	f47f ae73 	bne.w	24008da4 <HAL_RCC_OscConfig+0x290>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240090be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240090c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240090c2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240090c6:	429a      	cmp	r2, r3
240090c8:	f43f adfe 	beq.w	24008cc8 <HAL_RCC_OscConfig+0x1b4>
          __HAL_RCC_PLLFRACN_DISABLE();
240090cc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
240090d0:	f6c5 0302 	movt	r3, #22530	; 0x5802
240090d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240090d6:	f022 0201 	bic.w	r2, r2, #1
240090da:	62da      	str	r2, [r3, #44]	; 0x2c
          tickstart = HAL_GetTick();
240090dc:	f7fc f950 	bl	24005380 <HAL_GetTick>
240090e0:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
240090e2:	f7fc f94d 	bl	24005380 <HAL_GetTick>
240090e6:	42a8      	cmp	r0, r5
240090e8:	d0fb      	beq.n	240090e2 <HAL_RCC_OscConfig+0x5ce>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240090ea:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240090ee:	2307      	movs	r3, #7
240090f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  return HAL_OK;
240090f2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240090f4:	f6c5 0202 	movt	r2, #22530	; 0x5802
240090f8:	f6cf 73ff 	movt	r3, #65535	; 0xffff
240090fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
240090fe:	4023      	ands	r3, r4
24009100:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24009104:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24009106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009108:	f043 0301 	orr.w	r3, r3, #1
2400910c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24009110:	f7fc f936 	bl	24005380 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009114:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24009118:	f6c5 0602 	movt	r6, #22530	; 0x5802
      tickstart = HAL_GetTick();
2400911c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400911e:	e005      	b.n	2400912c <HAL_RCC_OscConfig+0x618>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009120:	f7fc f92e 	bl	24005380 <HAL_GetTick>
24009124:	1b40      	subs	r0, r0, r5
24009126:	42b8      	cmp	r0, r7
24009128:	f63f aeab 	bhi.w	24008e82 <HAL_RCC_OscConfig+0x36e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400912c:	6f33      	ldr	r3, [r6, #112]	; 0x70
2400912e:	0798      	lsls	r0, r3, #30
24009130:	d4f6      	bmi.n	24009120 <HAL_RCC_OscConfig+0x60c>
24009132:	e5a9      	b.n	24008c88 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24009134:	68eb      	ldr	r3, [r5, #12]
24009136:	6a22      	ldr	r2, [r4, #32]
24009138:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
2400913c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24009140:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24009142:	6823      	ldr	r3, [r4, #0]
24009144:	e565      	b.n	24008c12 <HAL_RCC_OscConfig+0xfe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24009146:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400914a:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400914e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24009150:	f042 0201 	orr.w	r2, r2, #1
24009154:	671a      	str	r2, [r3, #112]	; 0x70
24009156:	e67d      	b.n	24008e54 <HAL_RCC_OscConfig+0x340>
24009158:	2b05      	cmp	r3, #5
2400915a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400915e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24009164:	f47f ae6f 	bne.w	24008e46 <HAL_RCC_OscConfig+0x332>
24009168:	f042 0204 	orr.w	r2, r2, #4
2400916c:	671a      	str	r2, [r3, #112]	; 0x70
2400916e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24009170:	f042 0201 	orr.w	r2, r2, #1
24009174:	671a      	str	r2, [r3, #112]	; 0x70
24009176:	e66d      	b.n	24008e54 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24009178:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400917c:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009180:	6853      	ldr	r3, [r2, #4]
24009182:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24009186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
2400918a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400918c:	6823      	ldr	r3, [r4, #0]
2400918e:	e540      	b.n	24008c12 <HAL_RCC_OscConfig+0xfe>

24009190 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24009190:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
24009194:	f6c5 0c02 	movt	ip, #22530	; 0x5802
24009198:	f8dc 3010 	ldr.w	r3, [ip, #16]
2400919c:	f003 0338 	and.w	r3, r3, #56	; 0x38
240091a0:	2b10      	cmp	r3, #16
240091a2:	d007      	beq.n	240091b4 <HAL_RCC_GetSysClockFreq+0x24>
240091a4:	2b18      	cmp	r3, #24
240091a6:	d018      	beq.n	240091da <HAL_RCC_GetSysClockFreq+0x4a>
240091a8:	b14b      	cbz	r3, 240091be <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = CSI_VALUE;
240091aa:	f44f 6010 	mov.w	r0, #2304	; 0x900
240091ae:	f2c0 003d 	movt	r0, #61	; 0x3d
240091b2:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
240091b4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
240091b8:	f2c0 00f4 	movt	r0, #244	; 0xf4
240091bc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240091be:	f8dc 3000 	ldr.w	r3, [ip]
240091c2:	069a      	lsls	r2, r3, #26
240091c4:	d55e      	bpl.n	24009284 <HAL_RCC_GetSysClockFreq+0xf4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091c6:	f8dc 3000 	ldr.w	r3, [ip]
240091ca:	f44f 4010 	mov.w	r0, #36864	; 0x9000
240091ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240091d2:	f2c0 30d0 	movt	r0, #976	; 0x3d0
240091d6:	40d8      	lsrs	r0, r3
240091d8:	4770      	bx	lr
{
240091da:	b410      	push	{r4}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240091dc:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240091e0:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240091e4:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
      if (pllm != 0U)
240091e8:	f411 7f7c 	tst.w	r1, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240091ec:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240091f0:	f3c1 1005 	ubfx	r0, r1, #4, #6
      if (pllm != 0U)
240091f4:	d043      	beq.n	2400927e <HAL_RCC_GetSysClockFreq+0xee>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240091f6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240091fa:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240091fe:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009202:	fb04 f202 	mul.w	r2, r4, r2
24009206:	2b01      	cmp	r3, #1
24009208:	ee07 2a90 	vmov	s15, r2
2400920c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        switch (pllsource)
24009210:	d003      	beq.n	2400921a <HAL_RCC_GetSysClockFreq+0x8a>
24009212:	2b02      	cmp	r3, #2
24009214:	d03b      	beq.n	2400928e <HAL_RCC_GetSysClockFreq+0xfe>
24009216:	2b00      	cmp	r3, #0
24009218:	d046      	beq.n	240092a8 <HAL_RCC_GetSysClockFreq+0x118>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400921a:	ee07 0a90 	vmov	s15, r0
2400921e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24009222:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24009226:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
2400922a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
2400922e:	f6c4 2274 	movt	r2, #19060	; 0x4a74
24009232:	ee06 2a10 	vmov	s12, r2
24009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400923a:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
2400923e:	ee86 7a24 	vdiv.f32	s14, s12, s9
24009242:	ee07 3a90 	vmov	s15, r3
24009246:	ee05 1a90 	vmov	s11, r1
2400924a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400924e:	ee77 7a85 	vadd.f32	s15, s15, s10
24009252:	eee6 7aa5 	vfma.f32	s15, s13, s11
24009256:	ee27 7a27 	vmul.f32	s14, s14, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400925a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400925e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009264:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009268:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400926a:	ee07 3a90 	vmov	s15, r3
2400926e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009272:	eec7 6a27 	vdiv.f32	s13, s14, s15
24009276:	eefc 7ae6 	vcvt.u32.f32	s15, s13
2400927a:	ee17 0a90 	vmov	r0, s15
}
2400927e:	f85d 4b04 	ldr.w	r4, [sp], #4
24009282:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
24009284:	f44f 4010 	mov.w	r0, #36864	; 0x9000
24009288:	f2c0 30d0 	movt	r0, #976	; 0x3d0
}
2400928c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400928e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24009292:	ee07 0a90 	vmov	s15, r0
24009296:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400929a:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
2400929e:	eef8 4ae7 	vcvt.f32.s32	s9, s15
240092a2:	f6c4 3274 	movt	r2, #19316	; 0x4b74
240092a6:	e7c4      	b.n	24009232 <HAL_RCC_GetSysClockFreq+0xa2>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240092a8:	f8dc 3000 	ldr.w	r3, [ip]
240092ac:	069b      	lsls	r3, r3, #26
240092ae:	d527      	bpl.n	24009300 <HAL_RCC_GetSysClockFreq+0x170>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092b0:	f8dc 1000 	ldr.w	r1, [ip]
240092b4:	f44f 4210 	mov.w	r2, #36864	; 0x9000
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240092b8:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
240092bc:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092c0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
240092c4:	f2c0 32d0 	movt	r2, #976	; 0x3d0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240092c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240092cc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092d0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240092d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240092d6:	ee07 3a90 	vmov	s15, r3
240092da:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
240092de:	ee06 2a10 	vmov	s12, r2
240092e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240092e6:	ee05 3a90 	vmov	s11, r3
240092ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240092ee:	ee77 7a87 	vadd.f32	s15, s15, s14
240092f2:	ee86 7a05 	vdiv.f32	s14, s12, s10
240092f6:	eee6 7aa5 	vfma.f32	s15, s13, s11
240092fa:	ee27 7a27 	vmul.f32	s14, s14, s15
240092fe:	e7ac      	b.n	2400925a <HAL_RCC_GetSysClockFreq+0xca>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009300:	f44f 5210 	mov.w	r2, #9216	; 0x2400
24009304:	ee07 0a90 	vmov	s15, r0
24009308:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400930c:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
24009310:	eef8 4ae7 	vcvt.f32.s32	s9, s15
24009314:	f6c4 4274 	movt	r2, #19572	; 0x4c74
24009318:	e78b      	b.n	24009232 <HAL_RCC_GetSysClockFreq+0xa2>
2400931a:	bf00      	nop

2400931c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
2400931c:	2800      	cmp	r0, #0
2400931e:	f000 814e 	beq.w	240095be <HAL_RCC_ClockConfig+0x2a2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24009322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24009326:	f2c5 2300 	movt	r3, #20992	; 0x5200
{
2400932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400932e:	681a      	ldr	r2, [r3, #0]
24009330:	4604      	mov	r4, r0
24009332:	460d      	mov	r5, r1
24009334:	f002 020f 	and.w	r2, r2, #15
24009338:	428a      	cmp	r2, r1
2400933a:	d20c      	bcs.n	24009356 <HAL_RCC_ClockConfig+0x3a>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400933c:	681a      	ldr	r2, [r3, #0]
2400933e:	f022 020f 	bic.w	r2, r2, #15
24009342:	430a      	orrs	r2, r1
24009344:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24009346:	681b      	ldr	r3, [r3, #0]
24009348:	f003 030f 	and.w	r3, r3, #15
2400934c:	428b      	cmp	r3, r1
2400934e:	d002      	beq.n	24009356 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
24009350:	2001      	movs	r0, #1
}
24009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24009356:	6823      	ldr	r3, [r4, #0]
24009358:	075f      	lsls	r7, r3, #29
2400935a:	d50f      	bpl.n	2400937c <HAL_RCC_ClockConfig+0x60>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400935c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009360:	6920      	ldr	r0, [r4, #16]
24009362:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009366:	6991      	ldr	r1, [r2, #24]
24009368:	f001 0170 	and.w	r1, r1, #112	; 0x70
2400936c:	4288      	cmp	r0, r1
2400936e:	d905      	bls.n	2400937c <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24009370:	6993      	ldr	r3, [r2, #24]
24009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24009376:	4303      	orrs	r3, r0
24009378:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400937a:	6823      	ldr	r3, [r4, #0]
2400937c:	071e      	lsls	r6, r3, #28
2400937e:	d50f      	bpl.n	240093a0 <HAL_RCC_ClockConfig+0x84>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24009380:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009384:	6960      	ldr	r0, [r4, #20]
24009386:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400938a:	69d1      	ldr	r1, [r2, #28]
2400938c:	f001 0170 	and.w	r1, r1, #112	; 0x70
24009390:	4288      	cmp	r0, r1
24009392:	d905      	bls.n	240093a0 <HAL_RCC_ClockConfig+0x84>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24009394:	69d3      	ldr	r3, [r2, #28]
24009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400939a:	4303      	orrs	r3, r0
2400939c:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400939e:	6823      	ldr	r3, [r4, #0]
240093a0:	06d8      	lsls	r0, r3, #27
240093a2:	d50f      	bpl.n	240093c4 <HAL_RCC_ClockConfig+0xa8>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240093a4:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240093a8:	69a0      	ldr	r0, [r4, #24]
240093aa:	f6c5 0202 	movt	r2, #22530	; 0x5802
240093ae:	69d1      	ldr	r1, [r2, #28]
240093b0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
240093b4:	4288      	cmp	r0, r1
240093b6:	d905      	bls.n	240093c4 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240093b8:	69d3      	ldr	r3, [r2, #28]
240093ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
240093be:	4303      	orrs	r3, r0
240093c0:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240093c2:	6823      	ldr	r3, [r4, #0]
240093c4:	0699      	lsls	r1, r3, #26
240093c6:	d50f      	bpl.n	240093e8 <HAL_RCC_ClockConfig+0xcc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240093c8:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240093cc:	69e0      	ldr	r0, [r4, #28]
240093ce:	f6c5 0202 	movt	r2, #22530	; 0x5802
240093d2:	6a11      	ldr	r1, [r2, #32]
240093d4:	f001 0170 	and.w	r1, r1, #112	; 0x70
240093d8:	4288      	cmp	r0, r1
240093da:	d905      	bls.n	240093e8 <HAL_RCC_ClockConfig+0xcc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240093dc:	6a13      	ldr	r3, [r2, #32]
240093de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240093e2:	4303      	orrs	r3, r0
240093e4:	6213      	str	r3, [r2, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240093e6:	6823      	ldr	r3, [r4, #0]
240093e8:	079a      	lsls	r2, r3, #30
240093ea:	d515      	bpl.n	24009418 <HAL_RCC_ClockConfig+0xfc>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240093ec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240093f0:	68e0      	ldr	r0, [r4, #12]
240093f2:	f6c5 0202 	movt	r2, #22530	; 0x5802
240093f6:	6991      	ldr	r1, [r2, #24]
240093f8:	f001 010f 	and.w	r1, r1, #15
240093fc:	4288      	cmp	r0, r1
240093fe:	d942      	bls.n	24009486 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24009400:	6993      	ldr	r3, [r2, #24]
24009402:	f023 030f 	bic.w	r3, r3, #15
24009406:	4303      	orrs	r3, r0
24009408:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400940a:	6823      	ldr	r3, [r4, #0]
2400940c:	07df      	lsls	r7, r3, #31
2400940e:	d405      	bmi.n	2400941c <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24009410:	079f      	lsls	r7, r3, #30
24009412:	d548      	bpl.n	240094a6 <HAL_RCC_ClockConfig+0x18a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24009414:	68e0      	ldr	r0, [r4, #12]
24009416:	e038      	b.n	2400948a <HAL_RCC_ClockConfig+0x16e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24009418:	07db      	lsls	r3, r3, #31
2400941a:	d544      	bpl.n	240094a6 <HAL_RCC_ClockConfig+0x18a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
2400941c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009420:	68a1      	ldr	r1, [r4, #8]
24009422:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009426:	6993      	ldr	r3, [r2, #24]
24009428:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2400942c:	430b      	orrs	r3, r1
2400942e:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24009430:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24009432:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24009434:	2902      	cmp	r1, #2
24009436:	f000 80c4 	beq.w	240095c2 <HAL_RCC_ClockConfig+0x2a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2400943a:	2903      	cmp	r1, #3
2400943c:	f000 80bb 	beq.w	240095b6 <HAL_RCC_ClockConfig+0x29a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24009440:	2901      	cmp	r1, #1
24009442:	f000 80c4 	beq.w	240095ce <HAL_RCC_ClockConfig+0x2b2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24009446:	075b      	lsls	r3, r3, #29
24009448:	d582      	bpl.n	24009350 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2400944a:	f44f 4688 	mov.w	r6, #17408	; 0x4400
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2400944e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24009452:	f6c5 0602 	movt	r6, #22530	; 0x5802
24009456:	6933      	ldr	r3, [r6, #16]
24009458:	f023 0307 	bic.w	r3, r3, #7
2400945c:	430b      	orrs	r3, r1
2400945e:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24009460:	f7fb ff8e 	bl	24005380 <HAL_GetTick>
24009464:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24009466:	e005      	b.n	24009474 <HAL_RCC_ClockConfig+0x158>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24009468:	f7fb ff8a 	bl	24005380 <HAL_GetTick>
2400946c:	1bc0      	subs	r0, r0, r7
2400946e:	4540      	cmp	r0, r8
24009470:	f200 80ab 	bhi.w	240095ca <HAL_RCC_ClockConfig+0x2ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24009474:	6933      	ldr	r3, [r6, #16]
24009476:	6862      	ldr	r2, [r4, #4]
24009478:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400947c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24009480:	d1f2      	bne.n	24009468 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24009482:	6823      	ldr	r3, [r4, #0]
24009484:	e7c4      	b.n	24009410 <HAL_RCC_ClockConfig+0xf4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24009486:	07da      	lsls	r2, r3, #31
24009488:	d4c8      	bmi.n	2400941c <HAL_RCC_ClockConfig+0x100>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400948a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400948e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009492:	699a      	ldr	r2, [r3, #24]
24009494:	f002 020f 	and.w	r2, r2, #15
24009498:	4282      	cmp	r2, r0
2400949a:	d904      	bls.n	240094a6 <HAL_RCC_ClockConfig+0x18a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400949c:	699a      	ldr	r2, [r3, #24]
2400949e:	f022 020f 	bic.w	r2, r2, #15
240094a2:	4302      	orrs	r2, r0
240094a4:	619a      	str	r2, [r3, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
240094a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240094aa:	f2c5 2300 	movt	r3, #20992	; 0x5200
240094ae:	681a      	ldr	r2, [r3, #0]
240094b0:	f002 020f 	and.w	r2, r2, #15
240094b4:	42aa      	cmp	r2, r5
240094b6:	d90a      	bls.n	240094ce <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
240094b8:	681a      	ldr	r2, [r3, #0]
240094ba:	f022 020f 	bic.w	r2, r2, #15
240094be:	432a      	orrs	r2, r5
240094c0:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
240094c2:	681b      	ldr	r3, [r3, #0]
240094c4:	f003 030f 	and.w	r3, r3, #15
240094c8:	42ab      	cmp	r3, r5
240094ca:	f47f af41 	bne.w	24009350 <HAL_RCC_ClockConfig+0x34>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
240094ce:	6823      	ldr	r3, [r4, #0]
240094d0:	075e      	lsls	r6, r3, #29
240094d2:	d50f      	bpl.n	240094f4 <HAL_RCC_ClockConfig+0x1d8>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
240094d4:	f44f 4188 	mov.w	r1, #17408	; 0x4400
240094d8:	6920      	ldr	r0, [r4, #16]
240094da:	f6c5 0102 	movt	r1, #22530	; 0x5802
240094de:	698a      	ldr	r2, [r1, #24]
240094e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
240094e4:	4290      	cmp	r0, r2
240094e6:	d205      	bcs.n	240094f4 <HAL_RCC_ClockConfig+0x1d8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
240094e8:	698b      	ldr	r3, [r1, #24]
240094ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240094ee:	4303      	orrs	r3, r0
240094f0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
240094f2:	6823      	ldr	r3, [r4, #0]
240094f4:	071d      	lsls	r5, r3, #28
240094f6:	d50f      	bpl.n	24009518 <HAL_RCC_ClockConfig+0x1fc>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240094f8:	f44f 4188 	mov.w	r1, #17408	; 0x4400
240094fc:	6960      	ldr	r0, [r4, #20]
240094fe:	f6c5 0102 	movt	r1, #22530	; 0x5802
24009502:	69ca      	ldr	r2, [r1, #28]
24009504:	f002 0270 	and.w	r2, r2, #112	; 0x70
24009508:	4290      	cmp	r0, r2
2400950a:	d205      	bcs.n	24009518 <HAL_RCC_ClockConfig+0x1fc>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400950c:	69cb      	ldr	r3, [r1, #28]
2400950e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24009512:	4303      	orrs	r3, r0
24009514:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24009516:	6823      	ldr	r3, [r4, #0]
24009518:	06d8      	lsls	r0, r3, #27
2400951a:	d50f      	bpl.n	2400953c <HAL_RCC_ClockConfig+0x220>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400951c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24009520:	69a0      	ldr	r0, [r4, #24]
24009522:	f6c5 0102 	movt	r1, #22530	; 0x5802
24009526:	69ca      	ldr	r2, [r1, #28]
24009528:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
2400952c:	4290      	cmp	r0, r2
2400952e:	d205      	bcs.n	2400953c <HAL_RCC_ClockConfig+0x220>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24009530:	69cb      	ldr	r3, [r1, #28]
24009532:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24009536:	4303      	orrs	r3, r0
24009538:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2400953a:	6823      	ldr	r3, [r4, #0]
2400953c:	0699      	lsls	r1, r3, #26
2400953e:	d50e      	bpl.n	2400955e <HAL_RCC_ClockConfig+0x242>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24009540:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009544:	69e1      	ldr	r1, [r4, #28]
24009546:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400954a:	6a13      	ldr	r3, [r2, #32]
2400954c:	f003 0370 	and.w	r3, r3, #112	; 0x70
24009550:	4299      	cmp	r1, r3
24009552:	d204      	bcs.n	2400955e <HAL_RCC_ClockConfig+0x242>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24009554:	6a13      	ldr	r3, [r2, #32]
24009556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400955a:	430b      	orrs	r3, r1
2400955c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400955e:	f7ff fe17 	bl	24009190 <HAL_RCC_GetSysClockFreq>
24009562:	f44f 4188 	mov.w	r1, #17408	; 0x4400
24009566:	f24f 5314 	movw	r3, #62740	; 0xf514
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400956a:	f640 02f0 	movw	r2, #2288	; 0x8f0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400956e:	f6c5 0102 	movt	r1, #22530	; 0x5802
24009572:	f2c2 4301 	movt	r3, #9217	; 0x2401
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009576:	f2c2 0200 	movt	r2, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400957a:	698c      	ldr	r4, [r1, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400957c:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400957e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009582:	f001 010f 	and.w	r1, r1, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24009586:	5d1d      	ldrb	r5, [r3, r4]
  SystemCoreClock = common_system_clock;
24009588:	f640 04ec 	movw	r4, #2284	; 0x8ec
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400958c:	5c5b      	ldrb	r3, [r3, r1]
  halstatus = HAL_InitTick(uwTickPrio);
2400958e:	f640 1138 	movw	r1, #2360	; 0x938
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24009592:	f005 051f 	and.w	r5, r5, #31
  SystemCoreClock = common_system_clock;
24009596:	f2c2 0400 	movt	r4, #8192	; 0x2000
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400959a:	f003 031f 	and.w	r3, r3, #31
  halstatus = HAL_InitTick(uwTickPrio);
2400959e:	f2c2 0100 	movt	r1, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240095a2:	40e8      	lsrs	r0, r5
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240095a4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
240095a8:	6020      	str	r0, [r4, #0]
  halstatus = HAL_InitTick(uwTickPrio);
240095aa:	6808      	ldr	r0, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240095ac:	6013      	str	r3, [r2, #0]
}
240095ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240095b2:	f7fb be79 	b.w	240052a8 <HAL_InitTick>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240095b6:	0198      	lsls	r0, r3, #6
240095b8:	f53f af47 	bmi.w	2400944a <HAL_RCC_ClockConfig+0x12e>
240095bc:	e6c8      	b.n	24009350 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
240095be:	2001      	movs	r0, #1
}
240095c0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240095c2:	039e      	lsls	r6, r3, #14
240095c4:	f53f af41 	bmi.w	2400944a <HAL_RCC_ClockConfig+0x12e>
240095c8:	e6c2      	b.n	24009350 <HAL_RCC_ClockConfig+0x34>
        return HAL_TIMEOUT;
240095ca:	2003      	movs	r0, #3
240095cc:	e6c1      	b.n	24009352 <HAL_RCC_ClockConfig+0x36>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240095ce:	05da      	lsls	r2, r3, #23
240095d0:	f53f af3b 	bmi.w	2400944a <HAL_RCC_ClockConfig+0x12e>
240095d4:	e6bc      	b.n	24009350 <HAL_RCC_ClockConfig+0x34>
240095d6:	bf00      	nop

240095d8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240095d8:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240095dc:	f6c5 0202 	movt	r2, #22530	; 0x5802
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
240095e0:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240095e2:	6913      	ldr	r3, [r2, #16]
240095e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
240095e8:	2b10      	cmp	r3, #16
240095ea:	d02b      	beq.n	24009644 <HAL_RCC_GetHCLKFreq+0x6c>
240095ec:	2b18      	cmp	r3, #24
240095ee:	d03a      	beq.n	24009666 <HAL_RCC_GetHCLKFreq+0x8e>
240095f0:	b36b      	cbz	r3, 2400964e <HAL_RCC_GetHCLKFreq+0x76>
      sysclockfreq = CSI_VALUE;
240095f2:	f44f 6010 	mov.w	r0, #2304	; 0x900
240095f6:	f2c0 003d 	movt	r0, #61	; 0x3d
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240095fa:	f44f 4288 	mov.w	r2, #17408	; 0x4400
240095fe:	f24f 5314 	movw	r3, #62740	; 0xf514
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009602:	f640 01f0 	movw	r1, #2288	; 0x8f0
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24009606:	f640 0cec 	movw	ip, #2284	; 0x8ec
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400960a:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400960e:	f2c2 4301 	movt	r3, #9217	; 0x2401
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009612:	f2c2 0100 	movt	r1, #8192	; 0x2000
  SystemCoreClock = common_system_clock;
24009616:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400961a:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400961c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400961e:	f3c4 2e03 	ubfx	lr, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009622:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24009626:	f813 e00e 	ldrb.w	lr, [r3, lr]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400962a:	5c9a      	ldrb	r2, [r3, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400962c:	f00e 031f 	and.w	r3, lr, #31
24009630:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009634:	f002 001f 	and.w	r0, r2, #31
24009638:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
2400963c:	f8cc 3000 	str.w	r3, [ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24009640:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24009642:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24009644:	f44f 5010 	mov.w	r0, #9216	; 0x2400
24009648:	f2c0 00f4 	movt	r0, #244	; 0xf4
2400964c:	e7d5      	b.n	240095fa <HAL_RCC_GetHCLKFreq+0x22>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400964e:	6813      	ldr	r3, [r2, #0]
24009650:	069b      	lsls	r3, r3, #26
24009652:	d50b      	bpl.n	2400966c <HAL_RCC_GetHCLKFreq+0x94>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009654:	6813      	ldr	r3, [r2, #0]
24009656:	f44f 4010 	mov.w	r0, #36864	; 0x9000
2400965a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400965e:	f2c0 30d0 	movt	r0, #976	; 0x3d0
24009662:	40d8      	lsrs	r0, r3
24009664:	e7c9      	b.n	240095fa <HAL_RCC_GetHCLKFreq+0x22>
24009666:	f7ff f9c1 	bl	240089ec <HAL_RCC_GetSysClockFreq.part.0>
2400966a:	e7c6      	b.n	240095fa <HAL_RCC_GetHCLKFreq+0x22>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400966c:	f44f 4010 	mov.w	r0, #36864	; 0x9000
24009670:	f2c0 30d0 	movt	r0, #976	; 0x3d0
24009674:	e7c1      	b.n	240095fa <HAL_RCC_GetHCLKFreq+0x22>
24009676:	bf00      	nop

24009678 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24009678:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400967c:	f6c5 0202 	movt	r2, #22530	; 0x5802
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24009680:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24009682:	6913      	ldr	r3, [r2, #16]
24009684:	f003 0338 	and.w	r3, r3, #56	; 0x38
24009688:	2b10      	cmp	r3, #16
2400968a:	d031      	beq.n	240096f0 <HAL_RCC_GetPCLK1Freq+0x78>
2400968c:	2b18      	cmp	r3, #24
2400968e:	d040      	beq.n	24009712 <HAL_RCC_GetPCLK1Freq+0x9a>
24009690:	b39b      	cbz	r3, 240096fa <HAL_RCC_GetPCLK1Freq+0x82>
      sysclockfreq = CSI_VALUE;
24009692:	f44f 6010 	mov.w	r0, #2304	; 0x900
24009696:	f2c0 003d 	movt	r0, #61	; 0x3d
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400969a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400969e:	f24f 5314 	movw	r3, #62740	; 0xf514
  SystemCoreClock = common_system_clock;
240096a2:	f640 0cec 	movw	ip, #2284	; 0x8ec
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240096a6:	f640 01f0 	movw	r1, #2288	; 0x8f0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240096aa:	f6c5 0202 	movt	r2, #22530	; 0x5802
240096ae:	f2c2 4301 	movt	r3, #9217	; 0x2401
  SystemCoreClock = common_system_clock;
240096b2:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240096b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240096ba:	6994      	ldr	r4, [r2, #24]
240096bc:	f3c4 2403 	ubfx	r4, r4, #8, #4
240096c0:	5d1c      	ldrb	r4, [r3, r4]
240096c2:	f004 041f 	and.w	r4, r4, #31
240096c6:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240096c8:	6994      	ldr	r4, [r2, #24]
  SystemCoreClock = common_system_clock;
240096ca:	f8cc 0000 	str.w	r0, [ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240096ce:	f004 0c0f 	and.w	ip, r4, #15
240096d2:	f813 c00c 	ldrb.w	ip, [r3, ip]
240096d6:	f00c 0c1f 	and.w	ip, ip, #31
240096da:	fa20 f00c 	lsr.w	r0, r0, ip
240096de:	6008      	str	r0, [r1, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
240096e0:	69d2      	ldr	r2, [r2, #28]
240096e2:	f3c2 1202 	ubfx	r2, r2, #4, #3
240096e6:	5c9b      	ldrb	r3, [r3, r2]
240096e8:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
240096ec:	40d8      	lsrs	r0, r3
240096ee:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240096f0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
240096f4:	f2c0 00f4 	movt	r0, #244	; 0xf4
240096f8:	e7cf      	b.n	2400969a <HAL_RCC_GetPCLK1Freq+0x22>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240096fa:	6813      	ldr	r3, [r2, #0]
240096fc:	069b      	lsls	r3, r3, #26
240096fe:	d50b      	bpl.n	24009718 <HAL_RCC_GetPCLK1Freq+0xa0>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009700:	6813      	ldr	r3, [r2, #0]
24009702:	f44f 4010 	mov.w	r0, #36864	; 0x9000
24009706:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400970a:	f2c0 30d0 	movt	r0, #976	; 0x3d0
2400970e:	40d8      	lsrs	r0, r3
24009710:	e7c3      	b.n	2400969a <HAL_RCC_GetPCLK1Freq+0x22>
24009712:	f7ff f96b 	bl	240089ec <HAL_RCC_GetSysClockFreq.part.0>
24009716:	e7c0      	b.n	2400969a <HAL_RCC_GetPCLK1Freq+0x22>
        sysclockfreq = (uint32_t) HSI_VALUE;
24009718:	f44f 4010 	mov.w	r0, #36864	; 0x9000
2400971c:	f2c0 30d0 	movt	r0, #976	; 0x3d0
24009720:	e7bb      	b.n	2400969a <HAL_RCC_GetPCLK1Freq+0x22>
24009722:	bf00      	nop

24009724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24009726:	f44f 4488 	mov.w	r4, #17408	; 0x4400
2400972a:	f6c5 0402 	movt	r4, #22530	; 0x5802
2400972e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24009730:	f003 0303 	and.w	r3, r3, #3
24009734:	2b03      	cmp	r3, #3
24009736:	d06c      	beq.n	24009812 <RCCEx_PLL2_Config+0xee>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24009738:	6823      	ldr	r3, [r4, #0]
2400973a:	4606      	mov	r6, r0
2400973c:	460f      	mov	r7, r1
2400973e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24009742:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24009744:	f7fb fe1c 	bl	24005380 <HAL_GetTick>
24009748:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400974a:	e004      	b.n	24009756 <RCCEx_PLL2_Config+0x32>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400974c:	f7fb fe18 	bl	24005380 <HAL_GetTick>
24009750:	1b43      	subs	r3, r0, r5
24009752:	2b02      	cmp	r3, #2
24009754:	d85b      	bhi.n	2400980e <RCCEx_PLL2_Config+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24009756:	6823      	ldr	r3, [r4, #0]
24009758:	011a      	lsls	r2, r3, #4
2400975a:	d4f7      	bmi.n	2400974c <RCCEx_PLL2_Config+0x28>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2400975c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400975e:	6832      	ldr	r2, [r6, #0]
24009760:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24009764:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24009768:	62a3      	str	r3, [r4, #40]	; 0x28
2400976a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400976e:	3b01      	subs	r3, #1
24009770:	3a01      	subs	r2, #1
24009772:	025b      	lsls	r3, r3, #9
24009774:	0412      	lsls	r2, r2, #16
24009776:	b29b      	uxth	r3, r3
24009778:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400977c:	4313      	orrs	r3, r2
2400977e:	6872      	ldr	r2, [r6, #4]
24009780:	3a01      	subs	r2, #1
24009782:	f3c2 0208 	ubfx	r2, r2, #0, #9
24009786:	4313      	orrs	r3, r2
24009788:	6932      	ldr	r2, [r6, #16]
2400978a:	3a01      	subs	r2, #1
2400978c:	0612      	lsls	r2, r2, #24
2400978e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24009792:	4313      	orrs	r3, r2
24009794:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24009796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009798:	6972      	ldr	r2, [r6, #20]
2400979a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
2400979e:	4313      	orrs	r3, r2
240097a0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240097a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240097a4:	69b3      	ldr	r3, [r6, #24]
240097a6:	f022 0220 	bic.w	r2, r2, #32
240097aa:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240097ac:	2307      	movs	r3, #7
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240097ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240097b0:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    __HAL_RCC_PLL2FRACN_DISABLE();
240097b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240097b6:	f022 0210 	bic.w	r2, r2, #16
240097ba:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240097bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
240097be:	69f2      	ldr	r2, [r6, #28]
240097c0:	400b      	ands	r3, r1
240097c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240097c6:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
240097c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240097ca:	f043 0310 	orr.w	r3, r3, #16
240097ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240097d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240097d2:	b307      	cbz	r7, 24009816 <RCCEx_PLL2_Config+0xf2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240097d4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240097d6:	bf0c      	ite	eq
240097d8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240097dc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
240097e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
240097e2:	f44f 4488 	mov.w	r4, #17408	; 0x4400
240097e6:	f6c5 0402 	movt	r4, #22530	; 0x5802
240097ea:	6823      	ldr	r3, [r4, #0]
240097ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
240097f0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240097f2:	f7fb fdc5 	bl	24005380 <HAL_GetTick>
240097f6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240097f8:	e004      	b.n	24009804 <RCCEx_PLL2_Config+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240097fa:	f7fb fdc1 	bl	24005380 <HAL_GetTick>
240097fe:	1b40      	subs	r0, r0, r5
24009800:	2802      	cmp	r0, #2
24009802:	d804      	bhi.n	2400980e <RCCEx_PLL2_Config+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24009804:	6823      	ldr	r3, [r4, #0]
24009806:	011b      	lsls	r3, r3, #4
24009808:	d5f7      	bpl.n	240097fa <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
2400980a:	2000      	movs	r0, #0
}
2400980c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400980e:	2003      	movs	r0, #3
}
24009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24009812:	2001      	movs	r0, #1
}
24009814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24009816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400981a:	62e3      	str	r3, [r4, #44]	; 0x2c
2400981c:	e7e1      	b.n	240097e2 <RCCEx_PLL2_Config+0xbe>
2400981e:	bf00      	nop

24009820 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24009822:	f44f 4488 	mov.w	r4, #17408	; 0x4400
24009826:	f6c5 0402 	movt	r4, #22530	; 0x5802
2400982a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400982c:	f003 0303 	and.w	r3, r3, #3
24009830:	2b03      	cmp	r3, #3
24009832:	d06c      	beq.n	2400990e <RCCEx_PLL3_Config+0xee>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24009834:	6823      	ldr	r3, [r4, #0]
24009836:	4606      	mov	r6, r0
24009838:	460f      	mov	r7, r1
2400983a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400983e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24009840:	f7fb fd9e 	bl	24005380 <HAL_GetTick>
24009844:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24009846:	e004      	b.n	24009852 <RCCEx_PLL3_Config+0x32>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24009848:	f7fb fd9a 	bl	24005380 <HAL_GetTick>
2400984c:	1b43      	subs	r3, r0, r5
2400984e:	2b02      	cmp	r3, #2
24009850:	d85b      	bhi.n	2400990a <RCCEx_PLL3_Config+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24009852:	6823      	ldr	r3, [r4, #0]
24009854:	009a      	lsls	r2, r3, #2
24009856:	d4f7      	bmi.n	24009848 <RCCEx_PLL3_Config+0x28>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24009858:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400985a:	6832      	ldr	r2, [r6, #0]
2400985c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24009860:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24009864:	62a3      	str	r3, [r4, #40]	; 0x28
24009866:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400986a:	3b01      	subs	r3, #1
2400986c:	3a01      	subs	r2, #1
2400986e:	025b      	lsls	r3, r3, #9
24009870:	0412      	lsls	r2, r2, #16
24009872:	b29b      	uxth	r3, r3
24009874:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24009878:	4313      	orrs	r3, r2
2400987a:	6872      	ldr	r2, [r6, #4]
2400987c:	3a01      	subs	r2, #1
2400987e:	f3c2 0208 	ubfx	r2, r2, #0, #9
24009882:	4313      	orrs	r3, r2
24009884:	6932      	ldr	r2, [r6, #16]
24009886:	3a01      	subs	r2, #1
24009888:	0612      	lsls	r2, r2, #24
2400988a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
2400988e:	4313      	orrs	r3, r2
24009890:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24009892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009894:	6972      	ldr	r2, [r6, #20]
24009896:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
2400989a:	4313      	orrs	r3, r2
2400989c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2400989e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240098a0:	69b3      	ldr	r3, [r6, #24]
240098a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
240098a6:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240098a8:	2307      	movs	r3, #7
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240098aa:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240098ac:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    __HAL_RCC_PLL3FRACN_DISABLE();
240098b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240098b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240098b6:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240098b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
240098ba:	69f2      	ldr	r2, [r6, #28]
240098bc:	400b      	ands	r3, r1
240098be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240098c2:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240098c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240098c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240098ca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240098cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240098ce:	b307      	cbz	r7, 24009912 <RCCEx_PLL3_Config+0xf2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240098d0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
240098d2:	bf0c      	ite	eq
240098d4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240098d8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
240098dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
240098de:	f44f 4488 	mov.w	r4, #17408	; 0x4400
240098e2:	f6c5 0402 	movt	r4, #22530	; 0x5802
240098e6:	6823      	ldr	r3, [r4, #0]
240098e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
240098ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240098ee:	f7fb fd47 	bl	24005380 <HAL_GetTick>
240098f2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240098f4:	e004      	b.n	24009900 <RCCEx_PLL3_Config+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240098f6:	f7fb fd43 	bl	24005380 <HAL_GetTick>
240098fa:	1b40      	subs	r0, r0, r5
240098fc:	2802      	cmp	r0, #2
240098fe:	d804      	bhi.n	2400990a <RCCEx_PLL3_Config+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24009900:	6823      	ldr	r3, [r4, #0]
24009902:	009b      	lsls	r3, r3, #2
24009904:	d5f7      	bpl.n	240098f6 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
24009906:	2000      	movs	r0, #0
}
24009908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400990a:	2003      	movs	r0, #3
}
2400990c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400990e:	2001      	movs	r0, #1
}
24009910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24009912:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24009916:	62e3      	str	r3, [r4, #44]	; 0x2c
24009918:	e7e1      	b.n	240098de <RCCEx_PLL3_Config+0xbe>
2400991a:	bf00      	nop

2400991c <HAL_RCCEx_PeriphCLKConfig>:
{
2400991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24009920:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24009924:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24009926:	011d      	lsls	r5, r3, #4
24009928:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
2400992c:	d524      	bpl.n	24009978 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400992e:	6e81      	ldr	r1, [r0, #104]	; 0x68
24009930:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24009934:	f000 85f5 	beq.w	2400a522 <HAL_RCCEx_PeriphCLKConfig+0xc06>
24009938:	d80e      	bhi.n	24009958 <HAL_RCCEx_PeriphCLKConfig+0x3c>
2400993a:	2900      	cmp	r1, #0
2400993c:	f000 8654 	beq.w	2400a5e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
24009940:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24009944:	f040 864d 	bne.w	2400a5e2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24009948:	2102      	movs	r1, #2
2400994a:	3008      	adds	r0, #8
2400994c:	f7ff feea 	bl	24009724 <RCCEx_PLL2_Config>
24009950:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24009952:	b97e      	cbnz	r6, 24009974 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24009954:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24009956:	e003      	b.n	24009960 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24009958:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400995c:	f040 8641 	bne.w	2400a5e2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24009960:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009964:	2600      	movs	r6, #0
24009966:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400996a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400996c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24009970:	430b      	orrs	r3, r1
24009972:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24009974:	e9d4 3200 	ldrd	r3, r2, [r4]
24009978:	05d8      	lsls	r0, r3, #23
2400997a:	d50a      	bpl.n	24009992 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
2400997c:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400997e:	2904      	cmp	r1, #4
24009980:	d806      	bhi.n	24009990 <HAL_RCCEx_PeriphCLKConfig+0x74>
24009982:	e8df f011 	tbh	[pc, r1, lsl #1]
24009986:	05d8      	.short	0x05d8
24009988:	05f905e2 	.word	0x05f905e2
2400998c:	033f033f 	.word	0x033f033f
24009990:	2601      	movs	r6, #1
24009992:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24009994:	0599      	lsls	r1, r3, #22
24009996:	d517      	bpl.n	240099c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai23ClockSelection)
24009998:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400999a:	2980      	cmp	r1, #128	; 0x80
2400999c:	f000 85f3 	beq.w	2400a586 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
240099a0:	f200 80ed 	bhi.w	24009b7e <HAL_RCCEx_PeriphCLKConfig+0x262>
240099a4:	2900      	cmp	r1, #0
240099a6:	f000 84a3 	beq.w	2400a2f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
240099aa:	2940      	cmp	r1, #64	; 0x40
240099ac:	f040 80ee 	bne.w	24009b8c <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240099b0:	2100      	movs	r1, #0
240099b2:	f104 0008 	add.w	r0, r4, #8
240099b6:	f7ff feb5 	bl	24009724 <RCCEx_PLL2_Config>
240099ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240099bc:	2d00      	cmp	r5, #0
240099be:	f000 843e 	beq.w	2400a23e <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240099c2:	462e      	mov	r6, r5
240099c4:	e9d4 3200 	ldrd	r3, r2, [r4]
240099c8:	055f      	lsls	r7, r3, #21
240099ca:	d51a      	bpl.n	24009a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch (PeriphClkInit->Sai4AClockSelection)
240099cc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
240099d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
240099d4:	f000 859d 	beq.w	2400a512 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
240099d8:	f200 80db 	bhi.w	24009b92 <HAL_RCCEx_PeriphCLKConfig+0x276>
240099dc:	2900      	cmp	r1, #0
240099de:	f000 8491 	beq.w	2400a304 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
240099e2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240099e6:	f040 80dc 	bne.w	24009ba2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240099ea:	2100      	movs	r1, #0
240099ec:	f104 0008 	add.w	r0, r4, #8
240099f0:	f7ff fe98 	bl	24009724 <RCCEx_PLL2_Config>
240099f4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240099f6:	2d00      	cmp	r5, #0
240099f8:	f000 844a 	beq.w	2400a290 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
240099fc:	462e      	mov	r6, r5
240099fe:	e9d4 3200 	ldrd	r3, r2, [r4]
24009a02:	0518      	lsls	r0, r3, #20
24009a04:	d51a      	bpl.n	24009a3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
24009a06:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24009a0a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24009a0e:	f000 85ab 	beq.w	2400a568 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
24009a12:	f200 80c9 	bhi.w	24009ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
24009a16:	2900      	cmp	r1, #0
24009a18:	f000 8460 	beq.w	2400a2dc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
24009a1c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24009a20:	f040 80ca 	bne.w	24009bb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009a24:	2100      	movs	r1, #0
24009a26:	f104 0008 	add.w	r0, r4, #8
24009a2a:	f7ff fe7b 	bl	24009724 <RCCEx_PLL2_Config>
24009a2e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009a30:	2d00      	cmp	r5, #0
24009a32:	f000 83f5 	beq.w	2400a220 <HAL_RCCEx_PeriphCLKConfig+0x904>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24009a36:	462e      	mov	r6, r5
24009a38:	e9d4 3200 	ldrd	r3, r2, [r4]
24009a3c:	0199      	lsls	r1, r3, #6
24009a3e:	d520      	bpl.n	24009a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->QspiClockSelection)
24009a40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24009a42:	2920      	cmp	r1, #32
24009a44:	f000 852e 	beq.w	2400a4a4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
24009a48:	f200 80b9 	bhi.w	24009bbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
24009a4c:	b151      	cbz	r1, 24009a64 <HAL_RCCEx_PeriphCLKConfig+0x148>
24009a4e:	2910      	cmp	r1, #16
24009a50:	f040 80b8 	bne.w	24009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009a54:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24009a58:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24009a5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24009a62:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
24009a64:	2d00      	cmp	r5, #0
24009a66:	f040 847e 	bne.w	2400a366 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24009a6a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009a6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24009a70:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009a74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009a76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24009a7a:	430b      	orrs	r3, r1
24009a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24009a7e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009a82:	04df      	lsls	r7, r3, #19
24009a84:	d519      	bpl.n	24009aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch (PeriphClkInit->Spi123ClockSelection)
24009a86:	6e21      	ldr	r1, [r4, #96]	; 0x60
24009a88:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24009a8c:	f000 8564 	beq.w	2400a558 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
24009a90:	f200 809b 	bhi.w	24009bca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
24009a94:	2900      	cmp	r1, #0
24009a96:	f000 8417 	beq.w	2400a2c8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
24009a9a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24009a9e:	f040 809c 	bne.w	24009bda <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009aa2:	2100      	movs	r1, #0
24009aa4:	f104 0008 	add.w	r0, r4, #8
24009aa8:	f7ff fe3c 	bl	24009724 <RCCEx_PLL2_Config>
24009aac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009aae:	2d00      	cmp	r5, #0
24009ab0:	f000 83d3 	beq.w	2400a25a <HAL_RCCEx_PeriphCLKConfig+0x93e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24009ab4:	462e      	mov	r6, r5
24009ab6:	e9d4 3200 	ldrd	r3, r2, [r4]
24009aba:	0498      	lsls	r0, r3, #18
24009abc:	d520      	bpl.n	24009b00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Spi45ClockSelection)
24009abe:	6e61      	ldr	r1, [r4, #100]	; 0x64
24009ac0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24009ac4:	f000 84da 	beq.w	2400a47c <HAL_RCCEx_PeriphCLKConfig+0xb60>
24009ac8:	f200 808a 	bhi.w	24009be0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
24009acc:	b149      	cbz	r1, 24009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
24009ace:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24009ad2:	f040 808f 	bne.w	24009bf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009ad6:	2101      	movs	r1, #1
24009ad8:	f104 0008 	add.w	r0, r4, #8
24009adc:	f7ff fe22 	bl	24009724 <RCCEx_PLL2_Config>
24009ae0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009ae2:	2d00      	cmp	r5, #0
24009ae4:	f040 8451 	bne.w	2400a38a <HAL_RCCEx_PeriphCLKConfig+0xa6e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24009ae8:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009aec:	6e61      	ldr	r1, [r4, #100]	; 0x64
24009aee:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009af2:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009af4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24009af8:	430b      	orrs	r3, r1
24009afa:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24009afc:	e9d4 3200 	ldrd	r3, r2, [r4]
24009b00:	0459      	lsls	r1, r3, #17
24009b02:	d520      	bpl.n	24009b46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    switch (PeriphClkInit->Spi6ClockSelection)
24009b04:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24009b08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24009b0c:	f000 84c0 	beq.w	2400a490 <HAL_RCCEx_PeriphCLKConfig+0xb74>
24009b10:	d873      	bhi.n	24009bfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
24009b12:	b141      	cbz	r1, 24009b26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
24009b14:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24009b18:	d177      	bne.n	24009c0a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009b1a:	2101      	movs	r1, #1
24009b1c:	f104 0008 	add.w	r0, r4, #8
24009b20:	f7ff fe00 	bl	24009724 <RCCEx_PLL2_Config>
24009b24:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009b26:	2d00      	cmp	r5, #0
24009b28:	f040 8438 	bne.w	2400a39c <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24009b2c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009b30:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24009b34:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009b38:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009b3a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24009b3e:	430b      	orrs	r3, r1
24009b40:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24009b42:	e9d4 3200 	ldrd	r3, r2, [r4]
24009b46:	041f      	lsls	r7, r3, #16
24009b48:	d50d      	bpl.n	24009b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->FdcanClockSelection)
24009b4a:	6f21      	ldr	r1, [r4, #112]	; 0x70
24009b4c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24009b50:	f000 8488 	beq.w	2400a464 <HAL_RCCEx_PeriphCLKConfig+0xb48>
24009b54:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24009b58:	f000 825c 	beq.w	2400a014 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
24009b5c:	2900      	cmp	r1, #0
24009b5e:	f000 825f 	beq.w	2400a020 <HAL_RCCEx_PeriphCLKConfig+0x704>
24009b62:	2601      	movs	r6, #1
24009b64:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24009b66:	01d8      	lsls	r0, r3, #7
24009b68:	d560      	bpl.n	24009c2c <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch (PeriphClkInit->FmcClockSelection)
24009b6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24009b6c:	2903      	cmp	r1, #3
24009b6e:	f200 8571 	bhi.w	2400a654 <HAL_RCCEx_PeriphCLKConfig+0xd38>
24009b72:	e8df f011 	tbh	[pc, r1, lsl #1]
24009b76:	0055      	.short	0x0055
24009b78:	04ab004d 	.word	0x04ab004d
24009b7c:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
24009b7e:	29c0      	cmp	r1, #192	; 0xc0
24009b80:	f43f af1c 	beq.w	240099bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
24009b84:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24009b88:	f43f af18 	beq.w	240099bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
24009b8c:	2601      	movs	r6, #1
24009b8e:	4635      	mov	r5, r6
24009b90:	e71a      	b.n	240099c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai4AClockSelection)
24009b92:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24009b96:	f43f af2e 	beq.w	240099f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
24009b9a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24009b9e:	f43f af2a 	beq.w	240099f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
24009ba2:	2601      	movs	r6, #1
24009ba4:	4635      	mov	r5, r6
24009ba6:	e72c      	b.n	24009a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch (PeriphClkInit->Sai4BClockSelection)
24009ba8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
24009bac:	f43f af40 	beq.w	24009a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
24009bb0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24009bb4:	f43f af3c 	beq.w	24009a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
24009bb8:	2601      	movs	r6, #1
24009bba:	4635      	mov	r5, r6
24009bbc:	e73e      	b.n	24009a3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
24009bbe:	2930      	cmp	r1, #48	; 0x30
24009bc0:	f43f af50 	beq.w	24009a64 <HAL_RCCEx_PeriphCLKConfig+0x148>
24009bc4:	2601      	movs	r6, #1
24009bc6:	4635      	mov	r5, r6
24009bc8:	e75b      	b.n	24009a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->Spi123ClockSelection)
24009bca:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24009bce:	f43f af6e 	beq.w	24009aae <HAL_RCCEx_PeriphCLKConfig+0x192>
24009bd2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24009bd6:	f43f af6a 	beq.w	24009aae <HAL_RCCEx_PeriphCLKConfig+0x192>
24009bda:	2601      	movs	r6, #1
24009bdc:	4635      	mov	r5, r6
24009bde:	e76c      	b.n	24009aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch (PeriphClkInit->Spi45ClockSelection)
24009be0:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24009be4:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24009be8:	f43f af7b 	beq.w	24009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
24009bec:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24009bf0:	f43f af77 	beq.w	24009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
24009bf4:	2601      	movs	r6, #1
24009bf6:	4635      	mov	r5, r6
24009bf8:	e782      	b.n	24009b00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Spi6ClockSelection)
24009bfa:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24009bfe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24009c02:	d090      	beq.n	24009b26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
24009c04:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24009c08:	d08d      	beq.n	24009b26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
24009c0a:	2601      	movs	r6, #1
24009c0c:	4635      	mov	r5, r6
24009c0e:	e79a      	b.n	24009b46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009c10:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24009c14:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24009c1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24009c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
24009c20:	2d00      	cmp	r5, #0
24009c22:	f000 83a5 	beq.w	2400a370 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24009c26:	462e      	mov	r6, r5
24009c28:	e9d4 3200 	ldrd	r3, r2, [r4]
24009c2c:	0259      	lsls	r1, r3, #9
24009c2e:	f100 8299 	bmi.w	2400a164 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009c32:	07d8      	lsls	r0, r3, #31
24009c34:	d52f      	bpl.n	24009c96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    switch (PeriphClkInit->Usart16ClockSelection)
24009c36:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24009c38:	2928      	cmp	r1, #40	; 0x28
24009c3a:	d82a      	bhi.n	24009c92 <HAL_RCCEx_PeriphCLKConfig+0x376>
24009c3c:	e8df f011 	tbh	[pc, r1, lsl #1]
24009c40:	00290234 	.word	0x00290234
24009c44:	00290029 	.word	0x00290029
24009c48:	00290029 	.word	0x00290029
24009c4c:	00290029 	.word	0x00290029
24009c50:	0029022e 	.word	0x0029022e
24009c54:	00290029 	.word	0x00290029
24009c58:	00290029 	.word	0x00290029
24009c5c:	00290029 	.word	0x00290029
24009c60:	002904c1 	.word	0x002904c1
24009c64:	00290029 	.word	0x00290029
24009c68:	00290029 	.word	0x00290029
24009c6c:	00290029 	.word	0x00290029
24009c70:	00290234 	.word	0x00290234
24009c74:	00290029 	.word	0x00290029
24009c78:	00290029 	.word	0x00290029
24009c7c:	00290029 	.word	0x00290029
24009c80:	00290234 	.word	0x00290234
24009c84:	00290029 	.word	0x00290029
24009c88:	00290029 	.word	0x00290029
24009c8c:	00290029 	.word	0x00290029
24009c90:	0234      	.short	0x0234
24009c92:	2601      	movs	r6, #1
24009c94:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24009c96:	0799      	lsls	r1, r3, #30
24009c98:	d517      	bpl.n	24009cca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    switch (PeriphClkInit->Usart234578ClockSelection)
24009c9a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24009c9c:	2905      	cmp	r1, #5
24009c9e:	f200 84e1 	bhi.w	2400a664 <HAL_RCCEx_PeriphCLKConfig+0xd48>
24009ca2:	e8df f011 	tbh	[pc, r1, lsl #1]
24009ca6:	000c      	.short	0x000c
24009ca8:	04830006 	.word	0x04830006
24009cac:	000c000c 	.word	0x000c000c
24009cb0:	000c      	.short	0x000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009cb2:	2101      	movs	r1, #1
24009cb4:	f104 0008 	add.w	r0, r4, #8
24009cb8:	f7ff fd34 	bl	24009724 <RCCEx_PLL2_Config>
24009cbc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009cbe:	2d00      	cmp	r5, #0
24009cc0:	f000 8332 	beq.w	2400a328 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24009cc4:	462e      	mov	r6, r5
24009cc6:	e9d4 3200 	ldrd	r3, r2, [r4]
24009cca:	075f      	lsls	r7, r3, #29
24009ccc:	d518      	bpl.n	24009d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24009cce:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24009cd2:	2905      	cmp	r1, #5
24009cd4:	f200 84c2 	bhi.w	2400a65c <HAL_RCCEx_PeriphCLKConfig+0xd40>
24009cd8:	e8df f011 	tbh	[pc, r1, lsl #1]
24009cdc:	0006000c 	.word	0x0006000c
24009ce0:	000c045d 	.word	0x000c045d
24009ce4:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009ce8:	2101      	movs	r1, #1
24009cea:	f104 0008 	add.w	r0, r4, #8
24009cee:	f7ff fd19 	bl	24009724 <RCCEx_PLL2_Config>
24009cf2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009cf4:	2d00      	cmp	r5, #0
24009cf6:	f000 8324 	beq.w	2400a342 <HAL_RCCEx_PeriphCLKConfig+0xa26>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24009cfa:	462e      	mov	r6, r5
24009cfc:	e9d4 3200 	ldrd	r3, r2, [r4]
24009d00:	0698      	lsls	r0, r3, #26
24009d02:	d522      	bpl.n	24009d4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (PeriphClkInit->Lptim1ClockSelection)
24009d04:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24009d08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24009d0c:	f000 83d4 	beq.w	2400a4b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
24009d10:	f200 813d 	bhi.w	24009f8e <HAL_RCCEx_PeriphCLKConfig+0x672>
24009d14:	b149      	cbz	r1, 24009d2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
24009d16:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24009d1a:	f040 8142 	bne.w	24009fa2 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009d1e:	2100      	movs	r1, #0
24009d20:	f104 0008 	add.w	r0, r4, #8
24009d24:	f7ff fcfe 	bl	24009724 <RCCEx_PLL2_Config>
24009d28:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009d2a:	2d00      	cmp	r5, #0
24009d2c:	f040 8317 	bne.w	2400a35e <HAL_RCCEx_PeriphCLKConfig+0xa42>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24009d30:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009d34:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24009d38:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009d3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009d3e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24009d42:	430b      	orrs	r3, r1
24009d44:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24009d46:	e9d4 3200 	ldrd	r3, r2, [r4]
24009d4a:	0659      	lsls	r1, r3, #25
24009d4c:	d522      	bpl.n	24009d94 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Lptim2ClockSelection)
24009d4e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24009d52:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24009d56:	f000 8371 	beq.w	2400a43c <HAL_RCCEx_PeriphCLKConfig+0xb20>
24009d5a:	f200 8125 	bhi.w	24009fa8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
24009d5e:	b149      	cbz	r1, 24009d74 <HAL_RCCEx_PeriphCLKConfig+0x458>
24009d60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
24009d64:	f040 812a 	bne.w	24009fbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009d68:	2100      	movs	r1, #0
24009d6a:	f104 0008 	add.w	r0, r4, #8
24009d6e:	f7ff fcd9 	bl	24009724 <RCCEx_PLL2_Config>
24009d72:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009d74:	2d00      	cmp	r5, #0
24009d76:	f040 8316 	bne.w	2400a3a6 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24009d7a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009d7e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24009d82:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009d86:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009d88:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
24009d8c:	430b      	orrs	r3, r1
24009d8e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24009d90:	e9d4 3200 	ldrd	r3, r2, [r4]
24009d94:	061f      	lsls	r7, r3, #24
24009d96:	d522      	bpl.n	24009dde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Lptim345ClockSelection)
24009d98:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24009d9c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24009da0:	f000 8356 	beq.w	2400a450 <HAL_RCCEx_PeriphCLKConfig+0xb34>
24009da4:	f200 810d 	bhi.w	24009fc2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
24009da8:	b149      	cbz	r1, 24009dbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
24009daa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24009dae:	f040 8112 	bne.w	24009fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009db2:	2100      	movs	r1, #0
24009db4:	f104 0008 	add.w	r0, r4, #8
24009db8:	f7ff fcb4 	bl	24009724 <RCCEx_PLL2_Config>
24009dbc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009dbe:	2d00      	cmp	r5, #0
24009dc0:	f040 82e8 	bne.w	2400a394 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24009dc4:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009dc8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24009dcc:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009dd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009dd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24009dd6:	430b      	orrs	r3, r1
24009dd8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24009dda:	e9d4 3200 	ldrd	r3, r2, [r4]
24009dde:	0718      	lsls	r0, r3, #28
24009de0:	d510      	bpl.n	24009e04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24009de2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
24009de6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24009dea:	f000 837a 	beq.w	2400a4e2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24009dee:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009df2:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009df6:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009df8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24009dfc:	430b      	orrs	r3, r1
24009dfe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24009e00:	e9d4 3200 	ldrd	r3, r2, [r4]
24009e04:	06d9      	lsls	r1, r3, #27
24009e06:	d510      	bpl.n	24009e2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24009e08:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
24009e0c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24009e10:	f000 8373 	beq.w	2400a4fa <HAL_RCCEx_PeriphCLKConfig+0xbde>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24009e14:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009e18:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009e1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24009e22:	430b      	orrs	r3, r1
24009e24:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24009e26:	e9d4 3200 	ldrd	r3, r2, [r4]
24009e2a:	031f      	lsls	r7, r3, #12
24009e2c:	d50e      	bpl.n	24009e4c <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->AdcClockSelection)
24009e2e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24009e32:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24009e36:	f000 811a 	beq.w	2400a06e <HAL_RCCEx_PeriphCLKConfig+0x752>
24009e3a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24009e3e:	f000 811c 	beq.w	2400a07a <HAL_RCCEx_PeriphCLKConfig+0x75e>
24009e42:	2900      	cmp	r1, #0
24009e44:	f000 82ef 	beq.w	2400a426 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
24009e48:	2601      	movs	r6, #1
24009e4a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24009e4c:	0358      	lsls	r0, r3, #13
24009e4e:	d50f      	bpl.n	24009e70 <HAL_RCCEx_PeriphCLKConfig+0x554>
    switch (PeriphClkInit->UsbClockSelection)
24009e50:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24009e54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24009e58:	f000 80f2 	beq.w	2400a040 <HAL_RCCEx_PeriphCLKConfig+0x724>
24009e5c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24009e60:	f000 80f4 	beq.w	2400a04c <HAL_RCCEx_PeriphCLKConfig+0x730>
24009e64:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24009e68:	f000 82d1 	beq.w	2400a40e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
24009e6c:	2601      	movs	r6, #1
24009e6e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24009e70:	03d9      	lsls	r1, r3, #15
24009e72:	d509      	bpl.n	24009e88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->SdmmcClockSelection)
24009e74:	6d21      	ldr	r1, [r4, #80]	; 0x50
24009e76:	2900      	cmp	r1, #0
24009e78:	f000 82ad 	beq.w	2400a3d6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
24009e7c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24009e80:	f000 8215 	beq.w	2400a2ae <HAL_RCCEx_PeriphCLKConfig+0x992>
24009e84:	2601      	movs	r6, #1
24009e86:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24009e88:	009f      	lsls	r7, r3, #2
24009e8a:	f100 811d 	bmi.w	2400a0c8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24009e8e:	0398      	lsls	r0, r3, #14
24009e90:	d50e      	bpl.n	24009eb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    switch (PeriphClkInit->RngClockSelection)
24009e92:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24009e96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24009e9a:	f000 8290 	beq.w	2400a3be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
24009e9e:	f240 809d 	bls.w	24009fdc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
24009ea2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24009ea6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
24009eaa:	f000 809a 	beq.w	24009fe2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
24009eae:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009eb0:	02d9      	lsls	r1, r3, #11
24009eb2:	d50b      	bpl.n	24009ecc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24009eb4:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009eb8:	6f61      	ldr	r1, [r4, #116]	; 0x74
24009eba:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009ebe:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24009ec4:	430b      	orrs	r3, r1
24009ec6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24009ec8:	e9d4 3200 	ldrd	r3, r2, [r4]
24009ecc:	00df      	lsls	r7, r3, #3
24009ece:	d50c      	bpl.n	24009eea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24009ed0:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009ed4:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
24009ed8:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009edc:	6913      	ldr	r3, [r2, #16]
24009ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24009ee2:	430b      	orrs	r3, r1
24009ee4:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24009ee6:	e9d4 3200 	ldrd	r3, r2, [r4]
24009eea:	029d      	lsls	r5, r3, #10
24009eec:	d50b      	bpl.n	24009f06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24009eee:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009ef2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24009ef4:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009ef8:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24009efe:	430b      	orrs	r3, r1
24009f00:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24009f02:	e9d4 3200 	ldrd	r3, r2, [r4]
24009f06:	0058      	lsls	r0, r3, #1
24009f08:	d50e      	bpl.n	24009f28 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24009f0a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
24009f0e:	f6c5 0302 	movt	r3, #22530	; 0x5802
24009f12:	691a      	ldr	r2, [r3, #16]
24009f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24009f18:	611a      	str	r2, [r3, #16]
24009f1a:	691a      	ldr	r2, [r3, #16]
24009f1c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24009f20:	430a      	orrs	r2, r1
24009f22:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24009f24:	e9d4 3200 	ldrd	r3, r2, [r4]
24009f28:	2b00      	cmp	r3, #0
24009f2a:	da0b      	bge.n	24009f44 <HAL_RCCEx_PeriphCLKConfig+0x628>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24009f2c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009f30:	6d61      	ldr	r1, [r4, #84]	; 0x54
24009f32:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009f36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009f38:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24009f3c:	430b      	orrs	r3, r1
24009f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24009f40:	e9d4 3200 	ldrd	r3, r2, [r4]
24009f44:	0219      	lsls	r1, r3, #8
24009f46:	d50b      	bpl.n	24009f60 <HAL_RCCEx_PeriphCLKConfig+0x644>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24009f48:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009f4c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24009f50:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009f54:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009f56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24009f5a:	430b      	orrs	r3, r1
24009f5c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24009f5e:	6862      	ldr	r2, [r4, #4]
24009f60:	07d3      	lsls	r3, r2, #31
24009f62:	f100 80bd 	bmi.w	2400a0e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24009f66:	0797      	lsls	r7, r2, #30
24009f68:	f100 80c7 	bmi.w	2400a0fa <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24009f6c:	0755      	lsls	r5, r2, #29
24009f6e:	f100 80d1 	bmi.w	2400a114 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24009f72:	0710      	lsls	r0, r2, #28
24009f74:	f100 80db 	bmi.w	2400a12e <HAL_RCCEx_PeriphCLKConfig+0x812>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24009f78:	06d1      	lsls	r1, r2, #27
24009f7a:	f100 80e5 	bmi.w	2400a148 <HAL_RCCEx_PeriphCLKConfig+0x82c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24009f7e:	0692      	lsls	r2, r2, #26
24009f80:	f100 8142 	bmi.w	2400a208 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    return HAL_OK;
24009f84:	1e30      	subs	r0, r6, #0
24009f86:	bf18      	it	ne
24009f88:	2001      	movne	r0, #1
}
24009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24009f8e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24009f92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24009f96:	f43f aec8 	beq.w	24009d2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
24009f9a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24009f9e:	f43f aec4 	beq.w	24009d2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
24009fa2:	2601      	movs	r6, #1
24009fa4:	4635      	mov	r5, r6
24009fa6:	e6d0      	b.n	24009d4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (PeriphClkInit->Lptim2ClockSelection)
24009fa8:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24009fac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24009fb0:	f43f aee0 	beq.w	24009d74 <HAL_RCCEx_PeriphCLKConfig+0x458>
24009fb4:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24009fb8:	f43f aedc 	beq.w	24009d74 <HAL_RCCEx_PeriphCLKConfig+0x458>
24009fbc:	2601      	movs	r6, #1
24009fbe:	4635      	mov	r5, r6
24009fc0:	e6e8      	b.n	24009d94 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Lptim345ClockSelection)
24009fc2:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24009fc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24009fca:	f43f aef8 	beq.w	24009dbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
24009fce:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24009fd2:	f43f aef4 	beq.w	24009dbe <HAL_RCCEx_PeriphCLKConfig+0x4a2>
24009fd6:	2601      	movs	r6, #1
24009fd8:	4635      	mov	r5, r6
24009fda:	e700      	b.n	24009dde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->RngClockSelection)
24009fdc:	2900      	cmp	r1, #0
24009fde:	f47f af66 	bne.w	24009eae <HAL_RCCEx_PeriphCLKConfig+0x592>
    if (ret == HAL_OK)
24009fe2:	2d00      	cmp	r5, #0
24009fe4:	f040 820f 	bne.w	2400a406 <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24009fe8:	f44f 4288 	mov.w	r2, #17408	; 0x4400
24009fec:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24009ff0:	f6c5 0202 	movt	r2, #22530	; 0x5802
24009ff4:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24009ffa:	430b      	orrs	r3, r1
24009ffc:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009ffe:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a002:	e755      	b.n	24009eb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    switch (PeriphClkInit->Sai1ClockSelection)
2400a004:	4635      	mov	r5, r6
    if (ret == HAL_OK)
2400a006:	2d00      	cmp	r5, #0
2400a008:	f000 8134 	beq.w	2400a274 <HAL_RCCEx_PeriphCLKConfig+0x958>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400a00c:	462e      	mov	r6, r5
2400a00e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a012:	e4bf      	b.n	24009994 <HAL_RCCEx_PeriphCLKConfig+0x78>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400a014:	2101      	movs	r1, #1
2400a016:	f104 0008 	add.w	r0, r4, #8
2400a01a:	f7ff fb83 	bl	24009724 <RCCEx_PLL2_Config>
2400a01e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a020:	2d00      	cmp	r5, #0
2400a022:	f040 817d 	bne.w	2400a320 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400a026:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a02a:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400a02c:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a030:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a032:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400a036:	430b      	orrs	r3, r1
2400a038:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400a03a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a03e:	e592      	b.n	24009b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a040:	2101      	movs	r1, #1
2400a042:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a046:	f7ff fbeb 	bl	24009820 <RCCEx_PLL3_Config>
2400a04a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a04c:	2d00      	cmp	r5, #0
2400a04e:	f040 81b2 	bne.w	2400a3b6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2400a052:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a056:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400a05a:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a05e:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400a060:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400a064:	430b      	orrs	r3, r1
2400a066:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400a068:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a06c:	e700      	b.n	24009e70 <HAL_RCCEx_PeriphCLKConfig+0x554>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a06e:	2102      	movs	r1, #2
2400a070:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a074:	f7ff fbd4 	bl	24009820 <RCCEx_PLL3_Config>
2400a078:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a07a:	2d00      	cmp	r5, #0
2400a07c:	f040 8197 	bne.w	2400a3ae <HAL_RCCEx_PeriphCLKConfig+0xa92>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400a080:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a084:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
2400a088:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a08c:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a08e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
2400a092:	430b      	orrs	r3, r1
2400a094:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400a096:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a09a:	e6d7      	b.n	24009e4c <HAL_RCCEx_PeriphCLKConfig+0x530>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400a09c:	2101      	movs	r1, #1
2400a09e:	f104 0008 	add.w	r0, r4, #8
2400a0a2:	f7ff fb3f 	bl	24009724 <RCCEx_PLL2_Config>
2400a0a6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a0a8:	2d00      	cmp	r5, #0
2400a0aa:	f040 8135 	bne.w	2400a318 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2400a0ae:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a0b2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400a0b4:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a0b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400a0ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
2400a0be:	430b      	orrs	r3, r1
2400a0c0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400a0c2:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a0c6:	e5e6      	b.n	24009c96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a0c8:	2102      	movs	r1, #2
2400a0ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a0ce:	f7ff fba7 	bl	24009820 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400a0d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a0d6:	2800      	cmp	r0, #0
2400a0d8:	f43f aed9 	beq.w	24009e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
      status = HAL_ERROR;
2400a0dc:	2601      	movs	r6, #1
2400a0de:	e6d6      	b.n	24009e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a0e0:	2100      	movs	r1, #0
2400a0e2:	f104 0008 	add.w	r0, r4, #8
2400a0e6:	f7ff fb1d 	bl	24009724 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400a0ea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400a0ec:	2800      	cmp	r0, #0
2400a0ee:	f43f af3a 	beq.w	24009f66 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400a0f2:	0797      	lsls	r7, r2, #30
2400a0f4:	4606      	mov	r6, r0
2400a0f6:	f57f af39 	bpl.w	24009f6c <HAL_RCCEx_PeriphCLKConfig+0x650>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400a0fa:	2101      	movs	r1, #1
2400a0fc:	f104 0008 	add.w	r0, r4, #8
2400a100:	f7ff fb10 	bl	24009724 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400a104:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400a106:	2800      	cmp	r0, #0
2400a108:	f43f af30 	beq.w	24009f6c <HAL_RCCEx_PeriphCLKConfig+0x650>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400a10c:	0755      	lsls	r5, r2, #29
2400a10e:	4606      	mov	r6, r0
2400a110:	f57f af2f 	bpl.w	24009f72 <HAL_RCCEx_PeriphCLKConfig+0x656>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400a114:	2102      	movs	r1, #2
2400a116:	f104 0008 	add.w	r0, r4, #8
2400a11a:	f7ff fb03 	bl	24009724 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400a11e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400a120:	2800      	cmp	r0, #0
2400a122:	f43f af26 	beq.w	24009f72 <HAL_RCCEx_PeriphCLKConfig+0x656>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400a126:	4606      	mov	r6, r0
2400a128:	0710      	lsls	r0, r2, #28
2400a12a:	f57f af25 	bpl.w	24009f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a12e:	2100      	movs	r1, #0
2400a130:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a134:	f7ff fb74 	bl	24009820 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400a138:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400a13a:	2800      	cmp	r0, #0
2400a13c:	f43f af1c 	beq.w	24009f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400a140:	06d1      	lsls	r1, r2, #27
2400a142:	4606      	mov	r6, r0
2400a144:	f57f af1b 	bpl.w	24009f7e <HAL_RCCEx_PeriphCLKConfig+0x662>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a148:	f104 0528 	add.w	r5, r4, #40	; 0x28
2400a14c:	2101      	movs	r1, #1
2400a14e:	4628      	mov	r0, r5
2400a150:	f7ff fb66 	bl	24009820 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400a154:	2800      	cmp	r0, #0
2400a156:	f000 816f 	beq.w	2400a438 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400a15a:	6863      	ldr	r3, [r4, #4]
2400a15c:	069b      	lsls	r3, r3, #26
2400a15e:	d55c      	bpl.n	2400a21a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
2400a160:	4606      	mov	r6, r0
2400a162:	e053      	b.n	2400a20c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400a164:	f44f 4790 	mov.w	r7, #18432	; 0x4800
2400a168:	f6c5 0702 	movt	r7, #22530	; 0x5802
2400a16c:	683b      	ldr	r3, [r7, #0]
2400a16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400a172:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
2400a174:	f7fb f904 	bl	24005380 <HAL_GetTick>
2400a178:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400a17a:	e006      	b.n	2400a18a <HAL_RCCEx_PeriphCLKConfig+0x86e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2400a17c:	f7fb f900 	bl	24005380 <HAL_GetTick>
2400a180:	eba0 0008 	sub.w	r0, r0, r8
2400a184:	2864      	cmp	r0, #100	; 0x64
2400a186:	f200 8226 	bhi.w	2400a5d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400a18a:	683b      	ldr	r3, [r7, #0]
2400a18c:	05da      	lsls	r2, r3, #23
2400a18e:	d5f5      	bpl.n	2400a17c <HAL_RCCEx_PeriphCLKConfig+0x860>
    if (ret == HAL_OK)
2400a190:	2d00      	cmp	r5, #0
2400a192:	f040 825a 	bne.w	2400a64a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2400a196:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a19a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400a19e:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a1a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400a1a4:	4051      	eors	r1, r2
2400a1a6:	f411 7f40 	tst.w	r1, #768	; 0x300
2400a1aa:	d00d      	beq.n	2400a1c8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400a1ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
2400a1ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400a1b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
2400a1b4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
2400a1b8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2400a1ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400a1bc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
2400a1c0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
2400a1c2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2400a1c4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400a1c8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400a1cc:	f000 8217 	beq.w	2400a5fe <HAL_RCCEx_PeriphCLKConfig+0xce2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400a1d0:	f402 7340 	and.w	r3, r2, #768	; 0x300
2400a1d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2400a1d8:	f000 8227 	beq.w	2400a62a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
2400a1dc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a1e0:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a1e4:	691a      	ldr	r2, [r3, #16]
2400a1e6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
2400a1ea:	611a      	str	r2, [r3, #16]
2400a1ec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a1f0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
2400a1f4:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a1f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400a1fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
2400a1fe:	430b      	orrs	r3, r1
2400a200:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400a202:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a206:	e514      	b.n	24009c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a208:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a20c:	2102      	movs	r1, #2
2400a20e:	4628      	mov	r0, r5
2400a210:	f7ff fb06 	bl	24009820 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400a214:	2800      	cmp	r0, #0
2400a216:	f43f aeb5 	beq.w	24009f84 <HAL_RCCEx_PeriphCLKConfig+0x668>
  return HAL_ERROR;
2400a21a:	2001      	movs	r0, #1
}
2400a21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
2400a220:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a224:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
2400a228:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a22c:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a22e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
2400a232:	430b      	orrs	r3, r1
2400a234:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400a236:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a23a:	f7ff bbff 	b.w	24009a3c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
2400a23e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a242:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400a244:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a248:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a24a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
2400a24e:	430b      	orrs	r3, r1
2400a250:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400a252:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a256:	f7ff bbb7 	b.w	240099c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2400a25a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a25e:	6e21      	ldr	r1, [r4, #96]	; 0x60
2400a260:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a264:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
2400a26a:	430b      	orrs	r3, r1
2400a26c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400a26e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a272:	e422      	b.n	24009aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2400a274:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a278:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a27a:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a27e:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a280:	f023 0307 	bic.w	r3, r3, #7
2400a284:	430b      	orrs	r3, r1
2400a286:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400a288:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a28c:	f7ff bb82 	b.w	24009994 <HAL_RCCEx_PeriphCLKConfig+0x78>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2400a290:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a294:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400a298:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a29c:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a29e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
2400a2a2:	430b      	orrs	r3, r1
2400a2a4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400a2a6:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a2aa:	f7ff bbaa 	b.w	24009a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400a2ae:	2102      	movs	r1, #2
2400a2b0:	f104 0008 	add.w	r0, r4, #8
2400a2b4:	f7ff fa36 	bl	24009724 <RCCEx_PLL2_Config>
2400a2b8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a2ba:	2d00      	cmp	r5, #0
2400a2bc:	f000 8096 	beq.w	2400a3ec <HAL_RCCEx_PeriphCLKConfig+0xad0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400a2c0:	462e      	mov	r6, r5
2400a2c2:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a2c6:	e5df      	b.n	24009e88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a2c8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a2cc:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a2d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a2d6:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
2400a2d8:	f7ff bbe9 	b.w	24009aae <HAL_RCCEx_PeriphCLKConfig+0x192>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a2dc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a2e0:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a2e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a2ea:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
2400a2ec:	f7ff bba0 	b.w	24009a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a2f0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a2f4:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a2fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a2fe:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
2400a300:	f7ff bb5c 	b.w	240099bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a304:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a308:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a30e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a312:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
2400a314:	f7ff bb6f 	b.w	240099f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400a318:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a31c:	462e      	mov	r6, r5
2400a31e:	e4ba      	b.n	24009c96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400a320:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a324:	462e      	mov	r6, r5
2400a326:	e41e      	b.n	24009b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2400a328:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a32c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400a32e:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a332:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400a334:	f023 0307 	bic.w	r3, r3, #7
2400a338:	430b      	orrs	r3, r1
2400a33a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400a33c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a340:	e4c3      	b.n	24009cca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2400a342:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a346:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
2400a34a:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a34e:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a350:	f023 0307 	bic.w	r3, r3, #7
2400a354:	430b      	orrs	r3, r1
2400a356:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400a358:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a35c:	e4d0      	b.n	24009d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400a35e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a362:	462e      	mov	r6, r5
2400a364:	e4f1      	b.n	24009d4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400a366:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a36a:	462e      	mov	r6, r5
2400a36c:	f7ff bb89 	b.w	24009a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2400a370:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a374:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400a376:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a37a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400a37c:	f023 0303 	bic.w	r3, r3, #3
2400a380:	430b      	orrs	r3, r1
2400a382:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400a384:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a388:	e450      	b.n	24009c2c <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400a38a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a38e:	462e      	mov	r6, r5
2400a390:	f7ff bbb6 	b.w	24009b00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400a394:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a398:	462e      	mov	r6, r5
2400a39a:	e520      	b.n	24009dde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2400a39c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a3a0:	462e      	mov	r6, r5
2400a3a2:	f7ff bbd0 	b.w	24009b46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400a3a6:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a3aa:	462e      	mov	r6, r5
2400a3ac:	e4f2      	b.n	24009d94 <HAL_RCCEx_PeriphCLKConfig+0x478>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400a3ae:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a3b2:	462e      	mov	r6, r5
2400a3b4:	e54a      	b.n	24009e4c <HAL_RCCEx_PeriphCLKConfig+0x530>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400a3b6:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a3ba:	462e      	mov	r6, r5
2400a3bc:	e558      	b.n	24009e70 <HAL_RCCEx_PeriphCLKConfig+0x554>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a3be:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a3c2:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a3c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a3cc:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
2400a3ce:	2d00      	cmp	r5, #0
2400a3d0:	f43f ae0a 	beq.w	24009fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
2400a3d4:	e017      	b.n	2400a406 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a3d6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a3da:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a3e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a3e4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
2400a3e6:	2d00      	cmp	r5, #0
2400a3e8:	f47f af6a 	bne.w	2400a2c0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2400a3ec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a3f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
2400a3f2:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a3f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400a3f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400a3fc:	430b      	orrs	r3, r1
2400a3fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400a400:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a404:	e540      	b.n	24009e88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400a406:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a40a:	462e      	mov	r6, r5
2400a40c:	e550      	b.n	24009eb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a40e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a412:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a418:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a41c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
2400a41e:	2d00      	cmp	r5, #0
2400a420:	f43f ae17 	beq.w	2400a052 <HAL_RCCEx_PeriphCLKConfig+0x736>
2400a424:	e7c7      	b.n	2400a3b6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a426:	f104 0008 	add.w	r0, r4, #8
2400a42a:	f7ff f97b 	bl	24009724 <RCCEx_PLL2_Config>
2400a42e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a430:	2d00      	cmp	r5, #0
2400a432:	f43f ae25 	beq.w	2400a080 <HAL_RCCEx_PeriphCLKConfig+0x764>
2400a436:	e7ba      	b.n	2400a3ae <HAL_RCCEx_PeriphCLKConfig+0xa92>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400a438:	6862      	ldr	r2, [r4, #4]
2400a43a:	e5a0      	b.n	24009f7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a43c:	2102      	movs	r1, #2
2400a43e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a442:	f7ff f9ed 	bl	24009820 <RCCEx_PLL3_Config>
2400a446:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a448:	2d00      	cmp	r5, #0
2400a44a:	f43f ac96 	beq.w	24009d7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
2400a44e:	e7aa      	b.n	2400a3a6 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a450:	2102      	movs	r1, #2
2400a452:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a456:	f7ff f9e3 	bl	24009820 <RCCEx_PLL3_Config>
2400a45a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a45c:	2d00      	cmp	r5, #0
2400a45e:	f43f acb1 	beq.w	24009dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
2400a462:	e797      	b.n	2400a394 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a464:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a468:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a46e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a472:	62da      	str	r2, [r3, #44]	; 0x2c
    if (ret == HAL_OK)
2400a474:	2d00      	cmp	r5, #0
2400a476:	f43f add6 	beq.w	2400a026 <HAL_RCCEx_PeriphCLKConfig+0x70a>
2400a47a:	e751      	b.n	2400a320 <HAL_RCCEx_PeriphCLKConfig+0xa04>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a47c:	2101      	movs	r1, #1
2400a47e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a482:	f7ff f9cd 	bl	24009820 <RCCEx_PLL3_Config>
2400a486:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a488:	2d00      	cmp	r5, #0
2400a48a:	f43f ab2d 	beq.w	24009ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
2400a48e:	e77c      	b.n	2400a38a <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a490:	2101      	movs	r1, #1
2400a492:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a496:	f7ff f9c3 	bl	24009820 <RCCEx_PLL3_Config>
2400a49a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a49c:	2d00      	cmp	r5, #0
2400a49e:	f43f ab45 	beq.w	24009b2c <HAL_RCCEx_PeriphCLKConfig+0x210>
2400a4a2:	e77b      	b.n	2400a39c <HAL_RCCEx_PeriphCLKConfig+0xa80>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400a4a4:	2102      	movs	r1, #2
2400a4a6:	f104 0008 	add.w	r0, r4, #8
2400a4aa:	f7ff f93b 	bl	24009724 <RCCEx_PLL2_Config>
2400a4ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a4b0:	2d00      	cmp	r5, #0
2400a4b2:	f43f aada 	beq.w	24009a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
2400a4b6:	e756      	b.n	2400a366 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a4b8:	2102      	movs	r1, #2
2400a4ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a4be:	f7ff f9af 	bl	24009820 <RCCEx_PLL3_Config>
2400a4c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a4c4:	2d00      	cmp	r5, #0
2400a4c6:	f43f ac33 	beq.w	24009d30 <HAL_RCCEx_PeriphCLKConfig+0x414>
2400a4ca:	e748      	b.n	2400a35e <HAL_RCCEx_PeriphCLKConfig+0xa42>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400a4cc:	2102      	movs	r1, #2
2400a4ce:	f104 0008 	add.w	r0, r4, #8
2400a4d2:	f7ff f927 	bl	24009724 <RCCEx_PLL2_Config>
2400a4d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a4d8:	2d00      	cmp	r5, #0
2400a4da:	f43f af49 	beq.w	2400a370 <HAL_RCCEx_PeriphCLKConfig+0xa54>
2400a4de:	f7ff bba2 	b.w	24009c26 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a4e2:	2102      	movs	r1, #2
2400a4e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a4e8:	f7ff f99a 	bl	24009820 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2400a4ec:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a4f0:	2800      	cmp	r0, #0
2400a4f2:	f43f ac7c 	beq.w	24009dee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
        status = HAL_ERROR;
2400a4f6:	2601      	movs	r6, #1
2400a4f8:	e479      	b.n	24009dee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a4fa:	2102      	movs	r1, #2
2400a4fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a500:	f7ff f98e 	bl	24009820 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2400a504:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400a508:	2800      	cmp	r0, #0
2400a50a:	f43f ac83 	beq.w	24009e14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        status = HAL_ERROR;
2400a50e:	2601      	movs	r6, #1
2400a510:	e480      	b.n	24009e14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a512:	2100      	movs	r1, #0
2400a514:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a518:	f7ff f982 	bl	24009820 <RCCEx_PLL3_Config>
2400a51c:	4605      	mov	r5, r0
        break;
2400a51e:	f7ff ba6a 	b.w	240099f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400a522:	2102      	movs	r1, #2
2400a524:	3028      	adds	r0, #40	; 0x28
2400a526:	f7ff f97b 	bl	24009820 <RCCEx_PLL3_Config>
2400a52a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
2400a52c:	2e00      	cmp	r6, #0
2400a52e:	f43f aa11 	beq.w	24009954 <HAL_RCCEx_PeriphCLKConfig+0x38>
2400a532:	f7ff ba1f 	b.w	24009974 <HAL_RCCEx_PeriphCLKConfig+0x58>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a536:	f44f 4388 	mov.w	r3, #17408	; 0x4400
        break;
2400a53a:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a53c:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a546:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
2400a548:	e55d      	b.n	2400a006 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a54a:	2100      	movs	r1, #0
2400a54c:	f104 0008 	add.w	r0, r4, #8
2400a550:	f7ff f8e8 	bl	24009724 <RCCEx_PLL2_Config>
2400a554:	4605      	mov	r5, r0
        break;
2400a556:	e556      	b.n	2400a006 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a558:	2100      	movs	r1, #0
2400a55a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a55e:	f7ff f95f 	bl	24009820 <RCCEx_PLL3_Config>
2400a562:	4605      	mov	r5, r0
        break;
2400a564:	f7ff baa3 	b.w	24009aae <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a568:	2100      	movs	r1, #0
2400a56a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a56e:	f7ff f957 	bl	24009820 <RCCEx_PLL3_Config>
2400a572:	4605      	mov	r5, r0
        break;
2400a574:	f7ff ba5c 	b.w	24009a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a578:	2100      	movs	r1, #0
2400a57a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a57e:	f7ff f94f 	bl	24009820 <RCCEx_PLL3_Config>
2400a582:	4605      	mov	r5, r0
        break;
2400a584:	e53f      	b.n	2400a006 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400a586:	2100      	movs	r1, #0
2400a588:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a58c:	f7ff f948 	bl	24009820 <RCCEx_PLL3_Config>
2400a590:	4605      	mov	r5, r0
        break;
2400a592:	f7ff ba13 	b.w	240099bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a596:	2101      	movs	r1, #1
2400a598:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a59c:	f7ff f940 	bl	24009820 <RCCEx_PLL3_Config>
2400a5a0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a5a2:	2d00      	cmp	r5, #0
2400a5a4:	f43f aecd 	beq.w	2400a342 <HAL_RCCEx_PeriphCLKConfig+0xa26>
2400a5a8:	f7ff bba7 	b.w	24009cfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a5ac:	2101      	movs	r1, #1
2400a5ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a5b2:	f7ff f935 	bl	24009820 <RCCEx_PLL3_Config>
2400a5b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a5b8:	2d00      	cmp	r5, #0
2400a5ba:	f43f aeb5 	beq.w	2400a328 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
2400a5be:	f7ff bb81 	b.w	24009cc4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400a5c2:	2101      	movs	r1, #1
2400a5c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400a5c8:	f7ff f92a 	bl	24009820 <RCCEx_PLL3_Config>
2400a5cc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a5ce:	2d00      	cmp	r5, #0
2400a5d0:	f43f ad6d 	beq.w	2400a0ae <HAL_RCCEx_PeriphCLKConfig+0x792>
2400a5d4:	e6a0      	b.n	2400a318 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        status = ret;
2400a5d6:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400a5d8:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a5dc:	4635      	mov	r5, r6
2400a5de:	f7ff bb28 	b.w	24009c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400a5e2:	2601      	movs	r6, #1
2400a5e4:	f7ff b9c8 	b.w	24009978 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a5e8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a5ec:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400a5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400a5f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a5f6:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400a5f8:	6e81      	ldr	r1, [r0, #104]	; 0x68
2400a5fa:	f7ff b9b1 	b.w	24009960 <HAL_RCCEx_PeriphCLKConfig+0x44>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400a5fe:	f44f 4888 	mov.w	r8, #17408	; 0x4400
        tickstart = HAL_GetTick();
2400a602:	f7fa febd 	bl	24005380 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400a606:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
2400a60a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400a60c:	f6c5 0802 	movt	r8, #22530	; 0x5802
2400a610:	e004      	b.n	2400a61c <HAL_RCCEx_PeriphCLKConfig+0xd00>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400a612:	f7fa feb5 	bl	24005380 <HAL_GetTick>
2400a616:	1bc0      	subs	r0, r0, r7
2400a618:	4548      	cmp	r0, r9
2400a61a:	d8dc      	bhi.n	2400a5d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400a61c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
2400a620:	079b      	lsls	r3, r3, #30
2400a622:	d5f6      	bpl.n	2400a612 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400a624:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400a628:	e5d2      	b.n	2400a1d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
2400a62a:	f44f 4188 	mov.w	r1, #17408	; 0x4400
2400a62e:	f64f 73cf 	movw	r3, #65487	; 0xffcf
2400a632:	f6c5 0102 	movt	r1, #22530	; 0x5802
2400a636:	f2c0 03ff 	movt	r3, #255	; 0xff
2400a63a:	ea03 1312 	and.w	r3, r3, r2, lsr #4
2400a63e:	690a      	ldr	r2, [r1, #16]
2400a640:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
2400a644:	4313      	orrs	r3, r2
2400a646:	610b      	str	r3, [r1, #16]
2400a648:	e5d0      	b.n	2400a1ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400a64a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a64e:	462e      	mov	r6, r5
2400a650:	f7ff baef 	b.w	24009c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
    switch (PeriphClkInit->FmcClockSelection)
2400a654:	2601      	movs	r6, #1
2400a656:	4635      	mov	r5, r6
2400a658:	f7ff bae8 	b.w	24009c2c <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400a65c:	2601      	movs	r6, #1
2400a65e:	4635      	mov	r5, r6
2400a660:	f7ff bb4e 	b.w	24009d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400a664:	2601      	movs	r6, #1
2400a666:	4635      	mov	r5, r6
2400a668:	f7ff bb2f 	b.w	24009cca <HAL_RCCEx_PeriphCLKConfig+0x3ae>

2400a66c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a66c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a670:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
2400a674:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a676:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400a678:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2400a67a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
2400a67c:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400a680:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400a684:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
2400a686:	d067      	beq.n	2400a758 <HAL_RCCEx_GetPLL2ClockFreq+0xec>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400a688:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2400a68c:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a690:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400a694:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400a698:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400a69a:	ee07 4a90 	vmov	s15, r4
2400a69e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
2400a6a2:	d004      	beq.n	2400a6ae <HAL_RCCEx_GetPLL2ClockFreq+0x42>
2400a6a4:	2902      	cmp	r1, #2
2400a6a6:	f000 8085 	beq.w	2400a7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400a6aa:	2900      	cmp	r1, #0
2400a6ac:	d059      	beq.n	2400a762 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a6ae:	ee07 2a10 	vmov	s14, r2
2400a6b2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a6b6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400a6bc:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a6c0:	f6c4 2174 	movt	r1, #19060	; 0x4a74
2400a6c4:	ee06 1a10 	vmov	s12, r1
2400a6c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a6cc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
2400a6d0:	ee86 7a24 	vdiv.f32	s14, s12, s9
2400a6d4:	ee06 3a90 	vmov	s13, r3
2400a6d8:	ee05 2a90 	vmov	s11, r2
2400a6dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a6e0:	ee76 6a85 	vadd.f32	s13, s13, s10
2400a6e4:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400a6e8:	ee27 7a26 	vmul.f32	s14, s14, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400a6ec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a6f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a6f4:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a6f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400a6fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400a6fe:	ee07 3a90 	vmov	s15, r3
2400a702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2400a706:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400a708:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a70c:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400a710:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400a714:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2400a718:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400a71a:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400a71e:	ee07 3a90 	vmov	s15, r3
2400a722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a726:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a72a:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400a72e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400a732:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2400a736:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400a738:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400a73c:	ee07 3a90 	vmov	s15, r3
2400a740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a744:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a748:	eec7 6a27 	vdiv.f32	s13, s14, s15
2400a74c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
2400a750:	ee17 2a90 	vmov	r2, s15
2400a754:	6082      	str	r2, [r0, #8]
}
2400a756:	4770      	bx	lr
2400a758:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2400a75a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2400a75e:	6082      	str	r2, [r0, #8]
}
2400a760:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a762:	6819      	ldr	r1, [r3, #0]
2400a764:	0689      	lsls	r1, r1, #26
2400a766:	d531      	bpl.n	2400a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x160>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a768:	681c      	ldr	r4, [r3, #0]
2400a76a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a76e:	ee07 2a10 	vmov	s14, r2
2400a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a774:	f3c4 02c1 	ubfx	r2, r4, #3, #2
2400a778:	f2c0 31d0 	movt	r1, #976	; 0x3d0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a780:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a784:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a78a:	ee06 3a90 	vmov	s13, r3
2400a78e:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
2400a792:	ee06 1a10 	vmov	s12, r1
2400a796:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a79a:	ee05 3a90 	vmov	s11, r3
2400a79e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
2400a7a2:	ee76 6a87 	vadd.f32	s13, s13, s14
2400a7a6:	ee86 7a05 	vdiv.f32	s14, s12, s10
2400a7aa:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400a7ae:	ee27 7a26 	vmul.f32	s14, s14, s13
2400a7b2:	e79b      	b.n	2400a6ec <HAL_RCCEx_GetPLL2ClockFreq+0x80>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a7b4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a7b8:	ee07 2a10 	vmov	s14, r2
2400a7bc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400a7c2:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a7c6:	f6c4 3174 	movt	r1, #19316	; 0x4b74
2400a7ca:	e77b      	b.n	2400a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x58>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400a7cc:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a7d0:	ee07 2a10 	vmov	s14, r2
2400a7d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400a7da:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a7de:	f6c4 4174 	movt	r1, #19572	; 0x4c74
2400a7e2:	e76f      	b.n	2400a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x58>

2400a7e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a7e4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a7e8:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
2400a7ec:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a7ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400a7f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400a7f2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
2400a7f4:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400a7f8:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400a7fc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
2400a7fe:	d067      	beq.n	2400a8d0 <HAL_RCCEx_GetPLL3ClockFreq+0xec>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400a800:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400a804:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a808:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400a80c:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400a810:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400a812:	ee07 4a90 	vmov	s15, r4
2400a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
2400a81a:	d004      	beq.n	2400a826 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
2400a81c:	2902      	cmp	r1, #2
2400a81e:	f000 8085 	beq.w	2400a92c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400a822:	2900      	cmp	r1, #0
2400a824:	d059      	beq.n	2400a8da <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a826:	ee07 2a10 	vmov	s14, r2
2400a82a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a82e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a834:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a838:	f6c4 2174 	movt	r1, #19060	; 0x4a74
2400a83c:	ee06 1a10 	vmov	s12, r1
2400a840:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a844:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
2400a848:	ee86 7a24 	vdiv.f32	s14, s12, s9
2400a84c:	ee06 3a90 	vmov	s13, r3
2400a850:	ee05 2a90 	vmov	s11, r2
2400a854:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a858:	ee76 6a85 	vadd.f32	s13, s13, s10
2400a85c:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400a860:	ee27 7a26 	vmul.f32	s14, s14, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400a864:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a86c:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a870:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400a872:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400a876:	ee07 3a90 	vmov	s15, r3
2400a87a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2400a87e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400a880:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a884:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400a888:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400a88c:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2400a890:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400a892:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400a896:	ee07 3a90 	vmov	s15, r3
2400a89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a8a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400a8a6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400a8aa:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2400a8ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400a8b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400a8b4:	ee07 3a90 	vmov	s15, r3
2400a8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a8c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
2400a8c4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
2400a8c8:	ee17 2a90 	vmov	r2, s15
2400a8cc:	6082      	str	r2, [r0, #8]
}
2400a8ce:	4770      	bx	lr
2400a8d0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2400a8d2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2400a8d6:	6082      	str	r2, [r0, #8]
}
2400a8d8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a8da:	6819      	ldr	r1, [r3, #0]
2400a8dc:	0689      	lsls	r1, r1, #26
2400a8de:	d531      	bpl.n	2400a944 <HAL_RCCEx_GetPLL3ClockFreq+0x160>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a8e0:	681c      	ldr	r4, [r3, #0]
2400a8e2:	f44f 4110 	mov.w	r1, #36864	; 0x9000
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a8e6:	ee07 2a10 	vmov	s14, r2
2400a8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a8ec:	f3c4 02c1 	ubfx	r2, r4, #3, #2
2400a8f0:	f2c0 31d0 	movt	r1, #976	; 0x3d0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a8f8:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a8fc:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a8fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a902:	ee06 3a90 	vmov	s13, r3
2400a906:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
2400a90a:	ee06 1a10 	vmov	s12, r1
2400a90e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a912:	ee05 3a90 	vmov	s11, r3
2400a916:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
2400a91a:	ee76 6a87 	vadd.f32	s13, s13, s14
2400a91e:	ee86 7a05 	vdiv.f32	s14, s12, s10
2400a922:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400a926:	ee27 7a26 	vmul.f32	s14, s14, s13
2400a92a:	e79b      	b.n	2400a864 <HAL_RCCEx_GetPLL3ClockFreq+0x80>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a92c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a930:	ee07 2a10 	vmov	s14, r2
2400a934:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a93a:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a93e:	f6c4 3174 	movt	r1, #19316	; 0x4b74
2400a942:	e77b      	b.n	2400a83c <HAL_RCCEx_GetPLL3ClockFreq+0x58>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400a944:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a948:	ee07 2a10 	vmov	s14, r2
2400a94c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a952:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a956:	f6c4 4174 	movt	r1, #19572	; 0x4c74
2400a95a:	e76f      	b.n	2400a83c <HAL_RCCEx_GetPLL3ClockFreq+0x58>

2400a95c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a95c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400a960:	f6c5 0302 	movt	r3, #22530	; 0x5802
{
2400a964:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a966:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400a968:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400a96a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
2400a96c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400a970:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a974:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
2400a976:	d068      	beq.n	2400aa4a <HAL_RCCEx_GetPLL1ClockFreq+0xee>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a978:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400a97c:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a980:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a984:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400a988:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a98a:	ee07 4a90 	vmov	s15, r4
2400a98e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
2400a992:	f000 8094 	beq.w	2400aabe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
2400a996:	2902      	cmp	r1, #2
2400a998:	f000 8085 	beq.w	2400aaa6 <HAL_RCCEx_GetPLL1ClockFreq+0x14a>
2400a99c:	2900      	cmp	r1, #0
2400a99e:	d059      	beq.n	2400aa54 <HAL_RCCEx_GetPLL1ClockFreq+0xf8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a9a0:	ee07 2a10 	vmov	s14, r2
2400a9a4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400a9a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a9ae:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400a9b2:	f6c4 4174 	movt	r1, #19572	; 0x4c74
2400a9b6:	ee06 1a10 	vmov	s12, r1
2400a9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a9be:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
2400a9c2:	ee86 7a24 	vdiv.f32	s14, s12, s9
2400a9c6:	ee06 3a90 	vmov	s13, r3
2400a9ca:	ee05 2a90 	vmov	s11, r2
2400a9ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a9d2:	ee76 6a85 	vadd.f32	s13, s13, s10
2400a9d6:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400a9da:	ee27 7a26 	vmul.f32	s14, s14, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400a9de:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400a9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a9e6:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400a9ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400a9ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400a9f0:	ee07 3a90 	vmov	s15, r3
2400a9f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2400a9f8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400a9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a9fe:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400aa02:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400aa06:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2400aa0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400aa0c:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400aa10:	ee07 3a90 	vmov	s15, r3
2400aa14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400aa18:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400aa1c:	ee87 6a27 	vdiv.f32	s12, s14, s15
2400aa20:	eebc 6ac6 	vcvt.u32.f32	s12, s12
2400aa24:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400aa28:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400aa2a:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400aa2e:	ee07 3a90 	vmov	s15, r3
2400aa32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400aa3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
2400aa3e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
2400aa42:	ee17 2a90 	vmov	r2, s15
2400aa46:	6082      	str	r2, [r0, #8]
}
2400aa48:	4770      	bx	lr
2400aa4a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2400aa4c:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400aa50:	6082      	str	r2, [r0, #8]
}
2400aa52:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400aa54:	6819      	ldr	r1, [r3, #0]
2400aa56:	0689      	lsls	r1, r1, #26
2400aa58:	d5a2      	bpl.n	2400a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x44>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400aa5a:	681c      	ldr	r4, [r3, #0]
2400aa5c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400aa60:	ee07 2a10 	vmov	s14, r2
2400aa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400aa66:	f3c4 02c1 	ubfx	r2, r4, #3, #2
2400aa6a:	f2c0 31d0 	movt	r1, #976	; 0x3d0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400aa6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400aa72:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400aa76:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400aa78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400aa7c:	ee06 3a90 	vmov	s13, r3
2400aa80:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
2400aa84:	ee06 1a10 	vmov	s12, r1
2400aa88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400aa8c:	ee05 3a90 	vmov	s11, r3
2400aa90:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
2400aa94:	ee76 6a87 	vadd.f32	s13, s13, s14
2400aa98:	ee86 7a05 	vdiv.f32	s14, s12, s10
2400aa9c:	eee7 6aa5 	vfma.f32	s13, s15, s11
2400aaa0:	ee27 7a26 	vmul.f32	s14, s14, s13
2400aaa4:	e79b      	b.n	2400a9de <HAL_RCCEx_GetPLL1ClockFreq+0x82>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400aaa6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400aaaa:	ee07 2a10 	vmov	s14, r2
2400aaae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400aab4:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400aab8:	f6c4 3174 	movt	r1, #19316	; 0x4b74
2400aabc:	e77b      	b.n	2400a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x5a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400aabe:	f44f 5110 	mov.w	r1, #9216	; 0x2400
2400aac2:	ee07 2a10 	vmov	s14, r2
2400aac6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400aacc:	eef8 4ac7 	vcvt.f32.s32	s9, s14
2400aad0:	f6c4 2174 	movt	r1, #19060	; 0x4a74
2400aad4:	e76f      	b.n	2400a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x5a>
2400aad6:	bf00      	nop

2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400aad8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
2400aadc:	430b      	orrs	r3, r1
{
2400aade:	b500      	push	{lr}
2400aae0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400aae2:	f000 809a 	beq.w	2400ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
2400aae6:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
2400aaea:	430b      	orrs	r3, r1
2400aaec:	d03f      	beq.n	2400ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400aaee:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400aaf2:	430b      	orrs	r3, r1
2400aaf4:	f000 811b 	beq.w	2400ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
2400aaf8:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
2400aafc:	430b      	orrs	r3, r1
2400aafe:	f000 80a3 	beq.w	2400ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400ab02:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
2400ab06:	430b      	orrs	r3, r1
2400ab08:	d070      	beq.n	2400abec <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2400ab0a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400ab0e:	430b      	orrs	r3, r1
2400ab10:	f000 8151 	beq.w	2400adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2400ab14:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
2400ab18:	430b      	orrs	r3, r1
2400ab1a:	f000 80c6 	beq.w	2400acaa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400ab1e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400ab22:	430b      	orrs	r3, r1
2400ab24:	f000 8136 	beq.w	2400ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2400ab28:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
2400ab2c:	430b      	orrs	r3, r1
2400ab2e:	f000 8184 	beq.w	2400ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x362>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400ab32:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
2400ab36:	4308      	orrs	r0, r1
2400ab38:	d147      	bne.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2400ab3a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400ab3e:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400ab42:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ab44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
2400ab48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400ab4c:	f000 80a4 	beq.w	2400ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
2400ab50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400ab54:	f000 819e 	beq.w	2400ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
2400ab58:	2b00      	cmp	r3, #0
2400ab5a:	d136      	bne.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2400ab5c:	6810      	ldr	r0, [r2, #0]
2400ab5e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400ab62:	d057      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          frequency = HSE_VALUE;
2400ab64:	f44f 5010 	mov.w	r0, #9216	; 0x2400
2400ab68:	f2c0 00f4 	movt	r0, #244	; 0xf4
2400ab6c:	e052      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
2400ab6e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400ab72:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400ab76:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ab78:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
2400ab7c:	2b80      	cmp	r3, #128	; 0x80
2400ab7e:	f000 80d0 	beq.w	2400ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
2400ab82:	d926      	bls.n	2400abd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
2400ab84:	2bc0      	cmp	r3, #192	; 0xc0
2400ab86:	d041      	beq.n	2400ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
2400ab88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400ab8c:	d11d      	bne.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400ab8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400ab90:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400ab92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400ab96:	0749      	lsls	r1, r1, #29
2400ab98:	d502      	bpl.n	2400aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
2400ab9a:	2b00      	cmp	r3, #0
2400ab9c:	f000 80f1 	beq.w	2400ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400aba0:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400aba4:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400aba8:	6812      	ldr	r2, [r2, #0]
2400abaa:	05d0      	lsls	r0, r2, #23
2400abac:	d503      	bpl.n	2400abb6 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
2400abae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400abb2:	f000 813d 	beq.w	2400ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400abb6:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400abba:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400abbe:	6812      	ldr	r2, [r2, #0]
2400abc0:	0391      	lsls	r1, r2, #14
2400abc2:	d502      	bpl.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
2400abc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400abc8:	d0cc      	beq.n	2400ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
    switch (srcclk)
2400abca:	2000      	movs	r0, #0
}
2400abcc:	b005      	add	sp, #20
2400abce:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
2400abd2:	2b00      	cmp	r3, #0
2400abd4:	d060      	beq.n	2400ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
2400abd6:	2b40      	cmp	r3, #64	; 0x40
2400abd8:	d1f7      	bne.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400abda:	6810      	ldr	r0, [r2, #0]
2400abdc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400abe0:	d018      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400abe2:	a801      	add	r0, sp, #4
2400abe4:	f7ff fd42 	bl	2400a66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400abe8:	9801      	ldr	r0, [sp, #4]
2400abea:	e013      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400abec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400abf0:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400abf4:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400abf6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
2400abfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400abfe:	f000 8090 	beq.w	2400ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
2400ac02:	d947      	bls.n	2400ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
2400ac04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2400ac08:	f040 80ac 	bne.w	2400ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = EXTERNAL_CLOCK_VALUE;
2400ac0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400ac10:	f2c0 00bb 	movt	r0, #187	; 0xbb
}
2400ac14:	b005      	add	sp, #20
2400ac16:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2400ac1a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ac1e:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ac24:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
2400ac28:	2b04      	cmp	r3, #4
2400ac2a:	d8ce      	bhi.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
2400ac2c:	a201      	add	r2, pc, #4	; (adr r2, 2400ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
2400ac2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400ac32:	bf00      	nop
2400ac34:	2400ad03 	.word	0x2400ad03
2400ac38:	2400accd 	.word	0x2400accd
2400ac3c:	2400ace9 	.word	0x2400ace9
2400ac40:	2400ac0d 	.word	0x2400ac0d
2400ac44:	2400acdf 	.word	0x2400acdf
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
2400ac48:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400ac4c:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400ac50:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400ac52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
2400ac56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400ac5a:	d062      	beq.n	2400ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
2400ac5c:	d95a      	bls.n	2400ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
2400ac5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2400ac62:	d0d3      	beq.n	2400ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
2400ac64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400ac68:	d1af      	bne.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400ac6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400ac6c:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400ac6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400ac72:	0752      	lsls	r2, r2, #29
2400ac74:	d594      	bpl.n	2400aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
2400ac76:	2b00      	cmp	r3, #0
2400ac78:	d192      	bne.n	2400aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400ac7a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ac7e:	f44f 4010 	mov.w	r0, #36864	; 0x9000
2400ac82:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ac86:	f2c0 30d0 	movt	r0, #976	; 0x3d0
2400ac8a:	681b      	ldr	r3, [r3, #0]
2400ac8c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400ac90:	40d8      	lsrs	r0, r3
2400ac92:	e7bf      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    switch (srcclk)
2400ac94:	2b00      	cmp	r3, #0
2400ac96:	d16a      	bne.n	2400ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400ac98:	6810      	ldr	r0, [r2, #0]
2400ac9a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400ac9e:	d0b9      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2400aca0:	a801      	add	r0, sp, #4
2400aca2:	f7ff fe5b 	bl	2400a95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400aca6:	9802      	ldr	r0, [sp, #8]
2400aca8:	e7b4      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2400acaa:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400acae:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400acb2:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400acb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
2400acb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400acbc:	f000 80f4 	beq.w	2400aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
2400acc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400acc4:	d0d1      	beq.n	2400ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x192>
2400acc6:	2b00      	cmp	r3, #0
2400acc8:	f47f af7f 	bne.w	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400accc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400acd0:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400acd4:	6818      	ldr	r0, [r3, #0]
2400acd6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400acda:	d09b      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400acdc:	e781      	b.n	2400abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400acde:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400ace2:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400ace6:	e752      	b.n	2400ab8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400ace8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400acec:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400acf0:	6818      	ldr	r0, [r3, #0]
2400acf2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400acf6:	d08d      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400acf8:	a801      	add	r0, sp, #4
2400acfa:	f7ff fd73 	bl	2400a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400acfe:	9801      	ldr	r0, [sp, #4]
2400ad00:	e788      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400ad02:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ad06:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ad0a:	6818      	ldr	r0, [r3, #0]
2400ad0c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400ad10:	d080      	beq.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400ad12:	e7c5      	b.n	2400aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
    switch (saiclocksource)
2400ad14:	2b00      	cmp	r3, #0
2400ad16:	d0bf      	beq.n	2400ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
2400ad18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400ad1c:	f43f af5d 	beq.w	2400abda <HAL_RCCEx_GetPeriphCLKFreq+0x102>
2400ad20:	e753      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400ad22:	6810      	ldr	r0, [r2, #0]
2400ad24:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400ad28:	f43f af74 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400ad2c:	e7e4      	b.n	2400acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
2400ad2e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400ad32:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400ad36:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400ad38:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
2400ad3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400ad40:	d0ef      	beq.n	2400ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
2400ad42:	d806      	bhi.n	2400ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
2400ad44:	2b00      	cmp	r3, #0
2400ad46:	d0a7      	beq.n	2400ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
2400ad48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2400ad4c:	f43f af45 	beq.w	2400abda <HAL_RCCEx_GetPeriphCLKFreq+0x102>
2400ad50:	e73b      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
2400ad52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400ad56:	f43f af59 	beq.w	2400ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
2400ad5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400ad5e:	f43f af16 	beq.w	2400ab8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
2400ad62:	e732      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
2400ad64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ad68:	f43f af7f 	beq.w	2400ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x192>
2400ad6c:	e72d      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
2400ad6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400ad72:	f43f af32 	beq.w	2400abda <HAL_RCCEx_GetPeriphCLKFreq+0x102>
2400ad76:	e728      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400ad78:	6810      	ldr	r0, [r2, #0]
2400ad7a:	f010 0004 	ands.w	r0, r0, #4
2400ad7e:	f43f af49 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400ad82:	6813      	ldr	r3, [r2, #0]
2400ad84:	f44f 4010 	mov.w	r0, #36864	; 0x9000
2400ad88:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400ad8c:	f2c0 30d0 	movt	r0, #976	; 0x3d0
2400ad90:	40d8      	lsrs	r0, r3
2400ad92:	e73f      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2400ad94:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ad98:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ad9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
2400ad9e:	03d2      	lsls	r2, r2, #15
2400ada0:	d5b3      	bpl.n	2400ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400ada2:	6818      	ldr	r0, [r3, #0]
2400ada4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400ada8:	f43f af34 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400adac:	a801      	add	r0, sp, #4
2400adae:	f7ff fc5d 	bl	2400a66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2400adb2:	9803      	ldr	r0, [sp, #12]
2400adb4:	e72e      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2400adb6:	f44f 4288 	mov.w	r2, #17408	; 0x4400
2400adba:	f6c5 0202 	movt	r2, #22530	; 0x5802
2400adbe:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400adc0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400adc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2400adc8:	d0d6      	beq.n	2400ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400adca:	d813      	bhi.n	2400adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
2400adcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400add0:	d060      	beq.n	2400ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
2400add2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400add6:	d11e      	bne.n	2400ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400add8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400addc:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ade0:	6818      	ldr	r0, [r3, #0]
2400ade2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400ade6:	f43f af15 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400adea:	a801      	add	r0, sp, #4
2400adec:	f7ff fcfa 	bl	2400a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2400adf0:	9802      	ldr	r0, [sp, #8]
2400adf2:	e70f      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    switch (srcclk)
2400adf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400adf8:	d015      	beq.n	2400ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
2400adfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400adfe:	f47f aee4 	bne.w	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2400ae02:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ae06:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ae0a:	6818      	ldr	r0, [r3, #0]
2400ae0c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400ae10:	f43f af00 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400ae14:	e6a6      	b.n	2400ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
    switch (srcclk)
2400ae16:	2b00      	cmp	r3, #0
2400ae18:	f47f aed7 	bne.w	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
}
2400ae1c:	b005      	add	sp, #20
2400ae1e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
2400ae22:	f7fe bc29 	b.w	24009678 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400ae26:	6810      	ldr	r0, [r2, #0]
2400ae28:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400ae2c:	f43f aef2 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          frequency = CSI_VALUE;
2400ae30:	f44f 6010 	mov.w	r0, #2304	; 0x900
2400ae34:	f2c0 003d 	movt	r0, #61	; 0x3d
2400ae38:	e6ec      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2400ae3a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ae3e:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ae42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400ae44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
2400ae48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400ae4c:	d040      	beq.n	2400aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
2400ae4e:	d81a      	bhi.n	2400ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
2400ae50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400ae54:	d04e      	beq.n	2400aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
2400ae56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400ae5a:	d0bd      	beq.n	2400add8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
2400ae5c:	2b00      	cmp	r3, #0
2400ae5e:	f47f aeb4 	bne.w	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
2400ae62:	f7fe fbb9 	bl	240095d8 <HAL_RCC_GetHCLKFreq>
2400ae66:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400ae6a:	f24f 5214 	movw	r2, #62740	; 0xf514
2400ae6e:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400ae72:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400ae76:	6a1b      	ldr	r3, [r3, #32]
2400ae78:	f3c3 1302 	ubfx	r3, r3, #4, #3
2400ae7c:	5cd3      	ldrb	r3, [r2, r3]
2400ae7e:	f003 031f 	and.w	r3, r3, #31
2400ae82:	40d8      	lsrs	r0, r3
        break;
2400ae84:	e6c6      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    switch (srcclk)
2400ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400ae8a:	d017      	beq.n	2400aebc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
2400ae8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2400ae90:	d0b7      	beq.n	2400ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
2400ae92:	e69a      	b.n	2400abca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400ae94:	6810      	ldr	r0, [r2, #0]
2400ae96:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400ae9a:	f43f aebb 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400ae9e:	a801      	add	r0, sp, #4
2400aea0:	f7ff fbe4 	bl	2400a66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2400aea4:	9802      	ldr	r0, [sp, #8]
2400aea6:	e6b5      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400aea8:	6810      	ldr	r0, [r2, #0]
2400aeaa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400aeae:	f43f aeb1 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400aeb2:	a801      	add	r0, sp, #4
2400aeb4:	f7ff fc96 	bl	2400a7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2400aeb8:	9803      	ldr	r0, [sp, #12]
2400aeba:	e6ab      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400aebc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400aec0:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400aec4:	6818      	ldr	r0, [r3, #0]
2400aec6:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400aeca:	f43f aea3 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400aece:	e7af      	b.n	2400ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400aed0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400aed4:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400aed8:	6818      	ldr	r0, [r3, #0]
2400aeda:	f010 0004 	ands.w	r0, r0, #4
2400aede:	f43f ae99 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400aee2:	681b      	ldr	r3, [r3, #0]
2400aee4:	f44f 4010 	mov.w	r0, #36864	; 0x9000
2400aee8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400aeec:	f2c0 30d0 	movt	r0, #976	; 0x3d0
2400aef0:	40d8      	lsrs	r0, r3
2400aef2:	e68f      	b.n	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400aef4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
2400aef8:	f6c5 0302 	movt	r3, #22530	; 0x5802
2400aefc:	6818      	ldr	r0, [r3, #0]
2400aefe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400af02:	f43f ae87 	beq.w	2400ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
2400af06:	e7ca      	b.n	2400ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>

2400af08 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
2400af08:	2800      	cmp	r0, #0
2400af0a:	d03c      	beq.n	2400af86 <HAL_RNG_Init+0x7e>
{
2400af0c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400af0e:	7a43      	ldrb	r3, [r0, #9]
2400af10:	4604      	mov	r4, r0
2400af12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400af16:	2b00      	cmp	r3, #0
2400af18:	d031      	beq.n	2400af7e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400af1a:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
2400af1c:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400af1e:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
2400af20:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400af22:	6813      	ldr	r3, [r2, #0]
2400af24:	f023 0320 	bic.w	r3, r3, #32
2400af28:	430b      	orrs	r3, r1
2400af2a:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
2400af2c:	6822      	ldr	r2, [r4, #0]
2400af2e:	6813      	ldr	r3, [r2, #0]
2400af30:	f043 0304 	orr.w	r3, r3, #4
2400af34:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
2400af36:	6823      	ldr	r3, [r4, #0]
2400af38:	685b      	ldr	r3, [r3, #4]
2400af3a:	0658      	lsls	r0, r3, #25
2400af3c:	d503      	bpl.n	2400af46 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400af3e:	2304      	movs	r3, #4
    return HAL_ERROR;
2400af40:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
2400af42:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
2400af44:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
2400af46:	f7fa fa1b 	bl	24005380 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400af4a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
2400af4c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400af4e:	685b      	ldr	r3, [r3, #4]
2400af50:	0759      	lsls	r1, r3, #29
2400af52:	d50e      	bpl.n	2400af72 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400af54:	f7fa fa14 	bl	24005380 <HAL_GetTick>
2400af58:	1b43      	subs	r3, r0, r5
2400af5a:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400af5c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400af5e:	d9f6      	bls.n	2400af4e <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400af60:	685a      	ldr	r2, [r3, #4]
2400af62:	0752      	lsls	r2, r2, #29
2400af64:	d5f3      	bpl.n	2400af4e <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
2400af66:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400af68:	2302      	movs	r3, #2
        return HAL_ERROR;
2400af6a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
2400af6c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400af6e:	60e3      	str	r3, [r4, #12]
}
2400af70:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400af72:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
2400af74:	2201      	movs	r2, #1
  return HAL_OK;
2400af76:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
2400af78:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400af7a:	60e3      	str	r3, [r4, #12]
}
2400af7c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400af7e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400af80:	f7f8 fe0e 	bl	24003ba0 <HAL_RNG_MspInit>
2400af84:	e7c9      	b.n	2400af1a <HAL_RNG_Init+0x12>
    return HAL_ERROR;
2400af86:	2001      	movs	r0, #1
}
2400af88:	4770      	bx	lr
2400af8a:	bf00      	nop

2400af8c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
2400af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400af8e:	7a03      	ldrb	r3, [r0, #8]
2400af90:	2b01      	cmp	r3, #1
2400af92:	d027      	beq.n	2400afe4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
2400af94:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
2400af96:	2201      	movs	r2, #1
2400af98:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
2400af9a:	4293      	cmp	r3, r2
2400af9c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400af9e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
2400afa0:	d006      	beq.n	2400afb0 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400afa2:	2304      	movs	r3, #4
    status = HAL_ERROR;
2400afa4:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400afa6:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
2400afa8:	2300      	movs	r3, #0
2400afaa:	7223      	strb	r3, [r4, #8]

  return status;
}
2400afac:	4630      	mov	r0, r6
2400afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
2400afb0:	2302      	movs	r3, #2
2400afb2:	460d      	mov	r5, r1
2400afb4:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
2400afb6:	f7fa f9e3 	bl	24005380 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400afba:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
2400afbc:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400afbe:	685a      	ldr	r2, [r3, #4]
2400afc0:	07d2      	lsls	r2, r2, #31
2400afc2:	d412      	bmi.n	2400afea <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400afc4:	f7fa f9dc 	bl	24005380 <HAL_GetTick>
2400afc8:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400afca:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400afcc:	2802      	cmp	r0, #2
2400afce:	d9f6      	bls.n	2400afbe <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400afd0:	685a      	ldr	r2, [r3, #4]
2400afd2:	f012 0201 	ands.w	r2, r2, #1
2400afd6:	d1f2      	bne.n	2400afbe <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
2400afd8:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400afda:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
2400afdc:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400afde:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400afe0:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
2400afe2:	e7e3      	b.n	2400afac <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
2400afe4:	2602      	movs	r6, #2
}
2400afe6:	4630      	mov	r0, r6
2400afe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
2400afea:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
2400afec:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400afee:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
2400aff0:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
2400aff2:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
2400aff4:	7262      	strb	r2, [r4, #9]
2400aff6:	e7d7      	b.n	2400afa8 <HAL_RNG_GenerateRandomNumber+0x1c>

2400aff8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400affa:	f645 0304 	movw	r3, #22532	; 0x5804
2400affe:	6802      	ldr	r2, [r0, #0]
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400b000:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400b002:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b006:	429a      	cmp	r2, r3
2400b008:	d02f      	beq.n	2400b06a <HAL_SAI_Init.part.0+0x72>
2400b00a:	f645 0324 	movw	r3, #22564	; 0x5824
2400b00e:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b012:	429a      	cmp	r2, r3
2400b014:	d029      	beq.n	2400b06a <HAL_SAI_Init.part.0+0x72>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400b016:	f645 4304 	movw	r3, #23556	; 0x5c04
2400b01a:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b01e:	429a      	cmp	r2, r3
2400b020:	d064      	beq.n	2400b0ec <HAL_SAI_Init.part.0+0xf4>
2400b022:	f645 4324 	movw	r3, #23588	; 0x5c24
2400b026:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b02a:	429a      	cmp	r2, r3
2400b02c:	d05e      	beq.n	2400b0ec <HAL_SAI_Init.part.0+0xf4>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400b02e:	f246 0304 	movw	r3, #24580	; 0x6004
2400b032:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b036:	429a      	cmp	r2, r3
2400b038:	f000 816b 	beq.w	2400b312 <HAL_SAI_Init.part.0+0x31a>
2400b03c:	f246 0324 	movw	r3, #24612	; 0x6024
2400b040:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b044:	429a      	cmp	r2, r3
2400b046:	f000 8164 	beq.w	2400b312 <HAL_SAI_Init.part.0+0x31a>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
2400b04a:	f245 4304 	movw	r3, #21508	; 0x5404
2400b04e:	f6c5 0300 	movt	r3, #22528	; 0x5800
2400b052:	429a      	cmp	r2, r3
2400b054:	f000 8162 	beq.w	2400b31c <HAL_SAI_Init.part.0+0x324>
2400b058:	f245 4324 	movw	r3, #21540	; 0x5424
2400b05c:	f6c5 0300 	movt	r3, #22528	; 0x5800
2400b060:	429a      	cmp	r2, r3
2400b062:	f000 815b 	beq.w	2400b31c <HAL_SAI_Init.part.0+0x324>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2400b066:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
2400b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400b06a:	f44f 45b0 	mov.w	r5, #22528	; 0x5800
2400b06e:	f2c4 0501 	movt	r5, #16385	; 0x4001
  if (hsai->State == HAL_SAI_STATE_RESET)
2400b072:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400b076:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400b07a:	2b00      	cmp	r3, #0
2400b07c:	d040      	beq.n	2400b100 <HAL_SAI_Init.part.0+0x108>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b07e:	f640 03ec 	movw	r3, #2284	; 0x8ec
2400b082:	f64e 411b 	movw	r1, #60443	; 0xec1b
2400b086:	f2c2 0300 	movt	r3, #8192	; 0x2000
2400b08a:	f2c9 51cb 	movt	r1, #38347	; 0x95cb
2400b08e:	681b      	ldr	r3, [r3, #0]
2400b090:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
2400b094:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b096:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400b098:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b09c:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400b09e:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2400b0a0:	2b00      	cmp	r3, #0
2400b0a2:	d034      	beq.n	2400b10e <HAL_SAI_Init.part.0+0x116>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400b0a4:	6822      	ldr	r2, [r4, #0]
    count--;
2400b0a6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400b0a8:	6812      	ldr	r2, [r2, #0]
2400b0aa:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
2400b0ae:	d1f7      	bne.n	2400b0a0 <HAL_SAI_Init.part.0+0xa8>
  switch (hsai->Init.SynchroExt)
2400b0b0:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
2400b0b2:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
2400b0b4:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
2400b0b6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
2400b0ba:	f000 8163 	beq.w	2400b384 <HAL_SAI_Init.part.0+0x38c>
2400b0be:	428b      	cmp	r3, r1
2400b0c0:	bf19      	ittee	ne
2400b0c2:	460e      	movne	r6, r1
2400b0c4:	2003      	movne	r0, #3
2400b0c6:	2023      	moveq	r0, #35	; 0x23
2400b0c8:	2622      	moveq	r6, #34	; 0x22
2400b0ca:	bf15      	itete	ne
2400b0cc:	2701      	movne	r7, #1
2400b0ce:	2721      	moveq	r7, #33	; 0x21
2400b0d0:	2100      	movne	r1, #0
2400b0d2:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
2400b0d4:	68a3      	ldr	r3, [r4, #8]
2400b0d6:	3b01      	subs	r3, #1
2400b0d8:	2b04      	cmp	r3, #4
2400b0da:	f200 8193 	bhi.w	2400b404 <HAL_SAI_Init.part.0+0x40c>
2400b0de:	e8df f013 	tbh	[pc, r3, lsl #1]
2400b0e2:	010d      	.short	0x010d
2400b0e4:	0114001f 	.word	0x0114001f
2400b0e8:	0110001e 	.word	0x0110001e
    SaiBaseAddress = SAI2;
2400b0ec:	f44f 45b8 	mov.w	r5, #23552	; 0x5c00
  if (hsai->State == HAL_SAI_STATE_RESET)
2400b0f0:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
2400b0f4:	f2c4 0501 	movt	r5, #16385	; 0x4001
  if (hsai->State == HAL_SAI_STATE_RESET)
2400b0f8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400b0fc:	2b00      	cmp	r3, #0
2400b0fe:	d1be      	bne.n	2400b07e <HAL_SAI_Init.part.0+0x86>
    HAL_SAI_MspInit(hsai);
2400b100:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
2400b102:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
2400b106:	f7f8 fdb7 	bl	24003c78 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
2400b10a:	6822      	ldr	r2, [r4, #0]
2400b10c:	e7b7      	b.n	2400b07e <HAL_SAI_Init.part.0+0x86>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b10e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
2400b112:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b118:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
2400b11e:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400b120:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
2400b124:	6029      	str	r1, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2400b126:	6a23      	ldr	r3, [r4, #32]
2400b128:	2b00      	cmp	r3, #0
2400b12a:	d061      	beq.n	2400b1f0 <HAL_SAI_Init.part.0+0x1f8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400b12c:	f645 0104 	movw	r1, #22532	; 0x5804
2400b130:	6823      	ldr	r3, [r4, #0]
2400b132:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b136:	428b      	cmp	r3, r1
2400b138:	f000 8138 	beq.w	2400b3ac <HAL_SAI_Init.part.0+0x3b4>
2400b13c:	f645 0124 	movw	r1, #22564	; 0x5824
2400b140:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b144:	428b      	cmp	r3, r1
2400b146:	f000 8131 	beq.w	2400b3ac <HAL_SAI_Init.part.0+0x3b4>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400b14a:	f645 4104 	movw	r1, #23556	; 0x5c04
2400b14e:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b152:	428b      	cmp	r3, r1
2400b154:	f000 813a 	beq.w	2400b3cc <HAL_SAI_Init.part.0+0x3d4>
2400b158:	f645 4124 	movw	r1, #23588	; 0x5c24
2400b15c:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b160:	428b      	cmp	r3, r1
2400b162:	f000 8133 	beq.w	2400b3cc <HAL_SAI_Init.part.0+0x3d4>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400b166:	f246 0104 	movw	r1, #24580	; 0x6004
2400b16a:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b16e:	428b      	cmp	r3, r1
2400b170:	f000 8124 	beq.w	2400b3bc <HAL_SAI_Init.part.0+0x3c4>
2400b174:	f246 0124 	movw	r1, #24612	; 0x6024
2400b178:	f2c4 0101 	movt	r1, #16385	; 0x4001
2400b17c:	428b      	cmp	r3, r1
2400b17e:	f000 811d 	beq.w	2400b3bc <HAL_SAI_Init.part.0+0x3c4>
    if (hsai->Instance == SAI4_Block_A)
2400b182:	f245 4104 	movw	r1, #21508	; 0x5404
2400b186:	f6c5 0100 	movt	r1, #22528	; 0x5800
2400b18a:	428b      	cmp	r3, r1
2400b18c:	f000 8130 	beq.w	2400b3f0 <HAL_SAI_Init.part.0+0x3f8>
    if (hsai->Instance == SAI4_Block_B)
2400b190:	f245 4124 	movw	r1, #21540	; 0x5424
2400b194:	f6c5 0100 	movt	r1, #22528	; 0x5800
2400b198:	428b      	cmp	r3, r1
2400b19a:	f000 8122 	beq.w	2400b3e2 <HAL_SAI_Init.part.0+0x3ea>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2400b19e:	69a3      	ldr	r3, [r4, #24]
2400b1a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2400b1a4:	f000 80f3 	beq.w	2400b38e <HAL_SAI_Init.part.0+0x396>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400b1a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400b1aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
2400b1ae:	6a21      	ldr	r1, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400b1b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400b1b4:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400b1b8:	bf0c      	ite	eq
2400b1ba:	2202      	moveq	r2, #2
2400b1bc:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400b1be:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400b1c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400b1c4:	0212      	lsls	r2, r2, #8
2400b1c6:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400b1ca:	f64c 42cd 	movw	r2, #52429	; 0xcccd
2400b1ce:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
2400b1d2:	fba2 0203 	umull	r0, r2, r2, r3
2400b1d6:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
2400b1d8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
2400b1dc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400b1e0:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
2400b1e2:	bf08      	it	eq
2400b1e4:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400b1e6:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
2400b1e8:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400b1ea:	d101      	bne.n	2400b1f0 <HAL_SAI_Init.part.0+0x1f8>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2400b1ec:	0852      	lsrs	r2, r2, #1
2400b1ee:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b1f0:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400b1f2:	6d27      	ldr	r7, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b1f4:	f033 0302 	bics.w	r3, r3, #2
2400b1f8:	f040 80bd 	bne.w	2400b376 <HAL_SAI_Init.part.0+0x37e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400b1fc:	3f01      	subs	r7, #1
2400b1fe:	bf18      	it	ne
2400b200:	2701      	movne	r7, #1
2400b202:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400b204:	f7fa f8d6 	bl	240053b4 <HAL_GetREVID>
2400b208:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400b20c:	6822      	ldr	r2, [r4, #0]
2400b20e:	f24c 0310 	movw	r3, #49168	; 0xc010
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400b212:	f0c0 809b 	bcc.w	2400b34c <HAL_SAI_Init.part.0+0x354>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400b216:	6811      	ldr	r1, [r2, #0]
2400b218:	f2cf 0305 	movt	r3, #61445	; 0xf005
2400b21c:	400b      	ands	r3, r1
2400b21e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400b220:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b222:	e9d4 2300 	ldrd	r2, r3, [r4]
2400b226:	430b      	orrs	r3, r1
2400b228:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b22a:	430b      	orrs	r3, r1
2400b22c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400b22e:	430b      	orrs	r3, r1
2400b230:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400b232:	430b      	orrs	r3, r1
2400b234:	6961      	ldr	r1, [r4, #20]
2400b236:	430b      	orrs	r3, r1
2400b238:	69a1      	ldr	r1, [r4, #24]
2400b23a:	430b      	orrs	r3, r1
2400b23c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400b23e:	430b      	orrs	r3, r1
2400b240:	6921      	ldr	r1, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400b242:	430b      	orrs	r3, r1
2400b244:	6811      	ldr	r1, [r2, #0]
2400b246:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400b248:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400b24a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400b24e:	4333      	orrs	r3, r6
2400b250:	433b      	orrs	r3, r7
2400b252:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400b254:	f641 73f0 	movw	r3, #8176	; 0x1ff0
2400b258:	6822      	ldr	r2, [r4, #0]
2400b25a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400b25e:	6851      	ldr	r1, [r2, #4]
2400b260:	400b      	ands	r3, r1
2400b262:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2400b264:	6b21      	ldr	r1, [r4, #48]	; 0x30
2400b266:	69e3      	ldr	r3, [r4, #28]
2400b268:	6822      	ldr	r2, [r4, #0]
2400b26a:	430b      	orrs	r3, r1
2400b26c:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400b26e:	430b      	orrs	r3, r1
2400b270:	6851      	ldr	r1, [r2, #4]
2400b272:	430b      	orrs	r3, r1
2400b274:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400b276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400b27a:	6822      	ldr	r2, [r4, #0]
2400b27c:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
2400b280:	6891      	ldr	r1, [r2, #8]
2400b282:	400b      	ands	r3, r1
2400b284:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400b286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
2400b288:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400b28a:	6821      	ldr	r1, [r4, #0]
2400b28c:	4313      	orrs	r3, r2
2400b28e:	6e22      	ldr	r2, [r4, #96]	; 0x60
2400b290:	6888      	ldr	r0, [r1, #8]
2400b292:	4313      	orrs	r3, r2
2400b294:	6d62      	ldr	r2, [r4, #84]	; 0x54
2400b296:	4303      	orrs	r3, r0
2400b298:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400b29a:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400b29e:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2400b2a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
2400b2a2:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400b2a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400b2a8:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400b2aa:	6822      	ldr	r2, [r4, #0]
2400b2ac:	68d3      	ldr	r3, [r2, #12]
2400b2ae:	4003      	ands	r3, r0
2400b2b0:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400b2b2:	6821      	ldr	r1, [r4, #0]
2400b2b4:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
2400b2b8:	68ca      	ldr	r2, [r1, #12]
2400b2ba:	4303      	orrs	r3, r0
2400b2bc:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400b2be:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400b2c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400b2c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
2400b2c6:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400b2c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400b2cc:	f645 0204 	movw	r2, #22532	; 0x5804
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400b2d0:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400b2d2:	f2c4 0201 	movt	r2, #16385	; 0x4001
2400b2d6:	6823      	ldr	r3, [r4, #0]
2400b2d8:	4293      	cmp	r3, r2
2400b2da:	d024      	beq.n	2400b326 <HAL_SAI_Init.part.0+0x32e>
2400b2dc:	f245 4204 	movw	r2, #21508	; 0x5404
2400b2e0:	f6c5 0200 	movt	r2, #22528	; 0x5800
2400b2e4:	4293      	cmp	r3, r2
2400b2e6:	d01e      	beq.n	2400b326 <HAL_SAI_Init.part.0+0x32e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400b2e8:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400b2ea:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400b2ec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
2400b2f0:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
2400b2f2:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400b2f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400b2fc:	f44f 6680 	mov.w	r6, #1024	; 0x400
2400b300:	e710      	b.n	2400b124 <HAL_SAI_Init.part.0+0x12c>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
2400b302:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400b304:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400b308:	e70c      	b.n	2400b124 <HAL_SAI_Init.part.0+0x12c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400b30a:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400b30c:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400b310:	e708      	b.n	2400b124 <HAL_SAI_Init.part.0+0x12c>
    SaiBaseAddress = SAI3;
2400b312:	f44f 45c0 	mov.w	r5, #24576	; 0x6000
2400b316:	f2c4 0501 	movt	r5, #16385	; 0x4001
2400b31a:	e6aa      	b.n	2400b072 <HAL_SAI_Init.part.0+0x7a>
    SaiBaseAddress = SAI4;
2400b31c:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
2400b320:	f6c5 0500 	movt	r5, #22528	; 0x5800
2400b324:	e6a5      	b.n	2400b072 <HAL_SAI_Init.part.0+0x7a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400b326:	6c6b      	ldr	r3, [r5, #68]	; 0x44
2400b328:	f023 0301 	bic.w	r3, r3, #1
2400b32c:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2400b32e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400b332:	2b01      	cmp	r3, #1
2400b334:	d1d8      	bne.n	2400b2e8 <HAL_SAI_Init.part.0+0x2f0>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400b336:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400b33a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400b33c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400b340:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400b342:	6c6b      	ldr	r3, [r5, #68]	; 0x44
2400b344:	f043 0301 	orr.w	r3, r3, #1
2400b348:	646b      	str	r3, [r5, #68]	; 0x44
2400b34a:	e7cd      	b.n	2400b2e8 <HAL_SAI_Init.part.0+0x2f0>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400b34c:	6811      	ldr	r1, [r2, #0]
2400b34e:	f6cf 0305 	movt	r3, #63493	; 0xf805
2400b352:	400b      	ands	r3, r1
2400b354:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400b356:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b358:	e9d4 2300 	ldrd	r2, r3, [r4]
2400b35c:	430b      	orrs	r3, r1
2400b35e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b360:	430b      	orrs	r3, r1
2400b362:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400b364:	430b      	orrs	r3, r1
2400b366:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400b368:	430b      	orrs	r3, r1
2400b36a:	6961      	ldr	r1, [r4, #20]
2400b36c:	430b      	orrs	r3, r1
2400b36e:	69a1      	ldr	r1, [r4, #24]
2400b370:	430b      	orrs	r3, r1
2400b372:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400b374:	e765      	b.n	2400b242 <HAL_SAI_Init.part.0+0x24a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400b376:	f1a7 0701 	sub.w	r7, r7, #1
2400b37a:	fab7 f787 	clz	r7, r7
2400b37e:	097f      	lsrs	r7, r7, #5
2400b380:	027f      	lsls	r7, r7, #9
2400b382:	e73f      	b.n	2400b204 <HAL_SAI_Init.part.0+0x20c>
  switch (hsai->Init.SynchroExt)
2400b384:	2013      	movs	r0, #19
2400b386:	2612      	movs	r6, #18
2400b388:	2711      	movs	r7, #17
2400b38a:	2110      	movs	r1, #16
2400b38c:	e6a2      	b.n	2400b0d4 <HAL_SAI_Init.part.0+0xdc>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400b38e:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b390:	2904      	cmp	r1, #4
2400b392:	d035      	beq.n	2400b400 <HAL_SAI_Init.part.0+0x408>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400b394:	2908      	cmp	r1, #8
2400b396:	d021      	beq.n	2400b3dc <HAL_SAI_Init.part.0+0x3e4>
        tmpframelength = hsai->FrameInit.FrameLength;
2400b398:	6d60      	ldr	r0, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400b39a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
2400b39e:	0053      	lsls	r3, r2, #1
2400b3a0:	6a22      	ldr	r2, [r4, #32]
2400b3a2:	fb00 f202 	mul.w	r2, r0, r2
2400b3a6:	fbb3 f3f2 	udiv	r3, r3, r2
2400b3aa:	e70e      	b.n	2400b1ca <HAL_SAI_Init.part.0+0x1d2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400b3ac:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b3b0:	2100      	movs	r1, #0
2400b3b2:	f7ff fb91 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400b3b6:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400b3b8:	4602      	mov	r2, r0
2400b3ba:	e6c6      	b.n	2400b14a <HAL_SAI_Init.part.0+0x152>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400b3bc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b3c0:	2100      	movs	r1, #0
2400b3c2:	f7ff fb89 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
2400b3c6:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400b3c8:	4602      	mov	r2, r0
2400b3ca:	e6da      	b.n	2400b182 <HAL_SAI_Init.part.0+0x18a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400b3cc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b3d0:	2100      	movs	r1, #0
2400b3d2:	f7ff fb81 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400b3d6:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400b3d8:	4602      	mov	r2, r0
2400b3da:	e6c4      	b.n	2400b166 <HAL_SAI_Init.part.0+0x16e>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400b3dc:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b3e0:	e7db      	b.n	2400b39a <HAL_SAI_Init.part.0+0x3a2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400b3e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b3e6:	2100      	movs	r1, #0
2400b3e8:	f7ff fb76 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
2400b3ec:	4602      	mov	r2, r0
2400b3ee:	e6d6      	b.n	2400b19e <HAL_SAI_Init.part.0+0x1a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400b3f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400b3f4:	2100      	movs	r1, #0
2400b3f6:	f7ff fb6f 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400b3fa:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400b3fc:	4602      	mov	r2, r0
2400b3fe:	e6c7      	b.n	2400b190 <HAL_SAI_Init.part.0+0x198>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400b400:	2040      	movs	r0, #64	; 0x40
2400b402:	e7ca      	b.n	2400b39a <HAL_SAI_Init.part.0+0x3a2>
      syncen_bits = 0;
2400b404:	2600      	movs	r6, #0
2400b406:	e68d      	b.n	2400b124 <HAL_SAI_Init.part.0+0x12c>

2400b408 <HAL_SAI_InitProtocol>:
  switch (protocol)
2400b408:	2902      	cmp	r1, #2
{
2400b40a:	b538      	push	{r3, r4, r5, lr}
2400b40c:	4604      	mov	r4, r0
  switch (protocol)
2400b40e:	d938      	bls.n	2400b482 <HAL_SAI_InitProtocol+0x7a>
2400b410:	1ec8      	subs	r0, r1, #3
2400b412:	2801      	cmp	r0, #1
2400b414:	d833      	bhi.n	2400b47e <HAL_SAI_InitProtocol+0x76>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400b416:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400b418:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400b41a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400b41c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400b41e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400b420:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400b422:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400b426:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b428:	6860      	ldr	r0, [r4, #4]
2400b42a:	f030 0002 	bics.w	r0, r0, #2
2400b42e:	bf0c      	ite	eq
2400b430:	2501      	moveq	r5, #1
2400b432:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
2400b434:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400b436:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400b43a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400b43c:	bf0c      	ite	eq
2400b43e:	2001      	moveq	r0, #1
2400b440:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400b442:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2400b444:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400b448:	65a0      	str	r0, [r4, #88]	; 0x58
2400b44a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400b44c:	2a03      	cmp	r2, #3
2400b44e:	d816      	bhi.n	2400b47e <HAL_SAI_InitProtocol+0x76>
2400b450:	e8df f002 	tbb	[pc, r2]
2400b454:	5f585241 	.word	0x5f585241
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400b458:	f645 0304 	movw	r3, #22532	; 0x5804
2400b45c:	6822      	ldr	r2, [r4, #0]
2400b45e:	f2c4 0301 	movt	r3, #16385	; 0x4001
2400b462:	429a      	cmp	r2, r3
2400b464:	d005      	beq.n	2400b472 <HAL_SAI_InitProtocol+0x6a>
2400b466:	f245 4304 	movw	r3, #21508	; 0x5404
2400b46a:	f6c5 0300 	movt	r3, #22528	; 0x5800
2400b46e:	429a      	cmp	r2, r3
2400b470:	d105      	bne.n	2400b47e <HAL_SAI_InitProtocol+0x76>
2400b472:	6863      	ldr	r3, [r4, #4]
2400b474:	2b01      	cmp	r3, #1
2400b476:	d102      	bne.n	2400b47e <HAL_SAI_InitProtocol+0x76>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400b478:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400b47a:	2b00      	cmp	r3, #0
2400b47c:	d037      	beq.n	2400b4ee <HAL_SAI_InitProtocol+0xe6>
}
2400b47e:	2001      	movs	r0, #1
2400b480:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400b482:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400b484:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400b486:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400b488:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
2400b48a:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b48c:	6860      	ldr	r0, [r4, #4]
2400b48e:	f030 0002 	bics.w	r0, r0, #2
2400b492:	bf14      	ite	ne
2400b494:	2001      	movne	r0, #1
2400b496:	2000      	moveq	r0, #0
2400b498:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2400b49a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b49e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400b4a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400b4a4:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
2400b4a6:	f013 0001 	ands.w	r0, r3, #1
2400b4aa:	d1e8      	bne.n	2400b47e <HAL_SAI_InitProtocol+0x76>
  if (protocol == SAI_I2S_STANDARD)
2400b4ac:	b949      	cbnz	r1, 2400b4c2 <HAL_SAI_InitProtocol+0xba>
2400b4ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400b4b2:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
2400b4b6:	2a03      	cmp	r2, #3
2400b4b8:	d8e1      	bhi.n	2400b47e <HAL_SAI_InitProtocol+0x76>
2400b4ba:	e8df f002 	tbb	[pc, r2]
2400b4be:	4655      	.short	0x4655
2400b4c0:	2c36      	.short	0x2c36
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400b4c2:	6660      	str	r0, [r4, #100]	; 0x64
2400b4c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400b4c8:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
2400b4ca:	2a03      	cmp	r2, #3
2400b4cc:	d8d7      	bhi.n	2400b47e <HAL_SAI_InitProtocol+0x76>
2400b4ce:	e8df f002 	tbb	[pc, r2]
2400b4d2:	3c4b      	.short	0x3c4b
2400b4d4:	222c      	.short	0x222c
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b4d6:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400b4d8:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400b4da:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b4dc:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400b4de:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400b4e0:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400b4e2:	f7f9 ff67 	bl	240053b4 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400b4e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400b4ea:	2b01      	cmp	r3, #1
2400b4ec:	d0b4      	beq.n	2400b458 <HAL_SAI_InitProtocol+0x50>
2400b4ee:	4620      	mov	r0, r4
}
2400b4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400b4f4:	f7ff bd80 	b.w	2400aff8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b4f8:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400b4fa:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b4fc:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400b4fe:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b500:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400b502:	e7ee      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400b504:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400b506:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b508:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400b50a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400b50c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b50e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400b510:	e7e7      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400b512:	21e0      	movs	r1, #224	; 0xe0
2400b514:	e7f7      	b.n	2400b506 <HAL_SAI_InitProtocol+0xfe>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b516:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400b518:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b51a:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b51c:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400b51e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b520:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b522:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b524:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b528:	e7db      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b52a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400b52c:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b52e:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b530:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b532:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400b536:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b538:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b53c:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b53e:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b540:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b542:	d1ce      	bne.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->SlotInit.FirstBitOffset = 8;
2400b544:	2308      	movs	r3, #8
2400b546:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400b548:	e7cb      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b54a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b54c:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b54e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400b550:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b554:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b556:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400b55a:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400b55c:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b560:	d1bf      	bne.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->SlotInit.FirstBitOffset = 16;
2400b562:	2310      	movs	r3, #16
2400b564:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400b566:	e7bc      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400b568:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b56a:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400b56c:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400b56e:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400b570:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400b572:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400b574:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400b576:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400b57a:	e7b2      	b.n	2400b4e2 <HAL_SAI_InitProtocol+0xda>

2400b57c <HAL_SAI_Transmit_DMA>:
{
2400b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400b580:	4615      	mov	r5, r2
2400b582:	f04f 0800 	mov.w	r8, #0
2400b586:	460f      	mov	r7, r1
2400b588:	4604      	mov	r4, r0
2400b58a:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
2400b58e:	f7f9 fef7 	bl	24005380 <HAL_GetTick>
2400b592:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400b596:	2f00      	cmp	r7, #0
2400b598:	d06f      	beq.n	2400b67a <HAL_SAI_Transmit_DMA+0xfe>
2400b59a:	fab5 f985 	clz	r9, r5
2400b59e:	ea4f 1959 	mov.w	r9, r9, lsr #5
2400b5a2:	2d00      	cmp	r5, #0
2400b5a4:	d069      	beq.n	2400b67a <HAL_SAI_Transmit_DMA+0xfe>
  if (hsai->State == HAL_SAI_STATE_READY)
2400b5a6:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400b5aa:	2b01      	cmp	r3, #1
2400b5ac:	fa5f fa83 	uxtb.w	sl, r3
2400b5b0:	d15e      	bne.n	2400b670 <HAL_SAI_Transmit_DMA+0xf4>
    __HAL_LOCK(hsai);
2400b5b2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400b5b6:	2b01      	cmp	r3, #1
2400b5b8:	d05a      	beq.n	2400b670 <HAL_SAI_Transmit_DMA+0xf4>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400b5ba:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400b5bc:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400b5c0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
2400b5c4:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400b5c6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400b5ca:	f64b 030d 	movw	r3, #47117	; 0xb80d
    __HAL_LOCK(hsai);
2400b5ce:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400b5d2:	f2c2 4300 	movt	r3, #9216	; 0x2400
    hsai->XferSize = Size;
2400b5d6:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400b5da:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2400b5dc:	f24b 73a9 	movw	r3, #47017	; 0xb7a9
2400b5e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
2400b5e4:	f2c2 4300 	movt	r3, #9216	; 0x2400
2400b5e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400b5ea:	f64b 0391 	movw	r3, #47249	; 0xb891
2400b5ee:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
2400b5f2:	f2c2 4300 	movt	r3, #9216	; 0x2400
2400b5f6:	64d3      	str	r3, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
2400b5f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400b5fc:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400b600:	6822      	ldr	r2, [r4, #0]
2400b602:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
2400b606:	321c      	adds	r2, #28
2400b608:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b60a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400b60e:	f7fa fb9d 	bl	24005d4c <HAL_DMA_Start_IT>
2400b612:	2800      	cmp	r0, #0
2400b614:	d13f      	bne.n	2400b696 <HAL_SAI_Transmit_DMA+0x11a>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b616:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400b618:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b61a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b61c:	d032      	beq.n	2400b684 <HAL_SAI_Transmit_DMA+0x108>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b61e:	2205      	movs	r2, #5
2400b620:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b622:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400b624:	2b01      	cmp	r3, #1
2400b626:	bf98      	it	ls
2400b628:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b62a:	6821      	ldr	r1, [r4, #0]
2400b62c:	690b      	ldr	r3, [r1, #16]
2400b62e:	4313      	orrs	r3, r2
2400b630:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400b632:	6822      	ldr	r2, [r4, #0]
2400b634:	6813      	ldr	r3, [r2, #0]
2400b636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b63a:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400b63c:	e005      	b.n	2400b64a <HAL_SAI_Transmit_DMA+0xce>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400b63e:	f7f9 fe9f 	bl	24005380 <HAL_GetTick>
2400b642:	1b83      	subs	r3, r0, r6
2400b644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400b648:	d82a      	bhi.n	2400b6a0 <HAL_SAI_Transmit_DMA+0x124>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400b64a:	6822      	ldr	r2, [r4, #0]
2400b64c:	6955      	ldr	r5, [r2, #20]
2400b64e:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400b652:	d0f4      	beq.n	2400b63e <HAL_SAI_Transmit_DMA+0xc2>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400b654:	6813      	ldr	r3, [r2, #0]
2400b656:	03db      	lsls	r3, r3, #15
2400b658:	d403      	bmi.n	2400b662 <HAL_SAI_Transmit_DMA+0xe6>
      __HAL_SAI_ENABLE(hsai);
2400b65a:	6813      	ldr	r3, [r2, #0]
2400b65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400b660:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400b662:	2300      	movs	r3, #0
    return HAL_OK;
2400b664:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
2400b666:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400b66a:	4650      	mov	r0, sl
2400b66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
2400b670:	f04f 0a02 	mov.w	sl, #2
}
2400b674:	4650      	mov	r0, sl
2400b676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
2400b67a:	f04f 0a01 	mov.w	sl, #1
}
2400b67e:	4650      	mov	r0, sl
2400b680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b684:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b688:	2a01      	cmp	r2, #1
2400b68a:	bf0b      	itete	eq
2400b68c:	2215      	moveq	r2, #21
2400b68e:	2205      	movne	r2, #5
2400b690:	2171      	moveq	r1, #113	; 0x71
2400b692:	2161      	movne	r1, #97	; 0x61
2400b694:	e7c5      	b.n	2400b622 <HAL_SAI_Transmit_DMA+0xa6>
}
2400b696:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
2400b698:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
2400b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b6a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
2400b6a4:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
2400b6a8:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
2400b6b0:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b6b2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400b6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400b6ba:	bf00      	nop

2400b6bc <HAL_SAI_Receive_DMA>:
{
2400b6bc:	2300      	movs	r3, #0
2400b6be:	f362 030f 	bfi	r3, r2, #0, #16
2400b6c2:	b570      	push	{r4, r5, r6, lr}
2400b6c4:	f362 431f 	bfi	r3, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400b6c8:	2900      	cmp	r1, #0
2400b6ca:	d05d      	beq.n	2400b788 <HAL_SAI_Receive_DMA+0xcc>
2400b6cc:	fab2 f582 	clz	r5, r2
2400b6d0:	096d      	lsrs	r5, r5, #5
2400b6d2:	2a00      	cmp	r2, #0
2400b6d4:	d058      	beq.n	2400b788 <HAL_SAI_Receive_DMA+0xcc>
  if (hsai->State == HAL_SAI_STATE_READY)
2400b6d6:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
2400b6da:	4604      	mov	r4, r0
2400b6dc:	2a01      	cmp	r2, #1
2400b6de:	b2d6      	uxtb	r6, r2
2400b6e0:	d14f      	bne.n	2400b782 <HAL_SAI_Receive_DMA+0xc6>
    __HAL_LOCK(hsai);
2400b6e2:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
2400b6e6:	2a01      	cmp	r2, #1
2400b6e8:	d04b      	beq.n	2400b782 <HAL_SAI_Receive_DMA+0xc6>
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400b6ea:	f64b 0285 	movw	r2, #47237	; 0xb885
    hsai->pBuffPtr = pData;
2400b6ee:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400b6f0:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400b6f4:	2022      	movs	r0, #34	; 0x22
    hsai->XferSize = Size;
2400b6f6:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400b6f8:	f2c2 4200 	movt	r2, #9216	; 0x2400
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400b6fc:	f64b 031d 	movw	r3, #47133	; 0xb81d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400b700:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    __HAL_LOCK(hsai);
2400b704:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400b708:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400b70c:	f2c2 4300 	movt	r3, #9216	; 0x2400
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400b710:	640a      	str	r2, [r1, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400b712:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400b716:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400b718:	f64b 0391 	movw	r3, #47249	; 0xb891
2400b71c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400b720:	f2c2 4300 	movt	r3, #9216	; 0x2400
2400b724:	64d3      	str	r3, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
2400b726:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b72a:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400b72c:	6821      	ldr	r1, [r4, #0]
2400b72e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
2400b732:	311c      	adds	r1, #28
2400b734:	6fa2      	ldr	r2, [r4, #120]	; 0x78
2400b736:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400b73a:	f7fa fb07 	bl	24005d4c <HAL_DMA_Start_IT>
2400b73e:	bb30      	cbnz	r0, 2400b78e <HAL_SAI_Receive_DMA+0xd2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b740:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400b742:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b744:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b746:	d026      	beq.n	2400b796 <HAL_SAI_Receive_DMA+0xda>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b748:	2205      	movs	r2, #5
2400b74a:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b74c:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b74e:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400b750:	2b01      	cmp	r3, #1
2400b752:	bf98      	it	ls
2400b754:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b756:	690b      	ldr	r3, [r1, #16]
2400b758:	4313      	orrs	r3, r2
2400b75a:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400b75c:	6822      	ldr	r2, [r4, #0]
2400b75e:	6813      	ldr	r3, [r2, #0]
2400b760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b764:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400b766:	6823      	ldr	r3, [r4, #0]
2400b768:	681a      	ldr	r2, [r3, #0]
2400b76a:	03d2      	lsls	r2, r2, #15
2400b76c:	d403      	bmi.n	2400b776 <HAL_SAI_Receive_DMA+0xba>
      __HAL_SAI_ENABLE(hsai);
2400b76e:	681a      	ldr	r2, [r3, #0]
2400b770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400b774:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400b776:	2300      	movs	r3, #0
    return HAL_OK;
2400b778:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400b77a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400b77e:	4630      	mov	r0, r6
2400b780:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
2400b782:	2602      	movs	r6, #2
}
2400b784:	4630      	mov	r0, r6
2400b786:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
2400b788:	2601      	movs	r6, #1
}
2400b78a:	4630      	mov	r0, r6
2400b78c:	bd70      	pop	{r4, r5, r6, pc}
2400b78e:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400b790:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400b794:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b796:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b79a:	2a01      	cmp	r2, #1
2400b79c:	bf0b      	itete	eq
2400b79e:	2215      	moveq	r2, #21
2400b7a0:	2205      	movne	r2, #5
2400b7a2:	2071      	moveq	r0, #113	; 0x71
2400b7a4:	2061      	movne	r0, #97	; 0x61
2400b7a6:	e7d1      	b.n	2400b74c <HAL_SAI_Receive_DMA+0x90>

2400b7a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400b7a8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400b7aa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b7ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400b7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b7b2:	d01b      	beq.n	2400b7ec <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400b7b4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400b7b6:	2300      	movs	r3, #0
2400b7b8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400b7bc:	6813      	ldr	r3, [r2, #0]
2400b7be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400b7c2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b7c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400b7c6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b7c8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b7ca:	d012      	beq.n	2400b7f2 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b7cc:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400b7d0:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b7d4:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b7d6:	3b02      	subs	r3, #2
2400b7d8:	2b01      	cmp	r3, #1
2400b7da:	bf98      	it	ls
2400b7dc:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b7de:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400b7e0:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b7e4:	4013      	ands	r3, r2
2400b7e6:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400b7e8:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400b7ec:	f022 fde0 	bl	2402e3b0 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400b7f0:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b7f2:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b7f6:	2a01      	cmp	r2, #1
2400b7f8:	bf0b      	itete	eq
2400b7fa:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400b7fe:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400b802:	f06f 0215 	mvneq.w	r2, #21
2400b806:	f06f 0205 	mvnne.w	r2, #5
2400b80a:	e7e3      	b.n	2400b7d4 <SAI_DMATxCplt+0x2c>

2400b80c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400b80c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400b80e:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b810:	f022 fdc6 	bl	2402e3a0 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400b814:	bd08      	pop	{r3, pc}
2400b816:	bf00      	nop

2400b818 <HAL_SAI_RxCpltCallback>:
2400b818:	4770      	bx	lr
2400b81a:	bf00      	nop

2400b81c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400b81c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400b81e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b820:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400b822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b826:	d01b      	beq.n	2400b860 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400b828:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400b82a:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400b82c:	6813      	ldr	r3, [r2, #0]
2400b82e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400b832:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b834:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
2400b836:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b83a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b83c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b83e:	d012      	beq.n	2400b866 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b840:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400b844:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b848:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400b84a:	3b02      	subs	r3, #2
2400b84c:	2b01      	cmp	r3, #1
2400b84e:	bf98      	it	ls
2400b850:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b852:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400b854:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400b858:	4013      	ands	r3, r2
2400b85a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400b85c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400b860:	f7ff ffda 	bl	2400b818 <HAL_SAI_RxCpltCallback>
#endif
}
2400b864:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400b866:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400b86a:	2a01      	cmp	r2, #1
2400b86c:	bf0b      	itete	eq
2400b86e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400b872:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400b876:	f06f 0215 	mvneq.w	r2, #21
2400b87a:	f06f 0205 	mvnne.w	r2, #5
2400b87e:	e7e3      	b.n	2400b848 <SAI_DMARxCplt+0x2c>

2400b880 <HAL_SAI_RxHalfCpltCallback>:
2400b880:	4770      	bx	lr
2400b882:	bf00      	nop

2400b884 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400b884:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400b886:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b888:	f7ff fffa 	bl	2400b880 <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400b88c:	bd08      	pop	{r3, pc}
2400b88e:	bf00      	nop

2400b890 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400b890:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b892:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400b894:	f7fb ffb0 	bl	240077f8 <HAL_DMA_GetError>
2400b898:	2802      	cmp	r0, #2
2400b89a:	d02b      	beq.n	2400b8f4 <SAI_DMAError+0x64>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400b89c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8a0:	f640 03ec 	movw	r3, #2284	; 0x8ec

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400b8a4:	6820      	ldr	r0, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8a6:	f64e 421b 	movw	r2, #60443	; 0xec1b
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400b8aa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
2400b8b2:	f2c9 52cb 	movt	r2, #38347	; 0x95cb
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400b8b6:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400b8ba:	6801      	ldr	r1, [r0, #0]
2400b8bc:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
2400b8c0:	6001      	str	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8c2:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
2400b8c4:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8c6:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
2400b8ca:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8cc:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400b8ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400b8d2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400b8d4:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400b8d6:	b173      	cbz	r3, 2400b8f6 <SAI_DMAError+0x66>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400b8d8:	6822      	ldr	r2, [r4, #0]
    count--;
2400b8da:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400b8dc:	6812      	ldr	r2, [r2, #0]
2400b8de:	03d2      	lsls	r2, r2, #15
2400b8e0:	d4f9      	bmi.n	2400b8d6 <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400b8e2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400b8e4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400b8e6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400b8e8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400b8ec:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400b8f0:	f022 fd82 	bl	2402e3f8 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
2400b8f4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400b8f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400b8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b8fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400b902:	e7ee      	b.n	2400b8e2 <SAI_DMAError+0x52>

2400b904 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400b908:	4604      	mov	r4, r0
2400b90a:	b096      	sub	sp, #88	; 0x58
2400b90c:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400b90e:	f7f9 fd37 	bl	24005380 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b912:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400b914:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b916:	6820      	ldr	r0, [r4, #0]
2400b918:	f001 fd1e 	bl	2400d358 <SDMMC_GetResponse>
2400b91c:	0181      	lsls	r1, r0, #6
2400b91e:	d460      	bmi.n	2400b9e2 <HAL_SD_GetCardStatus.part.0+0xde>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400b920:	2140      	movs	r1, #64	; 0x40
2400b922:	6820      	ldr	r0, [r4, #0]
2400b924:	f001 fd32 	bl	2400d38c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b928:	b318      	cbz	r0, 2400b972 <HAL_SD_GetCardStatus.part.0+0x6e>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400b92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b92c:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b92e:	6823      	ldr	r3, [r4, #0]
2400b930:	f640 71ff 	movw	r1, #4095	; 0xfff
    hsd->State = HAL_SD_STATE_READY;
2400b934:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b936:	f6c1 71e0 	movt	r1, #8160	; 0x1fe0
    status = HAL_ERROR;
2400b93a:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b93c:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b93e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b940:	4303      	orrs	r3, r0
2400b942:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b944:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b948:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b94c:	6820      	ldr	r0, [r4, #0]
2400b94e:	f001 fd1d 	bl	2400d38c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b952:	b150      	cbz	r0, 2400b96a <HAL_SD_GetCardStatus.part.0+0x66>
    hsd->State = HAL_SD_STATE_READY;
2400b954:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b956:	f640 72ff 	movw	r2, #4095	; 0xfff
2400b95a:	6821      	ldr	r1, [r4, #0]
2400b95c:	f6c1 72e0 	movt	r2, #8160	; 0x1fe0
    status = HAL_ERROR;
2400b960:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b962:	638a      	str	r2, [r1, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400b964:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b966:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400b96a:	4630      	mov	r0, r6
2400b96c:	b016      	add	sp, #88	; 0x58
2400b96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b972:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b974:	6820      	ldr	r0, [r4, #0]
2400b976:	0409      	lsls	r1, r1, #16
2400b978:	f002 fab8 	bl	2400deec <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b97c:	2800      	cmp	r0, #0
2400b97e:	d1d4      	bne.n	2400b92a <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
2400b980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400b984:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400b986:	4669      	mov	r1, sp
2400b988:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
2400b98a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400b98e:	2260      	movs	r2, #96	; 0x60
2400b990:	2302      	movs	r3, #2
2400b992:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400b996:	2200      	movs	r2, #0
2400b998:	2301      	movs	r3, #1
2400b99a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400b99e:	f001 fcdf 	bl	2400d360 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400b9a2:	6820      	ldr	r0, [r4, #0]
2400b9a4:	f002 fe94 	bl	2400e6d0 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b9a8:	2800      	cmp	r0, #0
2400b9aa:	d1be      	bne.n	2400b92a <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
2400b9ac:	ae06      	add	r6, sp, #24
2400b9ae:	e004      	b.n	2400b9ba <HAL_SD_GetCardStatus.part.0+0xb6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400b9b0:	f7f9 fce6 	bl	24005380 <HAL_GetTick>
2400b9b4:	1bc0      	subs	r0, r0, r7
2400b9b6:	3001      	adds	r0, #1
2400b9b8:	d017      	beq.n	2400b9ea <HAL_SD_GetCardStatus.part.0+0xe6>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400b9ba:	6823      	ldr	r3, [r4, #0]
2400b9bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400b9be:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400b9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400b9c4:	d114      	bne.n	2400b9f0 <HAL_SD_GetCardStatus.part.0+0xec>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400b9c6:	0412      	lsls	r2, r2, #16
2400b9c8:	d5f2      	bpl.n	2400b9b0 <HAL_SD_GetCardStatus.part.0+0xac>
2400b9ca:	f106 0820 	add.w	r8, r6, #32
2400b9ce:	e000      	b.n	2400b9d2 <HAL_SD_GetCardStatus.part.0+0xce>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400b9d0:	6823      	ldr	r3, [r4, #0]
2400b9d2:	4618      	mov	r0, r3
2400b9d4:	f001 fcaa 	bl	2400d32c <SDMMC_ReadFIFO>
2400b9d8:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400b9dc:	4546      	cmp	r6, r8
2400b9de:	d1f7      	bne.n	2400b9d0 <HAL_SD_GetCardStatus.part.0+0xcc>
2400b9e0:	e7e6      	b.n	2400b9b0 <HAL_SD_GetCardStatus.part.0+0xac>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400b9e2:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400b9e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b9e8:	e7a2      	b.n	2400b930 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
2400b9ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400b9ee:	e79e      	b.n	2400b92e <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400b9f0:	0710      	lsls	r0, r2, #28
2400b9f2:	d44c      	bmi.n	2400ba8e <HAL_SD_GetCardStatus.part.0+0x18a>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400b9f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400b9f6:	0791      	lsls	r1, r2, #30
2400b9f8:	d44b      	bmi.n	2400ba92 <HAL_SD_GetCardStatus.part.0+0x18e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400b9fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400b9fc:	0692      	lsls	r2, r2, #26
2400b9fe:	d50a      	bpl.n	2400ba16 <HAL_SD_GetCardStatus.part.0+0x112>
2400ba00:	e049      	b.n	2400ba96 <HAL_SD_GetCardStatus.part.0+0x192>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400ba02:	f001 fc93 	bl	2400d32c <SDMMC_ReadFIFO>
2400ba06:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400ba0a:	f7f9 fcb9 	bl	24005380 <HAL_GetTick>
2400ba0e:	1bc0      	subs	r0, r0, r7
2400ba10:	3001      	adds	r0, #1
2400ba12:	d0ea      	beq.n	2400b9ea <HAL_SD_GetCardStatus.part.0+0xe6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ba14:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400ba16:	6b59      	ldr	r1, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400ba18:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400ba1a:	f411 5180 	ands.w	r1, r1, #4096	; 0x1000
2400ba1e:	d1f0      	bne.n	2400ba02 <HAL_SD_GetCardStatus.part.0+0xfe>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ba20:	f640 723a 	movw	r2, #3898	; 0xf3a
  HAL_StatusTypeDef status = HAL_OK;
2400ba24:	460e      	mov	r6, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ba26:	f6c1 0200 	movt	r2, #6144	; 0x1800
2400ba2a:	639a      	str	r2, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400ba2c:	9b06      	ldr	r3, [sp, #24]
2400ba2e:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400ba32:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400ba34:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400ba38:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400ba3a:	0a1a      	lsrs	r2, r3, #8
2400ba3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400ba40:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400ba44:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400ba48:	b292      	uxth	r2, r2
2400ba4a:	ba09      	rev	r1, r1
2400ba4c:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ba4e:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400ba50:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ba52:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ba54:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ba58:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ba5c:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ba5e:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ba62:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ba64:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400ba68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400ba6c:	b2d0      	uxtb	r0, r2
2400ba6e:	4303      	orrs	r3, r0
2400ba70:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400ba72:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400ba76:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400ba78:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400ba7c:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ba7e:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ba82:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ba86:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ba88:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ba8a:	74a9      	strb	r1, [r5, #18]
2400ba8c:	e75c      	b.n	2400b948 <HAL_SD_GetCardStatus.part.0+0x44>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ba8e:	2008      	movs	r0, #8
2400ba90:	e74e      	b.n	2400b930 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ba92:	2002      	movs	r0, #2
2400ba94:	e74c      	b.n	2400b930 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
2400ba96:	2020      	movs	r0, #32
2400ba98:	e74a      	b.n	2400b930 <HAL_SD_GetCardStatus.part.0+0x2c>
2400ba9a:	bf00      	nop

2400ba9c <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
2400ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400baa0:	4605      	mov	r5, r0
2400baa2:	b086      	sub	sp, #24
2400baa4:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400baa6:	f7f9 fc6b 	bl	24005380 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400baaa:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400baac:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400baae:	6828      	ldr	r0, [r5, #0]
2400bab0:	f001 fc6c 	bl	2400d38c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400bab4:	4604      	mov	r4, r0
2400bab6:	b118      	cbz	r0, 2400bac0 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400bab8:	4620      	mov	r0, r4
2400baba:	b006      	add	sp, #24
2400babc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400bac0:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400bac2:	6828      	ldr	r0, [r5, #0]
2400bac4:	0409      	lsls	r1, r1, #16
2400bac6:	f002 fa11 	bl	2400deec <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400baca:	4604      	mov	r4, r0
2400bacc:	2800      	cmp	r0, #0
2400bace:	d1f3      	bne.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
2400bad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400bad4:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bad6:	4669      	mov	r1, sp
2400bad8:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
2400bada:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400bade:	2230      	movs	r2, #48	; 0x30
2400bae0:	2302      	movs	r3, #2
2400bae2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400bae6:	2200      	movs	r2, #0
2400bae8:	2301      	movs	r3, #1
2400baea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400baee:	f001 fc37 	bl	2400d360 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400baf2:	6828      	ldr	r0, [r5, #0]
2400baf4:	f002 fb9e 	bl	2400e234 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400baf8:	4604      	mov	r4, r0
2400bafa:	2800      	cmp	r0, #0
2400bafc:	d1dc      	bne.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400bafe:	4682      	mov	sl, r0
2400bb00:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400bb02:	f240 582a 	movw	r8, #1322	; 0x52a
2400bb06:	e004      	b.n	2400bb12 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400bb08:	f7f9 fc3a 	bl	24005380 <HAL_GetTick>
2400bb0c:	1b83      	subs	r3, r0, r6
2400bb0e:	3301      	adds	r3, #1
2400bb10:	d027      	beq.n	2400bb62 <SD_FindSCR.constprop.0+0xc6>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400bb12:	6828      	ldr	r0, [r5, #0]
2400bb14:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb16:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400bb1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400bb1c:	d10c      	bne.n	2400bb38 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400bb1e:	0319      	lsls	r1, r3, #12
2400bb20:	d4f2      	bmi.n	2400bb08 <SD_FindSCR.constprop.0+0x6c>
2400bb22:	2c00      	cmp	r4, #0
2400bb24:	d1f0      	bne.n	2400bb08 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400bb26:	f001 fc01 	bl	2400d32c <SDMMC_ReadFIFO>
2400bb2a:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400bb2c:	6828      	ldr	r0, [r5, #0]
      index++;
2400bb2e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400bb30:	f001 fbfc 	bl	2400d32c <SDMMC_ReadFIFO>
2400bb34:	4682      	mov	sl, r0
      index++;
2400bb36:	e7e7      	b.n	2400bb08 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400bb38:	071a      	lsls	r2, r3, #28
2400bb3a:	d419      	bmi.n	2400bb70 <SD_FindSCR.constprop.0+0xd4>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400bb3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb3e:	079b      	lsls	r3, r3, #30
2400bb40:	d412      	bmi.n	2400bb68 <SD_FindSCR.constprop.0+0xcc>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400bb42:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400bb44:	f014 0420 	ands.w	r4, r4, #32
2400bb48:	d116      	bne.n	2400bb78 <SD_FindSCR.constprop.0+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400bb4a:	f640 713a 	movw	r1, #3898	; 0xf3a
2400bb4e:	fa9a f28a 	rev.w	r2, sl
2400bb52:	fa99 f389 	rev.w	r3, r9
2400bb56:	f6c1 0100 	movt	r1, #6144	; 0x1800
2400bb5a:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400bb5c:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400bb60:	e7aa      	b.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400bb62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400bb66:	e7a7      	b.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400bb68:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400bb6a:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400bb6c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400bb6e:	e7a3      	b.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400bb70:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400bb72:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400bb74:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400bb76:	e79f      	b.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400bb78:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400bb7a:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400bb7c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400bb7e:	e79b      	b.n	2400bab8 <SD_FindSCR.constprop.0+0x1c>

2400bb80 <HAL_SD_ReadBlocks>:
{
2400bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400bb84:	460d      	mov	r5, r1
2400bb86:	b087      	sub	sp, #28
2400bb88:	4604      	mov	r4, r0
2400bb8a:	4692      	mov	sl, r2
2400bb8c:	461f      	mov	r7, r3
2400bb8e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
2400bb92:	f7f9 fbf5 	bl	24005380 <HAL_GetTick>
  if (NULL == pData)
2400bb96:	2d00      	cmp	r5, #0
2400bb98:	d069      	beq.n	2400bc6e <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
2400bb9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400bb9e:	2b01      	cmp	r3, #1
2400bba0:	fa5f f983 	uxtb.w	r9, r3
2400bba4:	d152      	bne.n	2400bc4c <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bba6:	eb0a 0307 	add.w	r3, sl, r7
2400bbaa:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400bbac:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bbae:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400bbb0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bbb2:	d866      	bhi.n	2400bc82 <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
2400bbb4:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400bbb6:	f04f 0b02 	mov.w	fp, #2
2400bbba:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400bbbc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400bbc0:	6823      	ldr	r3, [r4, #0]
2400bbc2:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bbc4:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400bbc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bbc8:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400bbca:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400bbcc:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400bbd0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400bbd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400bbd8:	bf18      	it	ne
2400bbda:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400bbde:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400bbe0:	027b      	lsls	r3, r7, #9
2400bbe2:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400bbe4:	2390      	movs	r3, #144	; 0x90
2400bbe6:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bbea:	f001 fbb9 	bl	2400d360 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400bbee:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400bbf0:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400bbf2:	68d3      	ldr	r3, [r2, #12]
2400bbf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bbf8:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400bbfa:	d931      	bls.n	2400bc60 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400bbfc:	4651      	mov	r1, sl
2400bbfe:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400bc00:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400bc04:	f001 fd26 	bl	2400d654 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400bc08:	2800      	cmp	r0, #0
2400bc0a:	d142      	bne.n	2400bc92 <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
2400bc0c:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400bc10:	e004      	b.n	2400bc1c <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400bc12:	f7f9 fbb5 	bl	24005380 <HAL_GetTick>
2400bc16:	1b80      	subs	r0, r0, r6
2400bc18:	4540      	cmp	r0, r8
2400bc1a:	d26d      	bcs.n	2400bcf8 <HAL_SD_ReadBlocks+0x178>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400bc1c:	6820      	ldr	r0, [r4, #0]
2400bc1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bc20:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400bc24:	d144      	bne.n	2400bcb0 <HAL_SD_ReadBlocks+0x130>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400bc26:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bc28:	041a      	lsls	r2, r3, #16
2400bc2a:	d5f2      	bpl.n	2400bc12 <HAL_SD_ReadBlocks+0x92>
2400bc2c:	f1bb 0f1f 	cmp.w	fp, #31
2400bc30:	d9ef      	bls.n	2400bc12 <HAL_SD_ReadBlocks+0x92>
2400bc32:	f105 0a20 	add.w	sl, r5, #32
2400bc36:	e000      	b.n	2400bc3a <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400bc38:	6820      	ldr	r0, [r4, #0]
2400bc3a:	f001 fb77 	bl	2400d32c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
2400bc3e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
2400bc42:	45aa      	cmp	sl, r5
2400bc44:	d1f8      	bne.n	2400bc38 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
2400bc46:	f1ab 0b20 	sub.w	fp, fp, #32
2400bc4a:	e7e2      	b.n	2400bc12 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400bc4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400bc4e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400bc52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400bc56:	6363      	str	r3, [r4, #52]	; 0x34
}
2400bc58:	4648      	mov	r0, r9
2400bc5a:	b007      	add	sp, #28
2400bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400bc60:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400bc62:	4651      	mov	r1, sl
2400bc64:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400bc66:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400bc68:	f001 fc42 	bl	2400d4f0 <SDMMC_CmdReadSingleBlock>
2400bc6c:	e7cc      	b.n	2400bc08 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400bc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400bc70:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400bc74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400bc78:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400bc7a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400bc7c:	b007      	add	sp, #28
2400bc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400bc82:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400bc84:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400bc86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400bc8a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400bc8c:	b007      	add	sp, #28
2400bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bc92:	f640 73ff 	movw	r3, #4095	; 0xfff
2400bc96:	6822      	ldr	r2, [r4, #0]
2400bc98:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400bc9c:	6393      	str	r3, [r2, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400bc9e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400bca0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bca2:	4303      	orrs	r3, r0
2400bca4:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400bca6:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400bca8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400bcac:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400bcae:	e7d3      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400bcb0:	68c3      	ldr	r3, [r0, #12]
2400bcb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400bcb6:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400bcb8:	6820      	ldr	r0, [r4, #0]
2400bcba:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcbc:	05db      	lsls	r3, r3, #23
2400bcbe:	d501      	bpl.n	2400bcc4 <HAL_SD_ReadBlocks+0x144>
2400bcc0:	2f01      	cmp	r7, #1
2400bcc2:	d82b      	bhi.n	2400bd1c <HAL_SD_ReadBlocks+0x19c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400bcc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcc6:	f013 0308 	ands.w	r3, r3, #8
2400bcca:	d13e      	bne.n	2400bd4a <HAL_SD_ReadBlocks+0x1ca>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400bccc:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400bcce:	f012 0202 	ands.w	r2, r2, #2
2400bcd2:	d12c      	bne.n	2400bd2e <HAL_SD_ReadBlocks+0x1ae>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400bcd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcd6:	f013 0320 	ands.w	r3, r3, #32
2400bcda:	d045      	beq.n	2400bd68 <HAL_SD_ReadBlocks+0x1e8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bcdc:	f640 73ff 	movw	r3, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400bce0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bce2:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400bce6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400bce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bcea:	f043 0320 	orr.w	r3, r3, #32
2400bcee:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400bcf0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400bcf4:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bcf6:	e7af      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bcf8:	f640 73ff 	movw	r3, #4095	; 0xfff
2400bcfc:	6820      	ldr	r0, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400bcfe:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400bd00:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd02:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
        return HAL_TIMEOUT;
2400bd06:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd0a:	6383      	str	r3, [r0, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400bd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bd0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400bd12:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400bd14:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400bd18:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400bd1a:	e79d      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400bd1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400bd1e:	2b03      	cmp	r3, #3
2400bd20:	d0d0      	beq.n	2400bcc4 <HAL_SD_ReadBlocks+0x144>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400bd22:	f001 fead 	bl	2400da80 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400bd26:	2800      	cmp	r0, #0
2400bd28:	d1b3      	bne.n	2400bc92 <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd2a:	6820      	ldr	r0, [r4, #0]
2400bd2c:	e7ca      	b.n	2400bcc4 <HAL_SD_ReadBlocks+0x144>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd2e:	f640 72ff 	movw	r2, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400bd32:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd34:	f6c1 72e0 	movt	r2, #8160	; 0x1fe0
2400bd38:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400bd3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400bd3c:	f042 0202 	orr.w	r2, r2, #2
2400bd40:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400bd42:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400bd46:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bd48:	e786      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd4a:	f640 73ff 	movw	r3, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400bd4e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bd50:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400bd54:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400bd56:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bd58:	f043 0308 	orr.w	r3, r3, #8
2400bd5c:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400bd5e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400bd60:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400bd64:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bd66:	e777      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400bd68:	f640 723a 	movw	r2, #3898	; 0xf3a
    hsd->State = HAL_SD_STATE_READY;
2400bd6c:	2101      	movs	r1, #1
    return HAL_OK;
2400bd6e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400bd70:	f6c1 0200 	movt	r2, #6144	; 0x1800
2400bd74:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400bd76:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    return HAL_OK;
2400bd7a:	e76d      	b.n	2400bc58 <HAL_SD_ReadBlocks+0xd8>

2400bd7c <HAL_SD_WriteBlocks>:
{
2400bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400bd80:	460d      	mov	r5, r1
2400bd82:	b089      	sub	sp, #36	; 0x24
2400bd84:	4604      	mov	r4, r0
2400bd86:	4692      	mov	sl, r2
2400bd88:	461f      	mov	r7, r3
2400bd8a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400bd8e:	f7f9 faf7 	bl	24005380 <HAL_GetTick>
  if (NULL == pData)
2400bd92:	2d00      	cmp	r5, #0
2400bd94:	d068      	beq.n	2400be68 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
2400bd96:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400bd9a:	2b01      	cmp	r3, #1
2400bd9c:	fa5f f983 	uxtb.w	r9, r3
2400bda0:	d152      	bne.n	2400be48 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bda2:	eb0a 0307 	add.w	r3, sl, r7
2400bda6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400bda8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bdaa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400bdac:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400bdae:	d865      	bhi.n	2400be7c <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
2400bdb0:	2303      	movs	r3, #3
2400bdb2:	4606      	mov	r6, r0
2400bdb4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400bdb8:	6823      	ldr	r3, [r4, #0]
2400bdba:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bdbc:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400bdbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bdc0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400bdc2:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400bdc4:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400bdc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400bdcc:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400bdce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400bdd2:	bf18      	it	ne
2400bdd4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400bdd8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400bdda:	027b      	lsls	r3, r7, #9
2400bddc:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400bdde:	2390      	movs	r3, #144	; 0x90
2400bde0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400bde2:	f001 fabd 	bl	2400d360 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400bde6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400bde8:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400bdea:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400bdec:	68d3      	ldr	r3, [r2, #12]
2400bdee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bdf2:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400bdf4:	d932      	bls.n	2400be5c <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400bdf6:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400bdf8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400bdfa:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400bdfc:	f001 fd8e 	bl	2400d91c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400be00:	2800      	cmp	r0, #0
2400be02:	d143      	bne.n	2400be8c <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
2400be04:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400be08:	e004      	b.n	2400be14 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400be0a:	f7f9 fab9 	bl	24005380 <HAL_GetTick>
2400be0e:	1b80      	subs	r0, r0, r6
2400be10:	4540      	cmp	r0, r8
2400be12:	d26e      	bcs.n	2400bef2 <HAL_SD_WriteBlocks+0x176>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400be14:	6820      	ldr	r0, [r4, #0]
2400be16:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400be18:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400be1c:	d145      	bne.n	2400beaa <HAL_SD_WriteBlocks+0x12e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400be1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400be20:	045a      	lsls	r2, r3, #17
2400be22:	d5f2      	bpl.n	2400be0a <HAL_SD_WriteBlocks+0x8e>
2400be24:	f1bb 0f1f 	cmp.w	fp, #31
2400be28:	d9ef      	bls.n	2400be0a <HAL_SD_WriteBlocks+0x8e>
2400be2a:	f105 0a20 	add.w	sl, r5, #32
2400be2e:	e000      	b.n	2400be32 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400be30:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400be32:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400be36:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400be38:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400be3a:	f001 fa7b 	bl	2400d334 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400be3e:	4555      	cmp	r5, sl
2400be40:	d1f6      	bne.n	2400be30 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
2400be42:	f1ab 0b20 	sub.w	fp, fp, #32
2400be46:	e7e0      	b.n	2400be0a <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400be48:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400be4a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400be4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400be52:	6363      	str	r3, [r4, #52]	; 0x34
}
2400be54:	4648      	mov	r0, r9
2400be56:	b009      	add	sp, #36	; 0x24
2400be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400be5c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400be5e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400be60:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400be62:	f001 fca9 	bl	2400d7b8 <SDMMC_CmdWriteSingleBlock>
2400be66:	e7cb      	b.n	2400be00 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400be68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400be6a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400be6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400be72:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400be74:	6363      	str	r3, [r4, #52]	; 0x34
}
2400be76:	b009      	add	sp, #36	; 0x24
2400be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400be7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400be7e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400be80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400be84:	6363      	str	r3, [r4, #52]	; 0x34
}
2400be86:	b009      	add	sp, #36	; 0x24
2400be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400be8c:	f640 73ff 	movw	r3, #4095	; 0xfff
2400be90:	6822      	ldr	r2, [r4, #0]
2400be92:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400be96:	6393      	str	r3, [r2, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400be98:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400be9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400be9c:	4303      	orrs	r3, r0
2400be9e:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400bea0:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400bea2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400bea6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400bea8:	e7d4      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400beaa:	68c3      	ldr	r3, [r0, #12]
2400beac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400beb0:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400beb2:	6820      	ldr	r0, [r4, #0]
2400beb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400beb6:	05db      	lsls	r3, r3, #23
2400beb8:	d501      	bpl.n	2400bebe <HAL_SD_WriteBlocks+0x142>
2400beba:	2f01      	cmp	r7, #1
2400bebc:	d829      	bhi.n	2400bf12 <HAL_SD_WriteBlocks+0x196>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400bebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bec0:	f013 0308 	ands.w	r3, r3, #8
2400bec4:	d13c      	bne.n	2400bf40 <HAL_SD_WriteBlocks+0x1c4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400bec6:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400bec8:	f012 0202 	ands.w	r2, r2, #2
2400becc:	d12a      	bne.n	2400bf24 <HAL_SD_WriteBlocks+0x1a8>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400bece:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bed0:	f013 0310 	ands.w	r3, r3, #16
2400bed4:	d043      	beq.n	2400bf5e <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bed6:	f640 73ff 	movw	r3, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400beda:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bedc:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400bee0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400bee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bee4:	f043 0310 	orr.w	r3, r3, #16
2400bee8:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400beea:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400beee:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bef0:	e7b0      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bef2:	f640 73ff 	movw	r3, #4095	; 0xfff
2400bef6:	6820      	ldr	r0, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400bef8:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400befa:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400befc:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
        return HAL_TIMEOUT;
2400bf00:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf04:	6383      	str	r3, [r0, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
2400bf06:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bf08:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400bf0a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400bf0e:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400bf10:	e7a0      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400bf12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400bf14:	2b03      	cmp	r3, #3
2400bf16:	d0d2      	beq.n	2400bebe <HAL_SD_WriteBlocks+0x142>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400bf18:	f001 fdb2 	bl	2400da80 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400bf1c:	2800      	cmp	r0, #0
2400bf1e:	d1b5      	bne.n	2400be8c <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf20:	6820      	ldr	r0, [r4, #0]
2400bf22:	e7cc      	b.n	2400bebe <HAL_SD_WriteBlocks+0x142>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf24:	f640 72ff 	movw	r2, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400bf28:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf2a:	f6c1 72e0 	movt	r2, #8160	; 0x1fe0
2400bf2e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400bf30:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400bf32:	f042 0202 	orr.w	r2, r2, #2
2400bf36:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400bf38:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400bf3c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bf3e:	e789      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf40:	f640 73ff 	movw	r3, #4095	; 0xfff
      hsd->State = HAL_SD_STATE_READY;
2400bf44:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400bf46:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400bf4a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400bf4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bf4e:	f043 0308 	orr.w	r3, r3, #8
2400bf52:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400bf54:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400bf56:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400bf5a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400bf5c:	e77a      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400bf5e:	f640 723a 	movw	r2, #3898	; 0xf3a
    hsd->State = HAL_SD_STATE_READY;
2400bf62:	2101      	movs	r1, #1
    return HAL_OK;
2400bf64:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400bf66:	f6c1 0200 	movt	r2, #6144	; 0x1800
2400bf6a:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400bf6c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    return HAL_OK;
2400bf70:	e770      	b.n	2400be54 <HAL_SD_WriteBlocks+0xd8>
2400bf72:	bf00      	nop

2400bf74 <HAL_SD_GetCardCSD>:
{
2400bf74:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400bf76:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400bf78:	f04f 0c00 	mov.w	ip, #0
{
2400bf7c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400bf7e:	0f92      	lsrs	r2, r2, #30
2400bf80:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400bf82:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400bf84:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400bf88:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400bf8a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400bf8e:	f002 0203 	and.w	r2, r2, #3
2400bf92:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400bf94:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400bf98:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400bf9a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400bf9e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400bfa0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400bfa4:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400bfa6:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400bfa8:	0d12      	lsrs	r2, r2, #20
2400bfaa:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400bfac:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400bfb0:	f002 020f 	and.w	r2, r2, #15
2400bfb4:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400bfb6:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400bfb8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400bfbc:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400bfbe:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400bfc0:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400bfc4:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400bfc6:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400bfc8:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400bfcc:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400bfce:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400bfd0:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400bfd4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400bfd6:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400bfda:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400bfdc:	2a00      	cmp	r2, #0
2400bfde:	f040 808a 	bne.w	2400c0f6 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400bfe2:	6e04      	ldr	r4, [r0, #96]	; 0x60
2400bfe4:	f640 72fc 	movw	r2, #4092	; 0xffc
2400bfe8:	6e40      	ldr	r0, [r0, #100]	; 0x64
2400bfea:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400bfee:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400bff2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400bff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400bff6:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400bffa:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400bffc:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400c000:	f002 0207 	and.w	r2, r2, #7
2400c004:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400c006:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400c008:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400c00c:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400c00e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400c010:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400c014:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400c016:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400c018:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400c01c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400c01e:	690a      	ldr	r2, [r1, #16]
2400c020:	3201      	adds	r2, #1
2400c022:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400c024:	7e08      	ldrb	r0, [r1, #24]
2400c026:	f000 0007 	and.w	r0, r0, #7
2400c02a:	3002      	adds	r0, #2
2400c02c:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400c02e:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400c030:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400c032:	f891 c008 	ldrb.w	ip, [r1, #8]
2400c036:	f00c 0c0f 	and.w	ip, ip, #15
2400c03a:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400c03e:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400c042:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400c044:	fb02 f20c 	mul.w	r2, r2, ip
2400c048:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400c04a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
2400c04c:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
2400c050:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400c052:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400c056:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
2400c05a:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400c05c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400c05e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400c060:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400c064:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400c066:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400c068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400c06c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400c06e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c070:	0fd2      	lsrs	r2, r2, #31
2400c072:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400c074:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c076:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400c07a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400c07c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c07e:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400c082:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400c084:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c086:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400c08a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400c08c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c08e:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400c092:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400c096:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400c09a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400c09e:	ea02 020c 	and.w	r2, r2, ip
2400c0a2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400c0a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0a8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400c0ac:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400c0b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0b2:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400c0b6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400c0ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0bc:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400c0c0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400c0c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0c6:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400c0ca:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400c0ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0d0:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400c0d4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400c0d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400c0da:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400c0de:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400c0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400c0e4:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400c0e8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400c0ec:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400c0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c0f4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400c0f6:	2a01      	cmp	r2, #1
2400c0f8:	d110      	bne.n	2400c11c <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400c0fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400c0fc:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400c100:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400c104:	0412      	lsls	r2, r2, #16
2400c106:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400c10a:	4322      	orrs	r2, r4
2400c10c:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400c10e:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400c110:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400c112:	3201      	adds	r2, #1
2400c114:	0292      	lsls	r2, r2, #10
2400c116:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400c118:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400c11a:	e796      	b.n	2400c04a <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c11c:	f640 72ff 	movw	r2, #4095	; 0xfff
2400c120:	6804      	ldr	r4, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400c122:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c124:	f6c1 72e0 	movt	r2, #8160	; 0x1fe0
    return HAL_ERROR;
2400c128:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c12a:	63a2      	str	r2, [r4, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400c12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400c12e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400c132:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400c134:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400c138:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c13c:	4770      	bx	lr
2400c13e:	bf00      	nop

2400c140 <HAL_SD_InitCard>:
{
2400c140:	b5f0      	push	{r4, r5, r6, r7, lr}
2400c142:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400c144:	2000      	movs	r0, #0
{
2400c146:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400c148:	2200      	movs	r2, #0
2400c14a:	2300      	movs	r3, #0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400c14c:	f2c0 0001 	movt	r0, #1
2400c150:	2100      	movs	r1, #0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400c152:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400c156:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400c15a:	f7fe fcbd 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400c15e:	b940      	cbnz	r0, 2400c172 <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
2400c160:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400c162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400c166:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400c16a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400c16c:	4630      	mov	r0, r6
2400c16e:	b015      	add	sp, #84	; 0x54
2400c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400c172:	f648 3359 	movw	r3, #35673	; 0x8b59
2400c176:	0a06      	lsrs	r6, r0, #8
  (void)SDMMC_Init(hsd->Instance, Init);
2400c178:	aa07      	add	r2, sp, #28
2400c17a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400c17c:	f2c0 134f 	movt	r3, #335	; 0x14f
2400c180:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400c184:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400c186:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400c188:	9608      	str	r6, [sp, #32]
2400c18a:	e892 0003 	ldmia.w	r2, {r0, r1}
2400c18e:	e88d 0003 	stmia.w	sp, {r0, r1}
2400c192:	cb0e      	ldmia	r3, {r1, r2, r3}
2400c194:	6820      	ldr	r0, [r4, #0]
2400c196:	f001 f8ab 	bl	2400d2f0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400c19a:	6820      	ldr	r0, [r4, #0]
2400c19c:	f001 f8d0 	bl	2400d340 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400c1a0:	f243 43ff 	movw	r3, #13567	; 0x34ff
2400c1a4:	f2c0 030c 	movt	r3, #12
2400c1a8:	429d      	cmp	r5, r3
2400c1aa:	d902      	bls.n	2400c1b2 <HAL_SD_InitCard+0x72>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400c1ac:	0076      	lsls	r6, r6, #1
2400c1ae:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400c1b2:	f242 1010 	movw	r0, #8464	; 0x2110
2400c1b6:	f2c0 0001 	movt	r0, #1
2400c1ba:	fbb0 f0f5 	udiv	r0, r0, r5
2400c1be:	3001      	adds	r0, #1
2400c1c0:	f7f9 f8e4 	bl	2400538c <HAL_Delay>
  __IO uint32_t count = 0U;
2400c1c4:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400c1c6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400c1c8:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400c1ca:	f001 fe1b 	bl	2400de04 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c1ce:	4605      	mov	r5, r0
2400c1d0:	b140      	cbz	r0, 2400c1e4 <HAL_SD_InitCard+0xa4>
    hsd->State = HAL_SD_STATE_READY;
2400c1d2:	2601      	movs	r6, #1
2400c1d4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400c1d8:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400c1da:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c1dc:	432b      	orrs	r3, r5
2400c1de:	6363      	str	r3, [r4, #52]	; 0x34
}
2400c1e0:	b015      	add	sp, #84	; 0x54
2400c1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400c1e4:	6820      	ldr	r0, [r4, #0]
2400c1e6:	f001 fe3d 	bl	2400de64 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400c1ea:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400c1ee:	f000 80d3 	beq.w	2400c398 <HAL_SD_InitCard+0x258>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400c1f2:	2301      	movs	r3, #1
2400c1f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400c1f6:	2100      	movs	r1, #0
2400c1f8:	6820      	ldr	r0, [r4, #0]
2400c1fa:	f001 fe77 	bl	2400deec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c1fe:	bb18      	cbnz	r0, 2400c248 <HAL_SD_InitCard+0x108>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400c200:	9b03      	ldr	r3, [sp, #12]
2400c202:	f64f 77fe 	movw	r7, #65534	; 0xfffe
2400c206:	42bb      	cmp	r3, r7
2400c208:	f200 80d8 	bhi.w	2400c3bc <HAL_SD_InitCard+0x27c>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400c20c:	2600      	movs	r6, #0
2400c20e:	f2cc 1610 	movt	r6, #49424	; 0xc110
2400c212:	e010      	b.n	2400c236 <HAL_SD_InitCard+0xf6>
2400c214:	6820      	ldr	r0, [r4, #0]
2400c216:	f001 ff1b 	bl	2400e050 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c21a:	4601      	mov	r1, r0
2400c21c:	b9a0      	cbnz	r0, 2400c248 <HAL_SD_InitCard+0x108>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c21e:	6820      	ldr	r0, [r4, #0]
2400c220:	f001 f89a 	bl	2400d358 <SDMMC_GetResponse>
    count++;
2400c224:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400c226:	2800      	cmp	r0, #0
    count++;
2400c228:	f103 0301 	add.w	r3, r3, #1
2400c22c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400c22e:	9b03      	ldr	r3, [sp, #12]
2400c230:	db0d      	blt.n	2400c24e <HAL_SD_InitCard+0x10e>
2400c232:	42bb      	cmp	r3, r7
2400c234:	d80b      	bhi.n	2400c24e <HAL_SD_InitCard+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400c236:	2100      	movs	r1, #0
2400c238:	6820      	ldr	r0, [r4, #0]
2400c23a:	f001 fe57 	bl	2400deec <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400c23e:	4631      	mov	r1, r6
    if (errorstate != HAL_SD_ERROR_NONE)
2400c240:	2800      	cmp	r0, #0
2400c242:	d0e7      	beq.n	2400c214 <HAL_SD_InitCard+0xd4>
2400c244:	4605      	mov	r5, r0
2400c246:	e7c4      	b.n	2400c1d2 <HAL_SD_InitCard+0x92>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400c248:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400c24c:	e7c1      	b.n	2400c1d2 <HAL_SD_InitCard+0x92>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400c24e:	9a03      	ldr	r2, [sp, #12]
2400c250:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400c254:	429a      	cmp	r2, r3
2400c256:	f200 80b5 	bhi.w	2400c3c4 <HAL_SD_InitCard+0x284>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400c25a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
2400c25e:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400c262:	bf18      	it	ne
2400c264:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
2400c266:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400c268:	2300      	movs	r3, #0
2400c26a:	63a5      	str	r5, [r4, #56]	; 0x38
2400c26c:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400c270:	f7f9 f886 	bl	24005380 <HAL_GetTick>
2400c274:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400c276:	6820      	ldr	r0, [r4, #0]
2400c278:	f001 f86a 	bl	2400d350 <SDMMC_GetPowerState>
2400c27c:	b368      	cbz	r0, 2400c2da <HAL_SD_InitCard+0x19a>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c27e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400c280:	2b03      	cmp	r3, #3
2400c282:	d135      	bne.n	2400c2f0 <HAL_SD_InitCard+0x1b0>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400c284:	2104      	movs	r1, #4
2400c286:	6820      	ldr	r0, [r4, #0]
2400c288:	f001 f866 	bl	2400d358 <SDMMC_GetResponse>
2400c28c:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400c28e:	a909      	add	r1, sp, #36	; 0x24
2400c290:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400c292:	0d1b      	lsrs	r3, r3, #20
2400c294:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400c296:	f7ff fe6d 	bl	2400bf74 <HAL_SD_GetCardCSD>
2400c29a:	4606      	mov	r6, r0
2400c29c:	2800      	cmp	r0, #0
2400c29e:	f040 8087 	bne.w	2400c3b0 <HAL_SD_InitCard+0x270>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400c2a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400c2a4:	6820      	ldr	r0, [r4, #0]
2400c2a6:	0409      	lsls	r1, r1, #16
2400c2a8:	f001 fcfa 	bl	2400dca0 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c2ac:	b9b8      	cbnz	r0, 2400c2de <HAL_SD_InitCard+0x19e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400c2ae:	f44f 7100 	mov.w	r1, #512	; 0x200
2400c2b2:	6820      	ldr	r0, [r4, #0]
2400c2b4:	f001 f86a 	bl	2400d38c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c2b8:	2800      	cmp	r0, #0
2400c2ba:	f43f af57 	beq.w	2400c16c <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c2be:	f640 72ff 	movw	r2, #4095	; 0xfff
2400c2c2:	6821      	ldr	r1, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400c2c4:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c2c6:	f6c1 72e0 	movt	r2, #8160	; 0x1fe0
    return HAL_ERROR;
2400c2ca:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c2cc:	638a      	str	r2, [r1, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400c2ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400c2d0:	4310      	orrs	r0, r2
2400c2d2:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400c2d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400c2d8:	e748      	b.n	2400c16c <HAL_SD_InitCard+0x2c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400c2da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400c2de:	2601      	movs	r6, #1
2400c2e0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400c2e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c2e6:	4303      	orrs	r3, r0
}
2400c2e8:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400c2ea:	6363      	str	r3, [r4, #52]	; 0x34
}
2400c2ec:	b015      	add	sp, #84	; 0x54
2400c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400c2f0:	6820      	ldr	r0, [r4, #0]
2400c2f2:	f002 f84b 	bl	2400e38c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c2f6:	2800      	cmp	r0, #0
2400c2f8:	d1f1      	bne.n	2400c2de <HAL_SD_InitCard+0x19e>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c2fa:	4601      	mov	r1, r0
2400c2fc:	6820      	ldr	r0, [r4, #0]
2400c2fe:	f001 f82b 	bl	2400d358 <SDMMC_GetResponse>
2400c302:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c304:	2104      	movs	r1, #4
2400c306:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c308:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c30a:	f001 f825 	bl	2400d358 <SDMMC_GetResponse>
2400c30e:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c310:	2108      	movs	r1, #8
2400c312:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c314:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c316:	f001 f81f 	bl	2400d358 <SDMMC_GetResponse>
2400c31a:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400c31c:	210c      	movs	r1, #12
2400c31e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c320:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400c322:	f001 f819 	bl	2400d358 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400c328:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c32a:	2b03      	cmp	r3, #3
2400c32c:	d0aa      	beq.n	2400c284 <HAL_SD_InitCard+0x144>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400c32e:	f241 3687 	movw	r6, #4999	; 0x1387
2400c332:	e009      	b.n	2400c348 <HAL_SD_InitCard+0x208>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400c334:	6820      	ldr	r0, [r4, #0]
2400c336:	f002 f8b5 	bl	2400e4a4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400c33a:	2800      	cmp	r0, #0
2400c33c:	d1cf      	bne.n	2400c2de <HAL_SD_InitCard+0x19e>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400c33e:	f7f9 f81f 	bl	24005380 <HAL_GetTick>
2400c342:	1b43      	subs	r3, r0, r5
2400c344:	42b3      	cmp	r3, r6
2400c346:	d836      	bhi.n	2400c3b6 <HAL_SD_InitCard+0x276>
    while (sd_rca == 0U)
2400c348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400c34c:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400c350:	2b00      	cmp	r3, #0
2400c352:	d0ef      	beq.n	2400c334 <HAL_SD_InitCard+0x1f4>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c354:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400c356:	2a03      	cmp	r2, #3
2400c358:	d094      	beq.n	2400c284 <HAL_SD_InitCard+0x144>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c35a:	0419      	lsls	r1, r3, #16
2400c35c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400c35e:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c360:	f002 f858 	bl	2400e414 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c364:	2800      	cmp	r0, #0
2400c366:	d1ba      	bne.n	2400c2de <HAL_SD_InitCard+0x19e>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c368:	4601      	mov	r1, r0
2400c36a:	6820      	ldr	r0, [r4, #0]
2400c36c:	f000 fff4 	bl	2400d358 <SDMMC_GetResponse>
2400c370:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c372:	2104      	movs	r1, #4
2400c374:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c376:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c378:	f000 ffee 	bl	2400d358 <SDMMC_GetResponse>
2400c37c:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c37e:	2108      	movs	r1, #8
2400c380:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400c382:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c384:	f000 ffe8 	bl	2400d358 <SDMMC_GetResponse>
2400c388:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400c38a:	210c      	movs	r1, #12
2400c38c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400c38e:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400c390:	f000 ffe2 	bl	2400d358 <SDMMC_GetResponse>
2400c394:	66a0      	str	r0, [r4, #104]	; 0x68
2400c396:	e775      	b.n	2400c284 <HAL_SD_InitCard+0x144>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400c398:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
2400c39a:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400c39c:	f001 fd32 	bl	2400de04 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c3a0:	2800      	cmp	r0, #0
2400c3a2:	f47f af4f 	bne.w	2400c244 <HAL_SD_InitCard+0x104>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400c3a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400c3a8:	2b01      	cmp	r3, #1
2400c3aa:	f47f af29 	bne.w	2400c200 <HAL_SD_InitCard+0xc0>
2400c3ae:	e722      	b.n	2400c1f6 <HAL_SD_InitCard+0xb6>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400c3b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400c3b4:	e793      	b.n	2400c2de <HAL_SD_InitCard+0x19e>
        return HAL_SD_ERROR_TIMEOUT;
2400c3b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400c3ba:	e790      	b.n	2400c2de <HAL_SD_InitCard+0x19e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400c3bc:	9b03      	ldr	r3, [sp, #12]
2400c3be:	42bb      	cmp	r3, r7
2400c3c0:	f67f af52 	bls.w	2400c268 <HAL_SD_InitCard+0x128>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400c3c4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400c3c8:	e703      	b.n	2400c1d2 <HAL_SD_InitCard+0x92>
2400c3ca:	bf00      	nop

2400c3cc <HAL_SD_GetCardInfo>:
{
2400c3cc:	4603      	mov	r3, r0
}
2400c3ce:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400c3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400c3d2:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400c3d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400c3d6:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400c3d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400c3da:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400c3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400c3de:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400c3e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400c3e2:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400c3e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400c3e6:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400c3e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400c3ea:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400c3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400c3ee:	61cb      	str	r3, [r1, #28]
}
2400c3f0:	4770      	bx	lr
2400c3f2:	bf00      	nop

2400c3f4 <HAL_SD_ConfigWideBusOperation>:
{
2400c3f4:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400c3f6:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c3f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400c3fa:	b089      	sub	sp, #36	; 0x24
2400c3fc:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c3fe:	4293      	cmp	r3, r2
{
2400c400:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400c402:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400c406:	d049      	beq.n	2400c49c <HAL_SD_ConfigWideBusOperation+0xa8>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400c408:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400c40c:	d046      	beq.n	2400c49c <HAL_SD_ConfigWideBusOperation+0xa8>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400c40e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400c412:	f000 808c 	beq.w	2400c52e <HAL_SD_ConfigWideBusOperation+0x13a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400c416:	2900      	cmp	r1, #0
2400c418:	d06a      	beq.n	2400c4f0 <HAL_SD_ConfigWideBusOperation+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400c41a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c41c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400c420:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400c422:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c424:	2b00      	cmp	r3, #0
2400c426:	d140      	bne.n	2400c4aa <HAL_SD_ConfigWideBusOperation+0xb6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400c428:	2000      	movs	r0, #0
2400c42a:	2100      	movs	r1, #0
2400c42c:	f2c0 0001 	movt	r0, #1
2400c430:	f7fe fb52 	bl	2400aad8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400c434:	2800      	cmp	r0, #0
2400c436:	d055      	beq.n	2400c4e4 <HAL_SD_ConfigWideBusOperation+0xf0>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400c438:	f643 3389 	movw	r3, #15241	; 0x3b89
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400c43c:	6922      	ldr	r2, [r4, #16]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400c43e:	6861      	ldr	r1, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400c440:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400c444:	9205      	str	r2, [sp, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400c446:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400c448:	fba3 2300 	umull	r2, r3, r3, r0
2400c44c:	6962      	ldr	r2, [r4, #20]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400c44e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400c450:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.BusWide             = WideMode;
2400c454:	9504      	str	r5, [sp, #16]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400c456:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400c458:	ea4f 6513 	mov.w	r5, r3, lsr #24
2400c45c:	d212      	bcs.n	2400c484 <HAL_SD_ConfigWideBusOperation+0x90>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400c45e:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400c460:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400c464:	d00e      	beq.n	2400c484 <HAL_SD_ConfigWideBusOperation+0x90>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400c466:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400c46a:	f000 8082 	beq.w	2400c572 <HAL_SD_ConfigWideBusOperation+0x17e>
        if (hsd->Init.ClockDiv == 0U)
2400c46e:	b112      	cbz	r2, 2400c476 <HAL_SD_ConfigWideBusOperation+0x82>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400c470:	0053      	lsls	r3, r2, #1
2400c472:	fbb0 f0f3 	udiv	r0, r0, r3
2400c476:	f647 0340 	movw	r3, #30784	; 0x7840
2400c47a:	f2c0 137d 	movt	r3, #381	; 0x17d
2400c47e:	4298      	cmp	r0, r3
2400c480:	bf88      	it	hi
2400c482:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
2400c484:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
2400c486:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400c488:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400c48a:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400c48c:	c903      	ldmia	r1, {r0, r1}
2400c48e:	e88d 0003 	stmia.w	sp, {r0, r1}
2400c492:	cb0e      	ldmia	r3, {r1, r2, r3}
2400c494:	6820      	ldr	r0, [r4, #0]
2400c496:	f000 ff2b 	bl	2400d2f0 <SDMMC_Init>
2400c49a:	e00d      	b.n	2400c4b8 <HAL_SD_ConfigWideBusOperation+0xc4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400c49c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400c4a2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400c4a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c4a6:	2b00      	cmp	r3, #0
2400c4a8:	d0be      	beq.n	2400c428 <HAL_SD_ConfigWideBusOperation+0x34>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c4aa:	f640 73ff 	movw	r3, #4095	; 0xfff
2400c4ae:	6822      	ldr	r2, [r4, #0]
    status = HAL_ERROR;
2400c4b0:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c4b2:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400c4b6:	6393      	str	r3, [r2, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400c4b8:	f44f 7100 	mov.w	r1, #512	; 0x200
2400c4bc:	6820      	ldr	r0, [r4, #0]
2400c4be:	f000 ff65 	bl	2400d38c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c4c2:	b148      	cbz	r0, 2400c4d8 <HAL_SD_ConfigWideBusOperation+0xe4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c4c4:	f640 73ff 	movw	r3, #4095	; 0xfff
2400c4c8:	6822      	ldr	r2, [r4, #0]
    status = HAL_ERROR;
2400c4ca:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c4cc:	f6c1 73e0 	movt	r3, #8160	; 0x1fe0
2400c4d0:	6393      	str	r3, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400c4d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c4d4:	4303      	orrs	r3, r0
2400c4d6:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400c4d8:	2301      	movs	r3, #1
}
2400c4da:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400c4dc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400c4e0:	b009      	add	sp, #36	; 0x24
2400c4e2:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400c4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400c4e6:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400c4e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400c4ec:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400c4ee:	e7e3      	b.n	2400c4b8 <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0UL, 0UL};
2400c4f0:	2200      	movs	r2, #0
2400c4f2:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c4f4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400c4f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c4fa:	f000 ff2d 	bl	2400d358 <SDMMC_GetResponse>
2400c4fe:	0182      	lsls	r2, r0, #6
2400c500:	d434      	bmi.n	2400c56c <HAL_SD_ConfigWideBusOperation+0x178>
  errorstate = SD_FindSCR(hsd, scr);
2400c502:	a902      	add	r1, sp, #8
2400c504:	4620      	mov	r0, r4
2400c506:	f7ff fac9 	bl	2400ba9c <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c50a:	b960      	cbnz	r0, 2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400c50c:	9b03      	ldr	r3, [sp, #12]
2400c50e:	03db      	lsls	r3, r3, #15
2400c510:	d538      	bpl.n	2400c584 <HAL_SD_ConfigWideBusOperation+0x190>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c512:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400c514:	6820      	ldr	r0, [r4, #0]
2400c516:	0409      	lsls	r1, r1, #16
2400c518:	f001 fce8 	bl	2400deec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c51c:	b918      	cbnz	r0, 2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400c51e:	4601      	mov	r1, r0
2400c520:	6820      	ldr	r0, [r4, #0]
2400c522:	f001 fdd5 	bl	2400e0d0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400c526:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c528:	4303      	orrs	r3, r0
2400c52a:	6363      	str	r3, [r4, #52]	; 0x34
2400c52c:	e7ba      	b.n	2400c4a4 <HAL_SD_ConfigWideBusOperation+0xb0>
  uint32_t scr[2U] = {0UL, 0UL};
2400c52e:	2200      	movs	r2, #0
2400c530:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c532:	2100      	movs	r1, #0
2400c534:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400c536:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c53a:	f000 ff0d 	bl	2400d358 <SDMMC_GetResponse>
2400c53e:	0180      	lsls	r0, r0, #6
2400c540:	d414      	bmi.n	2400c56c <HAL_SD_ConfigWideBusOperation+0x178>
  errorstate = SD_FindSCR(hsd, scr);
2400c542:	a902      	add	r1, sp, #8
2400c544:	4620      	mov	r0, r4
2400c546:	f7ff faa9 	bl	2400ba9c <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c54a:	2800      	cmp	r0, #0
2400c54c:	d1eb      	bne.n	2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400c54e:	9b03      	ldr	r3, [sp, #12]
2400c550:	0359      	lsls	r1, r3, #13
2400c552:	d517      	bpl.n	2400c584 <HAL_SD_ConfigWideBusOperation+0x190>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c554:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400c556:	6820      	ldr	r0, [r4, #0]
2400c558:	0409      	lsls	r1, r1, #16
2400c55a:	f001 fcc7 	bl	2400deec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c55e:	2800      	cmp	r0, #0
2400c560:	d1e1      	bne.n	2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400c562:	2102      	movs	r1, #2
2400c564:	6820      	ldr	r0, [r4, #0]
2400c566:	f001 fdb3 	bl	2400e0d0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400c56a:	e7dc      	b.n	2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400c56c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c570:	e7d9      	b.n	2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
        if (hsd->Init.ClockDiv == 0U)
2400c572:	b952      	cbnz	r2, 2400c58a <HAL_SD_ConfigWideBusOperation+0x196>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400c574:	f24f 0180 	movw	r1, #61568	; 0xf080
2400c578:	f2c0 21fa 	movt	r1, #762	; 0x2fa
2400c57c:	4288      	cmp	r0, r1
2400c57e:	d981      	bls.n	2400c484 <HAL_SD_ConfigWideBusOperation+0x90>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400c580:	0e5a      	lsrs	r2, r3, #25
2400c582:	e77f      	b.n	2400c484 <HAL_SD_ConfigWideBusOperation+0x90>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400c584:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400c588:	e7cd      	b.n	2400c526 <HAL_SD_ConfigWideBusOperation+0x132>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400c58a:	0051      	lsls	r1, r2, #1
2400c58c:	fbb0 f1f1 	udiv	r1, r0, r1
2400c590:	f24f 0080 	movw	r0, #61568	; 0xf080
2400c594:	f2c0 20fa 	movt	r0, #762	; 0x2fa
2400c598:	4281      	cmp	r1, r0
2400c59a:	f67f af73 	bls.w	2400c484 <HAL_SD_ConfigWideBusOperation+0x90>
2400c59e:	e7ef      	b.n	2400c580 <HAL_SD_ConfigWideBusOperation+0x18c>

2400c5a0 <HAL_SD_Init>:
{
2400c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
2400c5a2:	b087      	sub	sp, #28
  if (hsd == NULL)
2400c5a4:	2800      	cmp	r0, #0
2400c5a6:	d045      	beq.n	2400c634 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
2400c5a8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400c5ac:	4604      	mov	r4, r0
2400c5ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400c5b2:	2b00      	cmp	r3, #0
2400c5b4:	d042      	beq.n	2400c63c <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400c5b6:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400c5b8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400c5ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400c5be:	f7ff fdbf 	bl	2400c140 <HAL_SD_InitCard>
2400c5c2:	2800      	cmp	r0, #0
2400c5c4:	d136      	bne.n	2400c634 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400c5c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400c5ca:	2b03      	cmp	r3, #3
2400c5cc:	d032      	beq.n	2400c634 <HAL_SD_Init+0x94>
2400c5ce:	a901      	add	r1, sp, #4
2400c5d0:	4620      	mov	r0, r4
2400c5d2:	f7ff f997 	bl	2400b904 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400c5d6:	bb68      	cbnz	r0, 2400c634 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400c5d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400c5da:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400c5de:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400c5e0:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400c5e4:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400c5e6:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400c5e8:	d02c      	beq.n	2400c644 <HAL_SD_Init+0xa4>
2400c5ea:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400c5ec:	68e1      	ldr	r1, [r4, #12]
2400c5ee:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400c5f0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400c5f2:	f7ff feff 	bl	2400c3f4 <HAL_SD_ConfigWideBusOperation>
2400c5f6:	4606      	mov	r6, r0
2400c5f8:	b9e0      	cbnz	r0, 2400c634 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
2400c5fa:	f7f8 fec1 	bl	24005380 <HAL_GetTick>
2400c5fe:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400c600:	e00c      	b.n	2400c61c <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c602:	6820      	ldr	r0, [r4, #0]
2400c604:	4629      	mov	r1, r5
2400c606:	f000 fea7 	bl	2400d358 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400c60a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400c60e:	2804      	cmp	r0, #4
2400c610:	d01f      	beq.n	2400c652 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400c612:	f7f8 feb5 	bl	24005380 <HAL_GetTick>
2400c616:	1bc3      	subs	r3, r0, r7
2400c618:	3301      	adds	r3, #1
2400c61a:	d020      	beq.n	2400c65e <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c61c:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400c61e:	6820      	ldr	r0, [r4, #0]
2400c620:	0409      	lsls	r1, r1, #16
2400c622:	f001 ffa3 	bl	2400e56c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c626:	4605      	mov	r5, r0
2400c628:	2800      	cmp	r0, #0
2400c62a:	d0ea      	beq.n	2400c602 <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
2400c62c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c62e:	4303      	orrs	r3, r0
2400c630:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400c632:	e7ee      	b.n	2400c612 <HAL_SD_Init+0x72>
    return HAL_ERROR;
2400c634:	2601      	movs	r6, #1
}
2400c636:	4630      	mov	r0, r6
2400c638:	b007      	add	sp, #28
2400c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400c63c:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400c63e:	f7f7 fc11 	bl	24003e64 <HAL_SD_MspInit>
2400c642:	e7b8      	b.n	2400c5b6 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400c644:	4313      	orrs	r3, r2
2400c646:	bf0c      	ite	eq
2400c648:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400c64c:	f44f 7300 	movne.w	r3, #512	; 0x200
2400c650:	e7cc      	b.n	2400c5ec <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400c652:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400c654:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400c656:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400c658:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400c65c:	e7eb      	b.n	2400c636 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400c65e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400c662:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400c664:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400c666:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400c668:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400c66c:	e7e3      	b.n	2400c636 <HAL_SD_Init+0x96>
2400c66e:	bf00      	nop

2400c670 <HAL_SD_GetCardState>:
{
2400c670:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c672:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400c674:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c676:	6800      	ldr	r0, [r0, #0]
2400c678:	0409      	lsls	r1, r1, #16
2400c67a:	f001 ff77 	bl	2400e56c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c67e:	4601      	mov	r1, r0
2400c680:	b120      	cbz	r0, 2400c68c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400c682:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400c684:	2000      	movs	r0, #0
2400c686:	430b      	orrs	r3, r1
2400c688:	6363      	str	r3, [r4, #52]	; 0x34
}
2400c68a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400c68c:	6820      	ldr	r0, [r4, #0]
2400c68e:	f000 fe63 	bl	2400d358 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400c692:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400c696:	bd10      	pop	{r4, pc}

2400c698 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400c698:	b330      	cbz	r0, 2400c6e8 <HAL_SDRAM_Init+0x50>
{
2400c69a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400c69c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400c6a0:	4604      	mov	r4, r0
2400c6a2:	460d      	mov	r5, r1
2400c6a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400c6a8:	b1cb      	cbz	r3, 2400c6de <HAL_SDRAM_Init+0x46>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400c6aa:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400c6ac:	2302      	movs	r3, #2
2400c6ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400c6b2:	f851 0b04 	ldr.w	r0, [r1], #4
2400c6b6:	f000 fd65 	bl	2400d184 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400c6ba:	6862      	ldr	r2, [r4, #4]
2400c6bc:	4629      	mov	r1, r5
2400c6be:	6820      	ldr	r0, [r4, #0]
2400c6c0:	f000 fda2 	bl	2400d208 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400c6c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400c6c8:	2101      	movs	r1, #1

  return HAL_OK;
2400c6ca:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400c6cc:	f2c5 2300 	movt	r3, #20992	; 0x5200
2400c6d0:	681a      	ldr	r2, [r3, #0]
2400c6d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
2400c6d6:	601a      	str	r2, [r3, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400c6d8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400c6dc:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400c6de:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400c6e2:	f7f4 fd23 	bl	2400112c <HAL_SDRAM_MspInit>
2400c6e6:	e7e0      	b.n	2400c6aa <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400c6e8:	2001      	movs	r0, #1
}
2400c6ea:	4770      	bx	lr

2400c6ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400c6ec:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400c6ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400c6f2:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400c6f4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400c6f6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400c6f8:	d004      	beq.n	2400c704 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400c6fa:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400c6fe:	2e01      	cmp	r6, #1
2400c700:	d001      	beq.n	2400c706 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400c702:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400c704:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400c706:	2302      	movs	r3, #2
2400c708:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400c70a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400c70c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400c710:	f000 fdc8 	bl	2400d2a4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400c714:	682b      	ldr	r3, [r5, #0]
2400c716:	2b02      	cmp	r3, #2
2400c718:	d003      	beq.n	2400c722 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400c71a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400c71c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400c720:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400c722:	2305      	movs	r3, #5
  return HAL_OK;
2400c724:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400c726:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400c72a:	bd70      	pop	{r4, r5, r6, pc}

2400c72c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400c72c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400c72e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400c732:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400c734:	2b02      	cmp	r3, #2
2400c736:	b2d8      	uxtb	r0, r3
2400c738:	d005      	beq.n	2400c746 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400c73a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400c73e:	2b01      	cmp	r3, #1
2400c740:	b2dd      	uxtb	r5, r3
2400c742:	d001      	beq.n	2400c748 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400c744:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400c746:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400c748:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400c74a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400c74c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400c750:	f000 fdbe 	bl	2400d2d0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400c754:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400c756:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400c75a:	bd38      	pop	{r3, r4, r5, pc}

2400c75c <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400c75c:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c75e:	f64f 4390 	movw	r3, #64656	; 0xfc90
  __HAL_SPI_DISABLE(hspi);
2400c762:	680a      	ldr	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c764:	f6cf 73ff 	movt	r3, #65535	; 0xffff
  __HAL_SPI_DISABLE(hspi);
2400c768:	f022 0201 	bic.w	r2, r2, #1
2400c76c:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c76e:	6802      	ldr	r2, [r0, #0]
2400c770:	6911      	ldr	r1, [r2, #16]
2400c772:	400b      	ands	r3, r1
2400c774:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c776:	6802      	ldr	r2, [r0, #0]
2400c778:	6993      	ldr	r3, [r2, #24]
2400c77a:	f043 0308 	orr.w	r3, r3, #8
2400c77e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c780:	6802      	ldr	r2, [r0, #0]
2400c782:	6993      	ldr	r3, [r2, #24]
2400c784:	f043 0310 	orr.w	r3, r3, #16
2400c788:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c78a:	6802      	ldr	r2, [r0, #0]
2400c78c:	6893      	ldr	r3, [r2, #8]
2400c78e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400c792:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c794:	6802      	ldr	r2, [r0, #0]
2400c796:	6993      	ldr	r3, [r2, #24]
2400c798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c79c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c79e:	6802      	ldr	r2, [r0, #0]
2400c7a0:	6993      	ldr	r3, [r2, #24]
2400c7a2:	f043 0320 	orr.w	r3, r3, #32
2400c7a6:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c7a8:	6802      	ldr	r2, [r0, #0]
2400c7aa:	6993      	ldr	r3, [r2, #24]
2400c7ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400c7b0:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
2400c7b2:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c7b4:	6801      	ldr	r1, [r0, #0]
2400c7b6:	698b      	ldr	r3, [r1, #24]
2400c7b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400c7bc:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400c7be:	6801      	ldr	r1, [r0, #0]
2400c7c0:	698b      	ldr	r3, [r1, #24]
2400c7c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400c7c6:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400c7c8:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400c7cc:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
2400c7d0:	4770      	bx	lr
2400c7d2:	bf00      	nop

2400c7d4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400c7d4:	6803      	ldr	r3, [r0, #0]
{
2400c7d6:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400c7d8:	695a      	ldr	r2, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c7da:	6999      	ldr	r1, [r3, #24]
2400c7dc:	f041 0108 	orr.w	r1, r1, #8
2400c7e0:	6199      	str	r1, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c7e2:	6801      	ldr	r1, [r0, #0]
2400c7e4:	698b      	ldr	r3, [r1, #24]
2400c7e6:	f043 0310 	orr.w	r3, r3, #16
2400c7ea:	618b      	str	r3, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400c7ec:	6801      	ldr	r1, [r0, #0]
2400c7ee:	680b      	ldr	r3, [r1, #0]
2400c7f0:	f023 0301 	bic.w	r3, r3, #1
2400c7f4:	600b      	str	r3, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c7f6:	f64f 4390 	movw	r3, #64656	; 0xfc90
2400c7fa:	6801      	ldr	r1, [r0, #0]
2400c7fc:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400c800:	690c      	ldr	r4, [r1, #16]
2400c802:	4023      	ands	r3, r4
2400c804:	610b      	str	r3, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c806:	6801      	ldr	r1, [r0, #0]
2400c808:	688b      	ldr	r3, [r1, #8]
2400c80a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400c80e:	608b      	str	r3, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400c810:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400c814:	2b04      	cmp	r3, #4
2400c816:	d001      	beq.n	2400c81c <SPI_CloseTransfer+0x48>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400c818:	0693      	lsls	r3, r2, #26
2400c81a:	d433      	bmi.n	2400c884 <SPI_CloseTransfer+0xb0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400c81c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400c820:	2b03      	cmp	r3, #3
2400c822:	d001      	beq.n	2400c828 <SPI_CloseTransfer+0x54>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400c824:	0654      	lsls	r4, r2, #25
2400c826:	d421      	bmi.n	2400c86c <SPI_CloseTransfer+0x98>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400c828:	0591      	lsls	r1, r2, #22
2400c82a:	d50a      	bpl.n	2400c842 <SPI_CloseTransfer+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c82c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c830:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c832:	f043 0301 	orr.w	r3, r3, #1
2400c836:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c83a:	698b      	ldr	r3, [r1, #24]
2400c83c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400c840:	618b      	str	r3, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400c842:	05d3      	lsls	r3, r2, #23
2400c844:	d50a      	bpl.n	2400c85c <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c846:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c84a:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c84c:	f043 0308 	orr.w	r3, r3, #8
2400c850:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c854:	6993      	ldr	r3, [r2, #24]
2400c856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400c85a:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400c85c:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400c85e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400c862:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400c866:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400c86a:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c86c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c870:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c872:	f043 0304 	orr.w	r3, r3, #4
2400c876:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c87a:	698b      	ldr	r3, [r1, #24]
2400c87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c880:	618b      	str	r3, [r1, #24]
2400c882:	e7d1      	b.n	2400c828 <SPI_CloseTransfer+0x54>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c884:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c888:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c88e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c892:	698b      	ldr	r3, [r1, #24]
2400c894:	f043 0320 	orr.w	r3, r3, #32
2400c898:	618b      	str	r3, [r1, #24]
2400c89a:	e7bf      	b.n	2400c81c <SPI_CloseTransfer+0x48>

2400c89c <HAL_SPI_Init>:
  if (hspi == NULL)
2400c89c:	2800      	cmp	r0, #0
2400c89e:	f000 80cd 	beq.w	2400ca3c <HAL_SPI_Init+0x1a0>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400c8a2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400c8a6:	2100      	movs	r1, #0
{
2400c8a8:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400c8aa:	f2c4 0201 	movt	r2, #16385	; 0x4001
2400c8ae:	6803      	ldr	r3, [r0, #0]
2400c8b0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400c8b2:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400c8b4:	4293      	cmp	r3, r2
2400c8b6:	d019      	beq.n	2400c8ec <HAL_SPI_Init+0x50>
2400c8b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
2400c8bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
2400c8c0:	4293      	cmp	r3, r2
2400c8c2:	d013      	beq.n	2400c8ec <HAL_SPI_Init+0x50>
2400c8c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
2400c8c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
2400c8cc:	4293      	cmp	r3, r2
2400c8ce:	68c2      	ldr	r2, [r0, #12]
2400c8d0:	f000 80ad 	beq.w	2400ca2e <HAL_SPI_Init+0x192>
2400c8d4:	2a0f      	cmp	r2, #15
2400c8d6:	d807      	bhi.n	2400c8e8 <HAL_SPI_Init+0x4c>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400c8d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400c8da:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400c8dc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400c8de:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400c8e0:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400c8e4:	2a08      	cmp	r2, #8
2400c8e6:	d91c      	bls.n	2400c922 <HAL_SPI_Init+0x86>
    return HAL_ERROR;
2400c8e8:	2001      	movs	r0, #1
}
2400c8ea:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400c8ec:	68e2      	ldr	r2, [r4, #12]
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400c8ee:	f44f 5040 	mov.w	r0, #12288	; 0x3000
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400c8f2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400c8f4:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400c8f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400c8fa:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400c8fc:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400c8fe:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400c902:	f44f 5160 	mov.w	r1, #14336	; 0x3800
2400c906:	f2c4 0100 	movt	r1, #16384	; 0x4000
2400c90a:	428b      	cmp	r3, r1
2400c90c:	bf18      	it	ne
2400c90e:	4283      	cmpne	r3, r0
2400c910:	d005      	beq.n	2400c91e <HAL_SPI_Init+0x82>
2400c912:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
2400c916:	f2c4 0100 	movt	r1, #16384	; 0x4000
2400c91a:	428b      	cmp	r3, r1
2400c91c:	d101      	bne.n	2400c922 <HAL_SPI_Init+0x86>
2400c91e:	2a10      	cmp	r2, #16
2400c920:	d8e2      	bhi.n	2400c8e8 <HAL_SPI_Init+0x4c>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400c922:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400c926:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400c92a:	2a00      	cmp	r2, #0
2400c92c:	d078      	beq.n	2400ca20 <HAL_SPI_Init+0x184>
  hspi->State = HAL_SPI_STATE_BUSY;
2400c92e:	2202      	movs	r2, #2
2400c930:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400c934:	681a      	ldr	r2, [r3, #0]
2400c936:	f022 0201 	bic.w	r2, r2, #1
2400c93a:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400c93c:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400c93e:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400c940:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400c944:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400c946:	689a      	ldr	r2, [r3, #8]
2400c948:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400c94c:	d058      	beq.n	2400ca00 <HAL_SPI_Init+0x164>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400c94e:	0249      	lsls	r1, r1, #9
2400c950:	d502      	bpl.n	2400c958 <HAL_SPI_Init+0xbc>
2400c952:	68e1      	ldr	r1, [r4, #12]
2400c954:	2906      	cmp	r1, #6
2400c956:	d84c      	bhi.n	2400c9f2 <HAL_SPI_Init+0x156>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400c958:	6819      	ldr	r1, [r3, #0]
2400c95a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400c95e:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400c960:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400c962:	69e3      	ldr	r3, [r4, #28]
2400c964:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400c966:	432b      	orrs	r3, r5
2400c968:	6821      	ldr	r1, [r4, #0]
2400c96a:	4303      	orrs	r3, r0
2400c96c:	68e0      	ldr	r0, [r4, #12]
2400c96e:	4303      	orrs	r3, r0
2400c970:	4313      	orrs	r3, r2
2400c972:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400c974:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400c976:	69a0      	ldr	r0, [r4, #24]
2400c978:	6822      	ldr	r2, [r4, #0]
2400c97a:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400c97e:	432b      	orrs	r3, r5
2400c980:	430b      	orrs	r3, r1
2400c982:	6921      	ldr	r1, [r4, #16]
2400c984:	4303      	orrs	r3, r0
2400c986:	6960      	ldr	r0, [r4, #20]
2400c988:	430b      	orrs	r3, r1
2400c98a:	6a21      	ldr	r1, [r4, #32]
2400c98c:	4303      	orrs	r3, r0
2400c98e:	6860      	ldr	r0, [r4, #4]
2400c990:	430b      	orrs	r3, r1
2400c992:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400c994:	4303      	orrs	r3, r0
2400c996:	68a0      	ldr	r0, [r4, #8]
2400c998:	430b      	orrs	r3, r1
2400c99a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400c99c:	4303      	orrs	r3, r0
2400c99e:	430b      	orrs	r3, r1
2400c9a0:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400c9a2:	430b      	orrs	r3, r1
2400c9a4:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400c9a6:	6863      	ldr	r3, [r4, #4]
2400c9a8:	b96b      	cbnz	r3, 2400c9c6 <HAL_SPI_Init+0x12a>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400c9aa:	6822      	ldr	r2, [r4, #0]
2400c9ac:	6893      	ldr	r3, [r2, #8]
2400c9ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400c9b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400c9b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400c9b8:	6822      	ldr	r2, [r4, #0]
2400c9ba:	6893      	ldr	r3, [r2, #8]
2400c9bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400c9c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400c9c4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400c9c6:	6822      	ldr	r2, [r4, #0]
2400c9c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400c9ca:	f023 0301 	bic.w	r3, r3, #1
2400c9ce:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400c9d0:	6863      	ldr	r3, [r4, #4]
2400c9d2:	025b      	lsls	r3, r3, #9
2400c9d4:	d506      	bpl.n	2400c9e4 <HAL_SPI_Init+0x148>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400c9d6:	6822      	ldr	r2, [r4, #0]
2400c9d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400c9da:	68d3      	ldr	r3, [r2, #12]
2400c9dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400c9e0:	430b      	orrs	r3, r1
2400c9e2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400c9e4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400c9e6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400c9e8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400c9ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400c9f0:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400c9f2:	6819      	ldr	r1, [r3, #0]
2400c9f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400c9f6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400c9fa:	4301      	orrs	r1, r0
2400c9fc:	6019      	str	r1, [r3, #0]
2400c9fe:	e7af      	b.n	2400c960 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ca00:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400ca04:	d01c      	beq.n	2400ca40 <HAL_SPI_Init+0x1a4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400ca06:	2900      	cmp	r1, #0
2400ca08:	d1a1      	bne.n	2400c94e <HAL_SPI_Init+0xb2>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400ca0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400ca0c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400ca10:	d1a2      	bne.n	2400c958 <HAL_SPI_Init+0xbc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400ca12:	6819      	ldr	r1, [r3, #0]
2400ca14:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
2400ca18:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ca1a:	e9d4 3100 	ldrd	r3, r1, [r4]
2400ca1e:	e796      	b.n	2400c94e <HAL_SPI_Init+0xb2>
    HAL_SPI_MspInit(hspi);
2400ca20:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400ca22:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400ca26:	f7f7 fac9 	bl	24003fbc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400ca2a:	6823      	ldr	r3, [r4, #0]
2400ca2c:	e77f      	b.n	2400c92e <HAL_SPI_Init+0x92>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ca2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ca30:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ca32:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ca34:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400ca36:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ca3a:	e770      	b.n	2400c91e <HAL_SPI_Init+0x82>
    return HAL_ERROR;
2400ca3c:	2001      	movs	r0, #1
}
2400ca3e:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ca40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400ca42:	2900      	cmp	r1, #0
2400ca44:	d0e5      	beq.n	2400ca12 <HAL_SPI_Init+0x176>
2400ca46:	e784      	b.n	2400c952 <HAL_SPI_Init+0xb6>

2400ca48 <HAL_SPI_TransmitReceive_DMA>:
{
2400ca48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400ca4c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400ca4e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400ca52:	2b01      	cmp	r3, #1
2400ca54:	f000 80a3 	beq.w	2400cb9e <HAL_SPI_TransmitReceive_DMA+0x156>
2400ca58:	2301      	movs	r3, #1
2400ca5a:	4604      	mov	r4, r0
2400ca5c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400ca60:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400ca64:	2b01      	cmp	r3, #1
2400ca66:	b2de      	uxtb	r6, r3
2400ca68:	d160      	bne.n	2400cb2c <HAL_SPI_TransmitReceive_DMA+0xe4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400ca6a:	2d00      	cmp	r5, #0
2400ca6c:	bf18      	it	ne
2400ca6e:	2a00      	cmpne	r2, #0
2400ca70:	d056      	beq.n	2400cb20 <HAL_SPI_TransmitReceive_DMA+0xd8>
2400ca72:	fab1 f381 	clz	r3, r1
2400ca76:	095b      	lsrs	r3, r3, #5
2400ca78:	2900      	cmp	r1, #0
2400ca7a:	d051      	beq.n	2400cb20 <HAL_SPI_TransmitReceive_DMA+0xd8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400ca7c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400ca7e:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400ca80:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400ca82:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400ca84:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400ca88:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400ca8c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400ca90:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400ca94:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400ca98:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400ca9c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400caa0:	68d3      	ldr	r3, [r2, #12]
2400caa2:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400caa6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400caa8:	6802      	ldr	r2, [r0, #0]
2400caaa:	6893      	ldr	r3, [r2, #8]
2400caac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400cab0:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400cab2:	68c3      	ldr	r3, [r0, #12]
2400cab4:	2b0f      	cmp	r3, #15
2400cab6:	d940      	bls.n	2400cb3a <HAL_SPI_TransmitReceive_DMA+0xf2>
2400cab8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400caba:	699a      	ldr	r2, [r3, #24]
2400cabc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400cac0:	d12e      	bne.n	2400cb20 <HAL_SPI_TransmitReceive_DMA+0xd8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400cac2:	f64c 6201 	movw	r2, #52737	; 0xce01
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400cac6:	f64c 6811 	movw	r8, #52753	; 0xce11
  hspi->hdmarx->XferAbortCallback = NULL;
2400caca:	f04f 0900 	mov.w	r9, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400cace:	f2c2 4200 	movt	r2, #9216	; 0x2400
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400cad2:	f2c2 4800 	movt	r8, #9216	; 0x2400
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400cad6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400cad8:	f64c 53d9 	movw	r3, #52697	; 0xcdd9
2400cadc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
2400cade:	f2c2 4300 	movt	r3, #9216	; 0x2400
2400cae2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400cae4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400cae6:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400caea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400caec:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400caf0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400caf4:	6821      	ldr	r1, [r4, #0]
2400caf6:	b29b      	uxth	r3, r3
2400caf8:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400cafa:	3130      	adds	r1, #48	; 0x30
2400cafc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400cafe:	f7f9 f925 	bl	24005d4c <HAL_DMA_Start_IT>
2400cb02:	4607      	mov	r7, r0
2400cb04:	2800      	cmp	r0, #0
2400cb06:	d04e      	beq.n	2400cba6 <HAL_SPI_TransmitReceive_DMA+0x15e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400cb08:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400cb0c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400cb0e:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400cb12:	f043 0310 	orr.w	r3, r3, #16
2400cb16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400cb1a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400cb1e:	e002      	b.n	2400cb26 <HAL_SPI_TransmitReceive_DMA+0xde>
    __HAL_UNLOCK(hspi);
2400cb20:	2300      	movs	r3, #0
2400cb22:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400cb26:	4630      	mov	r0, r6
2400cb28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400cb2c:	2300      	movs	r3, #0
    return errorcode;
2400cb2e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400cb30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400cb34:	4630      	mov	r0, r6
2400cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400cb3a:	2b07      	cmp	r3, #7
2400cb3c:	f200 8083 	bhi.w	2400cc46 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400cb40:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400cb42:	6993      	ldr	r3, [r2, #24]
2400cb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400cb48:	d107      	bne.n	2400cb5a <HAL_SPI_TransmitReceive_DMA+0x112>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400cb4a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400cb4e:	b29b      	uxth	r3, r3
2400cb50:	3301      	adds	r3, #1
2400cb52:	085b      	lsrs	r3, r3, #1
2400cb54:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400cb58:	6993      	ldr	r3, [r2, #24]
2400cb5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400cb5e:	d106      	bne.n	2400cb6e <HAL_SPI_TransmitReceive_DMA+0x126>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400cb60:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400cb64:	b29b      	uxth	r3, r3
2400cb66:	3303      	adds	r3, #3
2400cb68:	089b      	lsrs	r3, r3, #2
2400cb6a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400cb6e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400cb70:	699a      	ldr	r2, [r3, #24]
2400cb72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400cb76:	d107      	bne.n	2400cb88 <HAL_SPI_TransmitReceive_DMA+0x140>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400cb78:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400cb7c:	b292      	uxth	r2, r2
2400cb7e:	3201      	adds	r2, #1
2400cb80:	0852      	lsrs	r2, r2, #1
2400cb82:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400cb86:	699a      	ldr	r2, [r3, #24]
2400cb88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400cb8c:	d199      	bne.n	2400cac2 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400cb8e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400cb92:	b292      	uxth	r2, r2
2400cb94:	3203      	adds	r2, #3
2400cb96:	0892      	lsrs	r2, r2, #2
2400cb98:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400cb9c:	e791      	b.n	2400cac2 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400cb9e:	2602      	movs	r6, #2
}
2400cba0:	4630      	mov	r0, r6
2400cba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400cba6:	6822      	ldr	r2, [r4, #0]
2400cba8:	6893      	ldr	r3, [r2, #8]
2400cbaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400cbae:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400cbb0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400cbb2:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400cbb4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400cbb6:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400cbb8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400cbba:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400cbbc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400cbbe:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400cbc2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400cbc6:	6822      	ldr	r2, [r4, #0]
2400cbc8:	b29b      	uxth	r3, r3
2400cbca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400cbcc:	3220      	adds	r2, #32
2400cbce:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400cbd0:	f7f9 f8bc 	bl	24005d4c <HAL_DMA_Start_IT>
2400cbd4:	bb58      	cbnz	r0, 2400cc2e <HAL_SPI_TransmitReceive_DMA+0x1e6>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400cbd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400cbd8:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400cbda:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400cbdc:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400cbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400cbe2:	f04f 0300 	mov.w	r3, #0
2400cbe6:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400cbea:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400cbee:	bf18      	it	ne
2400cbf0:	432b      	orrne	r3, r5
2400cbf2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400cbf4:	6822      	ldr	r2, [r4, #0]
2400cbf6:	6893      	ldr	r3, [r2, #8]
2400cbf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400cbfc:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400cbfe:	6822      	ldr	r2, [r4, #0]
2400cc00:	6913      	ldr	r3, [r2, #16]
2400cc02:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400cc06:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400cc08:	6822      	ldr	r2, [r4, #0]
2400cc0a:	6813      	ldr	r3, [r2, #0]
2400cc0c:	f043 0301 	orr.w	r3, r3, #1
2400cc10:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400cc12:	6863      	ldr	r3, [r4, #4]
2400cc14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400cc18:	d104      	bne.n	2400cc24 <HAL_SPI_TransmitReceive_DMA+0x1dc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400cc1a:	6822      	ldr	r2, [r4, #0]
2400cc1c:	6813      	ldr	r3, [r2, #0]
2400cc1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400cc22:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400cc24:	2300      	movs	r3, #0
  return errorcode;
2400cc26:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400cc28:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400cc2c:	e77b      	b.n	2400cb26 <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400cc2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400cc32:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400cc34:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400cc38:	f043 0310 	orr.w	r3, r3, #16
2400cc3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400cc40:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400cc44:	e76f      	b.n	2400cb26 <HAL_SPI_TransmitReceive_DMA+0xde>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400cc46:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400cc48:	699a      	ldr	r2, [r3, #24]
2400cc4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400cc4e:	d003      	beq.n	2400cc58 <HAL_SPI_TransmitReceive_DMA+0x210>
2400cc50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400cc54:	f47f af64 	bne.w	2400cb20 <HAL_SPI_TransmitReceive_DMA+0xd8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400cc58:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400cc5a:	6989      	ldr	r1, [r1, #24]
2400cc5c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400cc60:	d107      	bne.n	2400cc72 <HAL_SPI_TransmitReceive_DMA+0x22a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400cc62:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400cc66:	b292      	uxth	r2, r2
2400cc68:	3201      	adds	r2, #1
2400cc6a:	0852      	lsrs	r2, r2, #1
2400cc6c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400cc70:	699a      	ldr	r2, [r3, #24]
2400cc72:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400cc76:	f47f af24 	bne.w	2400cac2 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400cc7a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400cc7e:	b292      	uxth	r2, r2
2400cc80:	3201      	adds	r2, #1
2400cc82:	0852      	lsrs	r2, r2, #1
2400cc84:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400cc88:	e71b      	b.n	2400cac2 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400cc8a:	bf00      	nop

2400cc8c <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
2400cc8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400cc90:	2b01      	cmp	r3, #1
2400cc92:	f000 809b 	beq.w	2400cdcc <HAL_SPI_Abort+0x140>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400cc96:	f640 03ec 	movw	r3, #2284	; 0x8ec
2400cc9a:	f641 12f1 	movw	r2, #6641	; 0x19f1
2400cc9e:	2164      	movs	r1, #100	; 0x64
2400cca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
2400cca4:	f2c0 5276 	movt	r2, #1398	; 0x576
{
2400cca8:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ccaa:	681b      	ldr	r3, [r3, #0]
2400ccac:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
2400ccae:	2001      	movs	r0, #1
{
2400ccb0:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ccb2:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400ccb6:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
2400ccb8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
2400ccbc:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ccbe:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
2400ccc0:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ccc4:	fb01 f303 	mul.w	r3, r1, r3
2400ccc8:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400ccca:	6813      	ldr	r3, [r2, #0]
2400cccc:	0598      	lsls	r0, r3, #22
2400ccce:	d53e      	bpl.n	2400cd4e <HAL_SPI_Abort+0xc2>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400ccd0:	6913      	ldr	r3, [r2, #16]
2400ccd2:	f023 0308 	bic.w	r3, r3, #8
2400ccd6:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
2400ccd8:	6822      	ldr	r2, [r4, #0]
2400ccda:	e002      	b.n	2400cce2 <HAL_SPI_Abort+0x56>
2400ccdc:	6913      	ldr	r3, [r2, #16]
2400ccde:	0719      	lsls	r1, r3, #28
2400cce0:	d50b      	bpl.n	2400ccfa <HAL_SPI_Abort+0x6e>
      count--;
2400cce2:	9b01      	ldr	r3, [sp, #4]
2400cce4:	3b01      	subs	r3, #1
2400cce6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400cce8:	9b01      	ldr	r3, [sp, #4]
2400ccea:	2b00      	cmp	r3, #0
2400ccec:	d1f6      	bne.n	2400ccdc <HAL_SPI_Abort+0x50>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400ccee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ccf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ccf6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
2400ccfa:	6813      	ldr	r3, [r2, #0]
2400ccfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400cd00:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
2400cd02:	6822      	ldr	r2, [r4, #0]
2400cd04:	e002      	b.n	2400cd0c <HAL_SPI_Abort+0x80>
2400cd06:	6813      	ldr	r3, [r2, #0]
2400cd08:	059b      	lsls	r3, r3, #22
2400cd0a:	d50b      	bpl.n	2400cd24 <HAL_SPI_Abort+0x98>
      count--;
2400cd0c:	9b01      	ldr	r3, [sp, #4]
2400cd0e:	3b01      	subs	r3, #1
2400cd10:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400cd12:	9b01      	ldr	r3, [sp, #4]
2400cd14:	2b00      	cmp	r3, #0
2400cd16:	d1f6      	bne.n	2400cd06 <HAL_SPI_Abort+0x7a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400cd18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400cd1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400cd20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400cd24:	6993      	ldr	r3, [r2, #24]
2400cd26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400cd2a:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
2400cd2c:	6822      	ldr	r2, [r4, #0]
2400cd2e:	e002      	b.n	2400cd36 <HAL_SPI_Abort+0xaa>
2400cd30:	6953      	ldr	r3, [r2, #20]
2400cd32:	0518      	lsls	r0, r3, #20
2400cd34:	d50b      	bpl.n	2400cd4e <HAL_SPI_Abort+0xc2>
      count--;
2400cd36:	9b01      	ldr	r3, [sp, #4]
2400cd38:	3b01      	subs	r3, #1
2400cd3a:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400cd3c:	9b01      	ldr	r3, [sp, #4]
2400cd3e:	2b00      	cmp	r3, #0
2400cd40:	d1f6      	bne.n	2400cd30 <HAL_SPI_Abort+0xa4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400cd42:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400cd46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400cd4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
2400cd4e:	6893      	ldr	r3, [r2, #8]
2400cd50:	0419      	lsls	r1, r3, #16
2400cd52:	d508      	bpl.n	2400cd66 <HAL_SPI_Abort+0xda>
    if (hspi->hdmatx != NULL)
2400cd54:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400cd56:	b133      	cbz	r3, 2400cd66 <HAL_SPI_Abort+0xda>
      hspi->hdmatx->XferAbortCallback = NULL;
2400cd58:	2200      	movs	r2, #0
2400cd5a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
2400cd5c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400cd5e:	f7f9 fbb5 	bl	240064cc <HAL_DMA_Abort>
2400cd62:	bb00      	cbnz	r0, 2400cda6 <HAL_SPI_Abort+0x11a>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400cd64:	6822      	ldr	r2, [r4, #0]
2400cd66:	6893      	ldr	r3, [r2, #8]
2400cd68:	045b      	lsls	r3, r3, #17
2400cd6a:	d507      	bpl.n	2400cd7c <HAL_SPI_Abort+0xf0>
    if (hspi->hdmarx != NULL)
2400cd6c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400cd6e:	b12b      	cbz	r3, 2400cd7c <HAL_SPI_Abort+0xf0>
      hspi->hdmarx->XferAbortCallback = NULL;
2400cd70:	2200      	movs	r2, #0
2400cd72:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
2400cd74:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400cd76:	f7f9 fba9 	bl	240064cc <HAL_DMA_Abort>
2400cd7a:	b9f0      	cbnz	r0, 2400cdba <HAL_SPI_Abort+0x12e>
  SPI_AbortTransfer(hspi);
2400cd7c:	4620      	mov	r0, r4
2400cd7e:	f7ff fced 	bl	2400c75c <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
2400cd82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400cd86:	f013 0340 	ands.w	r3, r3, #64	; 0x40
2400cd8a:	d10a      	bne.n	2400cda2 <HAL_SPI_Abort+0x116>
  errorcode = HAL_OK;
2400cd8c:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400cd8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
2400cd92:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
2400cd94:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
2400cd96:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
2400cd9a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400cd9e:	b002      	add	sp, #8
2400cda0:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
2400cda2:	2001      	movs	r0, #1
2400cda4:	e7f5      	b.n	2400cd92 <HAL_SPI_Abort+0x106>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
2400cda6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400cda8:	f7fa fd26 	bl	240077f8 <HAL_DMA_GetError>
2400cdac:	2820      	cmp	r0, #32
2400cdae:	d1d9      	bne.n	2400cd64 <HAL_SPI_Abort+0xd8>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400cdb0:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400cdb2:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400cdb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400cdb8:	e7d5      	b.n	2400cd66 <HAL_SPI_Abort+0xda>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
2400cdba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400cdbc:	f7fa fd1c 	bl	240077f8 <HAL_DMA_GetError>
2400cdc0:	2820      	cmp	r0, #32
2400cdc2:	d1db      	bne.n	2400cd7c <HAL_SPI_Abort+0xf0>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400cdc4:	2340      	movs	r3, #64	; 0x40
2400cdc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400cdca:	e7d7      	b.n	2400cd7c <HAL_SPI_Abort+0xf0>
  __HAL_LOCK(hspi);
2400cdcc:	2002      	movs	r0, #2
}
2400cdce:	4770      	bx	lr

2400cdd0 <HAL_SPI_TxCpltCallback>:
2400cdd0:	4770      	bx	lr
2400cdd2:	bf00      	nop

2400cdd4 <HAL_SPI_RxCpltCallback>:
2400cdd4:	4770      	bx	lr
2400cdd6:	bf00      	nop

2400cdd8 <SPI_DMATransmitReceiveCplt>:
{
2400cdd8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400cdda:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400cddc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400cde0:	2b07      	cmp	r3, #7
2400cde2:	d009      	beq.n	2400cdf8 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400cde4:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400cde6:	69db      	ldr	r3, [r3, #28]
2400cde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400cdec:	d005      	beq.n	2400cdfa <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400cdee:	6802      	ldr	r2, [r0, #0]
2400cdf0:	6913      	ldr	r3, [r2, #16]
2400cdf2:	f043 0308 	orr.w	r3, r3, #8
2400cdf6:	6113      	str	r3, [r2, #16]
}
2400cdf8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400cdfa:	f021 faed 	bl	2402e3d8 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400cdfe:	bd08      	pop	{r3, pc}

2400ce00 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400ce00:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400ce02:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400ce04:	f021 faec 	bl	2402e3e0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400ce08:	bd08      	pop	{r3, pc}
2400ce0a:	bf00      	nop

2400ce0c <HAL_SPI_ErrorCallback>:
2400ce0c:	4770      	bx	lr
2400ce0e:	bf00      	nop

2400ce10 <SPI_DMAError>:
{
2400ce10:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400ce12:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400ce14:	f7fa fcf0 	bl	240077f8 <HAL_DMA_GetError>
2400ce18:	2802      	cmp	r0, #2
2400ce1a:	d100      	bne.n	2400ce1e <SPI_DMAError+0xe>
}
2400ce1c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400ce1e:	6823      	ldr	r3, [r4, #0]
2400ce20:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ce22:	6999      	ldr	r1, [r3, #24]
2400ce24:	f041 0108 	orr.w	r1, r1, #8
2400ce28:	6199      	str	r1, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400ce2a:	6821      	ldr	r1, [r4, #0]
2400ce2c:	698b      	ldr	r3, [r1, #24]
2400ce2e:	f043 0310 	orr.w	r3, r3, #16
2400ce32:	618b      	str	r3, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400ce34:	6821      	ldr	r1, [r4, #0]
2400ce36:	680b      	ldr	r3, [r1, #0]
2400ce38:	f023 0301 	bic.w	r3, r3, #1
2400ce3c:	600b      	str	r3, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400ce3e:	f64f 4390 	movw	r3, #64656	; 0xfc90
2400ce42:	6821      	ldr	r1, [r4, #0]
2400ce44:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400ce48:	6908      	ldr	r0, [r1, #16]
2400ce4a:	4003      	ands	r3, r0
2400ce4c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ce4e:	6821      	ldr	r1, [r4, #0]
2400ce50:	688b      	ldr	r3, [r1, #8]
2400ce52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400ce56:	608b      	str	r3, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400ce58:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
2400ce5c:	2b04      	cmp	r3, #4
2400ce5e:	d001      	beq.n	2400ce64 <SPI_DMAError+0x54>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400ce60:	0693      	lsls	r3, r2, #26
2400ce62:	d43d      	bmi.n	2400cee0 <SPI_DMAError+0xd0>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400ce64:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
2400ce68:	2b03      	cmp	r3, #3
2400ce6a:	d001      	beq.n	2400ce70 <SPI_DMAError+0x60>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400ce6c:	0650      	lsls	r0, r2, #25
2400ce6e:	d42b      	bmi.n	2400cec8 <SPI_DMAError+0xb8>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400ce70:	0591      	lsls	r1, r2, #22
2400ce72:	d50a      	bpl.n	2400ce8a <SPI_DMAError+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ce74:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ce78:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ce7a:	f043 0301 	orr.w	r3, r3, #1
2400ce7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ce82:	698b      	ldr	r3, [r1, #24]
2400ce84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ce88:	618b      	str	r3, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400ce8a:	05d3      	lsls	r3, r2, #23
2400ce8c:	d50a      	bpl.n	2400cea4 <SPI_DMAError+0x94>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ce8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ce92:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ce94:	f043 0308 	orr.w	r3, r3, #8
2400ce98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ce9c:	6993      	ldr	r3, [r2, #24]
2400ce9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400cea2:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400cea4:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400cea6:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400cea8:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400ceaa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ceae:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ceb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ceb6:	f043 0310 	orr.w	r3, r3, #16
2400ceba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400cebe:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400cec2:	f7ff ffa3 	bl	2400ce0c <HAL_SPI_ErrorCallback>
}
2400cec6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400cec8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400cecc:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400cece:	f043 0304 	orr.w	r3, r3, #4
2400ced2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ced6:	698b      	ldr	r3, [r1, #24]
2400ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400cedc:	618b      	str	r3, [r1, #24]
2400cede:	e7c7      	b.n	2400ce70 <SPI_DMAError+0x60>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400cee0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400cee4:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400cee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400ceea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400ceee:	698b      	ldr	r3, [r1, #24]
2400cef0:	f043 0320 	orr.w	r3, r3, #32
2400cef4:	618b      	str	r3, [r1, #24]
2400cef6:	e7b5      	b.n	2400ce64 <SPI_DMAError+0x54>

2400cef8 <SPI_DMAAbortOnError>:
{
2400cef8:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400cefa:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400cefc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400cefe:	2300      	movs	r3, #0
2400cf00:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400cf04:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400cf08:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400cf0c:	f7ff ff7e 	bl	2400ce0c <HAL_SPI_ErrorCallback>
}
2400cf10:	bd08      	pop	{r3, pc}
2400cf12:	bf00      	nop

2400cf14 <HAL_SPI_SuspendCallback>:
2400cf14:	4770      	bx	lr
2400cf16:	bf00      	nop

2400cf18 <HAL_SPI_IRQHandler>:
{
2400cf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
2400cf1c:	6805      	ldr	r5, [r0, #0]
{
2400cf1e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400cf20:	692a      	ldr	r2, [r5, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400cf22:	696b      	ldr	r3, [r5, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400cf24:	f8d5 8008 	ldr.w	r8, [r5, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400cf28:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400cf2a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400cf2e:	ea02 0703 	and.w	r7, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400cf32:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400cf34:	d502      	bpl.n	2400cf3c <HAL_SPI_IRQHandler+0x24>
2400cf36:	0713      	lsls	r3, r2, #28
2400cf38:	f100 8106 	bmi.w	2400d148 <HAL_SPI_IRQHandler+0x230>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400cf3c:	f007 0364 	and.w	r3, r7, #100	; 0x64
2400cf40:	2b04      	cmp	r3, #4
2400cf42:	d076      	beq.n	2400d032 <HAL_SPI_IRQHandler+0x11a>
  uint32_t handled  = 0UL;
2400cf44:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400cf46:	f007 0345 	and.w	r3, r7, #69	; 0x45
2400cf4a:	2b01      	cmp	r3, #1
2400cf4c:	d045      	beq.n	2400cfda <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400cf4e:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400cf52:	2b02      	cmp	r3, #2
2400cf54:	d048      	beq.n	2400cfe8 <HAL_SPI_IRQHandler+0xd0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400cf56:	0579      	lsls	r1, r7, #21
2400cf58:	f100 80ed 	bmi.w	2400d136 <HAL_SPI_IRQHandler+0x21e>
  if (handled != 0UL)
2400cf5c:	2a00      	cmp	r2, #0
2400cf5e:	d150      	bne.n	2400d002 <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400cf60:	073b      	lsls	r3, r7, #28
2400cf62:	d56e      	bpl.n	2400d042 <HAL_SPI_IRQHandler+0x12a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400cf64:	6822      	ldr	r2, [r4, #0]
2400cf66:	6993      	ldr	r3, [r2, #24]
2400cf68:	f043 0308 	orr.w	r3, r3, #8
2400cf6c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400cf6e:	6822      	ldr	r2, [r4, #0]
2400cf70:	6993      	ldr	r3, [r2, #24]
2400cf72:	f043 0310 	orr.w	r3, r3, #16
2400cf76:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400cf78:	6822      	ldr	r2, [r4, #0]
2400cf7a:	6993      	ldr	r3, [r2, #24]
2400cf7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400cf80:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400cf82:	6822      	ldr	r2, [r4, #0]
2400cf84:	6913      	ldr	r3, [r2, #16]
2400cf86:	f023 0308 	bic.w	r3, r3, #8
2400cf8a:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400cf8c:	6823      	ldr	r3, [r4, #0]
2400cf8e:	689b      	ldr	r3, [r3, #8]
2400cf90:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400cf94:	d137      	bne.n	2400d006 <HAL_SPI_IRQHandler+0xee>
      while (hspi->RxXferCount != 0UL)
2400cf96:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400cf9a:	b29b      	uxth	r3, r3
2400cf9c:	2b00      	cmp	r3, #0
2400cf9e:	d032      	beq.n	2400d006 <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400cfa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400cfa2:	e00f      	b.n	2400cfc4 <HAL_SPI_IRQHandler+0xac>
2400cfa4:	6823      	ldr	r3, [r4, #0]
2400cfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400cfa8:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400cfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400cfac:	3204      	adds	r2, #4
        hspi->RxXferCount--;
2400cfae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400cfb2:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400cfb4:	3b01      	subs	r3, #1
2400cfb6:	b29b      	uxth	r3, r3
2400cfb8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400cfbc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400cfc0:	b29b      	uxth	r3, r3
2400cfc2:	b303      	cbz	r3, 2400d006 <HAL_SPI_IRQHandler+0xee>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400cfc4:	68e3      	ldr	r3, [r4, #12]
2400cfc6:	2b0f      	cmp	r3, #15
2400cfc8:	d8ec      	bhi.n	2400cfa4 <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400cfca:	2b07      	cmp	r3, #7
2400cfcc:	f240 80cc 	bls.w	2400d168 <HAL_SPI_IRQHandler+0x250>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400cfd0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
2400cfd2:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400cfd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400cfd6:	3202      	adds	r2, #2
2400cfd8:	e7e9      	b.n	2400cfae <HAL_SPI_IRQHandler+0x96>
    hspi->RxISR(hspi);
2400cfda:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400cfdc:	4620      	mov	r0, r4
2400cfde:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400cfe0:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400cfe4:	2b02      	cmp	r3, #2
2400cfe6:	d102      	bne.n	2400cfee <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
2400cfe8:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400cfea:	4620      	mov	r0, r4
2400cfec:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400cfee:	0578      	lsls	r0, r7, #21
2400cff0:	d507      	bpl.n	2400d002 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400cff2:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400cff4:	2300      	movs	r3, #0
2400cff6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400cffa:	6993      	ldr	r3, [r2, #24]
2400cffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400d000:	6193      	str	r3, [r2, #24]
}
2400d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
2400d006:	4620      	mov	r0, r4
2400d008:	f7ff fbe4 	bl	2400c7d4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400d00c:	2301      	movs	r3, #1
2400d00e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400d012:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400d016:	2b00      	cmp	r3, #0
2400d018:	f040 80a2 	bne.w	2400d160 <HAL_SPI_IRQHandler+0x248>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400d01c:	2e05      	cmp	r6, #5
2400d01e:	f000 80aa 	beq.w	2400d176 <HAL_SPI_IRQHandler+0x25e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400d022:	2e04      	cmp	r6, #4
2400d024:	f000 80aa 	beq.w	2400d17c <HAL_SPI_IRQHandler+0x264>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400d028:	2e03      	cmp	r6, #3
2400d02a:	d1ea      	bne.n	2400d002 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_TxCpltCallback(hspi);
2400d02c:	f7ff fed0 	bl	2400cdd0 <HAL_SPI_TxCpltCallback>
2400d030:	e7e7      	b.n	2400d002 <HAL_SPI_IRQHandler+0xea>
    hspi->TxISR(hspi);
2400d032:	4620      	mov	r0, r4
2400d034:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400d036:	4798      	blx	r3
    hspi->RxISR(hspi);
2400d038:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400d03a:	4620      	mov	r0, r4
2400d03c:	4798      	blx	r3
    handled = 1UL;
2400d03e:	2201      	movs	r2, #1
2400d040:	e781      	b.n	2400cf46 <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400d042:	f417 7f58 	tst.w	r7, #864	; 0x360
2400d046:	d0dc      	beq.n	2400d002 <HAL_SPI_IRQHandler+0xea>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400d048:	0678      	lsls	r0, r7, #25
2400d04a:	d50a      	bpl.n	2400d062 <HAL_SPI_IRQHandler+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400d04c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400d050:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400d052:	f043 0304 	orr.w	r3, r3, #4
2400d056:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400d05a:	6993      	ldr	r3, [r2, #24]
2400d05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400d060:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400d062:	05b9      	lsls	r1, r7, #22
2400d064:	d50a      	bpl.n	2400d07c <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400d066:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400d06a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400d06c:	f043 0301 	orr.w	r3, r3, #1
2400d070:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400d074:	6993      	ldr	r3, [r2, #24]
2400d076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400d07a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400d07c:	05fa      	lsls	r2, r7, #23
2400d07e:	d50a      	bpl.n	2400d096 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400d080:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400d084:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400d086:	f043 0308 	orr.w	r3, r3, #8
2400d08a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400d08e:	6993      	ldr	r3, [r2, #24]
2400d090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400d094:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400d096:	06bb      	lsls	r3, r7, #26
2400d098:	d50a      	bpl.n	2400d0b0 <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400d09a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400d09e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400d0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400d0a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400d0a8:	6993      	ldr	r3, [r2, #24]
2400d0aa:	f043 0320 	orr.w	r3, r3, #32
2400d0ae:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400d0b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400d0b4:	2b00      	cmp	r3, #0
2400d0b6:	d0a4      	beq.n	2400d002 <HAL_SPI_IRQHandler+0xea>
      __HAL_SPI_DISABLE(hspi);
2400d0b8:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400d0ba:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400d0be:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400d0c0:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400d0c4:	f023 0301 	bic.w	r3, r3, #1
2400d0c8:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400d0ca:	f64f 4394 	movw	r3, #64660	; 0xfc94
2400d0ce:	6822      	ldr	r2, [r4, #0]
2400d0d0:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400d0d4:	6911      	ldr	r1, [r2, #16]
2400d0d6:	ea03 0301 	and.w	r3, r3, r1
2400d0da:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400d0dc:	d13c      	bne.n	2400d158 <HAL_SPI_IRQHandler+0x240>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400d0de:	6822      	ldr	r2, [r4, #0]
2400d0e0:	6893      	ldr	r3, [r2, #8]
2400d0e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400d0e6:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400d0e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400d0ea:	b173      	cbz	r3, 2400d10a <HAL_SPI_IRQHandler+0x1f2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400d0ec:	f64c 62f9 	movw	r2, #52985	; 0xcef9
2400d0f0:	f2c2 4200 	movt	r2, #9216	; 0x2400
2400d0f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400d0f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400d0f8:	f7f9 fcae 	bl	24006a58 <HAL_DMA_Abort_IT>
2400d0fc:	b128      	cbz	r0, 2400d10a <HAL_SPI_IRQHandler+0x1f2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400d0fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400d102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400d106:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400d10a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400d10c:	2b00      	cmp	r3, #0
2400d10e:	f43f af78 	beq.w	2400d002 <HAL_SPI_IRQHandler+0xea>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400d112:	f64c 62f9 	movw	r2, #52985	; 0xcef9
2400d116:	f2c2 4200 	movt	r2, #9216	; 0x2400
2400d11a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400d11c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400d11e:	f7f9 fc9b 	bl	24006a58 <HAL_DMA_Abort_IT>
2400d122:	2800      	cmp	r0, #0
2400d124:	f43f af6d 	beq.w	2400d002 <HAL_SPI_IRQHandler+0xea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400d128:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400d12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400d130:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400d134:	e765      	b.n	2400d002 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400d136:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400d138:	2300      	movs	r3, #0
2400d13a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400d13e:	698b      	ldr	r3, [r1, #24]
2400d140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400d144:	618b      	str	r3, [r1, #24]
2400d146:	e709      	b.n	2400cf5c <HAL_SPI_IRQHandler+0x44>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400d148:	69ab      	ldr	r3, [r5, #24]
2400d14a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400d14e:	61ab      	str	r3, [r5, #24]
    HAL_SPI_SuspendCallback(hspi);
2400d150:	f7ff fee0 	bl	2400cf14 <HAL_SPI_SuspendCallback>
}
2400d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
2400d158:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400d15a:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400d15c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400d160:	f7ff fe54 	bl	2400ce0c <HAL_SPI_ErrorCallback>
}
2400d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400d168:	6823      	ldr	r3, [r4, #0]
2400d16a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400d16e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400d170:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400d172:	3201      	adds	r2, #1
2400d174:	e71b      	b.n	2400cfae <HAL_SPI_IRQHandler+0x96>
      HAL_SPI_TxRxCpltCallback(hspi);
2400d176:	f021 f92f 	bl	2402e3d8 <__HAL_SPI_TxRxCpltCallback_veneer>
2400d17a:	e742      	b.n	2400d002 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_RxCpltCallback(hspi);
2400d17c:	f7ff fe2a 	bl	2400cdd4 <HAL_SPI_RxCpltCallback>
2400d180:	e73f      	b.n	2400d002 <HAL_SPI_IRQHandler+0xea>
2400d182:	bf00      	nop

2400d184 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400d184:	680b      	ldr	r3, [r1, #0]
{
2400d186:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400d188:	b9e3      	cbnz	r3, 2400d1c4 <FMC_SDRAM_Init+0x40>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400d18a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d18e:	6804      	ldr	r4, [r0, #0]
2400d190:	684a      	ldr	r2, [r1, #4]
2400d192:	f6cf 73ff 	movt	r3, #65535	; 0xffff
2400d196:	4023      	ands	r3, r4
2400d198:	4313      	orrs	r3, r2
2400d19a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400d19e:	4323      	orrs	r3, r4
2400d1a0:	4313      	orrs	r3, r2
2400d1a2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400d1a6:	4323      	orrs	r3, r4
2400d1a8:	4313      	orrs	r3, r2
2400d1aa:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400d1ae:	4323      	orrs	r3, r4
2400d1b0:	4313      	orrs	r3, r2
2400d1b2:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400d1b6:	4323      	orrs	r3, r4
2400d1b8:	4313      	orrs	r3, r2
2400d1ba:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400d1bc:	2000      	movs	r0, #0
2400d1be:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d1c2:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400d1c4:	6802      	ldr	r2, [r0, #0]
2400d1c6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400d1ca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400d1ce:	4322      	orrs	r2, r4
2400d1d0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400d1d2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400d1d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400d1d8:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400d1da:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400d1de:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400d1e0:	6842      	ldr	r2, [r0, #4]
2400d1e2:	4013      	ands	r3, r2
2400d1e4:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400d1e8:	4323      	orrs	r3, r4
2400d1ea:	4313      	orrs	r3, r2
2400d1ec:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400d1f0:	4323      	orrs	r3, r4
2400d1f2:	4313      	orrs	r3, r2
2400d1f4:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400d1f8:	4323      	orrs	r3, r4
2400d1fa:	4313      	orrs	r3, r2
2400d1fc:	6043      	str	r3, [r0, #4]
}
2400d1fe:	2000      	movs	r0, #0
2400d200:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d204:	4770      	bx	lr
2400d206:	bf00      	nop

2400d208 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400d208:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400d20a:	bb0a      	cbnz	r2, 2400d250 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400d20c:	6883      	ldr	r3, [r0, #8]
2400d20e:	e9d1 2400 	ldrd	r2, r4, [r1]
2400d212:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d216:	3c01      	subs	r4, #1
2400d218:	3a01      	subs	r2, #1
2400d21a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400d21e:	4313      	orrs	r3, r2
2400d220:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400d224:	3c01      	subs	r4, #1
2400d226:	3a01      	subs	r2, #1
2400d228:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
2400d22c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
2400d230:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400d234:	698a      	ldr	r2, [r1, #24]
2400d236:	3d01      	subs	r5, #1
2400d238:	1e61      	subs	r1, r4, #1
2400d23a:	3a01      	subs	r2, #1
2400d23c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
2400d240:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400d244:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400d248:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400d24a:	2000      	movs	r0, #0
2400d24c:	bc30      	pop	{r4, r5}
2400d24e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400d250:	f640 73ff 	movw	r3, #4095	; 0xfff
2400d254:	6885      	ldr	r5, [r0, #8]
2400d256:	68ca      	ldr	r2, [r1, #12]
2400d258:	f6cf 730f 	movt	r3, #65295	; 0xff0f
2400d25c:	1e54      	subs	r4, r2, #1
2400d25e:	694a      	ldr	r2, [r1, #20]
2400d260:	402b      	ands	r3, r5
2400d262:	3a01      	subs	r2, #1
2400d264:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400d268:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400d26c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400d26e:	68c3      	ldr	r3, [r0, #12]
2400d270:	688d      	ldr	r5, [r1, #8]
2400d272:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d276:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2400d27a:	e9d1 2400 	ldrd	r2, r4, [r1]
2400d27e:	3c01      	subs	r4, #1
2400d280:	3a01      	subs	r2, #1
2400d282:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400d286:	690c      	ldr	r4, [r1, #16]
2400d288:	4313      	orrs	r3, r2
2400d28a:	698a      	ldr	r2, [r1, #24]
2400d28c:	1e61      	subs	r1, r4, #1
2400d28e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400d292:	3a01      	subs	r2, #1
2400d294:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400d298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400d29c:	60c3      	str	r3, [r0, #12]
}
2400d29e:	2000      	movs	r0, #0
2400d2a0:	bc30      	pop	{r4, r5}
2400d2a2:	4770      	bx	lr

2400d2a4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400d2a4:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400d2a6:	2000      	movs	r0, #0
{
2400d2a8:	b430      	push	{r4, r5}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400d2aa:	f6cf 70c0 	movt	r0, #65472	; 0xffc0
2400d2ae:	684d      	ldr	r5, [r1, #4]
2400d2b0:	680b      	ldr	r3, [r1, #0]
2400d2b2:	6914      	ldr	r4, [r2, #16]
2400d2b4:	432b      	orrs	r3, r5
2400d2b6:	4020      	ands	r0, r4
2400d2b8:	e9d1 4102 	ldrd	r4, r1, [r1, #8]
2400d2bc:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
2400d2c0:	1e61      	subs	r1, r4, #1
2400d2c2:	4303      	orrs	r3, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400d2c4:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400d2c6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400d2ca:	6113      	str	r3, [r2, #16]
}
2400d2cc:	bc30      	pop	{r4, r5}
2400d2ce:	4770      	bx	lr

2400d2d0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400d2d0:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400d2d2:	f24c 0301 	movw	r3, #49153	; 0xc001

  return HAL_OK;
}
2400d2d6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400d2d8:	f6cf 73ff 	movt	r3, #65535	; 0xffff
{
2400d2dc:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400d2de:	6954      	ldr	r4, [r2, #20]
2400d2e0:	4023      	ands	r3, r4
2400d2e2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400d2e6:	6151      	str	r1, [r2, #20]
}
2400d2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d2ec:	4770      	bx	lr
2400d2ee:	bf00      	nop

2400d2f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400d2f0:	b084      	sub	sp, #16
2400d2f2:	b410      	push	{r4}
2400d2f4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
             Init.ClockPowerSave      | \
             Init.BusWide             | \
2400d2f8:	9c05      	ldr	r4, [sp, #20]
{
2400d2fa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
2400d2fe:	4602      	mov	r2, r0
  tmpreg |= (Init.ClockEdge           | \
2400d300:	460b      	mov	r3, r1
2400d302:	9803      	ldr	r0, [sp, #12]
             Init.ClockPowerSave      | \
2400d304:	9904      	ldr	r1, [sp, #16]
  tmpreg |= (Init.ClockEdge           | \
2400d306:	4303      	orrs	r3, r0
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400d308:	6850      	ldr	r0, [r2, #4]
             Init.ClockPowerSave      | \
2400d30a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400d30c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
             Init.BusWide             | \
2400d310:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400d312:	f6cf 71c0 	movt	r1, #65472	; 0xffc0
             Init.HardwareFlowControl | \
2400d316:	9c06      	ldr	r4, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400d318:	4001      	ands	r1, r0

  return HAL_OK;
}
2400d31a:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400d31c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400d31e:	430b      	orrs	r3, r1
2400d320:	6053      	str	r3, [r2, #4]
}
2400d322:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d326:	b004      	add	sp, #16
2400d328:	4770      	bx	lr
2400d32a:	bf00      	nop

2400d32c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400d32c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400d330:	4770      	bx	lr
2400d332:	bf00      	nop

2400d334 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400d334:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400d336:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400d338:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400d33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400d33e:	4770      	bx	lr

2400d340 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400d340:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400d342:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400d344:	681a      	ldr	r2, [r3, #0]
2400d346:	f042 0203 	orr.w	r2, r2, #3
2400d34a:	601a      	str	r2, [r3, #0]
}
2400d34c:	4770      	bx	lr
2400d34e:	bf00      	nop

2400d350 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400d350:	6800      	ldr	r0, [r0, #0]
}
2400d352:	f000 0003 	and.w	r0, r0, #3
2400d356:	4770      	bx	lr

2400d358 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400d358:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400d35a:	5840      	ldr	r0, [r0, r1]
}
2400d35c:	4770      	bx	lr
2400d35e:	bf00      	nop

2400d360 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400d360:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400d362:	680b      	ldr	r3, [r1, #0]
{
2400d364:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400d366:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400d368:	684b      	ldr	r3, [r1, #4]
2400d36a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400d36c:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400d36e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400d370:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400d374:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400d376:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400d378:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400d37c:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400d37e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400d380:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400d382:	430b      	orrs	r3, r1
2400d384:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400d386:	bc30      	pop	{r4, r5}
2400d388:	4770      	bx	lr
2400d38a:	bf00      	nop

2400d38c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d38c:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d390:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400d394:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d396:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d39a:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400d39e:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3a0:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400d3a4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3a6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3a8:	f241 1110 	movw	r1, #4368	; 0x1110
2400d3ac:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3ae:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3b2:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3b4:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3b8:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3ba:	0a52      	lsrs	r2, r2, #9
2400d3bc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3c0:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3c4:	fb03 f202 	mul.w	r2, r3, r2

  do
  {
    if (count-- == 0U)
2400d3c8:	b162      	cbz	r2, 2400d3e4 <SDMMC_CmdBlockLength+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d3ca:	2145      	movs	r1, #69	; 0x45
2400d3cc:	1e53      	subs	r3, r2, #1
2400d3ce:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400d3d2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d3d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d3d8:	420a      	tst	r2, r1
2400d3da:	d001      	beq.n	2400d3e0 <SDMMC_CmdBlockLength+0x54>
2400d3dc:	0492      	lsls	r2, r2, #18
2400d3de:	d505      	bpl.n	2400d3ec <SDMMC_CmdBlockLength+0x60>
    if (count-- == 0U)
2400d3e0:	1c58      	adds	r0, r3, #1
2400d3e2:	d1f6      	bne.n	2400d3d2 <SDMMC_CmdBlockLength+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400d3e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d3e8:	f85d fb04 	ldr.w	pc, [sp], #4

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d3ec:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d3f0:	0758      	lsls	r0, r3, #29
2400d3f2:	d447      	bmi.n	2400d484 <SDMMC_CmdBlockLength+0xf8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d3f4:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d3f8:	f010 0001 	ands.w	r0, r0, #1
2400d3fc:	d13c      	bne.n	2400d478 <SDMMC_CmdBlockLength+0xec>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d3fe:	23c5      	movs	r3, #197	; 0xc5
2400d400:	f2c0 0320 	movt	r3, #32
2400d404:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d408:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d40c:	b2db      	uxtb	r3, r3
2400d40e:	2b10      	cmp	r3, #16
2400d410:	d136      	bne.n	2400d480 <SDMMC_CmdBlockLength+0xf4>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d412:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400d416:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d41a:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400d41e:	4018      	ands	r0, r3
2400d420:	2800      	cmp	r0, #0
2400d422:	d0e1      	beq.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d424:	2b00      	cmp	r3, #0
2400d426:	db32      	blt.n	2400d48e <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d428:	0059      	lsls	r1, r3, #1
2400d42a:	d433      	bmi.n	2400d494 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d42c:	009a      	lsls	r2, r3, #2
2400d42e:	d433      	bmi.n	2400d498 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d430:	00d9      	lsls	r1, r3, #3
2400d432:	d433      	bmi.n	2400d49c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d434:	011a      	lsls	r2, r3, #4
2400d436:	d434      	bmi.n	2400d4a2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d438:	0159      	lsls	r1, r3, #5
2400d43a:	d435      	bmi.n	2400d4a8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d43c:	01da      	lsls	r2, r3, #7
2400d43e:	d436      	bmi.n	2400d4ae <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d440:	0219      	lsls	r1, r3, #8
2400d442:	d437      	bmi.n	2400d4b4 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d444:	025a      	lsls	r2, r3, #9
2400d446:	d438      	bmi.n	2400d4ba <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d448:	0299      	lsls	r1, r3, #10
2400d44a:	d442      	bmi.n	2400d4d2 <SDMMC_CmdBlockLength+0x146>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d44c:	02da      	lsls	r2, r3, #11
2400d44e:	d43d      	bmi.n	2400d4cc <SDMMC_CmdBlockLength+0x140>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d450:	0359      	lsls	r1, r3, #13
2400d452:	d438      	bmi.n	2400d4c6 <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d454:	039a      	lsls	r2, r3, #14
2400d456:	d433      	bmi.n	2400d4c0 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d458:	03d9      	lsls	r1, r3, #15
2400d45a:	d446      	bmi.n	2400d4ea <SDMMC_CmdBlockLength+0x15e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d45c:	041a      	lsls	r2, r3, #16
2400d45e:	d441      	bmi.n	2400d4e4 <SDMMC_CmdBlockLength+0x158>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d460:	0459      	lsls	r1, r3, #17
2400d462:	d43c      	bmi.n	2400d4de <SDMMC_CmdBlockLength+0x152>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d464:	049a      	lsls	r2, r3, #18
2400d466:	d437      	bmi.n	2400d4d8 <SDMMC_CmdBlockLength+0x14c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d468:	f013 0f08 	tst.w	r3, #8
2400d46c:	bf14      	ite	ne
2400d46e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d472:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d476:	e7b7      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d478:	2301      	movs	r3, #1
2400d47a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d47e:	e7b3      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d480:	2001      	movs	r0, #1
2400d482:	e7b1      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d484:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d486:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d488:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d48c:	e7ac      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d48e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d492:	e7a9      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d494:	2040      	movs	r0, #64	; 0x40
2400d496:	e7a7      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d498:	2080      	movs	r0, #128	; 0x80
2400d49a:	e7a5      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d49c:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d4a0:	e7a2      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d4a2:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d4a6:	e79f      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d4a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d4ac:	e79c      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d4ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d4b2:	e799      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d4b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d4b8:	e796      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d4ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d4be:	e793      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d4c0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d4c4:	e790      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d4c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d4ca:	e78d      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400d4cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d4d0:	e78a      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d4d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d4d6:	e787      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400d4d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d4dc:	e784      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d4de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d4e2:	e781      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d4e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d4e8:	e77e      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d4ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d4ee:	e77b      	b.n	2400d3e8 <SDMMC_CmdBlockLength+0x5c>

2400d4f0 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d4f0:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4f4:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400d4f8:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d4fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4fe:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400d502:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d504:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400d508:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d50a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d50c:	f241 1111 	movw	r1, #4369	; 0x1111
2400d510:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d512:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d516:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d518:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d51c:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d51e:	0a52      	lsrs	r2, r2, #9
2400d520:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d524:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d528:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400d52c:	b162      	cbz	r2, 2400d548 <SDMMC_CmdReadSingleBlock+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d52e:	2145      	movs	r1, #69	; 0x45
2400d530:	1e53      	subs	r3, r2, #1
2400d532:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400d536:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d53a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d53c:	420a      	tst	r2, r1
2400d53e:	d001      	beq.n	2400d544 <SDMMC_CmdReadSingleBlock+0x54>
2400d540:	0492      	lsls	r2, r2, #18
2400d542:	d505      	bpl.n	2400d550 <SDMMC_CmdReadSingleBlock+0x60>
    if (count-- == 0U)
2400d544:	1c58      	adds	r0, r3, #1
2400d546:	d1f6      	bne.n	2400d536 <SDMMC_CmdReadSingleBlock+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400d548:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d54c:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d550:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d554:	0758      	lsls	r0, r3, #29
2400d556:	d447      	bmi.n	2400d5e8 <SDMMC_CmdReadSingleBlock+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d558:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d55c:	f010 0001 	ands.w	r0, r0, #1
2400d560:	d13c      	bne.n	2400d5dc <SDMMC_CmdReadSingleBlock+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d562:	23c5      	movs	r3, #197	; 0xc5
2400d564:	f2c0 0320 	movt	r3, #32
2400d568:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d56c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d570:	b2db      	uxtb	r3, r3
2400d572:	2b11      	cmp	r3, #17
2400d574:	d136      	bne.n	2400d5e4 <SDMMC_CmdReadSingleBlock+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d576:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400d57a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d57e:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400d582:	4018      	ands	r0, r3
2400d584:	2800      	cmp	r0, #0
2400d586:	d0e1      	beq.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d588:	2b00      	cmp	r3, #0
2400d58a:	db32      	blt.n	2400d5f2 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d58c:	0059      	lsls	r1, r3, #1
2400d58e:	d433      	bmi.n	2400d5f8 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d590:	009a      	lsls	r2, r3, #2
2400d592:	d433      	bmi.n	2400d5fc <SDMMC_CmdReadSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d594:	00d9      	lsls	r1, r3, #3
2400d596:	d433      	bmi.n	2400d600 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d598:	011a      	lsls	r2, r3, #4
2400d59a:	d434      	bmi.n	2400d606 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d59c:	0159      	lsls	r1, r3, #5
2400d59e:	d435      	bmi.n	2400d60c <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d5a0:	01da      	lsls	r2, r3, #7
2400d5a2:	d436      	bmi.n	2400d612 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d5a4:	0219      	lsls	r1, r3, #8
2400d5a6:	d437      	bmi.n	2400d618 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d5a8:	025a      	lsls	r2, r3, #9
2400d5aa:	d438      	bmi.n	2400d61e <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d5ac:	0299      	lsls	r1, r3, #10
2400d5ae:	d442      	bmi.n	2400d636 <SDMMC_CmdReadSingleBlock+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d5b0:	02da      	lsls	r2, r3, #11
2400d5b2:	d43d      	bmi.n	2400d630 <SDMMC_CmdReadSingleBlock+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d5b4:	0359      	lsls	r1, r3, #13
2400d5b6:	d438      	bmi.n	2400d62a <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d5b8:	039a      	lsls	r2, r3, #14
2400d5ba:	d433      	bmi.n	2400d624 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d5bc:	03d9      	lsls	r1, r3, #15
2400d5be:	d446      	bmi.n	2400d64e <SDMMC_CmdReadSingleBlock+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d5c0:	041a      	lsls	r2, r3, #16
2400d5c2:	d441      	bmi.n	2400d648 <SDMMC_CmdReadSingleBlock+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d5c4:	0459      	lsls	r1, r3, #17
2400d5c6:	d43c      	bmi.n	2400d642 <SDMMC_CmdReadSingleBlock+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d5c8:	049a      	lsls	r2, r3, #18
2400d5ca:	d437      	bmi.n	2400d63c <SDMMC_CmdReadSingleBlock+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d5cc:	f013 0f08 	tst.w	r3, #8
2400d5d0:	bf14      	ite	ne
2400d5d2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d5d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d5da:	e7b7      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d5dc:	2301      	movs	r3, #1
2400d5de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d5e2:	e7b3      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d5e4:	2001      	movs	r0, #1
2400d5e6:	e7b1      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5e8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5ea:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5ec:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5f0:	e7ac      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d5f2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d5f6:	e7a9      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d5f8:	2040      	movs	r0, #64	; 0x40
2400d5fa:	e7a7      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d5fc:	2080      	movs	r0, #128	; 0x80
2400d5fe:	e7a5      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d600:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d604:	e7a2      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d606:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d60a:	e79f      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d60c:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d610:	e79c      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d612:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d616:	e799      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d618:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d61c:	e796      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d61e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d622:	e793      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d624:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d628:	e790      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d62a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d62e:	e78d      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400d630:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d634:	e78a      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d636:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d63a:	e787      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400d63c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d640:	e784      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d642:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d646:	e781      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d648:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d64c:	e77e      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d64e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d652:	e77b      	b.n	2400d54c <SDMMC_CmdReadSingleBlock+0x5c>

2400d654 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d654:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d658:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400d65c:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d65e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d662:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400d666:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d668:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400d66c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d66e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d670:	f241 1112 	movw	r1, #4370	; 0x1112
2400d674:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d676:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d67a:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d67c:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d680:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d682:	0a52      	lsrs	r2, r2, #9
2400d684:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d688:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d68c:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400d690:	b162      	cbz	r2, 2400d6ac <SDMMC_CmdReadMultiBlock+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d692:	2145      	movs	r1, #69	; 0x45
2400d694:	1e53      	subs	r3, r2, #1
2400d696:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400d69a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d69e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d6a0:	420a      	tst	r2, r1
2400d6a2:	d001      	beq.n	2400d6a8 <SDMMC_CmdReadMultiBlock+0x54>
2400d6a4:	0492      	lsls	r2, r2, #18
2400d6a6:	d505      	bpl.n	2400d6b4 <SDMMC_CmdReadMultiBlock+0x60>
    if (count-- == 0U)
2400d6a8:	1c58      	adds	r0, r3, #1
2400d6aa:	d1f6      	bne.n	2400d69a <SDMMC_CmdReadMultiBlock+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400d6ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d6b0:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d6b4:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d6b8:	0758      	lsls	r0, r3, #29
2400d6ba:	d447      	bmi.n	2400d74c <SDMMC_CmdReadMultiBlock+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d6bc:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d6c0:	f010 0001 	ands.w	r0, r0, #1
2400d6c4:	d13c      	bne.n	2400d740 <SDMMC_CmdReadMultiBlock+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d6c6:	23c5      	movs	r3, #197	; 0xc5
2400d6c8:	f2c0 0320 	movt	r3, #32
2400d6cc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d6d0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d6d4:	b2db      	uxtb	r3, r3
2400d6d6:	2b12      	cmp	r3, #18
2400d6d8:	d136      	bne.n	2400d748 <SDMMC_CmdReadMultiBlock+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d6da:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400d6de:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d6e2:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400d6e6:	4018      	ands	r0, r3
2400d6e8:	2800      	cmp	r0, #0
2400d6ea:	d0e1      	beq.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d6ec:	2b00      	cmp	r3, #0
2400d6ee:	db32      	blt.n	2400d756 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d6f0:	0059      	lsls	r1, r3, #1
2400d6f2:	d433      	bmi.n	2400d75c <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d6f4:	009a      	lsls	r2, r3, #2
2400d6f6:	d433      	bmi.n	2400d760 <SDMMC_CmdReadMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d6f8:	00d9      	lsls	r1, r3, #3
2400d6fa:	d433      	bmi.n	2400d764 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d6fc:	011a      	lsls	r2, r3, #4
2400d6fe:	d434      	bmi.n	2400d76a <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d700:	0159      	lsls	r1, r3, #5
2400d702:	d435      	bmi.n	2400d770 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d704:	01da      	lsls	r2, r3, #7
2400d706:	d436      	bmi.n	2400d776 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d708:	0219      	lsls	r1, r3, #8
2400d70a:	d437      	bmi.n	2400d77c <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d70c:	025a      	lsls	r2, r3, #9
2400d70e:	d438      	bmi.n	2400d782 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d710:	0299      	lsls	r1, r3, #10
2400d712:	d442      	bmi.n	2400d79a <SDMMC_CmdReadMultiBlock+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d714:	02da      	lsls	r2, r3, #11
2400d716:	d43d      	bmi.n	2400d794 <SDMMC_CmdReadMultiBlock+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d718:	0359      	lsls	r1, r3, #13
2400d71a:	d438      	bmi.n	2400d78e <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d71c:	039a      	lsls	r2, r3, #14
2400d71e:	d433      	bmi.n	2400d788 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d720:	03d9      	lsls	r1, r3, #15
2400d722:	d446      	bmi.n	2400d7b2 <SDMMC_CmdReadMultiBlock+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d724:	041a      	lsls	r2, r3, #16
2400d726:	d441      	bmi.n	2400d7ac <SDMMC_CmdReadMultiBlock+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d728:	0459      	lsls	r1, r3, #17
2400d72a:	d43c      	bmi.n	2400d7a6 <SDMMC_CmdReadMultiBlock+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d72c:	049a      	lsls	r2, r3, #18
2400d72e:	d437      	bmi.n	2400d7a0 <SDMMC_CmdReadMultiBlock+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d730:	f013 0f08 	tst.w	r3, #8
2400d734:	bf14      	ite	ne
2400d736:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d73a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d73e:	e7b7      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d740:	2301      	movs	r3, #1
2400d742:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d746:	e7b3      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d748:	2001      	movs	r0, #1
2400d74a:	e7b1      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d74c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d74e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d750:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d754:	e7ac      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d756:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d75a:	e7a9      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d75c:	2040      	movs	r0, #64	; 0x40
2400d75e:	e7a7      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d760:	2080      	movs	r0, #128	; 0x80
2400d762:	e7a5      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d764:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d768:	e7a2      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d76a:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d76e:	e79f      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d770:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d774:	e79c      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d776:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d77a:	e799      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d77c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d780:	e796      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d782:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d786:	e793      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d788:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d78c:	e790      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d78e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d792:	e78d      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400d794:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d798:	e78a      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d79a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d79e:	e787      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400d7a0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d7a4:	e784      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d7a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d7aa:	e781      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d7ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d7b0:	e77e      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d7b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d7b6:	e77b      	b.n	2400d6b0 <SDMMC_CmdReadMultiBlock+0x5c>

2400d7b8 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7b8:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7bc:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400d7c0:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7c6:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400d7ca:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7cc:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400d7d0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7d2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7d4:	f241 1118 	movw	r1, #4376	; 0x1118
2400d7d8:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7da:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7de:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7e0:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7e4:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7e6:	0a52      	lsrs	r2, r2, #9
2400d7e8:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d7ec:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d7f0:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400d7f4:	b162      	cbz	r2, 2400d810 <SDMMC_CmdWriteSingleBlock+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d7f6:	2145      	movs	r1, #69	; 0x45
2400d7f8:	1e53      	subs	r3, r2, #1
2400d7fa:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400d7fe:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d802:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d804:	420a      	tst	r2, r1
2400d806:	d001      	beq.n	2400d80c <SDMMC_CmdWriteSingleBlock+0x54>
2400d808:	0492      	lsls	r2, r2, #18
2400d80a:	d505      	bpl.n	2400d818 <SDMMC_CmdWriteSingleBlock+0x60>
    if (count-- == 0U)
2400d80c:	1c58      	adds	r0, r3, #1
2400d80e:	d1f6      	bne.n	2400d7fe <SDMMC_CmdWriteSingleBlock+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400d810:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d814:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d818:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d81c:	0758      	lsls	r0, r3, #29
2400d81e:	d447      	bmi.n	2400d8b0 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d820:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d824:	f010 0001 	ands.w	r0, r0, #1
2400d828:	d13c      	bne.n	2400d8a4 <SDMMC_CmdWriteSingleBlock+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d82a:	23c5      	movs	r3, #197	; 0xc5
2400d82c:	f2c0 0320 	movt	r3, #32
2400d830:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d834:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d838:	b2db      	uxtb	r3, r3
2400d83a:	2b18      	cmp	r3, #24
2400d83c:	d136      	bne.n	2400d8ac <SDMMC_CmdWriteSingleBlock+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d83e:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400d842:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d846:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400d84a:	4018      	ands	r0, r3
2400d84c:	2800      	cmp	r0, #0
2400d84e:	d0e1      	beq.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d850:	2b00      	cmp	r3, #0
2400d852:	db32      	blt.n	2400d8ba <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d854:	0059      	lsls	r1, r3, #1
2400d856:	d433      	bmi.n	2400d8c0 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d858:	009a      	lsls	r2, r3, #2
2400d85a:	d433      	bmi.n	2400d8c4 <SDMMC_CmdWriteSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d85c:	00d9      	lsls	r1, r3, #3
2400d85e:	d433      	bmi.n	2400d8c8 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d860:	011a      	lsls	r2, r3, #4
2400d862:	d434      	bmi.n	2400d8ce <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d864:	0159      	lsls	r1, r3, #5
2400d866:	d435      	bmi.n	2400d8d4 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d868:	01da      	lsls	r2, r3, #7
2400d86a:	d436      	bmi.n	2400d8da <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d86c:	0219      	lsls	r1, r3, #8
2400d86e:	d437      	bmi.n	2400d8e0 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d870:	025a      	lsls	r2, r3, #9
2400d872:	d438      	bmi.n	2400d8e6 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d874:	0299      	lsls	r1, r3, #10
2400d876:	d442      	bmi.n	2400d8fe <SDMMC_CmdWriteSingleBlock+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d878:	02da      	lsls	r2, r3, #11
2400d87a:	d43d      	bmi.n	2400d8f8 <SDMMC_CmdWriteSingleBlock+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d87c:	0359      	lsls	r1, r3, #13
2400d87e:	d438      	bmi.n	2400d8f2 <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d880:	039a      	lsls	r2, r3, #14
2400d882:	d433      	bmi.n	2400d8ec <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d884:	03d9      	lsls	r1, r3, #15
2400d886:	d446      	bmi.n	2400d916 <SDMMC_CmdWriteSingleBlock+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d888:	041a      	lsls	r2, r3, #16
2400d88a:	d441      	bmi.n	2400d910 <SDMMC_CmdWriteSingleBlock+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d88c:	0459      	lsls	r1, r3, #17
2400d88e:	d43c      	bmi.n	2400d90a <SDMMC_CmdWriteSingleBlock+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d890:	049a      	lsls	r2, r3, #18
2400d892:	d437      	bmi.n	2400d904 <SDMMC_CmdWriteSingleBlock+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d894:	f013 0f08 	tst.w	r3, #8
2400d898:	bf14      	ite	ne
2400d89a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d89e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d8a2:	e7b7      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d8a4:	2301      	movs	r3, #1
2400d8a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d8aa:	e7b3      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d8ac:	2001      	movs	r0, #1
2400d8ae:	e7b1      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d8b0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d8b2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d8b4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d8b8:	e7ac      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d8ba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d8be:	e7a9      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d8c0:	2040      	movs	r0, #64	; 0x40
2400d8c2:	e7a7      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d8c4:	2080      	movs	r0, #128	; 0x80
2400d8c6:	e7a5      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d8c8:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d8cc:	e7a2      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d8ce:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d8d2:	e79f      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d8d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d8d8:	e79c      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d8da:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d8de:	e799      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d8e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d8e4:	e796      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d8e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d8ea:	e793      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d8ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d8f0:	e790      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d8f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d8f6:	e78d      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400d8f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d8fc:	e78a      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d8fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d902:	e787      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400d904:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d908:	e784      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d90a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d90e:	e781      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d910:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d914:	e77e      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d916:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d91a:	e77b      	b.n	2400d814 <SDMMC_CmdWriteSingleBlock+0x5c>

2400d91c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d91c:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d920:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400d924:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d926:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d92a:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400d92e:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d930:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400d934:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d936:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d938:	f241 1119 	movw	r1, #4377	; 0x1119
2400d93c:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d93e:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d942:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d944:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d948:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d94a:	0a52      	lsrs	r2, r2, #9
2400d94c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d950:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d954:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400d958:	b162      	cbz	r2, 2400d974 <SDMMC_CmdWriteMultiBlock+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d95a:	2145      	movs	r1, #69	; 0x45
2400d95c:	1e53      	subs	r3, r2, #1
2400d95e:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400d962:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d966:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d968:	420a      	tst	r2, r1
2400d96a:	d001      	beq.n	2400d970 <SDMMC_CmdWriteMultiBlock+0x54>
2400d96c:	0492      	lsls	r2, r2, #18
2400d96e:	d505      	bpl.n	2400d97c <SDMMC_CmdWriteMultiBlock+0x60>
    if (count-- == 0U)
2400d970:	1c58      	adds	r0, r3, #1
2400d972:	d1f6      	bne.n	2400d962 <SDMMC_CmdWriteMultiBlock+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400d974:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d978:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d97c:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d980:	0758      	lsls	r0, r3, #29
2400d982:	d447      	bmi.n	2400da14 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d984:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d988:	f010 0001 	ands.w	r0, r0, #1
2400d98c:	d13c      	bne.n	2400da08 <SDMMC_CmdWriteMultiBlock+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d98e:	23c5      	movs	r3, #197	; 0xc5
2400d990:	f2c0 0320 	movt	r3, #32
2400d994:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d998:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d99c:	b2db      	uxtb	r3, r3
2400d99e:	2b19      	cmp	r3, #25
2400d9a0:	d136      	bne.n	2400da10 <SDMMC_CmdWriteMultiBlock+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d9a2:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400d9a6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d9aa:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400d9ae:	4018      	ands	r0, r3
2400d9b0:	2800      	cmp	r0, #0
2400d9b2:	d0e1      	beq.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d9b4:	2b00      	cmp	r3, #0
2400d9b6:	db32      	blt.n	2400da1e <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d9b8:	0059      	lsls	r1, r3, #1
2400d9ba:	d433      	bmi.n	2400da24 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d9bc:	009a      	lsls	r2, r3, #2
2400d9be:	d433      	bmi.n	2400da28 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d9c0:	00d9      	lsls	r1, r3, #3
2400d9c2:	d433      	bmi.n	2400da2c <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d9c4:	011a      	lsls	r2, r3, #4
2400d9c6:	d434      	bmi.n	2400da32 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d9c8:	0159      	lsls	r1, r3, #5
2400d9ca:	d435      	bmi.n	2400da38 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d9cc:	01da      	lsls	r2, r3, #7
2400d9ce:	d436      	bmi.n	2400da3e <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d9d0:	0219      	lsls	r1, r3, #8
2400d9d2:	d437      	bmi.n	2400da44 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d9d4:	025a      	lsls	r2, r3, #9
2400d9d6:	d438      	bmi.n	2400da4a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d9d8:	0299      	lsls	r1, r3, #10
2400d9da:	d442      	bmi.n	2400da62 <SDMMC_CmdWriteMultiBlock+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d9dc:	02da      	lsls	r2, r3, #11
2400d9de:	d43d      	bmi.n	2400da5c <SDMMC_CmdWriteMultiBlock+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d9e0:	0359      	lsls	r1, r3, #13
2400d9e2:	d438      	bmi.n	2400da56 <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d9e4:	039a      	lsls	r2, r3, #14
2400d9e6:	d433      	bmi.n	2400da50 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d9e8:	03d9      	lsls	r1, r3, #15
2400d9ea:	d446      	bmi.n	2400da7a <SDMMC_CmdWriteMultiBlock+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d9ec:	041a      	lsls	r2, r3, #16
2400d9ee:	d441      	bmi.n	2400da74 <SDMMC_CmdWriteMultiBlock+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d9f0:	0459      	lsls	r1, r3, #17
2400d9f2:	d43c      	bmi.n	2400da6e <SDMMC_CmdWriteMultiBlock+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d9f4:	049a      	lsls	r2, r3, #18
2400d9f6:	d437      	bmi.n	2400da68 <SDMMC_CmdWriteMultiBlock+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d9f8:	f013 0f08 	tst.w	r3, #8
2400d9fc:	bf14      	ite	ne
2400d9fe:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400da02:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400da06:	e7b7      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400da08:	2301      	movs	r3, #1
2400da0a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400da0e:	e7b3      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400da10:	2001      	movs	r0, #1
2400da12:	e7b1      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400da14:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400da16:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400da18:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400da1c:	e7ac      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400da1e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400da22:	e7a9      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400da24:	2040      	movs	r0, #64	; 0x40
2400da26:	e7a7      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400da28:	2080      	movs	r0, #128	; 0x80
2400da2a:	e7a5      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400da2c:	f44f 7080 	mov.w	r0, #256	; 0x100
2400da30:	e7a2      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400da32:	f44f 7000 	mov.w	r0, #512	; 0x200
2400da36:	e79f      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400da38:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400da3c:	e79c      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400da3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400da42:	e799      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400da44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400da48:	e796      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400da4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400da4e:	e793      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400da50:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400da54:	e790      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400da56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400da5a:	e78d      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400da5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400da60:	e78a      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400da62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400da66:	e787      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400da68:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400da6c:	e784      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400da6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400da72:	e781      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400da74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400da78:	e77e      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400da7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400da7e:	e77b      	b.n	2400d978 <SDMMC_CmdWriteMultiBlock+0x5c>

2400da80 <SDMMC_CmdStopTransfer>:
{
2400da80:	b410      	push	{r4}
2400da82:	4601      	mov	r1, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400da84:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400da86:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400da8a:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400da8e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  SDMMCx->ARG = Command->Argument;
2400da92:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400da94:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400da98:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400da9c:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400da9e:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400daa2:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400daa4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400daa6:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400daaa:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400daae:	fbac c202 	umull	ip, r2, ip, r2
2400dab2:	f44f 4c61 	mov.w	ip, #57600	; 0xe100
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400dab6:	60c8      	str	r0, [r1, #12]
  SDMMCx->ARG = Command->Argument;
2400dab8:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400daba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dabc:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dabe:	f2c0 5cf5 	movt	ip, #1525	; 0x5f5
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dac2:	4003      	ands	r3, r0
2400dac4:	f241 100c 	movw	r0, #4364	; 0x110c
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dac8:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dacc:	4318      	orrs	r0, r3
2400dace:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400dad0:	b15a      	cbz	r2, 2400daea <SDMMC_CmdStopTransfer+0x6a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400dad2:	2045      	movs	r0, #69	; 0x45
2400dad4:	1e53      	subs	r3, r2, #1
2400dad6:	f2c0 0020 	movt	r0, #32
    sta_reg = SDMMCx->STA;
2400dada:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400dadc:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400dade:	4202      	tst	r2, r0
2400dae0:	d001      	beq.n	2400dae6 <SDMMC_CmdStopTransfer+0x66>
2400dae2:	0494      	lsls	r4, r2, #18
2400dae4:	d50a      	bpl.n	2400dafc <SDMMC_CmdStopTransfer+0x7c>
    if (count-- == 0U)
2400dae6:	1c5a      	adds	r2, r3, #1
2400dae8:	d1f7      	bne.n	2400dada <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400daea:	68cb      	ldr	r3, [r1, #12]
2400daec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400daf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400daf4:	60cb      	str	r3, [r1, #12]
}
2400daf6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400dafa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400dafc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400dafe:	0758      	lsls	r0, r3, #29
2400db00:	d459      	bmi.n	2400dbb6 <SDMMC_CmdStopTransfer+0x136>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400db02:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400db04:	f010 0001 	ands.w	r0, r0, #1
2400db08:	d141      	bne.n	2400db8e <SDMMC_CmdStopTransfer+0x10e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400db0a:	23c5      	movs	r3, #197	; 0xc5
2400db0c:	f2c0 0320 	movt	r3, #32
2400db10:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400db12:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400db14:	b2db      	uxtb	r3, r3
2400db16:	2b0c      	cmp	r3, #12
2400db18:	d147      	bne.n	2400dbaa <SDMMC_CmdStopTransfer+0x12a>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400db1a:	f24e 0208 	movw	r2, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400db1e:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400db20:	f6cf 52ff 	movt	r2, #65023	; 0xfdff
2400db24:	401a      	ands	r2, r3
2400db26:	2a00      	cmp	r2, #0
2400db28:	d038      	beq.n	2400db9c <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400db2a:	2b00      	cmp	r3, #0
2400db2c:	db36      	blt.n	2400db9c <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400db2e:	005a      	lsls	r2, r3, #1
2400db30:	d448      	bmi.n	2400dbc4 <SDMMC_CmdStopTransfer+0x144>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400db32:	009c      	lsls	r4, r3, #2
2400db34:	d44c      	bmi.n	2400dbd0 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400db36:	00d8      	lsls	r0, r3, #3
2400db38:	d450      	bmi.n	2400dbdc <SDMMC_CmdStopTransfer+0x15c>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400db3a:	011a      	lsls	r2, r3, #4
2400db3c:	d455      	bmi.n	2400dbea <SDMMC_CmdStopTransfer+0x16a>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400db3e:	015c      	lsls	r4, r3, #5
2400db40:	d45a      	bmi.n	2400dbf8 <SDMMC_CmdStopTransfer+0x178>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400db42:	01d8      	lsls	r0, r3, #7
2400db44:	d466      	bmi.n	2400dc14 <SDMMC_CmdStopTransfer+0x194>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400db46:	021a      	lsls	r2, r3, #8
2400db48:	d45d      	bmi.n	2400dc06 <SDMMC_CmdStopTransfer+0x186>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400db4a:	025c      	lsls	r4, r3, #9
2400db4c:	d470      	bmi.n	2400dc30 <SDMMC_CmdStopTransfer+0x1b0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400db4e:	0298      	lsls	r0, r3, #10
2400db50:	d467      	bmi.n	2400dc22 <SDMMC_CmdStopTransfer+0x1a2>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400db52:	02da      	lsls	r2, r3, #11
2400db54:	f100 8081 	bmi.w	2400dc5a <SDMMC_CmdStopTransfer+0x1da>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400db58:	035c      	lsls	r4, r3, #13
2400db5a:	d477      	bmi.n	2400dc4c <SDMMC_CmdStopTransfer+0x1cc>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400db5c:	0398      	lsls	r0, r3, #14
2400db5e:	d46e      	bmi.n	2400dc3e <SDMMC_CmdStopTransfer+0x1be>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400db60:	03da      	lsls	r2, r3, #15
2400db62:	f100 8096 	bmi.w	2400dc92 <SDMMC_CmdStopTransfer+0x212>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400db66:	041c      	lsls	r4, r3, #16
2400db68:	f100 8085 	bmi.w	2400dc76 <SDMMC_CmdStopTransfer+0x1f6>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400db6c:	0458      	lsls	r0, r3, #17
2400db6e:	d47b      	bmi.n	2400dc68 <SDMMC_CmdStopTransfer+0x1e8>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400db70:	049a      	lsls	r2, r3, #18
2400db72:	f100 8087 	bmi.w	2400dc84 <SDMMC_CmdStopTransfer+0x204>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400db76:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400db7a:	68cb      	ldr	r3, [r1, #12]
2400db7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400db80:	bf14      	ite	ne
2400db82:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400db86:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400db8a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400db8c:	e7b3      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400db8e:	2301      	movs	r3, #1
2400db90:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400db92:	68cb      	ldr	r3, [r1, #12]
2400db94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400db98:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400db9a:	e7ac      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400db9c:	68cb      	ldr	r3, [r1, #12]
2400db9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dba2:	60cb      	str	r3, [r1, #12]
}
2400dba4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400dba8:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbaa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dbac:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbb2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbb4:	e79f      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dbb6:	2004      	movs	r0, #4
2400dbb8:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbba:	68cb      	ldr	r3, [r1, #12]
2400dbbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbc0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbc2:	e798      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbc4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400dbc6:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbcc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbce:	e792      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbd0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400dbd2:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbd8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbda:	e78c      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbdc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400dbde:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbe6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbe8:	e785      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbea:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400dbec:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dbf4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dbf6:	e77e      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbf8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400dbfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dbfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc02:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc04:	e777      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc06:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400dc08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc10:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc12:	e770      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc14:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400dc16:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc1e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc20:	e769      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc22:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400dc24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc2c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc2e:	e762      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc30:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400dc32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc3a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc3c:	e75b      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc3e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400dc40:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc48:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc4a:	e754      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc4c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400dc4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc56:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc58:	e74d      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc5a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
2400dc5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc64:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc66:	e746      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc68:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400dc6a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc72:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc74:	e73f      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc76:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400dc78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc80:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc82:	e738      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc84:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400dc86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc8e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc90:	e731      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc92:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400dc94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400dc98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400dc9c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400dc9e:	e72a      	b.n	2400daf6 <SDMMC_CmdStopTransfer+0x76>

2400dca0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dca0:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dca4:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400dca8:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcaa:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dcae:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400dcb2:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcb4:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400dcb8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcba:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dcbc:	f241 1107 	movw	r1, #4359	; 0x1107
2400dcc0:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcc2:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dcc6:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcc8:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dccc:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcce:	0a52      	lsrs	r2, r2, #9
2400dcd0:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400dcd4:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400dcd8:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400dcdc:	b162      	cbz	r2, 2400dcf8 <SDMMC_CmdSelDesel+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400dcde:	2145      	movs	r1, #69	; 0x45
2400dce0:	1e53      	subs	r3, r2, #1
2400dce2:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400dce6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400dcea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400dcec:	420a      	tst	r2, r1
2400dcee:	d001      	beq.n	2400dcf4 <SDMMC_CmdSelDesel+0x54>
2400dcf0:	0492      	lsls	r2, r2, #18
2400dcf2:	d505      	bpl.n	2400dd00 <SDMMC_CmdSelDesel+0x60>
    if (count-- == 0U)
2400dcf4:	1c58      	adds	r0, r3, #1
2400dcf6:	d1f6      	bne.n	2400dce6 <SDMMC_CmdSelDesel+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400dcf8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400dcfc:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400dd00:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400dd04:	0758      	lsls	r0, r3, #29
2400dd06:	d447      	bmi.n	2400dd98 <SDMMC_CmdSelDesel+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400dd08:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400dd0c:	f010 0001 	ands.w	r0, r0, #1
2400dd10:	d13c      	bne.n	2400dd8c <SDMMC_CmdSelDesel+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400dd12:	23c5      	movs	r3, #197	; 0xc5
2400dd14:	f2c0 0320 	movt	r3, #32
2400dd18:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400dd1c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400dd20:	b2db      	uxtb	r3, r3
2400dd22:	2b07      	cmp	r3, #7
2400dd24:	d136      	bne.n	2400dd94 <SDMMC_CmdSelDesel+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400dd26:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400dd2a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400dd2e:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400dd32:	4018      	ands	r0, r3
2400dd34:	2800      	cmp	r0, #0
2400dd36:	d0e1      	beq.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400dd38:	2b00      	cmp	r3, #0
2400dd3a:	db32      	blt.n	2400dda2 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400dd3c:	0059      	lsls	r1, r3, #1
2400dd3e:	d433      	bmi.n	2400dda8 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400dd40:	009a      	lsls	r2, r3, #2
2400dd42:	d433      	bmi.n	2400ddac <SDMMC_CmdSelDesel+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400dd44:	00d9      	lsls	r1, r3, #3
2400dd46:	d433      	bmi.n	2400ddb0 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400dd48:	011a      	lsls	r2, r3, #4
2400dd4a:	d434      	bmi.n	2400ddb6 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400dd4c:	0159      	lsls	r1, r3, #5
2400dd4e:	d435      	bmi.n	2400ddbc <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400dd50:	01da      	lsls	r2, r3, #7
2400dd52:	d436      	bmi.n	2400ddc2 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400dd54:	0219      	lsls	r1, r3, #8
2400dd56:	d437      	bmi.n	2400ddc8 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400dd58:	025a      	lsls	r2, r3, #9
2400dd5a:	d438      	bmi.n	2400ddce <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400dd5c:	0299      	lsls	r1, r3, #10
2400dd5e:	d442      	bmi.n	2400dde6 <SDMMC_CmdSelDesel+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400dd60:	02da      	lsls	r2, r3, #11
2400dd62:	d43d      	bmi.n	2400dde0 <SDMMC_CmdSelDesel+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400dd64:	0359      	lsls	r1, r3, #13
2400dd66:	d438      	bmi.n	2400ddda <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400dd68:	039a      	lsls	r2, r3, #14
2400dd6a:	d433      	bmi.n	2400ddd4 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400dd6c:	03d9      	lsls	r1, r3, #15
2400dd6e:	d446      	bmi.n	2400ddfe <SDMMC_CmdSelDesel+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400dd70:	041a      	lsls	r2, r3, #16
2400dd72:	d441      	bmi.n	2400ddf8 <SDMMC_CmdSelDesel+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400dd74:	0459      	lsls	r1, r3, #17
2400dd76:	d43c      	bmi.n	2400ddf2 <SDMMC_CmdSelDesel+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400dd78:	049a      	lsls	r2, r3, #18
2400dd7a:	d437      	bmi.n	2400ddec <SDMMC_CmdSelDesel+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400dd7c:	f013 0f08 	tst.w	r3, #8
2400dd80:	bf14      	ite	ne
2400dd82:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400dd86:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400dd8a:	e7b7      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400dd8c:	2301      	movs	r3, #1
2400dd8e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dd92:	e7b3      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dd94:	2001      	movs	r0, #1
2400dd96:	e7b1      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dd98:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dd9a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dd9c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dda0:	e7ac      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400dda2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400dda6:	e7a9      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400dda8:	2040      	movs	r0, #64	; 0x40
2400ddaa:	e7a7      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ddac:	2080      	movs	r0, #128	; 0x80
2400ddae:	e7a5      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ddb0:	f44f 7080 	mov.w	r0, #256	; 0x100
2400ddb4:	e7a2      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ddb6:	f44f 7000 	mov.w	r0, #512	; 0x200
2400ddba:	e79f      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ddbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400ddc0:	e79c      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ddc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400ddc6:	e799      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ddc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400ddcc:	e796      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ddce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400ddd2:	e793      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ddd4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400ddd8:	e790      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ddda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400ddde:	e78d      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400dde0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400dde4:	e78a      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400dde6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400ddea:	e787      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400ddec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400ddf0:	e784      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ddf2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400ddf6:	e781      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ddf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400ddfc:	e77e      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ddfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400de02:	e77b      	b.n	2400dcfc <SDMMC_CmdSelDesel+0x5c>

2400de04 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de04:	f640 03ec 	movw	r3, #2284	; 0x8ec
2400de08:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de0c:	f24e 02c0 	movw	r2, #57536	; 0xe0c0
{
2400de10:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de12:	f2c2 0300 	movt	r3, #8192	; 0x2000
2400de16:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de1a:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
{
2400de1e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400de20:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de22:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400de24:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de26:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de28:	fbac c303 	umull	ip, r3, ip, r3
2400de2c:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de30:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de32:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de38:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de3c:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de3e:	e002      	b.n	2400de46 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400de40:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400de42:	0612      	lsls	r2, r2, #24
2400de44:	d406      	bmi.n	2400de54 <SDMMC_CmdGoIdleState+0x50>
    if (count-- == 0U)
2400de46:	3b01      	subs	r3, #1
2400de48:	d2fa      	bcs.n	2400de40 <SDMMC_CmdGoIdleState+0x3c>
      return SDMMC_ERROR_TIMEOUT;
2400de4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400de4e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400de52:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400de54:	23c5      	movs	r3, #197	; 0xc5

  return SDMMC_ERROR_NONE;
2400de56:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400de58:	f2c0 0320 	movt	r3, #32
2400de5c:	638b      	str	r3, [r1, #56]	; 0x38
}
2400de5e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400de62:	4770      	bx	lr

2400de64 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de64:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400de68:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de6c:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400de70:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de72:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400de76:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de7a:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400de7e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400de80:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de84:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400de86:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de88:	fbac c202 	umull	ip, r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de8c:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de8e:	f241 3c88 	movw	ip, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de92:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de94:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de96:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400de9a:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400de9e:	4318      	orrs	r0, r3
2400dea0:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400dea2:	b14a      	cbz	r2, 2400deb8 <SDMMC_CmdOperCond+0x54>
2400dea4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400dea6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400dea8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400deaa:	f012 0f45 	tst.w	r2, #69	; 0x45
2400deae:	d001      	beq.n	2400deb4 <SDMMC_CmdOperCond+0x50>
2400deb0:	0490      	lsls	r0, r2, #18
2400deb2:	d506      	bpl.n	2400dec2 <SDMMC_CmdOperCond+0x5e>
    if (count-- == 0U)
2400deb4:	1c5c      	adds	r4, r3, #1
2400deb6:	d1f6      	bne.n	2400dea6 <SDMMC_CmdOperCond+0x42>
      return SDMMC_ERROR_TIMEOUT;
2400deb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400debc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400dec0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400dec2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400dec4:	075a      	lsls	r2, r3, #29
2400dec6:	d40c      	bmi.n	2400dee2 <SDMMC_CmdOperCond+0x7e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400dec8:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400deca:	f010 0001 	ands.w	r0, r0, #1
2400dece:	d105      	bne.n	2400dedc <SDMMC_CmdOperCond+0x78>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400ded0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400ded2:	065b      	lsls	r3, r3, #25
2400ded4:	d5f2      	bpl.n	2400debc <SDMMC_CmdOperCond+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400ded6:	2340      	movs	r3, #64	; 0x40
2400ded8:	638b      	str	r3, [r1, #56]	; 0x38
2400deda:	e7ef      	b.n	2400debc <SDMMC_CmdOperCond+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400dedc:	2301      	movs	r3, #1
2400dede:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dee0:	e7ec      	b.n	2400debc <SDMMC_CmdOperCond+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dee2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dee4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dee6:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dee8:	e7e8      	b.n	2400debc <SDMMC_CmdOperCond+0x58>
2400deea:	bf00      	nop

2400deec <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400deec:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400def0:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400def4:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400def6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400defa:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400defe:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df00:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400df04:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df06:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400df08:	f241 1137 	movw	r1, #4407	; 0x1137
2400df0c:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df0e:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400df12:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df14:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400df18:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df1a:	0a52      	lsrs	r2, r2, #9
2400df1c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400df20:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400df24:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400df28:	b162      	cbz	r2, 2400df44 <SDMMC_CmdAppCommand+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400df2a:	2145      	movs	r1, #69	; 0x45
2400df2c:	1e53      	subs	r3, r2, #1
2400df2e:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400df32:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400df36:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400df38:	420a      	tst	r2, r1
2400df3a:	d001      	beq.n	2400df40 <SDMMC_CmdAppCommand+0x54>
2400df3c:	0492      	lsls	r2, r2, #18
2400df3e:	d505      	bpl.n	2400df4c <SDMMC_CmdAppCommand+0x60>
    if (count-- == 0U)
2400df40:	1c58      	adds	r0, r3, #1
2400df42:	d1f6      	bne.n	2400df32 <SDMMC_CmdAppCommand+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400df44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400df48:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400df4c:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400df50:	0758      	lsls	r0, r3, #29
2400df52:	d447      	bmi.n	2400dfe4 <SDMMC_CmdAppCommand+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400df54:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400df58:	f010 0001 	ands.w	r0, r0, #1
2400df5c:	d13c      	bne.n	2400dfd8 <SDMMC_CmdAppCommand+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400df5e:	23c5      	movs	r3, #197	; 0xc5
2400df60:	f2c0 0320 	movt	r3, #32
2400df64:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400df68:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400df6c:	b2db      	uxtb	r3, r3
2400df6e:	2b37      	cmp	r3, #55	; 0x37
2400df70:	d136      	bne.n	2400dfe0 <SDMMC_CmdAppCommand+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400df72:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400df76:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400df7a:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400df7e:	4018      	ands	r0, r3
2400df80:	2800      	cmp	r0, #0
2400df82:	d0e1      	beq.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400df84:	2b00      	cmp	r3, #0
2400df86:	db32      	blt.n	2400dfee <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400df88:	0059      	lsls	r1, r3, #1
2400df8a:	d433      	bmi.n	2400dff4 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400df8c:	009a      	lsls	r2, r3, #2
2400df8e:	d433      	bmi.n	2400dff8 <SDMMC_CmdAppCommand+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400df90:	00d9      	lsls	r1, r3, #3
2400df92:	d433      	bmi.n	2400dffc <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400df94:	011a      	lsls	r2, r3, #4
2400df96:	d434      	bmi.n	2400e002 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400df98:	0159      	lsls	r1, r3, #5
2400df9a:	d435      	bmi.n	2400e008 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400df9c:	01da      	lsls	r2, r3, #7
2400df9e:	d436      	bmi.n	2400e00e <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400dfa0:	0219      	lsls	r1, r3, #8
2400dfa2:	d437      	bmi.n	2400e014 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400dfa4:	025a      	lsls	r2, r3, #9
2400dfa6:	d438      	bmi.n	2400e01a <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400dfa8:	0299      	lsls	r1, r3, #10
2400dfaa:	d442      	bmi.n	2400e032 <SDMMC_CmdAppCommand+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400dfac:	02da      	lsls	r2, r3, #11
2400dfae:	d43d      	bmi.n	2400e02c <SDMMC_CmdAppCommand+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400dfb0:	0359      	lsls	r1, r3, #13
2400dfb2:	d438      	bmi.n	2400e026 <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400dfb4:	039a      	lsls	r2, r3, #14
2400dfb6:	d433      	bmi.n	2400e020 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400dfb8:	03d9      	lsls	r1, r3, #15
2400dfba:	d446      	bmi.n	2400e04a <SDMMC_CmdAppCommand+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400dfbc:	041a      	lsls	r2, r3, #16
2400dfbe:	d441      	bmi.n	2400e044 <SDMMC_CmdAppCommand+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400dfc0:	0459      	lsls	r1, r3, #17
2400dfc2:	d43c      	bmi.n	2400e03e <SDMMC_CmdAppCommand+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400dfc4:	049a      	lsls	r2, r3, #18
2400dfc6:	d437      	bmi.n	2400e038 <SDMMC_CmdAppCommand+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400dfc8:	f013 0f08 	tst.w	r3, #8
2400dfcc:	bf14      	ite	ne
2400dfce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400dfd2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400dfd6:	e7b7      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400dfd8:	2301      	movs	r3, #1
2400dfda:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dfde:	e7b3      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400dfe0:	2001      	movs	r0, #1
2400dfe2:	e7b1      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dfe4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dfe6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400dfe8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400dfec:	e7ac      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400dfee:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400dff2:	e7a9      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400dff4:	2040      	movs	r0, #64	; 0x40
2400dff6:	e7a7      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400dff8:	2080      	movs	r0, #128	; 0x80
2400dffa:	e7a5      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400dffc:	f44f 7080 	mov.w	r0, #256	; 0x100
2400e000:	e7a2      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e002:	f44f 7000 	mov.w	r0, #512	; 0x200
2400e006:	e79f      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e008:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400e00c:	e79c      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e00e:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400e012:	e799      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e014:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400e018:	e796      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e01a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e01e:	e793      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e020:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400e024:	e790      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e026:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400e02a:	e78d      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400e02c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400e030:	e78a      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e032:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400e036:	e787      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400e038:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400e03c:	e784      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e03e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400e042:	e781      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e044:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400e048:	e77e      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e04a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400e04e:	e77b      	b.n	2400df48 <SDMMC_CmdAppCommand+0x5c>

2400e050 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e050:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e054:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e058:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e05a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e05e:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e062:	b500      	push	{lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e064:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400e068:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e06a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e06c:	f241 1129 	movw	r1, #4393	; 0x1129
2400e070:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e072:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e076:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e078:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e07c:	4319      	orrs	r1, r3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e07e:	0a52      	lsrs	r2, r2, #9
2400e080:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e084:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e088:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400e08c:	b152      	cbz	r2, 2400e0a4 <SDMMC_CmdAppOperCommand+0x54>
2400e08e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400e090:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400e094:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400e096:	f012 0f45 	tst.w	r2, #69	; 0x45
2400e09a:	d001      	beq.n	2400e0a0 <SDMMC_CmdAppOperCommand+0x50>
2400e09c:	0492      	lsls	r2, r2, #18
2400e09e:	d505      	bpl.n	2400e0ac <SDMMC_CmdAppOperCommand+0x5c>
    if (count-- == 0U)
2400e0a0:	1c59      	adds	r1, r3, #1
2400e0a2:	d1f5      	bne.n	2400e090 <SDMMC_CmdAppOperCommand+0x40>
      return SDMMC_ERROR_TIMEOUT;
2400e0a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e0a8:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e0ac:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400e0b0:	f010 0004 	ands.w	r0, r0, #4
2400e0b4:	d106      	bne.n	2400e0c4 <SDMMC_CmdAppOperCommand+0x74>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e0b6:	23c5      	movs	r3, #197	; 0xc5
2400e0b8:	f2c0 0320 	movt	r3, #32
2400e0bc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
2400e0c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e0c4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e0c6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e0c8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e0cc:	e7ec      	b.n	2400e0a8 <SDMMC_CmdAppOperCommand+0x58>
2400e0ce:	bf00      	nop

2400e0d0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0d0:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e0d4:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e0d8:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0da:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e0de:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e0e2:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0e4:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400e0e8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0ea:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e0ec:	f241 1106 	movw	r1, #4358	; 0x1106
2400e0f0:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0f2:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e0f6:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0f8:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e0fc:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e0fe:	0a52      	lsrs	r2, r2, #9
2400e100:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e104:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e108:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400e10c:	b162      	cbz	r2, 2400e128 <SDMMC_CmdBusWidth+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e10e:	2145      	movs	r1, #69	; 0x45
2400e110:	1e53      	subs	r3, r2, #1
2400e112:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400e116:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400e11a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e11c:	420a      	tst	r2, r1
2400e11e:	d001      	beq.n	2400e124 <SDMMC_CmdBusWidth+0x54>
2400e120:	0492      	lsls	r2, r2, #18
2400e122:	d505      	bpl.n	2400e130 <SDMMC_CmdBusWidth+0x60>
    if (count-- == 0U)
2400e124:	1c58      	adds	r0, r3, #1
2400e126:	d1f6      	bne.n	2400e116 <SDMMC_CmdBusWidth+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400e128:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e12c:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e130:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400e134:	0758      	lsls	r0, r3, #29
2400e136:	d447      	bmi.n	2400e1c8 <SDMMC_CmdBusWidth+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e138:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400e13c:	f010 0001 	ands.w	r0, r0, #1
2400e140:	d13c      	bne.n	2400e1bc <SDMMC_CmdBusWidth+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e142:	23c5      	movs	r3, #197	; 0xc5
2400e144:	f2c0 0320 	movt	r3, #32
2400e148:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e14c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e150:	b2db      	uxtb	r3, r3
2400e152:	2b06      	cmp	r3, #6
2400e154:	d136      	bne.n	2400e1c4 <SDMMC_CmdBusWidth+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e156:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400e15a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e15e:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400e162:	4018      	ands	r0, r3
2400e164:	2800      	cmp	r0, #0
2400e166:	d0e1      	beq.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e168:	2b00      	cmp	r3, #0
2400e16a:	db32      	blt.n	2400e1d2 <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e16c:	0059      	lsls	r1, r3, #1
2400e16e:	d433      	bmi.n	2400e1d8 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e170:	009a      	lsls	r2, r3, #2
2400e172:	d433      	bmi.n	2400e1dc <SDMMC_CmdBusWidth+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e174:	00d9      	lsls	r1, r3, #3
2400e176:	d433      	bmi.n	2400e1e0 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e178:	011a      	lsls	r2, r3, #4
2400e17a:	d434      	bmi.n	2400e1e6 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e17c:	0159      	lsls	r1, r3, #5
2400e17e:	d435      	bmi.n	2400e1ec <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e180:	01da      	lsls	r2, r3, #7
2400e182:	d436      	bmi.n	2400e1f2 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e184:	0219      	lsls	r1, r3, #8
2400e186:	d437      	bmi.n	2400e1f8 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e188:	025a      	lsls	r2, r3, #9
2400e18a:	d438      	bmi.n	2400e1fe <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e18c:	0299      	lsls	r1, r3, #10
2400e18e:	d442      	bmi.n	2400e216 <SDMMC_CmdBusWidth+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e190:	02da      	lsls	r2, r3, #11
2400e192:	d43d      	bmi.n	2400e210 <SDMMC_CmdBusWidth+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e194:	0359      	lsls	r1, r3, #13
2400e196:	d438      	bmi.n	2400e20a <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e198:	039a      	lsls	r2, r3, #14
2400e19a:	d433      	bmi.n	2400e204 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e19c:	03d9      	lsls	r1, r3, #15
2400e19e:	d446      	bmi.n	2400e22e <SDMMC_CmdBusWidth+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e1a0:	041a      	lsls	r2, r3, #16
2400e1a2:	d441      	bmi.n	2400e228 <SDMMC_CmdBusWidth+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e1a4:	0459      	lsls	r1, r3, #17
2400e1a6:	d43c      	bmi.n	2400e222 <SDMMC_CmdBusWidth+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e1a8:	049a      	lsls	r2, r3, #18
2400e1aa:	d437      	bmi.n	2400e21c <SDMMC_CmdBusWidth+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e1ac:	f013 0f08 	tst.w	r3, #8
2400e1b0:	bf14      	ite	ne
2400e1b2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400e1b6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400e1ba:	e7b7      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e1bc:	2301      	movs	r3, #1
2400e1be:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e1c2:	e7b3      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e1c4:	2001      	movs	r0, #1
2400e1c6:	e7b1      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e1c8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e1ca:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e1cc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e1d0:	e7ac      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e1d2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400e1d6:	e7a9      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e1d8:	2040      	movs	r0, #64	; 0x40
2400e1da:	e7a7      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e1dc:	2080      	movs	r0, #128	; 0x80
2400e1de:	e7a5      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e1e0:	f44f 7080 	mov.w	r0, #256	; 0x100
2400e1e4:	e7a2      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e1e6:	f44f 7000 	mov.w	r0, #512	; 0x200
2400e1ea:	e79f      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e1ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400e1f0:	e79c      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e1f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400e1f6:	e799      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e1f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400e1fc:	e796      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e1fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e202:	e793      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e204:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400e208:	e790      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e20a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400e20e:	e78d      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400e210:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400e214:	e78a      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e216:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400e21a:	e787      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400e21c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400e220:	e784      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e222:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400e226:	e781      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e228:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400e22c:	e77e      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e22e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400e232:	e77b      	b.n	2400e12c <SDMMC_CmdBusWidth+0x5c>

2400e234 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e234:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400e238:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e23c:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e240:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e242:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400e246:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e24a:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e24e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400e250:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e252:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e254:	6084      	str	r4, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e256:	fbac c202 	umull	ip, r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e25a:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e25c:	f241 3c88 	movw	ip, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e260:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e262:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e264:	f241 1033 	movw	r0, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e268:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e26c:	4318      	orrs	r0, r3
2400e26e:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400e270:	b15a      	cbz	r2, 2400e28a <SDMMC_CmdSendSCR+0x56>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e272:	2045      	movs	r0, #69	; 0x45
2400e274:	1e53      	subs	r3, r2, #1
2400e276:	f2c0 0020 	movt	r0, #32
    sta_reg = SDMMCx->STA;
2400e27a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400e27c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e27e:	4202      	tst	r2, r0
2400e280:	d001      	beq.n	2400e286 <SDMMC_CmdSendSCR+0x52>
2400e282:	0494      	lsls	r4, r2, #18
2400e284:	d506      	bpl.n	2400e294 <SDMMC_CmdSendSCR+0x60>
    if (count-- == 0U)
2400e286:	1c5a      	adds	r2, r3, #1
2400e288:	d1f7      	bne.n	2400e27a <SDMMC_CmdSendSCR+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400e28a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e28e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e292:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e294:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400e296:	0758      	lsls	r0, r3, #29
2400e298:	d442      	bmi.n	2400e320 <SDMMC_CmdSendSCR+0xec>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e29a:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400e29c:	f010 0001 	ands.w	r0, r0, #1
2400e2a0:	d139      	bne.n	2400e316 <SDMMC_CmdSendSCR+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e2a2:	23c5      	movs	r3, #197	; 0xc5
2400e2a4:	f2c0 0320 	movt	r3, #32
2400e2a8:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e2aa:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e2ac:	b2db      	uxtb	r3, r3
2400e2ae:	2b33      	cmp	r3, #51	; 0x33
2400e2b0:	d134      	bne.n	2400e31c <SDMMC_CmdSendSCR+0xe8>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e2b2:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400e2b6:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e2b8:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400e2bc:	4018      	ands	r0, r3
2400e2be:	2800      	cmp	r0, #0
2400e2c0:	d0e5      	beq.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e2c2:	2b00      	cmp	r3, #0
2400e2c4:	db30      	blt.n	2400e328 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e2c6:	005a      	lsls	r2, r3, #1
2400e2c8:	d431      	bmi.n	2400e32e <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e2ca:	009c      	lsls	r4, r3, #2
2400e2cc:	d431      	bmi.n	2400e332 <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e2ce:	00d9      	lsls	r1, r3, #3
2400e2d0:	d431      	bmi.n	2400e336 <SDMMC_CmdSendSCR+0x102>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e2d2:	011a      	lsls	r2, r3, #4
2400e2d4:	d432      	bmi.n	2400e33c <SDMMC_CmdSendSCR+0x108>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e2d6:	015c      	lsls	r4, r3, #5
2400e2d8:	d433      	bmi.n	2400e342 <SDMMC_CmdSendSCR+0x10e>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e2da:	01d9      	lsls	r1, r3, #7
2400e2dc:	d434      	bmi.n	2400e348 <SDMMC_CmdSendSCR+0x114>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e2de:	021a      	lsls	r2, r3, #8
2400e2e0:	d435      	bmi.n	2400e34e <SDMMC_CmdSendSCR+0x11a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e2e2:	025c      	lsls	r4, r3, #9
2400e2e4:	d436      	bmi.n	2400e354 <SDMMC_CmdSendSCR+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e2e6:	0299      	lsls	r1, r3, #10
2400e2e8:	d440      	bmi.n	2400e36c <SDMMC_CmdSendSCR+0x138>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e2ea:	02da      	lsls	r2, r3, #11
2400e2ec:	d43b      	bmi.n	2400e366 <SDMMC_CmdSendSCR+0x132>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e2ee:	035c      	lsls	r4, r3, #13
2400e2f0:	d436      	bmi.n	2400e360 <SDMMC_CmdSendSCR+0x12c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e2f2:	0399      	lsls	r1, r3, #14
2400e2f4:	d431      	bmi.n	2400e35a <SDMMC_CmdSendSCR+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e2f6:	03da      	lsls	r2, r3, #15
2400e2f8:	d444      	bmi.n	2400e384 <SDMMC_CmdSendSCR+0x150>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e2fa:	041c      	lsls	r4, r3, #16
2400e2fc:	d43f      	bmi.n	2400e37e <SDMMC_CmdSendSCR+0x14a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e2fe:	0459      	lsls	r1, r3, #17
2400e300:	d43a      	bmi.n	2400e378 <SDMMC_CmdSendSCR+0x144>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e302:	049a      	lsls	r2, r3, #18
2400e304:	d435      	bmi.n	2400e372 <SDMMC_CmdSendSCR+0x13e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e306:	f013 0f08 	tst.w	r3, #8
2400e30a:	bf14      	ite	ne
2400e30c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400e310:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400e314:	e7bb      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e316:	2301      	movs	r3, #1
2400e318:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e31a:	e7b8      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e31c:	2001      	movs	r0, #1
2400e31e:	e7b6      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e320:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e322:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e324:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e326:	e7b2      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e328:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400e32c:	e7af      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e32e:	2040      	movs	r0, #64	; 0x40
2400e330:	e7ad      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e332:	2080      	movs	r0, #128	; 0x80
2400e334:	e7ab      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e336:	f44f 7080 	mov.w	r0, #256	; 0x100
2400e33a:	e7a8      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e33c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400e340:	e7a5      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e342:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400e346:	e7a2      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e348:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400e34c:	e79f      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e34e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400e352:	e79c      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e358:	e799      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e35a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400e35e:	e796      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e360:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400e364:	e793      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_CC_ERR;
2400e366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400e36a:	e790      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e36c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400e370:	e78d      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_ERASE_RESET;
2400e372:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400e376:	e78a      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e378:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400e37c:	e787      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e37e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400e382:	e784      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e384:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400e388:	e781      	b.n	2400e28e <SDMMC_CmdSendSCR+0x5a>
2400e38a:	bf00      	nop

2400e38c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e38c:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400e390:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e394:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e398:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e39a:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400e39e:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e3a2:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e3a6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400e3a8:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e3aa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e3ac:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e3ae:	fbac c202 	umull	ip, r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e3b2:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e3b4:	f241 3c88 	movw	ip, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e3b8:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e3ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e3bc:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e3c0:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e3c4:	4318      	orrs	r0, r3
2400e3c6:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400e3c8:	b14a      	cbz	r2, 2400e3de <SDMMC_CmdSendCID+0x52>
2400e3ca:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400e3cc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400e3ce:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400e3d0:	f012 0f45 	tst.w	r2, #69	; 0x45
2400e3d4:	d001      	beq.n	2400e3da <SDMMC_CmdSendCID+0x4e>
2400e3d6:	0492      	lsls	r2, r2, #18
2400e3d8:	d506      	bpl.n	2400e3e8 <SDMMC_CmdSendCID+0x5c>
    if (count-- == 0U)
2400e3da:	1c58      	adds	r0, r3, #1
2400e3dc:	d1f6      	bne.n	2400e3cc <SDMMC_CmdSendCID+0x40>
      return SDMMC_ERROR_TIMEOUT;
2400e3de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e3e6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e3e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400e3ea:	075b      	lsls	r3, r3, #29
2400e3ec:	d40d      	bmi.n	2400e40a <SDMMC_CmdSendCID+0x7e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e3ee:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400e3f0:	f010 0001 	ands.w	r0, r0, #1
2400e3f4:	d106      	bne.n	2400e404 <SDMMC_CmdSendCID+0x78>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e3f6:	23c5      	movs	r3, #197	; 0xc5
2400e3f8:	f2c0 0320 	movt	r3, #32
2400e3fc:	638b      	str	r3, [r1, #56]	; 0x38
}
2400e3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e402:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e404:	2301      	movs	r3, #1
2400e406:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e408:	e7eb      	b.n	2400e3e2 <SDMMC_CmdSendCID+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e40a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e40c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e40e:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e410:	e7e7      	b.n	2400e3e2 <SDMMC_CmdSendCID+0x56>
2400e412:	bf00      	nop

2400e414 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e414:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e418:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e41c:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e41e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e422:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e426:	b500      	push	{lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e428:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400e42c:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e42e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e430:	f241 3109 	movw	r1, #4873	; 0x1309
2400e434:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e436:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e43a:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e43c:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e440:	4319      	orrs	r1, r3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e442:	0a52      	lsrs	r2, r2, #9
2400e444:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e448:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e44c:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400e450:	b152      	cbz	r2, 2400e468 <SDMMC_CmdSendCSD+0x54>
2400e452:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400e454:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400e458:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400e45a:	f012 0f45 	tst.w	r2, #69	; 0x45
2400e45e:	d001      	beq.n	2400e464 <SDMMC_CmdSendCSD+0x50>
2400e460:	0492      	lsls	r2, r2, #18
2400e462:	d505      	bpl.n	2400e470 <SDMMC_CmdSendCSD+0x5c>
    if (count-- == 0U)
2400e464:	1c59      	adds	r1, r3, #1
2400e466:	d1f5      	bne.n	2400e454 <SDMMC_CmdSendCSD+0x40>
      return SDMMC_ERROR_TIMEOUT;
2400e468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e46c:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e470:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400e474:	075b      	lsls	r3, r3, #29
2400e476:	d40f      	bmi.n	2400e498 <SDMMC_CmdSendCSD+0x84>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e478:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400e47c:	f010 0001 	ands.w	r0, r0, #1
2400e480:	d106      	bne.n	2400e490 <SDMMC_CmdSendCSD+0x7c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e482:	23c5      	movs	r3, #197	; 0xc5
2400e484:	f2c0 0320 	movt	r3, #32
2400e488:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
2400e48c:	f85d fb04 	ldr.w	pc, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e490:	2301      	movs	r3, #1
2400e492:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e496:	e7e9      	b.n	2400e46c <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e498:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e49a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e49c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e4a0:	e7e4      	b.n	2400e46c <SDMMC_CmdSendCSD+0x58>
2400e4a2:	bf00      	nop

2400e4a4 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4a4:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400e4a8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
{
2400e4ac:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400e4b2:	f2c1 0362 	movt	r3, #4194	; 0x1062
{
2400e4b6:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4b8:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e4ba:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4bc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e4c0:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
  SDMMCx->ARG = Command->Argument;
2400e4c4:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e4c6:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
2400e4ca:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4cc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e4ce:	4003      	ands	r3, r0
2400e4d0:	f241 1003 	movw	r0, #4355	; 0x1103
2400e4d4:	4318      	orrs	r0, r3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400e4d6:	f241 3388 	movw	r3, #5000	; 0x1388
2400e4da:	fb03 f202 	mul.w	r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e4de:	f8cc 000c 	str.w	r0, [ip, #12]
    if (count-- == 0U)
2400e4e2:	b152      	cbz	r2, 2400e4fa <SDMMC_CmdSetRelAdd+0x56>
2400e4e4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400e4e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400e4ea:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400e4ec:	f012 0f45 	tst.w	r2, #69	; 0x45
2400e4f0:	d001      	beq.n	2400e4f6 <SDMMC_CmdSetRelAdd+0x52>
2400e4f2:	0494      	lsls	r4, r2, #18
2400e4f4:	d506      	bpl.n	2400e504 <SDMMC_CmdSetRelAdd+0x60>
    if (count-- == 0U)
2400e4f6:	1c5a      	adds	r2, r3, #1
2400e4f8:	d1f5      	bne.n	2400e4e6 <SDMMC_CmdSetRelAdd+0x42>
      return SDMMC_ERROR_TIMEOUT;
2400e4fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e502:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e504:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400e508:	0758      	lsls	r0, r3, #29
2400e50a:	d423      	bmi.n	2400e554 <SDMMC_CmdSetRelAdd+0xb0>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e50c:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400e510:	f010 0001 	ands.w	r0, r0, #1
2400e514:	d118      	bne.n	2400e548 <SDMMC_CmdSetRelAdd+0xa4>
  return (uint8_t)(SDMMCx->RESPCMD);
2400e516:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e51a:	b2db      	uxtb	r3, r3
2400e51c:	2b03      	cmp	r3, #3
2400e51e:	d117      	bne.n	2400e550 <SDMMC_CmdSetRelAdd+0xac>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e520:	23c5      	movs	r3, #197	; 0xc5
2400e522:	f2c0 0320 	movt	r3, #32
2400e526:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400e52a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400e52e:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
2400e532:	d017      	beq.n	2400e564 <SDMMC_CmdSetRelAdd+0xc0>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400e534:	045a      	lsls	r2, r3, #17
2400e536:	d412      	bmi.n	2400e55e <SDMMC_CmdSetRelAdd+0xba>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e538:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400e53c:	bf14      	ite	ne
2400e53e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
2400e542:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400e546:	e7da      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e548:	2301      	movs	r3, #1
2400e54a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e54e:	e7d6      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e550:	2001      	movs	r0, #1
2400e552:	e7d4      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e554:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e556:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e558:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e55c:	e7cf      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e55e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e562:	e7cc      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400e564:	0c1b      	lsrs	r3, r3, #16
2400e566:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
2400e568:	e7c9      	b.n	2400e4fe <SDMMC_CmdSetRelAdd+0x5a>
2400e56a:	bf00      	nop

2400e56c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e56c:	f640 02ec 	movw	r2, #2284	; 0x8ec
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e570:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e574:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e576:	f2c2 0200 	movt	r2, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e57a:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e57e:	b500      	push	{lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e580:	f644 5ed3 	movw	lr, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
2400e584:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e586:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e588:	f241 110d 	movw	r1, #4365	; 0x110d
2400e58c:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e58e:	f2c1 0e62 	movt	lr, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e592:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e594:	fbae e202 	umull	lr, r2, lr, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e598:	4319      	orrs	r1, r3
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e59a:	0a52      	lsrs	r2, r2, #9
2400e59c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e5a0:	f8cc 100c 	str.w	r1, [ip, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e5a4:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400e5a8:	b162      	cbz	r2, 2400e5c4 <SDMMC_CmdSendStatus+0x58>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e5aa:	2145      	movs	r1, #69	; 0x45
2400e5ac:	1e53      	subs	r3, r2, #1
2400e5ae:	f2c0 0120 	movt	r1, #32
    sta_reg = SDMMCx->STA;
2400e5b2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400e5b6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e5b8:	420a      	tst	r2, r1
2400e5ba:	d001      	beq.n	2400e5c0 <SDMMC_CmdSendStatus+0x54>
2400e5bc:	0492      	lsls	r2, r2, #18
2400e5be:	d505      	bpl.n	2400e5cc <SDMMC_CmdSendStatus+0x60>
    if (count-- == 0U)
2400e5c0:	1c58      	adds	r0, r3, #1
2400e5c2:	d1f6      	bne.n	2400e5b2 <SDMMC_CmdSendStatus+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400e5c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e5c8:	f85d fb04 	ldr.w	pc, [sp], #4
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e5cc:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400e5d0:	0758      	lsls	r0, r3, #29
2400e5d2:	d447      	bmi.n	2400e664 <SDMMC_CmdSendStatus+0xf8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e5d4:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400e5d8:	f010 0001 	ands.w	r0, r0, #1
2400e5dc:	d13c      	bne.n	2400e658 <SDMMC_CmdSendStatus+0xec>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e5de:	23c5      	movs	r3, #197	; 0xc5
2400e5e0:	f2c0 0320 	movt	r3, #32
2400e5e4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e5e8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e5ec:	b2db      	uxtb	r3, r3
2400e5ee:	2b0d      	cmp	r3, #13
2400e5f0:	d136      	bne.n	2400e660 <SDMMC_CmdSendStatus+0xf4>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e5f2:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400e5f6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e5fa:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400e5fe:	4018      	ands	r0, r3
2400e600:	2800      	cmp	r0, #0
2400e602:	d0e1      	beq.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e604:	2b00      	cmp	r3, #0
2400e606:	db32      	blt.n	2400e66e <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e608:	0059      	lsls	r1, r3, #1
2400e60a:	d433      	bmi.n	2400e674 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e60c:	009a      	lsls	r2, r3, #2
2400e60e:	d433      	bmi.n	2400e678 <SDMMC_CmdSendStatus+0x10c>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e610:	00d9      	lsls	r1, r3, #3
2400e612:	d433      	bmi.n	2400e67c <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e614:	011a      	lsls	r2, r3, #4
2400e616:	d434      	bmi.n	2400e682 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e618:	0159      	lsls	r1, r3, #5
2400e61a:	d435      	bmi.n	2400e688 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e61c:	01da      	lsls	r2, r3, #7
2400e61e:	d436      	bmi.n	2400e68e <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e620:	0219      	lsls	r1, r3, #8
2400e622:	d437      	bmi.n	2400e694 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e624:	025a      	lsls	r2, r3, #9
2400e626:	d438      	bmi.n	2400e69a <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e628:	0299      	lsls	r1, r3, #10
2400e62a:	d442      	bmi.n	2400e6b2 <SDMMC_CmdSendStatus+0x146>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e62c:	02da      	lsls	r2, r3, #11
2400e62e:	d43d      	bmi.n	2400e6ac <SDMMC_CmdSendStatus+0x140>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e630:	0359      	lsls	r1, r3, #13
2400e632:	d438      	bmi.n	2400e6a6 <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e634:	039a      	lsls	r2, r3, #14
2400e636:	d433      	bmi.n	2400e6a0 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e638:	03d9      	lsls	r1, r3, #15
2400e63a:	d446      	bmi.n	2400e6ca <SDMMC_CmdSendStatus+0x15e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e63c:	041a      	lsls	r2, r3, #16
2400e63e:	d441      	bmi.n	2400e6c4 <SDMMC_CmdSendStatus+0x158>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e640:	0459      	lsls	r1, r3, #17
2400e642:	d43c      	bmi.n	2400e6be <SDMMC_CmdSendStatus+0x152>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e644:	049a      	lsls	r2, r3, #18
2400e646:	d437      	bmi.n	2400e6b8 <SDMMC_CmdSendStatus+0x14c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e648:	f013 0f08 	tst.w	r3, #8
2400e64c:	bf14      	ite	ne
2400e64e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400e652:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400e656:	e7b7      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e658:	2301      	movs	r3, #1
2400e65a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e65e:	e7b3      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e660:	2001      	movs	r0, #1
2400e662:	e7b1      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e664:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e666:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e668:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e66c:	e7ac      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e66e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400e672:	e7a9      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e674:	2040      	movs	r0, #64	; 0x40
2400e676:	e7a7      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e678:	2080      	movs	r0, #128	; 0x80
2400e67a:	e7a5      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e67c:	f44f 7080 	mov.w	r0, #256	; 0x100
2400e680:	e7a2      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e682:	f44f 7000 	mov.w	r0, #512	; 0x200
2400e686:	e79f      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e688:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400e68c:	e79c      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e68e:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400e692:	e799      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e694:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400e698:	e796      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e69a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e69e:	e793      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e6a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400e6a4:	e790      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e6a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400e6aa:	e78d      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_CC_ERR;
2400e6ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400e6b0:	e78a      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e6b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400e6b6:	e787      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_ERASE_RESET;
2400e6b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400e6bc:	e784      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e6be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400e6c2:	e781      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e6c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400e6c8:	e77e      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e6ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400e6ce:	e77b      	b.n	2400e5c8 <SDMMC_CmdSendStatus+0x5c>

2400e6d0 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6d0:	f640 02ec 	movw	r2, #2284	; 0x8ec
2400e6d4:	f644 5cd3 	movw	ip, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e6d8:	f24e 03c0 	movw	r3, #57536	; 0xe0c0
{
2400e6dc:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6de:	f2c2 0200 	movt	r2, #8192	; 0x2000
2400e6e2:	f2c1 0c62 	movt	ip, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e6e6:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2400e6ea:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400e6ec:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6ee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e6f0:	6084      	str	r4, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6f2:	fbac c202 	umull	ip, r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e6f6:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6f8:	f241 3c88 	movw	ip, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e6fc:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6fe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e700:	f241 100d 	movw	r0, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e704:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e708:	4318      	orrs	r0, r3
2400e70a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400e70c:	b15a      	cbz	r2, 2400e726 <SDMMC_CmdStatusRegister+0x56>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e70e:	2045      	movs	r0, #69	; 0x45
2400e710:	1e53      	subs	r3, r2, #1
2400e712:	f2c0 0020 	movt	r0, #32
    sta_reg = SDMMCx->STA;
2400e716:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400e718:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e71a:	4202      	tst	r2, r0
2400e71c:	d001      	beq.n	2400e722 <SDMMC_CmdStatusRegister+0x52>
2400e71e:	0494      	lsls	r4, r2, #18
2400e720:	d506      	bpl.n	2400e730 <SDMMC_CmdStatusRegister+0x60>
    if (count-- == 0U)
2400e722:	1c5a      	adds	r2, r3, #1
2400e724:	d1f7      	bne.n	2400e716 <SDMMC_CmdStatusRegister+0x46>
      return SDMMC_ERROR_TIMEOUT;
2400e726:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400e72a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e72e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e730:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400e732:	0758      	lsls	r0, r3, #29
2400e734:	d442      	bmi.n	2400e7bc <SDMMC_CmdStatusRegister+0xec>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e736:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400e738:	f010 0001 	ands.w	r0, r0, #1
2400e73c:	d139      	bne.n	2400e7b2 <SDMMC_CmdStatusRegister+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e73e:	23c5      	movs	r3, #197	; 0xc5
2400e740:	f2c0 0320 	movt	r3, #32
2400e744:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e746:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e748:	b2db      	uxtb	r3, r3
2400e74a:	2b0d      	cmp	r3, #13
2400e74c:	d134      	bne.n	2400e7b8 <SDMMC_CmdStatusRegister+0xe8>
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e74e:	f24e 0008 	movw	r0, #57352	; 0xe008
  return (*(__IO uint32_t *) tmp);
2400e752:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e754:	f6cf 50ff 	movt	r0, #65023	; 0xfdff
2400e758:	4018      	ands	r0, r3
2400e75a:	2800      	cmp	r0, #0
2400e75c:	d0e5      	beq.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e75e:	2b00      	cmp	r3, #0
2400e760:	db30      	blt.n	2400e7c4 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e762:	005a      	lsls	r2, r3, #1
2400e764:	d431      	bmi.n	2400e7ca <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e766:	009c      	lsls	r4, r3, #2
2400e768:	d431      	bmi.n	2400e7ce <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e76a:	00d9      	lsls	r1, r3, #3
2400e76c:	d431      	bmi.n	2400e7d2 <SDMMC_CmdStatusRegister+0x102>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e76e:	011a      	lsls	r2, r3, #4
2400e770:	d432      	bmi.n	2400e7d8 <SDMMC_CmdStatusRegister+0x108>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e772:	015c      	lsls	r4, r3, #5
2400e774:	d433      	bmi.n	2400e7de <SDMMC_CmdStatusRegister+0x10e>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e776:	01d9      	lsls	r1, r3, #7
2400e778:	d434      	bmi.n	2400e7e4 <SDMMC_CmdStatusRegister+0x114>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e77a:	021a      	lsls	r2, r3, #8
2400e77c:	d435      	bmi.n	2400e7ea <SDMMC_CmdStatusRegister+0x11a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e77e:	025c      	lsls	r4, r3, #9
2400e780:	d436      	bmi.n	2400e7f0 <SDMMC_CmdStatusRegister+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e782:	0299      	lsls	r1, r3, #10
2400e784:	d440      	bmi.n	2400e808 <SDMMC_CmdStatusRegister+0x138>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e786:	02da      	lsls	r2, r3, #11
2400e788:	d43b      	bmi.n	2400e802 <SDMMC_CmdStatusRegister+0x132>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e78a:	035c      	lsls	r4, r3, #13
2400e78c:	d436      	bmi.n	2400e7fc <SDMMC_CmdStatusRegister+0x12c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e78e:	0399      	lsls	r1, r3, #14
2400e790:	d431      	bmi.n	2400e7f6 <SDMMC_CmdStatusRegister+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e792:	03da      	lsls	r2, r3, #15
2400e794:	d444      	bmi.n	2400e820 <SDMMC_CmdStatusRegister+0x150>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e796:	041c      	lsls	r4, r3, #16
2400e798:	d43f      	bmi.n	2400e81a <SDMMC_CmdStatusRegister+0x14a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e79a:	0459      	lsls	r1, r3, #17
2400e79c:	d43a      	bmi.n	2400e814 <SDMMC_CmdStatusRegister+0x144>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e79e:	049a      	lsls	r2, r3, #18
2400e7a0:	d435      	bmi.n	2400e80e <SDMMC_CmdStatusRegister+0x13e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e7a2:	f013 0f08 	tst.w	r3, #8
2400e7a6:	bf14      	ite	ne
2400e7a8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400e7ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400e7b0:	e7bb      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e7b2:	2301      	movs	r3, #1
2400e7b4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e7b6:	e7b8      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e7b8:	2001      	movs	r0, #1
2400e7ba:	e7b6      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e7bc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e7be:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e7c0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e7c2:	e7b2      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e7c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400e7c8:	e7af      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e7ca:	2040      	movs	r0, #64	; 0x40
2400e7cc:	e7ad      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e7ce:	2080      	movs	r0, #128	; 0x80
2400e7d0:	e7ab      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e7d2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400e7d6:	e7a8      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e7d8:	f44f 7000 	mov.w	r0, #512	; 0x200
2400e7dc:	e7a5      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e7de:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400e7e2:	e7a2      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e7e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400e7e8:	e79f      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e7ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400e7ee:	e79c      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e7f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400e7f4:	e799      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e7f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400e7fa:	e796      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e7fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400e800:	e793      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_CC_ERR;
2400e802:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400e806:	e790      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e808:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400e80c:	e78d      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_ERASE_RESET;
2400e80e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400e812:	e78a      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e814:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400e818:	e787      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e81a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400e81e:	e784      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e820:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400e824:	e781      	b.n	2400e72a <SDMMC_CmdStatusRegister+0x5a>
2400e826:	bf00      	nop

2400e828 <MX_FATFS_Init>:
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400e828:	f64d 6194 	movw	r1, #56980	; 0xde94
2400e82c:	f24f 502c 	movw	r0, #62764	; 0xf52c
{
2400e830:	b508      	push	{r3, lr}
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400e832:	f2c2 0101 	movt	r1, #8193	; 0x2001
2400e836:	f2c2 4001 	movt	r0, #9217	; 0x2401
2400e83a:	f003 f94b 	bl	24011ad4 <FATFS_LinkDriver>
2400e83e:	f64d 6398 	movw	r3, #56984	; 0xde98
2400e842:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400e846:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400e848:	bd08      	pop	{r3, pc}
2400e84a:	bf00      	nop

2400e84c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400e84c:	2000      	movs	r0, #0
2400e84e:	4770      	bx	lr

2400e850 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400e850:	b510      	push	{r4, lr}
2400e852:	4684      	mov	ip, r0
2400e854:	b082      	sub	sp, #8
2400e856:	4696      	mov	lr, r2
2400e858:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400e85a:	f64c 40ac 	movw	r0, #52396	; 0xccac
2400e85e:	460a      	mov	r2, r1
2400e860:	4673      	mov	r3, lr
2400e862:	4661      	mov	r1, ip
2400e864:	9400      	str	r4, [sp, #0]
2400e866:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e86a:	f7fd f989 	bl	2400bb80 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400e86e:	3800      	subs	r0, #0
2400e870:	bf18      	it	ne
2400e872:	2001      	movne	r0, #1
2400e874:	b002      	add	sp, #8
2400e876:	bd10      	pop	{r4, pc}

2400e878 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400e878:	b510      	push	{r4, lr}
2400e87a:	4684      	mov	ip, r0
2400e87c:	b082      	sub	sp, #8
2400e87e:	4696      	mov	lr, r2
2400e880:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400e882:	f64c 40ac 	movw	r0, #52396	; 0xccac
2400e886:	460a      	mov	r2, r1
2400e888:	4673      	mov	r3, lr
2400e88a:	4661      	mov	r1, ip
2400e88c:	9400      	str	r4, [sp, #0]
2400e88e:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e892:	f7fd fa73 	bl	2400bd7c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400e896:	3800      	subs	r0, #0
2400e898:	bf18      	it	ne
2400e89a:	2001      	movne	r0, #1
2400e89c:	b002      	add	sp, #8
2400e89e:	bd10      	pop	{r4, pc}

2400e8a0 <BSP_SD_GetCardState>:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400e8a0:	f64c 40ac 	movw	r0, #52396	; 0xccac
{
2400e8a4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400e8a6:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e8aa:	f7fd fee1 	bl	2400c670 <HAL_SD_GetCardState>
}
2400e8ae:	3804      	subs	r0, #4
2400e8b0:	bf18      	it	ne
2400e8b2:	2001      	movne	r0, #1
2400e8b4:	bd08      	pop	{r3, pc}
2400e8b6:	bf00      	nop

2400e8b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400e8b8:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400e8ba:	f64c 40ac 	movw	r0, #52396	; 0xccac
2400e8be:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e8c2:	f7fd bd83 	b.w	2400c3cc <HAL_SD_GetCardInfo>
2400e8c6:	bf00      	nop

2400e8c8 <BSP_SD_Init>:
{
2400e8c8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400e8ca:	f7f3 f871 	bl	240019b0 <BSP_SD_IsDetected>
2400e8ce:	2801      	cmp	r0, #1
2400e8d0:	d001      	beq.n	2400e8d6 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400e8d2:	2002      	movs	r0, #2
}
2400e8d4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400e8d6:	f64c 40ac 	movw	r0, #52396	; 0xccac
2400e8da:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e8de:	f7fd fe5f 	bl	2400c5a0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400e8e2:	2800      	cmp	r0, #0
2400e8e4:	d1f6      	bne.n	2400e8d4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400e8e6:	f64c 40ac 	movw	r0, #52396	; 0xccac
2400e8ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400e8ee:	f2c2 0001 	movt	r0, #8193	; 0x2001
2400e8f2:	f7fd fd7f 	bl	2400c3f4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400e8f6:	3800      	subs	r0, #0
2400e8f8:	bf18      	it	ne
2400e8fa:	2001      	movne	r0, #1
}
2400e8fc:	bd08      	pop	{r3, pc}
2400e8fe:	bf00      	nop

2400e900 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400e900:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400e902:	f640 143c 	movw	r4, #2364	; 0x93c
2400e906:	2501      	movs	r5, #1
2400e908:	f2c2 0400 	movt	r4, #8192	; 0x2000
2400e90c:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400e90e:	f7ff ffdb 	bl	2400e8c8 <BSP_SD_Init>
2400e912:	b108      	cbz	r0, 2400e918 <SD_initialize+0x18>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400e914:	7820      	ldrb	r0, [r4, #0]
}
2400e916:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400e918:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400e91a:	f7ff ffc1 	bl	2400e8a0 <BSP_SD_GetCardState>
2400e91e:	b918      	cbnz	r0, 2400e928 <SD_initialize+0x28>
    Stat &= ~STA_NOINIT;
2400e920:	7823      	ldrb	r3, [r4, #0]
2400e922:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400e926:	7023      	strb	r3, [r4, #0]
  return Stat;
2400e928:	7823      	ldrb	r3, [r4, #0]
2400e92a:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400e92c:	7023      	strb	r3, [r4, #0]
  return Stat;
2400e92e:	7820      	ldrb	r0, [r4, #0]
}
2400e930:	bd38      	pop	{r3, r4, r5, pc}
2400e932:	bf00      	nop

2400e934 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400e934:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400e936:	f640 143c 	movw	r4, #2364	; 0x93c
2400e93a:	2301      	movs	r3, #1
2400e93c:	f2c2 0400 	movt	r4, #8192	; 0x2000
2400e940:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400e942:	f7ff ffad 	bl	2400e8a0 <BSP_SD_GetCardState>
2400e946:	b918      	cbnz	r0, 2400e950 <SD_status+0x1c>
    Stat &= ~STA_NOINIT;
2400e948:	7823      	ldrb	r3, [r4, #0]
2400e94a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400e94e:	7023      	strb	r3, [r4, #0]
  return Stat;
2400e950:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400e952:	bd10      	pop	{r4, pc}

2400e954 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400e954:	b508      	push	{r3, lr}
2400e956:	4608      	mov	r0, r1
2400e958:	4611      	mov	r1, r2
2400e95a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400e95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e960:	f7ff ff76 	bl	2400e850 <BSP_SD_ReadBlocks>
2400e964:	b108      	cbz	r0, 2400e96a <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400e966:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400e968:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400e96a:	f7ff ff99 	bl	2400e8a0 <BSP_SD_GetCardState>
2400e96e:	2800      	cmp	r0, #0
2400e970:	d0fa      	beq.n	2400e968 <SD_read+0x14>
2400e972:	f7ff ff95 	bl	2400e8a0 <BSP_SD_GetCardState>
2400e976:	2800      	cmp	r0, #0
2400e978:	d1f7      	bne.n	2400e96a <SD_read+0x16>
2400e97a:	e7f5      	b.n	2400e968 <SD_read+0x14>

2400e97c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400e97c:	f640 133c 	movw	r3, #2364	; 0x93c
2400e980:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
2400e984:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400e986:	7818      	ldrb	r0, [r3, #0]
{
2400e988:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400e98a:	f010 0401 	ands.w	r4, r0, #1
2400e98e:	d106      	bne.n	2400e99e <SD_ioctl+0x22>
2400e990:	4615      	mov	r5, r2

  switch (cmd)
2400e992:	2903      	cmp	r1, #3
2400e994:	d824      	bhi.n	2400e9e0 <SD_ioctl+0x64>
2400e996:	e8df f001 	tbb	[pc, r1]
2400e99a:	0a06      	.short	0x0a06
2400e99c:	1a12      	.short	0x1a12
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400e99e:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400e9a0:	4620      	mov	r0, r4
2400e9a2:	b00b      	add	sp, #44	; 0x2c
2400e9a4:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400e9a6:	460c      	mov	r4, r1
}
2400e9a8:	4620      	mov	r0, r4
2400e9aa:	b00b      	add	sp, #44	; 0x2c
2400e9ac:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400e9ae:	a801      	add	r0, sp, #4
2400e9b0:	f7ff ff82 	bl	2400e8b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400e9b4:	9b07      	ldr	r3, [sp, #28]
}
2400e9b6:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400e9b8:	602b      	str	r3, [r5, #0]
}
2400e9ba:	b00b      	add	sp, #44	; 0x2c
2400e9bc:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400e9be:	a801      	add	r0, sp, #4
2400e9c0:	f7ff ff7a 	bl	2400e8b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400e9c4:	9b08      	ldr	r3, [sp, #32]
}
2400e9c6:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400e9c8:	802b      	strh	r3, [r5, #0]
}
2400e9ca:	b00b      	add	sp, #44	; 0x2c
2400e9cc:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400e9ce:	a801      	add	r0, sp, #4
2400e9d0:	f7ff ff72 	bl	2400e8b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400e9d4:	9b08      	ldr	r3, [sp, #32]
}
2400e9d6:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400e9d8:	0a5b      	lsrs	r3, r3, #9
2400e9da:	602b      	str	r3, [r5, #0]
}
2400e9dc:	b00b      	add	sp, #44	; 0x2c
2400e9de:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400e9e0:	2404      	movs	r4, #4
2400e9e2:	e7dd      	b.n	2400e9a0 <SD_ioctl+0x24>

2400e9e4 <SD_write>:
{
2400e9e4:	b508      	push	{r3, lr}
2400e9e6:	4608      	mov	r0, r1
2400e9e8:	4611      	mov	r1, r2
2400e9ea:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400e9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e9f0:	f7ff ff42 	bl	2400e878 <BSP_SD_WriteBlocks>
2400e9f4:	b108      	cbz	r0, 2400e9fa <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400e9f6:	2001      	movs	r0, #1
}
2400e9f8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400e9fa:	f7ff ff51 	bl	2400e8a0 <BSP_SD_GetCardState>
2400e9fe:	2800      	cmp	r0, #0
2400ea00:	d0fa      	beq.n	2400e9f8 <SD_write+0x14>
2400ea02:	f7ff ff4d 	bl	2400e8a0 <BSP_SD_GetCardState>
2400ea06:	2800      	cmp	r0, #0
2400ea08:	d1f7      	bne.n	2400e9fa <SD_write+0x16>
2400ea0a:	e7f5      	b.n	2400e9f8 <SD_write+0x14>

2400ea0c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400ea0c:	f24e 03c4 	movw	r3, #57540	; 0xe0c4
2400ea10:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400ea14:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400ea18:	4418      	add	r0, r3
2400ea1a:	6853      	ldr	r3, [r2, #4]
2400ea1c:	7a00      	ldrb	r0, [r0, #8]
2400ea1e:	685b      	ldr	r3, [r3, #4]
2400ea20:	4718      	bx	r3
2400ea22:	bf00      	nop

2400ea24 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400ea24:	f24e 03c4 	movw	r3, #57540	; 0xe0c4
2400ea28:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400ea2c:	5c1a      	ldrb	r2, [r3, r0]
2400ea2e:	b952      	cbnz	r2, 2400ea46 <disk_initialize+0x22>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400ea30:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400ea34:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400ea36:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400ea3a:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400ea3c:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400ea40:	7a08      	ldrb	r0, [r1, #8]
2400ea42:	6813      	ldr	r3, [r2, #0]
2400ea44:	4718      	bx	r3
  }
  return stat;
}
2400ea46:	2000      	movs	r0, #0
2400ea48:	4770      	bx	lr
2400ea4a:	bf00      	nop

2400ea4c <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400ea4c:	f24e 0cc4 	movw	ip, #57540	; 0xe0c4
2400ea50:	f2c2 0c01 	movt	ip, #8193	; 0x2001
{
2400ea54:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400ea56:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
2400ea5a:	4460      	add	r0, ip
2400ea5c:	6864      	ldr	r4, [r4, #4]
2400ea5e:	7a00      	ldrb	r0, [r0, #8]
2400ea60:	68a4      	ldr	r4, [r4, #8]
2400ea62:	46a4      	mov	ip, r4
  return res;
}
2400ea64:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400ea68:	4760      	bx	ip
2400ea6a:	bf00      	nop

2400ea6c <disk_write>:
	UINT count        	/* Number of sectors to write */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400ea6c:	f24e 0cc4 	movw	ip, #57540	; 0xe0c4
2400ea70:	f2c2 0c01 	movt	ip, #8193	; 0x2001
{
2400ea74:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400ea76:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
2400ea7a:	4460      	add	r0, ip
2400ea7c:	6864      	ldr	r4, [r4, #4]
2400ea7e:	7a00      	ldrb	r0, [r0, #8]
2400ea80:	68e4      	ldr	r4, [r4, #12]
2400ea82:	46a4      	mov	ip, r4
  return res;
}
2400ea84:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400ea88:	4760      	bx	ip
2400ea8a:	bf00      	nop

2400ea8c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400ea8c:	f24e 03c4 	movw	r3, #57540	; 0xe0c4
2400ea90:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400ea94:	eb03 0c00 	add.w	ip, r3, r0
2400ea98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400ea9c:	6843      	ldr	r3, [r0, #4]
2400ea9e:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400eaa2:	691b      	ldr	r3, [r3, #16]
2400eaa4:	4718      	bx	r3
2400eaa6:	bf00      	nop

2400eaa8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400eaa8:	f64d 63a0 	movw	r3, #56992	; 0xdea0
{
2400eaac:	4684      	mov	ip, r0
		if (Files[i].fs == dp->obj.fs &&
2400eaae:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
2400eab2:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
2400eab4:	6804      	ldr	r4, [r0, #0]
2400eab6:	681a      	ldr	r2, [r3, #0]
2400eab8:	4294      	cmp	r4, r2
2400eaba:	d01c      	beq.n	2400eaf6 <inc_lock+0x4e>
2400eabc:	6918      	ldr	r0, [r3, #16]
2400eabe:	42a0      	cmp	r0, r4
2400eac0:	d005      	beq.n	2400eace <inc_lock+0x26>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400eac2:	b372      	cbz	r2, 2400eb22 <inc_lock+0x7a>
2400eac4:	2800      	cmp	r0, #0
2400eac6:	d044      	beq.n	2400eb52 <inc_lock+0xaa>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400eac8:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400eaca:	bc70      	pop	{r4, r5, r6}
2400eacc:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400eace:	695d      	ldr	r5, [r3, #20]
2400ead0:	f8dc 6008 	ldr.w	r6, [ip, #8]
2400ead4:	42b5      	cmp	r5, r6
2400ead6:	d1f4      	bne.n	2400eac2 <inc_lock+0x1a>
			Files[i].clu == dp->obj.sclust &&
2400ead8:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400eadc:	699e      	ldr	r6, [r3, #24]
2400eade:	42ae      	cmp	r6, r5
2400eae0:	d1ef      	bne.n	2400eac2 <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400eae2:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400eae4:	b999      	cbnz	r1, 2400eb0e <inc_lock+0x66>
2400eae6:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400eaea:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400eaec:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400eaee:	89a2      	ldrh	r2, [r4, #12]
2400eaf0:	3201      	adds	r2, #1
2400eaf2:	b292      	uxth	r2, r2
2400eaf4:	e029      	b.n	2400eb4a <inc_lock+0xa2>
		if (Files[i].fs == dp->obj.fs &&
2400eaf6:	6880      	ldr	r0, [r0, #8]
2400eaf8:	685d      	ldr	r5, [r3, #4]
2400eafa:	4285      	cmp	r5, r0
2400eafc:	d1de      	bne.n	2400eabc <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
2400eafe:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400eb02:	6898      	ldr	r0, [r3, #8]
2400eb04:	4285      	cmp	r5, r0
2400eb06:	d1d9      	bne.n	2400eabc <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400eb08:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400eb0a:	2900      	cmp	r1, #0
2400eb0c:	d0eb      	beq.n	2400eae6 <inc_lock+0x3e>
2400eb0e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400eb12:	0111      	lsls	r1, r2, #4
2400eb14:	8980      	ldrh	r0, [r0, #12]
2400eb16:	2800      	cmp	r0, #0
2400eb18:	d1d6      	bne.n	2400eac8 <inc_lock+0x20>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400eb1a:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400eb1c:	f44f 7280 	mov.w	r2, #256	; 0x100
2400eb20:	e013      	b.n	2400eb4a <inc_lock+0xa2>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400eb22:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400eb24:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400eb26:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400eb2a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400eb2e:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400eb30:	f8dc 4014 	ldr.w	r4, [ip, #20]
2400eb34:	f8dc 5008 	ldr.w	r5, [ip, #8]
2400eb38:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
2400eb3c:	f04f 0400 	mov.w	r4, #0
2400eb40:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400eb42:	bf14      	ite	ne
2400eb44:	f44f 7280 	movne.w	r2, #256	; 0x100
2400eb48:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400eb4a:	440b      	add	r3, r1
2400eb4c:	819a      	strh	r2, [r3, #12]
}
2400eb4e:	bc70      	pop	{r4, r5, r6}
2400eb50:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400eb52:	2002      	movs	r0, #2
2400eb54:	2201      	movs	r2, #1
2400eb56:	e7e5      	b.n	2400eb24 <inc_lock+0x7c>

2400eb58 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400eb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400eb5c:	f24f 5e54 	movw	lr, #62804	; 0xf554
{
2400eb60:	460d      	mov	r5, r1
2400eb62:	4606      	mov	r6, r0
2400eb64:	440a      	add	r2, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400eb66:	f2c2 4e01 	movt	lr, #9217	; 0x2401
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400eb6a:	42aa      	cmp	r2, r5
2400eb6c:	d012      	beq.n	2400eb94 <pattern_matching+0x3c>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400eb6e:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400eb72:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400eb76:	eb0e 000c 	add.w	r0, lr, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400eb7a:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400eb7e:	2919      	cmp	r1, #25
2400eb80:	d9f3      	bls.n	2400eb6a <pattern_matching+0x12>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400eb82:	2c7f      	cmp	r4, #127	; 0x7f
2400eb84:	bf88      	it	hi
2400eb86:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400eb8a:	2c00      	cmp	r4, #0
2400eb8c:	d1ed      	bne.n	2400eb6a <pattern_matching+0x12>
2400eb8e:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400eb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400eb94:	1e1f      	subs	r7, r3, #0
2400eb96:	f896 8000 	ldrb.w	r8, [r6]
2400eb9a:	bf18      	it	ne
2400eb9c:	2701      	movne	r7, #1
2400eb9e:	f1b8 0f00 	cmp.w	r8, #0
2400eba2:	d100      	bne.n	2400eba6 <pattern_matching+0x4e>
2400eba4:	bba7      	cbnz	r7, 2400ec10 <pattern_matching+0xb8>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400eba6:	f24f 5454 	movw	r4, #62804	; 0xf554
2400ebaa:	f2c2 4401 	movt	r4, #9217	; 0x2401
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400ebae:	4630      	mov	r0, r6
{
2400ebb0:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400ebb2:	46a9      	mov	r9, r5
2400ebb4:	e010      	b.n	2400ebd8 <pattern_matching+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ebb6:	3a20      	subs	r2, #32
2400ebb8:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ebba:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ebbe:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ebc2:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ebc4:	f1bc 0f19 	cmp.w	ip, #25
2400ebc8:	d815      	bhi.n	2400ebf6 <pattern_matching+0x9e>
2400ebca:	3b20      	subs	r3, #32
2400ebcc:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400ebce:	4293      	cmp	r3, r2
2400ebd0:	d118      	bne.n	2400ec04 <pattern_matching+0xac>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400ebd2:	b1eb      	cbz	r3, 2400ec10 <pattern_matching+0xb8>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400ebd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400ebd8:	2b3f      	cmp	r3, #63	; 0x3f
2400ebda:	d01c      	beq.n	2400ec16 <pattern_matching+0xbe>
2400ebdc:	2b2a      	cmp	r3, #42	; 0x2a
2400ebde:	d01a      	beq.n	2400ec16 <pattern_matching+0xbe>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ebe0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ebe4:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ebe6:	2919      	cmp	r1, #25
2400ebe8:	d9e5      	bls.n	2400ebb6 <pattern_matching+0x5e>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400ebea:	2a7f      	cmp	r2, #127	; 0x7f
2400ebec:	d9e5      	bls.n	2400ebba <pattern_matching+0x62>
2400ebee:	4423      	add	r3, r4
2400ebf0:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400ebf4:	e7e1      	b.n	2400ebba <pattern_matching+0x62>
2400ebf6:	2b7f      	cmp	r3, #127	; 0x7f
2400ebf8:	d9e9      	bls.n	2400ebce <pattern_matching+0x76>
2400ebfa:	4421      	add	r1, r4
2400ebfc:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400ec00:	4293      	cmp	r3, r2
2400ec02:	d0e6      	beq.n	2400ebd2 <pattern_matching+0x7a>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ec04:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400ec06:	2b00      	cmp	r3, #0
2400ec08:	d0c1      	beq.n	2400eb8e <pattern_matching+0x36>
2400ec0a:	2f00      	cmp	r7, #0
2400ec0c:	d1cf      	bne.n	2400ebae <pattern_matching+0x56>
2400ec0e:	e7be      	b.n	2400eb8e <pattern_matching+0x36>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400ec10:	2001      	movs	r0, #1
}
2400ec12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400ec16:	4601      	mov	r1, r0
				nm = nx = 0;
2400ec18:	2300      	movs	r3, #0
2400ec1a:	f811 cb01 	ldrb.w	ip, [r1], #1
2400ec1e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400ec20:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400ec24:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400ec26:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400ec2a:	bf0c      	ite	eq
2400ec2c:	3201      	addeq	r2, #1
2400ec2e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400ec30:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400ec34:	d0f4      	beq.n	2400ec20 <pattern_matching+0xc8>
2400ec36:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400ec3a:	d0f1      	beq.n	2400ec20 <pattern_matching+0xc8>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400ec3c:	4649      	mov	r1, r9
2400ec3e:	f7ff ff8b 	bl	2400eb58 <pattern_matching>
2400ec42:	2800      	cmp	r0, #0
2400ec44:	d1e4      	bne.n	2400ec10 <pattern_matching+0xb8>
				nc = *np; break;	/* Branch mismatched */
2400ec46:	f899 3000 	ldrb.w	r3, [r9]
2400ec4a:	e7db      	b.n	2400ec04 <pattern_matching+0xac>

2400ec4c <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400ec4c:	2300      	movs	r3, #0
{
2400ec4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400ec52:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400ec56:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400ec58:	69c2      	ldr	r2, [r0, #28]
2400ec5a:	2a00      	cmp	r2, #0
2400ec5c:	d063      	beq.n	2400ed26 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400ec5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400ec60:	4604      	mov	r4, r0
2400ec62:	460d      	mov	r5, r1
2400ec64:	3201      	adds	r2, #1
2400ec66:	d01f      	beq.n	2400eca8 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ec68:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400ec6c:	8818      	ldrh	r0, [r3, #0]
2400ec6e:	2800      	cmp	r0, #0
2400ec70:	d063      	beq.n	2400ed3a <get_fileinfo+0xee>
2400ec72:	f101 0715 	add.w	r7, r1, #21
2400ec76:	2601      	movs	r6, #1
2400ec78:	e000      	b.n	2400ec7c <get_fileinfo+0x30>
2400ec7a:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400ec7c:	2100      	movs	r1, #0
2400ec7e:	f002 ff4f 	bl	24011b20 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ec82:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400ec84:	2800      	cmp	r0, #0
2400ec86:	d058      	beq.n	2400ed3a <get_fileinfo+0xee>
2400ec88:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400ec8c:	d055      	beq.n	2400ed3a <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400ec8e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ec92:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400ec96:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400ec9a:	2800      	cmp	r0, #0
2400ec9c:	d1ed      	bne.n	2400ec7a <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400ec9e:	442e      	add	r6, r5
2400eca0:	2300      	movs	r3, #0
2400eca2:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400eca4:	7da8      	ldrb	r0, [r5, #22]
2400eca6:	e000      	b.n	2400ecaa <get_fileinfo+0x5e>
2400eca8:	4618      	mov	r0, r3
	i = j = 0;
2400ecaa:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400ecae:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400ecb0:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400ecb2:	6a21      	ldr	r1, [r4, #32]
2400ecb4:	5c8b      	ldrb	r3, [r1, r2]
2400ecb6:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400ecb8:	2b20      	cmp	r3, #32
2400ecba:	d01b      	beq.n	2400ecf4 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400ecbc:	2b05      	cmp	r3, #5
2400ecbe:	bf08      	it	eq
2400ecc0:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400ecc2:	2a09      	cmp	r2, #9
2400ecc4:	d031      	beq.n	2400ed2a <get_fileinfo+0xde>
		fno->altname[j] = c;
2400ecc6:	eb05 010c 	add.w	r1, r5, ip
2400ecca:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400eccc:	b980      	cbnz	r0, 2400ecf0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400ecce:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400ecd2:	2e19      	cmp	r6, #25
2400ecd4:	d80b      	bhi.n	2400ecee <get_fileinfo+0xa2>
2400ecd6:	6a26      	ldr	r6, [r4, #32]
2400ecd8:	2a08      	cmp	r2, #8
2400ecda:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400ecde:	bf8c      	ite	hi
2400ece0:	2610      	movhi	r6, #16
2400ece2:	2608      	movls	r6, #8
2400ece4:	ea1e 0f06 	tst.w	lr, r6
2400ece8:	d001      	beq.n	2400ecee <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400ecea:	3320      	adds	r3, #32
2400ecec:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400ecee:	758b      	strb	r3, [r1, #22]
		j++;
2400ecf0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400ecf4:	2a0b      	cmp	r2, #11
2400ecf6:	d1dc      	bne.n	2400ecb2 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400ecf8:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400ecfc:	b928      	cbnz	r0, 2400ed0a <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400ecfe:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400ed00:	6a23      	ldr	r3, [r4, #32]
2400ed02:	7b1b      	ldrb	r3, [r3, #12]
2400ed04:	2b00      	cmp	r3, #0
2400ed06:	bf08      	it	eq
2400ed08:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400ed0a:	2300      	movs	r3, #0
2400ed0c:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400ed0e:	6a23      	ldr	r3, [r4, #32]
2400ed10:	7adb      	ldrb	r3, [r3, #11]
2400ed12:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400ed14:	6a23      	ldr	r3, [r4, #32]
2400ed16:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400ed18:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400ed1a:	6a23      	ldr	r3, [r4, #32]
2400ed1c:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400ed20:	0c1a      	lsrs	r2, r3, #16
2400ed22:	80eb      	strh	r3, [r5, #6]
2400ed24:	80aa      	strh	r2, [r5, #4]
}
2400ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400ed2a:	eb05 010c 	add.w	r1, r5, ip
2400ed2e:	b900      	cbnz	r0, 2400ed32 <get_fileinfo+0xe6>
2400ed30:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400ed32:	f10c 0c01 	add.w	ip, ip, #1
2400ed36:	724f      	strb	r7, [r1, #9]
2400ed38:	e7c5      	b.n	2400ecc6 <get_fileinfo+0x7a>
			i = j = 0;
2400ed3a:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400ed3c:	2300      	movs	r3, #0
2400ed3e:	442e      	add	r6, r5
2400ed40:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400ed42:	7da8      	ldrb	r0, [r5, #22]
2400ed44:	e7b1      	b.n	2400ecaa <get_fileinfo+0x5e>
2400ed46:	bf00      	nop

2400ed48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400ed48:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ed4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400ed4e:	2300      	movs	r3, #0
{
2400ed50:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ed52:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ed54:	70c3      	strb	r3, [r0, #3]
2400ed56:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ed58:	d00c      	beq.n	2400ed74 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ed5a:	460d      	mov	r5, r1
2400ed5c:	460a      	mov	r2, r1
2400ed5e:	2301      	movs	r3, #1
2400ed60:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400ed64:	7840      	ldrb	r0, [r0, #1]
2400ed66:	f7ff fe71 	bl	2400ea4c <disk_read>
2400ed6a:	b110      	cbz	r0, 2400ed72 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400ed6c:	2004      	movs	r0, #4
			fs->winsect = sector;
2400ed6e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400ed70:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400ed72:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ed74:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400ed78:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400ed7c:	429a      	cmp	r2, r3
2400ed7e:	d122      	bne.n	2400edc6 <check_fs+0x7e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400ed80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400ed84:	2be9      	cmp	r3, #233	; 0xe9
2400ed86:	d009      	beq.n	2400ed9c <check_fs+0x54>
2400ed88:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ed8a:	22eb      	movs	r2, #235	; 0xeb
2400ed8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400ed90:	f2c0 0290 	movt	r2, #144	; 0x90
2400ed94:	4293      	cmp	r3, r2
2400ed96:	d001      	beq.n	2400ed9c <check_fs+0x54>
	return 2;
2400ed98:	2002      	movs	r0, #2
}
2400ed9a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400ed9c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400eda0:	f244 1246 	movw	r2, #16710	; 0x4146
2400eda4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400eda8:	f2c0 0254 	movt	r2, #84	; 0x54
2400edac:	4293      	cmp	r3, r2
2400edae:	d00c      	beq.n	2400edca <check_fs+0x82>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400edb0:	f244 1346 	movw	r3, #16710	; 0x4146
	rv = rv << 8 | ptr[0];
2400edb4:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400edb8:	f2c3 3354 	movt	r3, #13140	; 0x3354
2400edbc:	1ac0      	subs	r0, r0, r3
2400edbe:	bf18      	it	ne
2400edc0:	2001      	movne	r0, #1
2400edc2:	0040      	lsls	r0, r0, #1
}
2400edc4:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400edc6:	2003      	movs	r0, #3
}
2400edc8:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400edca:	2000      	movs	r0, #0
}
2400edcc:	bd70      	pop	{r4, r5, r6, pc}
2400edce:	bf00      	nop

2400edd0 <move_window>:
{
2400edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400edd2:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
2400edd4:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
2400edd6:	428e      	cmp	r6, r1
2400edd8:	d024      	beq.n	2400ee24 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400edda:	78c3      	ldrb	r3, [r0, #3]
2400eddc:	460d      	mov	r5, r1
2400edde:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ede0:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ede4:	b963      	cbnz	r3, 2400ee00 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ede6:	2301      	movs	r3, #1
2400ede8:	462a      	mov	r2, r5
2400edea:	7860      	ldrb	r0, [r4, #1]
2400edec:	f7ff fe2e 	bl	2400ea4c <disk_read>
2400edf0:	b910      	cbnz	r0, 2400edf8 <move_window+0x28>
			fs->winsect = sector;
2400edf2:	6325      	str	r5, [r4, #48]	; 0x30
}
2400edf4:	b003      	add	sp, #12
2400edf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400edf8:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400edfa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400edfe:	e7f8      	b.n	2400edf2 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ee00:	2301      	movs	r3, #1
2400ee02:	4632      	mov	r2, r6
2400ee04:	7840      	ldrb	r0, [r0, #1]
2400ee06:	9101      	str	r1, [sp, #4]
2400ee08:	f7ff fe30 	bl	2400ea6c <disk_write>
2400ee0c:	b9d0      	cbnz	r0, 2400ee44 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400ee10:	69e3      	ldr	r3, [r4, #28]
2400ee12:	1ab2      	subs	r2, r6, r2
2400ee14:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400ee16:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee18:	429a      	cmp	r2, r3
2400ee1a:	d2e4      	bcs.n	2400ede6 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee1c:	78a7      	ldrb	r7, [r4, #2]
2400ee1e:	2f01      	cmp	r7, #1
2400ee20:	d804      	bhi.n	2400ee2c <move_window+0x5c>
2400ee22:	e7e0      	b.n	2400ede6 <move_window+0x16>
	FRESULT res = FR_OK;
2400ee24:	2000      	movs	r0, #0
}
2400ee26:	b003      	add	sp, #12
2400ee28:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
2400ee2a:	69e3      	ldr	r3, [r4, #28]
2400ee2c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee2e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ee30:	2301      	movs	r3, #1
2400ee32:	7860      	ldrb	r0, [r4, #1]
2400ee34:	4632      	mov	r2, r6
2400ee36:	9101      	str	r1, [sp, #4]
2400ee38:	f7ff fe18 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee3c:	2f01      	cmp	r7, #1
2400ee3e:	9901      	ldr	r1, [sp, #4]
2400ee40:	d1f3      	bne.n	2400ee2a <move_window+0x5a>
2400ee42:	e7d0      	b.n	2400ede6 <move_window+0x16>
			res = FR_DISK_ERR;
2400ee44:	2001      	movs	r0, #1
}
2400ee46:	b003      	add	sp, #12
2400ee48:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400ee4a:	bf00      	nop

2400ee4c <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400ee4c:	2300      	movs	r3, #0
{
2400ee4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400ee52:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400ee54:	6804      	ldr	r4, [r0, #0]
2400ee56:	b18c      	cbz	r4, 2400ee7c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ee58:	7825      	ldrb	r5, [r4, #0]
2400ee5a:	2d1f      	cmp	r5, #31
2400ee5c:	d912      	bls.n	2400ee84 <find_volume+0x38>
2400ee5e:	2d3a      	cmp	r5, #58	; 0x3a
2400ee60:	d010      	beq.n	2400ee84 <find_volume+0x38>
2400ee62:	46a4      	mov	ip, r4
2400ee64:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400ee68:	2b1f      	cmp	r3, #31
2400ee6a:	d90d      	bls.n	2400ee88 <find_volume+0x3c>
2400ee6c:	2b3a      	cmp	r3, #58	; 0x3a
2400ee6e:	d1f9      	bne.n	2400ee64 <find_volume+0x18>
			i = *tp++ - '0';
2400ee70:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400ee72:	45a4      	cmp	ip, r4
2400ee74:	d102      	bne.n	2400ee7c <find_volume+0x30>
2400ee76:	2d30      	cmp	r5, #48	; 0x30
2400ee78:	f000 80e8 	beq.w	2400f04c <find_volume+0x200>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400ee7c:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400ee7e:	4620      	mov	r0, r4
2400ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ee84:	462b      	mov	r3, r5
2400ee86:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400ee88:	2b3a      	cmp	r3, #58	; 0x3a
2400ee8a:	d0f1      	beq.n	2400ee70 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400ee8c:	f64d 639c 	movw	r3, #56988	; 0xde9c
2400ee90:	f2c2 0301 	movt	r3, #8193	; 0x2001
2400ee94:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400ee96:	2d00      	cmp	r5, #0
2400ee98:	f000 80d4 	beq.w	2400f044 <find_volume+0x1f8>
	*rfs = fs;							/* Return pointer to the file system object */
2400ee9c:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400ee9e:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400eea2:	782b      	ldrb	r3, [r5, #0]
2400eea4:	b17b      	cbz	r3, 2400eec6 <find_volume+0x7a>
		stat = disk_status(fs->drv);
2400eea6:	7868      	ldrb	r0, [r5, #1]
2400eea8:	f7ff fdb0 	bl	2400ea0c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400eeac:	07c1      	lsls	r1, r0, #31
2400eeae:	d40a      	bmi.n	2400eec6 <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400eeb0:	2c00      	cmp	r4, #0
2400eeb2:	f000 80b6 	beq.w	2400f022 <find_volume+0x1d6>
2400eeb6:	f010 0404 	ands.w	r4, r0, #4
2400eeba:	f000 80b2 	beq.w	2400f022 <find_volume+0x1d6>
				return FR_WRITE_PROTECTED;
2400eebe:	240a      	movs	r4, #10
}
2400eec0:	4620      	mov	r0, r4
2400eec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400eec6:	2000      	movs	r0, #0
2400eec8:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400eeca:	f7ff fdab 	bl	2400ea24 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400eece:	07c2      	lsls	r2, r0, #31
2400eed0:	f100 80aa 	bmi.w	2400f028 <find_volume+0x1dc>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400eed4:	b10c      	cbz	r4, 2400eeda <find_volume+0x8e>
2400eed6:	0743      	lsls	r3, r0, #29
2400eed8:	d4f1      	bmi.n	2400eebe <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400eeda:	2100      	movs	r1, #0
2400eedc:	4628      	mov	r0, r5
2400eede:	f7ff ff33 	bl	2400ed48 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400eee2:	2802      	cmp	r0, #2
2400eee4:	f000 8082 	beq.w	2400efec <find_volume+0x1a0>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400eee8:	2804      	cmp	r0, #4
2400eeea:	f000 80a9 	beq.w	2400f040 <find_volume+0x1f4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400eeee:	2801      	cmp	r0, #1
2400eef0:	f200 8096 	bhi.w	2400f020 <find_volume+0x1d4>
	bsect = 0;
2400eef4:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400eef6:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400eefa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400eefe:	f040 808f 	bne.w	2400f020 <find_volume+0x1d4>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400ef02:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400ef06:	b902      	cbnz	r2, 2400ef0a <find_volume+0xbe>
	rv = rv << 8 | ptr[0];
2400ef08:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400ef0a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400ef0e:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400ef10:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400ef12:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400ef14:	2901      	cmp	r1, #1
2400ef16:	f200 8083 	bhi.w	2400f020 <find_volume+0x1d4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400ef1a:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400ef1e:	b288      	uxth	r0, r1
2400ef20:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400ef22:	2800      	cmp	r0, #0
2400ef24:	d07c      	beq.n	2400f020 <find_volume+0x1d4>
2400ef26:	1e48      	subs	r0, r1, #1
2400ef28:	4208      	tst	r0, r1
2400ef2a:	d179      	bne.n	2400f020 <find_volume+0x1d4>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400ef2c:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400ef30:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400ef34:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400ef38:	d172      	bne.n	2400f020 <find_volume+0x1d4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400ef3a:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400ef3e:	b900      	cbnz	r0, 2400ef42 <find_volume+0xf6>
	rv = rv << 8 | ptr[0];
2400ef40:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400ef42:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400ef46:	2f00      	cmp	r7, #0
2400ef48:	d06a      	beq.n	2400f020 <find_volume+0x1d4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400ef4a:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400ef4e:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400ef52:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400ef54:	42b0      	cmp	r0, r6
2400ef56:	d363      	bcc.n	2400f020 <find_volume+0x1d4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400ef58:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400ef5c:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400ef5e:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400ef62:	d35d      	bcc.n	2400f020 <find_volume+0x1d4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400ef64:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400ef68:	4288      	cmp	r0, r1
2400ef6a:	f200 808d 	bhi.w	2400f088 <find_volume+0x23c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400ef6e:	f640 71f5 	movw	r1, #4085	; 0xff5
2400ef72:	4288      	cmp	r0, r1
2400ef74:	f200 80ac 	bhi.w	2400f0d0 <find_volume+0x284>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ef78:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ef7a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400ef7c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400ef7e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ef80:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400ef82:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ef84:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400ef86:	f1bc 0f00 	cmp.w	ip, #0
2400ef8a:	d049      	beq.n	2400f020 <find_volume+0x1d4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ef8c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400ef90:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ef94:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ef96:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400ef9a:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400ef9c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400efa0:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400efa2:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400efa6:	d33b      	bcc.n	2400f020 <find_volume+0x1d4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400efa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400efac:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400efae:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400efb2:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400efb4:	f64d 61c0 	movw	r1, #57024	; 0xdec0
		if (Files[i].fs == fs) Files[i].fs = 0;
2400efb8:	f64d 63a0 	movw	r3, #56992	; 0xdea0
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400efbc:	f64d 64c4 	movw	r4, #57028	; 0xdec4
	fs->fs_type = fmt;		/* FAT sub-type */
2400efc0:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400efc2:	f2c2 0101 	movt	r1, #8193	; 0x2001
		if (Files[i].fs == fs) Files[i].fs = 0;
2400efc6:	f2c2 0301 	movt	r3, #8193	; 0x2001
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400efca:	f2c2 0401 	movt	r4, #8193	; 0x2001
	fs->id = ++Fsid;		/* File system mount ID */
2400efce:	880a      	ldrh	r2, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400efd0:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400efd2:	3201      	adds	r2, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400efd4:	60ec      	str	r4, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400efd6:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400efd8:	b292      	uxth	r2, r2
2400efda:	800a      	strh	r2, [r1, #0]
2400efdc:	80ea      	strh	r2, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400efde:	f000 8085 	beq.w	2400f0ec <find_volume+0x2a0>
2400efe2:	691a      	ldr	r2, [r3, #16]
2400efe4:	4295      	cmp	r5, r2
2400efe6:	d06f      	beq.n	2400f0c8 <find_volume+0x27c>
	return FR_OK;
2400efe8:	2400      	movs	r4, #0
2400efea:	e01a      	b.n	2400f022 <find_volume+0x1d6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400efec:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400eff0:	b10e      	cbz	r6, 2400eff6 <find_volume+0x1aa>
	rv = rv << 8 | ptr[0];
2400eff2:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400eff6:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400effa:	b10c      	cbz	r4, 2400f000 <find_volume+0x1b4>
	rv = rv << 8 | ptr[0];
2400effc:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400f000:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400f004:	b303      	cbz	r3, 2400f048 <find_volume+0x1fc>
	rv = rv << 8 | ptr[0];
2400f006:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400f00a:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400f00e:	b10f      	cbz	r7, 2400f014 <find_volume+0x1c8>
	rv = rv << 8 | ptr[0];
2400f010:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400f014:	b9f6      	cbnz	r6, 2400f054 <find_volume+0x208>
2400f016:	bb2c      	cbnz	r4, 2400f064 <find_volume+0x218>
2400f018:	f1b8 0f00 	cmp.w	r8, #0
2400f01c:	d12c      	bne.n	2400f078 <find_volume+0x22c>
2400f01e:	b93f      	cbnz	r7, 2400f030 <find_volume+0x1e4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400f020:	240d      	movs	r4, #13
}
2400f022:	4620      	mov	r0, r4
2400f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400f028:	2403      	movs	r4, #3
}
2400f02a:	4620      	mov	r0, r4
2400f02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400f030:	4639      	mov	r1, r7
2400f032:	4628      	mov	r0, r5
2400f034:	f7ff fe88 	bl	2400ed48 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400f038:	2801      	cmp	r0, #1
2400f03a:	d95a      	bls.n	2400f0f2 <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400f03c:	2804      	cmp	r0, #4
2400f03e:	d1ef      	bne.n	2400f020 <find_volume+0x1d4>
2400f040:	2401      	movs	r4, #1
2400f042:	e7ee      	b.n	2400f022 <find_volume+0x1d6>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400f044:	240c      	movs	r4, #12
2400f046:	e7ec      	b.n	2400f022 <find_volume+0x1d6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400f048:	4698      	mov	r8, r3
2400f04a:	e7de      	b.n	2400f00a <find_volume+0x1be>
					*path = ++tt;
2400f04c:	f10c 0301 	add.w	r3, ip, #1
2400f050:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400f052:	e71b      	b.n	2400ee8c <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400f054:	4631      	mov	r1, r6
2400f056:	4628      	mov	r0, r5
2400f058:	f7ff fe76 	bl	2400ed48 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400f05c:	2801      	cmp	r0, #1
2400f05e:	d8da      	bhi.n	2400f016 <find_volume+0x1ca>
2400f060:	4634      	mov	r4, r6
2400f062:	e748      	b.n	2400eef6 <find_volume+0xaa>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400f064:	4621      	mov	r1, r4
2400f066:	4628      	mov	r0, r5
2400f068:	f7ff fe6e 	bl	2400ed48 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400f06c:	2801      	cmp	r0, #1
2400f06e:	f67f af42 	bls.w	2400eef6 <find_volume+0xaa>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400f072:	f1b8 0f00 	cmp.w	r8, #0
2400f076:	d0d2      	beq.n	2400f01e <find_volume+0x1d2>
2400f078:	4641      	mov	r1, r8
2400f07a:	4628      	mov	r0, r5
2400f07c:	f7ff fe64 	bl	2400ed48 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400f080:	2801      	cmp	r0, #1
2400f082:	d8cc      	bhi.n	2400f01e <find_volume+0x1d2>
2400f084:	4644      	mov	r4, r8
2400f086:	e736      	b.n	2400eef6 <find_volume+0xaa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400f088:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400f08c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400f08e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400f090:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400f092:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400f096:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400f098:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400f09a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400f09c:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400f09e:	d1bf      	bne.n	2400f020 <find_volume+0x1d4>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400f0a0:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400f0a2:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400f0a4:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400f0a8:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400f0aa:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400f0ae:	d3b7      	bcc.n	2400f020 <find_volume+0x1d4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400f0b0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400f0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400f0b8:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400f0ba:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400f0bc:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400f0be:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400f0c2:	d018      	beq.n	2400f0f6 <find_volume+0x2aa>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400f0c4:	2003      	movs	r0, #3
2400f0c6:	e775      	b.n	2400efb4 <find_volume+0x168>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f0c8:	2200      	movs	r2, #0
	return FR_OK;
2400f0ca:	4614      	mov	r4, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f0cc:	611a      	str	r2, [r3, #16]
2400f0ce:	e7a8      	b.n	2400f022 <find_volume+0x1d6>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400f0d0:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400f0d2:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400f0d4:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400f0d6:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400f0d8:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400f0da:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400f0dc:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400f0de:	f1bc 0f00 	cmp.w	ip, #0
2400f0e2:	d09d      	beq.n	2400f020 <find_volume+0x1d4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400f0e4:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400f0e6:	0049      	lsls	r1, r1, #1
2400f0e8:	2002      	movs	r0, #2
2400f0ea:	e757      	b.n	2400ef9c <find_volume+0x150>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f0ec:	2200      	movs	r2, #0
2400f0ee:	601a      	str	r2, [r3, #0]
2400f0f0:	e777      	b.n	2400efe2 <find_volume+0x196>
2400f0f2:	463c      	mov	r4, r7
2400f0f4:	e6ff      	b.n	2400eef6 <find_volume+0xaa>
			&& move_window(fs, bsect + 1) == FR_OK)
2400f0f6:	1c61      	adds	r1, r4, #1
2400f0f8:	4628      	mov	r0, r5
2400f0fa:	f7ff fe69 	bl	2400edd0 <move_window>
2400f0fe:	2800      	cmp	r0, #0
2400f100:	d1e0      	bne.n	2400f0c4 <find_volume+0x278>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400f102:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400f106:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400f10a:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400f10c:	429a      	cmp	r2, r3
2400f10e:	d1d9      	bne.n	2400f0c4 <find_volume+0x278>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400f110:	f245 2352 	movw	r3, #21074	; 0x5252
	rv = rv << 8 | ptr[0];
2400f114:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400f116:	f2c4 1361 	movt	r3, #16737	; 0x4161
2400f11a:	429a      	cmp	r2, r3
2400f11c:	d1d2      	bne.n	2400f0c4 <find_volume+0x278>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400f11e:	f247 2372 	movw	r3, #29298	; 0x7272
	rv = rv << 8 | ptr[0];
2400f122:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400f126:	f2c6 1341 	movt	r3, #24897	; 0x6141
2400f12a:	429a      	cmp	r2, r3
2400f12c:	d1ca      	bne.n	2400f0c4 <find_volume+0x278>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400f12e:	2003      	movs	r0, #3
2400f130:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
2400f134:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400f138:	e73c      	b.n	2400efb4 <find_volume+0x168>
2400f13a:	bf00      	nop

2400f13c <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400f13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
2400f140:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400f142:	4604      	mov	r4, r0
2400f144:	460d      	mov	r5, r1
2400f146:	4690      	mov	r8, r2
		switch (fs->fs_type) {
2400f148:	2e02      	cmp	r6, #2
2400f14a:	d007      	beq.n	2400f15c <put_fat.part.0+0x20>
2400f14c:	2e03      	cmp	r6, #3
2400f14e:	d041      	beq.n	2400f1d4 <put_fat.part.0+0x98>
2400f150:	2e01      	cmp	r6, #1
2400f152:	d01b      	beq.n	2400f18c <put_fat.part.0+0x50>
2400f154:	2702      	movs	r7, #2
}
2400f156:	4638      	mov	r0, r7
2400f158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400f15c:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400f15e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400f162:	f7ff fe35 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
2400f166:	4607      	mov	r7, r0
2400f168:	2800      	cmp	r0, #0
2400f16a:	d1f4      	bne.n	2400f156 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400f16c:	006d      	lsls	r5, r5, #1
2400f16e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400f172:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
2400f176:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400f178:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
2400f17c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
2400f17e:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400f182:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
2400f184:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
2400f186:	70e1      	strb	r1, [r4, #3]
}
2400f188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f18c:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f18e:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f192:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400f196:	f7ff fe1b 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
2400f19a:	4607      	mov	r7, r0
2400f19c:	2800      	cmp	r0, #0
2400f19e:	d1da      	bne.n	2400f156 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f1a0:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400f1a2:	f109 0b01 	add.w	fp, r9, #1
2400f1a6:	f104 0a34 	add.w	sl, r4, #52	; 0x34
2400f1aa:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f1ae:	d52a      	bpl.n	2400f206 <put_fat.part.0+0xca>
2400f1b0:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f1b4:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f1b6:	f003 030f 	and.w	r3, r3, #15
2400f1ba:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
2400f1be:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f1c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400f1c4:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f1c6:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400f1ca:	f7ff fe01 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
2400f1ce:	b3a0      	cbz	r0, 2400f23a <put_fat.part.0+0xfe>
2400f1d0:	4607      	mov	r7, r0
	return res;
2400f1d2:	e7c0      	b.n	2400f156 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400f1d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400f1d6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400f1da:	f7ff fdf9 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
2400f1de:	4607      	mov	r7, r0
2400f1e0:	2800      	cmp	r0, #0
2400f1e2:	d1b8      	bne.n	2400f156 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f1e4:	00ad      	lsls	r5, r5, #2
2400f1e6:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400f1ea:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
2400f1ee:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f1f0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f1f4:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f1f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400f1fa:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
2400f1fc:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
2400f1fe:	70e0      	strb	r0, [r4, #3]
}
2400f200:	4638      	mov	r0, r7
2400f202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f206:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f20a:	4620      	mov	r0, r4
2400f20c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400f20e:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f210:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400f214:	f7ff fddc 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
2400f218:	2800      	cmp	r0, #0
2400f21a:	d1d9      	bne.n	2400f1d0 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
2400f21c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f220:	f3c8 2203 	ubfx	r2, r8, #8, #4
2400f224:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
2400f228:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f22a:	f023 030f 	bic.w	r3, r3, #15
2400f22e:	4313      	orrs	r3, r2
			fs->wflag = 1;
2400f230:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f232:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
2400f236:	70e2      	strb	r2, [r4, #3]
			break;
2400f238:	e78d      	b.n	2400f156 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400f23a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f23e:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
2400f242:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f244:	e7f4      	b.n	2400f230 <put_fat.part.0+0xf4>
2400f246:	bf00      	nop

2400f248 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f248:	2901      	cmp	r1, #1
2400f24a:	d90e      	bls.n	2400f26a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f24e:	6983      	ldr	r3, [r0, #24]
2400f250:	460c      	mov	r4, r1
2400f252:	4605      	mov	r5, r0
2400f254:	4299      	cmp	r1, r3
2400f256:	d206      	bcs.n	2400f266 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400f258:	7803      	ldrb	r3, [r0, #0]
2400f25a:	2b02      	cmp	r3, #2
2400f25c:	d021      	beq.n	2400f2a2 <get_fat.isra.0+0x5a>
2400f25e:	2b03      	cmp	r3, #3
2400f260:	d010      	beq.n	2400f284 <get_fat.isra.0+0x3c>
2400f262:	2b01      	cmp	r3, #1
2400f264:	d003      	beq.n	2400f26e <get_fat.isra.0+0x26>
2400f266:	2001      	movs	r0, #1
}
2400f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400f26a:	2001      	movs	r0, #1
}
2400f26c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f26e:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f270:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f274:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400f278:	f7ff fdaa 	bl	2400edd0 <move_window>
2400f27c:	b1f0      	cbz	r0, 2400f2bc <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400f27e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400f282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f284:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400f286:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f28a:	f7ff fda1 	bl	2400edd0 <move_window>
2400f28e:	2800      	cmp	r0, #0
2400f290:	d1f5      	bne.n	2400f27e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f292:	00a4      	lsls	r4, r4, #2
2400f294:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f298:	4425      	add	r5, r4
2400f29a:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f29c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400f2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f2a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400f2a4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f2a8:	f7ff fd92 	bl	2400edd0 <move_window>
2400f2ac:	2800      	cmp	r0, #0
2400f2ae:	d1e6      	bne.n	2400f27e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400f2b0:	0063      	lsls	r3, r4, #1
2400f2b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400f2b6:	442b      	add	r3, r5
2400f2b8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
2400f2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
2400f2bc:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400f2c2:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2c4:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400f2c6:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2c8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400f2cc:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2d0:	f7ff fd7e 	bl	2400edd0 <move_window>
2400f2d4:	2800      	cmp	r0, #0
2400f2d6:	d1d2      	bne.n	2400f27e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
2400f2d8:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400f2dc:	442f      	add	r7, r5
2400f2de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400f2e2:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f2e6:	07e3      	lsls	r3, r4, #31
2400f2e8:	bf4c      	ite	mi
2400f2ea:	0900      	lsrmi	r0, r0, #4
2400f2ec:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
2400f2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400f2f2:	bf00      	nop

2400f2f4 <dir_read.constprop.0>:
FRESULT dir_read (
2400f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400f2f8:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400f2fa:	b083      	sub	sp, #12
2400f2fc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400f2fe:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
2400f302:	2e00      	cmp	r6, #0
2400f304:	d061      	beq.n	2400f3ca <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
2400f306:	f04f 0bff 	mov.w	fp, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f30a:	f108 0a34 	add.w	sl, r8, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400f30e:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f310:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400f314:	42b5      	cmp	r5, r6
2400f316:	d018      	beq.n	2400f34a <dir_read.constprop.0+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f318:	f898 3003 	ldrb.w	r3, [r8, #3]
2400f31c:	2b00      	cmp	r3, #0
2400f31e:	f040 80c8 	bne.w	2400f4b2 <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400f322:	2301      	movs	r3, #1
2400f324:	4632      	mov	r2, r6
2400f326:	4651      	mov	r1, sl
2400f328:	f898 0001 	ldrb.w	r0, [r8, #1]
2400f32c:	f7ff fb8e 	bl	2400ea4c <disk_read>
2400f330:	b148      	cbz	r0, 2400f346 <dir_read.constprop.0+0x52>
			fs->winsect = sector;
2400f332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400f336:	2001      	movs	r0, #1
			fs->winsect = sector;
2400f338:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400f33c:	2300      	movs	r3, #0
2400f33e:	61e3      	str	r3, [r4, #28]
}
2400f340:	b003      	add	sp, #12
2400f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400f346:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400f34a:	6a21      	ldr	r1, [r4, #32]
2400f34c:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400f34e:	2a00      	cmp	r2, #0
2400f350:	d03b      	beq.n	2400f3ca <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400f352:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400f354:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400f356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400f35a:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400f35c:	d005      	beq.n	2400f36a <dir_read.constprop.0+0x76>
2400f35e:	2a2e      	cmp	r2, #46	; 0x2e
2400f360:	d003      	beq.n	2400f36a <dir_read.constprop.0+0x76>
2400f362:	f023 0020 	bic.w	r0, r3, #32
2400f366:	2808      	cmp	r0, #8
2400f368:	d136      	bne.n	2400f3d8 <dir_read.constprop.0+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f36a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400f36e:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400f370:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400f372:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f374:	69e6      	ldr	r6, [r4, #28]
2400f376:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400f37a:	d226      	bcs.n	2400f3ca <dir_read.constprop.0+0xd6>
2400f37c:	b32e      	cbz	r6, 2400f3ca <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400f37e:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400f382:	bb23      	cbnz	r3, 2400f3ce <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
2400f384:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400f386:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400f388:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400f38a:	b961      	cbnz	r1, 2400f3a6 <dir_read.constprop.0+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400f38c:	893b      	ldrh	r3, [r7, #8]
2400f38e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400f392:	d91a      	bls.n	2400f3ca <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f394:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400f396:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f398:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400f39a:	2e00      	cmp	r6, #0
2400f39c:	d1b8      	bne.n	2400f310 <dir_read.constprop.0+0x1c>
		res = move_window(fs, dp->sect);
2400f39e:	2000      	movs	r0, #0
}
2400f3a0:	b003      	add	sp, #12
2400f3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400f3a6:	897b      	ldrh	r3, [r7, #10]
2400f3a8:	3b01      	subs	r3, #1
2400f3aa:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400f3ae:	d1f1      	bne.n	2400f394 <dir_read.constprop.0+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400f3b0:	4638      	mov	r0, r7
2400f3b2:	9301      	str	r3, [sp, #4]
2400f3b4:	f7ff ff48 	bl	2400f248 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f3b8:	2801      	cmp	r0, #1
2400f3ba:	f240 80b2 	bls.w	2400f522 <dir_read.constprop.0+0x22e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400f3be:	1c43      	adds	r3, r0, #1
2400f3c0:	d07f      	beq.n	2400f4c2 <dir_read.constprop.0+0x1ce>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400f3c2:	69ba      	ldr	r2, [r7, #24]
2400f3c4:	4290      	cmp	r0, r2
2400f3c6:	f0c0 809f 	bcc.w	2400f508 <dir_read.constprop.0+0x214>
	FRESULT res = FR_NO_FILE;
2400f3ca:	2004      	movs	r0, #4
2400f3cc:	e7b6      	b.n	2400f33c <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f3ce:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400f3d0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f3d2:	441f      	add	r7, r3
2400f3d4:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400f3d6:	e79b      	b.n	2400f310 <dir_read.constprop.0+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400f3d8:	2b0f      	cmp	r3, #15
2400f3da:	f040 80a9 	bne.w	2400f530 <dir_read.constprop.0+0x23c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400f3de:	0650      	lsls	r0, r2, #25
2400f3e0:	d571      	bpl.n	2400f4c6 <dir_read.constprop.0+0x1d2>
						dp->blk_ofs = dp->dptr;
2400f3e2:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400f3e4:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400f3e8:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400f3ec:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f3ee:	7b4b      	ldrb	r3, [r1, #13]
2400f3f0:	455b      	cmp	r3, fp
2400f3f2:	d1ba      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400f3f4:	8b4b      	ldrh	r3, [r1, #26]
2400f3f6:	2b00      	cmp	r3, #0
2400f3f8:	d1b7      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400f3fa:	780b      	ldrb	r3, [r1, #0]
2400f3fc:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400f400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400f404:	3b01      	subs	r3, #1
2400f406:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400f40a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f40e:	2bfe      	cmp	r3, #254	; 0xfe
2400f410:	d8ab      	bhi.n	2400f36a <dir_read.constprop.0+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f412:	f8d8 500c 	ldr.w	r5, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f416:	1c5a      	adds	r2, r3, #1
2400f418:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400f41c:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400f420:	2800      	cmp	r0, #0
2400f422:	f040 808e 	bne.w	2400f542 <dir_read.constprop.0+0x24e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f426:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f42a:	429e      	cmp	r6, r3
2400f42c:	d19d      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f42e:	f8b1 c005 	ldrh.w	ip, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f432:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f436:	459c      	cmp	ip, r3
2400f438:	d197      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f43a:	f8b1 7007 	ldrh.w	r7, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f43e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f442:	429f      	cmp	r7, r3
2400f444:	d191      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f446:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f44e:	429e      	cmp	r6, r3
2400f450:	d18b      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f452:	89cf      	ldrh	r7, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f454:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f458:	429f      	cmp	r7, r3
2400f45a:	d186      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f45c:	f8b1 c010 	ldrh.w	ip, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f460:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f464:	459c      	cmp	ip, r3
2400f466:	d180      	bne.n	2400f36a <dir_read.constprop.0+0x76>
	rv = rv << 8 | ptr[0];
2400f468:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f46a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f46e:	429e      	cmp	r6, r3
2400f470:	f47f af7b 	bne.w	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f474:	8a8f      	ldrh	r7, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f476:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f47a:	429f      	cmp	r7, r3
2400f47c:	f47f af75 	bne.w	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f480:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f482:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f486:	429e      	cmp	r6, r3
2400f488:	f47f af6f 	bne.w	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f48c:	8b0f      	ldrh	r7, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f48e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f492:	429f      	cmp	r7, r3
2400f494:	f47f af69 	bne.w	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f498:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f49a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f49e:	429e      	cmp	r6, r3
2400f4a0:	f47f af63 	bne.w	2400f36a <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400f4a4:	8bcf      	ldrh	r7, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400f4a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400f4aa:	429f      	cmp	r7, r3
2400f4ac:	f000 80bd 	beq.w	2400f62a <dir_read.constprop.0+0x336>
2400f4b0:	e75b      	b.n	2400f36a <dir_read.constprop.0+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f4b2:	2301      	movs	r3, #1
2400f4b4:	462a      	mov	r2, r5
2400f4b6:	4651      	mov	r1, sl
2400f4b8:	f898 0001 	ldrb.w	r0, [r8, #1]
2400f4bc:	f7ff fad6 	bl	2400ea6c <disk_write>
2400f4c0:	b128      	cbz	r0, 2400f4ce <dir_read.constprop.0+0x1da>
	FRESULT res = FR_NO_FILE;
2400f4c2:	2001      	movs	r0, #1
2400f4c4:	e73a      	b.n	2400f33c <dir_read.constprop.0+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f4c6:	454a      	cmp	r2, r9
2400f4c8:	f47f af4f 	bne.w	2400f36a <dir_read.constprop.0+0x76>
2400f4cc:	e78f      	b.n	2400f3ee <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f4ce:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400f4d2:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f4d6:	1aea      	subs	r2, r5, r3
2400f4d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400f4dc:	429a      	cmp	r2, r3
2400f4de:	f4bf af20 	bcs.w	2400f322 <dir_read.constprop.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f4e2:	f898 7002 	ldrb.w	r7, [r8, #2]
2400f4e6:	2f01      	cmp	r7, #1
2400f4e8:	d802      	bhi.n	2400f4f0 <dir_read.constprop.0+0x1fc>
2400f4ea:	e71a      	b.n	2400f322 <dir_read.constprop.0+0x2e>
					wsect += fs->fsize;
2400f4ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400f4f0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f4f2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400f4f4:	2301      	movs	r3, #1
2400f4f6:	4651      	mov	r1, sl
2400f4f8:	462a      	mov	r2, r5
2400f4fa:	f898 0001 	ldrb.w	r0, [r8, #1]
2400f4fe:	f7ff fab5 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f502:	2f01      	cmp	r7, #1
2400f504:	d1f2      	bne.n	2400f4ec <dir_read.constprop.0+0x1f8>
2400f506:	e70c      	b.n	2400f322 <dir_read.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
2400f508:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400f50a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f50c:	69ba      	ldr	r2, [r7, #24]
2400f50e:	9b01      	ldr	r3, [sp, #4]
2400f510:	3a02      	subs	r2, #2
2400f512:	4290      	cmp	r0, r2
2400f514:	d207      	bcs.n	2400f526 <dir_read.constprop.0+0x232>
	return clst * fs->csize + fs->database;
2400f516:	897b      	ldrh	r3, [r7, #10]
2400f518:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400f51a:	fb00 6603 	mla	r6, r0, r3, r6
				dp->sect = clust2sect(fs, clst);
2400f51e:	61e6      	str	r6, [r4, #28]
2400f520:	e738      	b.n	2400f394 <dir_read.constprop.0+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f522:	2002      	movs	r0, #2
2400f524:	e70a      	b.n	2400f33c <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f526:	3734      	adds	r7, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400f528:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400f52a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f52c:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400f52e:	e736      	b.n	2400f39e <dir_read.constprop.0+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400f530:	f1b9 0f00 	cmp.w	r9, #0
2400f534:	f000 8086 	beq.w	2400f644 <dir_read.constprop.0+0x350>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400f538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400f53c:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400f53e:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400f540:	e6fe      	b.n	2400f340 <dir_read.constprop.0+0x4c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f542:	2aff      	cmp	r2, #255	; 0xff
2400f544:	f000 80c8 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f548:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400f54c:	0050      	lsls	r0, r2, #1
2400f54e:	f8b1 c005 	ldrh.w	ip, [r1, #5]
2400f552:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400f554:	2e00      	cmp	r6, #0
2400f556:	f43f af6c 	beq.w	2400f432 <dir_read.constprop.0+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f55a:	2aff      	cmp	r2, #255	; 0xff
2400f55c:	f000 80bc 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f560:	4428      	add	r0, r5
2400f562:	1cda      	adds	r2, r3, #3
2400f564:	f8a0 c002 	strh.w	ip, [r0, #2]
2400f568:	f8b1 7007 	ldrh.w	r7, [r1, #7]
		if (wc) {
2400f56c:	f1bc 0f00 	cmp.w	ip, #0
2400f570:	f43f af65 	beq.w	2400f43e <dir_read.constprop.0+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f574:	2aff      	cmp	r2, #255	; 0xff
2400f576:	f000 80af 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f57a:	8087      	strh	r7, [r0, #4]
2400f57c:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400f57e:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400f582:	2f00      	cmp	r7, #0
2400f584:	f43f af61 	beq.w	2400f44a <dir_read.constprop.0+0x156>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f588:	2aff      	cmp	r2, #255	; 0xff
2400f58a:	f000 80a5 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f58e:	80c6      	strh	r6, [r0, #6]
2400f590:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400f592:	89cf      	ldrh	r7, [r1, #14]
		if (wc) {
2400f594:	2e00      	cmp	r6, #0
2400f596:	f43f af5d 	beq.w	2400f454 <dir_read.constprop.0+0x160>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f59a:	2aff      	cmp	r2, #255	; 0xff
2400f59c:	f000 809c 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f5a0:	8107      	strh	r7, [r0, #8]
2400f5a2:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400f5a4:	f8b1 c010 	ldrh.w	ip, [r1, #16]
		if (wc) {
2400f5a8:	2f00      	cmp	r7, #0
2400f5aa:	f43f af59 	beq.w	2400f460 <dir_read.constprop.0+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f5ae:	2aff      	cmp	r2, #255	; 0xff
2400f5b0:	f000 8092 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f5b4:	f8a0 c00a 	strh.w	ip, [r0, #10]
2400f5b8:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400f5ba:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400f5bc:	f1bc 0f00 	cmp.w	ip, #0
2400f5c0:	f43f af53 	beq.w	2400f46a <dir_read.constprop.0+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f5c4:	2aff      	cmp	r2, #255	; 0xff
2400f5c6:	f000 8087 	beq.w	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f5ca:	8186      	strh	r6, [r0, #12]
2400f5cc:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400f5d0:	8a8f      	ldrh	r7, [r1, #20]
		if (wc) {
2400f5d2:	2e00      	cmp	r6, #0
2400f5d4:	f43f af4f 	beq.w	2400f476 <dir_read.constprop.0+0x182>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f5d8:	2aff      	cmp	r2, #255	; 0xff
2400f5da:	d07d      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f5dc:	81c7      	strh	r7, [r0, #14]
2400f5de:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400f5e2:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400f5e4:	2f00      	cmp	r7, #0
2400f5e6:	f43f af4c 	beq.w	2400f482 <dir_read.constprop.0+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f5ea:	2aff      	cmp	r2, #255	; 0xff
2400f5ec:	d074      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f5ee:	8206      	strh	r6, [r0, #16]
2400f5f0:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400f5f4:	8b0f      	ldrh	r7, [r1, #24]
		if (wc) {
2400f5f6:	2e00      	cmp	r6, #0
2400f5f8:	f43f af49 	beq.w	2400f48e <dir_read.constprop.0+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f5fc:	2aff      	cmp	r2, #255	; 0xff
2400f5fe:	d06b      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f600:	8247      	strh	r7, [r0, #18]
2400f602:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400f606:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400f608:	2f00      	cmp	r7, #0
2400f60a:	f43f af46 	beq.w	2400f49a <dir_read.constprop.0+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f60e:	2aff      	cmp	r2, #255	; 0xff
2400f610:	d062      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f612:	8286      	strh	r6, [r0, #20]
2400f614:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400f618:	8bcf      	ldrh	r7, [r1, #30]
		if (wc) {
2400f61a:	2e00      	cmp	r6, #0
2400f61c:	f43f af43 	beq.w	2400f4a6 <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400f620:	2aff      	cmp	r2, #255	; 0xff
2400f622:	d059      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400f624:	f103 020d 	add.w	r2, r3, #13
2400f628:	82c7      	strh	r7, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400f62a:	780b      	ldrb	r3, [r1, #0]
2400f62c:	0659      	lsls	r1, r3, #25
2400f62e:	d504      	bpl.n	2400f63a <dir_read.constprop.0+0x346>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400f630:	2aff      	cmp	r2, #255	; 0xff
2400f632:	d051      	beq.n	2400f6d8 <dir_read.constprop.0+0x3e4>
		lfnbuf[i] = 0;
2400f634:	2300      	movs	r3, #0
2400f636:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f63a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
2400f63e:	fa5f f989 	uxtb.w	r9, r9
2400f642:	e694      	b.n	2400f36e <dir_read.constprop.0+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f644:	780b      	ldrb	r3, [r1, #0]
2400f646:	01da      	lsls	r2, r3, #7
2400f648:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
2400f64c:	784b      	ldrb	r3, [r1, #1]
2400f64e:	441a      	add	r2, r3
2400f650:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f654:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f658:	788a      	ldrb	r2, [r1, #2]
2400f65a:	fa52 f383 	uxtab	r3, r2, r3
2400f65e:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f662:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f666:	78cb      	ldrb	r3, [r1, #3]
2400f668:	fa53 f282 	uxtab	r2, r3, r2
2400f66c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f670:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f674:	790a      	ldrb	r2, [r1, #4]
2400f676:	fa52 f383 	uxtab	r3, r2, r3
2400f67a:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f67e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f682:	794b      	ldrb	r3, [r1, #5]
2400f684:	fa53 f282 	uxtab	r2, r3, r2
2400f688:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f68c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f690:	798a      	ldrb	r2, [r1, #6]
2400f692:	fa52 f383 	uxtab	r3, r2, r3
2400f696:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f69a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f69e:	79cb      	ldrb	r3, [r1, #7]
2400f6a0:	fa53 f282 	uxtab	r2, r3, r2
2400f6a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f6a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f6ac:	7a0a      	ldrb	r2, [r1, #8]
2400f6ae:	fa52 f383 	uxtab	r3, r2, r3
2400f6b2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f6b6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f6ba:	7a4b      	ldrb	r3, [r1, #9]
2400f6bc:	7a89      	ldrb	r1, [r1, #10]
2400f6be:	fa53 f282 	uxtab	r2, r3, r2
2400f6c2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f6c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f6ca:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400f6ce:	b2db      	uxtb	r3, r3
2400f6d0:	455b      	cmp	r3, fp
2400f6d2:	f47f af31 	bne.w	2400f538 <dir_read.constprop.0+0x244>
2400f6d6:	e662      	b.n	2400f39e <dir_read.constprop.0+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400f6d8:	4691      	mov	r9, r2
2400f6da:	e648      	b.n	2400f36e <dir_read.constprop.0+0x7a>

2400f6dc <sync_fs>:
{
2400f6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f6de:	78c3      	ldrb	r3, [r0, #3]
{
2400f6e0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f6e2:	b95b      	cbnz	r3, 2400f6fc <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400f6e4:	7823      	ldrb	r3, [r4, #0]
2400f6e6:	2b03      	cmp	r3, #3
2400f6e8:	d029      	beq.n	2400f73e <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400f6ea:	2200      	movs	r2, #0
2400f6ec:	7860      	ldrb	r0, [r4, #1]
2400f6ee:	4611      	mov	r1, r2
2400f6f0:	f7ff f9cc 	bl	2400ea8c <disk_ioctl>
			res = FR_DISK_ERR;
2400f6f4:	3800      	subs	r0, #0
2400f6f6:	bf18      	it	ne
2400f6f8:	2001      	movne	r0, #1
}
2400f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400f6fc:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f6fe:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400f702:	2301      	movs	r3, #1
2400f704:	7840      	ldrb	r0, [r0, #1]
2400f706:	462a      	mov	r2, r5
2400f708:	4639      	mov	r1, r7
2400f70a:	f7ff f9af 	bl	2400ea6c <disk_write>
2400f70e:	2800      	cmp	r0, #0
2400f710:	d140      	bne.n	2400f794 <sync_fs+0xb8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f712:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400f714:	69e3      	ldr	r3, [r4, #28]
2400f716:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400f718:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f71a:	429a      	cmp	r2, r3
2400f71c:	d2e2      	bcs.n	2400f6e4 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f71e:	78a6      	ldrb	r6, [r4, #2]
2400f720:	2e01      	cmp	r6, #1
2400f722:	d801      	bhi.n	2400f728 <sync_fs+0x4c>
2400f724:	e7de      	b.n	2400f6e4 <sync_fs+0x8>
					wsect += fs->fsize;
2400f726:	69e3      	ldr	r3, [r4, #28]
2400f728:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f72a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400f72c:	2301      	movs	r3, #1
2400f72e:	4639      	mov	r1, r7
2400f730:	462a      	mov	r2, r5
2400f732:	7860      	ldrb	r0, [r4, #1]
2400f734:	f7ff f99a 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f738:	2e01      	cmp	r6, #1
2400f73a:	d1f4      	bne.n	2400f726 <sync_fs+0x4a>
2400f73c:	e7d2      	b.n	2400f6e4 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400f73e:	7925      	ldrb	r5, [r4, #4]
2400f740:	2d01      	cmp	r5, #1
2400f742:	d1d2      	bne.n	2400f6ea <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400f744:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400f748:	f44f 7200 	mov.w	r2, #512	; 0x200
2400f74c:	2100      	movs	r1, #0
2400f74e:	4630      	mov	r0, r6
2400f750:	f00c ff8e 	bl	2401c670 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400f754:	f245 2252 	movw	r2, #21074	; 0x5252
2400f758:	f247 2072 	movw	r0, #29298	; 0x7272
	*ptr++ = (BYTE)val; val >>= 8;
2400f75c:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
2400f760:	f2c4 1261 	movt	r2, #16737	; 0x4161
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400f764:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400f766:	f2c6 1041 	movt	r0, #24897	; 0x6141
	*ptr++ = (BYTE)val; val >>= 8;
2400f76a:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
2400f76e:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400f770:	462b      	mov	r3, r5
2400f772:	6922      	ldr	r2, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400f774:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400f778:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400f77c:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400f77e:	6960      	ldr	r0, [r4, #20]
			fs->winsect = fs->volbase + 1;
2400f780:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400f782:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
2400f786:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400f788:	7860      	ldrb	r0, [r4, #1]
2400f78a:	f7ff f96f 	bl	2400ea6c <disk_write>
			fs->fsi_flag = 0;
2400f78e:	2300      	movs	r3, #0
2400f790:	7123      	strb	r3, [r4, #4]
2400f792:	e7aa      	b.n	2400f6ea <sync_fs+0xe>
			res = FR_DISK_ERR;
2400f794:	2001      	movs	r0, #1
}
2400f796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2400f798 <create_chain>:
{
2400f798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f79c:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
2400f79e:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
2400f7a0:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
2400f7a4:	2900      	cmp	r1, #0
2400f7a6:	f040 80a7 	bne.w	2400f8f8 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400f7aa:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400f7ae:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f7b2:	b9c6      	cbnz	r6, 2400f7e6 <create_chain+0x4e>
2400f7b4:	2601      	movs	r6, #1
2400f7b6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400f7b8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400f7ba:	429c      	cmp	r4, r3
2400f7bc:	d317      	bcc.n	2400f7ee <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
2400f7be:	2e01      	cmp	r6, #1
2400f7c0:	f000 8096 	beq.w	2400f8f0 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400f7c4:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
2400f7c8:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f7ca:	69ab      	ldr	r3, [r5, #24]
2400f7cc:	42a3      	cmp	r3, r4
2400f7ce:	d906      	bls.n	2400f7de <create_chain+0x46>
		switch (fs->fs_type) {
2400f7d0:	782b      	ldrb	r3, [r5, #0]
2400f7d2:	2b02      	cmp	r3, #2
2400f7d4:	d07e      	beq.n	2400f8d4 <create_chain+0x13c>
2400f7d6:	2b03      	cmp	r3, #3
2400f7d8:	d064      	beq.n	2400f8a4 <create_chain+0x10c>
2400f7da:	2b01      	cmp	r3, #1
2400f7dc:	d00c      	beq.n	2400f7f8 <create_chain+0x60>
2400f7de:	2401      	movs	r4, #1
}
2400f7e0:	4620      	mov	r0, r4
2400f7e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400f7e6:	42b3      	cmp	r3, r6
2400f7e8:	bf98      	it	ls
2400f7ea:	2601      	movls	r6, #1
2400f7ec:	e7e3      	b.n	2400f7b6 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f7ee:	2c01      	cmp	r4, #1
2400f7f0:	f8d9 5000 	ldr.w	r5, [r9]
2400f7f4:	d9f3      	bls.n	2400f7de <create_chain+0x46>
2400f7f6:	e7e8      	b.n	2400f7ca <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f7f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f7fa:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f7fe:	4628      	mov	r0, r5
2400f800:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400f804:	f7ff fae4 	bl	2400edd0 <move_window>
2400f808:	2800      	cmp	r0, #0
2400f80a:	d146      	bne.n	2400f89a <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
2400f80c:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f810:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400f812:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f816:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400f818:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f81a:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400f81e:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f822:	f7ff fad5 	bl	2400edd0 <move_window>
2400f826:	bbc0      	cbnz	r0, 2400f89a <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
2400f828:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f82c:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400f82e:	44ab      	add	fp, r5
2400f830:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
2400f834:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f838:	bf4c      	ite	mi
2400f83a:	091b      	lsrmi	r3, r3, #4
2400f83c:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
2400f840:	2b00      	cmp	r3, #0
2400f842:	d140      	bne.n	2400f8c6 <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f844:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f848:	42a3      	cmp	r3, r4
2400f84a:	d9c8      	bls.n	2400f7de <create_chain+0x46>
2400f84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400f850:	4621      	mov	r1, r4
2400f852:	4640      	mov	r0, r8
2400f854:	f7ff fc72 	bl	2400f13c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400f858:	b958      	cbnz	r0, 2400f872 <create_chain+0xda>
2400f85a:	b157      	cbz	r7, 2400f872 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f85c:	2f01      	cmp	r7, #1
2400f85e:	d0be      	beq.n	2400f7de <create_chain+0x46>
2400f860:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f864:	429f      	cmp	r7, r3
2400f866:	d2ba      	bcs.n	2400f7de <create_chain+0x46>
2400f868:	4622      	mov	r2, r4
2400f86a:	4639      	mov	r1, r7
2400f86c:	4640      	mov	r0, r8
2400f86e:	f7ff fc65 	bl	2400f13c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400f872:	b980      	cbnz	r0, 2400f896 <create_chain+0xfe>
		fs->last_clst = ncl;
2400f874:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400f878:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
2400f87c:	3b02      	subs	r3, #2
2400f87e:	429a      	cmp	r2, r3
2400f880:	d802      	bhi.n	2400f888 <create_chain+0xf0>
2400f882:	3a01      	subs	r2, #1
2400f884:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
2400f888:	f898 3004 	ldrb.w	r3, [r8, #4]
2400f88c:	f043 0301 	orr.w	r3, r3, #1
2400f890:	f888 3004 	strb.w	r3, [r8, #4]
2400f894:	e7a4      	b.n	2400f7e0 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400f896:	2801      	cmp	r0, #1
2400f898:	d1a1      	bne.n	2400f7de <create_chain+0x46>
2400f89a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400f89e:	4620      	mov	r0, r4
2400f8a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f8a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f8a6:	4628      	mov	r0, r5
2400f8a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f8ac:	f7ff fa90 	bl	2400edd0 <move_window>
2400f8b0:	2800      	cmp	r0, #0
2400f8b2:	d1f2      	bne.n	2400f89a <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f8b4:	00a3      	lsls	r3, r4, #2
2400f8b6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f8ba:	441d      	add	r5, r3
2400f8bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f8be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400f8c2:	2b00      	cmp	r3, #0
2400f8c4:	d0be      	beq.n	2400f844 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400f8c6:	2b01      	cmp	r3, #1
2400f8c8:	d089      	beq.n	2400f7de <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
2400f8ca:	42a6      	cmp	r6, r4
2400f8cc:	d010      	beq.n	2400f8f0 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f8ce:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f8d2:	e771      	b.n	2400f7b8 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f8d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f8d6:	4628      	mov	r0, r5
2400f8d8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f8dc:	f7ff fa78 	bl	2400edd0 <move_window>
2400f8e0:	2800      	cmp	r0, #0
2400f8e2:	d1da      	bne.n	2400f89a <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400f8e4:	0063      	lsls	r3, r4, #1
2400f8e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400f8ea:	442b      	add	r3, r5
2400f8ec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
2400f8ee:	e7a7      	b.n	2400f840 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
2400f8f0:	2400      	movs	r4, #0
}
2400f8f2:	4620      	mov	r0, r4
2400f8f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400f8f8:	4640      	mov	r0, r8
2400f8fa:	f7ff fca5 	bl	2400f248 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400f8fe:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400f900:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400f902:	f67f af6c 	bls.w	2400f7de <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400f906:	1c41      	adds	r1, r0, #1
2400f908:	d0c7      	beq.n	2400f89a <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400f90a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f90e:	4283      	cmp	r3, r0
2400f910:	f63f af66 	bhi.w	2400f7e0 <create_chain+0x48>
2400f914:	463e      	mov	r6, r7
2400f916:	e74e      	b.n	2400f7b6 <create_chain+0x1e>

2400f918 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400f918:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
2400f91c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
2400f920:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400f924:	d24e      	bcs.n	2400f9c4 <dir_sdi+0xac>
2400f926:	06ca      	lsls	r2, r1, #27
2400f928:	460c      	mov	r4, r1
2400f92a:	d14b      	bne.n	2400f9c4 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400f92c:	6885      	ldr	r5, [r0, #8]
2400f92e:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
2400f930:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400f932:	2d00      	cmp	r5, #0
2400f934:	d049      	beq.n	2400f9ca <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400f936:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400f93a:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400f93e:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400f942:	f0c0 8084 	bcc.w	2400fa4e <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f946:	2d01      	cmp	r5, #1
2400f948:	d03c      	beq.n	2400f9c4 <dir_sdi+0xac>
2400f94a:	4647      	mov	r7, r8
2400f94c:	e037      	b.n	2400f9be <dir_sdi+0xa6>
		switch (fs->fs_type) {
2400f94e:	783b      	ldrb	r3, [r7, #0]
2400f950:	2b02      	cmp	r3, #2
2400f952:	d06e      	beq.n	2400fa32 <dir_sdi+0x11a>
2400f954:	2b03      	cmp	r3, #3
2400f956:	d05c      	beq.n	2400fa12 <dir_sdi+0xfa>
2400f958:	2b01      	cmp	r3, #1
2400f95a:	d133      	bne.n	2400f9c4 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f95c:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f95e:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f962:	4638      	mov	r0, r7
2400f964:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400f968:	f7ff fa32 	bl	2400edd0 <move_window>
2400f96c:	2800      	cmp	r0, #0
2400f96e:	d14d      	bne.n	2400fa0c <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
2400f970:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f974:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400f976:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f97a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400f97c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f97e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400f982:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f986:	f7ff fa23 	bl	2400edd0 <move_window>
2400f98a:	2800      	cmp	r0, #0
2400f98c:	d13e      	bne.n	2400fa0c <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400f98e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
2400f992:	44ba      	add	sl, r7
2400f994:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400f998:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f99c:	07eb      	lsls	r3, r5, #31
2400f99e:	bf4c      	ite	mi
2400f9a0:	ea4f 151b 	movmi.w	r5, fp, lsr #4
2400f9a4:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400f9a8:	2d01      	cmp	r5, #1
2400f9aa:	d90b      	bls.n	2400f9c4 <dir_sdi+0xac>
2400f9ac:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400f9b0:	42ab      	cmp	r3, r5
2400f9b2:	d907      	bls.n	2400f9c4 <dir_sdi+0xac>
			ofs -= csz;
2400f9b4:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400f9b8:	45a1      	cmp	r9, r4
2400f9ba:	d84a      	bhi.n	2400fa52 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400f9bc:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f9be:	69bb      	ldr	r3, [r7, #24]
2400f9c0:	42ab      	cmp	r3, r5
2400f9c2:	d8c4      	bhi.n	2400f94e <dir_sdi+0x36>
		switch (fs->fs_type) {
2400f9c4:	2002      	movs	r0, #2
}
2400f9c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400f9ca:	f898 3000 	ldrb.w	r3, [r8]
2400f9ce:	2b02      	cmp	r3, #2
2400f9d0:	d816      	bhi.n	2400fa00 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400f9d2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400f9d6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400f9da:	d9f3      	bls.n	2400f9c4 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
2400f9dc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
2400f9e0:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400f9e4:	2b00      	cmp	r3, #0
2400f9e6:	d0ed      	beq.n	2400f9c4 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400f9e8:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400f9ec:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400f9f0:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
2400f9f4:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400f9f6:	4441      	add	r1, r8
2400f9f8:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
2400f9fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
2400fa00:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400fa04:	2b00      	cmp	r3, #0
2400fa06:	d0e4      	beq.n	2400f9d2 <dir_sdi+0xba>
2400fa08:	461d      	mov	r5, r3
2400fa0a:	e794      	b.n	2400f936 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400fa0c:	2001      	movs	r0, #1
}
2400fa0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400fa12:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400fa14:	4638      	mov	r0, r7
2400fa16:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400fa1a:	f7ff f9d9 	bl	2400edd0 <move_window>
2400fa1e:	2800      	cmp	r0, #0
2400fa20:	d1f4      	bne.n	2400fa0c <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400fa22:	00ab      	lsls	r3, r5, #2
2400fa24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400fa28:	443b      	add	r3, r7
2400fa2a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400fa2c:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400fa30:	e7ba      	b.n	2400f9a8 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400fa32:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400fa34:	4638      	mov	r0, r7
2400fa36:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400fa3a:	f7ff f9c9 	bl	2400edd0 <move_window>
2400fa3e:	2800      	cmp	r0, #0
2400fa40:	d1e4      	bne.n	2400fa0c <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400fa42:	006b      	lsls	r3, r5, #1
2400fa44:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400fa48:	443b      	add	r3, r7
2400fa4a:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
2400fa4c:	e7ac      	b.n	2400f9a8 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa4e:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400fa52:	3b02      	subs	r3, #2
	clst -= 2;
2400fa54:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa56:	429a      	cmp	r2, r3
2400fa58:	d206      	bcs.n	2400fa68 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
2400fa5a:	f8b8 100a 	ldrh.w	r1, [r8, #10]
2400fa5e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400fa62:	fb02 3301 	mla	r3, r2, r1, r3
2400fa66:	e7bb      	b.n	2400f9e0 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
2400fa68:	2300      	movs	r3, #0
2400fa6a:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400fa6e:	e7a9      	b.n	2400f9c4 <dir_sdi+0xac>

2400fa70 <dir_remove>:
{
2400fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400fa74:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
2400fa76:	b083      	sub	sp, #12
2400fa78:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400fa7a:	6806      	ldr	r6, [r0, #0]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400fa7c:	1c4a      	adds	r2, r1, #1
	DWORD last = dp->dptr;
2400fa7e:	f8d0 9014 	ldr.w	r9, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400fa82:	f040 8086 	bne.w	2400fb92 <dir_remove+0x122>
			res = move_window(fs, dp->sect);
2400fa86:	69e7      	ldr	r7, [r4, #28]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400fa88:	f04f 0b01 	mov.w	fp, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fa8c:	f106 0834 	add.w	r8, r6, #52	; 0x34
				dp->dir[DIR_Name] = DDEM;
2400fa90:	f04f 0ae5 	mov.w	sl, #229	; 0xe5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fa94:	6b32      	ldr	r2, [r6, #48]	; 0x30
2400fa96:	42ba      	cmp	r2, r7
2400fa98:	d011      	beq.n	2400fabe <dir_remove+0x4e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fa9a:	78f3      	ldrb	r3, [r6, #3]
2400fa9c:	2b00      	cmp	r3, #0
2400fa9e:	d131      	bne.n	2400fb04 <dir_remove+0x94>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400faa0:	2301      	movs	r3, #1
2400faa2:	463a      	mov	r2, r7
2400faa4:	4641      	mov	r1, r8
2400faa6:	7870      	ldrb	r0, [r6, #1]
2400faa8:	f7fe ffd0 	bl	2400ea4c <disk_read>
2400faac:	b130      	cbz	r0, 2400fabc <dir_remove+0x4c>
			fs->winsect = sector;
2400faae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400fab2:	2001      	movs	r0, #1
			fs->winsect = sector;
2400fab4:	6333      	str	r3, [r6, #48]	; 0x30
}
2400fab6:	b003      	add	sp, #12
2400fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400fabc:	6337      	str	r7, [r6, #48]	; 0x30
				dp->dir[DIR_Name] = DDEM;
2400fabe:	6a23      	ldr	r3, [r4, #32]
2400fac0:	f883 a000 	strb.w	sl, [r3]
			fs->wflag = 1;
2400fac4:	f886 b003 	strb.w	fp, [r6, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
2400fac8:	6965      	ldr	r5, [r4, #20]
2400faca:	454d      	cmp	r5, r9
2400facc:	d267      	bcs.n	2400fb9e <dir_remove+0x12e>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400face:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400fad0:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
2400fad2:	6823      	ldr	r3, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400fad4:	b197      	cbz	r7, 2400fafc <dir_remove+0x8c>
2400fad6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400fada:	d20f      	bcs.n	2400fafc <dir_remove+0x8c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400fadc:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400fae0:	b93a      	cbnz	r2, 2400faf2 <dir_remove+0x82>
		dp->sect++;				/* Next sector */
2400fae2:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
2400fae4:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400fae6:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400fae8:	b9b1      	cbnz	r1, 2400fb18 <dir_remove+0xa8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400faea:	8919      	ldrh	r1, [r3, #8]
2400faec:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400faf0:	d94b      	bls.n	2400fb8a <dir_remove+0x11a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400faf2:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400faf4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400faf6:	4413      	add	r3, r2
2400faf8:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);
2400fafa:	e7cb      	b.n	2400fa94 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
2400fafc:	2002      	movs	r0, #2
}
2400fafe:	b003      	add	sp, #12
2400fb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fb04:	2301      	movs	r3, #1
2400fb06:	4641      	mov	r1, r8
2400fb08:	7870      	ldrb	r0, [r6, #1]
2400fb0a:	9200      	str	r2, [sp, #0]
2400fb0c:	f7fe ffae 	bl	2400ea6c <disk_write>
2400fb10:	9a00      	ldr	r2, [sp, #0]
2400fb12:	b300      	cbz	r0, 2400fb56 <dir_remove+0xe6>
				res = FR_DISK_ERR;
2400fb14:	2001      	movs	r0, #1
2400fb16:	e7ce      	b.n	2400fab6 <dir_remove+0x46>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400fb18:	8958      	ldrh	r0, [r3, #10]
2400fb1a:	3801      	subs	r0, #1
2400fb1c:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400fb20:	d1e7      	bne.n	2400faf2 <dir_remove+0x82>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400fb22:	4618      	mov	r0, r3
2400fb24:	9201      	str	r2, [sp, #4]
2400fb26:	9300      	str	r3, [sp, #0]
2400fb28:	f7ff fb8e 	bl	2400f248 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fb2c:	2801      	cmp	r0, #1
2400fb2e:	d9e5      	bls.n	2400fafc <dir_remove+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400fb30:	1c43      	adds	r3, r0, #1
2400fb32:	d0ef      	beq.n	2400fb14 <dir_remove+0xa4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400fb34:	9b00      	ldr	r3, [sp, #0]
2400fb36:	6999      	ldr	r1, [r3, #24]
2400fb38:	4288      	cmp	r0, r1
2400fb3a:	d226      	bcs.n	2400fb8a <dir_remove+0x11a>
				dp->clust = clst;		/* Initialize data for new cluster */
2400fb3c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400fb3e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fb40:	6999      	ldr	r1, [r3, #24]
2400fb42:	9a01      	ldr	r2, [sp, #4]
2400fb44:	3902      	subs	r1, #2
2400fb46:	4288      	cmp	r0, r1
2400fb48:	d22b      	bcs.n	2400fba2 <dir_remove+0x132>
	return clst * fs->csize + fs->database;
2400fb4a:	8959      	ldrh	r1, [r3, #10]
2400fb4c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
2400fb4e:	fb00 7701 	mla	r7, r0, r1, r7
				dp->sect = clust2sect(fs, clst);
2400fb52:	61e7      	str	r7, [r4, #28]
2400fb54:	e7cd      	b.n	2400faf2 <dir_remove+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fb56:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
2400fb58:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fb5a:	1ad1      	subs	r1, r2, r3
2400fb5c:	69f3      	ldr	r3, [r6, #28]
2400fb5e:	4299      	cmp	r1, r3
2400fb60:	d29e      	bcs.n	2400faa0 <dir_remove+0x30>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fb62:	78b5      	ldrb	r5, [r6, #2]
2400fb64:	2d01      	cmp	r5, #1
2400fb66:	d99b      	bls.n	2400faa0 <dir_remove+0x30>
2400fb68:	9400      	str	r4, [sp, #0]
2400fb6a:	462c      	mov	r4, r5
2400fb6c:	4615      	mov	r5, r2
2400fb6e:	e000      	b.n	2400fb72 <dir_remove+0x102>
					wsect += fs->fsize;
2400fb70:	69f3      	ldr	r3, [r6, #28]
2400fb72:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fb74:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400fb76:	2301      	movs	r3, #1
2400fb78:	4641      	mov	r1, r8
2400fb7a:	462a      	mov	r2, r5
2400fb7c:	7870      	ldrb	r0, [r6, #1]
2400fb7e:	f7fe ff75 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fb82:	2c01      	cmp	r4, #1
2400fb84:	d1f4      	bne.n	2400fb70 <dir_remove+0x100>
2400fb86:	9c00      	ldr	r4, [sp, #0]
2400fb88:	e78a      	b.n	2400faa0 <dir_remove+0x30>
				dp->sect = 0; return FR_NO_FILE;
2400fb8a:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_INT_ERR;
2400fb8c:	2002      	movs	r0, #2
				dp->sect = 0; return FR_NO_FILE;
2400fb8e:	61e3      	str	r3, [r4, #28]
		} while (res == FR_OK);
2400fb90:	e791      	b.n	2400fab6 <dir_remove+0x46>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400fb92:	f7ff fec1 	bl	2400f918 <dir_sdi>
	if (res == FR_OK) {
2400fb96:	2800      	cmp	r0, #0
2400fb98:	f43f af75 	beq.w	2400fa86 <dir_remove+0x16>
2400fb9c:	e78b      	b.n	2400fab6 <dir_remove+0x46>
			res = move_window(fs, dp->sect);
2400fb9e:	2000      	movs	r0, #0
2400fba0:	e789      	b.n	2400fab6 <dir_remove+0x46>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fba2:	2700      	movs	r7, #0
2400fba4:	e7d5      	b.n	2400fb52 <dir_remove+0xe2>
2400fba6:	bf00      	nop

2400fba8 <dir_find>:
{
2400fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400fbac:	2100      	movs	r1, #0
{
2400fbae:	b085      	sub	sp, #20
2400fbb0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400fbb2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400fbb6:	f7ff feaf 	bl	2400f918 <dir_sdi>
	if (res != FR_OK) return res;
2400fbba:	4607      	mov	r7, r0
2400fbbc:	b9e8      	cbnz	r0, 2400fbfa <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400fbbe:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400fbc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400fbc6:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400fbc8:	464f      	mov	r7, r9
2400fbca:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fbcc:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400fbd0:	42b5      	cmp	r5, r6
2400fbd2:	d018      	beq.n	2400fc06 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fbd4:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fbd8:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fbdc:	2b00      	cmp	r3, #0
2400fbde:	f040 8085 	bne.w	2400fcec <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400fbe2:	2301      	movs	r3, #1
2400fbe4:	4632      	mov	r2, r6
2400fbe6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400fbea:	f7fe ff2f 	bl	2400ea4c <disk_read>
2400fbee:	b140      	cbz	r0, 2400fc02 <dir_find+0x5a>
			fs->winsect = sector;
2400fbf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400fbf4:	2701      	movs	r7, #1
			fs->winsect = sector;
2400fbf6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400fbfa:	4638      	mov	r0, r7
2400fbfc:	b005      	add	sp, #20
2400fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400fc02:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400fc06:	6a25      	ldr	r5, [r4, #32]
2400fc08:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400fc0a:	b346      	cbz	r6, 2400fc5e <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400fc0c:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400fc0e:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400fc10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400fc14:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400fc16:	d004      	beq.n	2400fc22 <dir_find+0x7a>
2400fc18:	071b      	lsls	r3, r3, #28
2400fc1a:	d525      	bpl.n	2400fc68 <dir_find+0xc0>
2400fc1c:	2a0f      	cmp	r2, #15
2400fc1e:	f000 8093 	beq.w	2400fd48 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400fc22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400fc26:	27ff      	movs	r7, #255	; 0xff
2400fc28:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400fc2a:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400fc2c:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400fc2e:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400fc30:	69e6      	ldr	r6, [r4, #28]
2400fc32:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400fc36:	d212      	bcs.n	2400fc5e <dir_find+0xb6>
2400fc38:	b18e      	cbz	r6, 2400fc5e <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400fc3a:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400fc3e:	b94a      	cbnz	r2, 2400fc54 <dir_find+0xac>
		dp->sect++;				/* Next sector */
2400fc40:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400fc42:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400fc44:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400fc46:	2900      	cmp	r1, #0
2400fc48:	d15c      	bne.n	2400fd04 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400fc4a:	8919      	ldrh	r1, [r3, #8]
2400fc4c:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400fc50:	f240 813c 	bls.w	2400fecc <dir_find+0x324>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400fc54:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400fc56:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400fc58:	4413      	add	r3, r2
2400fc5a:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400fc5c:	e7b6      	b.n	2400fbcc <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400fc5e:	2704      	movs	r7, #4
}
2400fc60:	4638      	mov	r0, r7
2400fc62:	b005      	add	sp, #20
2400fc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400fc68:	2a0f      	cmp	r2, #15
2400fc6a:	d06d      	beq.n	2400fd48 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400fc6c:	2f00      	cmp	r7, #0
2400fc6e:	f000 80db 	beq.w	2400fe28 <dir_find+0x280>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400fc72:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
2400fc76:	f017 0701 	ands.w	r7, r7, #1
2400fc7a:	d1d2      	bne.n	2400fc22 <dir_find+0x7a>
	} while (--cnt && r == 0);
2400fc7c:	782a      	ldrb	r2, [r5, #0]
2400fc7e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400fc82:	429a      	cmp	r2, r3
2400fc84:	d1cd      	bne.n	2400fc22 <dir_find+0x7a>
2400fc86:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400fc8a:	786b      	ldrb	r3, [r5, #1]
2400fc8c:	429a      	cmp	r2, r3
2400fc8e:	d1c8      	bne.n	2400fc22 <dir_find+0x7a>
2400fc90:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400fc94:	78ab      	ldrb	r3, [r5, #2]
2400fc96:	429a      	cmp	r2, r3
2400fc98:	d1c3      	bne.n	2400fc22 <dir_find+0x7a>
2400fc9a:	78ea      	ldrb	r2, [r5, #3]
2400fc9c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400fca0:	429a      	cmp	r2, r3
2400fca2:	d1be      	bne.n	2400fc22 <dir_find+0x7a>
2400fca4:	792a      	ldrb	r2, [r5, #4]
2400fca6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400fcaa:	429a      	cmp	r2, r3
2400fcac:	d1b9      	bne.n	2400fc22 <dir_find+0x7a>
2400fcae:	796a      	ldrb	r2, [r5, #5]
2400fcb0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400fcb4:	429a      	cmp	r2, r3
2400fcb6:	d1b4      	bne.n	2400fc22 <dir_find+0x7a>
2400fcb8:	79aa      	ldrb	r2, [r5, #6]
2400fcba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400fcbe:	429a      	cmp	r2, r3
2400fcc0:	d1af      	bne.n	2400fc22 <dir_find+0x7a>
2400fcc2:	79ea      	ldrb	r2, [r5, #7]
2400fcc4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400fcc8:	429a      	cmp	r2, r3
2400fcca:	d1aa      	bne.n	2400fc22 <dir_find+0x7a>
2400fccc:	7a2a      	ldrb	r2, [r5, #8]
2400fcce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400fcd2:	429a      	cmp	r2, r3
2400fcd4:	d1a5      	bne.n	2400fc22 <dir_find+0x7a>
2400fcd6:	7a6a      	ldrb	r2, [r5, #9]
2400fcd8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400fcdc:	429a      	cmp	r2, r3
2400fcde:	d1a0      	bne.n	2400fc22 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400fce0:	7aaa      	ldrb	r2, [r5, #10]
2400fce2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400fce6:	429a      	cmp	r2, r3
2400fce8:	d19b      	bne.n	2400fc22 <dir_find+0x7a>
2400fcea:	e786      	b.n	2400fbfa <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fcec:	2301      	movs	r3, #1
2400fcee:	462a      	mov	r2, r5
2400fcf0:	f898 0001 	ldrb.w	r0, [r8, #1]
2400fcf4:	9100      	str	r1, [sp, #0]
2400fcf6:	f7fe feb9 	bl	2400ea6c <disk_write>
2400fcfa:	9900      	ldr	r1, [sp, #0]
2400fcfc:	2800      	cmp	r0, #0
2400fcfe:	d070      	beq.n	2400fde2 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400fd00:	2701      	movs	r7, #1
2400fd02:	e77a      	b.n	2400fbfa <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400fd04:	8958      	ldrh	r0, [r3, #10]
2400fd06:	3801      	subs	r0, #1
2400fd08:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400fd0c:	d1a2      	bne.n	2400fc54 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400fd0e:	4618      	mov	r0, r3
2400fd10:	9201      	str	r2, [sp, #4]
2400fd12:	9300      	str	r3, [sp, #0]
2400fd14:	f7ff fa98 	bl	2400f248 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fd18:	2801      	cmp	r0, #1
2400fd1a:	f240 80db 	bls.w	2400fed4 <dir_find+0x32c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400fd1e:	1c43      	adds	r3, r0, #1
2400fd20:	d0ee      	beq.n	2400fd00 <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400fd22:	9b00      	ldr	r3, [sp, #0]
2400fd24:	6999      	ldr	r1, [r3, #24]
2400fd26:	4288      	cmp	r0, r1
2400fd28:	f080 80d0 	bcs.w	2400fecc <dir_find+0x324>
				dp->clust = clst;		/* Initialize data for new cluster */
2400fd2c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400fd2e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fd30:	6999      	ldr	r1, [r3, #24]
2400fd32:	9a01      	ldr	r2, [sp, #4]
2400fd34:	3902      	subs	r1, #2
2400fd36:	4288      	cmp	r0, r1
2400fd38:	f080 80ce 	bcs.w	2400fed8 <dir_find+0x330>
	return clst * fs->csize + fs->database;
2400fd3c:	8959      	ldrh	r1, [r3, #10]
2400fd3e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400fd40:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
2400fd44:	61e6      	str	r6, [r4, #28]
2400fd46:	e785      	b.n	2400fc54 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400fd48:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400fd4c:	0658      	lsls	r0, r3, #25
2400fd4e:	f53f af6c 	bmi.w	2400fc2a <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400fd52:	0671      	lsls	r1, r6, #25
2400fd54:	f140 80b5 	bpl.w	2400fec2 <dir_find+0x31a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400fd58:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400fd5a:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400fd5e:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400fd62:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400fd64:	7b6b      	ldrb	r3, [r5, #13]
2400fd66:	454b      	cmp	r3, r9
2400fd68:	f040 80ae 	bne.w	2400fec8 <dir_find+0x320>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400fd6c:	8b6b      	ldrh	r3, [r5, #26]
2400fd6e:	2b00      	cmp	r3, #0
2400fd70:	f040 80aa 	bne.w	2400fec8 <dir_find+0x320>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400fd74:	782f      	ldrb	r7, [r5, #0]
2400fd76:	f24f 5ad4 	movw	sl, #62932	; 0xf5d4
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fd7a:	9602      	str	r6, [sp, #8]
2400fd7c:	2101      	movs	r1, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400fd7e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400fd82:	f2c2 4a01 	movt	sl, #9217	; 0x2401
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fd86:	462e      	mov	r6, r5
2400fd88:	f8cd 8000 	str.w	r8, [sp]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400fd8c:	3f01      	subs	r7, #1
2400fd8e:	f10a 0b0d 	add.w	fp, sl, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fd92:	9401      	str	r4, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400fd94:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400fd98:	eb07 0783 	add.w	r7, r7, r3, lsl #2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400fd9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fda0:	461d      	mov	r5, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400fda2:	9303      	str	r3, [sp, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fda4:	e010      	b.n	2400fdc8 <dir_find+0x220>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400fda6:	2ffe      	cmp	r7, #254	; 0xfe
2400fda8:	4620      	mov	r0, r4
2400fdaa:	d816      	bhi.n	2400fdda <dir_find+0x232>
2400fdac:	f001 feda 	bl	24011b64 <ff_wtoupper>
2400fdb0:	4680      	mov	r8, r0
2400fdb2:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400fdb6:	3701      	adds	r7, #1
2400fdb8:	f001 fed4 	bl	24011b64 <ff_wtoupper>
2400fdbc:	4580      	cmp	r8, r0
2400fdbe:	4621      	mov	r1, r4
2400fdc0:	d10b      	bne.n	2400fdda <dir_find+0x232>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400fdc2:	45d3      	cmp	fp, sl
2400fdc4:	f000 808a 	beq.w	2400fedc <dir_find+0x334>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400fdc8:	f81a 3b01 	ldrb.w	r3, [sl], #1
2400fdcc:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400fdce:	2900      	cmp	r1, #0
2400fdd0:	d1e9      	bne.n	2400fda6 <dir_find+0x1fe>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400fdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400fdd6:	429c      	cmp	r4, r3
2400fdd8:	d0f3      	beq.n	2400fdc2 <dir_find+0x21a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400fdda:	e9dd 8400 	ldrd	r8, r4, [sp]
2400fdde:	27ff      	movs	r7, #255	; 0xff
2400fde0:	e723      	b.n	2400fc2a <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fde2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400fde6:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fdea:	1aea      	subs	r2, r5, r3
2400fdec:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400fdf0:	429a      	cmp	r2, r3
2400fdf2:	f4bf aef6 	bcs.w	2400fbe2 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fdf6:	f898 a002 	ldrb.w	sl, [r8, #2]
2400fdfa:	f1ba 0f01 	cmp.w	sl, #1
2400fdfe:	f67f aef0 	bls.w	2400fbe2 <dir_find+0x3a>
2400fe02:	468b      	mov	fp, r1
2400fe04:	e001      	b.n	2400fe0a <dir_find+0x262>
					wsect += fs->fsize;
2400fe06:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400fe0a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400fe10:	2301      	movs	r3, #1
2400fe12:	4659      	mov	r1, fp
2400fe14:	462a      	mov	r2, r5
2400fe16:	f898 0001 	ldrb.w	r0, [r8, #1]
2400fe1a:	f7fe fe27 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe1e:	f1ba 0f01 	cmp.w	sl, #1
2400fe22:	d1f0      	bne.n	2400fe06 <dir_find+0x25e>
2400fe24:	4659      	mov	r1, fp
2400fe26:	e6dc      	b.n	2400fbe2 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fe28:	782a      	ldrb	r2, [r5, #0]
2400fe2a:	7869      	ldrb	r1, [r5, #1]
2400fe2c:	01d0      	lsls	r0, r2, #7
2400fe2e:	78ae      	ldrb	r6, [r5, #2]
2400fe30:	78eb      	ldrb	r3, [r5, #3]
2400fe32:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
2400fe36:	792a      	ldrb	r2, [r5, #4]
2400fe38:	f895 a005 	ldrb.w	sl, [r5, #5]
2400fe3c:	4408      	add	r0, r1
2400fe3e:	f895 e006 	ldrb.w	lr, [r5, #6]
2400fe42:	f895 c007 	ldrb.w	ip, [r5, #7]
2400fe46:	f3c0 0146 	ubfx	r1, r0, #1, #7
2400fe4a:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
2400fe4e:	7a68      	ldrb	r0, [r5, #9]
2400fe50:	fa56 f181 	uxtab	r1, r6, r1
2400fe54:	7a2e      	ldrb	r6, [r5, #8]
2400fe56:	f3c1 0b46 	ubfx	fp, r1, #1, #7
2400fe5a:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
2400fe5e:	7aa9      	ldrb	r1, [r5, #10]
2400fe60:	fa53 fb8b 	uxtab	fp, r3, fp
2400fe64:	f3cb 0346 	ubfx	r3, fp, #1, #7
2400fe68:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
2400fe6c:	fa52 f383 	uxtab	r3, r2, r3
2400fe70:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fe74:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400fe78:	fa5a f282 	uxtab	r2, sl, r2
2400fe7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fe80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fe84:	fa5e f383 	uxtab	r3, lr, r3
2400fe88:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fe8c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400fe90:	fa5c f282 	uxtab	r2, ip, r2
2400fe94:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fe98:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fe9c:	fa56 f383 	uxtab	r3, r6, r3
2400fea0:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fea4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400fea8:	fa50 f282 	uxtab	r2, r0, r2
2400feac:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400feb0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400feb4:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400feb8:	b2db      	uxtb	r3, r3
2400feba:	4599      	cmp	r9, r3
2400febc:	f47f aed9 	bne.w	2400fc72 <dir_find+0xca>
2400fec0:	e69b      	b.n	2400fbfa <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400fec2:	42b7      	cmp	r7, r6
2400fec4:	f43f af4e 	beq.w	2400fd64 <dir_find+0x1bc>
2400fec8:	27ff      	movs	r7, #255	; 0xff
2400feca:	e6ae      	b.n	2400fc2a <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
2400fecc:	2300      	movs	r3, #0
2400fece:	2704      	movs	r7, #4
2400fed0:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400fed2:	e692      	b.n	2400fbfa <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fed4:	2702      	movs	r7, #2
2400fed6:	e690      	b.n	2400fbfa <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fed8:	4616      	mov	r6, r2
2400feda:	e733      	b.n	2400fd44 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400fedc:	4635      	mov	r5, r6
2400fede:	f8dd 8000 	ldr.w	r8, [sp]
2400fee2:	782b      	ldrb	r3, [r5, #0]
2400fee4:	065a      	lsls	r2, r3, #25
2400fee6:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
2400feea:	d500      	bpl.n	2400feee <dir_find+0x346>
2400feec:	b911      	cbnz	r1, 2400fef4 <dir_find+0x34c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400feee:	3e01      	subs	r6, #1
2400fef0:	b2f7      	uxtb	r7, r6
2400fef2:	e69a      	b.n	2400fc2a <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400fef4:	9b03      	ldr	r3, [sp, #12]
2400fef6:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400fefa:	2b00      	cmp	r3, #0
2400fefc:	d0f7      	beq.n	2400feee <dir_find+0x346>
2400fefe:	e7e3      	b.n	2400fec8 <dir_find+0x320>

2400ff00 <follow_path>:
{
2400ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ff04:	780b      	ldrb	r3, [r1, #0]
{
2400ff06:	b085      	sub	sp, #20
2400ff08:	4688      	mov	r8, r1
2400ff0a:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ff0c:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400ff0e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ff12:	d103      	bne.n	2400ff1c <follow_path+0x1c>
2400ff14:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400ff18:	2b2f      	cmp	r3, #47	; 0x2f
2400ff1a:	d0fb      	beq.n	2400ff14 <follow_path+0x14>
2400ff1c:	2b5c      	cmp	r3, #92	; 0x5c
2400ff1e:	d0f9      	beq.n	2400ff14 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400ff20:	2100      	movs	r1, #0
2400ff22:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400ff24:	f898 3000 	ldrb.w	r3, [r8]
2400ff28:	2b1f      	cmp	r3, #31
2400ff2a:	f240 8152 	bls.w	240101d2 <follow_path+0x2d2>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ff2e:	f24f 5154 	movw	r1, #62804	; 0xf554
2400ff32:	465a      	mov	r2, fp
2400ff34:	f2c2 4101 	movt	r1, #9217	; 0x2401
2400ff38:	9101      	str	r1, [sp, #4]
		if (w < ' ') break;				/* Break if end of the path name */
2400ff3a:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400ff3c:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
2400ff40:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400ff42:	d92c      	bls.n	2400ff9e <follow_path+0x9e>
2400ff44:	f1a9 0a02 	sub.w	sl, r9, #2
2400ff48:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400ff4a:	2501      	movs	r5, #1
2400ff4c:	e008      	b.n	2400ff60 <follow_path+0x60>
		lfn[di++] = w;					/* Store the Unicode character */
2400ff4e:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
2400ff52:	1c6b      	adds	r3, r5, #1
2400ff54:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400ff58:	281f      	cmp	r0, #31
2400ff5a:	f240 80fb 	bls.w	24010154 <follow_path+0x254>
		w = p[si++];					/* Get a character */
2400ff5e:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400ff60:	282f      	cmp	r0, #47	; 0x2f
2400ff62:	f105 34ff 	add.w	r4, r5, #4294967295	; 0xffffffff
2400ff66:	d021      	beq.n	2400ffac <follow_path+0xac>
2400ff68:	285c      	cmp	r0, #92	; 0x5c
2400ff6a:	d01f      	beq.n	2400ffac <follow_path+0xac>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400ff6c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
2400ff70:	d011      	beq.n	2400ff96 <follow_path+0x96>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400ff72:	2101      	movs	r1, #1
2400ff74:	f001 fdd4 	bl	24011b20 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400ff78:	b168      	cbz	r0, 2400ff96 <follow_path+0x96>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400ff7a:	287f      	cmp	r0, #127	; 0x7f
2400ff7c:	d8e7      	bhi.n	2400ff4e <follow_path+0x4e>
2400ff7e:	f24f 5240 	movw	r2, #62784	; 0xf540
	while (*str && *str != chr) str++;
2400ff82:	2322      	movs	r3, #34	; 0x22
2400ff84:	f2c2 4201 	movt	r2, #9217	; 0x2401
2400ff88:	e003      	b.n	2400ff92 <follow_path+0x92>
2400ff8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400ff8e:	2b00      	cmp	r3, #0
2400ff90:	d0dd      	beq.n	2400ff4e <follow_path+0x4e>
2400ff92:	4298      	cmp	r0, r3
2400ff94:	d1f9      	bne.n	2400ff8a <follow_path+0x8a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400ff96:	2006      	movs	r0, #6
}
2400ff98:	b005      	add	sp, #20
2400ff9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400ff9e:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400ffa0:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400ffa2:	f8a9 3000 	strh.w	r3, [r9]
}
2400ffa6:	b005      	add	sp, #20
2400ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400ffac:	f818 3005 	ldrb.w	r3, [r8, r5]
2400ffb0:	eb08 0205 	add.w	r2, r8, r5
2400ffb4:	2b2f      	cmp	r3, #47	; 0x2f
2400ffb6:	d002      	beq.n	2400ffbe <follow_path+0xbe>
2400ffb8:	2b5c      	cmp	r3, #92	; 0x5c
2400ffba:	f040 811f 	bne.w	240101fc <follow_path+0x2fc>
2400ffbe:	1c6b      	adds	r3, r5, #1
2400ffc0:	4443      	add	r3, r8
2400ffc2:	4698      	mov	r8, r3
2400ffc4:	f813 2b01 	ldrb.w	r2, [r3], #1
2400ffc8:	2a2f      	cmp	r2, #47	; 0x2f
2400ffca:	d0fa      	beq.n	2400ffc2 <follow_path+0xc2>
2400ffcc:	2a5c      	cmp	r2, #92	; 0x5c
2400ffce:	d0f8      	beq.n	2400ffc2 <follow_path+0xc2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400ffd0:	2c00      	cmp	r4, #0
2400ffd2:	d0e4      	beq.n	2400ff9e <follow_path+0x9e>
2400ffd4:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400ffd6:	2100      	movs	r1, #0
2400ffd8:	eb09 0244 	add.w	r2, r9, r4, lsl #1
2400ffdc:	e001      	b.n	2400ffe2 <follow_path+0xe2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400ffde:	3c01      	subs	r4, #1
2400ffe0:	d0dd      	beq.n	2400ff9e <follow_path+0x9e>
		w = lfn[di - 1];
2400ffe2:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400ffe6:	2b20      	cmp	r3, #32
2400ffe8:	d0f9      	beq.n	2400ffde <follow_path+0xde>
2400ffea:	2b2e      	cmp	r3, #46	; 0x2e
2400ffec:	d0f7      	beq.n	2400ffde <follow_path+0xde>
		*d++ = (BYTE)val;
2400ffee:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400fff2:	2000      	movs	r0, #0
		*d++ = (BYTE)val;
2400fff4:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
2400fff8:	f829 0014 	strh.w	r0, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
2400fffc:	627b      	str	r3, [r7, #36]	; 0x24
2400fffe:	62bb      	str	r3, [r7, #40]	; 0x28
24010000:	2320      	movs	r3, #32
24010002:	85ba      	strh	r2, [r7, #44]	; 0x2c
24010004:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
24010008:	f8b9 0000 	ldrh.w	r0, [r9]
2401000c:	282e      	cmp	r0, #46	; 0x2e
2401000e:	d002      	beq.n	24010016 <follow_path+0x116>
24010010:	4298      	cmp	r0, r3
24010012:	f040 80e7 	bne.w	240101e4 <follow_path+0x2e4>
24010016:	464a      	mov	r2, r9
24010018:	2300      	movs	r3, #0
2401001a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2401001e:	461d      	mov	r5, r3
24010020:	3301      	adds	r3, #1
24010022:	2820      	cmp	r0, #32
24010024:	d0f9      	beq.n	2401001a <follow_path+0x11a>
24010026:	282e      	cmp	r0, #46	; 0x2e
24010028:	d0f7      	beq.n	2401001a <follow_path+0x11a>
		w = lfn[si++];					/* Get an LFN character */
2401002a:	3502      	adds	r5, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2401002c:	eb09 0344 	add.w	r3, r9, r4, lsl #1
24010030:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
24010034:	2a2e      	cmp	r2, #46	; 0x2e
24010036:	d001      	beq.n	2401003c <follow_path+0x13c>
24010038:	3c01      	subs	r4, #1
2401003a:	d1f9      	bne.n	24010030 <follow_path+0x130>
		if (!w) break;					/* Break on end of the LFN */
2401003c:	b3b0      	cbz	r0, 240100ac <follow_path+0x1ac>
2401003e:	2208      	movs	r2, #8
24010040:	4641      	mov	r1, r8
24010042:	2300      	movs	r3, #0
24010044:	46b8      	mov	r8, r7
24010046:	464f      	mov	r7, r9
24010048:	4691      	mov	r9, r2
2401004a:	469a      	mov	sl, r3
2401004c:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2401004e:	2820      	cmp	r0, #32
24010050:	d003      	beq.n	2401005a <follow_path+0x15a>
24010052:	282e      	cmp	r0, #46	; 0x2e
24010054:	d14d      	bne.n	240100f2 <follow_path+0x1f2>
24010056:	42ac      	cmp	r4, r5
24010058:	d04b      	beq.n	240100f2 <follow_path+0x1f2>
			cf |= NS_LOSS | NS_LFN; continue;
2401005a:	f046 0603 	orr.w	r6, r6, #3
2401005e:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
24010060:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
24010064:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
24010066:	2800      	cmp	r0, #0
24010068:	d1f1      	bne.n	2401004e <follow_path+0x14e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2401006a:	4647      	mov	r7, r8
2401006c:	4690      	mov	r8, r2
2401006e:	464a      	mov	r2, r9
24010070:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
24010074:	29e5      	cmp	r1, #229	; 0xe5
24010076:	d102      	bne.n	2401007e <follow_path+0x17e>
24010078:	2105      	movs	r1, #5
2401007a:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2401007e:	2a08      	cmp	r2, #8
24010080:	f000 8096 	beq.w	240101b0 <follow_path+0x2b0>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
24010084:	f003 020c 	and.w	r2, r3, #12
24010088:	2a0c      	cmp	r2, #12
2401008a:	d068      	beq.n	2401015e <follow_path+0x25e>
2401008c:	f003 0303 	and.w	r3, r3, #3
24010090:	2b03      	cmp	r3, #3
24010092:	d064      	beq.n	2401015e <follow_path+0x25e>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
24010094:	07b1      	lsls	r1, r6, #30
24010096:	d409      	bmi.n	240100ac <follow_path+0x1ac>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
24010098:	2b01      	cmp	r3, #1
2401009a:	d102      	bne.n	240100a2 <follow_path+0x1a2>
2401009c:	f046 0610 	orr.w	r6, r6, #16
240100a0:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
240100a2:	2a04      	cmp	r2, #4
240100a4:	d102      	bne.n	240100ac <follow_path+0x1ac>
240100a6:	f046 0608 	orr.w	r6, r6, #8
240100aa:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
240100ac:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
240100ae:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
240100b2:	f7ff fd79 	bl	2400fba8 <dir_find>
			ns = dp->fn[NSFLAG];
240100b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
240100ba:	2800      	cmp	r0, #0
240100bc:	d15b      	bne.n	24010176 <follow_path+0x276>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
240100be:	075a      	lsls	r2, r3, #29
240100c0:	f53f af6a 	bmi.w	2400ff98 <follow_path+0x98>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
240100c4:	79bb      	ldrb	r3, [r7, #6]
240100c6:	06db      	lsls	r3, r3, #27
240100c8:	f140 809a 	bpl.w	24010200 <follow_path+0x300>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
240100cc:	697a      	ldr	r2, [r7, #20]
240100ce:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
240100d2:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
240100d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
240100da:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
240100dc:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
240100de:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240100e0:	d102      	bne.n	240100e8 <follow_path+0x1e8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240100e2:	8a9b      	ldrh	r3, [r3, #20]
240100e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
240100e8:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
240100ea:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
240100ec:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
240100f0:	e723      	b.n	2400ff3a <follow_path+0x3a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
240100f2:	45d1      	cmp	r9, sl
240100f4:	d91d      	bls.n	24010132 <follow_path+0x232>
240100f6:	1b61      	subs	r1, r4, r5
240100f8:	fab1 f181 	clz	r1, r1
240100fc:	0949      	lsrs	r1, r1, #5
240100fe:	b9c1      	cbnz	r1, 24010132 <follow_path+0x232>
		if (w >= 0x80) {				/* Non ASCII character */
24010100:	287f      	cmp	r0, #127	; 0x7f
24010102:	d840      	bhi.n	24010186 <follow_path+0x286>
	while (*str && *str != chr) str++;
24010104:	f24f 5c4c 	movw	ip, #62796	; 0xf54c
24010108:	212b      	movs	r1, #43	; 0x2b
2401010a:	f2c2 4c01 	movt	ip, #9217	; 0x2401
2401010e:	e003      	b.n	24010118 <follow_path+0x218>
24010110:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
24010114:	2900      	cmp	r1, #0
24010116:	d054      	beq.n	240101c2 <follow_path+0x2c2>
24010118:	4281      	cmp	r1, r0
2401011a:	d1f9      	bne.n	24010110 <follow_path+0x210>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2401011c:	f046 0603 	orr.w	r6, r6, #3
24010120:	205f      	movs	r0, #95	; 0x5f
24010122:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
24010124:	eb08 010a 	add.w	r1, r8, sl
24010128:	f10a 0a01 	add.w	sl, sl, #1
2401012c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
24010130:	e796      	b.n	24010060 <follow_path+0x160>
			if (ni == 11) {				/* Long extension */
24010132:	f1b9 0f0b 	cmp.w	r9, #11
24010136:	d065      	beq.n	24010204 <follow_path+0x304>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
24010138:	42ac      	cmp	r4, r5
2401013a:	d003      	beq.n	24010144 <follow_path+0x244>
2401013c:	f046 0603 	orr.w	r6, r6, #3
24010140:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
24010142:	d392      	bcc.n	2401006a <follow_path+0x16a>
			b <<= 2; continue;
24010144:	009b      	lsls	r3, r3, #2
24010146:	4625      	mov	r5, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
24010148:	f04f 090b 	mov.w	r9, #11
2401014c:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
24010150:	b2db      	uxtb	r3, r3
24010152:	e785      	b.n	24010060 <follow_path+0x160>
	*path = &p[si];						/* Return pointer to the next segment */
24010154:	4498      	add	r8, r3
24010156:	462c      	mov	r4, r5
24010158:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2401015a:	2104      	movs	r1, #4
2401015c:	e73c      	b.n	2400ffd8 <follow_path+0xd8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2401015e:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
24010162:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
24010164:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
24010166:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2401016a:	f7ff fd1d 	bl	2400fba8 <dir_find>
			ns = dp->fn[NSFLAG];
2401016e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
24010172:	2800      	cmp	r0, #0
24010174:	d0a3      	beq.n	240100be <follow_path+0x1be>
				if (res == FR_NO_FILE) {	/* Object is not found */
24010176:	2804      	cmp	r0, #4
24010178:	f47f af0e 	bne.w	2400ff98 <follow_path+0x98>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2401017c:	f013 0f04 	tst.w	r3, #4
24010180:	bf08      	it	eq
24010182:	2005      	moveq	r0, #5
24010184:	e708      	b.n	2400ff98 <follow_path+0x98>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
24010186:	e9cd 3202 	strd	r3, r2, [sp, #8]
2401018a:	f001 fcc9 	bl	24011b20 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2401018e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
24010192:	b918      	cbnz	r0, 2401019c <follow_path+0x29c>
			cf |= NS_LFN;				/* Force create LFN entry */
24010194:	f046 0602 	orr.w	r6, r6, #2
24010198:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2401019a:	e7bf      	b.n	2401011c <follow_path+0x21c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2401019c:	9901      	ldr	r1, [sp, #4]
			cf |= NS_LFN;				/* Force create LFN entry */
2401019e:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240101a2:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
240101a4:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240101a6:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
240101aa:	2800      	cmp	r0, #0
240101ac:	d0b6      	beq.n	2401011c <follow_path+0x21c>
240101ae:	e7a9      	b.n	24010104 <follow_path+0x204>
	if (ni == 8) b <<= 2;
240101b0:	009a      	lsls	r2, r3, #2
240101b2:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
240101b6:	2a0c      	cmp	r2, #12
240101b8:	d0d1      	beq.n	2401015e <follow_path+0x25e>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
240101ba:	07b0      	lsls	r0, r6, #30
240101bc:	f57f af71 	bpl.w	240100a2 <follow_path+0x1a2>
240101c0:	e774      	b.n	240100ac <follow_path+0x1ac>
				if (IsUpper(w)) {		/* ASCII large capital */
240101c2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
240101c6:	2919      	cmp	r1, #25
240101c8:	d80f      	bhi.n	240101ea <follow_path+0x2ea>
					b |= 2;
240101ca:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
240101ce:	b2c0      	uxtb	r0, r0
240101d0:	e7a8      	b.n	24010124 <follow_path+0x224>
		dp->fn[NSFLAG] = NS_NONAME;
240101d2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
240101d4:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
240101d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
240101da:	b005      	add	sp, #20
240101dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
240101e0:	f7ff bb9a 	b.w	2400f918 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
240101e4:	460e      	mov	r6, r1
240101e6:	2501      	movs	r5, #1
240101e8:	e720      	b.n	2401002c <follow_path+0x12c>
					if (IsLower(w)) {	/* ASCII small capital */
240101ea:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
240101ee:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
240101f0:	bf9c      	itt	ls
240101f2:	3820      	subls	r0, #32
240101f4:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
240101f8:	b2c0      	uxtb	r0, r0
240101fa:	e793      	b.n	24010124 <follow_path+0x224>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
240101fc:	4690      	mov	r8, r2
240101fe:	e6e7      	b.n	2400ffd0 <follow_path+0xd0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
24010200:	2005      	movs	r0, #5
24010202:	e6c9      	b.n	2400ff98 <follow_path+0x98>
				cf |= NS_LOSS | NS_LFN; break;
24010204:	4647      	mov	r7, r8
24010206:	4690      	mov	r8, r2
24010208:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2401020c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
24010210:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
24010212:	2ae5      	cmp	r2, #229	; 0xe5
24010214:	f47f af36 	bne.w	24010084 <follow_path+0x184>
24010218:	2205      	movs	r2, #5
2401021a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2401021e:	e731      	b.n	24010084 <follow_path+0x184>

24010220 <dir_next>:
{
24010220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010224:	69c3      	ldr	r3, [r0, #28]
{
24010226:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010228:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2401022a:	2b00      	cmp	r3, #0
2401022c:	d03d      	beq.n	240102aa <dir_next+0x8a>
2401022e:	3520      	adds	r5, #32
24010230:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
24010234:	d239      	bcs.n	240102aa <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010236:	f3c5 0808 	ubfx	r8, r5, #0, #9
2401023a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2401023c:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2401023e:	f1b8 0f00 	cmp.w	r8, #0
24010242:	d008      	beq.n	24010256 <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010244:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010248:	4446      	add	r6, r8
	return FR_OK;
2401024a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2401024c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2401024e:	6226      	str	r6, [r4, #32]
}
24010250:	b005      	add	sp, #20
24010252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
24010256:	460e      	mov	r6, r1
24010258:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2401025a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2401025c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2401025e:	b341      	cbz	r1, 240102b2 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
24010260:	897b      	ldrh	r3, [r7, #10]
24010262:	3b01      	subs	r3, #1
24010264:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
24010268:	9300      	str	r3, [sp, #0]
2401026a:	d1eb      	bne.n	24010244 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2401026c:	4638      	mov	r0, r7
2401026e:	f7fe ffeb 	bl	2400f248 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
24010272:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
24010274:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
24010276:	d924      	bls.n	240102c2 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
24010278:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2401027c:	d023      	beq.n	240102c6 <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2401027e:	69bb      	ldr	r3, [r7, #24]
24010280:	4283      	cmp	r3, r0
24010282:	d922      	bls.n	240102ca <dir_next+0xaa>
	clst -= 2;
24010284:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010286:	f107 0634 	add.w	r6, r7, #52	; 0x34
2401028a:	4619      	mov	r1, r3
	clst -= 2;
2401028c:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
2401028e:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010292:	69bb      	ldr	r3, [r7, #24]
24010294:	3b02      	subs	r3, #2
24010296:	428b      	cmp	r3, r1
24010298:	d904      	bls.n	240102a4 <dir_next+0x84>
	return clst * fs->csize + fs->database;
2401029a:	897a      	ldrh	r2, [r7, #10]
2401029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2401029e:	fb01 3302 	mla	r3, r1, r2, r3
240102a2:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
240102a4:	9b00      	ldr	r3, [sp, #0]
240102a6:	61e3      	str	r3, [r4, #28]
240102a8:	e7ce      	b.n	24010248 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
240102aa:	2004      	movs	r0, #4
}
240102ac:	b005      	add	sp, #20
240102ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
240102b2:	893b      	ldrh	r3, [r7, #8]
240102b4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
240102b8:	d8c4      	bhi.n	24010244 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
240102ba:	2300      	movs	r3, #0
240102bc:	2004      	movs	r0, #4
240102be:	61e3      	str	r3, [r4, #28]
240102c0:	e7c6      	b.n	24010250 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240102c2:	2002      	movs	r0, #2
240102c4:	e7c4      	b.n	24010250 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
240102c6:	2001      	movs	r0, #1
240102c8:	e7c2      	b.n	24010250 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
240102ca:	2e00      	cmp	r6, #0
240102cc:	d0f5      	beq.n	240102ba <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
240102ce:	69a1      	ldr	r1, [r4, #24]
240102d0:	4620      	mov	r0, r4
240102d2:	f7ff fa61 	bl	2400f798 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
240102d6:	4681      	mov	r9, r0
240102d8:	2800      	cmp	r0, #0
240102da:	d05a      	beq.n	24010392 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
240102dc:	2801      	cmp	r0, #1
240102de:	d0f0      	beq.n	240102c2 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
240102e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
240102e4:	d0ef      	beq.n	240102c6 <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
240102e6:	78fb      	ldrb	r3, [r7, #3]
240102e8:	2b00      	cmp	r3, #0
240102ea:	d154      	bne.n	24010396 <dir_next+0x176>
240102ec:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
240102f0:	f44f 7200 	mov.w	r2, #512	; 0x200
240102f4:	2100      	movs	r1, #0
240102f6:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
240102f8:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
240102fa:	f00c f9b9 	bl	2401c670 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240102fe:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
24010300:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010304:	3b02      	subs	r3, #2
	clst -= 2;
24010306:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010308:	429a      	cmp	r2, r3
2401030a:	d267      	bcs.n	240103dc <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
2401030c:	4611      	mov	r1, r2
2401030e:	897b      	ldrh	r3, [r7, #10]
24010310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
24010312:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
24010316:	633a      	str	r2, [r7, #48]	; 0x30
24010318:	2b00      	cmp	r3, #0
2401031a:	d036      	beq.n	2401038a <dir_next+0x16a>
2401031c:	2300      	movs	r3, #0
						fs->wflag = 1;
2401031e:	e9cd 6402 	strd	r6, r4, [sp, #8]
24010322:	465e      	mov	r6, fp
24010324:	461c      	mov	r4, r3
24010326:	46ab      	mov	fp, r5
24010328:	4615      	mov	r5, r2
2401032a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2401032e:	462a      	mov	r2, r5
24010330:	4631      	mov	r1, r6
24010332:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
24010334:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010336:	2301      	movs	r3, #1
24010338:	f7fe fb98 	bl	2400ea6c <disk_write>
2401033c:	2800      	cmp	r0, #0
2401033e:	d1c2      	bne.n	240102c6 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
24010342:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24010344:	1aea      	subs	r2, r5, r3
24010346:	69fb      	ldr	r3, [r7, #28]
24010348:	429a      	cmp	r2, r3
2401034a:	d212      	bcs.n	24010372 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2401034c:	f897 a002 	ldrb.w	sl, [r7, #2]
24010350:	f1ba 0f01 	cmp.w	sl, #1
24010354:	d801      	bhi.n	2401035a <dir_next+0x13a>
24010356:	e00c      	b.n	24010372 <dir_next+0x152>
					wsect += fs->fsize;
24010358:	69fb      	ldr	r3, [r7, #28]
2401035a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2401035c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
24010360:	2301      	movs	r3, #1
24010362:	4631      	mov	r1, r6
24010364:	462a      	mov	r2, r5
24010366:	7878      	ldrb	r0, [r7, #1]
24010368:	f7fe fb80 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2401036c:	f1ba 0f01 	cmp.w	sl, #1
24010370:	d1f2      	bne.n	24010358 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
24010372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24010374:	3401      	adds	r4, #1
24010376:	1c5d      	adds	r5, r3, #1
24010378:	897b      	ldrh	r3, [r7, #10]
2401037a:	42a3      	cmp	r3, r4
2401037c:	633d      	str	r5, [r7, #48]	; 0x30
2401037e:	d8d4      	bhi.n	2401032a <dir_next+0x10a>
24010380:	462a      	mov	r2, r5
24010382:	4623      	mov	r3, r4
24010384:	465d      	mov	r5, fp
24010386:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
2401038a:	1ad2      	subs	r2, r2, r3
2401038c:	9901      	ldr	r1, [sp, #4]
2401038e:	633a      	str	r2, [r7, #48]	; 0x30
24010390:	e77d      	b.n	2401028e <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
24010392:	2007      	movs	r0, #7
24010394:	e75c      	b.n	24010250 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
24010396:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2401039a:	f107 0b34 	add.w	fp, r7, #52	; 0x34
2401039e:	2301      	movs	r3, #1
240103a0:	7878      	ldrb	r0, [r7, #1]
240103a2:	4652      	mov	r2, sl
240103a4:	4659      	mov	r1, fp
240103a6:	f7fe fb61 	bl	2400ea6c <disk_write>
240103aa:	2800      	cmp	r0, #0
240103ac:	d18b      	bne.n	240102c6 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
240103b0:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240103b2:	ebaa 0203 	sub.w	r2, sl, r3
240103b6:	69fb      	ldr	r3, [r7, #28]
240103b8:	429a      	cmp	r2, r3
240103ba:	d299      	bcs.n	240102f0 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240103bc:	78be      	ldrb	r6, [r7, #2]
240103be:	2e01      	cmp	r6, #1
240103c0:	d801      	bhi.n	240103c6 <dir_next+0x1a6>
240103c2:	e795      	b.n	240102f0 <dir_next+0xd0>
240103c4:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
240103c6:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240103c8:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
240103ca:	2301      	movs	r3, #1
240103cc:	4659      	mov	r1, fp
240103ce:	4652      	mov	r2, sl
240103d0:	7878      	ldrb	r0, [r7, #1]
240103d2:	f7fe fb4b 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240103d6:	2e01      	cmp	r6, #1
240103d8:	d1f4      	bne.n	240103c4 <dir_next+0x1a4>
240103da:	e789      	b.n	240102f0 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
240103dc:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240103de:	2200      	movs	r2, #0
240103e0:	e799      	b.n	24010316 <dir_next+0xf6>
240103e2:	bf00      	nop

240103e4 <dir_register>:
{
240103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
240103e8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
240103ec:	b08d      	sub	sp, #52	; 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
240103ee:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
240103f2:	9304      	str	r3, [sp, #16]
240103f4:	f040 8314 	bne.w	24010a20 <dir_register+0x63c>
	FATFS *fs = dp->obj.fs;
240103f8:	6803      	ldr	r3, [r0, #0]
240103fa:	4604      	mov	r4, r0
240103fc:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
240103fe:	68db      	ldr	r3, [r3, #12]
24010400:	881a      	ldrh	r2, [r3, #0]
24010402:	2a00      	cmp	r2, #0
24010404:	f000 8475 	beq.w	24010cf2 <dir_register+0x90e>
24010408:	4689      	mov	r9, r1
2401040a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2401040e:	f109 0901 	add.w	r9, r9, #1
24010412:	2a00      	cmp	r2, #0
24010414:	d1f9      	bne.n	2401040a <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
24010416:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
2401041a:	ab0c      	add	r3, sp, #48	; 0x30
2401041c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
24010420:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
24010424:	9b04      	ldr	r3, [sp, #16]
24010426:	07dd      	lsls	r5, r3, #31
24010428:	f140 8156 	bpl.w	240106d8 <dir_register+0x2f4>
				if (sr & 0x10000) sr ^= 0x11021;
2401042c:	f241 0521 	movw	r5, #4129	; 0x1021
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
24010430:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010432:	f8cd 9014 	str.w	r9, [sp, #20]
		for (n = 1; n < 100; n++) {
24010436:	2701      	movs	r7, #1
				if (sr & 0x10000) sr ^= 0x11021;
24010438:	f2c0 0501 	movt	r5, #1
			*d++ = *s++;
2401043c:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
24010440:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010444:	f04f 0b20 	mov.w	fp, #32
24010448:	f8dd 900c 	ldr.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2401044c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
24010450:	9002      	str	r0, [sp, #8]
24010452:	9101      	str	r1, [sp, #4]
24010454:	9b02      	ldr	r3, [sp, #8]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
24010456:	2f05      	cmp	r7, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
24010458:	f8d9 100c 	ldr.w	r1, [r9, #12]
			*d++ = *s++;
2401045c:	6263      	str	r3, [r4, #36]	; 0x24
2401045e:	9b01      	ldr	r3, [sp, #4]
24010460:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
24010464:	62a3      	str	r3, [r4, #40]	; 0x28
24010466:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2401046a:	f240 8151 	bls.w	24010710 <dir_register+0x32c>
		while (*lfn) {	/* Create a CRC */
2401046e:	880a      	ldrh	r2, [r1, #0]
24010470:	2a00      	cmp	r2, #0
24010472:	f000 814d 	beq.w	24010710 <dir_register+0x32c>
				sr = (sr << 1) + (wc & 1);
24010476:	468c      	mov	ip, r1
24010478:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2401047c:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2401047e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010482:	e009      	b.n	24010498 <dir_register+0xb4>
				sr = (sr << 1) + (wc & 1);
24010484:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
24010488:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2401048c:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
24010490:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010494:	bf18      	it	ne
24010496:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
24010498:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2401049c:	0893      	lsrs	r3, r2, #2
2401049e:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
240104a0:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240104a4:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
240104a6:	f003 0301 	and.w	r3, r3, #1
240104aa:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
240104ae:	bf48      	it	mi
240104b0:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
240104b4:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
240104b6:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240104ba:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
240104be:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
240104c2:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
240104c6:	bf18      	it	ne
240104c8:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
240104ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240104ce:	041b      	lsls	r3, r3, #16
				wc >>= 1;
240104d0:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
240104d4:	bf48      	it	mi
240104d6:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
240104d8:	f003 0301 	and.w	r3, r3, #1
240104dc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240104e0:	0400      	lsls	r0, r0, #16
				wc >>= 1;
240104e2:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
240104e6:	bf48      	it	mi
240104e8:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
240104ea:	f000 0001 	and.w	r0, r0, #1
240104ee:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240104f2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
240104f4:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
240104f8:	bf48      	it	mi
240104fa:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
240104fc:	f001 0101 	and.w	r1, r1, #1
24010500:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010504:	041b      	lsls	r3, r3, #16
				wc >>= 1;
24010506:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2401050a:	bf48      	it	mi
2401050c:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2401050e:	f003 0301 	and.w	r3, r3, #1
24010512:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010516:	0400      	lsls	r0, r0, #16
				wc >>= 1;
24010518:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2401051c:	bf48      	it	mi
2401051e:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
24010520:	f000 0001 	and.w	r0, r0, #1
24010524:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010528:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2401052a:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2401052e:	bf48      	it	mi
24010530:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
24010532:	f001 0101 	and.w	r1, r1, #1
24010536:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401053a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2401053c:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
24010540:	bf48      	it	mi
24010542:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
24010544:	f003 0301 	and.w	r3, r3, #1
24010548:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401054c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2401054e:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
24010552:	bf48      	it	mi
24010554:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
24010556:	f000 0001 	and.w	r0, r0, #1
2401055a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401055e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
24010560:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
24010564:	bf48      	it	mi
24010566:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
24010568:	f001 0101 	and.w	r1, r1, #1
2401056c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010570:	041b      	lsls	r3, r3, #16
				wc >>= 1;
24010572:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
24010576:	bf48      	it	mi
24010578:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2401057a:	f003 0301 	and.w	r3, r3, #1
2401057e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24010582:	0400      	lsls	r0, r0, #16
24010584:	bf48      	it	mi
24010586:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
24010588:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401058c:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
2401058e:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
24010592:	bf48      	it	mi
24010594:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
24010596:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401059a:	041b      	lsls	r3, r3, #16
2401059c:	bf48      	it	mi
2401059e:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
240105a2:	2a00      	cmp	r2, #0
240105a4:	f47f af6e 	bne.w	24010484 <dir_register+0xa0>
		c = (BYTE)((seq % 16) + '0');
240105a8:	f00e 010f 	and.w	r1, lr, #15
240105ac:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
240105b0:	2a39      	cmp	r2, #57	; 0x39
240105b2:	bf88      	it	hi
240105b4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
240105b8:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
240105bc:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
240105c0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	} while (seq);
240105c4:	f240 8190 	bls.w	240108e8 <dir_register+0x504>
		c = (BYTE)((seq % 16) + '0');
240105c8:	f001 000f 	and.w	r0, r1, #15
240105cc:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
240105d0:	2a39      	cmp	r2, #57	; 0x39
240105d2:	bf88      	it	hi
240105d4:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
240105d8:	290f      	cmp	r1, #15
		seq /= 16;
240105da:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
240105de:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	} while (seq);
240105e2:	f240 8187 	bls.w	240108f4 <dir_register+0x510>
		c = (BYTE)((seq % 16) + '0');
240105e6:	f000 010f 	and.w	r1, r0, #15
240105ea:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
240105ee:	2a39      	cmp	r2, #57	; 0x39
240105f0:	bf88      	it	hi
240105f2:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
240105f6:	280f      	cmp	r0, #15
		seq /= 16;
240105f8:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
240105fc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	} while (seq);
24010600:	f240 8187 	bls.w	24010912 <dir_register+0x52e>
		c = (BYTE)((seq % 16) + '0');
24010604:	f001 000f 	and.w	r0, r1, #15
24010608:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2401060c:	2a39      	cmp	r2, #57	; 0x39
2401060e:	bf88      	it	hi
24010610:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
24010614:	290f      	cmp	r1, #15
		seq /= 16;
24010616:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2401061a:	f88d 2020 	strb.w	r2, [sp, #32]
	} while (seq);
2401061e:	f240 817e 	bls.w	2401091e <dir_register+0x53a>
		c = (BYTE)((seq % 16) + '0');
24010622:	f000 010f 	and.w	r1, r0, #15
24010626:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2401062a:	2a39      	cmp	r2, #57	; 0x39
2401062c:	bf88      	it	hi
2401062e:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
24010632:	280f      	cmp	r0, #15
		seq /= 16;
24010634:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
24010638:	f88d 201f 	strb.w	r2, [sp, #31]
	} while (seq);
2401063c:	f240 8175 	bls.w	2401092a <dir_register+0x546>
		c = (BYTE)((seq % 16) + '0');
24010640:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
24010644:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
24010648:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2401064c:	2a39      	cmp	r2, #57	; 0x39
2401064e:	bf88      	it	hi
24010650:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
24010654:	290f      	cmp	r1, #15
		ns[i--] = c;
24010656:	f88d 201e 	strb.w	r2, [sp, #30]
	} while (seq);
2401065a:	f240 816c 	bls.w	24010936 <dir_register+0x552>
		c = (BYTE)((seq % 16) + '0');
2401065e:	f00e 010f 	and.w	r1, lr, #15
24010662:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
24010666:	2a39      	cmp	r2, #57	; 0x39
24010668:	bf88      	it	hi
2401066a:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2401066e:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
24010672:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
24010676:	f240 8143 	bls.w	24010900 <dir_register+0x51c>
		ns[i--] = c;
2401067a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2401067e:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
24010682:	2200      	movs	r2, #0
24010684:	e002      	b.n	2401068c <dir_register+0x2a8>
24010686:	3201      	adds	r2, #1
24010688:	4562      	cmp	r2, ip
2401068a:	d003      	beq.n	24010694 <dir_register+0x2b0>
2401068c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
24010690:	2b20      	cmp	r3, #32
24010692:	d1f8      	bne.n	24010686 <dir_register+0x2a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010694:	f1bc 0f07 	cmp.w	ip, #7
24010698:	d93c      	bls.n	24010714 <dir_register+0x330>
2401069a:	1c50      	adds	r0, r2, #1
2401069c:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
240106a0:	2807      	cmp	r0, #7
240106a2:	d809      	bhi.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240106a4:	1c42      	adds	r2, r0, #1
240106a6:	2120      	movs	r1, #32
240106a8:	2a08      	cmp	r2, #8
240106aa:	f1c0 0208 	rsb	r2, r0, #8
240106ae:	4430      	add	r0, r6
240106b0:	bf88      	it	hi
240106b2:	2201      	movhi	r2, #1
240106b4:	f00b ffdc 	bl	2401c670 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
240106b8:	4620      	mov	r0, r4
240106ba:	f7ff fa75 	bl	2400fba8 <dir_find>
240106be:	4601      	mov	r1, r0
			if (res != FR_OK) break;
240106c0:	2800      	cmp	r0, #0
240106c2:	f040 80a5 	bne.w	24010810 <dir_register+0x42c>
		for (n = 1; n < 100; n++) {
240106c6:	3701      	adds	r7, #1
240106c8:	2f64      	cmp	r7, #100	; 0x64
240106ca:	f47f aec3 	bne.w	24010454 <dir_register+0x70>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
240106ce:	2107      	movs	r1, #7
}
240106d0:	4608      	mov	r0, r1
240106d2:	b00d      	add	sp, #52	; 0x34
240106d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
240106d8:	f013 0802 	ands.w	r8, r3, #2
240106dc:	9d03      	ldr	r5, [sp, #12]
240106de:	f000 80a4 	beq.w	2401082a <dir_register+0x446>
240106e2:	f64e 424f 	movw	r2, #60495	; 0xec4f
240106e6:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
240106ea:	2100      	movs	r1, #0
240106ec:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
240106ee:	f6c4 62c4 	movt	r2, #20164	; 0x4ec4
240106f2:	fba2 2303 	umull	r2, r3, r2, r3
240106f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
240106fa:	f7ff f90d 	bl	2400f918 <dir_sdi>
	if (res == FR_OK) {
240106fe:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
24010700:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
24010704:	2800      	cmp	r0, #0
24010706:	f000 809a 	beq.w	2401083e <dir_register+0x45a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2401070a:	2904      	cmp	r1, #4
2401070c:	d0df      	beq.n	240106ce <dir_register+0x2ea>
2401070e:	e7df      	b.n	240106d0 <dir_register+0x2ec>
24010710:	46be      	mov	lr, r7
24010712:	e749      	b.n	240105a8 <dir_register+0x1c4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010714:	f10c 0330 	add.w	r3, ip, #48	; 0x30
24010718:	f10c 0c01 	add.w	ip, ip, #1
2401071c:	eb0d 0103 	add.w	r1, sp, r3
24010720:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24010724:	54b1      	strb	r1, [r6, r2]
24010726:	3201      	adds	r2, #1
	} while (j < 8);
24010728:	2a07      	cmp	r2, #7
2401072a:	d8c5      	bhi.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401072c:	f1bc 0f08 	cmp.w	ip, #8
24010730:	f000 80a3 	beq.w	2401087a <dir_register+0x496>
24010734:	f10c 0330 	add.w	r3, ip, #48	; 0x30
	} while (j < 8);
24010738:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401073a:	f102 0001 	add.w	r0, r2, #1
2401073e:	eb0d 0103 	add.w	r1, sp, r3
24010742:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24010746:	54b1      	strb	r1, [r6, r2]
24010748:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2401074c:	d0b4      	beq.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401074e:	2908      	cmp	r1, #8
24010750:	f000 809b 	beq.w	2401088a <dir_register+0x4a6>
24010754:	f10c 0331 	add.w	r3, ip, #49	; 0x31
	} while (j < 8);
24010758:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401075a:	eb0d 0103 	add.w	r1, sp, r3
2401075e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24010762:	5431      	strb	r1, [r6, r0]
24010764:	f10c 0102 	add.w	r1, ip, #2
24010768:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2401076c:	d0a4      	beq.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401076e:	2908      	cmp	r1, #8
24010770:	f000 8093 	beq.w	2401089a <dir_register+0x4b6>
24010774:	f10c 0332 	add.w	r3, ip, #50	; 0x32
	} while (j < 8);
24010778:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401077a:	eb0d 0103 	add.w	r1, sp, r3
2401077e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24010782:	5431      	strb	r1, [r6, r0]
24010784:	f10c 0103 	add.w	r1, ip, #3
24010788:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2401078c:	d094      	beq.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401078e:	2908      	cmp	r1, #8
24010790:	f000 808b 	beq.w	240108aa <dir_register+0x4c6>
24010794:	f10c 0333 	add.w	r3, ip, #51	; 0x33
	} while (j < 8);
24010798:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401079a:	eb0d 0103 	add.w	r1, sp, r3
2401079e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
240107a2:	5431      	strb	r1, [r6, r0]
240107a4:	f10c 0104 	add.w	r1, ip, #4
240107a8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
240107ac:	d084      	beq.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107ae:	2908      	cmp	r1, #8
240107b0:	f000 8083 	beq.w	240108ba <dir_register+0x4d6>
240107b4:	f10c 0334 	add.w	r3, ip, #52	; 0x34
	} while (j < 8);
240107b8:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107ba:	eb0d 0103 	add.w	r1, sp, r3
240107be:	f811 1c14 	ldrb.w	r1, [r1, #-20]
240107c2:	5431      	strb	r1, [r6, r0]
240107c4:	f10c 0105 	add.w	r1, ip, #5
240107c8:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
240107cc:	f43f af74 	beq.w	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107d0:	2908      	cmp	r1, #8
240107d2:	d07a      	beq.n	240108ca <dir_register+0x4e6>
240107d4:	f10c 0335 	add.w	r3, ip, #53	; 0x35
	} while (j < 8);
240107d8:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107da:	eb0d 0103 	add.w	r1, sp, r3
240107de:	f811 1c14 	ldrb.w	r1, [r1, #-20]
240107e2:	5431      	strb	r1, [r6, r0]
240107e4:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
240107e8:	f43f af66 	beq.w	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107ec:	f1bc 0f01 	cmp.w	ip, #1
240107f0:	d173      	bne.n	240108da <dir_register+0x4f6>
240107f2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
240107f6:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240107f8:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
240107fa:	f47f af5d 	bne.w	240106b8 <dir_register+0x2d4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
240107fe:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010800:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
24010804:	f7ff f9d0 	bl	2400fba8 <dir_find>
24010808:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2401080a:	2800      	cmp	r0, #0
2401080c:	f43f af5b 	beq.w	240106c6 <dir_register+0x2e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
24010810:	2804      	cmp	r0, #4
24010812:	f8dd 9014 	ldr.w	r9, [sp, #20]
24010816:	f47f af5b 	bne.w	240106d0 <dir_register+0x2ec>
		dp->fn[NSFLAG] = sn[NSFLAG];
2401081a:	9b04      	ldr	r3, [sp, #16]
	FATFS *fs = dp->obj.fs;
2401081c:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2401081e:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
24010822:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
24010826:	f47f af5c 	bne.w	240106e2 <dir_register+0x2fe>
	res = dir_sdi(dp, 0);
2401082a:	2100      	movs	r1, #0
2401082c:	4620      	mov	r0, r4
2401082e:	f7ff f873 	bl	2400f918 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
24010832:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
24010836:	4601      	mov	r1, r0
24010838:	2800      	cmp	r0, #0
2401083a:	f47f af66 	bne.w	2401070a <dir_register+0x326>
		n = 0;
2401083e:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010840:	f105 0a34 	add.w	sl, r5, #52	; 0x34
24010844:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
24010848:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2401084a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
2401084e:	4546      	cmp	r6, r8
24010850:	d078      	beq.n	24010944 <dir_register+0x560>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
24010852:	78eb      	ldrb	r3, [r5, #3]
24010854:	2b00      	cmp	r3, #0
24010856:	f040 80bb 	bne.w	240109d0 <dir_register+0x5ec>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2401085a:	2301      	movs	r3, #1
2401085c:	4632      	mov	r2, r6
2401085e:	4651      	mov	r1, sl
24010860:	7868      	ldrb	r0, [r5, #1]
24010862:	f7fe f8f3 	bl	2400ea4c <disk_read>
24010866:	2800      	cmp	r0, #0
24010868:	d06b      	beq.n	24010942 <dir_register+0x55e>
				res = FR_DISK_ERR;
2401086a:	2101      	movs	r1, #1
			fs->winsect = sector;
2401086c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
24010870:	4608      	mov	r0, r1
			fs->winsect = sector;
24010872:	632b      	str	r3, [r5, #48]	; 0x30
}
24010874:	b00d      	add	sp, #52	; 0x34
24010876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2401087a:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401087c:	f102 0001 	add.w	r0, r2, #1
24010880:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
24010884:	f47f af0e 	bne.w	240106a4 <dir_register+0x2c0>
24010888:	e716      	b.n	240106b8 <dir_register+0x2d4>
2401088a:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401088c:	f806 b000 	strb.w	fp, [r6, r0]
24010890:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
24010894:	f47f af06 	bne.w	240106a4 <dir_register+0x2c0>
24010898:	e70e      	b.n	240106b8 <dir_register+0x2d4>
2401089a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401089c:	f806 b000 	strb.w	fp, [r6, r0]
240108a0:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
240108a4:	f47f aefe 	bne.w	240106a4 <dir_register+0x2c0>
240108a8:	e706      	b.n	240106b8 <dir_register+0x2d4>
240108aa:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240108ac:	f806 b000 	strb.w	fp, [r6, r0]
240108b0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
240108b4:	f47f aef6 	bne.w	240106a4 <dir_register+0x2c0>
240108b8:	e6fe      	b.n	240106b8 <dir_register+0x2d4>
240108ba:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240108bc:	f806 b000 	strb.w	fp, [r6, r0]
240108c0:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
240108c4:	f47f aeee 	bne.w	240106a4 <dir_register+0x2c0>
240108c8:	e6f6      	b.n	240106b8 <dir_register+0x2d4>
240108ca:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240108cc:	f806 b000 	strb.w	fp, [r6, r0]
240108d0:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
240108d4:	f47f aee6 	bne.w	240106a4 <dir_register+0x2c0>
240108d8:	e6ee      	b.n	240106b8 <dir_register+0x2d4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240108da:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
240108de:	2a00      	cmp	r2, #0
240108e0:	f47f aeea 	bne.w	240106b8 <dir_register+0x2d4>
240108e4:	2007      	movs	r0, #7
240108e6:	e6dd      	b.n	240106a4 <dir_register+0x2c0>
	ns[i] = '~';
240108e8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
240108ea:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
240108ee:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	for (j = 0; j < i && dst[j] != ' '; j++) {
240108f2:	e6c4      	b.n	2401067e <dir_register+0x29a>
	ns[i] = '~';
240108f4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
240108f6:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
240108fa:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	for (j = 0; j < i && dst[j] != ' '; j++) {
240108fe:	e6be      	b.n	2401067e <dir_register+0x29a>
	ns[i] = '~';
24010900:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24010902:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
24010906:	f88d 201c 	strb.w	r2, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401090a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
2401090e:	4662      	mov	r2, ip
24010910:	e710      	b.n	24010734 <dir_register+0x350>
	ns[i] = '~';
24010912:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24010914:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
24010918:	f88d 2020 	strb.w	r2, [sp, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2401091c:	e6af      	b.n	2401067e <dir_register+0x29a>
	ns[i] = '~';
2401091e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24010920:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
24010924:	f88d 201f 	strb.w	r2, [sp, #31]
	for (j = 0; j < i && dst[j] != ' '; j++) {
24010928:	e6a9      	b.n	2401067e <dir_register+0x29a>
	ns[i] = '~';
2401092a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2401092c:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
24010930:	f88d 201e 	strb.w	r2, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
24010934:	e6a3      	b.n	2401067e <dir_register+0x29a>
	ns[i] = '~';
24010936:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24010938:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2401093c:	f88d 201d 	strb.w	r2, [sp, #29]
	for (j = 0; j < i && dst[j] != ' '; j++) {
24010940:	e69d      	b.n	2401067e <dir_register+0x29a>
			fs->winsect = sector;
24010942:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
24010944:	6a23      	ldr	r3, [r4, #32]
24010946:	781b      	ldrb	r3, [r3, #0]
24010948:	2be5      	cmp	r3, #229	; 0xe5
2401094a:	d00d      	beq.n	24010968 <dir_register+0x584>
2401094c:	fab3 f283 	clz	r2, r3
24010950:	0952      	lsrs	r2, r2, #5
24010952:	b14b      	cbz	r3, 24010968 <dir_register+0x584>
				n = 0;					/* Not a blank entry. Restart to search */
24010954:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
24010956:	2101      	movs	r1, #1
24010958:	4620      	mov	r0, r4
2401095a:	f7ff fc61 	bl	24010220 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2401095e:	2800      	cmp	r0, #0
24010960:	f43f af72 	beq.w	24010848 <dir_register+0x464>
24010964:	4601      	mov	r1, r0
24010966:	e6d0      	b.n	2401070a <dir_register+0x326>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
24010968:	3701      	adds	r7, #1
2401096a:	45bb      	cmp	fp, r7
2401096c:	d1f3      	bne.n	24010956 <dir_register+0x572>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2401096e:	f8dd 8004 	ldr.w	r8, [sp, #4]
24010972:	f1b8 0f00 	cmp.w	r8, #0
24010976:	d155      	bne.n	24010a24 <dir_register+0x640>
		res = move_window(fs, dp->sect);
24010978:	69e1      	ldr	r1, [r4, #28]
2401097a:	9803      	ldr	r0, [sp, #12]
2401097c:	f7fe fa28 	bl	2400edd0 <move_window>
		if (res == FR_OK) {
24010980:	4601      	mov	r1, r0
24010982:	2800      	cmp	r0, #0
24010984:	f47f aea4 	bne.w	240106d0 <dir_register+0x2ec>
		*d++ = (BYTE)val;
24010988:	2220      	movs	r2, #32
2401098a:	9001      	str	r0, [sp, #4]
2401098c:	6a20      	ldr	r0, [r4, #32]
2401098e:	f00b fe6f 	bl	2401c670 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
24010992:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010994:	f104 0225 	add.w	r2, r4, #37	; 0x25
24010998:	9901      	ldr	r1, [sp, #4]
2401099a:	1a9a      	subs	r2, r3, r2
2401099c:	2a02      	cmp	r2, #2
2401099e:	f240 81ab 	bls.w	24010cf8 <dir_register+0x914>
			*d++ = *s++;
240109a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
240109a4:	601a      	str	r2, [r3, #0]
240109a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
240109a8:	605a      	str	r2, [r3, #4]
240109aa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
240109ae:	721a      	strb	r2, [r3, #8]
240109b0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
240109b4:	725a      	strb	r2, [r3, #9]
240109b6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
240109ba:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
240109bc:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
240109be:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
240109c2:	6a20      	ldr	r0, [r4, #32]
240109c4:	f003 0318 	and.w	r3, r3, #24
240109c8:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
240109ca:	9b03      	ldr	r3, [sp, #12]
240109cc:	70da      	strb	r2, [r3, #3]
240109ce:	e67f      	b.n	240106d0 <dir_register+0x2ec>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
240109d0:	2301      	movs	r3, #1
240109d2:	4642      	mov	r2, r8
240109d4:	4651      	mov	r1, sl
240109d6:	7868      	ldrb	r0, [r5, #1]
240109d8:	f7fe f848 	bl	2400ea6c <disk_write>
240109dc:	b9d8      	cbnz	r0, 24010a16 <dir_register+0x632>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240109de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
240109e0:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240109e2:	eba8 0103 	sub.w	r1, r8, r3
240109e6:	69eb      	ldr	r3, [r5, #28]
240109e8:	4299      	cmp	r1, r3
240109ea:	f4bf af36 	bcs.w	2401085a <dir_register+0x476>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240109ee:	f895 9002 	ldrb.w	r9, [r5, #2]
240109f2:	f1b9 0f01 	cmp.w	r9, #1
240109f6:	d801      	bhi.n	240109fc <dir_register+0x618>
240109f8:	e72f      	b.n	2401085a <dir_register+0x476>
					wsect += fs->fsize;
240109fa:	69eb      	ldr	r3, [r5, #28]
240109fc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240109fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
24010a02:	2301      	movs	r3, #1
24010a04:	4651      	mov	r1, sl
24010a06:	4642      	mov	r2, r8
24010a08:	7868      	ldrb	r0, [r5, #1]
24010a0a:	f7fe f82f 	bl	2400ea6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010a0e:	f1b9 0f01 	cmp.w	r9, #1
24010a12:	d1f2      	bne.n	240109fa <dir_register+0x616>
24010a14:	e721      	b.n	2401085a <dir_register+0x476>
24010a16:	2101      	movs	r1, #1
}
24010a18:	4608      	mov	r0, r1
24010a1a:	b00d      	add	sp, #52	; 0x34
24010a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
24010a20:	2106      	movs	r1, #6
24010a22:	e655      	b.n	240106d0 <dir_register+0x2ec>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
24010a24:	6961      	ldr	r1, [r4, #20]
24010a26:	4620      	mov	r0, r4
24010a28:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
24010a2c:	f7fe ff74 	bl	2400f918 <dir_sdi>
		if (res == FR_OK) {
24010a30:	4601      	mov	r1, r0
24010a32:	2800      	cmp	r0, #0
24010a34:	f47f ae4c 	bne.w	240106d0 <dir_register+0x2ec>
		sum = (sum >> 1) + (sum << 7) + *dir++;
24010a38:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
24010a3c:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010a3e:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
24010a42:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
24010a46:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
24010a48:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
24010a4c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
24010a50:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24010a54:	4413      	add	r3, r2
24010a56:	f3c3 0246 	ubfx	r2, r3, #1, #7
24010a5a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
24010a5e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
24010a62:	fa53 f282 	uxtab	r2, r3, r2
24010a66:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010a6a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010a6e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
24010a72:	fa52 f383 	uxtab	r3, r2, r3
24010a76:	f3c3 0246 	ubfx	r2, r3, #1, #7
24010a7a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
24010a7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
24010a82:	fa53 f282 	uxtab	r2, r3, r2
24010a86:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010a8a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010a8e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
24010a92:	fa52 f383 	uxtab	r3, r2, r3
24010a96:	f3c3 0246 	ubfx	r2, r3, #1, #7
24010a9a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
24010a9e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24010aa2:	fa53 f282 	uxtab	r2, r3, r2
24010aa6:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010aaa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010aae:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
24010ab2:	fa52 f383 	uxtab	r3, r2, r3
24010ab6:	f3c3 0246 	ubfx	r2, r3, #1, #7
24010aba:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
24010abe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
24010ac2:	fa53 f282 	uxtab	r2, r3, r2
24010ac6:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010aca:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010ace:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
24010ad2:	fa52 f383 	uxtab	r3, r2, r3
24010ad6:	f3c3 0546 	ubfx	r5, r3, #1, #7
24010ada:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
24010ade:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
24010ae2:	fa53 f585 	uxtab	r5, r3, r5
24010ae6:	b2ed      	uxtb	r5, r5
	} while (--n);
24010ae8:	e02a      	b.n	24010b40 <dir_register+0x75c>
	*ptr++ = (BYTE)val; val >>= 8;
24010aea:	f8a3 9003 	strh.w	r9, [r3, #3]
24010aee:	f8a3 9005 	strh.w	r9, [r3, #5]
24010af2:	f8a3 9007 	strh.w	r9, [r3, #7]
24010af6:	f8a3 9009 	strh.w	r9, [r3, #9]
24010afa:	f8a3 900e 	strh.w	r9, [r3, #14]
24010afe:	f8a3 9010 	strh.w	r9, [r3, #16]
24010b02:	f8a3 9012 	strh.w	r9, [r3, #18]
24010b06:	f8a3 9014 	strh.w	r9, [r3, #20]
24010b0a:	f8a3 9016 	strh.w	r9, [r3, #22]
24010b0e:	f8a3 9018 	strh.w	r9, [r3, #24]
24010b12:	f8a3 901c 	strh.w	r9, [r3, #28]
24010b16:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
24010b1a:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
24010b1e:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
24010b22:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
24010b24:	2100      	movs	r1, #0
24010b26:	4620      	mov	r0, r4
				fs->wflag = 1;
24010b28:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
24010b2c:	f7ff fb78 	bl	24010220 <dir_next>
			} while (res == FR_OK && --nent);
24010b30:	4601      	mov	r1, r0
24010b32:	2800      	cmp	r0, #0
24010b34:	f47f adcc 	bne.w	240106d0 <dir_register+0x2ec>
24010b38:	f1b8 0801 	subs.w	r8, r8, #1
24010b3c:	f43f af1c 	beq.w	24010978 <dir_register+0x594>
				res = move_window(fs, dp->sect);
24010b40:	69e1      	ldr	r1, [r4, #28]
24010b42:	4650      	mov	r0, sl
24010b44:	f7fe f944 	bl	2400edd0 <move_window>
24010b48:	4601      	mov	r1, r0
				if (res != FR_OK) break;
24010b4a:	2800      	cmp	r0, #0
24010b4c:	f47f adc0 	bne.w	240106d0 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
24010b50:	fa5f fc88 	uxtb.w	ip, r8
24010b54:	6a23      	ldr	r3, [r4, #32]
24010b56:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24010b5a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010b5e:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
24010b60:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24010b62:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
24010b66:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24010b6a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010b6e:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
24010b72:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010b76:	7058      	strb	r0, [r3, #1]
24010b78:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010b7a:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
24010b7e:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010b80:	0050      	lsls	r0, r2, #1
24010b82:	45be      	cmp	lr, r7
24010b84:	d8b1      	bhi.n	24010aea <dir_register+0x706>
24010b86:	3201      	adds	r2, #1
24010b88:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
24010b8c:	0052      	lsls	r2, r2, #1
24010b8e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010b92:	f883 e003 	strb.w	lr, [r3, #3]
24010b96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010b9a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010b9e:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010ba2:	45bb      	cmp	fp, r7
24010ba4:	d8a3      	bhi.n	24010aee <dir_register+0x70a>
24010ba6:	440a      	add	r2, r1
24010ba8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
24010bac:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010bb0:	f883 e005 	strb.w	lr, [r3, #5]
24010bb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bb8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010bbc:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bc0:	45bb      	cmp	fp, r7
24010bc2:	d896      	bhi.n	24010af2 <dir_register+0x70e>
24010bc4:	f8b2 e004 	ldrh.w	lr, [r2, #4]
24010bc8:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010bcc:	f883 e007 	strb.w	lr, [r3, #7]
24010bd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bd4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010bd8:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bdc:	45bb      	cmp	fp, r7
24010bde:	d88a      	bhi.n	24010af6 <dir_register+0x712>
24010be0:	f8b2 e006 	ldrh.w	lr, [r2, #6]
24010be4:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010be8:	f883 e009 	strb.w	lr, [r3, #9]
24010bec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bf0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010bf4:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010bf8:	45bb      	cmp	fp, r7
24010bfa:	f63f af7e 	bhi.w	24010afa <dir_register+0x716>
24010bfe:	f8b2 e008 	ldrh.w	lr, [r2, #8]
24010c02:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c06:	f883 e00e 	strb.w	lr, [r3, #14]
24010c0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c0e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010c12:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c16:	45bb      	cmp	fp, r7
24010c18:	f63f af71 	bhi.w	24010afe <dir_register+0x71a>
24010c1c:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
24010c20:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c24:	f883 e010 	strb.w	lr, [r3, #16]
24010c28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c2c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010c30:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c34:	45bb      	cmp	fp, r7
24010c36:	f63f af64 	bhi.w	24010b02 <dir_register+0x71e>
24010c3a:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
24010c3e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c42:	f883 e012 	strb.w	lr, [r3, #18]
24010c46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c4a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010c4e:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c52:	45bb      	cmp	fp, r7
24010c54:	f63f af57 	bhi.w	24010b06 <dir_register+0x722>
24010c58:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
24010c5c:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c60:	f883 e014 	strb.w	lr, [r3, #20]
24010c64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c68:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010c6c:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c70:	45bb      	cmp	fp, r7
24010c72:	f63f af4a 	bhi.w	24010b0a <dir_register+0x726>
24010c76:	f8b2 e010 	ldrh.w	lr, [r2, #16]
24010c7a:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c7e:	f883 e016 	strb.w	lr, [r3, #22]
24010c82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c86:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010c8a:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010c8e:	45bb      	cmp	fp, r7
24010c90:	f63f af3d 	bhi.w	24010b0e <dir_register+0x72a>
24010c94:	f8b2 e012 	ldrh.w	lr, [r2, #18]
24010c98:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010c9c:	f883 e018 	strb.w	lr, [r3, #24]
24010ca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010ca4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010ca8:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010cac:	45bb      	cmp	fp, r7
24010cae:	f63f af30 	bhi.w	24010b12 <dir_register+0x72e>
24010cb2:	f8b2 e014 	ldrh.w	lr, [r2, #20]
24010cb6:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010cba:	f883 e01c 	strb.w	lr, [r3, #28]
24010cbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010cc2:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
24010cc6:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24010cca:	45bb      	cmp	fp, r7
24010ccc:	f63f af23 	bhi.w	24010b16 <dir_register+0x732>
24010cd0:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
24010cd2:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
24010cd6:	779a      	strb	r2, [r3, #30]
24010cd8:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
24010cda:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
24010cdc:	fa1f f28e 	uxth.w	r2, lr
24010ce0:	42ba      	cmp	r2, r7
24010ce2:	f63f af1a 	bhi.w	24010b1a <dir_register+0x736>
24010ce6:	180a      	adds	r2, r1, r0
24010ce8:	8b52      	ldrh	r2, [r2, #26]
24010cea:	2a00      	cmp	r2, #0
24010cec:	f47f af17 	bne.w	24010b1e <dir_register+0x73a>
24010cf0:	e713      	b.n	24010b1a <dir_register+0x736>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
24010cf2:	4691      	mov	r9, r2
24010cf4:	f7ff bb8f 	b.w	24010416 <dir_register+0x32>
			*d++ = *s++;
24010cf8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
24010cfc:	701a      	strb	r2, [r3, #0]
24010cfe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24010d02:	705a      	strb	r2, [r3, #1]
24010d04:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
24010d08:	709a      	strb	r2, [r3, #2]
24010d0a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
24010d0e:	70da      	strb	r2, [r3, #3]
24010d10:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
24010d14:	711a      	strb	r2, [r3, #4]
24010d16:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
24010d1a:	715a      	strb	r2, [r3, #5]
24010d1c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
24010d20:	719a      	strb	r2, [r3, #6]
24010d22:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
24010d26:	71da      	strb	r2, [r3, #7]
24010d28:	e63f      	b.n	240109aa <dir_register+0x5c6>
24010d2a:	bf00      	nop

24010d2c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
24010d2c:	2901      	cmp	r1, #1
{
24010d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010d32:	460c      	mov	r4, r1
24010d34:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
24010d36:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
24010d38:	d914      	bls.n	24010d64 <remove_chain+0x38>
24010d3a:	69ab      	ldr	r3, [r5, #24]
24010d3c:	428b      	cmp	r3, r1
24010d3e:	d911      	bls.n	24010d64 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
24010d40:	4606      	mov	r6, r0
24010d42:	4611      	mov	r1, r2
24010d44:	b992      	cbnz	r2, 24010d6c <remove_chain+0x40>
24010d46:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
24010d48:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
24010d4c:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010d50:	429c      	cmp	r4, r3
24010d52:	d207      	bcs.n	24010d64 <remove_chain+0x38>
		switch (fs->fs_type) {
24010d54:	783b      	ldrb	r3, [r7, #0]
24010d56:	2b02      	cmp	r3, #2
24010d58:	f000 80a3 	beq.w	24010ea2 <remove_chain+0x176>
24010d5c:	2b03      	cmp	r3, #3
24010d5e:	d022      	beq.n	24010da6 <remove_chain+0x7a>
24010d60:	2b01      	cmp	r3, #1
24010d62:	d011      	beq.n	24010d88 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
24010d64:	2002      	movs	r0, #2
}
24010d66:	b003      	add	sp, #12
24010d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
24010d6c:	4293      	cmp	r3, r2
24010d6e:	d9f9      	bls.n	24010d64 <remove_chain+0x38>
24010d70:	2a01      	cmp	r2, #1
24010d72:	d0f7      	beq.n	24010d64 <remove_chain+0x38>
24010d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24010d78:	4628      	mov	r0, r5
24010d7a:	f7fe f9df 	bl	2400f13c <put_fat.part.0>
		if (res != FR_OK) return res;
24010d7e:	2800      	cmp	r0, #0
24010d80:	d1f1      	bne.n	24010d66 <remove_chain+0x3a>
24010d82:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010d84:	69bb      	ldr	r3, [r7, #24]
24010d86:	e7df      	b.n	24010d48 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
24010d8a:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010d8e:	4638      	mov	r0, r7
24010d90:	eb01 215a 	add.w	r1, r1, sl, lsr #9
24010d94:	f7fe f81c 	bl	2400edd0 <move_window>
24010d98:	2800      	cmp	r0, #0
24010d9a:	f000 80a9 	beq.w	24010ef0 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
24010d9e:	2001      	movs	r0, #1
}
24010da0:	b003      	add	sp, #12
24010da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
24010da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
24010da8:	4638      	mov	r0, r7
24010daa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
24010dae:	f7fe f80f 	bl	2400edd0 <move_window>
24010db2:	2800      	cmp	r0, #0
24010db4:	d1f3      	bne.n	24010d9e <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24010db6:	00a3      	lsls	r3, r4, #2
24010db8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24010dbc:	443b      	add	r3, r7
24010dbe:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24010dc2:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
24010dc6:	f1ba 0f00 	cmp.w	sl, #0
24010dca:	f000 80af 	beq.w	24010f2c <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
24010dce:	f1ba 0f01 	cmp.w	sl, #1
24010dd2:	d0c7      	beq.n	24010d64 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
24010dd4:	69ab      	ldr	r3, [r5, #24]
24010dd6:	42a3      	cmp	r3, r4
24010dd8:	d9c4      	bls.n	24010d64 <remove_chain+0x38>
		switch (fs->fs_type) {
24010dda:	782f      	ldrb	r7, [r5, #0]
24010ddc:	2f02      	cmp	r7, #2
24010dde:	d029      	beq.n	24010e34 <remove_chain+0x108>
24010de0:	2f03      	cmp	r7, #3
24010de2:	d047      	beq.n	24010e74 <remove_chain+0x148>
24010de4:	2f01      	cmp	r7, #1
24010de6:	d1bd      	bne.n	24010d64 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010de8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
24010dea:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010dee:	4628      	mov	r0, r5
24010df0:	eb01 215b 	add.w	r1, r1, fp, lsr #9
24010df4:	f7fd ffec 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
24010df8:	2800      	cmp	r0, #0
24010dfa:	d1b4      	bne.n	24010d66 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
24010dfc:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
24010dfe:	f10b 0301 	add.w	r3, fp, #1
24010e02:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
24010e06:	d55c      	bpl.n	24010ec2 <remove_chain+0x196>
24010e08:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010e0c:	4628      	mov	r0, r5
24010e0e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
24010e10:	f002 020f 	and.w	r2, r2, #15
24010e14:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010e18:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
24010e1a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010e1c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
24010e20:	f7fd ffd6 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
24010e24:	9b01      	ldr	r3, [sp, #4]
24010e26:	2800      	cmp	r0, #0
24010e28:	d19d      	bne.n	24010d66 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
24010e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24010e2e:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24010e30:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
24010e32:	e00c      	b.n	24010e4e <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
24010e34:	6a69      	ldr	r1, [r5, #36]	; 0x24
24010e36:	4628      	mov	r0, r5
24010e38:	eb01 2114 	add.w	r1, r1, r4, lsr #8
24010e3c:	f7fd ffc8 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
24010e40:	2800      	cmp	r0, #0
24010e42:	d190      	bne.n	24010d66 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
24010e44:	0064      	lsls	r4, r4, #1
24010e46:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
24010e4a:	442c      	add	r4, r5
24010e4c:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
24010e4e:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
24010e52:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
24010e56:	1e91      	subs	r1, r2, #2
24010e58:	428b      	cmp	r3, r1
24010e5a:	d205      	bcs.n	24010e68 <remove_chain+0x13c>
			fs->free_clst++;
24010e5c:	3301      	adds	r3, #1
24010e5e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
24010e60:	792b      	ldrb	r3, [r5, #4]
24010e62:	f043 0301 	orr.w	r3, r3, #1
24010e66:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
24010e68:	4552      	cmp	r2, sl
24010e6a:	d95f      	bls.n	24010f2c <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
24010e6c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010e6e:	4654      	mov	r4, sl
24010e70:	69bb      	ldr	r3, [r7, #24]
24010e72:	e76d      	b.n	24010d50 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
24010e74:	6a69      	ldr	r1, [r5, #36]	; 0x24
24010e76:	4628      	mov	r0, r5
24010e78:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
24010e7c:	f7fd ffa8 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
24010e80:	2800      	cmp	r0, #0
24010e82:	f47f af70 	bne.w	24010d66 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
24010e86:	00a4      	lsls	r4, r4, #2
24010e88:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24010e8c:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
24010e90:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
24010e94:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
24010e96:	0e13      	lsrs	r3, r2, #24
24010e98:	70a0      	strb	r0, [r4, #2]
24010e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
24010e9e:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
24010ea0:	e7d5      	b.n	24010e4e <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
24010ea4:	4638      	mov	r0, r7
24010ea6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
24010eaa:	f7fd ff91 	bl	2400edd0 <move_window>
24010eae:	2800      	cmp	r0, #0
24010eb0:	f47f af75 	bne.w	24010d9e <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
24010eb4:	0063      	lsls	r3, r4, #1
24010eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
24010eba:	443b      	add	r3, r7
24010ebc:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
24010ec0:	e781      	b.n	24010dc6 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
24010ec2:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010ec6:	4628      	mov	r0, r5
24010ec8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
24010eca:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010ecc:	eb01 2153 	add.w	r1, r1, r3, lsr #9
24010ed0:	9301      	str	r3, [sp, #4]
24010ed2:	f7fd ff7d 	bl	2400edd0 <move_window>
			if (res != FR_OK) break;
24010ed6:	2800      	cmp	r0, #0
24010ed8:	f47f af45 	bne.w	24010d66 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
24010edc:	9b01      	ldr	r3, [sp, #4]
24010ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24010ee2:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
24010ee6:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24010ee8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
24010eec:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
24010eee:	e7ae      	b.n	24010e4e <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
24010ef0:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
24010ef6:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010efa:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
24010efc:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010efe:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
24010f02:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010f06:	f7fd ff63 	bl	2400edd0 <move_window>
24010f0a:	2800      	cmp	r0, #0
24010f0c:	f47f af47 	bne.w	24010d9e <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
24010f10:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010f14:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
24010f16:	44ba      	add	sl, r7
24010f18:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
24010f1c:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010f20:	bf4c      	ite	mi
24010f22:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
24010f26:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
24010f2a:	e74c      	b.n	24010dc6 <remove_chain+0x9a>
	return FR_OK;
24010f2c:	2000      	movs	r0, #0
24010f2e:	e71a      	b.n	24010d66 <remove_chain+0x3a>

24010f30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
24010f30:	b510      	push	{r4, lr}
24010f32:	b082      	sub	sp, #8
24010f34:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
24010f38:	b1a1      	cbz	r1, 24010f64 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
24010f3a:	f891 c000 	ldrb.w	ip, [r1]
24010f3e:	f1bc 0f1f 	cmp.w	ip, #31
24010f42:	d912      	bls.n	24010f6a <f_mount+0x3a>
24010f44:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
24010f48:	d00f      	beq.n	24010f6a <f_mount+0x3a>
24010f4a:	4608      	mov	r0, r1
24010f4c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
24010f50:	2b1f      	cmp	r3, #31
24010f52:	d90c      	bls.n	24010f6e <f_mount+0x3e>
24010f54:	2b3a      	cmp	r3, #58	; 0x3a
24010f56:	d1f9      	bne.n	24010f4c <f_mount+0x1c>
			i = *tp++ - '0';
24010f58:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
24010f5a:	4288      	cmp	r0, r1
24010f5c:	d102      	bne.n	24010f64 <f_mount+0x34>
24010f5e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
24010f62:	d006      	beq.n	24010f72 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
24010f64:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
24010f66:	b002      	add	sp, #8
24010f68:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
24010f6a:	4663      	mov	r3, ip
24010f6c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
24010f6e:	2b3a      	cmp	r3, #58	; 0x3a
24010f70:	d0f2      	beq.n	24010f58 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
24010f72:	f64d 639c 	movw	r3, #56988	; 0xde9c
24010f76:	f2c2 0301 	movt	r3, #8193	; 0x2001
24010f7a:	6819      	ldr	r1, [r3, #0]
	if (cfs) {
24010f7c:	b159      	cbz	r1, 24010f96 <f_mount+0x66>
		if (Files[i].fs == fs) Files[i].fs = 0;
24010f7e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
24010f82:	f2c2 0001 	movt	r0, #8193	; 0x2001
24010f86:	6804      	ldr	r4, [r0, #0]
24010f88:	42a1      	cmp	r1, r4
24010f8a:	d019      	beq.n	24010fc0 <f_mount+0x90>
24010f8c:	6904      	ldr	r4, [r0, #16]
24010f8e:	428c      	cmp	r4, r1
24010f90:	d013      	beq.n	24010fba <f_mount+0x8a>
		cfs->fs_type = 0;				/* Clear old fs object */
24010f92:	2000      	movs	r0, #0
24010f94:	7008      	strb	r0, [r1, #0]
	if (fs) {
24010f96:	9901      	ldr	r1, [sp, #4]
24010f98:	b159      	cbz	r1, 24010fb2 <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
24010f9a:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24010f9c:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
24010f9e:	6019      	str	r1, [r3, #0]
		fs->fs_type = 0;				/* Clear new fs object */
24010fa0:	7008      	strb	r0, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24010fa2:	d1e0      	bne.n	24010f66 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
24010fa4:	4602      	mov	r2, r0
24010fa6:	a901      	add	r1, sp, #4
24010fa8:	4668      	mov	r0, sp
24010faa:	f7fd ff4f 	bl	2400ee4c <find_volume>
}
24010fae:	b002      	add	sp, #8
24010fb0:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24010fb2:	4608      	mov	r0, r1
	FatFs[vol] = fs;					/* Register new fs object */
24010fb4:	6019      	str	r1, [r3, #0]
}
24010fb6:	b002      	add	sp, #8
24010fb8:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
24010fba:	2400      	movs	r4, #0
24010fbc:	6104      	str	r4, [r0, #16]
24010fbe:	e7e8      	b.n	24010f92 <f_mount+0x62>
24010fc0:	2400      	movs	r4, #0
24010fc2:	6004      	str	r4, [r0, #0]
24010fc4:	6904      	ldr	r4, [r0, #16]
24010fc6:	428c      	cmp	r4, r1
24010fc8:	d1e3      	bne.n	24010f92 <f_mount+0x62>
24010fca:	e7f6      	b.n	24010fba <f_mount+0x8a>

24010fcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
24010fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24010fd0:	b092      	sub	sp, #72	; 0x48
24010fd2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
24010fd4:	2800      	cmp	r0, #0
24010fd6:	f000 809d 	beq.w	24011114 <f_open+0x148>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
24010fda:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
24010fde:	4616      	mov	r6, r2
24010fe0:	4604      	mov	r4, r0
24010fe2:	a903      	add	r1, sp, #12
24010fe4:	a801      	add	r0, sp, #4
24010fe6:	463a      	mov	r2, r7
24010fe8:	f7fd ff30 	bl	2400ee4c <find_volume>
	if (res == FR_OK) {
24010fec:	4605      	mov	r5, r0
24010fee:	b128      	cbz	r0, 24010ffc <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
24010ff0:	2300      	movs	r3, #0
24010ff2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
24010ff4:	4628      	mov	r0, r5
24010ff6:	b012      	add	sp, #72	; 0x48
24010ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
24010ffc:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
24011000:	a804      	add	r0, sp, #16
24011002:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
24011004:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
24011008:	f7fe ff7a 	bl	2400ff00 <follow_path>
		if (res == FR_OK) {
2401100c:	bb10      	cbnz	r0, 24011054 <f_open+0x88>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2401100e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
24011012:	2b00      	cmp	r3, #0
24011014:	f2c0 8085 	blt.w	24011122 <f_open+0x156>
		if (Files[i].fs) {	/* Existing entry */
24011018:	f64d 63a0 	movw	r3, #56992	; 0xdea0
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401101c:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011020:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
24011022:	f2c2 0301 	movt	r3, #8193	; 0x2001
				Files[i].clu == dp->obj.sclust &&
24011026:	f8dd c018 	ldr.w	ip, [sp, #24]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401102a:	4601      	mov	r1, r0
				Files[i].ofs == dp->dptr) break;
2401102c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
24011030:	f8d3 9000 	ldr.w	r9, [r3]
24011034:	f1b9 0f00 	cmp.w	r9, #0
24011038:	f000 80db 	beq.w	240111f2 <f_open+0x226>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401103c:	4591      	cmp	r9, r2
2401103e:	d072      	beq.n	24011126 <f_open+0x15a>
		if (Files[i].fs) {	/* Existing entry */
24011040:	f8d3 9010 	ldr.w	r9, [r3, #16]
24011044:	f1b9 0f00 	cmp.w	r9, #0
24011048:	d074      	beq.n	24011134 <f_open+0x168>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401104a:	454a      	cmp	r2, r9
2401104c:	f000 80ea 	beq.w	24011224 <f_open+0x258>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
24011050:	2512      	movs	r5, #18
24011052:	e7cd      	b.n	24010ff0 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
24011054:	f016 0f1c 	tst.w	r6, #28
24011058:	d061      	beq.n	2401111e <f_open+0x152>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2401105a:	2804      	cmp	r0, #4
2401105c:	d15f      	bne.n	2401111e <f_open+0x152>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2401105e:	f64d 63a0 	movw	r3, #56992	; 0xdea0
24011062:	f2c2 0301 	movt	r3, #8193	; 0x2001
24011066:	681a      	ldr	r2, [r3, #0]
24011068:	b112      	cbz	r2, 24011070 <f_open+0xa4>
2401106a:	691b      	ldr	r3, [r3, #16]
2401106c:	2b00      	cmp	r3, #0
2401106e:	d1ef      	bne.n	24011050 <f_open+0x84>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
24011070:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
24011072:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
24011076:	f7ff f9b5 	bl	240103e4 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2401107a:	2800      	cmp	r0, #0
2401107c:	d14f      	bne.n	2401111e <f_open+0x152>
				dw = GET_FATTIME();
2401107e:	f7fd fbe5 	bl	2400e84c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
24011082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
24011084:	0a02      	lsrs	r2, r0, #8
24011086:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2401108a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2401108c:	75da      	strb	r2, [r3, #23]
2401108e:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
24011090:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
24011092:	0e00      	lsrs	r0, r0, #24
24011094:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
24011096:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
24011098:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2401109a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2401109c:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2401109e:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
240110a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
240110a4:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
240110a6:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240110a8:	d102      	bne.n	240110b0 <f_open+0xe4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240110aa:	8a9a      	ldrh	r2, [r3, #20]
240110ac:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
240110b0:	2200      	movs	r2, #0
240110b2:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240110b4:	f898 1000 	ldrb.w	r1, [r8]
240110b8:	2903      	cmp	r1, #3
240110ba:	d100      	bne.n	240110be <f_open+0xf2>
	*ptr++ = (BYTE)val; val >>= 8;
240110bc:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
240110be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
240110c0:	2200      	movs	r2, #0
240110c2:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
240110c4:	2301      	movs	r3, #1
240110c6:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
240110ca:	b186      	cbz	r6, 240110ee <f_open+0x122>
						dw = fs->winsect;
240110cc:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
240110d0:	4631      	mov	r1, r6
240110d2:	a804      	add	r0, sp, #16
						dw = fs->winsect;
240110d4:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
240110d6:	f7ff fe29 	bl	24010d2c <remove_chain>
						if (res == FR_OK) {
240110da:	9b00      	ldr	r3, [sp, #0]
240110dc:	b9f8      	cbnz	r0, 2401111e <f_open+0x152>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
240110de:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
240110e0:	4619      	mov	r1, r3
240110e2:	4640      	mov	r0, r8
240110e4:	f7fd fe74 	bl	2400edd0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
240110e8:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
240110ec:	b9b8      	cbnz	r0, 2401111e <f_open+0x152>
				mode |= FA_MODIFIED;
240110ee:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
240110f2:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
240110f6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
240110fa:	3900      	subs	r1, #0
240110fc:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
240110fe:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24011100:	bf18      	it	ne
24011102:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
24011104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24011106:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24011108:	f7fd fcce 	bl	2400eaa8 <inc_lock>
2401110c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2401110e:	b9e8      	cbnz	r0, 2401114c <f_open+0x180>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24011110:	2502      	movs	r5, #2
24011112:	e76d      	b.n	24010ff0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
24011114:	2509      	movs	r5, #9
}
24011116:	4628      	mov	r0, r5
24011118:	b012      	add	sp, #72	; 0x48
2401111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2401111e:	4605      	mov	r5, r0
24011120:	e766      	b.n	24010ff0 <f_open+0x24>
				res = FR_INVALID_NAME;
24011122:	2506      	movs	r5, #6
24011124:	e764      	b.n	24010ff0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011126:	685a      	ldr	r2, [r3, #4]
24011128:	4562      	cmp	r2, ip
2401112a:	f000 8084 	beq.w	24011236 <f_open+0x26a>
		if (Files[i].fs) {	/* Existing entry */
2401112e:	691a      	ldr	r2, [r3, #16]
24011130:	2a00      	cmp	r2, #0
24011132:	d18a      	bne.n	2401104a <f_open+0x7e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
24011134:	f016 0f1c 	tst.w	r6, #28
24011138:	d048      	beq.n	240111cc <f_open+0x200>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2401113a:	f89d 3016 	ldrb.w	r3, [sp, #22]
2401113e:	f013 0f11 	tst.w	r3, #17
24011142:	d154      	bne.n	240111ee <f_open+0x222>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
24011144:	0773      	lsls	r3, r6, #29
24011146:	d54f      	bpl.n	240111e8 <f_open+0x21c>
24011148:	2508      	movs	r5, #8
2401114a:	e751      	b.n	24010ff0 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
2401114c:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
24011150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24011152:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
24011154:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
24011156:	d102      	bne.n	2401115e <f_open+0x192>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24011158:	8a9a      	ldrh	r2, [r3, #20]
2401115a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2401115e:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
24011160:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
24011162:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
24011166:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2401116a:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
2401116e:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
24011172:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
24011176:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
24011178:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
2401117c:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
2401117e:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
24011180:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
24011182:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
24011184:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
24011186:	f00b fa73 	bl	2401c670 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2401118a:	06bf      	lsls	r7, r7, #26
2401118c:	f57f af32 	bpl.w	24010ff4 <f_open+0x28>
24011190:	f1b9 0f00 	cmp.w	r9, #0
24011194:	f43f af2e 	beq.w	24010ff4 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
24011198:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2401119c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240111a0:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
240111a4:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240111a8:	d804      	bhi.n	240111b4 <f_open+0x1e8>
240111aa:	e04a      	b.n	24011242 <f_open+0x276>
240111ac:	1c70      	adds	r0, r6, #1
240111ae:	d06c      	beq.n	2401128a <f_open+0x2be>
240111b0:	454f      	cmp	r7, r9
240111b2:	d26a      	bcs.n	2401128a <f_open+0x2be>
					clst = get_fat(&fp->obj, clst);
240111b4:	4631      	mov	r1, r6
240111b6:	6820      	ldr	r0, [r4, #0]
240111b8:	f7fe f846 	bl	2400f248 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
240111bc:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240111be:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
240111c2:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
240111c4:	d8f2      	bhi.n	240111ac <f_open+0x1e0>
240111c6:	2502      	movs	r5, #2
				fp->clust = clst;
240111c8:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
240111ca:	e711      	b.n	24010ff0 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
240111cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
240111d0:	06da      	lsls	r2, r3, #27
240111d2:	d425      	bmi.n	24011220 <f_open+0x254>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
240111d4:	07b2      	lsls	r2, r6, #30
240111d6:	d501      	bpl.n	240111dc <f_open+0x210>
240111d8:	07db      	lsls	r3, r3, #31
240111da:	d408      	bmi.n	240111ee <f_open+0x222>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
240111dc:	f006 0608 	and.w	r6, r6, #8
240111e0:	2e00      	cmp	r6, #0
240111e2:	d184      	bne.n	240110ee <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
240111e4:	4601      	mov	r1, r0
240111e6:	e786      	b.n	240110f6 <f_open+0x12a>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
240111e8:	0730      	lsls	r0, r6, #28
240111ea:	d584      	bpl.n	240110f6 <f_open+0x12a>
240111ec:	e747      	b.n	2401107e <f_open+0xb2>
						res = FR_DENIED;
240111ee:	2507      	movs	r5, #7
240111f0:	e6fe      	b.n	24010ff0 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
240111f2:	f8d3 9010 	ldr.w	r9, [r3, #16]
240111f6:	f1b9 0f00 	cmp.w	r9, #0
240111fa:	d09b      	beq.n	24011134 <f_open+0x168>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240111fc:	4591      	cmp	r9, r2
240111fe:	d199      	bne.n	24011134 <f_open+0x168>
24011200:	695a      	ldr	r2, [r3, #20]
24011202:	4562      	cmp	r2, ip
24011204:	d196      	bne.n	24011134 <f_open+0x168>
				Files[i].clu == dp->obj.sclust &&
24011206:	699a      	ldr	r2, [r3, #24]
24011208:	4572      	cmp	r2, lr
2401120a:	d193      	bne.n	24011134 <f_open+0x168>
	for (i = be = 0; i < _FS_LOCK; i++) {
2401120c:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2401120e:	b928      	cbnz	r0, 2401121c <f_open+0x250>
24011210:	eb03 1302 	add.w	r3, r3, r2, lsl #4
24011214:	899b      	ldrh	r3, [r3, #12]
24011216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401121a:	d18b      	bne.n	24011134 <f_open+0x168>
2401121c:	2510      	movs	r5, #16
2401121e:	e6e7      	b.n	24010ff0 <f_open+0x24>
					res = FR_NO_FILE;
24011220:	2504      	movs	r5, #4
24011222:	e6e5      	b.n	24010ff0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011224:	695a      	ldr	r2, [r3, #20]
24011226:	4562      	cmp	r2, ip
24011228:	f47f af12 	bne.w	24011050 <f_open+0x84>
				Files[i].clu == dp->obj.sclust &&
2401122c:	699a      	ldr	r2, [r3, #24]
2401122e:	4572      	cmp	r2, lr
24011230:	f47f af0e 	bne.w	24011050 <f_open+0x84>
24011234:	e7ea      	b.n	2401120c <f_open+0x240>
24011236:	689a      	ldr	r2, [r3, #8]
24011238:	4572      	cmp	r2, lr
2401123a:	f47f af78 	bne.w	2401112e <f_open+0x162>
	for (i = be = 0; i < _FS_LOCK; i++) {
2401123e:	462a      	mov	r2, r5
24011240:	e7e5      	b.n	2401120e <f_open+0x242>
				fp->clust = clst;
24011242:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
24011244:	f3c9 0308 	ubfx	r3, r9, #0, #9
24011248:	2b00      	cmp	r3, #0
2401124a:	f43f aed3 	beq.w	24010ff4 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401124e:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
24011252:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011254:	3b02      	subs	r3, #2
24011256:	429e      	cmp	r6, r3
24011258:	f4bf af5a 	bcs.w	24011110 <f_open+0x144>
	return clst * fs->csize + fs->database;
2401125c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
24011260:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
24011264:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
24011268:	2a00      	cmp	r2, #0
2401126a:	f43f af51 	beq.w	24011110 <f_open+0x144>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2401126e:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24011272:	4651      	mov	r1, sl
24011274:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
24011276:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24011278:	f898 0001 	ldrb.w	r0, [r8, #1]
2401127c:	f7fd fbe6 	bl	2400ea4c <disk_read>
24011280:	2800      	cmp	r0, #0
24011282:	f43f aeb7 	beq.w	24010ff4 <f_open+0x28>
24011286:	2501      	movs	r5, #1
24011288:	e6b2      	b.n	24010ff0 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2401128a:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
2401128c:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
2401128e:	bf0c      	ite	eq
24011290:	2301      	moveq	r3, #1
24011292:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
24011294:	d1d6      	bne.n	24011244 <f_open+0x278>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
24011296:	461d      	mov	r5, r3
24011298:	e6aa      	b.n	24010ff0 <f_open+0x24>
2401129a:	bf00      	nop

2401129c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2401129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240112a0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
240112a2:	2300      	movs	r3, #0
{
240112a4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
240112a6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240112a8:	b150      	cbz	r0, 240112c0 <f_read+0x24>
240112aa:	6803      	ldr	r3, [r0, #0]
240112ac:	4604      	mov	r4, r0
240112ae:	b13b      	cbz	r3, 240112c0 <f_read+0x24>
240112b0:	4691      	mov	r9, r2
240112b2:	781a      	ldrb	r2, [r3, #0]
240112b4:	b122      	cbz	r2, 240112c0 <f_read+0x24>
240112b6:	460d      	mov	r5, r1
240112b8:	88da      	ldrh	r2, [r3, #6]
240112ba:	8881      	ldrh	r1, [r0, #4]
240112bc:	4291      	cmp	r1, r2
240112be:	d005      	beq.n	240112cc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
240112c0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
240112c4:	4640      	mov	r0, r8
240112c6:	b005      	add	sp, #20
240112c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240112cc:	7858      	ldrb	r0, [r3, #1]
240112ce:	f7fd fb9d 	bl	2400ea0c <disk_status>
240112d2:	07c2      	lsls	r2, r0, #31
240112d4:	d4f4      	bmi.n	240112c0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
240112d6:	f894 8015 	ldrb.w	r8, [r4, #21]
240112da:	f1b8 0f00 	cmp.w	r8, #0
240112de:	d1f1      	bne.n	240112c4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
240112e0:	7d23      	ldrb	r3, [r4, #20]
240112e2:	f013 0301 	ands.w	r3, r3, #1
240112e6:	9300      	str	r3, [sp, #0]
240112e8:	f000 80cb 	beq.w	24011482 <f_read+0x1e6>
	remain = fp->obj.objsize - fp->fptr;
240112ec:	69a3      	ldr	r3, [r4, #24]
240112ee:	68e7      	ldr	r7, [r4, #12]
240112f0:	1aff      	subs	r7, r7, r3
240112f2:	454f      	cmp	r7, r9
240112f4:	bf28      	it	cs
240112f6:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240112f8:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
240112fc:	2f00      	cmp	r7, #0
240112fe:	d0e1      	beq.n	240112c4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
24011300:	f104 022d 	add.w	r2, r4, #45	; 0x2d
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
24011304:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
24011308:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2401130c:	f3c3 0208 	ubfx	r2, r3, #0, #9
24011310:	2a00      	cmp	r2, #0
24011312:	d140      	bne.n	24011396 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
24011314:	f8b9 200a 	ldrh.w	r2, [r9, #10]
24011318:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2401131a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2401131e:	d06e      	beq.n	240113fe <f_read+0x162>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
24011320:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011322:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
24011326:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011328:	3b02      	subs	r3, #2
2401132a:	4298      	cmp	r0, r3
2401132c:	d274      	bcs.n	24011418 <f_read+0x17c>
	return clst * fs->csize + fs->database;
2401132e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
24011332:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
24011336:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2401133a:	2b00      	cmp	r3, #0
2401133c:	d06c      	beq.n	24011418 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
2401133e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
24011342:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
24011346:	d36e      	bcc.n	24011426 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24011348:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2401134c:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24011350:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24011352:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
24011356:	bf88      	it	hi
24011358:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401135c:	465a      	mov	r2, fp
2401135e:	4629      	mov	r1, r5
24011360:	4643      	mov	r3, r8
24011362:	f7fd fb73 	bl	2400ea4c <disk_read>
24011366:	2800      	cmp	r0, #0
24011368:	d172      	bne.n	24011450 <f_read+0x1b4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2401136a:	f994 2014 	ldrsb.w	r2, [r4, #20]
2401136e:	2a00      	cmp	r2, #0
24011370:	f2c0 8097 	blt.w	240114a2 <f_read+0x206>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
24011374:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
24011378:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2401137a:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2401137c:	440d      	add	r5, r1
2401137e:	440b      	add	r3, r1
24011380:	61a3      	str	r3, [r4, #24]
24011382:	6833      	ldr	r3, [r6, #0]
24011384:	440b      	add	r3, r1
24011386:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
24011388:	f000 80a1 	beq.w	240114ce <f_read+0x232>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2401138c:	69a3      	ldr	r3, [r4, #24]
2401138e:	f3c3 0208 	ubfx	r2, r3, #0, #9
24011392:	2a00      	cmp	r2, #0
24011394:	d0be      	beq.n	24011314 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
24011396:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24011398:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2401139c:	eb0a 0302 	add.w	r3, sl, r2
240113a0:	4450      	add	r0, sl
240113a2:	42b9      	cmp	r1, r7
240113a4:	eba5 0000 	sub.w	r0, r5, r0
240113a8:	bf28      	it	cs
240113aa:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
240113ac:	2802      	cmp	r0, #2
240113ae:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
240113b2:	d95c      	bls.n	2401146e <f_read+0x1d2>
240113b4:	f1bb 0f05 	cmp.w	fp, #5
240113b8:	d959      	bls.n	2401146e <f_read+0x1d2>
240113ba:	f021 0e03 	bic.w	lr, r1, #3
240113be:	461a      	mov	r2, r3
240113c0:	4628      	mov	r0, r5
240113c2:	449e      	add	lr, r3
			*d++ = *s++;
240113c4:	f852 cb04 	ldr.w	ip, [r2], #4
240113c8:	4572      	cmp	r2, lr
240113ca:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
240113ce:	d1f9      	bne.n	240113c4 <f_read+0x128>
240113d0:	f021 0203 	bic.w	r2, r1, #3
240113d4:	4291      	cmp	r1, r2
240113d6:	eb05 0002 	add.w	r0, r5, r2
240113da:	eb03 0c02 	add.w	ip, r3, r2
240113de:	d0cb      	beq.n	24011378 <f_read+0xdc>
			*d++ = *s++;
240113e0:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
240113e2:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
240113e6:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
240113e8:	d0c6      	beq.n	24011378 <f_read+0xdc>
			*d++ = *s++;
240113ea:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
240113ee:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
240113f2:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
240113f4:	d0c0      	beq.n	24011378 <f_read+0xdc>
			*d++ = *s++;
240113f6:	f89c 3002 	ldrb.w	r3, [ip, #2]
240113fa:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
240113fc:	e7bc      	b.n	24011378 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
240113fe:	bb7b      	cbnz	r3, 24011460 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
24011400:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
24011402:	2801      	cmp	r0, #1
24011404:	d908      	bls.n	24011418 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24011406:	1c43      	adds	r3, r0, #1
24011408:	d022      	beq.n	24011450 <f_read+0x1b4>
				fp->clust = clst;				/* Update current cluster */
2401140a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2401140c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401140e:	f8d9 3018 	ldr.w	r3, [r9, #24]
24011412:	3b02      	subs	r3, #2
24011414:	4298      	cmp	r0, r3
24011416:	d38a      	bcc.n	2401132e <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
24011418:	2302      	movs	r3, #2
2401141a:	4698      	mov	r8, r3
2401141c:	7563      	strb	r3, [r4, #21]
}
2401141e:	4640      	mov	r0, r8
24011420:	b005      	add	sp, #20
24011422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
24011426:	6a22      	ldr	r2, [r4, #32]
24011428:	455a      	cmp	r2, fp
2401142a:	d00b      	beq.n	24011444 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2401142c:	f994 3014 	ldrsb.w	r3, [r4, #20]
24011430:	2b00      	cmp	r3, #0
24011432:	db29      	blt.n	24011488 <f_read+0x1ec>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
24011434:	2301      	movs	r3, #1
24011436:	465a      	mov	r2, fp
24011438:	4651      	mov	r1, sl
2401143a:	f899 0001 	ldrb.w	r0, [r9, #1]
2401143e:	f7fd fb05 	bl	2400ea4c <disk_read>
24011442:	b928      	cbnz	r0, 24011450 <f_read+0x1b4>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24011444:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
24011446:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2401144a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401144e:	e7a2      	b.n	24011396 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24011450:	f8dd 8000 	ldr.w	r8, [sp]
24011454:	2301      	movs	r3, #1
}
24011456:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24011458:	7563      	strb	r3, [r4, #21]
}
2401145a:	b005      	add	sp, #20
2401145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
24011460:	69e1      	ldr	r1, [r4, #28]
24011462:	6820      	ldr	r0, [r4, #0]
24011464:	9203      	str	r2, [sp, #12]
24011466:	f7fd feef 	bl	2400f248 <get_fat.isra.0>
2401146a:	9a03      	ldr	r2, [sp, #12]
2401146c:	e7c9      	b.n	24011402 <f_read+0x166>
2401146e:	1e6a      	subs	r2, r5, #1
24011470:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
24011474:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
24011478:	4563      	cmp	r3, ip
			*d++ = *s++;
2401147a:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2401147e:	d1f9      	bne.n	24011474 <f_read+0x1d8>
24011480:	e77a      	b.n	24011378 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
24011482:	f04f 0807 	mov.w	r8, #7
24011486:	e71d      	b.n	240112c4 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
24011488:	2301      	movs	r3, #1
2401148a:	4651      	mov	r1, sl
2401148c:	f899 0001 	ldrb.w	r0, [r9, #1]
24011490:	f7fd faec 	bl	2400ea6c <disk_write>
24011494:	2800      	cmp	r0, #0
24011496:	d1db      	bne.n	24011450 <f_read+0x1b4>
					fp->flag &= (BYTE)~FA_DIRTY;
24011498:	7d23      	ldrb	r3, [r4, #20]
2401149a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401149e:	7523      	strb	r3, [r4, #20]
240114a0:	e7c8      	b.n	24011434 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
240114a2:	6a22      	ldr	r2, [r4, #32]
240114a4:	eba2 020b 	sub.w	r2, r2, fp
240114a8:	4542      	cmp	r2, r8
240114aa:	f4bf af63 	bcs.w	24011374 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
240114ae:	eb05 2242 	add.w	r2, r5, r2, lsl #9
240114b2:	9b01      	ldr	r3, [sp, #4]
240114b4:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
240114b6:	1ad0      	subs	r0, r2, r3
240114b8:	2802      	cmp	r0, #2
240114ba:	d90b      	bls.n	240114d4 <f_read+0x238>
240114bc:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
240114c0:	f851 3b04 	ldr.w	r3, [r1], #4
240114c4:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
240114c8:	4562      	cmp	r2, ip
240114ca:	d1f9      	bne.n	240114c0 <f_read+0x224>
240114cc:	e752      	b.n	24011374 <f_read+0xd8>
240114ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
240114d2:	e6f7      	b.n	240112c4 <f_read+0x28>
240114d4:	3a01      	subs	r2, #1
240114d6:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
240114da:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
240114de:	458c      	cmp	ip, r1
			*d++ = *s++;
240114e0:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
240114e4:	d1f9      	bne.n	240114da <f_read+0x23e>
240114e6:	e745      	b.n	24011374 <f_read+0xd8>

240114e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
240114e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240114ec:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
240114ee:	2300      	movs	r3, #0
{
240114f0:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
240114f2:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240114f4:	b150      	cbz	r0, 2401150c <f_write+0x24>
240114f6:	6803      	ldr	r3, [r0, #0]
240114f8:	4604      	mov	r4, r0
240114fa:	b13b      	cbz	r3, 2401150c <f_write+0x24>
240114fc:	4616      	mov	r6, r2
240114fe:	781a      	ldrb	r2, [r3, #0]
24011500:	b122      	cbz	r2, 2401150c <f_write+0x24>
24011502:	460d      	mov	r5, r1
24011504:	88da      	ldrh	r2, [r3, #6]
24011506:	8881      	ldrh	r1, [r0, #4]
24011508:	4291      	cmp	r1, r2
2401150a:	d005      	beq.n	24011518 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2401150c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
24011510:	4640      	mov	r0, r8
24011512:	b005      	add	sp, #20
24011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24011518:	7858      	ldrb	r0, [r3, #1]
2401151a:	f7fd fa77 	bl	2400ea0c <disk_status>
2401151e:	07c0      	lsls	r0, r0, #31
24011520:	d4f4      	bmi.n	2401150c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
24011522:	f894 8015 	ldrb.w	r8, [r4, #21]
24011526:	f1b8 0f00 	cmp.w	r8, #0
2401152a:	d1f1      	bne.n	24011510 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2401152c:	7d22      	ldrb	r2, [r4, #20]
2401152e:	0791      	lsls	r1, r2, #30
24011530:	f140 80e6 	bpl.w	24011700 <f_write+0x218>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
24011534:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24011536:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2401153a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2401153c:	bf28      	it	cs
2401153e:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
24011540:	2e00      	cmp	r6, #0
24011542:	f000 80cf 	beq.w	240116e4 <f_write+0x1fc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24011546:	f504 720b 	add.w	r2, r4, #556	; 0x22c
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401154a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2401154e:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24011550:	f3c3 0208 	ubfx	r2, r3, #0, #9
24011554:	2a00      	cmp	r2, #0
24011556:	d15e      	bne.n	24011616 <f_write+0x12e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
24011558:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2401155c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
24011560:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
24011564:	d110      	bne.n	24011588 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
24011566:	2b00      	cmp	r3, #0
24011568:	f040 80b4 	bne.w	240116d4 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
2401156c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2401156e:	2800      	cmp	r0, #0
24011570:	f000 80c9 	beq.w	24011706 <f_write+0x21e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
24011574:	2801      	cmp	r0, #1
24011576:	f000 8087 	beq.w	24011688 <f_write+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2401157a:	1c43      	adds	r3, r0, #1
2401157c:	f000 80a3 	beq.w	240116c6 <f_write+0x1de>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24011580:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
24011582:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24011584:	b903      	cbnz	r3, 24011588 <f_write+0xa0>
24011586:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
24011588:	f994 3014 	ldrsb.w	r3, [r4, #20]
2401158c:	2b00      	cmp	r3, #0
2401158e:	f2c0 808d 	blt.w	240116ac <f_write+0x1c4>
	clst -= 2;
24011592:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011594:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
24011598:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401159a:	3a02      	subs	r2, #2
2401159c:	4293      	cmp	r3, r2
2401159e:	d273      	bcs.n	24011688 <f_write+0x1a0>
	return clst * fs->csize + fs->database;
240115a0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
240115a4:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
240115a8:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
240115ac:	2a00      	cmp	r2, #0
240115ae:	d06b      	beq.n	24011688 <f_write+0x1a0>
			if (cc) {						/* Write maximum contiguous sectors directly */
240115b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
240115b4:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
240115b6:	d36e      	bcc.n	24011696 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240115b8:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
240115bc:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240115be:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240115c0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
240115c4:	bf88      	it	hi
240115c6:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240115ca:	4629      	mov	r1, r5
240115cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
240115d0:	f7fd fa4c 	bl	2400ea6c <disk_write>
240115d4:	2800      	cmp	r0, #0
240115d6:	d176      	bne.n	240116c6 <f_write+0x1de>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
240115d8:	6a21      	ldr	r1, [r4, #32]
240115da:	9a02      	ldr	r2, [sp, #8]
240115dc:	9b03      	ldr	r3, [sp, #12]
240115de:	1a8a      	subs	r2, r1, r2
240115e0:	429a      	cmp	r2, r3
240115e2:	f0c0 80a4 	bcc.w	2401172e <f_write+0x246>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
240115e6:	eb05 2243 	add.w	r2, r5, r3, lsl #9
240115ea:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
240115ee:	69a3      	ldr	r3, [r4, #24]
240115f0:	4615      	mov	r5, r2
240115f2:	68e2      	ldr	r2, [r4, #12]
240115f4:	4463      	add	r3, ip
240115f6:	429a      	cmp	r2, r3
240115f8:	61a3      	str	r3, [r4, #24]
240115fa:	bf38      	it	cc
240115fc:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
240115fe:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
24011602:	60e2      	str	r2, [r4, #12]
24011604:	683b      	ldr	r3, [r7, #0]
24011606:	4463      	add	r3, ip
24011608:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2401160a:	d06a      	beq.n	240116e2 <f_write+0x1fa>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2401160c:	69a3      	ldr	r3, [r4, #24]
2401160e:	f3c3 0208 	ubfx	r2, r3, #0, #9
24011612:	2a00      	cmp	r2, #0
24011614:	d0a0      	beq.n	24011558 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24011616:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2401161a:	eb0a 0302 	add.w	r3, sl, r2
2401161e:	1c6a      	adds	r2, r5, #1
24011620:	45b4      	cmp	ip, r6
24011622:	eba3 0202 	sub.w	r2, r3, r2
24011626:	bf28      	it	cs
24011628:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2401162a:	2a02      	cmp	r2, #2
2401162c:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
24011630:	d95c      	bls.n	240116ec <f_write+0x204>
24011632:	f1bb 0f05 	cmp.w	fp, #5
24011636:	d959      	bls.n	240116ec <f_write+0x204>
24011638:	f02c 0e03 	bic.w	lr, ip, #3
2401163c:	461a      	mov	r2, r3
2401163e:	4629      	mov	r1, r5
24011640:	449e      	add	lr, r3
			*d++ = *s++;
24011642:	f851 0b04 	ldr.w	r0, [r1], #4
24011646:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2401164a:	4596      	cmp	lr, r2
2401164c:	d1f9      	bne.n	24011642 <f_write+0x15a>
2401164e:	f02c 0103 	bic.w	r1, ip, #3
24011652:	458c      	cmp	ip, r1
24011654:	eb03 0001 	add.w	r0, r3, r1
24011658:	eb05 0201 	add.w	r2, r5, r1
2401165c:	d00f      	beq.n	2401167e <f_write+0x196>
			*d++ = *s++;
2401165e:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
24011662:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
24011666:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2401166a:	d006      	beq.n	2401167a <f_write+0x192>
			*d++ = *s++;
2401166c:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2401166e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
24011672:	7043      	strb	r3, [r0, #1]
24011674:	bf1c      	itt	ne
24011676:	7893      	ldrbne	r3, [r2, #2]
24011678:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2401167a:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2401167e:	7d23      	ldrb	r3, [r4, #20]
24011680:	f063 037f 	orn	r3, r3, #127	; 0x7f
24011684:	7523      	strb	r3, [r4, #20]
24011686:	e7b2      	b.n	240115ee <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
24011688:	2302      	movs	r3, #2
2401168a:	4698      	mov	r8, r3
2401168c:	7563      	strb	r3, [r4, #21]
}
2401168e:	4640      	mov	r0, r8
24011690:	b005      	add	sp, #20
24011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
24011696:	6a23      	ldr	r3, [r4, #32]
24011698:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2401169a:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2401169c:	d002      	beq.n	240116a4 <f_write+0x1bc>
2401169e:	68e1      	ldr	r1, [r4, #12]
240116a0:	428b      	cmp	r3, r1
240116a2:	d338      	bcc.n	24011716 <f_write+0x22e>
			fp->sect = sect;
240116a4:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240116a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
240116aa:	e7b4      	b.n	24011616 <f_write+0x12e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
240116ac:	2301      	movs	r3, #1
240116ae:	6a22      	ldr	r2, [r4, #32]
240116b0:	4651      	mov	r1, sl
240116b2:	f899 0001 	ldrb.w	r0, [r9, #1]
240116b6:	f7fd f9d9 	bl	2400ea6c <disk_write>
240116ba:	b920      	cbnz	r0, 240116c6 <f_write+0x1de>
				fp->flag &= (BYTE)~FA_DIRTY;
240116bc:	7d23      	ldrb	r3, [r4, #20]
240116be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240116c2:	7523      	strb	r3, [r4, #20]
240116c4:	e765      	b.n	24011592 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240116c6:	2301      	movs	r3, #1
240116c8:	4698      	mov	r8, r3
240116ca:	7563      	strb	r3, [r4, #21]
}
240116cc:	4640      	mov	r0, r8
240116ce:	b005      	add	sp, #20
240116d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
240116d4:	69e1      	ldr	r1, [r4, #28]
240116d6:	4620      	mov	r0, r4
240116d8:	f7fe f85e 	bl	2400f798 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
240116dc:	2800      	cmp	r0, #0
240116de:	f47f af49 	bne.w	24011574 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
240116e2:	7d22      	ldrb	r2, [r4, #20]
240116e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240116e8:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
240116ea:	e711      	b.n	24011510 <f_write+0x28>
240116ec:	3b01      	subs	r3, #1
240116ee:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
240116f2:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
240116f6:	4295      	cmp	r5, r2
			*d++ = *s++;
240116f8:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
240116fc:	d1f9      	bne.n	240116f2 <f_write+0x20a>
240116fe:	e7be      	b.n	2401167e <f_write+0x196>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
24011700:	f04f 0807 	mov.w	r8, #7
24011704:	e704      	b.n	24011510 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
24011706:	4659      	mov	r1, fp
24011708:	4620      	mov	r0, r4
2401170a:	f7fe f845 	bl	2400f798 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401170e:	2800      	cmp	r0, #0
24011710:	f47f af30 	bne.w	24011574 <f_write+0x8c>
24011714:	e7e5      	b.n	240116e2 <f_write+0x1fa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
24011716:	2301      	movs	r3, #1
24011718:	4651      	mov	r1, sl
2401171a:	f899 0001 	ldrb.w	r0, [r9, #1]
2401171e:	9202      	str	r2, [sp, #8]
24011720:	f7fd f994 	bl	2400ea4c <disk_read>
				fp->fptr < fp->obj.objsize &&
24011724:	2800      	cmp	r0, #0
24011726:	d1ce      	bne.n	240116c6 <f_write+0x1de>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24011728:	69a3      	ldr	r3, [r4, #24]
2401172a:	9a02      	ldr	r2, [sp, #8]
2401172c:	e7ba      	b.n	240116a4 <f_write+0x1bc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2401172e:	eb05 2042 	add.w	r0, r5, r2, lsl #9
24011732:	1c42      	adds	r2, r0, #1
24011734:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
24011736:	ebaa 0202 	sub.w	r2, sl, r2
2401173a:	2a02      	cmp	r2, #2
2401173c:	d90d      	bls.n	2401175a <f_write+0x272>
2401173e:	4652      	mov	r2, sl
24011740:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
24011744:	f851 0b04 	ldr.w	r0, [r1], #4
24011748:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2401174c:	4562      	cmp	r2, ip
2401174e:	d1f9      	bne.n	24011744 <f_write+0x25c>
					fp->flag &= (BYTE)~FA_DIRTY;
24011750:	7d22      	ldrb	r2, [r4, #20]
24011752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
24011756:	7522      	strb	r2, [r4, #20]
24011758:	e745      	b.n	240115e6 <f_write+0xfe>
2401175a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2401175e:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
24011762:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
24011766:	458c      	cmp	ip, r1
			*d++ = *s++;
24011768:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2401176c:	d1f9      	bne.n	24011762 <f_write+0x27a>
2401176e:	e7ef      	b.n	24011750 <f_write+0x268>

24011770 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24011770:	b158      	cbz	r0, 2401178a <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
24011772:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24011774:	6803      	ldr	r3, [r0, #0]
24011776:	4604      	mov	r4, r0
24011778:	b12b      	cbz	r3, 24011786 <f_close+0x16>
2401177a:	781a      	ldrb	r2, [r3, #0]
2401177c:	b11a      	cbz	r2, 24011786 <f_close+0x16>
2401177e:	8881      	ldrh	r1, [r0, #4]
24011780:	88da      	ldrh	r2, [r3, #6]
24011782:	4291      	cmp	r1, r2
24011784:	d003      	beq.n	2401178e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
24011786:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
24011788:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2401178a:	2009      	movs	r0, #9
}
2401178c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2401178e:	7858      	ldrb	r0, [r3, #1]
24011790:	f7fd f93c 	bl	2400ea0c <disk_status>
24011794:	07c1      	lsls	r1, r0, #31
24011796:	d4f6      	bmi.n	24011786 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
24011798:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2401179a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2401179c:	065a      	lsls	r2, r3, #25
2401179e:	d52e      	bpl.n	240117fe <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
240117a0:	061b      	lsls	r3, r3, #24
240117a2:	d454      	bmi.n	2401184e <f_close+0xde>
			tm = GET_FATTIME();				/* Modified time */
240117a4:	f7fd f852 	bl	2400e84c <get_fattime>
				res = move_window(fs, fp->dir_sect);
240117a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
240117aa:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
240117ac:	4628      	mov	r0, r5
240117ae:	f7fd fb0f 	bl	2400edd0 <move_window>
				if (res == FR_OK) {
240117b2:	2800      	cmp	r0, #0
240117b4:	d1e8      	bne.n	24011788 <f_close+0x18>
					dir = fp->dir_ptr;
240117b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
240117b8:	7ada      	ldrb	r2, [r3, #11]
240117ba:	f042 0220 	orr.w	r2, r2, #32
240117be:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
240117c0:	68a2      	ldr	r2, [r4, #8]
240117c2:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
240117c4:	f3c2 2007 	ubfx	r0, r2, #8, #8
240117c8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
240117ca:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
240117cc:	7809      	ldrb	r1, [r1, #0]
240117ce:	2903      	cmp	r1, #3
240117d0:	d103      	bne.n	240117da <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
240117d2:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
240117d4:	751a      	strb	r2, [r3, #20]
240117d6:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
240117d8:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
240117da:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
240117dc:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
240117de:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
240117e2:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
240117e4:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
240117e6:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
240117e8:	2301      	movs	r3, #1
240117ea:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
240117ec:	f7fd ff76 	bl	2400f6dc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
240117f0:	7d23      	ldrb	r3, [r4, #20]
240117f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
240117f6:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
240117f8:	2800      	cmp	r0, #0
240117fa:	d1c5      	bne.n	24011788 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240117fc:	6825      	ldr	r5, [r4, #0]
240117fe:	2d00      	cmp	r5, #0
24011800:	d0c1      	beq.n	24011786 <f_close+0x16>
24011802:	782b      	ldrb	r3, [r5, #0]
24011804:	2b00      	cmp	r3, #0
24011806:	d0be      	beq.n	24011786 <f_close+0x16>
24011808:	88a2      	ldrh	r2, [r4, #4]
2401180a:	88eb      	ldrh	r3, [r5, #6]
2401180c:	429a      	cmp	r2, r3
2401180e:	d1ba      	bne.n	24011786 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24011810:	7868      	ldrb	r0, [r5, #1]
24011812:	f7fd f8fb 	bl	2400ea0c <disk_status>
24011816:	f010 0001 	ands.w	r0, r0, #1
2401181a:	d1b4      	bne.n	24011786 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2401181c:	6923      	ldr	r3, [r4, #16]
2401181e:	3b01      	subs	r3, #1
24011820:	2b01      	cmp	r3, #1
24011822:	d821      	bhi.n	24011868 <f_close+0xf8>
		n = Files[i].ctr;
24011824:	f64d 62a0 	movw	r2, #56992	; 0xdea0
24011828:	011d      	lsls	r5, r3, #4
2401182a:	f2c2 0201 	movt	r2, #8193	; 0x2001
2401182e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
24011832:	8999      	ldrh	r1, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
24011834:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24011838:	d01a      	beq.n	24011870 <f_close+0x100>
		if (n > 0) n--;				/* Decrement read mode open count */
2401183a:	b119      	cbz	r1, 24011844 <f_close+0xd4>
2401183c:	3901      	subs	r1, #1
2401183e:	b289      	uxth	r1, r1
		Files[i].ctr = n;
24011840:	8199      	strh	r1, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24011842:	b909      	cbnz	r1, 24011848 <f_close+0xd8>
24011844:	2300      	movs	r3, #0
24011846:	5153      	str	r3, [r2, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
24011848:	2300      	movs	r3, #0
2401184a:	6023      	str	r3, [r4, #0]
}
2401184c:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2401184e:	2301      	movs	r3, #1
24011850:	6a22      	ldr	r2, [r4, #32]
24011852:	f104 012c 	add.w	r1, r4, #44	; 0x2c
24011856:	7868      	ldrb	r0, [r5, #1]
24011858:	f7fd f908 	bl	2400ea6c <disk_write>
2401185c:	b930      	cbnz	r0, 2401186c <f_close+0xfc>
				fp->flag &= (BYTE)~FA_DIRTY;
2401185e:	7d23      	ldrb	r3, [r4, #20]
24011860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24011864:	7523      	strb	r3, [r4, #20]
24011866:	e79d      	b.n	240117a4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
24011868:	2002      	movs	r0, #2
}
2401186a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2401186c:	2001      	movs	r0, #1
}
2401186e:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
24011870:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24011872:	e7e7      	b.n	24011844 <f_close+0xd4>

24011874 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
24011874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24011878:	b168      	cbz	r0, 24011896 <f_findnext+0x22>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2401187a:	f24f 5454 	movw	r4, #62804	; 0xf554
2401187e:	4605      	mov	r5, r0
24011880:	460e      	mov	r6, r1
24011882:	f2c2 4401 	movt	r4, #9217	; 0x2401
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24011886:	682b      	ldr	r3, [r5, #0]
24011888:	b12b      	cbz	r3, 24011896 <f_findnext+0x22>
2401188a:	781a      	ldrb	r2, [r3, #0]
2401188c:	b11a      	cbz	r2, 24011896 <f_findnext+0x22>
2401188e:	88a9      	ldrh	r1, [r5, #4]
24011890:	88da      	ldrh	r2, [r3, #6]
24011892:	4291      	cmp	r1, r2
24011894:	d003      	beq.n	2401189e <f_findnext+0x2a>
	FRESULT res = FR_INVALID_OBJECT;
24011896:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
24011898:	4638      	mov	r0, r7
2401189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2401189e:	7858      	ldrb	r0, [r3, #1]
240118a0:	f7fd f8b4 	bl	2400ea0c <disk_status>
240118a4:	07c3      	lsls	r3, r0, #31
240118a6:	d4f6      	bmi.n	24011896 <f_findnext+0x22>
		if (!fno) {
240118a8:	2e00      	cmp	r6, #0
240118aa:	d059      	beq.n	24011960 <f_findnext+0xec>
			res = dir_read(dp, 0);			/* Read an item */
240118ac:	4628      	mov	r0, r5
240118ae:	f7fd fd21 	bl	2400f2f4 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
240118b2:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
240118b6:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
240118b8:	d1ee      	bne.n	24011898 <f_findnext+0x24>
				get_fileinfo(dp, fno);		/* Get the object information */
240118ba:	4631      	mov	r1, r6
240118bc:	4628      	mov	r0, r5
240118be:	f7fd f9c5 	bl	2400ec4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
240118c2:	4641      	mov	r1, r8
240118c4:	4628      	mov	r0, r5
240118c6:	f7fe fcab 	bl	24010220 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
240118ca:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
240118ce:	d14d      	bne.n	2401196c <f_findnext+0xf8>
240118d0:	7db3      	ldrb	r3, [r6, #22]
240118d2:	2b00      	cmp	r3, #0
240118d4:	d0e0      	beq.n	24011898 <f_findnext+0x24>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
240118d6:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
240118da:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
240118de:	e00f      	b.n	24011900 <f_findnext+0x8c>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240118e0:	3a20      	subs	r2, #32
240118e2:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
240118e4:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240118e8:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
240118ec:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240118ee:	f1be 0f19 	cmp.w	lr, #25
240118f2:	d817      	bhi.n	24011924 <f_findnext+0xb0>
240118f4:	3b20      	subs	r3, #32
240118f6:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
240118f8:	4293      	cmp	r3, r2
240118fa:	d1c4      	bne.n	24011886 <f_findnext+0x12>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
240118fc:	2b00      	cmp	r3, #0
240118fe:	d0cb      	beq.n	24011898 <f_findnext+0x24>
24011900:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
24011902:	f81c 3b01 	ldrb.w	r3, [ip], #1
24011906:	2b3f      	cmp	r3, #63	; 0x3f
24011908:	d012      	beq.n	24011930 <f_findnext+0xbc>
2401190a:	2b2a      	cmp	r3, #42	; 0x2a
2401190c:	d010      	beq.n	24011930 <f_findnext+0xbc>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401190e:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24011912:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24011914:	2819      	cmp	r0, #25
24011916:	d9e3      	bls.n	240118e0 <f_findnext+0x6c>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
24011918:	2a7f      	cmp	r2, #127	; 0x7f
2401191a:	d9e3      	bls.n	240118e4 <f_findnext+0x70>
2401191c:	4423      	add	r3, r4
2401191e:	f813 2c80 	ldrb.w	r2, [r3, #-128]
24011922:	e7df      	b.n	240118e4 <f_findnext+0x70>
24011924:	2b7f      	cmp	r3, #127	; 0x7f
24011926:	d9e7      	bls.n	240118f8 <f_findnext+0x84>
24011928:	4420      	add	r0, r4
2401192a:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2401192e:	e7e3      	b.n	240118f8 <f_findnext+0x84>
24011930:	4694      	mov	ip, r2
				nm = nx = 0;
24011932:	2300      	movs	r3, #0
24011934:	f81c eb01 	ldrb.w	lr, [ip], #1
24011938:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2401193a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2401193e:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
24011940:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
24011944:	bf0c      	ite	eq
24011946:	3201      	addeq	r2, #1
24011948:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2401194a:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2401194e:	d0f4      	beq.n	2401193a <f_findnext+0xc6>
24011950:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
24011954:	d0f1      	beq.n	2401193a <f_findnext+0xc6>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
24011956:	f7fd f8ff 	bl	2400eb58 <pattern_matching>
2401195a:	2800      	cmp	r0, #0
2401195c:	d093      	beq.n	24011886 <f_findnext+0x12>
2401195e:	e79b      	b.n	24011898 <f_findnext+0x24>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24011960:	4631      	mov	r1, r6
24011962:	4628      	mov	r0, r5
}
24011964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24011968:	f7fd bfd6 	b.w	2400f918 <dir_sdi>
2401196c:	4607      	mov	r7, r0
2401196e:	e793      	b.n	24011898 <f_findnext+0x24>

24011970 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
24011970:	b570      	push	{r4, r5, r6, lr}
24011972:	b082      	sub	sp, #8
24011974:	4615      	mov	r5, r2
24011976:	4604      	mov	r4, r0
24011978:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2401197a:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2401197c:	2200      	movs	r2, #0
2401197e:	a901      	add	r1, sp, #4
24011980:	4668      	mov	r0, sp
24011982:	9500      	str	r5, [sp, #0]
24011984:	f7fd fa62 	bl	2400ee4c <find_volume>
	if (res == FR_OK) {
24011988:	b118      	cbz	r0, 24011992 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2401198a:	2300      	movs	r3, #0
2401198c:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2401198e:	b002      	add	sp, #8
24011990:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
24011992:	e9dd 1500 	ldrd	r1, r5, [sp]
24011996:	4620      	mov	r0, r4
		obj->fs = fs;
24011998:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2401199a:	f7fe fab1 	bl	2400ff00 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2401199e:	bb00      	cbnz	r0, 240119e2 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
240119a0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
240119a4:	2b00      	cmp	r3, #0
240119a6:	db0b      	blt.n	240119c0 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
240119a8:	79a3      	ldrb	r3, [r4, #6]
240119aa:	06db      	lsls	r3, r3, #27
240119ac:	d51f      	bpl.n	240119ee <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
240119ae:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240119b0:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
240119b2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
240119b4:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
240119b6:	d102      	bne.n	240119be <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240119b8:	8a92      	ldrh	r2, [r2, #20]
240119ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240119be:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
240119c0:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240119c2:	2100      	movs	r1, #0
240119c4:	4620      	mov	r0, r4
				obj->id = fs->id;
240119c6:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240119c8:	f7fd ffa6 	bl	2400f918 <dir_sdi>
				if (res == FR_OK) {
240119cc:	b948      	cbnz	r0, 240119e2 <f_findfirst+0x72>
					if (obj->sclust) {
240119ce:	68a3      	ldr	r3, [r4, #8]
240119d0:	b97b      	cbnz	r3, 240119f2 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
240119d2:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
240119d4:	4631      	mov	r1, r6
240119d6:	4620      	mov	r0, r4
}
240119d8:	b002      	add	sp, #8
240119da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
240119de:	f7ff bf49 	b.w	24011874 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
240119e2:	2804      	cmp	r0, #4
240119e4:	d1d1      	bne.n	2401198a <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
240119e6:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
240119e8:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
240119ea:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
240119ec:	e7cf      	b.n	2401198e <f_findfirst+0x1e>
					res = FR_NO_PATH;
240119ee:	2005      	movs	r0, #5
240119f0:	e7cb      	b.n	2401198a <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
240119f2:	4601      	mov	r1, r0
240119f4:	4620      	mov	r0, r4
240119f6:	f7fd f857 	bl	2400eaa8 <inc_lock>
240119fa:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
240119fc:	2800      	cmp	r0, #0
240119fe:	d1e9      	bne.n	240119d4 <f_findfirst+0x64>
24011a00:	2012      	movs	r0, #18
24011a02:	e7c2      	b.n	2401198a <f_findfirst+0x1a>

24011a04 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
24011a04:	b530      	push	{r4, r5, lr}
24011a06:	b0a1      	sub	sp, #132	; 0x84
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
24011a08:	2202      	movs	r2, #2
{
24011a0a:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
24011a0c:	a903      	add	r1, sp, #12
24011a0e:	a801      	add	r0, sp, #4
24011a10:	f7fd fa1c 	bl	2400ee4c <find_volume>
	dj.obj.fs = fs;
24011a14:	9c03      	ldr	r4, [sp, #12]
24011a16:	9404      	str	r4, [sp, #16]
	if (res == FR_OK) {
24011a18:	b108      	cbz	r0, 24011a1e <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
24011a1a:	b021      	add	sp, #132	; 0x84
24011a1c:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
24011a1e:	9901      	ldr	r1, [sp, #4]
24011a20:	a804      	add	r0, sp, #16
24011a22:	f7fe fa6d 	bl	2400ff00 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
24011a26:	2800      	cmp	r0, #0
24011a28:	d1f7      	bne.n	24011a1a <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
24011a2a:	f64d 63a0 	movw	r3, #56992	; 0xdea0
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011a2e:	9904      	ldr	r1, [sp, #16]
				Files[i].clu == dp->obj.sclust &&
24011a30:	9806      	ldr	r0, [sp, #24]
		if (Files[i].fs) {	/* Existing entry */
24011a32:	f2c2 0301 	movt	r3, #8193	; 0x2001
				Files[i].ofs == dp->dptr) break;
24011a36:	9d09      	ldr	r5, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
24011a38:	681a      	ldr	r2, [r3, #0]
24011a3a:	b10a      	cbz	r2, 24011a40 <f_unlink+0x3c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011a3c:	428a      	cmp	r2, r1
24011a3e:	d029      	beq.n	24011a94 <f_unlink+0x90>
		if (Files[i].fs) {	/* Existing entry */
24011a40:	691a      	ldr	r2, [r3, #16]
24011a42:	b10a      	cbz	r2, 24011a48 <f_unlink+0x44>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011a44:	428a      	cmp	r2, r1
24011a46:	d02d      	beq.n	24011aa4 <f_unlink+0xa0>
			if (dj.fn[NSFLAG] & NS_NONAME) {
24011a48:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
24011a4c:	2b00      	cmp	r3, #0
24011a4e:	db1f      	blt.n	24011a90 <f_unlink+0x8c>
				if (dj.obj.attr & AM_RDO) {
24011a50:	f89d 3016 	ldrb.w	r3, [sp, #22]
24011a54:	07da      	lsls	r2, r3, #31
24011a56:	d419      	bmi.n	24011a8c <f_unlink+0x88>
	if (fs->fs_type == FS_FAT32) {
24011a58:	7821      	ldrb	r1, [r4, #0]
					dclst = ld_clust(fs, dj.dir);
24011a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24011a5c:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
24011a5e:	8b55      	ldrh	r5, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
24011a60:	d102      	bne.n	24011a68 <f_unlink+0x64>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24011a62:	8a92      	ldrh	r2, [r2, #20]
24011a64:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
24011a68:	06db      	lsls	r3, r3, #27
24011a6a:	d422      	bmi.n	24011ab2 <f_unlink+0xae>
				res = dir_remove(&dj);			/* Remove the directory entry */
24011a6c:	a804      	add	r0, sp, #16
24011a6e:	f7fd ffff 	bl	2400fa70 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
24011a72:	b928      	cbnz	r0, 24011a80 <f_unlink+0x7c>
24011a74:	b125      	cbz	r5, 24011a80 <f_unlink+0x7c>
					res = remove_chain(&dj.obj, dclst, 0);
24011a76:	2200      	movs	r2, #0
24011a78:	4629      	mov	r1, r5
24011a7a:	a804      	add	r0, sp, #16
24011a7c:	f7ff f956 	bl	24010d2c <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
24011a80:	2800      	cmp	r0, #0
24011a82:	d1ca      	bne.n	24011a1a <f_unlink+0x16>
24011a84:	4620      	mov	r0, r4
24011a86:	f7fd fe29 	bl	2400f6dc <sync_fs>
24011a8a:	e7c6      	b.n	24011a1a <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
24011a8c:	2007      	movs	r0, #7
24011a8e:	e7c4      	b.n	24011a1a <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
24011a90:	2006      	movs	r0, #6
24011a92:	e7c2      	b.n	24011a1a <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011a94:	685a      	ldr	r2, [r3, #4]
24011a96:	4282      	cmp	r2, r0
24011a98:	d1d2      	bne.n	24011a40 <f_unlink+0x3c>
				Files[i].clu == dp->obj.sclust &&
24011a9a:	689a      	ldr	r2, [r3, #8]
24011a9c:	42aa      	cmp	r2, r5
24011a9e:	d1cf      	bne.n	24011a40 <f_unlink+0x3c>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
24011aa0:	2010      	movs	r0, #16
24011aa2:	e7ba      	b.n	24011a1a <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011aa4:	695a      	ldr	r2, [r3, #20]
24011aa6:	4282      	cmp	r2, r0
24011aa8:	d1ce      	bne.n	24011a48 <f_unlink+0x44>
				Files[i].clu == dp->obj.sclust &&
24011aaa:	699b      	ldr	r3, [r3, #24]
24011aac:	42ab      	cmp	r3, r5
24011aae:	d1cb      	bne.n	24011a48 <f_unlink+0x44>
24011ab0:	e7f6      	b.n	24011aa0 <f_unlink+0x9c>
						res = dir_sdi(&sdj, 0);
24011ab2:	2100      	movs	r1, #0
24011ab4:	a812      	add	r0, sp, #72	; 0x48
						sdj.obj.fs = fs;						/* Open the sub-directory */
24011ab6:	9412      	str	r4, [sp, #72]	; 0x48
						sdj.obj.sclust = dclst;
24011ab8:	9514      	str	r5, [sp, #80]	; 0x50
						res = dir_sdi(&sdj, 0);
24011aba:	f7fd ff2d 	bl	2400f918 <dir_sdi>
						if (res == FR_OK) {
24011abe:	2800      	cmp	r0, #0
24011ac0:	d1ab      	bne.n	24011a1a <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
24011ac2:	a812      	add	r0, sp, #72	; 0x48
24011ac4:	f7fd fc16 	bl	2400f2f4 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
24011ac8:	2800      	cmp	r0, #0
24011aca:	d0df      	beq.n	24011a8c <f_unlink+0x88>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
24011acc:	2804      	cmp	r0, #4
24011ace:	d1a4      	bne.n	24011a1a <f_unlink+0x16>
24011ad0:	e7cc      	b.n	24011a6c <f_unlink+0x68>
24011ad2:	bf00      	nop

24011ad4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
24011ad4:	f24e 03c4 	movw	r3, #57540	; 0xe0c4
24011ad8:	f2c2 0301 	movt	r3, #8193	; 0x2001
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
24011adc:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
24011ade:	7a5c      	ldrb	r4, [r3, #9]
24011ae0:	b9cc      	cbnz	r4, 24011b16 <FATFS_LinkDriver+0x42>
    disk.is_initialized[disk.nbr] = 0;
24011ae2:	f004 02ff 	and.w	r2, r4, #255	; 0xff
24011ae6:	7a5c      	ldrb	r4, [r3, #9]
24011ae8:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
24011aea:	7a5c      	ldrb	r4, [r3, #9]
24011aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24011af0:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
24011af2:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
24011af4:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
24011af6:	441c      	add	r4, r3
24011af8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
24011afa:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
24011afc:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
24011afe:	b2e4      	uxtb	r4, r4
24011b00:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
24011b02:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
24011b04:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
24011b06:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
24011b08:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
24011b0a:	4610      	mov	r0, r2
24011b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
24011b10:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
24011b12:	708b      	strb	r3, [r1, #2]
}
24011b14:	4770      	bx	lr
  uint8_t ret = 1;
24011b16:	2201      	movs	r2, #1
}
24011b18:	f85d 4b04 	ldr.w	r4, [sp], #4
24011b1c:	4610      	mov	r0, r2
24011b1e:	4770      	bx	lr

24011b20 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
24011b20:	287f      	cmp	r0, #127	; 0x7f
24011b22:	d916      	bls.n	24011b52 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
24011b24:	b991      	cbnz	r1, 24011b4c <ff_convert+0x2c>
24011b26:	f24f 53e4 	movw	r3, #62948	; 0xf5e4
24011b2a:	f2c2 4301 	movt	r3, #9217	; 0x2401
24011b2e:	e001      	b.n	24011b34 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
24011b30:	2980      	cmp	r1, #128	; 0x80
24011b32:	d00d      	beq.n	24011b50 <ff_convert+0x30>
				if (chr == Tbl[c]) break;
24011b34:	f833 2b02 	ldrh.w	r2, [r3], #2
24011b38:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
24011b3c:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24011b3e:	4282      	cmp	r2, r0
24011b40:	d1f6      	bne.n	24011b30 <ff_convert+0x10>
			}
			c = (c + 0x80) & 0xFF;
24011b42:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
24011b46:	fa1f f08c 	uxth.w	r0, ip
24011b4a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24011b4c:	28ff      	cmp	r0, #255	; 0xff
24011b4e:	d901      	bls.n	24011b54 <ff_convert+0x34>
24011b50:	2000      	movs	r0, #0
		}
	}

	return c;
}
24011b52:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24011b54:	f24f 53e4 	movw	r3, #62948	; 0xf5e4
24011b58:	3880      	subs	r0, #128	; 0x80
24011b5a:	f2c2 4301 	movt	r3, #9217	; 0x2401
24011b5e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
24011b62:	4770      	bx	lr

24011b64 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
24011b64:	f24f 63e4 	movw	r3, #63204	; 0xf6e4
24011b68:	f64f 02d8 	movw	r2, #63704	; 0xf8d8
24011b6c:	f2c2 4301 	movt	r3, #9217	; 0x2401
24011b70:	f2c2 4201 	movt	r2, #9217	; 0x2401
24011b74:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24011b78:	bf28      	it	cs
24011b7a:	4613      	movcs	r3, r2
{
24011b7c:	b510      	push	{r4, lr}
24011b7e:	3304      	adds	r3, #4
24011b80:	e00a      	b.n	24011b98 <ff_wtoupper+0x34>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
24011b82:	f833 2c02 	ldrh.w	r2, [r3, #-2]
24011b86:	fa5f fc82 	uxtb.w	ip, r2
24011b8a:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
24011b8c:	eb0c 0e01 	add.w	lr, ip, r1
24011b90:	4570      	cmp	r0, lr
24011b92:	db09      	blt.n	24011ba8 <ff_wtoupper+0x44>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
24011b94:	3304      	adds	r3, #4
24011b96:	b182      	cbz	r2, 24011bba <ff_wtoupper+0x56>
		bc = *p++;								/* Get block base */
24011b98:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
24011b9c:	461c      	mov	r4, r3
24011b9e:	1e4a      	subs	r2, r1, #1
24011ba0:	b292      	uxth	r2, r2
24011ba2:	4290      	cmp	r0, r2
24011ba4:	d8ed      	bhi.n	24011b82 <ff_wtoupper+0x1e>
	}

	return chr;
}
24011ba6:	bd10      	pop	{r4, pc}
			switch (cmd) {
24011ba8:	2a08      	cmp	r2, #8
24011baa:	d8fc      	bhi.n	24011ba6 <ff_wtoupper+0x42>
24011bac:	e8df f002 	tbb	[pc, r2]
24011bb0:	1916100c 	.word	0x1916100c
24011bb4:	25221f1c 	.word	0x25221f1c
24011bb8:	08          	.byte	0x08
24011bb9:	00          	.byte	0x00
		if (!cmd) p += nc;
24011bba:	eb04 034c 	add.w	r3, r4, ip, lsl #1
24011bbe:	e7de      	b.n	24011b7e <ff_wtoupper+0x1a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
24011bc0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24011bc4:	b280      	uxth	r0, r0
}
24011bc6:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24011bc8:	1a41      	subs	r1, r0, r1
24011bca:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
24011bce:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
24011bd0:	1a43      	subs	r3, r0, r1
24011bd2:	f003 0301 	and.w	r3, r3, #1
24011bd6:	1ac3      	subs	r3, r0, r3
24011bd8:	b298      	uxth	r0, r3
}
24011bda:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24011bdc:	3810      	subs	r0, #16
24011bde:	b280      	uxth	r0, r0
}
24011be0:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
24011be2:	3820      	subs	r0, #32
24011be4:	b280      	uxth	r0, r0
}
24011be6:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24011be8:	3830      	subs	r0, #48	; 0x30
24011bea:	b280      	uxth	r0, r0
}
24011bec:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
24011bee:	381a      	subs	r0, #26
24011bf0:	b280      	uxth	r0, r0
}
24011bf2:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24011bf4:	3008      	adds	r0, #8
24011bf6:	b280      	uxth	r0, r0
}
24011bf8:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24011bfa:	3850      	subs	r0, #80	; 0x50
24011bfc:	b280      	uxth	r0, r0
}
24011bfe:	bd10      	pop	{r4, pc}

24011c00 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
24011c00:	b538      	push	{r3, r4, r5, lr}
24011c02:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
24011c06:	698d      	ldr	r5, [r1, #24]
{
24011c08:	eef0 8a40 	vmov.f32	s17, s0
24011c0c:	eeb0 8a60 	vmov.f32	s16, s1
24011c10:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24011c12:	4629      	mov	r1, r5
24011c14:	2010      	movs	r0, #16
24011c16:	f005 f9a3 	bl	24016f60 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
24011c1a:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24011c1c:	6020      	str	r0, [r4, #0]
    e->mempool = m;
24011c1e:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
24011c20:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
24011c22:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
24011c26:	ed80 8a03 	vstr	s16, [r0, #12]
}
24011c2a:	ecbd 8b02 	vpop	{d8}
24011c2e:	bd38      	pop	{r3, r4, r5, pc}

24011c30 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
24011c30:	6802      	ldr	r2, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
24011c32:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
24011c36:	edd2 7a01 	vldr	s15, [r2, #4]
24011c3a:	eef4 7ac0 	vcmpe.f32	s15, s0
24011c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c42:	d814      	bhi.n	24011c6e <tEnvelopeFollower_tick+0x3e>
24011c44:	ed92 7a02 	vldr	s14, [r2, #8]
24011c48:	eeb4 7ac0 	vcmpe.f32	s14, s0
24011c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c50:	d50d      	bpl.n	24011c6e <tEnvelopeFollower_tick+0x3e>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (Lfloat)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
24011c52:	f24e 33ee 	movw	r3, #58350	; 0xe3ee
24011c56:	f2c0 036c 	movt	r3, #108	; 0x6c
24011c5a:	ee07 3a90 	vmov	s15, r3
24011c5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c66:	d407      	bmi.n	24011c78 <tEnvelopeFollower_tick+0x48>
24011c68:	ed82 0a01 	vstr	s0, [r2, #4]
24011c6c:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
24011c6e:	ed92 0a03 	vldr	s0, [r2, #12]
24011c72:	ee27 0a80 	vmul.f32	s0, s15, s0
24011c76:	e7ec      	b.n	24011c52 <tEnvelopeFollower_tick+0x22>
    if( e->y < VSF)   e->y = 0.0f;
24011c78:	2300      	movs	r3, #0
24011c7a:	ee00 3a10 	vmov	s0, r3
24011c7e:	6053      	str	r3, [r2, #4]
#endif
    return e->y;
}
24011c80:	4770      	bx	lr
24011c82:	bf00      	nop

24011c84 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
24011c84:	b538      	push	{r3, r4, r5, lr}
24011c86:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011c8a:	680d      	ldr	r5, [r1, #0]
{
24011c8c:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24011c8e:	2010      	movs	r0, #16
{
24011c90:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24011c94:	4629      	mov	r1, r5
24011c96:	f005 f963 	bl	24016f60 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24011c9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
24011c9e:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24011ca0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24011ca2:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
24011ca4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
24011ca8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
24011caa:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
24011cae:	edc0 7a02 	vstr	s15, [r0, #8]
}
24011cb2:	ecbd 8b02 	vpop	{d8}
24011cb6:	bd38      	pop	{r3, r4, r5, pc}

24011cb8 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
24011cb8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
24011cba:	6801      	ldr	r1, [r0, #0]
24011cbc:	f005 ba12 	b.w	240170e4 <mpool_free>

24011cc0 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
24011cc0:	2300      	movs	r3, #0
24011cc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011cc6:	ee07 3a10 	vmov	s14, r3
24011cca:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
24011ccc:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
24011cd0:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24011cd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
24011cd8:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
24011cdc:	edc3 7a02 	vstr	s15, [r3, #8]
}
24011ce0:	4770      	bx	lr
24011ce2:	bf00      	nop

24011ce4 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
24011ce4:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
24011ce6:	ee60 7a00 	vmul.f32	s15, s0, s0
24011cea:	edd3 6a03 	vldr	s13, [r3, #12]
24011cee:	ed93 0a02 	vldr	s0, [r3, #8]
24011cf2:	ed93 7a01 	vldr	s14, [r3, #4]
24011cf6:	ee20 0a26 	vmul.f32	s0, s0, s13
24011cfa:	eea7 0a27 	vfma.f32	s0, s14, s15
24011cfe:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24011d02:	4770      	bx	lr

24011d04 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
24011d04:	b570      	push	{r4, r5, r6, lr}
24011d06:	460d      	mov	r5, r1
24011d08:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24011d0a:	202c      	movs	r0, #44	; 0x2c
{
24011d0c:	ed2d 8b02 	vpush	{d8}
24011d10:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24011d12:	6811      	ldr	r1, [r2, #0]
{
24011d14:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24011d18:	9101      	str	r1, [sp, #4]
24011d1a:	f005 f921 	bl	24016f60 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24011d1e:	ee07 5a90 	vmov	s15, r5
24011d22:	2300      	movs	r3, #0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24011d24:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24011d26:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
24011d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24011d2c:	ee08 3a90 	vmov	s17, r3
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24011d30:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24011d32:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
24011d36:	6001      	str	r1, [r0, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24011d38:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    d->maxDelay = maxDelay;
24011d3c:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24011d3e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24011d42:	00a8      	lsls	r0, r5, #2
24011d44:	f005 f90c 	bl	24016f60 <mpool_alloc>

    d->gain = 1.0f;
24011d48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
#else
    inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
24011d4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
24011d50:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24011d52:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
24011d54:	edc4 7a01 	vstr	s15, [r4, #4]
    d->outPoint = 0;
    
    tLinearDelay_setDelay(dl, d->delay);
24011d58:	edd4 7a08 	vldr	s15, [r4, #32]
    d->lastIn = 0.0f;
24011d5c:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
24011d60:	edc4 8a03 	vstr	s17, [r4, #12]
24011d64:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->inPoint = 0;
24011d68:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
24011d6a:	61a3      	str	r3, [r4, #24]
    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;
24011d6c:	6833      	ldr	r3, [r6, #0]
24011d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24011d72:	69d9      	ldr	r1, [r3, #28]
24011d74:	ee07 1a10 	vmov	s14, r1
24011d78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24011d7c:	d401      	bmi.n	24011d82 <tLinearDelay_initToPool+0x7e>
    {
        return min;
    }
    else if (val > max)
24011d7e:	fec7 6ac7 	vminnm.f32	s13, s15, s14

    Lfloat outPointer = d->inPoint - d->delay;
24011d82:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24011d86:	edc3 6a08 	vstr	s13, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24011d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13

    while ( outPointer < 0 )
24011d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24011d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011d9a:	d506      	bpl.n	24011daa <tLinearDelay_initToPool+0xa6>
        outPointer += d->maxDelay; // modulo maximum length
24011d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24011da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24011da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011da8:	d4f8      	bmi.n	24011d9c <tLinearDelay_initToPool+0x98>

    d->outPoint = (uint32_t) outPointer;   // integer part
24011daa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24011dae:	ee17 2a10 	vmov	r2, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24011db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24011db6:	ee06 2a90 	vmov	s13, r2

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24011dba:	4291      	cmp	r1, r2
24011dbc:	bf08      	it	eq
24011dbe:	2200      	moveq	r2, #0
    d->omAlpha = 1.0f - d->alpha;
24011dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
24011dc4:	eef8 6a66 	vcvt.f32.u32	s13, s13
24011dc8:	619a      	str	r2, [r3, #24]
24011dca:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24011dce:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
24011dd2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24011dd6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
}
24011dda:	b002      	add	sp, #8
24011ddc:	ecbd 8b02 	vpop	{d8}
24011de0:	bd70      	pop	{r4, r5, r6, pc}
24011de2:	bf00      	nop

24011de4 <tLinearDelay_free>:
{
24011de4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24011de6:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24011de8:	6821      	ldr	r1, [r4, #0]
24011dea:	68a0      	ldr	r0, [r4, #8]
24011dec:	f005 f97a 	bl	240170e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
24011df0:	6821      	ldr	r1, [r4, #0]
24011df2:	4620      	mov	r0, r4
}
24011df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24011df8:	f005 b974 	b.w	240170e4 <mpool_free>

24011dfc <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
24011dfc:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24011dfe:	69cb      	ldr	r3, [r1, #28]
24011e00:	b14b      	cbz	r3, 24011e16 <tLinearDelay_clear+0x1a>
        d->buff[i] = 0;
24011e02:	2000      	movs	r0, #0
    for (unsigned i = 0; i < d->maxDelay; i++)
24011e04:	4603      	mov	r3, r0
        d->buff[i] = 0;
24011e06:	688a      	ldr	r2, [r1, #8]
24011e08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24011e0c:	3301      	adds	r3, #1
        d->buff[i] = 0;
24011e0e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24011e10:	69ca      	ldr	r2, [r1, #28]
24011e12:	429a      	cmp	r2, r3
24011e14:	d8f7      	bhi.n	24011e06 <tLinearDelay_clear+0xa>
}
24011e16:	4770      	bx	lr

24011e18 <tLinearDelay_tick>:
{
24011e18:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24011e1a:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24011e1c:	edd3 7a01 	vldr	s15, [r3, #4]
24011e20:	6959      	ldr	r1, [r3, #20]
24011e22:	689a      	ldr	r2, [r3, #8]
24011e24:	ee27 0a80 	vmul.f32	s0, s15, s0
24011e28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011e2c:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24011e30:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
24011e32:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
24011e36:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24011e3a:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
24011e3c:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24011e3e:	42a2      	cmp	r2, r4
24011e40:	bf08      	it	eq
24011e42:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
24011e44:	4284      	cmp	r4, r0
24011e46:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
24011e48:	689a      	ldr	r2, [r3, #8]
24011e4a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24011e4e:	ed91 0a00 	vldr	s0, [r1]
24011e52:	ee20 0a27 	vmul.f32	s0, s0, s15
24011e56:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24011e5a:	d90b      	bls.n	24011e74 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24011e5c:	ed91 7a01 	vldr	s14, [r1, #4]
24011e60:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24011e64:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24011e66:	eea7 0a27 	vfma.f32	s0, s14, s15
24011e6a:	ed83 0a03 	vstr	s0, [r3, #12]
}
24011e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
24011e72:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24011e74:	ed92 7a00 	vldr	s14, [r2]
24011e78:	2000      	movs	r0, #0
24011e7a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24011e7e:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24011e80:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24011e84:	ed83 0a03 	vstr	s0, [r3, #12]
}
24011e88:	f85d 4b04 	ldr.w	r4, [sp], #4
24011e8c:	4770      	bx	lr
24011e8e:	bf00      	nop

24011e90 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
24011e90:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24011e92:	edd3 7a01 	vldr	s15, [r3, #4]
24011e96:	6959      	ldr	r1, [r3, #20]
24011e98:	689a      	ldr	r2, [r3, #8]
24011e9a:	ee27 0a80 	vmul.f32	s0, s15, s0
24011e9e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011ea2:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24011ea6:	695a      	ldr	r2, [r3, #20]
24011ea8:	69d9      	ldr	r1, [r3, #28]
24011eaa:	3201      	adds	r2, #1
24011eac:	428a      	cmp	r2, r1
24011eae:	bf08      	it	eq
24011eb0:	2200      	moveq	r2, #0
24011eb2:	615a      	str	r2, [r3, #20]
}
24011eb4:	4770      	bx	lr
24011eb6:	bf00      	nop

24011eb8 <tLinearDelay_tickOut>:
{
24011eb8:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24011eba:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24011ebc:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
24011ebe:	6899      	ldr	r1, [r3, #8]
24011ec0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24011ec4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24011ec8:	69dc      	ldr	r4, [r3, #28]
24011eca:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
24011ecc:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
24011ed0:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
24011ed2:	ee20 0a27 	vmul.f32	s0, s0, s15
24011ed6:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24011eda:	d20b      	bcs.n	24011ef4 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24011edc:	ed90 7a01 	vldr	s14, [r0, #4]
24011ee0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24011ee4:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24011ee6:	eea7 0a27 	vfma.f32	s0, s14, s15
24011eea:	ed83 0a03 	vstr	s0, [r3, #12]
}
24011eee:	f85d 4b04 	ldr.w	r4, [sp], #4
24011ef2:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24011ef4:	ed91 7a00 	vldr	s14, [r1]
24011ef8:	2200      	movs	r2, #0
24011efa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24011efe:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24011f00:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24011f04:	ed83 0a03 	vstr	s0, [r3, #12]
}
24011f08:	f85d 4b04 	ldr.w	r4, [sp], #4
24011f0c:	4770      	bx	lr
24011f0e:	bf00      	nop

24011f10 <tLinearDelay_setDelay>:
    if (val < min)
24011f10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    _tLinearDelay* d = *dl;
24011f14:	6803      	ldr	r3, [r0, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24011f16:	69d9      	ldr	r1, [r3, #28]
24011f18:	eeb4 0ae6 	vcmpe.f32	s0, s13
24011f1c:	ee07 1a90 	vmov	s15, r1
24011f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24011f28:	d401      	bmi.n	24011f2e <tLinearDelay_setDelay+0x1e>
    else if (val > max)
24011f2a:	fec7 6a40 	vminnm.f32	s13, s14, s0
    Lfloat outPointer = d->inPoint - d->delay;
24011f2e:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24011f32:	edc3 6a08 	vstr	s13, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24011f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011f3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    while ( outPointer < 0 )
24011f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24011f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f46:	d506      	bpl.n	24011f56 <tLinearDelay_setDelay+0x46>
        outPointer += d->maxDelay; // modulo maximum length
24011f48:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24011f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f54:	d4f8      	bmi.n	24011f48 <tLinearDelay_setDelay+0x38>
    d->outPoint = (uint32_t) outPointer;   // integer part
24011f56:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24011f5a:	ee17 2a10 	vmov	r2, s14
    d->omAlpha = 1.0f - d->alpha;
24011f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24011f62:	ee06 2a90 	vmov	s13, r2
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24011f66:	4291      	cmp	r1, r2
24011f68:	bf08      	it	eq
24011f6a:	2200      	moveq	r2, #0
    d->omAlpha = 1.0f - d->alpha;
24011f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
24011f70:	eef8 6a66 	vcvt.f32.u32	s13, s13
24011f74:	619a      	str	r2, [r3, #24]
24011f76:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24011f7a:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
24011f7e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24011f82:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
}
24011f86:	4770      	bx	lr

24011f88 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
24011f88:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
24011f8a:	6953      	ldr	r3, [r2, #20]
24011f8c:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
24011f8e:	3901      	subs	r1, #1
24011f90:	d502      	bpl.n	24011f98 <tLinearDelay_addTo+0x10>
24011f92:	69d3      	ldr	r3, [r2, #28]
24011f94:	18c9      	adds	r1, r1, r3
24011f96:	d4fd      	bmi.n	24011f94 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
24011f98:	6893      	ldr	r3, [r2, #8]
24011f9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24011f9e:	edd3 7a00 	vldr	s15, [r3]
24011fa2:	ee30 0a27 	vadd.f32	s0, s0, s15
24011fa6:	ed83 0a00 	vstr	s0, [r3]
}
24011faa:	4770      	bx	lr

24011fac <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
24011fac:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
24011fae:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
24011fb0:	e9d4 1000 	ldrd	r1, r0, [r4]
24011fb4:	f005 f896 	bl	240170e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
24011fb8:	6821      	ldr	r1, [r4, #0]
24011fba:	4620      	mov	r0, r4
}
24011fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24011fc0:	f005 b890 	b.w	240170e4 <mpool_free>

24011fc4 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
24011fc4:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24011fc6:	69cb      	ldr	r3, [r1, #28]
24011fc8:	b14b      	cbz	r3, 24011fde <tLagrangeDelay_clear+0x1a>
    {
        d->buff[i] = 0.0f;
24011fca:	2000      	movs	r0, #0
    for (unsigned i = 0; i < d->maxDelay; i++)
24011fcc:	4603      	mov	r3, r0
        d->buff[i] = 0.0f;
24011fce:	684a      	ldr	r2, [r1, #4]
24011fd0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24011fd4:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
24011fd6:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24011fd8:	69ca      	ldr	r2, [r1, #28]
24011fda:	429a      	cmp	r2, r3
24011fdc:	d8f7      	bhi.n	24011fce <tLagrangeDelay_clear+0xa>
    }
}
24011fde:	4770      	bx	lr

24011fe0 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
24011fe0:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
24011fe2:	6959      	ldr	r1, [r3, #20]
24011fe4:	685a      	ldr	r2, [r3, #4]
24011fe6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011fea:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24011fee:	695a      	ldr	r2, [r3, #20]
24011ff0:	6899      	ldr	r1, [r3, #8]
24011ff2:	3201      	adds	r2, #1
24011ff4:	400a      	ands	r2, r1
24011ff6:	615a      	str	r2, [r3, #20]
}
24011ff8:	4770      	bx	lr
24011ffa:	bf00      	nop

24011ffc <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
24011ffc:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
24011ffe:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
24012000:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24012002:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
24012006:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24012008:	1c44      	adds	r4, r0, #1
2401200a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
2401200e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
24012012:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
24012016:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401201a:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
2401201c:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401201e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24012022:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24012026:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401202a:	ee20 0a06 	vmul.f32	s0, s0, s12
2401202e:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
24012032:	69da      	ldr	r2, [r3, #28]
24012034:	eea6 0a26 	vfma.f32	s0, s12, s13
24012038:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
2401203a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
2401203e:	3a01      	subs	r2, #1
24012040:	edd0 6a00 	vldr	s13, [r0]
24012044:	402a      	ands	r2, r5
24012046:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
2401204a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
2401204e:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24012052:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24012054:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
24012058:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
2401205c:	bc30      	pop	{r4, r5}
2401205e:	4770      	bx	lr

24012060 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
24012060:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
24012064:	6802      	ldr	r2, [r0, #0]
    d->delay = delay; // not safe but faster
24012066:	ed82 0a08 	vstr	s0, [r2, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
2401206a:	ee37 7ac0 	vsub.f32	s14, s15, s0
2401206e:	edd2 7a05 	vldr	s15, [r2, #20]
24012072:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012076:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2401207a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012082:	d50a      	bpl.n	2401209a <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
24012084:	ed92 7a07 	vldr	s14, [r2, #28]
24012088:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401208c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24012090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24012094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012098:	d4f8      	bmi.n	2401208c <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
2401209a:	eefc 6ae7 	vcvt.u32.f32	s13, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
2401209e:	f64a 23ab 	movw	r3, #43691	; 0xaaab
	Lfloat dp1 = alpha+1.0f;
240120a2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
240120a6:	4619      	mov	r1, r3
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
240120a8:	f6cb 632a 	movt	r3, #48682	; 0xbe2a
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
240120ac:	eeb8 6a66 	vcvt.f32.u32	s12, s13
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
240120b0:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
	Lfloat dm2 = alpha-2.0f;
240120b4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
240120b8:	ee07 3a10 	vmov	s14, r3
	d->h1 = 0.5f * (dp1 * pdm1dm2);
240120bc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
240120c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
240120c4:	ee04 1a10 	vmov	s8, r1

    d->outPoint &= d->bufferMask;
240120c8:	ee16 1a90 	vmov	r1, s13
	d->h2 = -0.5f * (pdp1d * dm2);
240120cc:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
240120d0:	6893      	ldr	r3, [r2, #8]
	Lfloat dm1 = alpha-1.0f;
240120d2:	ee77 6ae4 	vsub.f32	s13, s15, s9
	Lfloat dp1 = alpha+1.0f;
240120d6:	ee77 4aa4 	vadd.f32	s9, s15, s9
    d->outPoint &= d->bufferMask;
240120da:	400b      	ands	r3, r1
	Lfloat dm2 = alpha-2.0f;
240120dc:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
240120e0:	ee27 7a87 	vmul.f32	s14, s15, s14
    d->outPoint &= d->bufferMask;
240120e4:	6193      	str	r3, [r2, #24]
	d->h1 = 0.5f * (dp1 * pdm1dm2);
240120e6:	ee24 6aa6 	vmul.f32	s12, s9, s13
	Lfloat pdp1d = dp1*alpha;
240120ea:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
240120ee:	ee27 7a26 	vmul.f32	s14, s14, s13
	d->h2 = -0.5f * (pdp1d * dm2);
240120f2:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
240120f6:	ee66 6a84 	vmul.f32	s13, s13, s8
	d->h1 = 0.5f * (dp1 * pdm1dm2);
240120fa:	ee26 6a23 	vmul.f32	s12, s12, s7
	d->h2 = -0.5f * (pdp1d * dm2);
240120fe:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24012102:	ee66 6aa7 	vmul.f32	s13, s13, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24012106:	ee27 7a05 	vmul.f32	s14, s14, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401210a:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
2401210e:	edc2 5a0b 	vstr	s11, [r2, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24012112:	edc2 6a0c 	vstr	s13, [r2, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24012116:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401211a:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
}
2401211e:	4770      	bx	lr

24012120 <tLagrangeDelay_initToPool>:
{
24012120:	b570      	push	{r4, r5, r6, lr}
24012122:	460d      	mov	r5, r1
24012124:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24012126:	2034      	movs	r0, #52	; 0x34
{
24012128:	ed2d 8b02 	vpush	{d8}
2401212c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2401212e:	6811      	ldr	r1, [r2, #0]
{
24012130:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24012134:	9101      	str	r1, [sp, #4]
24012136:	f004 ff13 	bl	24016f60 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
2401213a:	ee07 5a90 	vmov	s15, r5
2401213e:	2300      	movs	r3, #0
    d->mempool = m;
24012140:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24012142:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24012144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24012148:	ee07 3a90 	vmov	s15, r3
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
2401214c:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
2401214e:	fe88 0a27 	vmaxnm.f32	s0, s16, s15
    d->mempool = m;
24012152:	6001      	str	r1, [r0, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24012154:	fe80 0a47 	vminnm.f32	s0, s0, s14
    d->maxDelay = maxDelay;
24012158:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2401215a:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2401215e:	bb15      	cbnz	r5, 240121a6 <tLagrangeDelay_initToPool+0x86>
24012160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
24012164:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
24012168:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
2401216c:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
24012170:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
24012174:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
24012178:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
2401217a:	61e5      	str	r5, [r4, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2401217c:	00a8      	lsls	r0, r5, #2
2401217e:	60a2      	str	r2, [r4, #8]
24012180:	f004 feee 	bl	24016f60 <mpool_alloc>
    d->lastIn = 0.0f;
24012184:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24012186:	4601      	mov	r1, r0
    tLagrangeDelay_setDelay(dl, d->delay);
24012188:	ed94 0a08 	vldr	s0, [r4, #32]
2401218c:	4630      	mov	r0, r6
    d->lastIn = 0.0f;
2401218e:	6123      	str	r3, [r4, #16]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24012190:	6061      	str	r1, [r4, #4]
    d->lastOut = 0.0f;
24012192:	60e3      	str	r3, [r4, #12]
    d->outPoint = 0;
24012194:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
24012198:	b002      	add	sp, #8
2401219a:	ecbd 8b02 	vpop	{d8}
2401219e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
240121a2:	f7ff bf5d 	b.w	24012060 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
240121a6:	1e6b      	subs	r3, r5, #1
240121a8:	422b      	tst	r3, r5
240121aa:	461a      	mov	r2, r3
240121ac:	d1da      	bne.n	24012164 <tLagrangeDelay_initToPool+0x44>
240121ae:	e7e5      	b.n	2401217c <tLagrangeDelay_initToPool+0x5c>

240121b0 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240121b0:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240121b2:	6953      	ldr	r3, [r2, #20]
240121b4:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
240121b6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240121ba:	3b01      	subs	r3, #1
240121bc:	4003      	ands	r3, r0
    return d->buff[tap];
240121be:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
240121c2:	ed92 0a00 	vldr	s0, [r2]
240121c6:	4770      	bx	lr

240121c8 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
240121c8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
240121ca:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
240121ce:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
240121d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
240121d4:	f64a 20ab 	movw	r0, #43691	; 0xaaab
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
240121d8:	1a59      	subs	r1, r3, r1
240121da:	6953      	ldr	r3, [r2, #20]
240121dc:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
240121de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
240121e2:	4419      	add	r1, r3
    Lfloat dm2 = alpha-2.0f;
240121e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
240121e8:	f6cb 602a 	movt	r0, #48682	; 0xbe2a
    alpha = 1.0f - alpha;
240121ec:	ee37 5ac0 	vsub.f32	s10, s15, s0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
240121f0:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
240121f2:	ee74 4ac0 	vsub.f32	s9, s9, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
240121f6:	69d3      	ldr	r3, [r2, #28]
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
240121f8:	ee05 0a90 	vmov	s11, r0
    Lfloat dm2 = alpha-2.0f;
240121fc:	ee37 7a40 	vsub.f32	s14, s14, s0
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24012200:	1c88      	adds	r0, r1, #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24012202:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24012206:	3b01      	subs	r3, #1
24012208:	6852      	ldr	r2, [r2, #4]
    Lfloat pdp1d = dp1*alpha;
2401220a:	ee25 5a24 	vmul.f32	s10, s10, s9
			(d->buff[(idx + 2) & d->bufferMask] * h3);
2401220e:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24012210:	440b      	add	r3, r1
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24012212:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24012216:	eb02 0080 	add.w	r0, r2, r0, lsl #2
2401221a:	ee65 6a25 	vmul.f32	s13, s10, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401221e:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24012220:	ee70 7a27 	vadd.f32	s15, s0, s15
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24012224:	ee26 6a25 	vmul.f32	s12, s12, s11
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24012228:	edd0 5a00 	vldr	s11, [r0]
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401222c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24012230:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24012234:	ee66 6aa5 	vmul.f32	s13, s13, s11
24012238:	ed93 4a00 	vldr	s8, [r3]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401223c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    		(d->buff[idx] * h1) +
24012240:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24012244:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
24012248:	eee4 6a06 	vfma.f32	s13, s8, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401224c:	3101      	adds	r1, #1
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401224e:	ee67 7aa3 	vmul.f32	s15, s15, s7
24012252:	edd3 5a00 	vldr	s11, [r3]
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
24012256:	4021      	ands	r1, r4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24012258:	ee27 7a24 	vmul.f32	s14, s14, s9

}
2401225c:	f85d 4b04 	ldr.w	r4, [sp], #4
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
24012260:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24012264:	ee27 7a05 	vmul.f32	s14, s14, s10
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24012268:	eee5 6aa7 	vfma.f32	s13, s11, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401226c:	ed92 6a00 	vldr	s12, [r2]
24012270:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24012274:	eea6 0a07 	vfma.f32	s0, s12, s14
24012278:	4770      	bx	lr
2401227a:	bf00      	nop

2401227c <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
2401227c:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2401227e:	6953      	ldr	r3, [r2, #20]
24012280:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
24012282:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24012286:	3b01      	subs	r3, #1
24012288:	4003      	ands	r3, r0
    d->buff[tap] = value;
2401228a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401228e:	ed82 0a00 	vstr	s0, [r2]
}
24012292:	4770      	bx	lr

24012294 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
24012294:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24012296:	6953      	ldr	r3, [r2, #20]
24012298:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
2401229a:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2401229e:	3b01      	subs	r3, #1
240122a0:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
240122a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240122a6:	edd3 7a00 	vldr	s15, [r3]
240122aa:	ee30 0a27 	vadd.f32	s0, s0, s15
240122ae:	ed83 0a00 	vstr	s0, [r3]
}
240122b2:	4770      	bx	lr

240122b4 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
240122b4:	6803      	ldr	r3, [r0, #0]
240122b6:	ed93 0a07 	vldr	s0, [r3, #28]
}
240122ba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
240122be:	4770      	bx	lr

240122c0 <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
240122c0:	b570      	push	{r4, r5, r6, lr}
240122c2:	460e      	mov	r6, r1
240122c4:	4605      	mov	r5, r0
    _tMempool* m = *mp;
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
240122c6:	202c      	movs	r0, #44	; 0x2c
{
240122c8:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240122cc:	6811      	ldr	r1, [r2, #0]
{
240122ce:	b082      	sub	sp, #8
240122d0:	eeb0 8a40 	vmov.f32	s16, s0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
240122d4:	9101      	str	r1, [sp, #4]
240122d6:	f004 fe43 	bl	24016f60 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240122da:	9901      	ldr	r1, [sp, #4]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
240122dc:	4604      	mov	r4, r0
240122de:	6028      	str	r0, [r5, #0]
    d->mempool = m;
240122e0:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
240122e2:	6186      	str	r6, [r0, #24]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240122e4:	00b0      	lsls	r0, r6, #2
240122e6:	f004 fe3b 	bl	24016f60 <mpool_alloc>

    d->gain = 1.0f;
240122ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
240122ee:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240122f0:	60a0      	str	r0, [r4, #8]
    if (val < min)
240122f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    d->gain = 1.0f;
240122f6:	edc4 7a01 	vstr	s15, [r4, #4]
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
240122fa:	edc4 7a08 	vstr	s15, [r4, #32]
    d->lastIn = 0.0f;
240122fe:	6123      	str	r3, [r4, #16]
24012300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d->lastOut = 0.0f;
24012304:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
24012306:	6263      	str	r3, [r4, #36]	; 0x24
    d->inPoint = 0;
24012308:	6163      	str	r3, [r4, #20]
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
2401230a:	682b      	ldr	r3, [r5, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
2401230c:	699a      	ldr	r2, [r3, #24]
2401230e:	d40b      	bmi.n	24012328 <tTapeDelay_initToPool+0x68>
24012310:	ee07 2a90 	vmov	s15, r2
24012314:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012318:	fe87 0ac8 	vminnm.f32	s0, s15, s16
2401231c:	ed83 0a07 	vstr	s0, [r3, #28]
}
24012320:	b002      	add	sp, #8
24012322:	ecbd 8b02 	vpop	{d8}
24012326:	bd70      	pop	{r4, r5, r6, pc}
        return min;
24012328:	eeb0 0a67 	vmov.f32	s0, s15
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
2401232c:	ed83 0a07 	vstr	s0, [r3, #28]
}
24012330:	b002      	add	sp, #8
24012332:	ecbd 8b02 	vpop	{d8}
24012336:	bd70      	pop	{r4, r5, r6, pc}

24012338 <tTapeDelay_free>:
{
24012338:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
2401233a:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
2401233c:	6821      	ldr	r1, [r4, #0]
2401233e:	68a0      	ldr	r0, [r4, #8]
24012340:	f004 fed0 	bl	240170e4 <mpool_free>
    mpool_free((char*)d, d->mempool);
24012344:	6821      	ldr	r1, [r4, #0]
24012346:	4620      	mov	r0, r4
}
24012348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
2401234c:	f004 beca 	b.w	240170e4 <mpool_free>

24012350 <tTapeDelay_tick>:
{
24012350:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24012352:	6801      	ldr	r1, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24012354:	edd1 7a01 	vldr	s15, [r1, #4]
24012358:	694a      	ldr	r2, [r1, #20]
2401235a:	688b      	ldr	r3, [r1, #8]
2401235c:	ee27 0a80 	vmul.f32	s0, s15, s0
24012360:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24012364:	ed83 0a00 	vstr	s0, [r3]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24012368:	e9d1 0305 	ldrd	r0, r3, [r1, #20]
2401236c:	3001      	adds	r0, #1
2401236e:	4298      	cmp	r0, r3
24012370:	f000 8081 	beq.w	24012476 <tTapeDelay_tick+0x126>
    Lfloat diff = (d->inPoint - d->idx);
24012374:	ee07 0a90 	vmov	s15, r0
24012378:	eef8 6a67 	vcvt.f32.u32	s13, s15
    int idx =  (int) d->idx;
2401237c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24012380:	1e5a      	subs	r2, r3, #1
24012382:	6148      	str	r0, [r1, #20]
{
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
    Lfloat c1 = 0.5f * (yy2 - yy0);
    Lfloat y0my1 = yy0 - yy1;
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012384:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    int idx =  (int) d->idx;
24012388:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
2401238c:	688c      	ldr	r4, [r1, #8]
    Lfloat diff = (d->inPoint - d->idx);
2401238e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int idx =  (int) d->idx;
24012392:	ee17 0a90 	vmov	r0, s15
    Lfloat alpha = d->idx - idx;
24012396:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    while (diff < 0.f) diff += d->maxDelay;
2401239a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
2401239e:	4402      	add	r2, r0
                                              d->buff[(idx + 2) % d->maxDelay],
240123a0:	f100 0e02 	add.w	lr, r0, #2
                                              d->buff[(idx + 1) % d->maxDelay],
240123a4:	f100 0c01 	add.w	ip, r0, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
240123a8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    Lfloat alpha = d->idx - idx;
240123ac:	ee37 5a45 	vsub.f32	s10, s14, s10
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
240123b0:	ed90 0a00 	vldr	s0, [r0]
    while (diff < 0.f) diff += d->maxDelay;
240123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              d->buff[(idx + 2) % d->maxDelay],
240123b8:	fbbe f0f3 	udiv	r0, lr, r3
240123bc:	fb03 ee10 	mls	lr, r3, r0, lr
                                              d->buff[(idx + 1) % d->maxDelay],
240123c0:	fbbc f0f3 	udiv	r0, ip, r3
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
240123c4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
                                              d->buff[(idx + 1) % d->maxDelay],
240123c8:	fb03 cc10 	mls	ip, r3, r0, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
240123cc:	fbb2 f0f3 	udiv	r0, r2, r3
240123d0:	ed9e 6a00 	vldr	s12, [lr]
240123d4:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
240123d8:	fb03 2210 	mls	r2, r3, r0, r2
240123dc:	ee30 6a06 	vadd.f32	s12, s0, s12
240123e0:	eddc 7a00 	vldr	s15, [ip]
240123e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
240123e8:	ee70 4a67 	vsub.f32	s9, s0, s15
240123ec:	ee36 6a67 	vsub.f32	s12, s12, s15
240123f0:	edd2 3a00 	vldr	s7, [r2]
    Lfloat c1 = 0.5f * (yy2 - yy0);
240123f4:	ee77 5ae3 	vsub.f32	s11, s15, s7
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
240123f8:	ee36 6a63 	vsub.f32	s12, s12, s7
    Lfloat y0my1 = yy0 - yy1;
240123fc:	ee73 7ac0 	vsub.f32	s15, s7, s0
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012400:	eee6 4a04 	vfma.f32	s9, s12, s8
    Lfloat c2 = y0my1 + c1 - c3;
24012404:	eee5 7a84 	vfma.f32	s15, s11, s8
24012408:	ee77 7ae4 	vsub.f32	s15, s15, s9
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
2401240c:	eee5 7a24 	vfma.f32	s15, s10, s9
24012410:	ee65 7a27 	vmul.f32	s15, s10, s15
24012414:	eee5 7a84 	vfma.f32	s15, s11, s8
24012418:	eea5 0a27 	vfma.f32	s0, s10, s15
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
2401241c:	ee07 3a90 	vmov	s15, r3
24012420:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24012424:	ed81 0a03 	vstr	s0, [r1, #12]
    while (diff < 0.f) diff += d->maxDelay;
24012428:	d506      	bpl.n	24012438 <tTapeDelay_tick+0xe8>
2401242a:	ee76 6aa7 	vadd.f32	s13, s13, s15
2401242e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012436:	d4f8      	bmi.n	2401242a <tTapeDelay_tick+0xda>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24012438:	edd1 5a07 	vldr	s11, [r1, #28]
2401243c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24012440:	ee76 6ae5 	vsub.f32	s13, s13, s11
24012444:	ee86 6aa5 	vdiv.f32	s12, s13, s11
24012448:	ee76 6a05 	vadd.f32	s13, s12, s10
    d->idx += d->inc;
2401244c:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24012450:	edc1 6a08 	vstr	s13, [r1, #32]
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
24012454:	eeb4 7ae7 	vcmpe.f32	s14, s15
    d->idx += d->inc;
24012458:	ed81 7a09 	vstr	s14, [r1, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
2401245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012460:	db08      	blt.n	24012474 <tTapeDelay_tick+0x124>
24012462:	ee37 7a67 	vsub.f32	s14, s14, s15
24012466:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401246e:	daf8      	bge.n	24012462 <tTapeDelay_tick+0x112>
24012470:	ed81 7a09 	vstr	s14, [r1, #36]	; 0x24
}
24012474:	bd10      	pop	{r4, pc}
24012476:	2200      	movs	r2, #0
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24012478:	4610      	mov	r0, r2
2401247a:	ee06 2a90 	vmov	s13, r2
2401247e:	e77d      	b.n	2401237c <tTapeDelay_tick+0x2c>

24012480 <tTapeDelay_setDelay>:
    if (val < min)
24012480:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tTapeDelay* d = *dl;
24012484:	6803      	ldr	r3, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
24012486:	699a      	ldr	r2, [r3, #24]
24012488:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012490:	d405      	bmi.n	2401249e <tTapeDelay_setDelay+0x1e>
24012492:	ee07 2a90 	vmov	s15, r2
24012496:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401249a:	fec7 7ac0 	vminnm.f32	s15, s15, s0
2401249e:	edc3 7a07 	vstr	s15, [r3, #28]
}
240124a2:	4770      	bx	lr

240124a4 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
240124a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
240124a8:	1e16      	subs	r6, r2, #0
{
240124aa:	b083      	sub	sp, #12
240124ac:	460c      	mov	r4, r1
240124ae:	4607      	mov	r7, r0
    if (extraQuality) offset = 6;
240124b0:	bf0b      	itete	eq
240124b2:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
240124b6:	f04f 0805 	movne.w	r8, #5
240124ba:	f04f 0900 	moveq.w	r9, #0
240124be:	f04f 0906 	movne.w	r9, #6
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
240124c2:	2902      	cmp	r1, #2
240124c4:	d011      	beq.n	240124ea <tOversampler_init+0x46>
240124c6:	2904      	cmp	r1, #4
240124c8:	d00f      	beq.n	240124ea <tOversampler_init+0x46>
240124ca:	2920      	cmp	r1, #32
240124cc:	dc45      	bgt.n	2401255a <tOversampler_init+0xb6>
240124ce:	2907      	cmp	r1, #7
240124d0:	dc02      	bgt.n	240124d8 <tOversampler_init+0x34>
}
240124d2:	b003      	add	sp, #12
240124d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
240124d8:	f240 1101 	movw	r1, #257	; 0x101
240124dc:	f1a4 0208 	sub.w	r2, r4, #8
240124e0:	f2c0 1100 	movt	r1, #256	; 0x100
240124e4:	40d1      	lsrs	r1, r2
240124e6:	07ca      	lsls	r2, r1, #31
240124e8:	d5f3      	bpl.n	240124d2 <tOversampler_init+0x2e>
    _tMempool* m = *mp;
240124ea:	6999      	ldr	r1, [r3, #24]
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
240124ec:	2028      	movs	r0, #40	; 0x28
240124ee:	9101      	str	r1, [sp, #4]
240124f0:	f004 fd36 	bl	24016f60 <mpool_alloc>
        os->mempool = m;
240124f4:	9901      	ldr	r1, [sp, #4]
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
240124f6:	ee07 4a90 	vmov	s15, r4
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
240124fa:	6038      	str	r0, [r7, #0]
240124fc:	4605      	mov	r5, r0
        os->offset = offset;
240124fe:	f8c0 9010 	str.w	r9, [r0, #16]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24012502:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->allowHighQuality = extraQuality;
24012506:	7206      	strb	r6, [r0, #8]
        os->ratio = os->maxRatio;
24012508:	60c4      	str	r4, [r0, #12]
        os->maxRatio = maxRatio;
2401250a:	e9c0 1400 	strd	r1, r4, [r0]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
2401250e:	f00a f9c9 	bl	2401c8a4 <log2f>
24012512:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012516:	f24d 0214 	movw	r2, #53268	; 0xd014
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2401251a:	9901      	ldr	r1, [sp, #4]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
2401251c:	ee17 3a90 	vmov	r3, s15
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012520:	f2c2 4202 	movt	r2, #9218	; 0x2402
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24012524:	4443      	add	r3, r8
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012526:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
2401252a:	f640 1240 	movw	r2, #2368	; 0x940
        os->phaseLength = os->numTaps / os->ratio;
2401252e:	fbb0 f4f4 	udiv	r4, r0, r4
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
24012532:	f2c2 0200 	movt	r2, #8192	; 0x2000
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012536:	6228      	str	r0, [r5, #32]
        os->phaseLength = os->numTaps / os->ratio;
24012538:	626c      	str	r4, [r5, #36]	; 0x24
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2401253a:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
2401253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24012540:	616b      	str	r3, [r5, #20]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24012542:	f004 fd0d 	bl	24016f60 <mpool_alloc>
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24012546:	6a2b      	ldr	r3, [r5, #32]
24012548:	9901      	ldr	r1, [sp, #4]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2401254a:	61a8      	str	r0, [r5, #24]
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2401254c:	00d8      	lsls	r0, r3, #3
2401254e:	f004 fd07 	bl	24016f60 <mpool_alloc>
24012552:	61e8      	str	r0, [r5, #28]
}
24012554:	b003      	add	sp, #12
24012556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2401255a:	2940      	cmp	r1, #64	; 0x40
2401255c:	d0c5      	beq.n	240124ea <tOversampler_init+0x46>
2401255e:	b003      	add	sp, #12
24012560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

24012564 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#else
void tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#endif
{
24012564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
24012568:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
2401256a:	68fb      	ldr	r3, [r7, #12]
2401256c:	2b01      	cmp	r3, #1
2401256e:	d060      	beq.n	24012632 <tOversampler_upsample+0xce>
    {
        output[0] = input;
        return;
    }
    
    Lfloat *pState = os->upState;                 /* State pointer */
24012570:	69be      	ldr	r6, [r7, #24]
    Lfloat *pStateCur;
    Lfloat *ptr1;                               /* Temporary pointer for state buffer */
    Lfloat *ptr2;                               /* Temporary pointer for coefficient buffer */
    Lfloat sum0;                                /* Accumulators */
    uint_fast16_t i, tapCnt;                    /* Loop counters */
    uint_fast16_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
24012572:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
24012574:	f8d7 9014 	ldr.w	r9, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
24012578:	eb06 0385 	add.w	r3, r6, r5, lsl #2
2401257c:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
24012580:	f8d7 800c 	ldr.w	r8, [r7, #12]
    
    while (i > 0U)
24012584:	f1b8 0f00 	cmp.w	r8, #0
24012588:	d037      	beq.n	240125fa <tOversampler_upsample+0x96>
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
2401258a:	2300      	movs	r3, #0
    while (i > 0U)
2401258c:	4644      	mov	r4, r8
    j = 1U;
2401258e:	f04f 0e01 	mov.w	lr, #1
        while (tapCnt > 0U)
24012592:	ee06 3a10 	vmov	s12, r3
        ptr2 = pCoeffs + (os->ratio - j);
24012596:	eba4 030e 	sub.w	r3, r4, lr
2401259a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
        while (tapCnt > 0U)
2401259e:	b325      	cbz	r5, 240125ea <tOversampler_upsample+0x86>
240125a0:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
240125a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
240125a6:	d135      	bne.n	24012614 <tOversampler_upsample+0xb0>
        sum0 = 0.0f;
240125a8:	2000      	movs	r0, #0
            ptr2 += os->ratio;
240125aa:	462a      	mov	r2, r5
        ptr1 = pState;
240125ac:	46b4      	mov	ip, r6
        sum0 = 0.0f;
240125ae:	ee07 0a90 	vmov	s15, r0
            sum0 += *ptr1++ * *ptr2;
240125b2:	ecf3 6a01 	vldmia	r3!, {s13}
        while (tapCnt > 0U)
240125b6:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
240125b8:	ecbc 7a01 	vldmia	ip!, {s14}
240125bc:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
240125c0:	d1f7      	bne.n	240125b2 <tOversampler_upsample+0x4e>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
240125c2:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
240125c6:	45f0      	cmp	r8, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
240125c8:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
240125cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240125d0:	ee67 7a27 	vmul.f32	s15, s14, s15
240125d4:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
240125d8:	d00f      	beq.n	240125fa <tOversampler_upsample+0x96>
        ptr2 = pCoeffs + (os->ratio - j);
240125da:	68fc      	ldr	r4, [r7, #12]
240125dc:	469e      	mov	lr, r3
240125de:	eba4 030e 	sub.w	r3, r4, lr
240125e2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
        while (tapCnt > 0U)
240125e6:	2d00      	cmp	r5, #0
240125e8:	d1da      	bne.n	240125a0 <tOversampler_upsample+0x3c>
240125ea:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
240125ee:	45f0      	cmp	r8, lr
        j++;
240125f0:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
240125f4:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
240125f8:	d1ef      	bne.n	240125da <tOversampler_upsample+0x76>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
240125fa:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
240125fc:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
24012600:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
24012602:	d005      	beq.n	24012610 <tOversampler_upsample+0xac>
    {
        *pStateCur++ = *pState++;
24012604:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
24012608:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
2401260a:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
2401260e:	d1f9      	bne.n	24012604 <tOversampler_upsample+0xa0>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
24012610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
24012614:	2200      	movs	r2, #0
        ptr1 = pState;
24012616:	4630      	mov	r0, r6
        sum0 = 0.0f;
24012618:	ee07 2a90 	vmov	s15, r2
            ptr2 += os->ratio;
2401261c:	462a      	mov	r2, r5
            sum0 += *ptr1++ * *ptr2;
2401261e:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
24012622:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
24012624:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
24012628:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
2401262a:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
2401262e:	d1f6      	bne.n	2401261e <tOversampler_upsample+0xba>
24012630:	e7c7      	b.n	240125c2 <tOversampler_upsample+0x5e>
        output[0] = input;
24012632:	ed81 0a00 	vstr	s0, [r1]
}
24012636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2401263a:	bf00      	nop

2401263c <tOversampler_downsample>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#else
Lfloat tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#endif
{
2401263c:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
2401263e:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
24012640:	68f2      	ldr	r2, [r6, #12]
24012642:	2a01      	cmp	r2, #1
24012644:	d02c      	beq.n	240126a0 <tOversampler_downsample+0x64>
    uint32_t i, tapCnt;
    Lfloat output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
24012646:	f64f 70ff 	movw	r0, #65535	; 0xffff
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
2401264a:	6a33      	ldr	r3, [r6, #32]
    Lfloat *pState = os->downState;                 /* State pointer */
2401264c:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
2401264e:	f6c3 70ff 	movt	r0, #16383	; 0x3fff
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
24012652:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
24012654:	4418      	add	r0, r3
24012656:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
2401265a:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
2401265e:	3a01      	subs	r2, #1
        *pStateCur++ = *input++;
24012660:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
24012664:	d1f9      	bne.n	2401265a <tOversampler_downsample+0x1e>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
24012666:	b1fb      	cbz	r3, 240126a8 <tOversampler_downsample+0x6c>
    acc0 = 0.0f;
24012668:	2100      	movs	r1, #0
    while (tapCnt > 0U)
2401266a:	461a      	mov	r2, r3
    acc0 = 0.0f;
2401266c:	ee00 1a10 	vmov	s0, r1
    px0 = pState;
24012670:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
24012672:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
24012676:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
24012678:	ecf1 7a01 	vldmia	r1!, {s15}
2401267c:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
24012680:	d1f7      	bne.n	24012672 <tOversampler_downsample+0x36>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
24012682:	68f2      	ldr	r2, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
24012684:	3b01      	subs	r3, #1
    pStateCur = os->downState;
24012686:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
24012688:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    while (tapCnt > 0U)
2401268c:	d006      	beq.n	2401269c <tOversampler_downsample+0x60>
2401268e:	4601      	mov	r1, r0
    {
        *pStateCur++ = *pState++;
24012690:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
24012694:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
24012696:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
2401269a:	d1f9      	bne.n	24012690 <tOversampler_downsample+0x54>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
2401269c:	bc70      	pop	{r4, r5, r6}
2401269e:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
240126a0:	ed91 0a00 	vldr	s0, [r1]
}
240126a4:	bc70      	pop	{r4, r5, r6}
240126a6:	4770      	bx	lr
    pState = pState + os->ratio;
240126a8:	68f2      	ldr	r2, [r6, #12]
    acc0 = 0.0f;
240126aa:	2100      	movs	r1, #0
    pStateCur = os->downState;
240126ac:	69f0      	ldr	r0, [r6, #28]
    tapCnt = (numTaps - 1U);
240126ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pState = pState + os->ratio;
240126b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    acc0 = 0.0f;
240126b6:	ee00 1a10 	vmov	s0, r1
240126ba:	e7e8      	b.n	2401268e <tOversampler_downsample+0x52>

240126bc <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
240126bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
240126be:	698f      	ldr	r7, [r1, #24]
{
240126c0:	4606      	mov	r6, r0
240126c2:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240126c4:	2020      	movs	r0, #32
240126c6:	4639      	mov	r1, r7
240126c8:	f004 fc4a 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
240126cc:	f24b 7317 	movw	r3, #46871	; 0xb717
    c->rnd = 0.25f;
240126d0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    c->op = 4;
240126d4:	2204      	movs	r2, #4
    c->div = 1.0f / SCALAR;
240126d6:	f6c3 1351 	movt	r3, #14673	; 0x3951
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240126da:	6030      	str	r0, [r6, #0]
    c->op = 4;
240126dc:	6142      	str	r2, [r0, #20]
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240126de:	4604      	mov	r4, r0
    c->rnd = 0.25f;
240126e0:	edc0 7a04 	vstr	s15, [r0, #16]
    c->srr = 0.25f;
240126e4:	edc0 7a01 	vstr	s15, [r0, #4]
    c->div = 1.0f / SCALAR;
240126e8:	60c3      	str	r3, [r0, #12]
    c->mempool = m;
240126ea:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240126ec:	2010      	movs	r0, #16
    _tMempool* m = *mp;
240126ee:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240126f0:	4629      	mov	r1, r5
240126f2:	f004 fc35 	bl	24016f60 <mpool_alloc>
    s->hold = 0.0f;
240126f6:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240126f8:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
240126fa:	f64c 42f6 	movw	r2, #52470	; 0xccf6
    s->hold = 0.0f;
240126fe:	6083      	str	r3, [r0, #8]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24012700:	f649 139a 	movw	r3, #39322	; 0x999a
    s->invRatio = 1.0f;
24012704:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24012708:	f6c3 1212 	movt	r2, #14610	; 0x3912
    s->count = 0;
2401270c:	2100      	movs	r1, #0
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401270e:	f6c3 6399 	movt	r3, #16025	; 0x3e99
    s->mempool = m;
24012712:	6005      	str	r5, [r0, #0]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24012714:	ee07 2a10 	vmov	s14, r2
    s->invRatio = 1.0f;
24012718:	edc0 7a01 	vstr	s15, [r0, #4]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401271c:	ee07 3a90 	vmov	s15, r3
    s->count = 0;
24012720:	60c1      	str	r1, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24012722:	edd4 6a03 	vldr	s13, [r4, #12]
24012726:	eee6 7a87 	vfma.f32	s15, s13, s14
2401272a:	edc4 7a06 	vstr	s15, [r4, #24]
}
2401272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24012730 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24012730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    _tCrusher* c = *cr;
24012734:	6803      	ldr	r3, [r0, #0]
    if (rnd <= 0.0000001f) return input;
24012736:	f64b 7295 	movw	r2, #49045	; 0xbf95
2401273a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample *= SCALAR; // SCALAR is 5000 by default
2401273e:	f2c4 519c 	movt	r1, #17820	; 0x459c
    
    sample = (int32_t) sample;
    
    sample *= c->div;
24012742:	edd3 5a03 	vldr	s11, [r3, #12]
    rnd = fabsf(rnd);
24012746:	edd3 7a04 	vldr	s15, [r3, #16]
    if (rnd <= 0.0000001f) return input;
2401274a:	f2c3 32d6 	movt	r2, #13270	; 0x33d6
    sample *= SCALAR; // SCALAR is 5000 by default
2401274e:	ee07 1a10 	vmov	s14, r1
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24012752:	6959      	ldr	r1, [r3, #20]
    rnd = fabsf(rnd);
24012754:	eef0 7ae7 	vabs.f32	s15, s15
    sample *= SCALAR; // SCALAR is 5000 by default
24012758:	ee20 0a07 	vmul.f32	s0, s0, s14
    if (rnd <= 0.0000001f) return input;
2401275c:	ee07 2a10 	vmov	s14, r2
24012760:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24012764:	eef4 7ac7 	vcmpe.f32	s15, s14
    sample = (int32_t) sample;
24012768:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012770:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    sample *= c->div;
24012774:	ee20 0a25 	vmul.f32	s0, s0, s11
    unholy.i = (unholy.i ^ op);
24012778:	ee10 2a10 	vmov	r2, s0
2401277c:	ea82 52c1 	eor.w	r2, r2, r1, lsl #23
24012780:	ee00 2a10 	vmov	s0, r2
24012784:	fe80 0a46 	vminnm.f32	s0, s0, s12
24012788:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
    if (rnd <= 0.0000001f) return input;
2401278c:	d905      	bls.n	2401279a <tCrusher_tick+0x6a>
    return roundf(input * scale) * rnd;
2401278e:	ee80 7a27 	vdiv.f32	s14, s0, s15
24012792:	feb8 7a47 	vrinta.f32	s14, s14
24012796:	ee27 0a87 	vmul.f32	s0, s15, s14
    _tSampleReducer* s = *sr;
2401279a:	69da      	ldr	r2, [r3, #28]
    if (s->count > s->invRatio)
2401279c:	68d1      	ldr	r1, [r2, #12]
2401279e:	edd2 7a01 	vldr	s15, [r2, #4]
240127a2:	ee07 1a10 	vmov	s14, r1
240127a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240127aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
240127ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240127b2:	dc08      	bgt.n	240127c6 <tCrusher_tick+0x96>
    s->count++;
240127b4:	3101      	adds	r1, #1
    return s->hold;
240127b6:	ed92 0a02 	vldr	s0, [r2, #8]
    s->count++;
240127ba:	60d1      	str	r1, [r2, #12]
    
    sample = LEAF_round(sample, c->rnd);
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240127bc:	edd3 7a06 	vldr	s15, [r3, #24]
    
}
240127c0:	ee20 0a27 	vmul.f32	s0, s0, s15
240127c4:	4770      	bx	lr
        s->hold = input;
240127c6:	2101      	movs	r1, #1
240127c8:	ed82 0a02 	vstr	s0, [r2, #8]
    s->count++;
240127cc:	60d1      	str	r1, [r2, #12]
    return sample * c->gain;
240127ce:	edd3 7a06 	vldr	s15, [r3, #24]
}
240127d2:	ee20 0a27 	vmul.f32	s0, s0, s15
240127d6:	4770      	bx	lr

240127d8 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
240127d8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
240127dc:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
240127de:	ee20 0a27 	vmul.f32	s0, s0, s15
240127e2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240127e6:	ed83 0a05 	vstr	s0, [r3, #20]
}
240127ea:	4770      	bx	lr

240127ec <tCrusher_setQuality>:
{
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
    
    c->div = 0.01f + val * SCALAR;
240127ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240127f0:	f24d 730a 	movw	r3, #55050	; 0xd70a
240127f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240127f8:	2100      	movs	r1, #0
240127fa:	f2c4 529c 	movt	r2, #17820	; 0x459c
240127fe:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24012802:	ee06 1a90 	vmov	s13, r1
24012806:	ee07 2a10 	vmov	s14, r2
2401280a:	fe80 0a67 	vminnm.f32	s0, s0, s15
2401280e:	ee07 3a90 	vmov	s15, r3
24012812:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24012816:	f64c 42f6 	movw	r2, #52470	; 0xccf6
2401281a:	f649 139a 	movw	r3, #39322	; 0x999a
    c->div = 0.01f + val * SCALAR;
2401281e:	eee0 7a07 	vfma.f32	s15, s0, s14
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24012822:	f6c3 6399 	movt	r3, #16025	; 0x3e99
24012826:	f6c3 1212 	movt	r2, #14610	; 0x3912
2401282a:	ee07 3a10 	vmov	s14, r3
2401282e:	ee06 2a90 	vmov	s13, r2
    _tCrusher* c = *cr;
24012832:	6803      	ldr	r3, [r0, #0]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24012834:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24012838:	edc3 7a03 	vstr	s15, [r3, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2401283c:	ed83 7a06 	vstr	s14, [r3, #24]
}
24012840:	4770      	bx	lr
24012842:	bf00      	nop

24012844 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24012844:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24012846:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401284a:	4770      	bx	lr

2401284c <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2401284c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
24012850:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24012852:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24012856:	eeb4 0a67 	vcmp.f32	s0, s15
2401285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401285e:	d809      	bhi.n	24012874 <tCrusher_setSamplingRatio+0x28>
24012860:	eeb5 0a40 	vcmp.f32	s0, #0.0
24012864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012868:	db04      	blt.n	24012874 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2401286a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
2401286e:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24012870:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24012874:	4770      	bx	lr
24012876:	bf00      	nop

24012878 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24012878:	b570      	push	{r4, r5, r6, lr}
2401287a:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401287e:	698d      	ldr	r5, [r1, #24]
{
24012880:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24012882:	206c      	movs	r0, #108	; 0x6c
24012884:	4629      	mov	r1, r5
24012886:	f004 fb6b 	bl	24016f60 <mpool_alloc>
2401288a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401288c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401288e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
24012892:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24012894:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24012896:	ed93 8a00 	vldr	s16, [r3]
2401289a:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401289e:	ee80 0a08 	vdiv.f32	s0, s0, s16
240128a2:	f009 ff25 	bl	2401c6f0 <expf>
240128a6:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240128aa:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
240128ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
240128b2:	f009 ff1d 	bl	2401c6f0 <expf>
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
    c->invR = 2.0f; //inverse of ratio
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
    c->inv4W = 1.0f / (4.0f * c->W) ;
240128b6:	f64a 22ab 	movw	r2, #43691	; 0xaaab
    c->x_G[0] = 0.0f;
240128ba:	2300      	movs	r3, #0
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240128bc:	ed84 0a02 	vstr	s0, [r4, #8]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240128c0:	f6c3 622a 	movt	r2, #15914	; 0x3e2a
    c->x_G[0] = 0.0f;
240128c4:	6263      	str	r3, [r4, #36]	; 0x24
    c->R = 0.5f; // compression Ratio
240128c6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    c->isActive = 0;
240128ca:	6463      	str	r3, [r4, #68]	; 0x44
    c->invR = 2.0f; //inverse of ratio
240128cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    c->x_G[1] = 0.0f;
240128d0:	62a3      	str	r3, [r4, #40]	; 0x28
    c->M = 3.0f; // decibel Make-up gain
240128d2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c->y_G[0] = 0.0f;
240128d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->W = 1.5f; // decibel Width of knee transition
240128d8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    c->y_G[1] = 0.0f;
240128dc:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
240128de:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
240128e0:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
240128e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
240128e4:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240128e6:	60e3      	str	r3, [r4, #12]
    c->R = 0.5f; // compression Ratio
240128e8:	ed84 6a04 	vstr	s12, [r4, #16]
    c->invR = 2.0f; //inverse of ratio
240128ec:	edc4 6a07 	vstr	s13, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
240128f0:	ed84 7a06 	vstr	s14, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
240128f4:	edc4 7a05 	vstr	s15, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240128f8:	6222      	str	r2, [r4, #32]
}
240128fa:	ecbd 8b02 	vpop	{d8}
240128fe:	bd70      	pop	{r4, r5, r6, pc}

24012900 <tCompressor_tickWithTableHardKnee>:
    return alias.f;
24012900:	ee10 2a10 	vmov	r2, s0
}

//requires tables to be set with set function
Lfloat tCompressor_tickWithTableHardKnee(tCompressor* const comp, Lfloat in)
{
    _tCompressor* c = *comp;
24012904:	6803      	ldr	r3, [r0, #0]
24012906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000

    Lfloat slope, overshoot;

    in = fastabsf(in);
    int inAmpIndex = LEAF_clip (0, (in * c->atodbScalar) - c->atodbOffset, c->atodbTableSizeMinus1);
2401290a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
2401290e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
24012912:	ee00 2a10 	vmov	s0, r2
24012916:	6e5a      	ldr	r2, [r3, #100]	; 0x64
24012918:	ee97 7a80 	vfnms.f32	s14, s15, s0
    if (val < min)
2401291c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
24012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012924:	d460      	bmi.n	240129e8 <tCompressor_tickWithTableHardKnee+0xe8>
24012926:	ee07 2a90 	vmov	s15, r2
2401292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401292e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24012932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24012936:	ee17 1a90 	vmov	r1, s15
    Lfloat in_db = c->atodbTable[inAmpIndex];
2401293a:	0089      	lsls	r1, r1, #2
2401293c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    slope = 1.0f - c->invR; // feed-forward topology;

    overshoot = in_db - c->T;

  // simpler hard-knee version (more efficient)
    if (overshoot <= 0.0f)
2401293e:	2200      	movs	r2, #0
    overshoot = in_db - c->T;
24012940:	edd3 7a03 	vldr	s15, [r3, #12]
    Lfloat in_db = c->atodbTable[inAmpIndex];
24012944:	4408      	add	r0, r1
    c->y_T[1] = c->y_T[0];
24012946:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
    slope = 1.0f - c->invR; // feed-forward topology;
2401294a:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat in_db = c->atodbTable[inAmpIndex];
2401294e:	ed90 7a00 	vldr	s14, [r0]
    c->y_T[1] = c->y_T[0];
24012952:	edc3 6a10 	vstr	s13, [r3, #64]	; 0x40
    overshoot = in_db - c->T;
24012956:	ee37 7a67 	vsub.f32	s14, s14, s15
    if (overshoot <= 0.0f)
2401295a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
2401295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012962:	d93d      	bls.n	240129e0 <tCompressor_tickWithTableHardKnee+0xe0>
    slope = 1.0f - c->invR; // feed-forward topology;
24012964:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
    }
    else
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
24012968:	2201      	movs	r2, #1
    slope = 1.0f - c->invR; // feed-forward topology;
2401296a:	ee77 7ac6 	vsub.f32	s15, s15, s12
        out_db = in_db + slope * overshoot;
2401296e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }

    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
24012972:	eef4 6ae7 	vcmpe.f32	s13, s15
    c->x_T[0] = out_db - in_db;
24012976:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401297a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401297e:	645a      	str	r2, [r3, #68]	; 0x44
    if (c->x_T[0] > c->y_T[1])
24012980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24012984:	bf4c      	ite	mi
24012986:	ed93 6a01 	vldrmi	s12, [r3, #4]
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
2401298a:	ed93 6a02 	vldrpl	s12, [r3, #8]
2401298e:	ee37 7a46 	vsub.f32	s14, s14, s12
24012992:	ee67 7a27 	vmul.f32	s15, s14, s15
    Lfloat attenuationDb = c->M - c->y_T[0];
   // tempdbToA = dbtoa(attenuationDb);
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
24012996:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
2401299a:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuationDb = c->M - c->y_T[0];
2401299e:	edd3 6a06 	vldr	s13, [r3, #24]
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
240129a2:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
240129a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    Lfloat attenuationDb = c->M - c->y_T[0];
240129aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
240129ae:	ee96 7a27 	vfnms.f32	s14, s12, s15
240129b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
240129b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240129ba:	d417      	bmi.n	240129ec <tCompressor_tickWithTableHardKnee+0xec>
240129bc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
240129c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240129c4:	fec7 7ac7 	vminnm.f32	s15, s15, s14
240129c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240129cc:	ee17 2a90 	vmov	r2, s15
    Lfloat attenuation = c->dbtoaTable[attenuationDbIndex];
240129d0:	0092      	lsls	r2, r2, #2
240129d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240129d4:	4413      	add	r3, r2
    return attenuation * in;
240129d6:	edd3 7a00 	vldr	s15, [r3]
}
240129da:	ee20 0a27 	vmul.f32	s0, s0, s15
240129de:	4770      	bx	lr
240129e0:	ee07 2a90 	vmov	s15, r2
        c->isActive = 0;
240129e4:	2200      	movs	r2, #0
240129e6:	e7c4      	b.n	24012972 <tCompressor_tickWithTableHardKnee+0x72>
240129e8:	2100      	movs	r1, #0
240129ea:	e7a7      	b.n	2401293c <tCompressor_tickWithTableHardKnee+0x3c>
240129ec:	2200      	movs	r2, #0
240129ee:	e7f0      	b.n	240129d2 <tCompressor_tickWithTableHardKnee+0xd2>

240129f0 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
240129f0:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240129f2:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
240129f6:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240129f8:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240129fc:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
24012a00:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24012a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
24012a06:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
24012a08:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24012a0a:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
24012a0c:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24012a0e:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24012a12:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24012a14:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24012a18:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24012a1c:	ee07 3a90 	vmov	s15, r3
24012a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24012a24:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24012a28:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24012a2c:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24012a30:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24012a34:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
24012a38:	4770      	bx	lr
24012a3a:	bf00      	nop

24012a3c <tCompressor_setSampleRate>:
    c->tauRelease = fastExp4(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
24012a3c:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
24012a3e:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
24012a42:	4770      	bx	lr

24012a44 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
24012a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
24012a46:	4614      	mov	r4, r2
{
24012a48:	4606      	mov	r6, r0
24012a4a:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012a4c:	2018      	movs	r0, #24
{
24012a4e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24012a52:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
24012a56:	b083      	sub	sp, #12
24012a58:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012a5c:	4639      	mov	r1, r7
{
24012a5e:	eeb0 8a41 	vmov.f32	s16, s2
24012a62:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012a66:	f004 fa7b 	bl	24016f60 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012a6a:	4621      	mov	r1, r4
    p->curr=0.0f;
24012a6c:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012a6e:	4604      	mov	r4, r0
24012a70:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012a72:	ed9d 0a01 	vldr	s0, [sp, #4]
24012a76:	3014      	adds	r0, #20
    p->mempool = m;
24012a78:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24012a7c:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24012a80:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012a82:	f7ff f8ff 	bl	24011c84 <tPowerFollower_initToPool>
    p->mode=mode;
24012a86:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
24012a88:	ed84 8a02 	vstr	s16, [r4, #8]
}
24012a8c:	b003      	add	sp, #12
24012a8e:	ecbd 8b02 	vpop	{d8}
24012a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

24012a94 <tFeedbackLeveler_initToPool>:
{
24012a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24012a96:	6817      	ldr	r7, [r2, #0]
{
24012a98:	4614      	mov	r4, r2
24012a9a:	4606      	mov	r6, r0
24012a9c:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012a9e:	2018      	movs	r0, #24
24012aa0:	4639      	mov	r1, r7
{
24012aa2:	ed2d 8b02 	vpush	{d8}
24012aa6:	eef0 8a40 	vmov.f32	s17, s0
24012aaa:	b083      	sub	sp, #12
24012aac:	eeb0 8a41 	vmov.f32	s16, s2
24012ab0:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012ab4:	f004 fa54 	bl	24016f60 <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012ab8:	4621      	mov	r1, r4
    p->curr=0.0f;
24012aba:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24012abc:	4604      	mov	r4, r0
24012abe:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012ac0:	ed9d 0a01 	vldr	s0, [sp, #4]
24012ac4:	3014      	adds	r0, #20
    p->mempool = m;
24012ac6:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24012aca:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24012ace:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24012ad0:	f7ff f8d8 	bl	24011c84 <tPowerFollower_initToPool>
    p->mode=mode;
24012ad4:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
24012ad6:	ed84 8a02 	vstr	s16, [r4, #8]
}
24012ada:	b003      	add	sp, #12
24012adc:	ecbd 8b02 	vpop	{d8}
24012ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
24012ae2:	bf00      	nop

24012ae4 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
24012ae4:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
24012ae6:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
24012ae8:	f104 0014 	add.w	r0, r4, #20
24012aec:	f7ff f8e4 	bl	24011cb8 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
24012af0:	6821      	ldr	r1, [r4, #0]
24012af2:	4620      	mov	r0, r4
}
24012af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24012af8:	f004 baf4 	b.w	240170e4 <mpool_free>

24012afc <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
24012afc:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
24012afe:	ed83 0a02 	vstr	s0, [r3, #8]
}
24012b02:	4770      	bx	lr

24012b04 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24012b04:	6800      	ldr	r0, [r0, #0]
24012b06:	3014      	adds	r0, #20
24012b08:	f7ff b8da 	b.w	24011cc0 <tPowerFollower_setFactor>

24012b0c <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24012b0c:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
24012b0e:	60d9      	str	r1, [r3, #12]
}
24012b10:	4770      	bx	lr
24012b12:	bf00      	nop

24012b14 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
24012b14:	b510      	push	{r4, lr}
24012b16:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24012b1a:	6804      	ldr	r4, [r0, #0]
{
24012b1c:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24012b20:	f104 0014 	add.w	r0, r4, #20
24012b24:	f7ff f8de 	bl	24011ce4 <tPowerFollower_tick>
24012b28:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24012b2c:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24012b2e:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24012b32:	b91b      	cbnz	r3, 24012b3c <tFeedbackLeveler_tick+0x28>
24012b34:	ee07 3a90 	vmov	s15, r3
24012b38:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
24012b3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012b40:	edd4 6a02 	vldr	s13, [r4, #8]
24012b44:	eee6 7ac7 	vfms.f32	s15, s13, s14
24012b48:	ee27 0a88 	vmul.f32	s0, s15, s16
24012b4c:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
24012b50:	ecbd 8b02 	vpop	{d8}
24012b54:	bd10      	pop	{r4, pc}
24012b56:	bf00      	nop

24012b58 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
24012b58:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
24012b5a:	ed83 0a01 	vstr	s0, [r3, #4]
}
24012b5e:	4770      	bx	lr

24012b60 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
24012b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24012b62:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
24012b66:	699e      	ldr	r6, [r3, #24]
{
24012b68:	4614      	mov	r4, r2
24012b6a:	460d      	mov	r5, r1
24012b6c:	4607      	mov	r7, r0
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24012b6e:	4631      	mov	r1, r6
24012b70:	206c      	movs	r0, #108	; 0x6c
{
24012b72:	eef0 9a40 	vmov.f32	s19, s0
24012b76:	eeb0 9a60 	vmov.f32	s18, s1
24012b7a:	eef0 8a61 	vmov.f32	s17, s3
24012b7e:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24012b82:	f004 f9ed 	bl	24016f60 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
24012b8a:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24012b8e:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
24012b90:	2300      	movs	r3, #0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012b92:	f2c4 4279 	movt	r2, #17529	; 0x4479
24012b96:	eef8 5a67 	vcvt.f32.u32	s11, s15
    adsr->mempool = m;
24012b9a:	6006      	str	r6, [r0, #0]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
24012b9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012ba0:	ee07 2a10 	vmov	s14, r2
    LEAF* leaf = adsr->mempool->leaf;
24012ba4:	6871      	ldr	r1, [r6, #4]
    adsr->exp_buff = expBuffer;
24012ba6:	6045      	str	r5, [r0, #4]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24012ba8:	1e65      	subs	r5, r4, #1
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012baa:	ee65 5a87 	vmul.f32	s11, s11, s14
    adsr->buff_size = bufferSize;
24012bae:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24012bb0:	60c5      	str	r5, [r0, #12]
    adsr->sampleRate = leaf->sampleRate;
24012bb2:	ee07 3a90 	vmov	s15, r3
24012bb6:	ed91 5a00 	vldr	s10, [r1]
    adsr->sustain = sustain;
24012bba:	fe88 8a46 	vminnm.f32	s16, s16, s12
24012bbe:	fe89 0aa7 	vmaxnm.f32	s0, s19, s15
24012bc2:	fec9 0a27 	vmaxnm.f32	s1, s18, s15
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012bc6:	ee85 7a85 	vdiv.f32	s14, s11, s10
24012bca:	fec8 1aa7 	vmaxnm.f32	s3, s17, s15
    adsr->sampleRate = leaf->sampleRate;
24012bce:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->sustain = sustain;
24012bd2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;

    adsr->baseLeakFactor = 1.0f;
24012bd6:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
24012bda:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->next = 0.0f;
24012bde:	6183      	str	r3, [r0, #24]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24012be0:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->whichStage = env_idle;
24012be4:	63c3      	str	r3, [r0, #60]	; 0x3c
    adsr->attack = attack;
24012be6:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->sustain = sustain;
24012bea:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->decay = decay;
24012bee:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->release = release;
24012bf2:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24012bf6:	ee87 5a00 	vdiv.f32	s10, s14, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24012bfa:	ed80 7a05 	vstr	s14, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24012bfe:	eec7 5a20 	vdiv.f32	s11, s14, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24012c02:	ee87 6a21 	vdiv.f32	s12, s14, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24012c06:	ee67 7a26 	vmul.f32	s15, s14, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24012c0a:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24012c0e:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24012c12:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24012c16:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24012c1a:	684b      	ldr	r3, [r1, #4]
24012c1c:	6683      	str	r3, [r0, #104]	; 0x68
}
24012c1e:	ecbd 8b04 	vpop	{d8-d9}
24012c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24012c24 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24012c24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24012c28:	6802      	ldr	r2, [r0, #0]
    if (attack < 0.0f)
24012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c2e:	d505      	bpl.n	24012c3c <tADSRT_setAttack+0x18>
    {
        attack = 0.01f;
24012c30:	f24d 730a 	movw	r3, #55050	; 0xd70a
24012c34:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24012c38:	ee00 3a10 	vmov	s0, r3
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24012c3c:	ed92 7a05 	vldr	s14, [r2, #20]
    adsr->attack = attack;
24012c40:	ed82 0a08 	vstr	s0, [r2, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24012c44:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012c48:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
}
24012c4c:	4770      	bx	lr
24012c4e:	bf00      	nop

24012c50 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
24012c50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24012c54:	6802      	ldr	r2, [r0, #0]
    if (decay < 0.0f)
24012c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c5a:	d505      	bpl.n	24012c68 <tADSRT_setDecay+0x18>
    {
        decay = 0.01f;
24012c5c:	f24d 730a 	movw	r3, #55050	; 0xd70a
24012c60:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24012c64:	ee00 3a10 	vmov	s0, r3
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24012c68:	ed92 7a05 	vldr	s14, [r2, #20]
    adsr->decay = decay;
24012c6c:	ed82 0a09 	vstr	s0, [r2, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24012c70:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012c74:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
}
24012c78:	4770      	bx	lr
24012c7a:	bf00      	nop

24012c7c <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24012c7c:	2300      	movs	r3, #0
24012c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
24012c82:	6802      	ldr	r2, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24012c84:	ee07 3a90 	vmov	s15, r3
24012c88:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24012c8c:	fe80 0a47 	vminnm.f32	s0, s0, s14
24012c90:	ed82 0a10 	vstr	s0, [r2, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
24012c94:	4770      	bx	lr
24012c96:	bf00      	nop

24012c98 <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24012c98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24012c9c:	6802      	ldr	r2, [r0, #0]
    if (release < 0.0f)
24012c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ca2:	d505      	bpl.n	24012cb0 <tADSRT_setRelease+0x18>
    {
        release = 0.01f;
24012ca4:	f24d 730a 	movw	r3, #55050	; 0xd70a
24012ca8:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24012cac:	ee00 3a10 	vmov	s0, r3
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24012cb0:	ed92 7a05 	vldr	s14, [r2, #20]
    adsr->release = release;
24012cb4:	ed82 0a0a 	vstr	s0, [r2, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24012cb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012cbc:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
}
24012cc0:	4770      	bx	lr
24012cc2:	bf00      	nop

24012cc4 <tADSRT_setLeakFactor>:
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
    _tADSRT* adsr = *adsrenv;
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24012cc4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
{
24012cc8:	b510      	push	{r4, lr}
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24012cca:	f2c4 732c 	movt	r3, #18220	; 0x472c
    _tADSRT* adsr = *adsrenv;
24012cce:	6804      	ldr	r4, [r0, #0]
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24012cd0:	ee07 3a90 	vmov	s15, r3
24012cd4:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
24012cd8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24012cdc:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012ce0:	f009 ff7e 	bl	2401cbe0 <powf>
24012ce4:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
24012ce8:	bd10      	pop	{r4, pc}
24012cea:	bf00      	nop

24012cec <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
24012cec:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
24012cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24012cf0:	b162      	cbz	r2, 24012d0c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
24012cf2:	2200      	movs	r2, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
24012cf4:	6998      	ldr	r0, [r3, #24]
        adsr->whichStage = env_ramp;
24012cf6:	2105      	movs	r1, #5
        adsr->rampPeak = adsr->next;
24012cf8:	6498      	str	r0, [r3, #72]	; 0x48
        adsr->rampPhase = 0;
24012cfa:	65da      	str	r2, [r3, #92]	; 0x5c
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
24012cfc:	2200      	movs	r2, #0
24012cfe:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24012d00:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
24012d04:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
24012d06:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
24012d08:	659a      	str	r2, [r3, #88]	; 0x58
}
24012d0a:	4770      	bx	lr
        adsr->whichStage = env_attack;
24012d0c:	2101      	movs	r1, #1
24012d0e:	e7f5      	b.n	24012cfc <tADSRT_on+0x10>

24012d10 <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24012d10:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24012d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24012d14:	b11a      	cbz	r2, 24012d1e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
24012d16:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24012d18:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
24012d1a:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
24012d1c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
24012d1e:	4770      	bx	lr

24012d20 <tADSRT_clear>:
#endif
{
    _tADSRT* adsr = *adsrenv;

    adsr->whichStage = env_idle;
    adsr->next = 0.0f;
24012d20:	2300      	movs	r3, #0
    _tADSRT* adsr = *adsrenv;
24012d22:	6802      	ldr	r2, [r0, #0]
    adsr->whichStage = env_idle;
24012d24:	63d3      	str	r3, [r2, #60]	; 0x3c
    adsr->next = 0.0f;
24012d26:	6193      	str	r3, [r2, #24]
}
24012d28:	4770      	bx	lr
24012d2a:	bf00      	nop

24012d2c <tADSRT_tick>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24012d2c:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
24012d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24012d30:	3a01      	subs	r2, #1
24012d32:	2a04      	cmp	r2, #4
24012d34:	f200 8186 	bhi.w	24013044 <tADSRT_tick+0x318>
24012d38:	e8df f002 	tbb	[pc, r2]
24012d3c:	6735461c 	.word	0x6735461c
24012d40:	03          	.byte	0x03
24012d41:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24012d42:	ed93 7a03 	vldr	s14, [r3, #12]
24012d46:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
24012d4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
24012d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d56:	dd71      	ble.n	24012e3c <tADSRT_tick+0x110>
            {
                adsr->whichStage = env_attack;
24012d58:	2200      	movs	r2, #0
24012d5a:	2101      	movs	r1, #1
24012d5c:	ee00 2a10 	vmov	s0, r2
24012d60:	63d9      	str	r1, [r3, #60]	; 0x3c
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
24012d62:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
                adsr->next = 0.0f;
24012d66:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->rampPhase += adsr->rampInc;
24012d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
24012d6e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
24012d72:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24012d74:	edd3 7a03 	vldr	s15, [r3, #12]
24012d78:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
24012d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24012d80:	eeb4 7ae6 	vcmpe.f32	s14, s13
24012d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d88:	f340 808b 	ble.w	24012ea2 <tADSRT_tick+0x176>
            {
                adsr->whichStage = env_decay;
24012d8c:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
24012d8e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
24012d92:	63da      	str	r2, [r3, #60]	; 0x3c

                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24012d94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                adsr->next = adsr->gain;
24012d98:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
24012d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
24012da0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24012da4:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
24012da6:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24012daa:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
24012dae:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
24012db2:	ee20 0a26 	vmul.f32	s0, s0, s13
24012db6:	edd3 7a07 	vldr	s15, [r3, #28]
24012dba:	ee20 0a07 	vmul.f32	s0, s0, s14
24012dbe:	ee20 0a27 	vmul.f32	s0, s0, s15
24012dc2:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24012dc6:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24012dc8:	edd3 7a03 	vldr	s15, [r3, #12]
24012dcc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
24012dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
24012dd4:	eeb4 7ae6 	vcmpe.f32	s14, s13
24012dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ddc:	f340 8096 	ble.w	24012f0c <tADSRT_tick+0x1e0>
                adsr->next = adsr->gain * adsr->sustain;
24012de0:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24012de4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
                adsr->next = adsr->gain * adsr->sustain;
24012de8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24012dec:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
24012dee:	ee20 0a26 	vmul.f32	s0, s0, s13
                adsr->whichStage = env_sustain;
24012df2:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->sustainWithLeak = 1.0f;
24012df4:	edc3 7a07 	vstr	s15, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
24012df8:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->decayPhase += adsr->decayInc;
24012dfc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24012e00:	ee77 7a87 	vadd.f32	s15, s15, s14
24012e04:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24012e08:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24012e0a:	ed93 7a03 	vldr	s14, [r3, #12]
24012e0e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
24012e12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012e16:	eef4 7ac7 	vcmpe.f32	s15, s14
24012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e1e:	f340 80b3 	ble.w	24012f88 <tADSRT_tick+0x25c>
            {
                adsr->whichStage = env_idle;
24012e22:	2100      	movs	r1, #0
24012e24:	ee00 1a10 	vmov	s0, r1
24012e28:	63d9      	str	r1, [r3, #60]	; 0x3c
                }
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24012e2a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
                adsr->next = 0.0f;
24012e2e:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
24012e32:	ee77 7a27 	vadd.f32	s15, s14, s15
24012e36:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24012e3a:	4770      	bx	lr
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24012e3c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
24012e40:	eefc 5ae7 	vcvt.u32.f32	s11, s15
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24012e44:	ee37 6a85 	vadd.f32	s12, s15, s10
                Lfloat LfloatPart = adsr->rampPhase - intPart;
24012e48:	eef8 6a65 	vcvt.f32.u32	s13, s11
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24012e4c:	eeb4 7ac6 	vcmpe.f32	s14, s12
                Lfloat LfloatPart = adsr->rampPhase - intPart;
24012e50:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24012e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e58:	f100 80e9 	bmi.w	2401302e <tADSRT_tick+0x302>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24012e5c:	eebc 7ac6 	vcvt.u32.f32	s14, s12
24012e60:	685a      	ldr	r2, [r3, #4]
24012e62:	2000      	movs	r0, #0
24012e64:	ee17 1a10 	vmov	r1, s14
24012e68:	fe86 7ac5 	vminnm.f32	s14, s13, s10
24012e6c:	ee06 0a90 	vmov	s13, r0
24012e70:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24012e74:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
    Lfloat omAlpha = 1.0f - alpha;
    
    // First 1/2 of interpolation
    Lfloat out = A * omAlpha;
    
    out += B * alpha;
24012e78:	ed91 0a00 	vldr	s0, [r1]
24012e7c:	ee27 0a00 	vmul.f32	s0, s14, s0
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
24012e80:	ee15 1a90 	vmov	r1, s11
    Lfloat omAlpha = 1.0f - alpha;
24012e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24012e88:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
24012e8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012e90:	ee36 7ac7 	vsub.f32	s14, s13, s14
    out += B * alpha;
24012e94:	edd2 5a00 	vldr	s11, [r2]
24012e98:	eea5 0a87 	vfma.f32	s0, s11, s14
24012e9c:	ee20 0a06 	vmul.f32	s0, s0, s12
24012ea0:	e75f      	b.n	24012d62 <tADSRT_tick+0x36>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24012ea2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
24012ea6:	eefc 5ac7 	vcvt.u32.f32	s11, s14
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24012eaa:	ee37 6a05 	vadd.f32	s12, s14, s10
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24012eae:	eef8 7a65 	vcvt.f32.u32	s15, s11
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24012eb2:	eef4 6ac6 	vcmpe.f32	s13, s12
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24012eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24012eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ebe:	f100 80ab 	bmi.w	24013018 <tADSRT_tick+0x2ec>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24012ec2:	eefc 6ac6 	vcvt.u32.f32	s13, s12
24012ec6:	685a      	ldr	r2, [r3, #4]
24012ec8:	2000      	movs	r0, #0
24012eca:	fec7 7ac5 	vminnm.f32	s15, s15, s10
24012ece:	ee16 1a90 	vmov	r1, s13
24012ed2:	ee06 0a10 	vmov	s12, r0
24012ed6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24012eda:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
24012ede:	edd1 6a00 	vldr	s13, [r1]
24012ee2:	ee67 6aa6 	vmul.f32	s13, s15, s13
    Lfloat omAlpha = 1.0f - alpha;
24012ee6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24012eea:	ee15 1a90 	vmov	r1, s11
24012eee:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
24012ef2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012ef6:	ee70 7a67 	vsub.f32	s15, s0, s15
24012efa:	ee30 0a66 	vsub.f32	s0, s0, s13
24012efe:	edd2 5a00 	vldr	s11, [r2]
24012f02:	eea5 0ae7 	vfms.f32	s0, s11, s15
24012f06:	ee20 0a06 	vmul.f32	s0, s0, s12
24012f0a:	e743      	b.n	24012d94 <tADSRT_tick+0x68>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24012f0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24012f10:	eebc 5ac7 	vcvt.u32.f32	s10, s14
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24012f14:	ee37 6a25 	vadd.f32	s12, s14, s11
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24012f18:	eef8 7a45 	vcvt.f32.u32	s15, s10
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24012f1c:	eef4 6ac6 	vcmpe.f32	s13, s12
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24012f20:	ee77 7a67 	vsub.f32	s15, s14, s15
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24012f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012f28:	d46b      	bmi.n	24013002 <tADSRT_tick+0x2d6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
24012f2a:	eefc 6ac6 	vcvt.u32.f32	s13, s12
24012f2e:	685a      	ldr	r2, [r3, #4]
24012f30:	2000      	movs	r0, #0
24012f32:	fec7 7ae5 	vminnm.f32	s15, s15, s11
24012f36:	ee16 1a90 	vmov	r1, s13
24012f3a:	ee06 0a90 	vmov	s13, r0
24012f3e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24012f42:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    out += B * alpha;
24012f46:	edd1 5a00 	vldr	s11, [r1]
24012f4a:	ee67 5aa5 	vmul.f32	s11, s15, s11
    Lfloat omAlpha = 1.0f - alpha;
24012f4e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
24012f52:	ee15 1a10 	vmov	r1, s10
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24012f56:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
24012f5a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24012f5e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24012f62:	ee76 7a67 	vsub.f32	s15, s12, s15
24012f66:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
    out += B * alpha;
24012f6a:	ed92 5a00 	vldr	s10, [r2]
24012f6e:	ee36 6a66 	vsub.f32	s12, s12, s13
24012f72:	ee20 0a24 	vmul.f32	s0, s0, s9
24012f76:	eee5 5a27 	vfma.f32	s11, s10, s15
24012f7a:	eee6 6a25 	vfma.f32	s13, s12, s11
24012f7e:	ee20 0a26 	vmul.f32	s0, s0, s13
24012f82:	ed83 0a06 	vstr	s0, [r3, #24]
24012f86:	e739      	b.n	24012dfc <tADSRT_tick+0xd0>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24012f88:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
24012f8c:	eefc 5ae7 	vcvt.u32.f32	s11, s15
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24012f90:	ee37 6a85 	vadd.f32	s12, s15, s10
                Lfloat LfloatPart = adsr->releasePhase - intPart;
24012f94:	eef8 6a65 	vcvt.f32.u32	s13, s11
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24012f98:	eeb4 7ac6 	vcmpe.f32	s14, s12
                Lfloat LfloatPart = adsr->releasePhase - intPart;
24012f9c:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24012fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012fa4:	d422      	bmi.n	24012fec <tADSRT_tick+0x2c0>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
24012fa6:	eebc 7ac6 	vcvt.u32.f32	s14, s12
24012faa:	685a      	ldr	r2, [r3, #4]
24012fac:	2000      	movs	r0, #0
24012fae:	ee17 1a10 	vmov	r1, s14
24012fb2:	fe86 7ac5 	vminnm.f32	s14, s13, s10
24012fb6:	ee06 0a90 	vmov	s13, r0
24012fba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24012fbe:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
24012fc2:	ed91 0a00 	vldr	s0, [r1]
24012fc6:	ee27 0a00 	vmul.f32	s0, s14, s0
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24012fca:	ee15 1a90 	vmov	r1, s11
    Lfloat omAlpha = 1.0f - alpha;
24012fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24012fd2:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
24012fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012fda:	ee36 7ac7 	vsub.f32	s14, s13, s14
    out += B * alpha;
24012fde:	edd2 5a00 	vldr	s11, [r2]
24012fe2:	eea5 0a87 	vfma.f32	s0, s11, s14
24012fe6:	ee20 0a06 	vmul.f32	s0, s0, s12
24012fea:	e71e      	b.n	24012e2a <tADSRT_tick+0xfe>
24012fec:	2100      	movs	r1, #0
24012fee:	fe86 7ac5 	vminnm.f32	s14, s13, s10
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24012ff2:	685a      	ldr	r2, [r3, #4]
24012ff4:	ee06 1a90 	vmov	s13, r1
24012ff8:	ee00 1a10 	vmov	s0, r1
24012ffc:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
24013000:	e7e3      	b.n	24012fca <tADSRT_tick+0x29e>
24013002:	2100      	movs	r1, #0
24013004:	fec7 7ae5 	vminnm.f32	s15, s15, s11
24013008:	685a      	ldr	r2, [r3, #4]
2401300a:	ee06 1a90 	vmov	s13, r1
2401300e:	ee05 1a90 	vmov	s11, r1
24013012:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
24013016:	e79a      	b.n	24012f4e <tADSRT_tick+0x222>
24013018:	2100      	movs	r1, #0
2401301a:	fec7 7ac5 	vminnm.f32	s15, s15, s10
2401301e:	685a      	ldr	r2, [r3, #4]
24013020:	ee06 1a10 	vmov	s12, r1
24013024:	ee06 1a90 	vmov	s13, r1
24013028:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
2401302c:	e75b      	b.n	24012ee6 <tADSRT_tick+0x1ba>
2401302e:	2100      	movs	r1, #0
24013030:	fe86 7ac5 	vminnm.f32	s14, s13, s10
24013034:	685a      	ldr	r2, [r3, #4]
24013036:	ee06 1a90 	vmov	s13, r1
2401303a:	ee00 1a10 	vmov	s0, r1
2401303e:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
24013042:	e71d      	b.n	24012e80 <tADSRT_tick+0x154>
    return adsr->next;
24013044:	ed93 0a06 	vldr	s0, [r3, #24]
24013048:	4770      	bx	lr
2401304a:	bf00      	nop

2401304c <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
2401304c:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
2401304e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24013050:	3a01      	subs	r2, #1
24013052:	2a04      	cmp	r2, #4
24013054:	f200 80c9 	bhi.w	240131ea <tADSRT_tickNoInterp+0x19e>
24013058:	e8df f002 	tbb	[pc, r2]
2401305c:	6734471c 	.word	0x6734471c
24013060:	03          	.byte	0x03
24013061:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24013062:	edd3 7a03 	vldr	s15, [r3, #12]
24013066:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
2401306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401306e:	eeb4 7ae7 	vcmpe.f32	s14, s15
24013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013076:	dd70      	ble.n	2401315a <tADSRT_tickNoInterp+0x10e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
24013078:	2200      	movs	r2, #0
                adsr->whichStage = env_attack;
2401307a:	2101      	movs	r1, #1
                adsr->next = 0.0f;
2401307c:	ee00 2a10 	vmov	s0, r2
                adsr->whichStage = env_attack;
24013080:	63d9      	str	r1, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24013082:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
24013086:	ed83 0a06 	vstr	s0, [r3, #24]
2401308a:	ee77 7a87 	vadd.f32	s15, s15, s14
2401308e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
24013092:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24013094:	edd3 7a03 	vldr	s15, [r3, #12]
24013098:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
2401309c:	eef8 7a67 	vcvt.f32.u32	s15, s15
240130a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
240130a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240130a8:	dd65      	ble.n	24013176 <tADSRT_tickNoInterp+0x12a>
            {
                adsr->whichStage = env_decay;
240130aa:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
240130ac:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
240130b0:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
240130b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
240130b6:	ed83 0a06 	vstr	s0, [r3, #24]
240130ba:	ee77 7a87 	vadd.f32	s15, s15, s14
240130be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
240130c2:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
240130c4:	edd3 7a07 	vldr	s15, [r3, #28]
240130c8:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240130cc:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
240130d0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
240130d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240130d8:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
240130dc:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240130e0:	ee20 0a27 	vmul.f32	s0, s0, s15
240130e4:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
240130e8:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240130ea:	edd3 7a03 	vldr	s15, [r3, #12]
240130ee:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
240130f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240130f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
240130fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240130fe:	dd4c      	ble.n	2401319a <tADSRT_tickNoInterp+0x14e>
                adsr->next = adsr->gain * adsr->sustain;
24013100:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24013104:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
                adsr->next = adsr->gain * adsr->sustain;
24013108:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
2401310c:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
2401310e:	ee20 0a26 	vmul.f32	s0, s0, s13
                adsr->whichStage = env_sustain;
24013112:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->sustainWithLeak = 1.0f;
24013114:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->decayPhase += adsr->decayInc;
24013118:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
2401311c:	ed83 0a06 	vstr	s0, [r3, #24]
24013120:	ee77 7a87 	vadd.f32	s15, s15, s14
24013124:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24013128:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2401312a:	edd3 7a03 	vldr	s15, [r3, #12]
2401312e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
24013132:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013136:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401313e:	dd46      	ble.n	240131ce <tADSRT_tickNoInterp+0x182>
            {
                adsr->whichStage = env_idle;
24013140:	2100      	movs	r1, #0
                adsr->next = 0.0f;
24013142:	ee00 1a10 	vmov	s0, r1
                adsr->whichStage = env_idle;
24013146:	63d9      	str	r1, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24013148:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
2401314c:	ed83 0a06 	vstr	s0, [r3, #24]
24013150:	ee77 7a87 	vadd.f32	s15, s15, s14
24013154:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24013158:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
2401315a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
2401315e:	685a      	ldr	r2, [r3, #4]
24013160:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24013164:	ee16 1a90 	vmov	r1, s13
24013168:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401316c:	ed92 0a00 	vldr	s0, [r2]
24013170:	ee20 0a27 	vmul.f32	s0, s0, s15
24013174:	e785      	b.n	24013082 <tADSRT_tickNoInterp+0x36>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24013176:	eefc 6ac7 	vcvt.u32.f32	s13, s14
2401317a:	685a      	ldr	r2, [r3, #4]
2401317c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24013180:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24013184:	ee16 1a90 	vmov	r1, s13
24013188:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401318c:	edd2 6a00 	vldr	s13, [r2]
24013190:	ee30 0a66 	vsub.f32	s0, s0, s13
24013194:	ee20 0a27 	vmul.f32	s0, s0, s15
24013198:	e78b      	b.n	240130b2 <tADSRT_tickNoInterp+0x66>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
2401319a:	eefc 5ac7 	vcvt.u32.f32	s11, s14
2401319e:	685a      	ldr	r2, [r3, #4]
240131a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240131a4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
240131a8:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
240131ac:	ee15 1a90 	vmov	r1, s11
240131b0:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
240131b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
240131b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240131bc:	ee20 0a06 	vmul.f32	s0, s0, s12
240131c0:	ed92 6a00 	vldr	s12, [r2]
240131c4:	eee6 7a26 	vfma.f32	s15, s12, s13
240131c8:	ee20 0a27 	vmul.f32	s0, s0, s15
240131cc:	e7a4      	b.n	24013118 <tADSRT_tickNoInterp+0xcc>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
240131ce:	eefc 6ac7 	vcvt.u32.f32	s13, s14
240131d2:	685a      	ldr	r2, [r3, #4]
240131d4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
240131d8:	ee16 1a90 	vmov	r1, s13
240131dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240131e0:	ed92 0a00 	vldr	s0, [r2]
240131e4:	ee20 0a27 	vmul.f32	s0, s0, s15
240131e8:	e7ae      	b.n	24013148 <tADSRT_tickNoInterp+0xfc>
    return adsr->next;
240131ea:	ed93 0a06 	vldr	s0, [r3, #24]
240131ee:	4770      	bx	lr

240131f0 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240131f0:	b538      	push	{r3, r4, r5, lr}
240131f2:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
240131f6:	698d      	ldr	r5, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240131f8:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240131fa:	2014      	movs	r0, #20
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240131fc:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013200:	4629      	mov	r1, r5
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24013202:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013206:	f003 feab 	bl	24016f60 <mpool_alloc>
2401320a:	2300      	movs	r3, #0
2401320c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013210:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
24013212:	ee07 3a10 	vmov	s14, r3
24013216:	6005      	str	r5, [r0, #0]
    
    smooth->curr = val;
24013218:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
2401321c:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24013220:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24013224:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->dest = val;
24013228:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
2401322c:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
24013230:	edc0 7a02 	vstr	s15, [r0, #8]
}
24013234:	ecbd 8b02 	vpop	{d8}
24013238:	bd38      	pop	{r3, r4, r5, pc}
2401323a:	bf00      	nop

2401323c <tExpSmooth_initToPool>:
{
2401323c:	b538      	push	{r3, r4, r5, lr}
2401323e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013242:	680d      	ldr	r5, [r1, #0]
{
24013244:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013246:	2014      	movs	r0, #20
{
24013248:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2401324c:	4629      	mov	r1, r5
{
2401324e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013252:	f003 fe85 	bl	24016f60 <mpool_alloc>
24013256:	2300      	movs	r3, #0
24013258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401325c:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
2401325e:	ee07 3a10 	vmov	s14, r3
24013262:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
24013264:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
24013268:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
2401326c:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24013270:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->dest = val;
24013274:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
24013278:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
2401327c:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
24013280:	ecbd 8b02 	vpop	{d8}
24013284:	bd38      	pop	{r3, r4, r5, pc}
24013286:	bf00      	nop

24013288 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24013288:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
2401328a:	6801      	ldr	r1, [r0, #0]
2401328c:	f003 bf2a 	b.w	240170e4 <mpool_free>

24013290 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
24013290:	2300      	movs	r3, #0
24013292:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013296:	ee07 3a10 	vmov	s14, r3
2401329a:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
2401329c:	fe80 0a67 	vminnm.f32	s0, s0, s15
240132a0:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - smooth->factor;
240132a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    smooth->factor = factor;
240132a8:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
240132ac:	edc3 7a02 	vstr	s15, [r3, #8]
}
240132b0:	4770      	bx	lr
240132b2:	bf00      	nop

240132b4 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
240132b4:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
240132b6:	ed83 0a04 	vstr	s0, [r3, #16]
}
240132ba:	4770      	bx	lr

240132bc <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
240132bc:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
240132be:	ed83 0a03 	vstr	s0, [r3, #12]
}
240132c2:	4770      	bx	lr

240132c4 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
240132c4:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
240132c6:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
240132ca:	ed83 0a04 	vstr	s0, [r3, #16]
}
240132ce:	4770      	bx	lr

240132d0 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
240132d0:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
240132d2:	edd3 6a03 	vldr	s13, [r3, #12]
240132d6:	ed93 0a02 	vldr	s0, [r3, #8]
240132da:	ed93 7a01 	vldr	s14, [r3, #4]
240132de:	ee20 0a26 	vmul.f32	s0, s0, s13
240132e2:	edd3 7a04 	vldr	s15, [r3, #16]
240132e6:	eea7 0a27 	vfma.f32	s0, s14, s15
240132ea:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
240132ee:	4770      	bx	lr

240132f0 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
240132f0:	b538      	push	{r3, r4, r5, lr}
240132f2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240132f6:	680d      	ldr	r5, [r1, #0]
{
240132f8:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
240132fa:	201c      	movs	r0, #28
{
240132fc:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24013300:	4629      	mov	r1, r5
{
24013302:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24013306:	f003 fe2b 	bl	24016f60 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
2401330a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
2401330e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24013310:	6020      	str	r0, [r4, #0]
    s->mempool = m;
24013312:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
24013314:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
24013318:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
2401331c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
24013320:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
24013322:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
24013324:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
24013326:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
24013328:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
2401332c:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
24013330:	ed80 7a05 	vstr	s14, [r0, #20]
}
24013334:	ecbd 8b02 	vpop	{d8}
24013338:	bd38      	pop	{r3, r4, r5, pc}
2401333a:	bf00      	nop

2401333c <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
2401333c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
2401333e:	6801      	ldr	r1, [r0, #0]
24013340:	f003 bed0 	b.w	240170e4 <mpool_free>

24013344 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
24013344:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
24013346:	ed83 0a06 	vstr	s0, [r3, #24]
}
2401334a:	4770      	bx	lr

2401334c <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
2401334c:	6803      	ldr	r3, [r0, #0]
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
2401334e:	f24e 32ee 	movw	r2, #58350	; 0xe3ee
    if (in >= s->prevOut)
24013352:	ed93 0a01 	vldr	s0, [r3, #4]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24013356:	f2c0 026c 	movt	r2, #108	; 0x6c
    Lfloat in = s->dest;
2401335a:	ed93 7a06 	vldr	s14, [r3, #24]
    if (in >= s->prevOut)
2401335e:	eeb4 0ac7 	vcmpe.f32	s0, s14
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24013362:	ee77 6a40 	vsub.f32	s13, s14, s0
    if (in >= s->prevOut)
24013366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
2401336a:	bf94      	ite	ls
2401336c:	edd3 7a04 	vldrls	s15, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
24013370:	edd3 7a05 	vldrhi	s15, [r3, #20]
24013374:	eea6 0aa7 	vfma.f32	s0, s13, s15
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24013378:	ee07 2a90 	vmov	s15, r2
2401337c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013384:	d406      	bmi.n	24013394 <tSlide_tickNoInput+0x48>
24013386:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
2401338a:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
2401338e:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
24013392:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24013394:	2200      	movs	r2, #0
    s->prevIn = in;
24013396:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
2401339a:	ee00 2a10 	vmov	s0, r2
2401339e:	609a      	str	r2, [r3, #8]
    s->prevOut = s->currentOut;
240133a0:	ed83 0a01 	vstr	s0, [r3, #4]
}
240133a4:	4770      	bx	lr
240133a6:	bf00      	nop

240133a8 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
240133a8:	6803      	ldr	r3, [r0, #0]
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240133aa:	f24e 32ee 	movw	r2, #58350	; 0xe3ee
    if (in >= s->prevOut)
240133ae:	edd3 7a01 	vldr	s15, [r3, #4]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240133b2:	f2c0 026c 	movt	r2, #108	; 0x6c
    if (in >= s->prevOut)
240133b6:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
240133ba:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
240133be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
240133c2:	bf94      	ite	ls
240133c4:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
240133c8:	ed93 7a05 	vldrhi	s14, [r3, #20]
240133cc:	eee6 7a87 	vfma.f32	s15, s13, s14
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240133d0:	ee07 2a10 	vmov	s14, r2
240133d4:	eef4 7ac7 	vcmpe.f32	s15, s14
240133d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240133dc:	d408      	bmi.n	240133f0 <tSlide_tick+0x48>
#endif
    s->prevIn = in;
240133de:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
240133e2:	eeb0 0a67 	vmov.f32	s0, s15
240133e6:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
240133ea:	edc3 7a01 	vstr	s15, [r3, #4]
}
240133ee:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240133f0:	2200      	movs	r2, #0
    s->prevIn = in;
240133f2:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240133f6:	ee07 2a90 	vmov	s15, r2
240133fa:	609a      	str	r2, [r3, #8]
}
240133fc:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
24013400:	edc3 7a01 	vstr	s15, [r3, #4]
}
24013404:	4770      	bx	lr
24013406:	bf00      	nop

24013408 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
24013408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401340c:	460e      	mov	r6, r1
2401340e:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24013410:	6811      	ldr	r1, [r2, #0]
{
24013412:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24013414:	2058      	movs	r0, #88	; 0x58
{
24013416:	4617      	mov	r7, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24013418:	9101      	str	r1, [sp, #4]
2401341a:	f003 fda1 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
2401341e:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24013420:	4680      	mov	r8, r0
24013422:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
24013424:	2400      	movs	r4, #0
    f->numFilts = numFilts;
24013426:	e9c0 1600 	strd	r1, r6, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
2401342a:	00b0      	lsls	r0, r6, #2
2401342c:	f003 fdfc 	bl	24017028 <mpool_calloc>
    f->k1[0] = -0.00050469f;
24013430:	f644 532c 	movw	r3, #19756	; 0x4d2c
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
24013434:	42a6      	cmp	r6, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24013436:	f8c8 0008 	str.w	r0, [r8, #8]
    f->k1[0] = -0.00050469f;
2401343a:	f6cb 2304 	movt	r3, #47620	; 0xba04
2401343e:	f8c8 301c 	str.w	r3, [r8, #28]
    f->k2[0] = -0.0064264f;
24013442:	f249 438d 	movw	r3, #38029	; 0x948d
24013446:	f6cb 33d2 	movt	r3, #48082	; 0xbbd2
2401344a:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    f->k3[0] = -2.8743f;
2401344e:	f24f 4388 	movw	r3, #62600	; 0xf488
24013452:	f2cc 0337 	movt	r3, #49207	; 0xc037
24013456:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    f->C1[0] = 0.069618f;
2401345a:	f249 33e2 	movw	r3, #37858	; 0x93e2
2401345e:	f6c3 538e 	movt	r3, #15758	; 0x3d8e
24013462:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    f->C2[0] = 2.0427f;
24013466:	f64b 3399 	movw	r3, #48025	; 0xbb99
2401346a:	f2c4 0302 	movt	r3, #16386	; 0x4002
2401346e:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
24013472:	f243 13d7 	movw	r3, #12759	; 0x31d7
24013476:	f6cb 332e 	movt	r3, #47918	; 0xbb2e
2401347a:	f8c8 3020 	str.w	r3, [r8, #32]
    f->k2[1] = -0.014811f;
2401347e:	f64a 13d6 	movw	r3, #43478	; 0xa9d6
24013482:	f6cb 4372 	movt	r3, #48242	; 0xbc72
24013486:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    f->k3[1] = -2.9018f;
2401348a:	f24b 7317 	movw	r3, #46871	; 0xb717
2401348e:	f2cc 0339 	movt	r3, #49209	; 0xc039
24013492:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    f->C1[1] = 0.071089f;
24013496:	f249 731c 	movw	r3, #38684	; 0x971c
2401349a:	f6c3 5391 	movt	r3, #15761	; 0x3d91
2401349e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    f->C2[1] = 2.1074f;
240134a2:	f64d 73a4 	movw	r3, #57252	; 0xdfa4
240134a6:	f2c4 0306 	movt	r3, #16390	; 0x4006
240134aa:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    f->numFiltsMap[1] = 1;
240134ae:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
240134b2:	e9c8 6611 	strd	r6, r6, [r8, #68]	; 0x44
    f->numFiltsMap[1] = 1;
240134b6:	e9c8 3413 	strd	r3, r4, [r8, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
240134ba:	dd15      	ble.n	240134e8 <tThiranAllpassSOCascade_initToPool+0xe0>
240134bc:	4681      	mov	r9, r0
    f->prevSamp = 0.0f;
240134be:	4625      	mov	r5, r4
240134c0:	e001      	b.n	240134c6 <tThiranAllpassSOCascade_initToPool+0xbe>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
240134c2:	f8d8 9008 	ldr.w	r9, [r8, #8]
    _tMempool* m = *mp;
240134c6:	f8d7 a000 	ldr.w	sl, [r7]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
240134ca:	201c      	movs	r0, #28
240134cc:	4651      	mov	r1, sl
240134ce:	f003 fd47 	bl	24016f60 <mpool_alloc>
240134d2:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
240134d6:	3401      	adds	r4, #1
    f->mempool = m;
240134d8:	f8c0 a000 	str.w	sl, [r0]
    f->prevSamp = 0.0f;
240134dc:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
240134de:	42a6      	cmp	r6, r4
    f->prevPrevSamp = 0.0f;
240134e0:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
240134e2:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
240134e4:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
240134e6:	d1ec      	bne.n	240134c2 <tThiranAllpassSOCascade_initToPool+0xba>
    }
}
240134e8:	b002      	add	sp, #8
240134ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
240134ee:	bf00      	nop

240134f0 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
240134f0:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
240134f2:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
240134f4:	686b      	ldr	r3, [r5, #4]
240134f6:	2b00      	cmp	r3, #0
240134f8:	dd0a      	ble.n	24013510 <tThiranAllpassSOCascade_free+0x20>
240134fa:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
240134fc:	68ab      	ldr	r3, [r5, #8]
240134fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
24013502:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
24013504:	6801      	ldr	r1, [r0, #0]
24013506:	f003 fded 	bl	240170e4 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
2401350a:	686b      	ldr	r3, [r5, #4]
2401350c:	42a3      	cmp	r3, r4
2401350e:	dcf5      	bgt.n	240134fc <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
24013510:	6829      	ldr	r1, [r5, #0]
24013512:	68a8      	ldr	r0, [r5, #8]
24013514:	f003 fde6 	bl	240170e4 <mpool_free>
    mpool_free((char*)f, f->mempool);
24013518:	6829      	ldr	r1, [r5, #0]
2401351a:	4628      	mov	r0, r5
}
2401351c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
24013520:	f003 bde0 	b.w	240170e4 <mpool_free>

24013524 <tThiranAllpassSOCascade_setCoeff>:
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24013524:	f24f 2309 	movw	r3, #61961	; 0xf209
24013528:	f6c3 3314 	movt	r3, #15124	; 0x3b14
{
2401352c:	b570      	push	{r4, r5, r6, lr}
2401352e:	ed2d 8b08 	vpush	{d8-d11}
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24013532:	ee08 3a90 	vmov	s17, r3
    _tThiranAllpassSOCascade* f = *ft;
24013536:	6804      	ldr	r4, [r0, #0]
{
24013538:	eeb0 8a41 	vmov.f32	s16, s2
    f->B = dispersionCoeff;
2401353c:	ed84 0a03 	vstr	s0, [r4, #12]
{
24013540:	eeb0 ba40 	vmov.f32	s22, s0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24013544:	ee20 0aa8 	vmul.f32	s0, s1, s17
{
24013548:	eeb0 9a60 	vmov.f32	s18, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
2401354c:	f009 f9aa 	bl	2401c8a4 <log2f>
24013550:	2300      	movs	r3, #0
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24013552:	ee28 8a28 	vmul.f32	s16, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24013556:	eef0 7a40 	vmov.f32	s15, s0
2401355a:	f2c4 2344 	movt	r3, #16964	; 0x4244
2401355e:	eef2 9a08 	vmov.f32	s19, #40	; 0x41400000  12.0
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24013562:	ee28 0a09 	vmul.f32	s0, s16, s18
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24013566:	ee09 3a10 	vmov	s18, r3
2401356a:	eea7 9aa9 	vfma.f32	s18, s15, s19
2401356e:	ed84 9a04 	vstr	s18, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24013572:	f009 f997 	bl	2401c8a4 <log2f>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
24013576:	2300      	movs	r3, #0
24013578:	f24c 228f 	movw	r2, #49807	; 0xc28f
2401357c:	f2c4 2304 	movt	r3, #16900	; 0x4204
24013580:	f6c3 42f5 	movt	r2, #15605	; 0x3cf5
24013584:	ee07 3a90 	vmov	s15, r3
24013588:	ee07 2a10 	vmov	s14, r2
2401358c:	eee0 7a29 	vfma.f32	s15, s0, s19
24013590:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
24013594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401359c:	f100 8117 	bmi.w	240137ce <tThiranAllpassSOCascade_setCoeff+0x2aa>
    else if (val > max)
240135a0:	f648 63ab 	movw	r3, #36523	; 0x8eab
240135a4:	f6c3 43e3 	movt	r3, #15587	; 0x3ce3
240135a8:	ee07 3a10 	vmov	s14, r3
240135ac:	eeb4 0ac7 	vcmpe.f32	s0, s14
240135b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240135b4:	f300 8100 	bgt.w	240137b8 <tThiranAllpassSOCascade_setCoeff+0x294>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
240135b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240135bc:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240135c0:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
240135c4:	ed94 6a08 	vldr	s12, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240135c8:	ee67 5aa5 	vmul.f32	s11, s15, s11
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
240135cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
240135d0:	edd4 8a0c 	vldr	s17, [r4, #48]	; 0x30
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240135d4:	ee27 7a87 	vmul.f32	s14, s15, s14
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
240135d8:	edd4 aa0e 	vldr	s21, [r4, #56]	; 0x38
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
240135dc:	ee27 8a86 	vmul.f32	s16, s15, s12
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240135e0:	edd4 4a09 	vldr	s9, [r4, #36]	; 0x24
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240135e4:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
240135e8:	ee67 8aa8 	vmul.f32	s17, s15, s17
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
240135ec:	ee67 aaaa 	vmul.f32	s21, s15, s21
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
240135f0:	ed94 4a07 	vldr	s8, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240135f4:	eee6 5aa4 	vfma.f32	s11, s13, s9
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
240135f8:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240135fc:	eea6 7a86 	vfma.f32	s14, s13, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24013600:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24013604:	eea6 8a84 	vfma.f32	s16, s13, s8
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24013608:	eee6 aa85 	vfma.f32	s21, s13, s10
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
2401360c:	eee6 8aa7 	vfma.f32	s17, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24013610:	eeb0 aa65 	vmov.f32	s20, s11
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24013614:	eef0 9a47 	vmov.f32	s19, s14
    Lfloat logB = logf(f->B);
24013618:	eeb0 0a4b 	vmov.f32	s0, s22
2401361c:	f009 f8dc 	bl	2401c7d8 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
    Lfloat kd = fastExp3(temp);
    Lfloat Cd = fastExp3((C1 * logB) + C2);
24013620:	eeb0 7a69 	vmov.f32	s14, s19
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013624:	f64a 233b 	movw	r3, #43579	; 0xaa3b
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
24013628:	eef0 5a4a 	vmov.f32	s11, s20
2401362c:	eef0 7a68 	vmov.f32	s15, s17
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013630:	f240 40fd 	movw	r0, #1277	; 0x4fd
    Lfloat Cd = fastExp3((C1 * logB) + C2);
24013634:	eea0 7a2a 	vfma.f32	s14, s0, s21
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013638:	f6c4 3338 	movt	r3, #19256	; 0x4b38
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
2401363c:	eee0 5a08 	vfma.f32	s11, s0, s16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013640:	f643 11e9 	movw	r1, #14825	; 0x39e9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013644:	ee06 3a90 	vmov	s13, r3
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013648:	f64c 027b 	movw	r2, #51323	; 0xc87b
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
2401364c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
24013650:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
	a_k /= (D - 1.0f);
24013654:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	a_k *= (D - 2.0f);
24013658:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401365c:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
24013660:	eee5 7a80 	vfma.f32	s15, s11, s0
24013664:	eebd 7ac7 	vcvt.s32.f32	s14, s14
24013668:	ee17 5a10 	vmov	r5, s14
2401366c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
24013670:	f3c5 16cf 	ubfx	r6, r5, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013674:	f105 557e 	add.w	r5, r5, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013678:	fb00 f306 	mul.w	r3, r0, r6
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013680:	eb01 33a3 	add.w	r3, r1, r3, asr #14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013684:	ee17 ca90 	vmov	ip, s15
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013688:	fb06 f303 	mul.w	r3, r6, r3
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401368c:	f3cc 1ecf 	ubfx	lr, ip, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24013690:	f10c 5c7e 	add.w	ip, ip, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24013694:	eb02 33a3 	add.w	r3, r2, r3, asr #14
24013698:	fb06 f303 	mul.w	r3, r6, r3
2401369c:	12db      	asrs	r3, r3, #11
2401369e:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
240136a2:	442b      	add	r3, r5
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
240136a4:	f247 05a4 	movw	r5, #28836	; 0x70a4
240136a8:	ee07 3a90 	vmov	s15, r3
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
240136ac:	fb00 f30e 	mul.w	r3, r0, lr
240136b0:	f6c3 757d 	movt	r5, #16253	; 0x3f7d
240136b4:	eb01 33a3 	add.w	r3, r1, r3, asr #14
240136b8:	fb0e f303 	mul.w	r3, lr, r3
240136bc:	eb02 33a3 	add.w	r3, r2, r3, asr #14
240136c0:	fb0e f303 	mul.w	r3, lr, r3
240136c4:	12db      	asrs	r3, r3, #11
240136c6:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
240136ca:	4463      	add	r3, ip
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
240136cc:	ee07 3a10 	vmov	s14, r3
240136d0:	eee9 7a47 	vfms.f32	s15, s18, s14
	if (f->a[0] > 0.99f)
240136d4:	ee07 5a10 	vmov	s14, r5
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
240136d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
240136dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240136e0:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
240136e4:	f3c3 15cf 	ubfx	r5, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
240136e8:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
240136ec:	fb05 f000 	mul.w	r0, r5, r0
240136f0:	eb01 31a0 	add.w	r1, r1, r0, asr #14
240136f4:	fb05 f101 	mul.w	r1, r5, r1
240136f8:	eb02 32a1 	add.w	r2, r2, r1, asr #14
240136fc:	fb05 f202 	mul.w	r2, r5, r2
24013700:	12d2      	asrs	r2, r2, #11
24013702:	f2a2 2272 	subw	r2, r2, #626	; 0x272
    return reinterpreter.f;
24013706:	18d3      	adds	r3, r2, r3
24013708:	ee07 3a90 	vmov	s15, r3
    f->D = D;
2401370c:	6563      	str	r3, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
2401370e:	ee77 3ac6 	vsub.f32	s7, s15, s12
	a_k /= (D - 1.0f);
24013712:	ee77 6ae4 	vsub.f32	s13, s15, s9
	a_k /= (D + 1.0f);
24013716:	ee37 4aa4 	vadd.f32	s8, s15, s9
	a_k *= (D - 2.0f);
2401371a:	ee23 5a85 	vmul.f32	s10, s7, s10
	a_k /= D;
2401371e:	eec3 5aa7 	vdiv.f32	s11, s7, s15
	a_k /= (D - 1.0f);
24013722:	eec5 3a26 	vdiv.f32	s7, s10, s13
	a_k /= (D + 2.0f);
24013726:	ee37 6a86 	vadd.f32	s12, s15, s12
	a_k *= (D - 1.0f);
2401372a:	ee66 5aa5 	vmul.f32	s11, s13, s11
	a_k /= (D + 1.0f);
2401372e:	ee85 5a84 	vdiv.f32	s10, s11, s8
	a_k *= (D - 1.0f);
24013732:	ee66 6aa3 	vmul.f32	s13, s13, s7
	a_k /= D;
24013736:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	a_k *= D;
2401373a:	ee65 6a27 	vmul.f32	s13, s10, s15
	a_k /= (D + 2.0f);
2401373e:	ee86 5a86 	vdiv.f32	s10, s13, s12
	a_k *= D;
24013742:	ee65 5aa7 	vmul.f32	s11, s11, s15
	a_k /= (D + 1.0f);
24013746:	eec5 6a84 	vdiv.f32	s13, s11, s8
	f->a[1] = a_k;
2401374a:	ed84 5a06 	vstr	s10, [r4, #24]
	if (f->a[0] > 0.99f)
2401374e:	eef4 6ac7 	vcmpe.f32	s13, s14
	f->a[0] = a_k;
24013752:	edc4 6a05 	vstr	s13, [r4, #20]
	if (f->a[0] > 0.99f)
24013756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401375a:	dd0c      	ble.n	24013776 <tThiranAllpassSOCascade_setCoeff+0x252>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
2401375c:	f24d 730a 	movw	r3, #55050	; 0xd70a
24013760:	eef0 6a47 	vmov.f32	s13, s14
		D = 1.0f;
24013764:	eef0 7a64 	vmov.f32	s15, s9
		f->a[0] = 0.99f;
24013768:	ed84 7a05 	vstr	s14, [r4, #20]
		f->a[1] = 0.01f;
2401376c:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24013770:	ee05 3a10 	vmov	s10, r3
24013774:	61a3      	str	r3, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
24013776:	6c62      	ldr	r2, [r4, #68]	; 0x44
24013778:	2a00      	cmp	r2, #0
2401377a:	dd14      	ble.n	240137a6 <tThiranAllpassSOCascade_setCoeff+0x282>
    _tAllpassSO* f = *ft;
2401377c:	68a3      	ldr	r3, [r4, #8]
2401377e:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
24013780:	edc3 6a05 	vstr	s13, [r3, #20]
    f->a2 = a2;
24013784:	ed83 5a06 	vstr	s10, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
24013788:	6c62      	ldr	r2, [r4, #68]	; 0x44
2401378a:	2a01      	cmp	r2, #1
2401378c:	dd0b      	ble.n	240137a6 <tThiranAllpassSOCascade_setCoeff+0x282>
2401378e:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
24013790:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
24013792:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
24013794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
24013798:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
2401379a:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
2401379c:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
2401379e:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
240137a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
240137a2:	429a      	cmp	r2, r3
240137a4:	dcf4      	bgt.n	24013790 <tThiranAllpassSOCascade_setCoeff+0x26c>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
240137a6:	ee07 2a10 	vmov	s14, r2
240137aa:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
240137ae:	ecbd 8b08 	vpop	{d8-d11}
240137b2:	ee20 0a27 	vmul.f32	s0, s0, s15
240137b6:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
240137b8:	ed94 8a08 	vldr	s16, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240137bc:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
240137c0:	edd4 8a0c 	vldr	s17, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
240137c4:	edd4 aa0e 	vldr	s21, [r4, #56]	; 0x38
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240137c8:	edd4 9a10 	vldr	s19, [r4, #64]	; 0x40
240137cc:	e724      	b.n	24013618 <tThiranAllpassSOCascade_setCoeff+0xf4>
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
240137ce:	ed94 8a07 	vldr	s16, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
240137d2:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
240137d6:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
240137da:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
240137de:	edd4 9a0f 	vldr	s19, [r4, #60]	; 0x3c
240137e2:	e719      	b.n	24013618 <tThiranAllpassSOCascade_setCoeff+0xf4>

240137e4 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
240137e4:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
240137e6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
240137e8:	2b00      	cmp	r3, #0
240137ea:	dd27      	ble.n	2401383c <tThiranAllpassSOCascade_tick+0x58>
240137ec:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
240137ee:	688b      	ldr	r3, [r1, #8]
240137f0:	eef0 4a40 	vmov.f32	s9, s0
240137f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
240137f8:	3201      	adds	r2, #1
240137fa:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
240137fe:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
24013802:	ee30 0a66 	vsub.f32	s0, s0, s13
24013806:	edd3 7a03 	vldr	s15, [r3, #12]
2401380a:	ed93 5a06 	vldr	s10, [r3, #24]
2401380e:	ee37 6a67 	vsub.f32	s12, s14, s15
24013812:	edd3 5a05 	vldr	s11, [r3, #20]
24013816:	ee20 0a05 	vmul.f32	s0, s0, s10
2401381a:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
2401381e:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
24013822:	ed83 7a02 	vstr	s14, [r3, #8]
24013826:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
2401382a:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
2401382e:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
24013832:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
24013836:	6c4b      	ldr	r3, [r1, #68]	; 0x44
24013838:	4293      	cmp	r3, r2
2401383a:	dcd8      	bgt.n	240137ee <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
2401383c:	4770      	bx	lr
2401383e:	bf00      	nop

24013840 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
24013840:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
24013842:	6853      	ldr	r3, [r2, #4]
24013844:	2b00      	cmp	r3, #0
24013846:	dd0d      	ble.n	24013864 <tThiranAllpassSOCascade_clear+0x24>
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
24013848:	2100      	movs	r1, #0
    for (int i = 0; i < f->numFilts; i++)
2401384a:	460b      	mov	r3, r1
        f->filters[i]->prevSamp = 0.0f;
2401384c:	6890      	ldr	r0, [r2, #8]
2401384e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
24013852:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
24013854:	6890      	ldr	r0, [r2, #8]
24013856:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
2401385a:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
2401385c:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
2401385e:	6850      	ldr	r0, [r2, #4]
24013860:	4298      	cmp	r0, r3
24013862:	dcf3      	bgt.n	2401384c <tThiranAllpassSOCascade_clear+0xc>

    }
}
24013864:	4770      	bx	lr
24013866:	bf00      	nop

24013868 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
24013868:	b538      	push	{r3, r4, r5, lr}
2401386a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401386e:	680d      	ldr	r5, [r1, #0]
{
24013870:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013872:	2028      	movs	r0, #40	; 0x28
{
24013874:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013878:	4629      	mov	r1, r5
2401387a:	f003 fb71 	bl	24016f60 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
2401387e:	2300      	movs	r3, #0
    f->gain = 1.0f;
24013880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013884:	6020      	str	r0, [r4, #0]
    f->lastIn = 0.0f;
24013886:	ee07 3a10 	vmov	s14, r3
    f->mempool = m;
2401388a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2401388c:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
2401388e:	edc0 7a02 	vstr	s15, [r0, #8]
    f->a0 = 1.0;
24013892:	edc0 7a03 	vstr	s15, [r0, #12]
    f->lastIn = 0.0f;
24013896:	ed80 7a07 	vstr	s14, [r0, #28]
    f->lastOut = 0.0f;
2401389a:	ed80 7a08 	vstr	s14, [r0, #32]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401389e:	68db      	ldr	r3, [r3, #12]
240138a0:	6243      	str	r3, [r0, #36]	; 0x24
    f->a1 = -thePole;
}

void        tOnePole_setFreq        (tOnePole* const ft, Lfloat freq)
{
    _tOnePole* f = *ft;
240138a2:	6823      	ldr	r3, [r4, #0]
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240138a4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
    f->freq = freq;
240138a8:	ed83 8a01 	vstr	s16, [r3, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240138ac:	ee28 0a26 	vmul.f32	s0, s16, s13
240138b0:	fe80 0a67 	vminnm.f32	s0, s0, s15
240138b4:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
    f->b0 = 1.0f - f->a1;
240138b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
240138bc:	ed83 0a04 	vstr	s0, [r3, #16]
    f->b0 = 1.0f - f->a1;
240138c0:	edc3 7a05 	vstr	s15, [r3, #20]
}
240138c4:	ecbd 8b02 	vpop	{d8}
240138c8:	bd38      	pop	{r3, r4, r5, pc}
240138ca:	bf00      	nop

240138cc <tOnePole_free>:
    _tOnePole* f = *ft;
240138cc:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
240138ce:	6801      	ldr	r1, [r0, #0]
240138d0:	f003 bc08 	b.w	240170e4 <mpool_free>

240138d4 <tOnePole_setFreq>:
    _tOnePole* f = *ft;
240138d4:	6803      	ldr	r3, [r0, #0]
    f->freq = freq;
240138d6:	2200      	movs	r2, #0
240138d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240138dc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
240138e0:	ee07 2a10 	vmov	s14, r2
    f->freq = freq;
240138e4:	ed83 0a01 	vstr	s0, [r3, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240138e8:	ee20 0a26 	vmul.f32	s0, s0, s13
240138ec:	fe80 0a67 	vminnm.f32	s0, s0, s15
240138f0:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    f->b0 = 1.0f - f->a1;
240138f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
240138f8:	ed83 0a04 	vstr	s0, [r3, #16]
    f->b0 = 1.0f - f->a1;
240138fc:	edc3 7a05 	vstr	s15, [r3, #20]
}
24013900:	4770      	bx	lr
24013902:	bf00      	nop

24013904 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24013904:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24013906:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
2401390a:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2401390e:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
24013912:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24013916:	edd3 6a05 	vldr	s13, [r3, #20]
2401391a:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
2401391e:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24013922:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24013926:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
2401392a:	4770      	bx	lr

2401392c <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
2401392c:	f640 72db 	movw	r2, #4059	; 0xfdb
    _tOnePole* f = *ft;
24013930:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013932:	2100      	movs	r1, #0
24013934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013938:	f2c4 02c9 	movt	r2, #16585	; 0x40c9
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2401393c:	edd3 7a01 	vldr	s15, [r3, #4]
24013940:	ee06 1a10 	vmov	s12, r1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013944:	ee06 2a90 	vmov	s13, r2
24013948:	eec6 5a80 	vdiv.f32	s11, s13, s0
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2401394c:	ee65 7aa7 	vmul.f32	s15, s11, s15
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013950:	edc3 5a09 	vstr	s11, [r3, #36]	; 0x24
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013954:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24013958:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
    f->a1 = 1.0f - f->b0;
2401395c:	ee37 7a67 	vsub.f32	s14, s14, s15
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013960:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a1 = 1.0f - f->b0;
24013964:	ed83 7a04 	vstr	s14, [r3, #16]
}
24013968:	4770      	bx	lr
2401396a:	bf00      	nop

2401396c <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
2401396c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
2401396e:	680c      	ldr	r4, [r1, #0]
{
24013970:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
24013972:	2018      	movs	r0, #24
24013974:	4621      	mov	r1, r4
24013976:	f003 faf3 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
2401397a:	f246 6266 	movw	r2, #26214	; 0x6666
    f->sgain         = 0.1f;
2401397e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
24013982:	6028      	str	r0, [r5, #0]
    f->poleCoeff     = 0.9f;
24013984:	f6c3 7266 	movt	r2, #16230	; 0x3f66
    f->mempool = m;
24013988:	6004      	str	r4, [r0, #0]
    f->sgain         = 0.1f;
2401398a:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
    LEAF* leaf = f->mempool->leaf;
2401398e:	6861      	ldr	r1, [r4, #4]
    f->poleCoeff     = 0.9f;
24013990:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
24013992:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
24013994:	6083      	str	r3, [r0, #8]
    f->output         = 0.0f;
24013996:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013998:	68cb      	ldr	r3, [r1, #12]
2401399a:	6103      	str	r3, [r0, #16]
}
2401399c:	bd38      	pop	{r3, r4, r5, pc}
2401399e:	bf00      	nop

240139a0 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
240139a0:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
240139a2:	6801      	ldr	r1, [r0, #0]
240139a4:	f003 bb9e 	b.w	240170e4 <mpool_free>

240139a8 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
240139a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
240139ac:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
240139ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
240139b2:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
240139b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
240139ba:	bfcc      	ite	gt
240139bc:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
240139c0:	ee30 0a27 	vaddle.f32	s0, s0, s15
240139c4:	ed83 0a02 	vstr	s0, [r3, #8]
}
240139c8:	4770      	bx	lr
240139ca:	bf00      	nop

240139cc <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
240139cc:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
240139ce:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
240139d2:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
240139d6:	4770      	bx	lr

240139d8 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
240139d8:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
240139da:	edd3 6a03 	vldr	s13, [r3, #12]
240139de:	edd3 7a01 	vldr	s15, [r3, #4]
240139e2:	ed93 7a02 	vldr	s14, [r3, #8]
240139e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
240139ea:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
240139ee:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
240139f2:	edc3 7a03 	vstr	s15, [r3, #12]
}
240139f6:	4770      	bx	lr

240139f8 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
240139f8:	f640 73db 	movw	r3, #4059	; 0xfdb
    _tCookOnePole* f = *ft;
240139fc:	6802      	ldr	r2, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
240139fe:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
24013a02:	ee07 3a90 	vmov	s15, r3
24013a06:	ee87 7a80 	vdiv.f32	s14, s15, s0
24013a0a:	ed82 7a04 	vstr	s14, [r2, #16]
}
24013a0e:	4770      	bx	lr

24013a10 <tSVF_init>:


// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24013a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013a12:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24013a16:	6995      	ldr	r5, [r2, #24]
{
24013a18:	4607      	mov	r7, r0
24013a1a:	460e      	mov	r6, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013a1c:	2054      	movs	r0, #84	; 0x54
24013a1e:	4629      	mov	r1, r5
{
24013a20:	eef0 8a40 	vmov.f32	s17, s0
24013a24:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013a28:	f003 fa9a 	bl	24016f60 <mpool_alloc>
    
    LEAF* leaf = svf->mempool->leaf;
    
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013a30:	6038      	str	r0, [r7, #0]
    svf->mempool = m;
24013a32:	6005      	str	r5, [r0, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013a34:	4604      	mov	r4, r0
    LEAF* leaf = svf->mempool->leaf;
24013a36:	686f      	ldr	r7, [r5, #4]
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013a38:	f2c4 733b 	movt	r3, #18235	; 0x473b
    svf->type = type;
    
    svf->ic1eq = 0.0f;
24013a3c:	2500      	movs	r5, #0
    svf->sampleRate = leaf->sampleRate;
24013a3e:	edd7 6a00 	vldr	s13, [r7]
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013a42:	ee07 3a10 	vmov	s14, r3
    svf->ic2eq = 0.0f;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a46:	f640 73db 	movw	r3, #4059	; 0xfdb
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013a4a:	ee87 6a26 	vdiv.f32	s12, s14, s13
    svf->sampleRate = leaf->sampleRate;
24013a4e:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a52:	f2c4 0349 	movt	r3, #16457	; 0x4049
    svf->invSampleRate = leaf->invSampleRate;
24013a56:	ed97 0a01 	vldr	s0, [r7, #4]
    svf->type = type;
24013a5a:	7106      	strb	r6, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a5c:	ee07 3a90 	vmov	s15, r3
    svf->invSampleRate = leaf->invSampleRate;
24013a60:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
24013a64:	6145      	str	r5, [r0, #20]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a66:	ee68 7aa7 	vmul.f32	s15, s17, s15
    svf->ic2eq = 0.0f;
24013a6a:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24013a6c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24013a70:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a74:	ee27 0a80 	vmul.f32	s0, s15, s0
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013a78:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a7c:	f009 fa92 	bl	2401cfa4 <tanf>
    svf->k = 1.0f/Q;
24013a80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013a84:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24013a88:	2e01      	cmp	r6, #1
    svf->cH = 0.0f;
24013a8a:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24013a8c:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24013a90:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24013a94:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24013a96:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013a98:	eef0 6a67 	vmov.f32	s13, s15
24013a9c:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24013aa0:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013aa4:	eee0 6a06 	vfma.f32	s13, s0, s12
24013aa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24013aac:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013ab0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24013ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24013ab8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24013abc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
24013ac0:	d010      	beq.n	24013ae4 <tSVF_init+0xd4>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24013ac2:	2e04      	cmp	r6, #4
24013ac4:	d80e      	bhi.n	24013ae4 <tSVF_init+0xd4>
24013ac6:	e8df f006 	tbb	[pc, r6]
24013aca:	0d34      	.short	0x0d34
24013acc:	033f      	.short	0x033f
24013ace:	27          	.byte	0x27
24013acf:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
24013ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
24013ad4:	2300      	movs	r3, #0
        svf->cBK = -1.0f;
24013ad6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        svf->cL = 0.0f;
24013ada:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
24013adc:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24013ae0:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
24013ae4:	f44f 4248 	mov.w	r2, #51200	; 0xc800
24013ae8:	ed97 7a00 	vldr	s14, [r7]
    {
        svf->table = __filterTanhTable_96000;
    }
    else
    {
        svf->table = __filterTanhTable_48000;
24013aec:	f64f 1194 	movw	r1, #63892	; 0xf994
24013af0:	f643 1394 	movw	r3, #14740	; 0x3994
    if (leaf->sampleRate > 90000)
24013af4:	f2c4 72af 	movt	r2, #18351	; 0x47af
        svf->table = __filterTanhTable_48000;
24013af8:	f2c2 4101 	movt	r1, #9217	; 0x2401
24013afc:	f2c2 4302 	movt	r3, #9218	; 0x2402
    if (leaf->sampleRate > 90000)
24013b00:	ee07 2a90 	vmov	s15, r2
        svf->table = __filterTanhTable_48000;
24013b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
24013b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013b0c:	bfd8      	it	le
24013b0e:	460b      	movle	r3, r1
24013b10:	6523      	str	r3, [r4, #80]	; 0x50
}
24013b12:	ecbd 8b02 	vpop	{d8}
24013b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
24013b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        svf->cBK = -1.0f;
24013b1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
        svf->cL = -2.0f;
24013b20:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
        svf->cH = 1.0f;
24013b24:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24013b28:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
24013b2c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
24013b30:	e7d8      	b.n	24013ae4 <tSVF_init+0xd4>
        svf->cBK = -1.0f;
24013b32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        svf->cH = 1.0f;
24013b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        svf->cBK = -1.0f;
24013b3a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
24013b3e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
        svf->cL = -1.0f;
24013b42:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
24013b46:	e7cd      	b.n	24013ae4 <tSVF_init+0xd4>
        svf->cB = 1.0f;
24013b48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        svf->cL = 0.0f;
24013b4c:	2300      	movs	r3, #0
24013b4e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cB = 1.0f;
24013b50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
        svf->cL = 0.0f;
24013b54:	e7c6      	b.n	24013ae4 <tSVF_init+0xd4>
24013b56:	bf00      	nop

24013b58 <tSVF_initToPool>:
{
24013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013b5a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013b5e:	6815      	ldr	r5, [r2, #0]
{
24013b60:	4607      	mov	r7, r0
24013b62:	460e      	mov	r6, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013b64:	2054      	movs	r0, #84	; 0x54
24013b66:	4629      	mov	r1, r5
{
24013b68:	eef0 8a40 	vmov.f32	s17, s0
24013b6c:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013b70:	f003 f9f6 	bl	24016f60 <mpool_alloc>
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013b78:	6038      	str	r0, [r7, #0]
    svf->mempool = m;
24013b7a:	6005      	str	r5, [r0, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013b7c:	4604      	mov	r4, r0
    LEAF* leaf = svf->mempool->leaf;
24013b7e:	686f      	ldr	r7, [r5, #4]
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013b80:	f2c4 733b 	movt	r3, #18235	; 0x473b
    svf->ic1eq = 0.0f;
24013b84:	2500      	movs	r5, #0
    svf->sampleRate = leaf->sampleRate;
24013b86:	edd7 6a00 	vldr	s13, [r7]
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013b8a:	ee07 3a10 	vmov	s14, r3
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013b8e:	f640 73db 	movw	r3, #4059	; 0xfdb
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013b92:	ee87 6a26 	vdiv.f32	s12, s14, s13
    svf->sampleRate = leaf->sampleRate;
24013b96:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013b9a:	f2c4 0349 	movt	r3, #16457	; 0x4049
    svf->invSampleRate = leaf->invSampleRate;
24013b9e:	ed97 0a01 	vldr	s0, [r7, #4]
    svf->type = type;
24013ba2:	7106      	strb	r6, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013ba4:	ee07 3a90 	vmov	s15, r3
    svf->invSampleRate = leaf->invSampleRate;
24013ba8:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
24013bac:	6145      	str	r5, [r0, #20]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013bae:	ee68 7aa7 	vmul.f32	s15, s17, s15
    svf->ic2eq = 0.0f;
24013bb2:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24013bb4:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24013bb8:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013bbc:	ee27 0a80 	vmul.f32	s0, s15, s0
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013bc0:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013bc4:	f009 f9ee 	bl	2401cfa4 <tanf>
    svf->k = 1.0f/Q;
24013bc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013bcc:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
24013bd0:	2e01      	cmp	r6, #1
    svf->cH = 0.0f;
24013bd2:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24013bd4:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24013bd8:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24013bdc:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24013bde:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013be0:	eef0 6a67 	vmov.f32	s13, s15
24013be4:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24013be8:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013bec:	eee0 6a06 	vfma.f32	s13, s0, s12
24013bf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24013bf4:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013bf8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24013bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24013c00:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24013c04:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
24013c08:	d00c      	beq.n	24013c24 <tSVF_initToPool+0xcc>
    else if (type == SVFTypeBandpass)
24013c0a:	2e04      	cmp	r6, #4
24013c0c:	d80a      	bhi.n	24013c24 <tSVF_initToPool+0xcc>
24013c0e:	e8df f006 	tbb	[pc, r6]
24013c12:	0930      	.short	0x0930
24013c14:	3b03      	.short	0x3b03
24013c16:	23          	.byte	0x23
24013c17:	00          	.byte	0x00
        svf->cB = 1.0f;
24013c18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        svf->cL = 0.0f;
24013c1c:	2300      	movs	r3, #0
24013c1e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cB = 1.0f;
24013c20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    if (leaf->sampleRate > 90000)
24013c24:	f44f 4248 	mov.w	r2, #51200	; 0xc800
24013c28:	ed97 7a00 	vldr	s14, [r7]
        svf->table = __filterTanhTable_48000;
24013c2c:	f64f 1194 	movw	r1, #63892	; 0xf994
24013c30:	f643 1394 	movw	r3, #14740	; 0x3994
    if (leaf->sampleRate > 90000)
24013c34:	f2c4 72af 	movt	r2, #18351	; 0x47af
        svf->table = __filterTanhTable_48000;
24013c38:	f2c2 4101 	movt	r1, #9217	; 0x2401
24013c3c:	f2c2 4302 	movt	r3, #9218	; 0x2402
    if (leaf->sampleRate > 90000)
24013c40:	ee07 2a90 	vmov	s15, r2
        svf->table = __filterTanhTable_48000;
24013c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
24013c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c4c:	bfd8      	it	le
24013c4e:	460b      	movle	r3, r1
24013c50:	6523      	str	r3, [r4, #80]	; 0x50
    }
}
24013c52:	ecbd 8b02 	vpop	{d8}
24013c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
24013c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        svf->cBK = -1.0f;
24013c5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
        svf->cL = -2.0f;
24013c60:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
        svf->cH = 1.0f;
24013c64:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24013c68:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
24013c6c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
24013c70:	e7d8      	b.n	24013c24 <tSVF_initToPool+0xcc>
        svf->cBK = -1.0f;
24013c72:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        svf->cH = 1.0f;
24013c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        svf->cBK = -1.0f;
24013c7a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
24013c7e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
        svf->cL = -1.0f;
24013c82:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
24013c86:	e7cd      	b.n	24013c24 <tSVF_initToPool+0xcc>
        svf->cH = 1.0f;
24013c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        svf->cL = 0.0f;
24013c8c:	2300      	movs	r3, #0
        svf->cBK = -1.0f;
24013c8e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        svf->cL = 0.0f;
24013c92:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
24013c94:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24013c98:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
24013c9c:	e7c2      	b.n	24013c24 <tSVF_initToPool+0xcc>
24013c9e:	bf00      	nop

24013ca0 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
24013ca0:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
24013ca2:	6801      	ldr	r1, [r0, #0]
24013ca4:	f003 ba1e 	b.w	240170e4 <mpool_free>

24013ca8 <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24013ca8:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013caa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24013cae:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013cb2:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013cb6:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013cba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
24013cbe:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013cc2:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
24013cc6:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
24013cca:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013cce:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
24013cd2:	ee67 7a84 	vmul.f32	s15, s15, s8
24013cd6:	ed93 2a08 	vldr	s4, [r3, #32]
24013cda:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24013cde:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
24013ce2:	eea2 5a23 	vfma.f32	s10, s4, s7
24013ce6:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013cea:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013cee:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013cf2:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24013cf6:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013cfa:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24013cfe:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d02:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013d06:	edc3 6a06 	vstr	s13, [r3, #24]
}
24013d0a:	eea3 7a80 	vfma.f32	s14, s7, s0
24013d0e:	eeb0 0a47 	vmov.f32	s0, s14
24013d12:	4770      	bx	lr

24013d14 <tSVF_tickHP>:

Lfloat   tSVF_tickHP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24013d14:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
    v2 = svf->ic2eq + svf->g * v1;
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d16:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013d1a:	ed93 7a06 	vldr	s14, [r3, #24]
24013d1e:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
24013d22:	ee70 7a47 	vsub.f32	s15, s0, s14
24013d26:	edd3 6a05 	vldr	s13, [r3, #20]
24013d2a:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    v2 = svf->ic2eq + svf->g * v1;
24013d2e:	edd3 4a07 	vldr	s9, [r3, #28]
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013d32:	ee67 7a84 	vmul.f32	s15, s15, s8
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    return v0  - (svf->k * v1) - (v2);
24013d36:	ed93 5a08 	vldr	s10, [r3, #32]
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013d3a:	eee6 7a26 	vfma.f32	s15, s12, s13
    v2 = svf->ic2eq + svf->g * v1;
24013d3e:	eeb0 6a47 	vmov.f32	s12, s14
24013d42:	eea4 6aa7 	vfma.f32	s12, s9, s15
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d46:	eed7 6aa5 	vfnms.f32	s13, s15, s11
    return v0  - (svf->k * v1) - (v2);
24013d4a:	eea5 0a67 	vfms.f32	s0, s10, s15
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013d4e:	ee96 7a25 	vfnms.f32	s14, s12, s11
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d52:	edc3 6a05 	vstr	s13, [r3, #20]
}
24013d56:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013d5a:	ed83 7a06 	vstr	s14, [r3, #24]
}
24013d5e:	4770      	bx	lr

24013d60 <tSVF_tickBP>:

Lfloat   tSVF_tickBP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24013d60:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
    v2 = svf->ic2eq + svf->g * v1;
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013d66:	edd3 7a06 	vldr	s15, [r3, #24]
24013d6a:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24013d6e:	ee30 0a67 	vsub.f32	s0, s0, s15
24013d72:	ed93 7a05 	vldr	s14, [r3, #20]
24013d76:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    v2 = svf->ic2eq + svf->g * v1;
24013d7a:	edd3 5a07 	vldr	s11, [r3, #28]
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013d7e:	ee20 0a05 	vmul.f32	s0, s0, s10
24013d82:	eea6 0a07 	vfma.f32	s0, s12, s14
    v2 = svf->ic2eq + svf->g * v1;
24013d86:	eeb0 6a67 	vmov.f32	s12, s15
24013d8a:	eea5 6a80 	vfma.f32	s12, s11, s0
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d8e:	ee90 7a26 	vfnms.f32	s14, s0, s13
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013d92:	eed6 7a26 	vfnms.f32	s15, s12, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013d96:	ed83 7a05 	vstr	s14, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013d9a:	edc3 7a06 	vstr	s15, [r3, #24]
    
    return v1;
}
24013d9e:	4770      	bx	lr

24013da0 <tSVF_tickLP>:

Lfloat   tSVF_tickLP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24013da0:	6803      	ldr	r3, [r0, #0]
    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
    v2 = svf->ic2eq + svf->g * v1;
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013da2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013da6:	ed93 7a06 	vldr	s14, [r3, #24]
24013daa:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
24013dae:	ee70 7a47 	vsub.f32	s15, s0, s14
24013db2:	edd3 6a05 	vldr	s13, [r3, #20]
24013db6:	ed93 5a09 	vldr	s10, [r3, #36]	; 0x24
    v2 = svf->ic2eq + svf->g * v1;
24013dba:	eeb0 0a47 	vmov.f32	s0, s14
24013dbe:	edd3 5a07 	vldr	s11, [r3, #28]
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
24013dc2:	ee67 7aa4 	vmul.f32	s15, s15, s9
24013dc6:	eee5 7a26 	vfma.f32	s15, s10, s13
    v2 = svf->ic2eq + svf->g * v1;
24013dca:	eea5 0aa7 	vfma.f32	s0, s11, s15
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013dce:	eed7 6a86 	vfnms.f32	s13, s15, s12
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013dd2:	ee90 7a06 	vfnms.f32	s14, s0, s12
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013dd6:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013dda:	ed83 7a06 	vstr	s14, [r3, #24]
    return v2;
}
24013dde:	4770      	bx	lr

24013de0 <tSVF_setFreq>:
    if (val < min)
24013de0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
24013de4:	b510      	push	{r4, lr}
24013de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    _tSVF* svf = *svff;
24013dea:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
24013dec:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
24013df0:	d42e      	bmi.n	24013e50 <tSVF_setFreq+0x70>
24013df2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24013df6:	ee67 7a87 	vmul.f32	s15, s15, s14
24013dfa:	fe87 0ac0 	vminnm.f32	s0, s15, s0
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
24013dfe:	f640 73db 	movw	r3, #4059	; 0xfdb
24013e02:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
24013e06:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
24013e0a:	f2c4 0349 	movt	r3, #16457	; 0x4049
24013e0e:	ee07 3a90 	vmov	s15, r3
24013e12:	ee67 7a27 	vmul.f32	s15, s14, s15
24013e16:	ee27 0a80 	vmul.f32	s0, s15, s0
24013e1a:	f009 f8c3 	bl	2401cfa4 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013e22:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
24013e26:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e2a:	ee70 7a27 	vadd.f32	s15, s0, s15
24013e2e:	eeb0 6a66 	vmov.f32	s12, s13
24013e32:	eea0 6a27 	vfma.f32	s12, s0, s15
24013e36:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
24013e3a:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e3e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24013e42:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24013e46:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24013e4a:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
24013e4e:	bd10      	pop	{r4, pc}
24013e50:	2300      	movs	r3, #0
        return min;
24013e52:	ee00 3a10 	vmov	s0, r3
24013e56:	e7d2      	b.n	24013dfe <tSVF_setFreq+0x1e>

24013e58 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
    _tSVF* svf = *vf;
    svf->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24013e58:	f648 128d 	movw	r2, #35213	; 0x898d
    _tSVF* svf = *vf;
24013e5c:	6803      	ldr	r3, [r0, #0]
    svf->cutoffMIDI = cutoff;
24013e5e:	f640 7cfe 	movw	ip, #4094	; 0xffe
    {
        intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24013e66:	f2c4 12f4 	movt	r2, #16884	; 0x41f4
    svf->cutoffMIDI = cutoff;
24013e6a:	ed83 0a04 	vstr	s0, [r3, #16]
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013e6e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24013e70:	ee07 2a90 	vmov	s15, r2
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013e74:	ed93 5a13 	vldr	s10, [r3, #76]	; 0x4c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e78:	edd3 6a08 	vldr	s13, [r3, #32]
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24013e7c:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
24013e80:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013e84:	ee37 6a40 	vsub.f32	s12, s14, s0
    int32_t intVer = (int32_t)cutoff;
24013e88:	ee17 2a90 	vmov	r2, s15
24013e8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24013e90:	4562      	cmp	r2, ip
24013e92:	bfa8      	it	ge
24013e94:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013e96:	ee07 2a90 	vmov	s15, r2
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013e9a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013e9e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013ea2:	ed92 4a01 	vldr	s8, [r2, #4]
24013ea6:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013eaa:	ee70 7a65 	vsub.f32	s15, s0, s11
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013eae:	ee36 6a25 	vadd.f32	s12, s12, s11
24013eb2:	ee67 7a84 	vmul.f32	s15, s15, s8
24013eb6:	eee4 7a86 	vfma.f32	s15, s9, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013eba:	eeb0 6a47 	vmov.f32	s12, s14
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013ebe:	ee67 7a85 	vmul.f32	s15, s15, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013ec2:	ee77 6aa6 	vadd.f32	s13, s15, s13
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24013ec6:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013eca:	eea7 6aa6 	vfma.f32	s12, s15, s13
24013ece:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24013ed2:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013ed6:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24013eda:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24013ede:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24013ee2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24013ee6:	4770      	bx	lr

24013ee8 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24013ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24013eec:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013eee:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
24013ef2:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
24013ef6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013efa:	eeb0 6a47 	vmov.f32	s12, s14
24013efe:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
24013f02:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013f06:	eea7 6aa5 	vfma.f32	s12, s15, s11
24013f0a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24013f0e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013f12:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24013f16:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24013f1a:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24013f1e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24013f22:	4770      	bx	lr

24013f24 <tSVF_setSampleRate>:
void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    svf->invSampleRate = 1.0f/svf->sampleRate;
24013f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sr > 80000)
24013f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    {
        svf->table = __filterTanhTable_96000;
    }
    else
    {
        svf->table = __filterTanhTable_48000;
24013f30:	f643 1394 	movw	r3, #14740	; 0x3994
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013f34:	f2c4 713b 	movt	r1, #18235	; 0x473b
    svf->invSampleRate = 1.0f/svf->sampleRate;
24013f38:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sr > 80000)
24013f3c:	f2c4 729c 	movt	r2, #18332	; 0x479c
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013f40:	ee07 1a10 	vmov	s14, r1
        svf->table = __filterTanhTable_48000;
24013f44:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sr > 80000)
24013f48:	ee07 2a90 	vmov	s15, r2
        svf->table = __filterTanhTable_48000;
24013f4c:	f2c2 4302 	movt	r3, #9218	; 0x2402
24013f50:	f2c2 4101 	movt	r1, #9217	; 0x2401
    _tSVF* svf = *svff;
24013f54:	6802      	ldr	r2, [r0, #0]
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013f56:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->sampleRate = sr;
24013f5a:	ed82 0a10 	vstr	s0, [r2, #64]	; 0x40
        svf->table = __filterTanhTable_48000;
24013f5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f66:	bfd8      	it	le
24013f68:	460b      	movle	r3, r1
    svf->invSampleRate = 1.0f/svf->sampleRate;
24013f6a:	ed82 6a11 	vstr	s12, [r2, #68]	; 0x44
    svf->sampleRatio = 48000.0f /svf->sampleRate;
24013f6e:	6513      	str	r3, [r2, #80]	; 0x50
24013f70:	edc2 6a13 	vstr	s13, [r2, #76]	; 0x4c
    }
}
24013f74:	4770      	bx	lr
24013f76:	bf00      	nop

24013f78 <tSVF_LP_init>:


// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_LP_init(tSVF_LP* const svff, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24013f78:	b570      	push	{r4, r5, r6, lr}
24013f7a:	ed2d 8b02 	vpush	{d8}
    tSVF_LP_initToPool     (svff, freq, Q, &leaf->mempool);
}

void    tSVF_LP_initToPool     (tSVF_LP* const svff, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24013f7e:	698d      	ldr	r5, [r1, #24]
{
24013f80:	4606      	mov	r6, r0
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
24013f82:	2048      	movs	r0, #72	; 0x48
{
24013f84:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
24013f88:	4629      	mov	r1, r5
{
24013f8a:	eef0 8a40 	vmov.f32	s17, s0
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
24013f8e:	f002 ffe7 	bl	24016f60 <mpool_alloc>
    svf->invSampleRate = leaf->invSampleRate;
    svf->sampleRatio = svf->sampleRate/48000.0f;
    
    svf->ic1eq = 0.0f;
    svf->ic2eq = 0.0f;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013f92:	f640 7cdb 	movw	ip, #4059	; 0xfdb
    svf->sampleRatio = svf->sampleRate/48000.0f;
24013f96:	f24c 333e 	movw	r3, #49982	; 0xc33e
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
24013f9a:	6030      	str	r0, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013f9c:	f2c4 0c49 	movt	ip, #16457	; 0x4049
    svf->mempool = m;
24013fa0:	6005      	str	r5, [r0, #0]
    svf->sampleRatio = svf->sampleRate/48000.0f;
24013fa2:	f2c3 73ae 	movt	r3, #14254	; 0x37ae
    LEAF* leaf = svf->mempool->leaf;
24013fa6:	686d      	ldr	r5, [r5, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013fa8:	ee07 ca10 	vmov	s14, ip
    svf->ic1eq = 0.0f;
24013fac:	2200      	movs	r2, #0
    svf->sampleRatio = svf->sampleRate/48000.0f;
24013fae:	ee07 3a90 	vmov	s15, r3
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
24013fb2:	4604      	mov	r4, r0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013fb4:	ee28 0a87 	vmul.f32	s0, s17, s14
    svf->sampleRate = leaf->sampleRate;
24013fb8:	ed95 7a00 	vldr	s14, [r5]
    svf->sampleRatio = svf->sampleRate/48000.0f;
24013fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
    svf->sampleRate = leaf->sampleRate;
24013fc0:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    svf->invSampleRate = leaf->invSampleRate;
24013fc4:	ed95 7a01 	vldr	s14, [r5, #4]
    svf->ic1eq = 0.0f;
24013fc8:	6042      	str	r2, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013fca:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->ic2eq = 0.0f;
24013fce:	6082      	str	r2, [r0, #8]
    svf->invSampleRate = leaf->invSampleRate;
24013fd0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    svf->sampleRatio = svf->sampleRate/48000.0f;
24013fd4:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013fd8:	f008 ffe4 	bl	2401cfa4 <tanf>
    if (Q > 0.99f)
    {
    	Q = 0.99f;
    }
    svf->k = 2.0f *Q;
24013fdc:	f247 02a4 	movw	r2, #28836	; 0x70a4
    svf->onePlusg = 1.0f + svf->g;
24013fe0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    svf->a3 = svf->g*svf->a2;
    svf->a4 = 1.0f / svf->onePlusg;
    svf->a5 = svf->g*svf->a4;
    svf->nan = 0;
    
    if (leaf->sampleRate > 80000)
24013fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    svf->k = 2.0f *Q;
24013fe8:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013fec:	ed84 0a03 	vstr	s0, [r4, #12]
    if (leaf->sampleRate > 80000)
24013ff0:	f2c4 739c 	movt	r3, #18332	; 0x479c
    svf->nan = 0;
24013ff4:	2100      	movs	r1, #0
    svf->k = 2.0f *Q;
24013ff6:	ee06 2a90 	vmov	s13, r2
    svf->onePlusg = 1.0f + svf->g;
24013ffa:	ee70 7a25 	vadd.f32	s15, s0, s11
    if (leaf->sampleRate > 80000)
24013ffe:	ee07 3a10 	vmov	s14, r3
    svf->nan = 0;
24014002:	6421      	str	r1, [r4, #64]	; 0x40
    svf->k = 2.0f *Q;
24014004:	fec8 0a66 	vminnm.f32	s1, s16, s13
24014008:	ee70 0aa0 	vadd.f32	s1, s1, s1
    svf->a4 = 1.0f / svf->onePlusg;
2401400c:	ee85 5aa7 	vdiv.f32	s10, s11, s15
    svf->onePlusg = 1.0f + svf->g;
24014010:	edc4 7a04 	vstr	s15, [r4, #16]
    {
        svf->table = __filterTanhTable_96000;
    }
    else
    {
        svf->table = __filterTanhTable_48000;
24014014:	f64f 1294 	movw	r2, #63892	; 0xf994
24014018:	f643 1394 	movw	r3, #14740	; 0x3994
    svf->k = 2.0f *Q;
2401401c:	edc4 0a05 	vstr	s1, [r4, #20]
        svf->table = __filterTanhTable_48000;
24014020:	f2c2 4201 	movt	r2, #9217	; 0x2401
24014024:	f2c2 4302 	movt	r3, #9218	; 0x2402
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
24014028:	ee20 6ac0 	vnmul.f32	s12, s1, s0
2401402c:	eea7 6aa7 	vfma.f32	s12, s15, s15
24014030:	eec5 6a86 	vdiv.f32	s13, s11, s12
    svf->a4 = 1.0f / svf->onePlusg;
24014034:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
    svf->a5 = svf->g*svf->a4;
24014038:	ee20 6a05 	vmul.f32	s12, s0, s10
2401403c:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
    svf->a2 = svf->onePlusg*svf->a0;
24014040:	ee67 7aa6 	vmul.f32	s15, s15, s13
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
24014044:	edc4 6a06 	vstr	s13, [r4, #24]
    svf->a1 = svf->k * svf->a0;
24014048:	ee60 0aa6 	vmul.f32	s1, s1, s13
    svf->a3 = svf->g*svf->a2;
2401404c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->onePlusg*svf->a0;
24014050:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a1 = svf->k * svf->a0;
24014054:	edc4 0a07 	vstr	s1, [r4, #28]
    svf->a3 = svf->g*svf->a2;
24014058:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    if (leaf->sampleRate > 80000)
2401405c:	edd5 7a00 	vldr	s15, [r5]
        svf->table = __filterTanhTable_48000;
24014060:	eef4 7ac7 	vcmpe.f32	s15, s14
24014064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014068:	bfd8      	it	le
2401406a:	4613      	movle	r3, r2
2401406c:	6463      	str	r3, [r4, #68]	; 0x44
}
2401406e:	ecbd 8b02 	vpop	{d8}
24014072:	bd70      	pop	{r4, r5, r6, pc}

24014074 <tSVF_LP_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_LP_tick(tSVF_LP* const svff, Lfloat v0)
{
    _tSVF_LP* svf = *svff;
24014074:	6803      	ldr	r3, [r0, #0]
    Lfloat v1,v2;
    v1 = svf->a1*svf->ic2eq + svf->a2*svf->ic1eq + svf->a3*v0;
    v2 = svf->a4*svf->ic2eq + svf->a5*v1;
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
24014076:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    v1 = svf->a1*svf->ic2eq + svf->a2*svf->ic1eq + svf->a3*v0;
2401407a:	ed93 6a01 	vldr	s12, [r3, #4]
2401407e:	edd3 7a08 	vldr	s15, [r3, #32]
24014082:	edd3 6a02 	vldr	s13, [r3, #8]
24014086:	ee66 7a27 	vmul.f32	s15, s12, s15
2401408a:	edd3 3a07 	vldr	s7, [r3, #28]
2401408e:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
    v2 = svf->a4*svf->ic2eq + svf->a5*v1;
24014092:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    v1 = svf->a1*svf->ic2eq + svf->a2*svf->ic1eq + svf->a3*v0;
24014096:	eee3 7aa6 	vfma.f32	s15, s7, s13
    v2 = svf->a4*svf->ic2eq + svf->a5*v1;
2401409a:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
2401409e:	ed93 5a05 	vldr	s10, [r3, #20]
    v1 = svf->a1*svf->ic2eq + svf->a2*svf->ic1eq + svf->a3*v0;
240140a2:	eee4 7a00 	vfma.f32	s15, s8, s0
    v2 = svf->a4*svf->ic2eq + svf->a5*v1;
240140a6:	ee27 0a87 	vmul.f32	s0, s15, s14
240140aa:	eea6 0aa4 	vfma.f32	s0, s13, s9
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
240140ae:	eee5 7a40 	vfms.f32	s15, s10, s0
    svf->ic2eq = (2.0f*v2) - svf->ic2eq;
240140b2:	eed0 6a25 	vfnms.f32	s13, s0, s11
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
240140b6:	ee97 6aa5 	vfnms.f32	s12, s15, s11
    svf->ic2eq = (2.0f*v2) - svf->ic2eq;
240140ba:	edc3 6a02 	vstr	s13, [r3, #8]
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
240140be:	ed83 6a01 	vstr	s12, [r3, #4]
    return v2;
}
240140c2:	4770      	bx	lr

240140c4 <tSVF_LP_setFreqFast>:

void    tSVF_LP_setFreqFast     (tSVF_LP* const vf, Lfloat cutoff)
{
    _tSVF_LP* svf = *vf;
    //svf->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240140c4:	f648 128d 	movw	r2, #35213	; 0x898d
240140c8:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tSVF_LP* svf = *vf;
240140cc:	6803      	ldr	r3, [r0, #0]
    {
        intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
240140ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240140d2:	f2c4 12f4 	movt	r2, #16884	; 0x41f4
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
240140d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240140d8:	ee07 2a90 	vmov	s15, r2
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
240140dc:	ed93 5a0f 	vldr	s10, [r3, #60]	; 0x3c
    svf->onePlusg = 1.0f + svf->g;
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
240140e0:	edd3 6a05 	vldr	s13, [r3, #20]
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240140e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
240140e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
240140ec:	ee36 7a40 	vsub.f32	s14, s12, s0
    int32_t intVer = (int32_t)cutoff;
240140f0:	ee17 2a90 	vmov	r2, s15
240140f4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
240140f8:	4562      	cmp	r2, ip
240140fa:	bfa8      	it	ge
240140fc:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240140fe:	ee07 2a90 	vmov	s15, r2
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24014102:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014106:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
2401410a:	ed92 4a01 	vldr	s8, [r2, #4]
2401410e:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014112:	ee70 7a65 	vsub.f32	s15, s0, s11
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
24014116:	ee37 7a25 	vadd.f32	s14, s14, s11
2401411a:	ee67 7a84 	vmul.f32	s15, s15, s8
2401411e:	eee4 7a87 	vfma.f32	s15, s9, s14
24014122:	ee67 7a85 	vmul.f32	s15, s15, s10
    svf->onePlusg = 1.0f + svf->g;
24014126:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
2401412a:	edc3 7a03 	vstr	s15, [r3, #12]
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
2401412e:	ee26 5ae7 	vnmul.f32	s10, s13, s15
    svf->a1 = svf->k * svf->a0;
    svf->a2 = svf->onePlusg*svf->a0;
    svf->a3 = svf->g*svf->a2;
    svf->a4 = 1.0f / svf->onePlusg;
24014132:	eec6 4a07 	vdiv.f32	s9, s12, s14
    svf->onePlusg = 1.0f + svf->g;
24014136:	ed83 7a04 	vstr	s14, [r3, #16]
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
2401413a:	eea7 5a07 	vfma.f32	s10, s14, s14
2401413e:	eec6 5a05 	vdiv.f32	s11, s12, s10
    svf->a5 = svf->g*svf->a4;
24014142:	ee27 6aa4 	vmul.f32	s12, s15, s9
    svf->a4 = 1.0f / svf->onePlusg;
24014146:	edc3 4a0a 	vstr	s9, [r3, #40]	; 0x28
    svf->a5 = svf->g*svf->a4;
2401414a:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
    svf->a2 = svf->onePlusg*svf->a0;
2401414e:	ee27 7a25 	vmul.f32	s14, s14, s11
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
24014152:	edc3 5a06 	vstr	s11, [r3, #24]
    svf->a1 = svf->k * svf->a0;
24014156:	ee66 6aa5 	vmul.f32	s13, s13, s11
    svf->a3 = svf->g*svf->a2;
2401415a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->onePlusg*svf->a0;
2401415e:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a1 = svf->k * svf->a0;
24014162:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a3 = svf->g*svf->a2;
24014166:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
2401416a:	4770      	bx	lr

2401416c <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
2401416c:	b538      	push	{r3, r4, r5, lr}
2401416e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
24014172:	698c      	ldr	r4, [r1, #24]
{
24014174:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24014176:	2018      	movs	r0, #24
{
24014178:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401417c:	4621      	mov	r1, r4
2401417e:	f002 ff53 	bl	24017028 <mpool_calloc>
24014182:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24014184:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24014186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401418a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
2401418c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401418e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24014192:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24014194:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
24014198:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
2401419a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401419e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240141a2:	edc0 7a03 	vstr	s15, [r0, #12]
}
240141a6:	ecbd 8b02 	vpop	{d8}
240141aa:	bd38      	pop	{r3, r4, r5, pc}

240141ac <tHighpass_initToPool>:
{
240141ac:	b538      	push	{r3, r4, r5, lr}
240141ae:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240141b2:	680c      	ldr	r4, [r1, #0]
{
240141b4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240141b6:	2018      	movs	r0, #24
{
240141b8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240141bc:	4621      	mov	r1, r4
240141be:	f002 ff33 	bl	24017028 <mpool_calloc>
240141c2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240141c4:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240141c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240141ca:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
240141cc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240141ce:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240141d2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240141d4:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
240141d8:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
240141da:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240141de:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240141e2:	edc0 7a03 	vstr	s15, [r0, #12]
}
240141e6:	ecbd 8b02 	vpop	{d8}
240141ea:	bd38      	pop	{r3, r4, r5, pc}

240141ec <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
240141ec:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
240141ee:	6801      	ldr	r1, [r0, #0]
240141f0:	f002 bf78 	b.w	240170e4 <mpool_free>

240141f4 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
240141f4:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240141f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240141fa:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
240141fe:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24014202:	eee7 7a40 	vfms.f32	s15, s14, s0
24014206:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401420a:	4770      	bx	lr

2401420c <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
2401420c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
2401420e:	edd3 7a01 	vldr	s15, [r3, #4]
24014212:	ed93 7a02 	vldr	s14, [r3, #8]
24014216:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
2401421a:	ed83 0a01 	vstr	s0, [r3, #4]
2401421e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24014222:	ee30 0a27 	vadd.f32	s0, s0, s15
24014226:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
2401422a:	4770      	bx	lr

2401422c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401422c:	f640 73db 	movw	r3, #4059	; 0xfdb
    _tHighpass* f = *ft;
24014230:	6802      	ldr	r2, [r0, #0]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24014232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24014236:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401423a:	ed92 6a04 	vldr	s12, [r2, #16]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401423e:	ee07 3a90 	vmov	s15, r3
24014242:	eec7 6a80 	vdiv.f32	s13, s15, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24014246:	eea6 7ac6 	vfms.f32	s14, s13, s12
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401424a:	edc2 6a05 	vstr	s13, [r2, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401424e:	ed82 7a03 	vstr	s14, [r2, #12]
}
24014252:	4770      	bx	lr

24014254 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
24014254:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24014256:	edd3 6a03 	vldr	s13, [r3, #12]
2401425a:	ed93 7a02 	vldr	s14, [r3, #8]
2401425e:	ee70 7a66 	vsub.f32	s15, s0, s13
24014262:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24014266:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2401426a:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401426e:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
24014272:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24014276:	edd3 4a08 	vldr	s9, [r3, #32]
2401427a:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401427e:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
24014282:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24014286:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
2401428a:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401428e:	eeb0 5a47 	vmov.f32	s10, s14
24014292:	eea4 0a87 	vfma.f32	s0, s9, s14
24014296:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401429a:	eef0 7a66 	vmov.f32	s15, s13
}
2401429e:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240142a2:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240142a6:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
240142aa:	edc3 7a03 	vstr	s15, [r3, #12]
}
240142ae:	4770      	bx	lr

240142b0 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
240142b0:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
240142b2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142b4:	f640 73db 	movw	r3, #4059	; 0xfdb
{
240142b8:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142bc:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240142c0:	f2c4 0349 	movt	r3, #16457	; 0x4049
240142c4:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
240142c8:	ee07 3a90 	vmov	s15, r3
240142cc:	ee68 8a87 	vmul.f32	s17, s17, s14
240142d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
240142d4:	eeb0 0a68 	vmov.f32	s0, s17
240142d8:	f008 fe64 	bl	2401cfa4 <tanf>
    
    switch( f->type )
240142dc:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142de:	eeb0 8a40 	vmov.f32	s16, s0
240142e2:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
240142e6:	2b0a      	cmp	r3, #10
240142e8:	f200 812c 	bhi.w	24014544 <tVZFilter_calcCoeffs+0x294>
240142ec:	e8df f013 	tbh	[pc, r3, lsl #1]
240142f0:	00320028 	.word	0x00320028
240142f4:	0046003c 	.word	0x0046003c
240142f8:	005d0052 	.word	0x005d0052
240142fc:	00a90092 	.word	0x00a90092
24014300:	011d00c0 	.word	0x011d00c0
24014304:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24014306:	edd4 7a05 	vldr	s15, [r4, #20]
2401430a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401430e:	eef1 6a67 	vneg.f32	s13, s15
24014312:	ed84 7a07 	vstr	s14, [r4, #28]
24014316:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
2401431a:	edc4 6a08 	vstr	s13, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401431e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24014322:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014326:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
2401432a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401432e:	eee7 6a88 	vfma.f32	s13, s15, s16
24014332:	eec7 7a26 	vdiv.f32	s15, s14, s13
24014336:	edc4 7a06 	vstr	s15, [r4, #24]
}
2401433a:	ecbd 8b02 	vpop	{d8}
2401433e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24014340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014344:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24014346:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401434a:	61e3      	str	r3, [r4, #28]
2401434c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24014350:	6223      	str	r3, [r4, #32]
            break;
24014352:	e7e4      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24014354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014358:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401435a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2401435e:	6223      	str	r3, [r4, #32]
24014360:	ed84 7a07 	vstr	s14, [r4, #28]
24014364:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24014366:	e7da      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24014368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401436c:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401436e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24014372:	61e3      	str	r3, [r4, #28]
24014374:	ed84 7a08 	vstr	s14, [r4, #32]
24014378:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401437a:	e7d0      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401437c:	edd4 7a05 	vldr	s15, [r4, #20]
24014380:	2300      	movs	r3, #0
24014382:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24014386:	61e3      	str	r3, [r4, #28]
24014388:	ee27 7a27 	vmul.f32	s14, s14, s15
2401438c:	6263      	str	r3, [r4, #36]	; 0x24
2401438e:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24014392:	e7c4      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24014394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014398:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401439a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401439e:	6223      	str	r3, [r4, #32]
240143a0:	ed84 7a07 	vstr	s14, [r4, #28]
240143a4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
240143a8:	e7b9      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240143aa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240143ae:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240143b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240143b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
240143ba:	f008 fc11 	bl	2401cbe0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240143be:	ee28 0a80 	vmul.f32	s0, s17, s0
240143c2:	f008 fdef 	bl	2401cfa4 <tanf>
            Lfloat r  = f->g/wl;
240143c6:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240143ca:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
240143ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240143d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
240143d6:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240143da:	ed84 7a07 	vstr	s14, [r4, #28]
240143de:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240143e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240143e6:	eea7 7aa7 	vfma.f32	s14, s15, s15
240143ea:	eef0 6a47 	vmov.f32	s13, s14
240143ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240143f2:	ee77 7a45 	vsub.f32	s15, s14, s10
240143f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
240143fa:	ee87 7a86 	vdiv.f32	s14, s15, s12
240143fe:	eef1 7ac7 	vsqrt.f32	s15, s14
24014402:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014406:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401440a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401440e:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24014412:	e784      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            Lfloat A = sqrtf(f->G);
24014414:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014418:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401441c:	edd4 7a05 	vldr	s15, [r4, #20]
24014420:	eef1 6ac7 	vsqrt.f32	s13, s14
24014424:	ed84 7a07 	vstr	s14, [r4, #28]
24014428:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
2401442c:	ee27 6a27 	vmul.f32	s12, s14, s15
24014430:	ed84 6a08 	vstr	s12, [r4, #32]
24014434:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014438:	ee80 8a07 	vdiv.f32	s16, s0, s14
2401443c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24014440:	e76d      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            Lfloat A = sqrtf(f->G);
24014442:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24014446:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401444a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401444e:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24014452:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24014456:	edc4 5a07 	vstr	s11, [r4, #28]
2401445a:	ee27 6a27 	vmul.f32	s12, s14, s15
2401445e:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014462:	eeb1 7ae6 	vsqrt.f32	s14, s13
24014466:	ee20 8a07 	vmul.f32	s16, s0, s14
2401446a:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
2401446e:	e756      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            Lfloat x  = (2.0f*f->m-1.0f);
24014470:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
24014474:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24014478:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
}


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
2401447c:	2300      	movs	r3, #0
            Lfloat x  = (2.0f*f->m-1.0f);
2401447e:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014482:	edd4 7a05 	vldr	s15, [r4, #20]
24014486:	ee03 3a90 	vmov	s7, r3
    z.i  = 0x5f3759df - (z.i >> 1);
2401448a:	f645 13df 	movw	r3, #23007	; 0x59df
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401448e:	eef0 5a46 	vmov.f32	s11, s12
            Lfloat x  = (2.0f*f->m-1.0f);
24014492:	eee7 4a22 	vfma.f32	s9, s14, s5
24014496:	f6c5 7337 	movt	r3, #24375	; 0x5f37
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401449a:	ee27 2aa7 	vmul.f32	s4, s15, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401449e:	eee7 5a62 	vfms.f32	s11, s14, s5
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240144a2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240144a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
240144aa:	ee77 6a07 	vadd.f32	s13, s14, s14
240144ae:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
}

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
240144b2:	fe84 4ae3 	vminnm.f32	s8, s9, s7
240144b6:	ee24 7a04 	vmul.f32	s14, s8, s8
            f->cB = 1.0f-x*x;
240144ba:	eea4 6ae4 	vfms.f32	s12, s9, s9
    return (num1 > num2 ) ? num1 : num2;
240144be:	fec5 5aa3 	vmaxnm.f32	s11, s11, s7
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240144c2:	ee65 4ac4 	vnmul.f32	s9, s11, s8
240144c6:	eea5 7aa5 	vfma.f32	s14, s11, s11
240144ca:	eea6 7a06 	vfma.f32	s14, s12, s12
240144ce:	eea4 7aa2 	vfma.f32	s14, s9, s5
240144d2:	eec2 4a07 	vdiv.f32	s9, s4, s14
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240144d6:	ee14 2a90 	vmov	r2, s9
240144da:	ee24 5a85 	vmul.f32	s10, s9, s10
240144de:	eef0 4a43 	vmov.f32	s9, s6
240144e2:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240144e6:	ee07 3a10 	vmov	s14, r3
240144ea:	ee25 5a07 	vmul.f32	s10, s10, s14
240144ee:	eee7 4a45 	vfms.f32	s9, s14, s10
240144f2:	ee27 7a24 	vmul.f32	s14, s14, s9
240144f6:	ee17 3a10 	vmov	r3, s14
    z.i = 0x7EEEEEEE - z.i;
240144fa:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240144fe:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24014502:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24014506:	336e      	adds	r3, #110	; 0x6e
24014508:	ee07 3a10 	vmov	s14, r3
2401450c:	ee26 7a87 	vmul.f32	s14, s13, s14
            f->cL *= s; f->cB *= s; f->cH *= s;
24014510:	ee67 5a25 	vmul.f32	s11, s14, s11
24014514:	ee26 6a07 	vmul.f32	s12, s12, s14
24014518:	ee27 7a04 	vmul.f32	s14, s14, s8
2401451c:	edc4 5a07 	vstr	s11, [r4, #28]
24014520:	ed84 6a08 	vstr	s12, [r4, #32]
24014524:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
        break;
24014528:	e6f9      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 1.0f;
2401452a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            f->R2 = f->invG;
2401452e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24014532:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24014536:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cL = 1.0f;
2401453a:	ed84 7a07 	vstr	s14, [r4, #28]
            f->cH = 1.0f;
2401453e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
24014542:	e6ec      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24014544:	edd4 7a05 	vldr	s15, [r4, #20]
24014548:	e6e9      	b.n	2401431e <tVZFilter_calcCoeffs+0x6e>
2401454a:	bf00      	nop

2401454c <tVZFilter_initToPool>:
{
2401454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24014550:	ed2d 8b06 	vpush	{d8-d10}
24014554:	eef0 8a40 	vmov.f32	s17, s0
    _tMempool* m = *mp;
24014558:	6816      	ldr	r6, [r2, #0]
{
2401455a:	4605      	mov	r5, r0
2401455c:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
2401455e:	2058      	movs	r0, #88	; 0x58
24014560:	4631      	mov	r1, r6
{
24014562:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24014566:	f002 fcfb 	bl	24016f60 <mpool_alloc>
    if (val < min)
2401456a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    f->sampRatio = 48000.0f / f->sampleRate;
2401456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24014572:	6028      	str	r0, [r5, #0]
24014574:	4604      	mov	r4, r0
    f->mempool = m;
24014576:	6006      	str	r6, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
24014578:	f2c4 733b 	movt	r3, #18235	; 0x473b
    LEAF* leaf = f->mempool->leaf;
2401457c:	6876      	ldr	r6, [r6, #4]
2401457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->sampRatio = 48000.0f / f->sampleRate;
24014582:	ee07 3a90 	vmov	s15, r3
    f->sampleRate = leaf->sampleRate;
24014586:	ed96 7a00 	vldr	s14, [r6]
2401458a:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    f->sampRatio = 48000.0f / f->sampleRate;
2401458e:	ee87 aa87 	vdiv.f32	s20, s15, s14
    f->invSampleRate = leaf->invSampleRate;
24014592:	edd6 9a01 	vldr	s19, [r6, #4]
24014596:	f100 80b8 	bmi.w	2401470a <tVZFilter_initToPool+0x1be>
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401459a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401459e:	ee27 7a27 	vmul.f32	s14, s14, s15
240145a2:	fec7 8a68 	vminnm.f32	s17, s14, s17
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240145a6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
240145aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240145ae:	f340 80b8 	ble.w	24014722 <tVZFilter_initToPool+0x1d6>
240145b2:	f647 63d2 	movw	r3, #32466	; 0x7ed2
240145b6:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
240145ba:	ee00 3a10 	vmov	s0, r3
240145be:	ee28 0a80 	vmul.f32	s0, s17, s0
240145c2:	f008 f909 	bl	2401c7d8 <logf>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240145c6:	f640 73db 	movw	r3, #4059	; 0xfdb
240145ca:	eeb0 9a40 	vmov.f32	s18, s0
240145ce:	f2c4 0349 	movt	r3, #16457	; 0x4049
240145d2:	ee00 3a10 	vmov	s0, r3
240145d6:	f647 73ac 	movw	r3, #32684	; 0x7fac
240145da:	ee29 0a80 	vmul.f32	s0, s19, s0
240145de:	f2c4 138a 	movt	r3, #16778	; 0x418a
240145e2:	ee07 3a90 	vmov	s15, r3
240145e6:	ee20 0a28 	vmul.f32	s0, s0, s17
240145ea:	ee29 9a27 	vmul.f32	s18, s18, s15
240145ee:	f008 fcd9 	bl	2401cfa4 <tanf>
    f->invG = 1.414213562373095f;
240145f2:	f240 43f3 	movw	r3, #1267	; 0x4f3
    f->R2Plusg = f->R2 + f->g;
240145f6:	edd4 6a04 	vldr	s13, [r4, #16]
    f->Q    = 0.5f;
240145fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    f->invSampleRate = leaf->invSampleRate;
240145fe:	edc4 9a12 	vstr	s19, [r4, #72]	; 0x48
    f->G    = INV_SQRT2;
24014602:	461a      	mov	r2, r3
    f->invG = 1.414213562373095f;
24014604:	f6c3 73b5 	movt	r3, #16309	; 0x3fb5
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014608:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
    f->sampRatio = 48000.0f / f->sampleRate;
2401460c:	ed84 aa13 	vstr	s20, [r4, #76]	; 0x4c
    f->invG = 1.414213562373095f;
24014610:	ee07 3a90 	vmov	s15, r3
    f->G    = INV_SQRT2;
24014614:	f6c3 7235 	movt	r2, #16181	; 0x3f35
    f->m    = 0.0f;
24014618:	2300      	movs	r3, #0
    f->Q    = 0.5f;
2401461a:	ed84 6a0d 	vstr	s12, [r4, #52]	; 0x34
    f->G    = INV_SQRT2;
2401461e:	62e2      	str	r2, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2 + f->g;
24014620:	ee76 6aa7 	vadd.f32	s13, s13, s15
24014624:	461a      	mov	r2, r3
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24014626:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
2401462a:	ed84 9a14 	vstr	s18, [r4, #80]	; 0x50
    f->m    = 0.0f;
2401462e:	ee07 3a10 	vmov	s14, r3
24014632:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    f->R2Plusg = f->R2 + f->g;
24014636:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->invG = 1.414213562373095f;
2401463a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->B    = bandWidth;
2401463e:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->m    = 0.0f;
24014642:	63e3      	str	r3, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
24014644:	60a3      	str	r3, [r4, #8]
    f->s2   = 0.0f;
24014646:	60e3      	str	r3, [r4, #12]
    f->R2   = f->invG;
24014648:	edc4 7a05 	vstr	s15, [r4, #20]
2401464c:	ee07 2a90 	vmov	s15, r2
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014650:	ed84 0a04 	vstr	s0, [r4, #16]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014654:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->type = type;
24014658:	7127      	strb	r7, [r4, #4]
    _tVZFilter* f = *vf;
2401465a:	fec8 7a67 	vminnm.f32	s15, s16, s15
2401465e:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24014662:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014666:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401466a:	edc8 7a0e 	vstr	s15, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
2401466e:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014670:	f008 fab6 	bl	2401cbe0 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24014674:	f640 73db 	movw	r3, #4059	; 0xfdb
24014678:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
2401467c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
24014680:	f2c4 0349 	movt	r3, #16457	; 0x4049
24014684:	ee67 7a87 	vmul.f32	s15, s15, s14
24014688:	ee07 3a10 	vmov	s14, r3
2401468c:	ee67 7a87 	vmul.f32	s15, s15, s14
24014690:	ee27 0a80 	vmul.f32	s0, s15, s0
24014694:	f008 fc86 	bl	2401cfa4 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24014698:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401469c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240146a0:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
240146a2:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
240146a6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
240146aa:	ee27 7a07 	vmul.f32	s14, s14, s14
240146ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
240146b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
240146b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
240146ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
240146be:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
240146c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
240146c6:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
240146ca:	f7ff fdf1 	bl	240142b0 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
240146ce:	4628      	mov	r0, r5
240146d0:	f7ff fdee 	bl	240142b0 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 80000)
240146d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240146d8:	ed96 7a00 	vldr	s14, [r6]
    	f->table = __filterTanhTable_48000;
240146dc:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (leaf->sampleRate > 80000)
240146e0:	f2c4 729c 	movt	r2, #18332	; 0x479c
    	f->table = __filterTanhTable_48000;
240146e4:	f643 1394 	movw	r3, #14740	; 0x3994
240146e8:	f2c2 4101 	movt	r1, #9217	; 0x2401
    if (leaf->sampleRate > 80000)
240146ec:	ee07 2a90 	vmov	s15, r2
    	f->table = __filterTanhTable_48000;
240146f0:	f2c2 4302 	movt	r3, #9218	; 0x2402
240146f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
240146f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240146fc:	bfd8      	it	le
240146fe:	460b      	movle	r3, r1
24014700:	6563      	str	r3, [r4, #84]	; 0x54
}
24014702:	ecbd 8b06 	vpop	{d8-d10}
24014706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2401470a:	2300      	movs	r3, #0
2401470c:	ee08 3a90 	vmov	s17, r3
24014710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24014714:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
24014718:	eeb0 0a68 	vmov.f32	s0, s17
2401471c:	ee09 3a10 	vmov	s18, r3
24014720:	e767      	b.n	240145f2 <tVZFilter_initToPool+0xa6>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014722:	f640 73db 	movw	r3, #4059	; 0xfdb
24014726:	f2c4 0349 	movt	r3, #16457	; 0x4049
2401472a:	ee00 3a10 	vmov	s0, r3
2401472e:	ee29 0a80 	vmul.f32	s0, s19, s0
24014732:	ee20 0a28 	vmul.f32	s0, s0, s17
24014736:	f008 fc35 	bl	2401cfa4 <tanf>
2401473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2401473e:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
24014742:	ee09 3a10 	vmov	s18, r3
24014746:	e754      	b.n	240145f2 <tVZFilter_initToPool+0xa6>

24014748 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24014748:	3218      	adds	r2, #24
2401474a:	f7ff beff 	b.w	2401454c <tVZFilter_initToPool>
2401474e:	bf00      	nop

24014750 <tVZFilter_setFreq>:
    if (val < min)
24014750:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
24014754:	6803      	ldr	r3, [r0, #0]
{
24014756:	b510      	push	{r4, lr}
24014758:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401475c:	ed2d 8b02 	vpush	{d8}
24014760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->fc = LEAF_clip(1.0f, freq, 0.5f * f->sampleRate);
24014764:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
24014768:	d405      	bmi.n	24014776 <tVZFilter_setFreq+0x26>
2401476a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401476e:	ee27 7a27 	vmul.f32	s14, s14, s15
24014772:	fec7 7a40 	vminnm.f32	s15, s14, s0
24014776:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401477a:	f640 73db 	movw	r3, #4059	; 0xfdb
    _tVZFilter* f = *vf;
2401477e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014780:	f2c4 0349 	movt	r3, #16457	; 0x4049
24014784:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
24014788:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
2401478c:	ee68 8aa7 	vmul.f32	s17, s17, s15
24014790:	ee07 3a90 	vmov	s15, r3
24014794:	ee68 8aa7 	vmul.f32	s17, s17, s15
24014798:	eeb0 0a68 	vmov.f32	s0, s17
2401479c:	f008 fc02 	bl	2401cfa4 <tanf>
    switch( f->type )
240147a0:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240147a2:	eeb0 8a40 	vmov.f32	s16, s0
240147a6:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
240147aa:	2b0a      	cmp	r3, #10
240147ac:	f200 812c 	bhi.w	24014a08 <tVZFilter_setFreq+0x2b8>
240147b0:	e8df f013 	tbh	[pc, r3, lsl #1]
240147b4:	00320028 	.word	0x00320028
240147b8:	0046003c 	.word	0x0046003c
240147bc:	005d0052 	.word	0x005d0052
240147c0:	00a90092 	.word	0x00a90092
240147c4:	011d00c0 	.word	0x011d00c0
240147c8:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240147ca:	edd4 7a05 	vldr	s15, [r4, #20]
240147ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240147d2:	eef1 6a67 	vneg.f32	s13, s15
240147d6:	ed84 7a07 	vstr	s14, [r4, #28]
240147da:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240147de:	edc4 6a08 	vstr	s13, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240147e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240147e6:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240147ea:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240147ee:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240147f2:	eee7 6a88 	vfma.f32	s13, s15, s16
240147f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
240147fa:	edc4 7a06 	vstr	s15, [r4, #24]
}
240147fe:	ecbd 8b02 	vpop	{d8}
24014802:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24014804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014808:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401480a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401480e:	61e3      	str	r3, [r4, #28]
24014810:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24014814:	6223      	str	r3, [r4, #32]
            break;
24014816:	e7e4      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24014818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401481c:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401481e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24014822:	6223      	str	r3, [r4, #32]
24014824:	ed84 7a07 	vstr	s14, [r4, #28]
24014828:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401482a:	e7da      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401482c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014830:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24014832:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24014836:	61e3      	str	r3, [r4, #28]
24014838:	ed84 7a08 	vstr	s14, [r4, #32]
2401483c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401483e:	e7d0      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24014840:	edd4 7a05 	vldr	s15, [r4, #20]
24014844:	2300      	movs	r3, #0
24014846:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2401484a:	61e3      	str	r3, [r4, #28]
2401484c:	ee27 7a27 	vmul.f32	s14, s14, s15
24014850:	6263      	str	r3, [r4, #36]	; 0x24
24014852:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24014856:	e7c4      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24014858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401485c:	2300      	movs	r3, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401485e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24014862:	6223      	str	r3, [r4, #32]
24014864:	ed84 7a07 	vstr	s14, [r4, #28]
24014868:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
2401486c:	e7b9      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401486e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24014872:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24014876:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401487a:	ee60 0aa7 	vmul.f32	s1, s1, s15
2401487e:	f008 f9af 	bl	2401cbe0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24014882:	ee28 0a80 	vmul.f32	s0, s17, s0
24014886:	f008 fb8d 	bl	2401cfa4 <tanf>
            Lfloat r  = f->g/wl;
2401488a:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401488e:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24014892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014896:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2401489a:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401489e:	ed84 7a07 	vstr	s14, [r4, #28]
240148a2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240148a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240148aa:	eea7 7aa7 	vfma.f32	s14, s15, s15
240148ae:	eef0 6a47 	vmov.f32	s13, s14
240148b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240148b6:	ee77 7a45 	vsub.f32	s15, s14, s10
240148ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
240148be:	ee87 7a86 	vdiv.f32	s14, s15, s12
240148c2:	eef1 7ac7 	vsqrt.f32	s15, s14
240148c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240148ca:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240148ce:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240148d2:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
240148d6:	e784      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            Lfloat A = sqrtf(f->G);
240148d8:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240148dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240148e0:	edd4 7a05 	vldr	s15, [r4, #20]
240148e4:	eef1 6ac7 	vsqrt.f32	s13, s14
240148e8:	ed84 7a07 	vstr	s14, [r4, #28]
240148ec:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
240148f0:	ee27 6a27 	vmul.f32	s12, s14, s15
240148f4:	ed84 6a08 	vstr	s12, [r4, #32]
240148f8:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240148fc:	ee80 8a07 	vdiv.f32	s16, s0, s14
24014900:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24014904:	e76d      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            Lfloat A = sqrtf(f->G);
24014906:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2401490a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401490e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014912:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24014916:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
2401491a:	edc4 5a07 	vstr	s11, [r4, #28]
2401491e:	ee27 6a27 	vmul.f32	s12, s14, s15
24014922:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014926:	eeb1 7ae6 	vsqrt.f32	s14, s13
2401492a:	ee20 8a07 	vmul.f32	s16, s0, s14
2401492e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24014932:	e756      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
24014934:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
24014938:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401493c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    return (num1 > num2 ) ? num1 : num2;
24014940:	2300      	movs	r3, #0
            Lfloat x  = (2.0f*f->m-1.0f);
24014942:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014946:	edd4 7a05 	vldr	s15, [r4, #20]
2401494a:	ee03 3a90 	vmov	s7, r3
    z.i  = 0x5f3759df - (z.i >> 1);
2401494e:	f645 13df 	movw	r3, #23007	; 0x59df
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24014952:	eeb0 6a66 	vmov.f32	s12, s13
            Lfloat x  = (2.0f*f->m-1.0f);
24014956:	eea7 4a22 	vfma.f32	s8, s14, s5
2401495a:	f6c5 7337 	movt	r3, #24375	; 0x5f37
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401495e:	ee27 2aa7 	vmul.f32	s4, s15, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24014962:	eea7 6a62 	vfms.f32	s12, s14, s5
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014966:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401496a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
2401496e:	ee77 5a07 	vadd.f32	s11, s14, s14
24014972:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
    return (num1 < num2 ) ? num1 : num2;
24014976:	fe84 5a63 	vminnm.f32	s10, s8, s7
2401497a:	ee25 7a05 	vmul.f32	s14, s10, s10
            f->cB = 1.0f-x*x;
2401497e:	eee4 6a44 	vfms.f32	s13, s8, s8
    return (num1 > num2 ) ? num1 : num2;
24014982:	fe86 6a23 	vmaxnm.f32	s12, s12, s7
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014986:	ee25 4a46 	vnmul.f32	s8, s10, s12
2401498a:	eea6 7a06 	vfma.f32	s14, s12, s12
2401498e:	eea6 7aa6 	vfma.f32	s14, s13, s13
24014992:	eea4 7a22 	vfma.f32	s14, s8, s5
24014996:	ee82 4a07 	vdiv.f32	s8, s4, s14
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401499a:	ee14 2a10 	vmov	r2, s8
2401499e:	ee64 4a24 	vmul.f32	s9, s8, s9
240149a2:	eeb0 4a43 	vmov.f32	s8, s6
240149a6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240149aa:	ee07 3a10 	vmov	s14, r3
240149ae:	ee64 4a87 	vmul.f32	s9, s9, s14
240149b2:	eea7 4a64 	vfms.f32	s8, s14, s9
240149b6:	ee27 7a04 	vmul.f32	s14, s14, s8
240149ba:	ee17 3a10 	vmov	r3, s14
    z.i = 0x7EEEEEEE - z.i;
240149be:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240149c2:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240149c6:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
240149ca:	336e      	adds	r3, #110	; 0x6e
240149cc:	ee07 3a10 	vmov	s14, r3
240149d0:	ee25 7a87 	vmul.f32	s14, s11, s14
            f->cL *= s; f->cB *= s; f->cH *= s;
240149d4:	ee26 6a07 	vmul.f32	s12, s12, s14
240149d8:	ee66 6a87 	vmul.f32	s13, s13, s14
240149dc:	ee25 5a07 	vmul.f32	s10, s10, s14
240149e0:	ed84 6a07 	vstr	s12, [r4, #28]
240149e4:	edc4 6a08 	vstr	s13, [r4, #32]
240149e8:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
        break;
240149ec:	e6f9      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 1.0f;
240149ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            f->R2 = f->invG;
240149f2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
240149f6:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
240149fa:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cL = 1.0f;
240149fe:	ed84 7a07 	vstr	s14, [r4, #28]
            f->cH = 1.0f;
24014a02:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
24014a06:	e6ec      	b.n	240147e2 <tVZFilter_setFreq+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24014a08:	edd4 7a05 	vldr	s15, [r4, #20]
24014a0c:	e6e9      	b.n	240147e2 <tVZFilter_setFreq+0x92>
24014a0e:	bf00      	nop

24014a10 <tVZFilter_setFrequencyAndResonance>:
    if (val < min)
24014a10:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    _tVZFilter* f = *vf;
24014a14:	6802      	ldr	r2, [r0, #0]
24014a16:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
24014a1a:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
24014a1e:	ee07 3a90 	vmov	s15, r3
24014a22:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014a2a:	d424      	bmi.n	24014a76 <tVZFilter_setFrequencyAndResonance+0x66>
24014a2c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24014a30:	f6c3 63cc 	movt	r3, #16076	; 0x3ecc
24014a34:	ee07 3a90 	vmov	s15, r3
24014a38:	ee27 7a27 	vmul.f32	s14, s14, s15
24014a3c:	fe87 0a40 	vminnm.f32	s0, s14, s0
24014a40:	2100      	movs	r1, #0
24014a42:	f24d 730a 	movw	r3, #55050	; 0xd70a
    f->R2 = 1.0f / f->Q;
24014a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
24014a4a:	ed82 0a0a 	vstr	s0, [r2, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24014a4e:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
24014a52:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24014a56:	ee07 1a10 	vmov	s14, r1
24014a5a:	ee07 3a90 	vmov	s15, r3
24014a5e:	fec0 0ac7 	vminnm.f32	s1, s1, s14
24014a62:	fec0 0aa7 	vmaxnm.f32	s1, s1, s15
    f->R2 = 1.0f / f->Q;
24014a66:	eec6 7aa0 	vdiv.f32	s15, s13, s1
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24014a6a:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24014a6e:	edc2 7a05 	vstr	s15, [r2, #20]
    tVZFilter_calcCoeffs(vf);
24014a72:	f7ff bc1d 	b.w	240142b0 <tVZFilter_calcCoeffs>
        return min;
24014a76:	ee00 3a10 	vmov	s0, r3
24014a7a:	e7e1      	b.n	24014a40 <tVZFilter_setFrequencyAndResonance+0x30>

24014a7c <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24014a7c:	b570      	push	{r4, r5, r6, lr}
24014a7e:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
24014a82:	680d      	ldr	r5, [r1, #0]
{
24014a84:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24014a86:	2048      	movs	r0, #72	; 0x48
{
24014a88:	eeb0 9a40 	vmov.f32	s18, s0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24014a8c:	4629      	mov	r1, r5
{
24014a8e:	eef0 8a60 	vmov.f32	s17, s1
24014a92:	eef0 aa41 	vmov.f32	s21, s2
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24014a96:	f002 fa63 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24014a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24014a9e:	6030      	str	r0, [r6, #0]
    f->mempool = m;
24014aa0:	6005      	str	r5, [r0, #0]
    if (val < min)
24014aa2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    LEAF* leaf = f->mempool->leaf;
24014aa6:	686d      	ldr	r5, [r5, #4]
    f->sampRatio = 48000.0f / f->sampleRate;
24014aa8:	f2c4 733b 	movt	r3, #18235	; 0x473b
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24014aac:	4604      	mov	r4, r0
    f->sampleRate = leaf->sampleRate;
24014aae:	ed95 7a00 	vldr	s14, [r5]
    f->sampRatio = 48000.0f / f->sampleRate;
24014ab2:	ee07 3a90 	vmov	s15, r3
24014ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014aba:	eec7 6a87 	vdiv.f32	s13, s15, s14
    f->sampleRate = leaf->sampleRate;
24014abe:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24014ac2:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
24014ac6:	ed95 aa01 	vldr	s20, [r5, #4]
24014aca:	f100 80ac 	bmi.w	24014c26 <tVZFilterLS_initToPool+0x1aa>
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24014ace:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24014ad2:	ee27 7a08 	vmul.f32	s14, s14, s16
24014ad6:	fe87 9a49 	vminnm.f32	s18, s14, s18
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014ada:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
24014ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014ae2:	f340 80f9 	ble.w	24014cd8 <tVZFilterLS_initToPool+0x25c>
24014ae6:	f647 63d2 	movw	r3, #32466	; 0x7ed2
24014aea:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
24014aee:	ee00 3a10 	vmov	s0, r3
24014af2:	ee29 0a00 	vmul.f32	s0, s18, s0
24014af6:	f007 fe6f 	bl	2401c7d8 <logf>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24014afa:	f640 73db 	movw	r3, #4059	; 0xfdb
24014afe:	f647 72ac 	movw	r2, #32684	; 0x7fac
24014b02:	f2c4 0349 	movt	r3, #16457	; 0x4049
24014b06:	f2c4 128a 	movt	r2, #16778	; 0x418a
24014b0a:	ee07 3a90 	vmov	s15, r3
24014b0e:	ee07 2a10 	vmov	s14, r2
24014b12:	ee6a 7a27 	vmul.f32	s15, s20, s15
24014b16:	ee60 9a07 	vmul.f32	s19, s0, s14
24014b1a:	ee27 0a89 	vmul.f32	s0, s15, s18
24014b1e:	f008 fa41 	bl	2401cfa4 <tanf>
24014b22:	2100      	movs	r1, #0
24014b24:	f243 72bd 	movw	r2, #14269	; 0x37bd
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014b28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24014b2c:	f2c4 517a 	movt	r1, #17786	; 0x457a
    z.i  = 0x5f3759df - (z.i >> 1);
24014b30:	f645 13df 	movw	r3, #23007	; 0x59df
24014b34:	f2c3 5286 	movt	r2, #13702	; 0x3586
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014b38:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24014b3c:	ee06 1a90 	vmov	s13, r1
    z.i  = 0x5f3759df - (z.i >> 1);
24014b40:	f6c5 7337 	movt	r3, #24375	; 0x5f37
24014b44:	ee07 2a90 	vmov	s15, r2
    z.i = 0x7EEEEEEE - z.i;
24014b48:	f64e 61ee 	movw	r1, #61166	; 0xeeee
24014b4c:	fe8a 1ae6 	vminnm.f32	s2, s21, s13
    f->R2 =    1.0f/Q;
24014b50:	eec6 6a28 	vdiv.f32	s13, s12, s17
24014b54:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014b58:	ee11 2a10 	vmov	r2, s2
    z.i = 0x7EEEEEEE - z.i;
24014b5c:	f6c7 61ee 	movt	r1, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014b60:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
24014b64:	ee61 5a08 	vmul.f32	s11, s2, s16
24014b68:	ee07 2a90 	vmov	s15, r2
24014b6c:	eeb0 5a47 	vmov.f32	s10, s14
24014b70:	ee65 5aa7 	vmul.f32	s11, s11, s15
24014b74:	eea7 5ae5 	vfms.f32	s10, s15, s11
24014b78:	ee67 7a85 	vmul.f32	s15, s15, s10
    z.i = 0x7EEEEEEE - z.i;
24014b7c:	ee17 2a90 	vmov	r2, s15
24014b80:	1a8a      	subs	r2, r1, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014b82:	ee07 2a90 	vmov	s15, r2
24014b86:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24014b8a:	ee27 8a88 	vmul.f32	s16, s15, s16
24014b8e:	ee07 3a90 	vmov	s15, r3
24014b92:	ee28 8a27 	vmul.f32	s16, s16, s15
24014b96:	eea7 7ac8 	vfms.f32	s14, s15, s16
24014b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    z.i = 0x7EEEEEEE - z.i;
24014b9e:	ee17 3a90 	vmov	r3, s15
24014ba2:	1ac9      	subs	r1, r1, r3
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014ba4:	ee07 1a90 	vmov	s15, r1
24014ba8:	eec6 5a27 	vdiv.f32	s11, s12, s15
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014bac:	eef0 7a46 	vmov.f32	s15, s12
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014bb0:	ee20 7a25 	vmul.f32	s14, s0, s11
    f->R2Plusg = f->R2+f->g;
24014bb4:	ee37 5a26 	vadd.f32	s10, s14, s13
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014bb8:	eee7 7a05 	vfma.f32	s15, s14, s10
24014bbc:	eec6 4a27 	vdiv.f32	s9, s12, s15
    if (leaf->sampleRate > 80000)
24014bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f->s1    = 0.0f;
24014bc4:	2200      	movs	r2, #0
    f->invSampleRate = leaf->invSampleRate;
24014bc6:	ed84 aa0c 	vstr	s20, [r4, #48]	; 0x30
    if (leaf->sampleRate > 80000)
24014bca:	f2c4 739c 	movt	r3, #18332	; 0x479c
    f->s1    = 0.0f;
24014bce:	6062      	str	r2, [r4, #4]
    f->s2   = 0.0f;
24014bd0:	60a2      	str	r2, [r4, #8]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24014bd2:	f64f 1294 	movw	r2, #63892	; 0xf994
    if (leaf->sampleRate > 80000)
24014bd6:	ee07 3a90 	vmov	s15, r3
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24014bda:	ed84 9a06 	vstr	s18, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24014bde:	edc4 9a11 	vstr	s19, [r4, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
24014be2:	f643 1394 	movw	r3, #14740	; 0x3994
    f->Q    = Q;
24014be6:	edc4 8a08 	vstr	s17, [r4, #32]
    	f->table = __filterTanhTable_48000;
24014bea:	f2c2 4201 	movt	r2, #9217	; 0x2401
    f->R2 =    1.0f/Q;
24014bee:	edc4 6a04 	vstr	s13, [r4, #16]
    	f->table = __filterTanhTable_48000;
24014bf2:	f2c2 4302 	movt	r3, #9218	; 0x2402
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24014bf6:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24014bfa:	ed84 1a07 	vstr	s2, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014bfe:	edc4 5a0e 	vstr	s11, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014c02:	ed84 7a03 	vstr	s14, [r4, #12]
    f->R2Plusg = f->R2+f->g;
24014c06:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014c0a:	edc4 4a05 	vstr	s9, [r4, #20]
    if (leaf->sampleRate > 80000)
24014c0e:	ed95 7a00 	vldr	s14, [r5]
    	f->table = __filterTanhTable_48000;
24014c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
24014c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c1a:	bfd8      	it	le
24014c1c:	4613      	movle	r3, r2
24014c1e:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
24014c20:	ecbd 8b06 	vpop	{d8-d10}
24014c24:	bd70      	pop	{r4, r5, r6, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c26:	2200      	movs	r2, #0
24014c28:	2100      	movs	r1, #0
    z.i  = 0x5f3759df - (z.i >> 1);
24014c2a:	f645 13df 	movw	r3, #23007	; 0x59df
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c2e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014c32:	ee09 2a10 	vmov	s18, r2
24014c36:	f243 72bd 	movw	r2, #14269	; 0x37bd
24014c3a:	f2c4 517a 	movt	r1, #17786	; 0x457a
    z.i  = 0x5f3759df - (z.i >> 1);
24014c3e:	f6c5 7337 	movt	r3, #24375	; 0x5f37
24014c42:	f2c3 5286 	movt	r2, #13702	; 0x3586
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c46:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
24014c4a:	ee01 1a10 	vmov	s2, r1
    z.i = 0x7EEEEEEE - z.i;
24014c4e:	f64e 61ee 	movw	r1, #61166	; 0xeeee
24014c52:	ee07 2a90 	vmov	s15, r2
    f->R2 =    1.0f/Q;
24014c56:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
24014c5a:	fe8a 1ac1 	vminnm.f32	s2, s21, s2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c5e:	eef0 3a65 	vmov.f32	s7, s11
24014c62:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
24014c66:	ee11 2a10 	vmov	r2, s2
24014c6a:	ee21 5a06 	vmul.f32	s10, s2, s12
    z.i = 0x7EEEEEEE - z.i;
24014c6e:	f6c7 61ee 	movt	r1, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c72:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
24014c76:	eec4 6a28 	vdiv.f32	s13, s8, s17
24014c7a:	ee07 2a90 	vmov	s15, r2
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
24014c82:	f2cc 42bb 	movt	r2, #50363	; 0xc4bb
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c86:	ee25 5a27 	vmul.f32	s10, s10, s15
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c8a:	ee09 2a90 	vmov	s19, r2
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014c8e:	eef0 4a44 	vmov.f32	s9, s8
24014c92:	eeb0 7a49 	vmov.f32	s14, s18
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014c96:	eee7 3ac5 	vfms.f32	s7, s15, s10
24014c9a:	eeb0 0a49 	vmov.f32	s0, s18
24014c9e:	ee67 7aa3 	vmul.f32	s15, s15, s7
24014ca2:	eeb0 5a66 	vmov.f32	s10, s13
    z.i = 0x7EEEEEEE - z.i;
24014ca6:	ee17 2a90 	vmov	r2, s15
24014caa:	1a8a      	subs	r2, r1, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014cac:	ee07 2a90 	vmov	s15, r2
24014cb0:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24014cb4:	ee27 6a86 	vmul.f32	s12, s15, s12
24014cb8:	ee07 3a90 	vmov	s15, r3
24014cbc:	ee27 6ac6 	vnmul.f32	s12, s15, s12
24014cc0:	eee6 5a27 	vfma.f32	s11, s12, s15
24014cc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    z.i = 0x7EEEEEEE - z.i;
24014cc8:	ee17 3a90 	vmov	r3, s15
24014ccc:	1ac9      	subs	r1, r1, r3
24014cce:	ee07 1a90 	vmov	s15, r1
24014cd2:	eec4 5a27 	vdiv.f32	s11, s8, s15
24014cd6:	e773      	b.n	24014bc0 <tVZFilterLS_initToPool+0x144>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24014cd8:	f640 73db 	movw	r3, #4059	; 0xfdb
24014cdc:	f2c4 0349 	movt	r3, #16457	; 0x4049
24014ce0:	ee00 3a10 	vmov	s0, r3
24014ce4:	ee2a 0a00 	vmul.f32	s0, s20, s0
24014ce8:	ee20 0a09 	vmul.f32	s0, s0, s18
24014cec:	f008 f95a 	bl	2401cfa4 <tanf>
24014cf0:	2100      	movs	r1, #0
24014cf2:	f243 72bd 	movw	r2, #14269	; 0x37bd
    z.i  = 0x5f3759df - (z.i >> 1);
24014cf6:	f645 13df 	movw	r3, #23007	; 0x59df
24014cfa:	f2c4 517a 	movt	r1, #17786	; 0x457a
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014cfe:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24014d02:	f2c3 5286 	movt	r2, #13702	; 0x3586
    z.i  = 0x5f3759df - (z.i >> 1);
24014d06:	f6c5 7337 	movt	r3, #24375	; 0x5f37
24014d0a:	ee01 1a10 	vmov	s2, r1
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014d0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24014d12:	ee07 2a90 	vmov	s15, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014d16:	eeb0 5a47 	vmov.f32	s10, s14
24014d1a:	fe8a 1ac1 	vminnm.f32	s2, s21, s2
    z.i = 0x7EEEEEEE - z.i;
24014d1e:	f64e 61ee 	movw	r1, #61166	; 0xeeee
24014d22:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014d26:	ee11 2a10 	vmov	r2, s2
24014d2a:	ee61 5a08 	vmul.f32	s11, s2, s16
    z.i = 0x7EEEEEEE - z.i;
24014d2e:	f6c7 61ee 	movt	r1, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014d32:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
    f->R2 =    1.0f/Q;
24014d36:	eec6 6a28 	vdiv.f32	s13, s12, s17
24014d3a:	ee07 2a90 	vmov	s15, r2
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
24014d42:	f2cc 42bb 	movt	r2, #50363	; 0xc4bb
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014d46:	ee65 5aa7 	vmul.f32	s11, s11, s15
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014d4a:	ee09 2a90 	vmov	s19, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014d4e:	eea7 5ae5 	vfms.f32	s10, s15, s11
24014d52:	e711      	b.n	24014b78 <tVZFilterLS_initToPool+0xfc>

24014d54 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24014d54:	3118      	adds	r1, #24
24014d56:	f7ff be91 	b.w	24014a7c <tVZFilterLS_initToPool>
24014d5a:	bf00      	nop

24014d5c <tVZFilterLS_setSampleRate>:
void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24014d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f->invSampleRate = 1.0f / sampleRate;
24014d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sampleRate > 80000)
24014d64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
24014d68:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / f->sampleRate;
24014d6c:	f2c4 713b 	movt	r1, #18235	; 0x473b
    f->invSampleRate = 1.0f / sampleRate;
24014d70:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sampleRate > 80000)
24014d74:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->sampRatio = 48000.0f / f->sampleRate;
24014d78:	ee07 1a10 	vmov	s14, r1
       	f->table = __filterTanhTable_48000;
24014d7c:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sampleRate > 80000)
24014d80:	ee07 2a90 	vmov	s15, r2
       	f->table = __filterTanhTable_48000;
24014d84:	f2c2 4302 	movt	r3, #9218	; 0x2402
24014d88:	f2c2 4101 	movt	r1, #9217	; 0x2401
        _tVZFilterLS* f = *vf;
24014d8c:	6802      	ldr	r2, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
24014d8e:	eec7 6a00 	vdiv.f32	s13, s14, s0
        f->sampleRate = sampleRate;
24014d92:	ed82 0a0b 	vstr	s0, [r2, #44]	; 0x2c
       	f->table = __filterTanhTable_48000;
24014d96:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014d9e:	bfd8      	it	le
24014da0:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f / sampleRate;
24014da2:	ed82 6a0c 	vstr	s12, [r2, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
24014da6:	6413      	str	r3, [r2, #64]	; 0x40
24014da8:	edc2 6a0f 	vstr	s13, [r2, #60]	; 0x3c
       }
}
24014dac:	4770      	bx	lr
24014dae:	bf00      	nop

24014db0 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
24014db0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24014db2:	edd3 7a02 	vldr	s15, [r3, #8]
24014db6:	ed93 7a01 	vldr	s14, [r3, #4]
24014dba:	ee30 0a67 	vsub.f32	s0, s0, s15
24014dbe:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24014dc2:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24014dc6:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24014dca:	eea5 0a47 	vfms.f32	s0, s10, s14
24014dce:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
24014dd2:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24014dd6:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
24014dda:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
24014dde:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24014de2:	eeb0 5a47 	vmov.f32	s10, s14
24014de6:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
24014dea:	eef0 5a67 	vmov.f32	s11, s15
24014dee:	eee4 7a87 	vfma.f32	s15, s9, s14
24014df2:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24014df6:	ed83 5a01 	vstr	s10, [r3, #4]
}
24014dfa:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24014dfe:	edc3 5a02 	vstr	s11, [r3, #8]
}
24014e02:	4770      	bx	lr

24014e04 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24014e04:	f648 128d 	movw	r2, #35213	; 0x898d
        _tVZFilterLS* f = *vf;
24014e08:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
24014e0a:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        cutoff *= 30.567164179104478f;
24014e12:	f2c4 12f4 	movt	r2, #16884	; 0x41f4
        f->cutoffMIDI = cutoff;
24014e16:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
        cutoff *= 30.567164179104478f;
24014e1c:	ee07 2a90 	vmov	s15, r2
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e20:	ed93 5a0f 	vldr	s10, [r3, #60]	; 0x3c

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
    f->R2Plusg = f->R2+f->g;
24014e24:	ed93 7a04 	vldr	s14, [r3, #16]
        cutoff *= 30.567164179104478f;
24014e28:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014e2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
24014e30:	eebd 6ac0 	vcvt.s32.f32	s12, s0
24014e34:	ee16 2a10 	vmov	r2, s12
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e38:	ee36 6ac0 	vsub.f32	s12, s13, s0
24014e3c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24014e40:	4562      	cmp	r2, ip
24014e42:	bfa8      	it	ge
24014e44:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014e46:	ee05 2a90 	vmov	s11, r2
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014e4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e52:	ed92 4a01 	vldr	s8, [r2, #4]
24014e56:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014e5a:	ee30 0a65 	vsub.f32	s0, s0, s11
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e5e:	ee36 6a25 	vadd.f32	s12, s12, s11
24014e62:	ee20 0a04 	vmul.f32	s0, s0, s8
24014e66:	eea4 0a86 	vfma.f32	s0, s9, s12
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014e6a:	eeb0 6a66 	vmov.f32	s12, s13
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e6e:	ee20 0a05 	vmul.f32	s0, s0, s10
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014e72:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24014e76:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24014e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014e7e:	edc3 7a03 	vstr	s15, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014e82:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24014e86:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014e8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
24014e8e:	edc3 7a05 	vstr	s15, [r3, #20]
}
24014e92:	4770      	bx	lr

24014e94 <tVZFilterLS_setGain>:
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
        _tVZFilterLS* f = *vf;
24014e94:	2100      	movs	r1, #0
24014e96:	f243 72bd 	movw	r2, #14269	; 0x37bd
    z.i  = 0x5f3759df - (z.i >> 1);
24014e9a:	f645 13df 	movw	r3, #23007	; 0x59df
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014e9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24014ea2:	f2c4 517a 	movt	r1, #17786	; 0x457a
24014ea6:	f2c3 5286 	movt	r2, #13702	; 0x3586
    z.i  = 0x5f3759df - (z.i >> 1);
24014eaa:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014eae:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
24014eb2:	ee06 1a90 	vmov	s13, r1
24014eb6:	ee07 2a90 	vmov	s15, r2
    z.i = 0x7EEEEEEE - z.i;
24014eba:	f64e 6cee 	movw	ip, #61166	; 0xeeee
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014ebe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24014ec2:	fe80 0a66 	vminnm.f32	s0, s0, s13
24014ec6:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014eca:	ee10 2a10 	vmov	r2, s0
24014ece:	ee60 6a07 	vmul.f32	s13, s0, s14
24014ed2:	eef0 4a65 	vmov.f32	s9, s11
    z.i = 0x7EEEEEEE - z.i;
24014ed6:	f6c7 6cee 	movt	ip, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014eda:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
        _tVZFilterLS* f = *vf;
24014ede:	6801      	ldr	r1, [r0, #0]
24014ee0:	ee07 2a90 	vmov	s15, r2
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
    f->R2Plusg = f->R2+f->g;
24014ee4:	ed91 6a04 	vldr	s12, [r1, #16]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24014ee8:	ed81 0a07 	vstr	s0, [r1, #28]
24014eec:	ee66 6aa7 	vmul.f32	s13, s13, s15
24014ef0:	eee7 4ae6 	vfms.f32	s9, s15, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014ef4:	edd1 6a0d 	vldr	s13, [r1, #52]	; 0x34
24014ef8:	ee67 7aa4 	vmul.f32	s15, s15, s9
    z.i = 0x7EEEEEEE - z.i;
24014efc:	ee17 2a90 	vmov	r2, s15
24014f00:	ebac 0202 	sub.w	r2, ip, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24014f04:	ee07 2a90 	vmov	s15, r2
24014f08:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24014f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
24014f10:	ee07 3a90 	vmov	s15, r3
24014f14:	ee27 7a27 	vmul.f32	s14, s14, s15
24014f18:	eee7 5ac7 	vfms.f32	s11, s15, s14
24014f1c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    z.i = 0x7EEEEEEE - z.i;
24014f20:	ee17 3a90 	vmov	r3, s15
24014f24:	ebac 0c03 	sub.w	ip, ip, r3
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014f28:	ee07 ca90 	vmov	s15, ip
24014f2c:	ee85 7a27 	vdiv.f32	s14, s10, s15
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014f30:	ee67 7a26 	vmul.f32	s15, s14, s13
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24014f34:	ed81 7a0e 	vstr	s14, [r1, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014f38:	eef0 6a45 	vmov.f32	s13, s10
    f->R2Plusg = f->R2+f->g;
24014f3c:	ee37 7a86 	vadd.f32	s14, s15, s12
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24014f40:	edc1 7a03 	vstr	s15, [r1, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014f44:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
24014f48:	ed81 7a0a 	vstr	s14, [r1, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014f4c:	eec5 7a26 	vdiv.f32	s15, s10, s13
24014f50:	edc1 7a05 	vstr	s15, [r1, #20]
}
24014f54:	4770      	bx	lr
24014f56:	bf00      	nop

24014f58 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
24014f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
24014f5c:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24014f5e:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
24014f62:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
24014f66:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
24014f6a:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24014f6e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014f72:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
24014f76:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24014f7a:	eea6 6a87 	vfma.f32	s12, s13, s14
24014f7e:	ee87 7a86 	vdiv.f32	s14, s15, s12
24014f82:	ed83 7a05 	vstr	s14, [r3, #20]
}
24014f86:	4770      	bx	lr

24014f88 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24014f88:	b570      	push	{r4, r5, r6, lr}
24014f8a:	ed2d 8b08 	vpush	{d8-d11}
24014f8e:	eeb0 9a40 	vmov.f32	s18, s0
    _tMempool* m = *mp;
24014f92:	680d      	ldr	r5, [r1, #0]
{
24014f94:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24014f96:	2048      	movs	r0, #72	; 0x48
24014f98:	4629      	mov	r1, r5
{
24014f9a:	eef0 8a60 	vmov.f32	s17, s1
24014f9e:	eeb0 ba41 	vmov.f32	s22, s2
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24014fa2:	f001 ffdd 	bl	24016f60 <mpool_alloc>
    if (val < min)
24014fa6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24014faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24014fae:	6030      	str	r0, [r6, #0]
24014fb0:	4604      	mov	r4, r0
    f->mempool = m;
24014fb2:	6005      	str	r5, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
24014fb4:	f2c4 733b 	movt	r3, #18235	; 0x473b
    LEAF* leaf = f->mempool->leaf;
24014fb8:	686d      	ldr	r5, [r5, #4]
24014fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->sampRatio = 48000.0f / f->sampleRate;
24014fbe:	ee07 3a90 	vmov	s15, r3
    f->sampleRate = leaf->sampleRate;
24014fc2:	ed95 7a00 	vldr	s14, [r5]
24014fc6:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24014fca:	eec7 9a87 	vdiv.f32	s19, s15, s14
    f->invSampleRate = leaf->invSampleRate;
24014fce:	ed95 aa01 	vldr	s20, [r5, #4]
24014fd2:	f100 80ab 	bmi.w	2401512c <tVZFilterHS_initToPool+0x1a4>
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24014fd6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24014fda:	ee27 7a08 	vmul.f32	s14, s14, s16
24014fde:	fe87 9a49 	vminnm.f32	s18, s14, s18
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014fe2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
24014fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014fea:	f340 80f2 	ble.w	240151d2 <tVZFilterHS_initToPool+0x24a>
24014fee:	f647 63d2 	movw	r3, #32466	; 0x7ed2
24014ff2:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
24014ff6:	ee00 3a10 	vmov	s0, r3
24014ffa:	ee29 0a00 	vmul.f32	s0, s18, s0
24014ffe:	f007 fbeb 	bl	2401c7d8 <logf>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24015002:	f640 73db 	movw	r3, #4059	; 0xfdb
24015006:	f647 72ac 	movw	r2, #32684	; 0x7fac
2401500a:	f2c4 0349 	movt	r3, #16457	; 0x4049
2401500e:	f2c4 128a 	movt	r2, #16778	; 0x418a
24015012:	ee07 3a90 	vmov	s15, r3
24015016:	ee07 2a10 	vmov	s14, r2
2401501a:	ee6a 7a27 	vmul.f32	s15, s20, s15
2401501e:	ee60 aa07 	vmul.f32	s21, s0, s14
24015022:	ee27 0a89 	vmul.f32	s0, s15, s18
24015026:	f007 ffbd 	bl	2401cfa4 <tanf>
2401502a:	2100      	movs	r1, #0
2401502c:	f243 73bd 	movw	r3, #14269	; 0x37bd
    f->R2 =    1.0f/Q;
24015030:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24015034:	f2c4 517a 	movt	r1, #17786	; 0x457a
    z.i  = 0x5f3759df - (z.i >> 1);
24015038:	f645 12df 	movw	r2, #23007	; 0x59df
2401503c:	f2c3 5386 	movt	r3, #13702	; 0x3586
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015040:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24015044:	ee06 1a90 	vmov	s13, r1
24015048:	ee85 6a28 	vdiv.f32	s12, s10, s17
2401504c:	ee07 3a90 	vmov	s15, r3
    z.i  = 0x5f3759df - (z.i >> 1);
24015050:	f6c5 7237 	movt	r2, #24375	; 0x5f37
24015054:	fe8b 1a66 	vminnm.f32	s2, s22, s13
    z.i = 0x7EEEEEEE - z.i;
24015058:	f64e 63ee 	movw	r3, #61166	; 0xeeee
2401505c:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015060:	ee11 1a10 	vmov	r1, s2
    z.i = 0x7EEEEEEE - z.i;
24015064:	f6c7 63ee 	movt	r3, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015068:	eba2 0151 	sub.w	r1, r2, r1, lsr #1
2401506c:	ee61 6a08 	vmul.f32	s13, s2, s16
24015070:	eef0 5a47 	vmov.f32	s11, s14
24015074:	ee07 1a90 	vmov	s15, r1
24015078:	ee66 6aa7 	vmul.f32	s13, s13, s15
2401507c:	eee7 5ae6 	vfms.f32	s11, s15, s13
24015080:	ee67 7aa5 	vmul.f32	s15, s15, s11
    z.i = 0x7EEEEEEE - z.i;
24015084:	ee17 1a90 	vmov	r1, s15
24015088:	1a59      	subs	r1, r3, r1
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401508a:	ee07 1a90 	vmov	s15, r1
2401508e:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
24015092:	ee27 8a88 	vmul.f32	s16, s15, s16
24015096:	ee07 2a90 	vmov	s15, r2
2401509a:	ee28 8a27 	vmul.f32	s16, s16, s15
2401509e:	eea7 7ac8 	vfms.f32	s14, s15, s16
240150a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    return z.f;
240150a6:	ee17 2a90 	vmov	r2, s15
240150aa:	1a9b      	subs	r3, r3, r2
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240150ac:	ee07 3a90 	vmov	s15, r3
240150b0:	ee20 7a27 	vmul.f32	s14, s0, s15
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240150b4:	eef0 7a45 	vmov.f32	s15, s10
    f->R2Plusg = f->R2+f->g;
240150b8:	ee77 5a06 	vadd.f32	s11, s14, s12
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240150bc:	eee7 7a25 	vfma.f32	s15, s14, s11
240150c0:	eec5 6a27 	vdiv.f32	s13, s10, s15
    if (leaf->sampleRate > 80000)
240150c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f->s1    = 0.0f;
240150c8:	2100      	movs	r1, #0
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
240150ca:	63a3      	str	r3, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240150cc:	f643 1394 	movw	r3, #14740	; 0x3994
    if (leaf->sampleRate > 80000)
240150d0:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->invSampleRate = leaf->invSampleRate;
240150d4:	ed84 aa0c 	vstr	s20, [r4, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
240150d8:	edc4 9a0f 	vstr	s19, [r4, #60]	; 0x3c
    	f->table = __filterTanhTable_48000;
240150dc:	f2c2 4302 	movt	r3, #9218	; 0x2402
    if (leaf->sampleRate > 80000)
240150e0:	ee07 2a90 	vmov	s15, r2
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240150e4:	ed84 9a06 	vstr	s18, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
240150e8:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
240150ec:	f64f 1294 	movw	r2, #63892	; 0xf994
    f->Q    = Q;
240150f0:	edc4 8a08 	vstr	s17, [r4, #32]
    f->R2 =    1.0f/Q;
240150f4:	ed84 6a04 	vstr	s12, [r4, #16]
    	f->table = __filterTanhTable_48000;
240150f8:	f2c2 4201 	movt	r2, #9217	; 0x2401
    f->s1    = 0.0f;
240150fc:	6061      	str	r1, [r4, #4]
    f->s2   = 0.0f;
240150fe:	60a1      	str	r1, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24015100:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24015104:	ed84 1a07 	vstr	s2, [r4, #28]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24015108:	ed84 7a03 	vstr	s14, [r4, #12]
    f->R2Plusg = f->R2+f->g;
2401510c:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015110:	edc4 6a05 	vstr	s13, [r4, #20]
    if (leaf->sampleRate > 80000)
24015114:	ed95 7a00 	vldr	s14, [r5]
    	f->table = __filterTanhTable_48000;
24015118:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015120:	bfd8      	it	le
24015122:	4613      	movle	r3, r2
24015124:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
24015126:	ecbd 8b08 	vpop	{d8-d11}
2401512a:	bd70      	pop	{r4, r5, r6, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
2401512c:	2100      	movs	r1, #0
2401512e:	f243 73bd 	movw	r3, #14269	; 0x37bd
24015132:	2200      	movs	r2, #0
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015134:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24015138:	f2c4 517a 	movt	r1, #17786	; 0x457a
2401513c:	f2c3 5386 	movt	r3, #13702	; 0x3586
    return z.f;
24015140:	ee09 2a10 	vmov	s18, r2
    z.i  = 0x5f3759df - (z.i >> 1);
24015144:	f645 12df 	movw	r2, #23007	; 0x59df
24015148:	ee07 3a90 	vmov	s15, r3
2401514c:	ee01 1a10 	vmov	s2, r1
24015150:	f6c5 7237 	movt	r2, #24375	; 0x5f37
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015154:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
24015158:	fe8b 1a41 	vminnm.f32	s2, s22, s2
2401515c:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
24015160:	ee11 1a10 	vmov	r1, s2
24015164:	ee21 5a25 	vmul.f32	s10, s2, s11
24015168:	eeb0 4a64 	vmov.f32	s8, s9
    z.i = 0x7EEEEEEE - z.i;
2401516c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015170:	eba2 0151 	sub.w	r1, r2, r1, lsr #1
    f->R2 =    1.0f/Q;
24015174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    z.i = 0x7EEEEEEE - z.i;
24015178:	f6c7 63ee 	movt	r3, #32494	; 0x7eee
    return z.f;
2401517c:	eeb0 7a49 	vmov.f32	s14, s18
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015180:	ee07 1a90 	vmov	s15, r1
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24015188:	ee86 6aa8 	vdiv.f32	s12, s13, s17
2401518c:	f2cc 41bb 	movt	r1, #50363	; 0xc4bb
24015190:	ee0a 1a90 	vmov	s21, r1
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015194:	ee25 5a27 	vmul.f32	s10, s10, s15
    return z.f;
24015198:	eeb0 0a49 	vmov.f32	s0, s18
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401519c:	eea7 4ac5 	vfms.f32	s8, s15, s10
240151a0:	ee67 7a84 	vmul.f32	s15, s15, s8
    z.i = 0x7EEEEEEE - z.i;
240151a4:	ee17 1a90 	vmov	r1, s15
240151a8:	1a59      	subs	r1, r3, r1
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240151aa:	ee07 1a90 	vmov	s15, r1
240151ae:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
240151b2:	ee27 5aa5 	vmul.f32	s10, s15, s11
240151b6:	ee07 2a90 	vmov	s15, r2
    return z.f;
240151ba:	eef0 5a46 	vmov.f32	s11, s12
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240151be:	ee27 5ac5 	vnmul.f32	s10, s15, s10
240151c2:	eee5 4a27 	vfma.f32	s9, s10, s15
240151c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
    return z.f;
240151ca:	ee17 2a90 	vmov	r2, s15
240151ce:	1a9b      	subs	r3, r3, r2
240151d0:	e778      	b.n	240150c4 <tVZFilterHS_initToPool+0x13c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240151d2:	f640 73db 	movw	r3, #4059	; 0xfdb
240151d6:	f2c4 0349 	movt	r3, #16457	; 0x4049
240151da:	ee00 3a10 	vmov	s0, r3
240151de:	ee2a 0a00 	vmul.f32	s0, s20, s0
240151e2:	ee20 0a09 	vmul.f32	s0, s0, s18
240151e6:	f007 fedd 	bl	2401cfa4 <tanf>
240151ea:	2100      	movs	r1, #0
240151ec:	f243 73bd 	movw	r3, #14269	; 0x37bd
    z.i  = 0x5f3759df - (z.i >> 1);
240151f0:	f645 12df 	movw	r2, #23007	; 0x59df
240151f4:	f2c4 517a 	movt	r1, #17786	; 0x457a
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240151f8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
240151fc:	f2c3 5386 	movt	r3, #13702	; 0x3586
    z.i  = 0x5f3759df - (z.i >> 1);
24015200:	f6c5 7237 	movt	r2, #24375	; 0x5f37
24015204:	ee01 1a10 	vmov	s2, r1
    f->R2 =    1.0f/Q;
24015208:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2401520c:	ee07 3a90 	vmov	s15, r3
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015210:	eef0 5a47 	vmov.f32	s11, s14
24015214:	fe8b 1a41 	vminnm.f32	s2, s22, s2
    z.i = 0x7EEEEEEE - z.i;
24015218:	f64e 63ee 	movw	r3, #61166	; 0xeeee
2401521c:	fe81 1a27 	vmaxnm.f32	s2, s2, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015220:	ee11 1a10 	vmov	r1, s2
24015224:	ee61 6a08 	vmul.f32	s13, s2, s16
    z.i = 0x7EEEEEEE - z.i;
24015228:	f6c7 63ee 	movt	r3, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401522c:	eba2 0151 	sub.w	r1, r2, r1, lsr #1
24015230:	ee85 6a28 	vdiv.f32	s12, s10, s17
24015234:	ee07 1a90 	vmov	s15, r1
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2401523c:	f2cc 41bb 	movt	r1, #50363	; 0xc4bb
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015240:	ee66 6aa7 	vmul.f32	s13, s13, s15
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015244:	ee0a 1a90 	vmov	s21, r1
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015248:	eee7 5ae6 	vfms.f32	s11, s15, s13
2401524c:	e718      	b.n	24015080 <tVZFilterHS_initToPool+0xf8>
2401524e:	bf00      	nop

24015250 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24015250:	3118      	adds	r1, #24
24015252:	f7ff be99 	b.w	24014f88 <tVZFilterHS_initToPool>
24015256:	bf00      	nop

24015258 <tVZFilterHS_setSampleRate>:
void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24015258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f->invSampleRate = 1.0f / sampleRate;
2401525c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sampleRate > 80000)
24015260:	f44f 4280 	mov.w	r2, #16384	; 0x4000
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24015264:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / f->sampleRate;
24015268:	f2c4 713b 	movt	r1, #18235	; 0x473b
    f->invSampleRate = 1.0f / sampleRate;
2401526c:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sampleRate > 80000)
24015270:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->sampRatio = 48000.0f / f->sampleRate;
24015274:	ee07 1a10 	vmov	s14, r1
          	f->table = __filterTanhTable_48000;
24015278:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sampleRate > 80000)
2401527c:	ee07 2a90 	vmov	s15, r2
          	f->table = __filterTanhTable_48000;
24015280:	f2c2 4302 	movt	r3, #9218	; 0x2402
24015284:	f2c2 4101 	movt	r1, #9217	; 0x2401
        _tVZFilterHS* f = *vf;
24015288:	6802      	ldr	r2, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
2401528a:	eec7 6a00 	vdiv.f32	s13, s14, s0
        f->sampleRate = sampleRate;
2401528e:	ed82 0a0b 	vstr	s0, [r2, #44]	; 0x2c
          	f->table = __filterTanhTable_48000;
24015292:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401529a:	bfd8      	it	le
2401529c:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f / sampleRate;
2401529e:	ed82 6a0c 	vstr	s12, [r2, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
240152a2:	6413      	str	r3, [r2, #64]	; 0x40
240152a4:	edc2 6a0f 	vstr	s13, [r2, #60]	; 0x3c
          }
}
240152a8:	4770      	bx	lr
240152aa:	bf00      	nop

240152ac <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
240152ac:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240152ae:	edd3 6a02 	vldr	s13, [r3, #8]
240152b2:	ed93 7a01 	vldr	s14, [r3, #4]
240152b6:	ee70 7a66 	vsub.f32	s15, s0, s13
240152ba:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
240152be:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240152c2:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240152c6:	eee4 7a47 	vfms.f32	s15, s8, s14
240152ca:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
240152ce:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240152d2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240152d6:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
240152da:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240152de:	eeb0 5a47 	vmov.f32	s10, s14
240152e2:	eea6 5a27 	vfma.f32	s10, s12, s15
240152e6:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
240152ea:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240152ee:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240152f2:	ed83 5a01 	vstr	s10, [r3, #4]
}
240152f6:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240152fa:	edc3 6a02 	vstr	s13, [r3, #8]
}
240152fe:	4770      	bx	lr

24015300 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24015300:	f648 128d 	movw	r2, #35213	; 0x898d
        _tVZFilterHS* f = *vf;
24015304:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
24015306:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        cutoff *= 30.567164179104478f;
2401530e:	f2c4 12f4 	movt	r2, #16884	; 0x41f4
        f->cutoffMIDI = cutoff;
24015312:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015316:	6c19      	ldr	r1, [r3, #64]	; 0x40
        cutoff *= 30.567164179104478f;
24015318:	ee07 2a90 	vmov	s15, r2
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401531c:	ed93 5a0f 	vldr	s10, [r3, #60]	; 0x3c

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
    
    f->R2Plusg = f->R2+f->g;
24015320:	ed93 7a04 	vldr	s14, [r3, #16]
        cutoff *= 30.567164179104478f;
24015324:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24015328:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
2401532c:	eebd 6ac0 	vcvt.s32.f32	s12, s0
24015330:	ee16 2a10 	vmov	r2, s12
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015334:	ee36 6ac0 	vsub.f32	s12, s13, s0
24015338:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2401533c:	4562      	cmp	r2, ip
2401533e:	bfa8      	it	ge
24015340:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015342:	ee05 2a90 	vmov	s11, r2
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015346:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401534a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401534e:	ed92 4a01 	vldr	s8, [r2, #4]
24015352:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015356:	ee30 0a65 	vsub.f32	s0, s0, s11
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401535a:	ee36 6a25 	vadd.f32	s12, s12, s11
2401535e:	ee20 0a04 	vmul.f32	s0, s0, s8
24015362:	eea4 0a86 	vfma.f32	s0, s9, s12
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015366:	eeb0 6a66 	vmov.f32	s12, s13
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401536a:	ee20 0a05 	vmul.f32	s0, s0, s10
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401536e:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015372:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24015376:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401537a:	edc3 7a03 	vstr	s15, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401537e:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24015382:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015386:	eec6 7a86 	vdiv.f32	s15, s13, s12
2401538a:	edc3 7a05 	vstr	s15, [r3, #20]
}
2401538e:	4770      	bx	lr

24015390 <tVZFilterHS_setGain>:
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
        _tVZFilterHS* f = *vf;
24015390:	2100      	movs	r1, #0
24015392:	f243 72bd 	movw	r2, #14269	; 0x37bd
    z.i  = 0x5f3759df - (z.i >> 1);
24015396:	f645 13df 	movw	r3, #23007	; 0x59df
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401539a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
2401539e:	f2c4 517a 	movt	r1, #17786	; 0x457a
240153a2:	f2c3 5286 	movt	r2, #13702	; 0x3586
    z.i  = 0x5f3759df - (z.i >> 1);
240153a6:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240153aa:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
240153ae:	ee06 1a90 	vmov	s13, r1
240153b2:	ee07 2a90 	vmov	s15, r2
    z.i = 0x7EEEEEEE - z.i;
240153b6:	f64e 6cee 	movw	ip, #61166	; 0xeeee
240153ba:	6801      	ldr	r1, [r0, #0]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240153bc:	fe80 0a66 	vminnm.f32	s0, s0, s13
240153c0:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240153c4:	ee10 2a10 	vmov	r2, s0
240153c8:	ee60 6a07 	vmul.f32	s13, s0, s14
240153cc:	eef0 4a65 	vmov.f32	s9, s11
    z.i = 0x7EEEEEEE - z.i;
240153d0:	f6c7 6cee 	movt	ip, #32494	; 0x7eee
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240153d4:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240153d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240153dc:	ed91 6a04 	vldr	s12, [r1, #16]
240153e0:	ee07 2a90 	vmov	s15, r2
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240153e4:	ed81 0a07 	vstr	s0, [r1, #28]
240153e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
240153ec:	eee7 4ae6 	vfms.f32	s9, s15, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240153f0:	edd1 6a0d 	vldr	s13, [r1, #52]	; 0x34
240153f4:	ee67 7aa4 	vmul.f32	s15, s15, s9
    z.i = 0x7EEEEEEE - z.i;
240153f8:	ee17 2a90 	vmov	r2, s15
240153fc:	ebac 0202 	sub.w	r2, ip, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015400:	ee07 2a90 	vmov	s15, r2
24015404:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24015408:	ee27 7a87 	vmul.f32	s14, s15, s14
2401540c:	ee07 3a90 	vmov	s15, r3
24015410:	ee27 7a27 	vmul.f32	s14, s14, s15
24015414:	eee7 5ac7 	vfms.f32	s11, s15, s14
24015418:	ee67 7aa5 	vmul.f32	s15, s15, s11
    return z.f;
2401541c:	ee17 3a90 	vmov	r3, s15
24015420:	ebac 0c03 	sub.w	ip, ip, r3
24015424:	ee07 ca90 	vmov	s15, ip
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
24015428:	f8c1 c038 	str.w	ip, [r1, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401542c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015430:	eef0 6a45 	vmov.f32	s13, s10
    f->R2Plusg = f->R2+f->g;
24015434:	ee37 7a86 	vadd.f32	s14, s15, s12
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24015438:	edc1 7a03 	vstr	s15, [r1, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401543c:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
24015440:	ed81 7a0a 	vstr	s14, [r1, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015444:	eec5 7a26 	vdiv.f32	s15, s10, s13
24015448:	edc1 7a05 	vstr	s15, [r1, #20]
}
2401544c:	4770      	bx	lr
2401544e:	bf00      	nop

24015450 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
24015450:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
24015454:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24015456:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
2401545a:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
2401545e:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
24015462:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24015466:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401546a:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
2401546e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015472:	eea6 6a87 	vfma.f32	s12, s13, s14
24015476:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401547a:	ed83 7a05 	vstr	s14, [r3, #20]
}
2401547e:	4770      	bx	lr

24015480 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
24015480:	b570      	push	{r4, r5, r6, lr}
24015482:	ed2d 8b08 	vpush	{d8-d11}
24015486:	eeb0 9a40 	vmov.f32	s18, s0
    _tMempool* m = *mp;
2401548a:	680d      	ldr	r5, [r1, #0]
{
2401548c:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
2401548e:	2040      	movs	r0, #64	; 0x40
24015490:	4629      	mov	r1, r5
{
24015492:	eef0 9a60 	vmov.f32	s19, s1
24015496:	eef0 8a41 	vmov.f32	s17, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
2401549a:	f001 fd61 	bl	24016f60 <mpool_alloc>
    if (val < min)
2401549e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
240154a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240154a6:	6030      	str	r0, [r6, #0]
240154a8:	4604      	mov	r4, r0
    f->mempool = m;
240154aa:	6005      	str	r5, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
240154ac:	f2c4 733b 	movt	r3, #18235	; 0x473b
    LEAF* leaf = f->mempool->leaf;
240154b0:	686d      	ldr	r5, [r5, #4]
240154b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->sampRatio = 48000.0f / f->sampleRate;
240154b6:	ee07 3a90 	vmov	s15, r3
    f->sampleRate = leaf->sampleRate;
240154ba:	ed95 7a00 	vldr	s14, [r5]
240154be:	ed80 7a0a 	vstr	s14, [r0, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
240154c2:	ee87 ba87 	vdiv.f32	s22, s15, s14
    f->invSampleRate = leaf->invSampleRate;
240154c6:	edd5 aa01 	vldr	s21, [r5, #4]
240154ca:	f100 80e1 	bmi.w	24015690 <tVZFilterBell_initToPool+0x210>
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240154ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240154d2:	ee27 7a27 	vmul.f32	s14, s14, s15
240154d6:	fe87 aa49 	vminnm.f32	s20, s14, s18
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240154da:	eeb5 aac0 	vcmpe.f32	s20, #0.0
240154de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154e2:	f340 80e1 	ble.w	240156a8 <tVZFilterBell_initToPool+0x228>
240154e6:	f647 63d2 	movw	r3, #32466	; 0x7ed2
240154ea:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
240154ee:	ee00 3a10 	vmov	s0, r3
240154f2:	ee2a 0a00 	vmul.f32	s0, s20, s0
240154f6:	f007 f96f 	bl	2401c7d8 <logf>
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240154fa:	f646 410b 	movw	r1, #27659	; 0x6c0b
240154fe:	f24e 2350 	movw	r3, #57936	; 0xe250
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015502:	f647 72ac 	movw	r2, #32684	; 0x7fac
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24015506:	f6cc 2187 	movt	r1, #51847	; 0xca87
    fResult += 1.0f;
2401550a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401550e:	f6c4 637d 	movt	r3, #20093	; 0x4e7d
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015512:	f2c4 128a 	movt	r2, #16778	; 0x418a
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24015516:	ee06 1a10 	vmov	s12, r1
2401551a:	ee07 3a90 	vmov	s15, r3
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->g = tanf(PI * freq * f->invSampleRate);
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401551e:	f640 73db 	movw	r3, #4059	; 0xfdb
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015522:	ee07 2a10 	vmov	s14, r2
    fResult += 3.1755e-01f;
24015526:	f642 52e0 	movw	r2, #11744	; 0x2de0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401552a:	eee9 7a86 	vfma.f32	s15, s19, s12
2401552e:	f2c4 0349 	movt	r3, #16457	; 0x4049
    fResult += 3.1755e-01f;
24015532:	f6c3 6250 	movt	r2, #15952	; 0x3e50
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015536:	ee60 6a07 	vmul.f32	s13, s0, s14
2401553a:	ee05 3a90 	vmov	s11, r3
    fResult += 3.1755e-01f;
2401553e:	f249 53ea 	movw	r3, #38378	; 0x95ea
24015542:	ee06 2a10 	vmov	s12, r2
24015546:	f6c3 63a2 	movt	r3, #16034	; 0x3ea2
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401554a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    fResult += 3.1755e-01f;
2401554e:	ee07 3a10 	vmov	s14, r3
24015552:	ee67 7aa5 	vmul.f32	s15, s15, s11
24015556:	ee67 7aaa 	vmul.f32	s15, s15, s21
2401555a:	ee67 7a8a 	vmul.f32	s15, s15, s20
    Lfloat fASqr = fAngle*fAngle;
2401555e:	ee67 5aa7 	vmul.f32	s11, s15, s15
    fResult += 3.1755e-01f;
24015562:	eea5 7a86 	vfma.f32	s14, s11, s12
    fResult += 1.0f;
24015566:	eea5 5a87 	vfma.f32	s10, s11, s14
    fResult *= fAngle;
2401556a:	ee27 8a85 	vmul.f32	s16, s15, s10
    f->g = tanf(PI * freq * f->invSampleRate);
2401556e:	f640 70db 	movw	r0, #4059	; 0xfdb
24015572:	2100      	movs	r1, #0
24015574:	f243 72bd 	movw	r2, #14269	; 0x37bd
    f->invSampleRate = leaf->invSampleRate;
24015578:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    f->g = tanf(PI * freq * f->invSampleRate);
2401557c:	f2c4 0049 	movt	r0, #16457	; 0x4049
    f->s1    = 0.0f;
24015580:	460b      	mov	r3, r1
24015582:	f2c3 5286 	movt	r2, #13702	; 0x3586
24015586:	f2c4 517a 	movt	r1, #17786	; 0x457a
    f->g = tanf(PI * freq * f->invSampleRate);
2401558a:	ee07 0a90 	vmov	s15, r0
    f->sampRatio = 48000.0f / f->sampleRate;
2401558e:	ed84 ba0d 	vstr	s22, [r4, #52]	; 0x34
24015592:	ee07 1a10 	vmov	s14, r1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24015596:	ed84 aa06 	vstr	s20, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
2401559a:	ee29 9a27 	vmul.f32	s18, s18, s15
2401559e:	ee07 2a90 	vmov	s15, r2
240155a2:	fec8 8ac7 	vminnm.f32	s17, s17, s14
    f->cutoffMIDI = ftom(f->fc);
240155a6:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    f->B = BW;
240155aa:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
240155ae:	edc4 9a08 	vstr	s19, [r4, #32]
    f->g = tanf(PI * freq * f->invSampleRate);
240155b2:	ee29 0a2a 	vmul.f32	s0, s18, s21
    f->s1    = 0.0f;
240155b6:	6063      	str	r3, [r4, #4]
    f->s2   = 0.0f;
240155b8:	60a3      	str	r3, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240155ba:	edc4 8a07 	vstr	s17, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
240155be:	f007 fcf1 	bl	2401cfa4 <tanf>
    Lfloat r  = f->g/wl;
240155c2:	eec0 7a08 	vdiv.f32	s15, s0, s16
    z.i  = 0x5f3759df - (z.i >> 1);
240155c6:	f645 13df 	movw	r3, #23007	; 0x59df
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 80000)
240155ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f->g = tanf(PI * freq * f->invSampleRate);
240155ce:	ed84 0a03 	vstr	s0, [r4, #12]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240155d2:	f643 1294 	movw	r2, #14740	; 0x3994
240155d6:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    if (leaf->sampleRate > 80000)
240155da:	f2c4 719c 	movt	r1, #18332	; 0x479c
    	f->table = __filterTanhTable_48000;
240155de:	f2c2 4202 	movt	r2, #9218	; 0x2402
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240155e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    if (leaf->sampleRate > 80000)
240155e6:	ee06 1a10 	vmov	s12, r1
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240155ea:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    	f->table = __filterTanhTable_48000;
240155ee:	f64f 1194 	movw	r1, #63892	; 0xf994
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240155f2:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
240155f6:	eef0 3a65 	vmov.f32	s7, s11
    	f->table = __filterTanhTable_48000;
240155fa:	f2c2 4101 	movt	r1, #9217	; 0x2401
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240155fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24015602:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24015606:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401560a:	eee7 3aa7 	vfma.f32	s7, s15, s15
    f->rToUse = r;
2401560e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015612:	eec3 6aa7 	vdiv.f32	s13, s7, s15
24015616:	ee76 7ac4 	vsub.f32	s15, s13, s8
2401561a:	ee67 7aa4 	vmul.f32	s15, s15, s9
2401561e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
24015622:	ee16 0a90 	vmov	r0, s13
24015626:	ee26 7a87 	vmul.f32	s14, s13, s14
2401562a:	eef0 6a45 	vmov.f32	s13, s10
2401562e:	eba3 0350 	sub.w	r3, r3, r0, lsr #1
24015632:	ee07 3a90 	vmov	s15, r3
24015636:	ee27 7ac7 	vnmul.f32	s14, s15, s14
2401563a:	eee7 6a27 	vfma.f32	s13, s14, s15
2401563e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015642:	eef0 6a65 	vmov.f32	s13, s11
24015646:	ee17 3a90 	vmov	r3, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401564a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
2401564e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24015652:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24015656:	336e      	adds	r3, #110	; 0x6e
24015658:	ee07 3a90 	vmov	s15, r3
2401565c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    f->R2Plusg = f->R2+f->g;
24015660:	ee30 7a27 	vadd.f32	s14, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015664:	edc4 7a04 	vstr	s15, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015668:	eee0 6a07 	vfma.f32	s13, s0, s14
    f->R2Plusg = f->R2+f->g;
2401566c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015670:	eec5 7aa6 	vdiv.f32	s15, s11, s13
24015674:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 80000)
24015678:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
2401567c:	eef4 7ac6 	vcmpe.f32	s15, s12
24015680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015684:	bfd8      	it	le
24015686:	460a      	movle	r2, r1
24015688:	63a2      	str	r2, [r4, #56]	; 0x38
    }
}
2401568a:	ecbd 8b08 	vpop	{d8-d11}
2401568e:	bd70      	pop	{r4, r5, r6, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24015694:	2200      	movs	r2, #0
24015696:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
2401569a:	ee0a 2a10 	vmov	s20, r2
2401569e:	ee08 2a10 	vmov	s16, r2
240156a2:	ee06 3a90 	vmov	s13, r3
240156a6:	e762      	b.n	2401556e <tVZFilterBell_initToPool+0xee>
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240156a8:	f646 410b 	movw	r1, #27659	; 0x6c0b
240156ac:	f24e 2350 	movw	r3, #57936	; 0xe250
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240156b0:	f640 72db 	movw	r2, #4059	; 0xfdb
    fResult += 1.0f;
240156b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240156b8:	f6cc 2187 	movt	r1, #51847	; 0xca87
240156bc:	f6c4 637d 	movt	r3, #20093	; 0x4e7d
240156c0:	f2c4 0249 	movt	r2, #16457	; 0x4049
240156c4:	ee07 1a10 	vmov	s14, r1
240156c8:	ee07 3a90 	vmov	s15, r3
240156cc:	ee05 2a90 	vmov	s11, r2
    fResult += 3.1755e-01f;
240156d0:	f249 53ea 	movw	r3, #38378	; 0x95ea
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240156d4:	eee9 7a87 	vfma.f32	s15, s19, s14
    fResult += 3.1755e-01f;
240156d8:	f642 52e0 	movw	r2, #11744	; 0x2de0
240156dc:	f6c3 63a2 	movt	r3, #16034	; 0x3ea2
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240156e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fResult += 3.1755e-01f;
240156e4:	f6c3 6250 	movt	r2, #15952	; 0x3e50
240156e8:	ee07 3a10 	vmov	s14, r3
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240156ec:	f2cc 41bb 	movt	r1, #50363	; 0xc4bb
    fResult += 3.1755e-01f;
240156f0:	ee06 2a10 	vmov	s12, r2
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240156f4:	ee06 1a90 	vmov	s13, r1
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240156f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240156fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
24015700:	ee67 7aaa 	vmul.f32	s15, s15, s21
24015704:	ee67 7a8a 	vmul.f32	s15, s15, s20
    Lfloat fASqr = fAngle*fAngle;
24015708:	ee67 5aa7 	vmul.f32	s11, s15, s15
    fResult += 3.1755e-01f;
2401570c:	eea5 7a86 	vfma.f32	s14, s11, s12
    fResult += 1.0f;
24015710:	eeb0 6a45 	vmov.f32	s12, s10
24015714:	eea5 6a87 	vfma.f32	s12, s11, s14
    fResult *= fAngle;
24015718:	ee27 8a86 	vmul.f32	s16, s15, s12
2401571c:	e727      	b.n	2401556e <tVZFilterBell_initToPool+0xee>
2401571e:	bf00      	nop

24015720 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
24015720:	3118      	adds	r1, #24
24015722:	f7ff bead 	b.w	24015480 <tVZFilterBell_initToPool>
24015726:	bf00      	nop

24015728 <tVZFilterBell_setSampleRate>:
void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24015728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f->invSampleRate = 1.0f / sampleRate;
2401572c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sampleRate > 80000)
24015730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24015734:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / f->sampleRate;
24015738:	f2c4 713b 	movt	r1, #18235	; 0x473b
    f->invSampleRate = 1.0f / sampleRate;
2401573c:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sampleRate > 80000)
24015740:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->sampRatio = 48000.0f / f->sampleRate;
24015744:	ee07 1a10 	vmov	s14, r1
          	f->table = __filterTanhTable_48000;
24015748:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sampleRate > 80000)
2401574c:	ee07 2a90 	vmov	s15, r2
          	f->table = __filterTanhTable_48000;
24015750:	f2c2 4302 	movt	r3, #9218	; 0x2402
24015754:	f2c2 4101 	movt	r1, #9217	; 0x2401
        _tVZFilterBell* f = *vf;
24015758:	6802      	ldr	r2, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
2401575a:	eec7 6a00 	vdiv.f32	s13, s14, s0
        f->sampleRate = sampleRate;
2401575e:	ed82 0a0a 	vstr	s0, [r2, #40]	; 0x28
          	f->table = __filterTanhTable_48000;
24015762:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401576a:	bfd8      	it	le
2401576c:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f / sampleRate;
2401576e:	ed82 6a0b 	vstr	s12, [r2, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24015772:	6393      	str	r3, [r2, #56]	; 0x38
24015774:	edc2 6a0d 	vstr	s13, [r2, #52]	; 0x34
          }
}
24015778:	4770      	bx	lr
2401577a:	bf00      	nop

2401577c <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
2401577c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401577e:	edd3 6a02 	vldr	s13, [r3, #8]
24015782:	ed93 7a01 	vldr	s14, [r3, #4]
24015786:	ee70 7a66 	vsub.f32	s15, s0, s13
2401578a:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
2401578e:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24015792:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24015796:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
2401579a:	edd3 5a04 	vldr	s11, [r3, #16]
2401579e:	edd3 4a07 	vldr	s9, [r3, #28]
240157a2:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240157a6:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240157aa:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
240157ae:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240157b2:	eeb0 5a47 	vmov.f32	s10, s14
240157b6:	eea6 5a27 	vfma.f32	s10, s12, s15
240157ba:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
240157be:	eef0 5a66 	vmov.f32	s11, s13
240157c2:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240157c6:	ed83 5a01 	vstr	s10, [r3, #4]
}
240157ca:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240157ce:	edc3 5a02 	vstr	s11, [r3, #8]
}
240157d2:	4770      	bx	lr

240157d4 <tVZFilterBell_setBandwidth>:


//relies on a call to set Freq after
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
    _tVZFilterBell* f = *vf;
240157d4:	6803      	ldr	r3, [r0, #0]
    f->B = bandWidth;
240157d6:	ed83 0a08 	vstr	s0, [r3, #32]
    //Lfloat r  = f->g/wl;
    //r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    //f->rToUse = r;
    //f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
}
240157da:	4770      	bx	lr

240157dc <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
    _tVZFilterBell* f = *vf;
    f->fc = freq;
    f->g = tanf(PI * freq * f->invSampleRate);
240157dc:	f640 73db 	movw	r3, #4059	; 0xfdb
240157e0:	f2c4 0349 	movt	r3, #16457	; 0x4049
{
240157e4:	b510      	push	{r4, lr}
    f->g = tanf(PI * freq * f->invSampleRate);
240157e6:	ee07 3a90 	vmov	s15, r3
    _tVZFilterBell* f = *vf;
240157ea:	6804      	ldr	r4, [r0, #0]
{
240157ec:	ed2d 8b02 	vpush	{d8}
    f->fc = freq;
240157f0:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
240157f4:	ee20 0a27 	vmul.f32	s0, s0, s15
240157f8:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240157fc:	ee20 8a07 	vmul.f32	s16, s0, s14
24015800:	eeb0 0a48 	vmov.f32	s0, s16
24015804:	f007 fbce 	bl	2401cfa4 <tanf>
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24015808:	f646 410b 	movw	r1, #27659	; 0x6c0b
2401580c:	f24e 2350 	movw	r3, #57936	; 0xe250
24015810:	edd4 6a08 	vldr	s13, [r4, #32]
24015814:	f6cc 2187 	movt	r1, #51847	; 0xca87
    fResult += 3.1755e-01f;
24015818:	f642 52e0 	movw	r2, #11744	; 0x2de0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401581c:	f6c4 637d 	movt	r3, #20093	; 0x4e7d
    fResult += 1.0f;
24015820:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24015824:	ee07 1a10 	vmov	s14, r1
    fResult += 3.1755e-01f;
24015828:	f6c3 6250 	movt	r2, #15952	; 0x3e50
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401582c:	ee07 3a90 	vmov	s15, r3
    fResult += 3.1755e-01f;
24015830:	f249 53ea 	movw	r3, #38378	; 0x95ea
24015834:	ee05 2a90 	vmov	s11, r2
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015838:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401583c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult += 3.1755e-01f;
24015840:	f6c3 63a2 	movt	r3, #16034	; 0x3ea2
24015844:	eef5 3a00 	vmov.f32	s7, #80	; 0x3e800000  0.250
24015848:	ed94 4a07 	vldr	s8, [r4, #28]
2401584c:	ee07 3a10 	vmov	s14, r3
    z.i  = 0x5f3759df - (z.i >> 1);
24015850:	f645 13df 	movw	r3, #23007	; 0x59df
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015854:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    f->g = tanf(PI * freq * f->invSampleRate);
24015858:	ed84 0a03 	vstr	s0, [r4, #12]
    z.i  = 0x5f3759df - (z.i >> 1);
2401585c:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015860:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24015864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24015868:	ee68 7a27 	vmul.f32	s15, s16, s15
    Lfloat fASqr = fAngle*fAngle;
2401586c:	ee67 4aa7 	vmul.f32	s9, s15, s15
    fResult += 3.1755e-01f;
24015870:	eea4 7aa5 	vfma.f32	s14, s9, s11
    fResult += 1.0f;
24015874:	eef0 5a46 	vmov.f32	s11, s12
24015878:	eee4 5a87 	vfma.f32	s11, s9, s14
    fResult *= fAngle;
2401587c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015880:	eef0 5a46 	vmov.f32	s11, s12
    Lfloat r  = f->g/wl;
24015884:	ee80 7a27 	vdiv.f32	s14, s0, s15
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24015888:	ee67 7a07 	vmul.f32	s15, s14, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401588c:	eee7 5aa7 	vfma.f32	s11, s15, s15
    f->rToUse = r;
24015890:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015894:	ee85 7aa7 	vdiv.f32	s14, s11, s15
24015898:	ee77 7a43 	vsub.f32	s15, s14, s6
2401589c:	ee67 7aa3 	vmul.f32	s15, s15, s7
240158a0:	eec7 5a84 	vdiv.f32	s11, s15, s8
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240158a4:	ee15 2a90 	vmov	r2, s11
240158a8:	ee25 7aa6 	vmul.f32	s14, s11, s13
240158ac:	eef0 6a45 	vmov.f32	s13, s10
240158b0:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240158b4:	ee07 3a90 	vmov	s15, r3
240158b8:	ee27 7a27 	vmul.f32	s14, s14, s15
240158bc:	eee7 6ac7 	vfms.f32	s13, s15, s14
240158c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240158c4:	eef0 6a46 	vmov.f32	s13, s12
240158c8:	ee17 3a90 	vmov	r3, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240158cc:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240158d0:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240158d4:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
240158d8:	336e      	adds	r3, #110	; 0x6e
240158da:	ee07 3a90 	vmov	s15, r3
240158de:	ee77 7aa7 	vadd.f32	s15, s15, s15
    f->R2Plusg = f->R2+f->g;
240158e2:	ee30 7a27 	vadd.f32	s14, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240158e6:	edc4 7a04 	vstr	s15, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240158ea:	eee0 6a07 	vfma.f32	s13, s0, s14
    f->R2Plusg = f->R2+f->g;
240158ee:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240158f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
240158f6:	edc4 7a05 	vstr	s15, [r4, #20]
}
240158fa:	ecbd 8b02 	vpop	{d8}
240158fe:	bd10      	pop	{r4, pc}

24015900 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24015900:	f648 138d 	movw	r3, #35213	; 0x898d
    _tVZFilterBell* f = *vf;
24015904:	6802      	ldr	r2, [r0, #0]
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24015906:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
2401590a:	f640 7cfe 	movw	ip, #4094	; 0xffe
    cutoff *= 30.567164179104478f;
2401590e:	f2c4 13f4 	movt	r3, #16884	; 0x41f4
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24015912:	edd2 5a08 	vldr	s11, [r2, #32]
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015916:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401591a:	6b90      	ldr	r0, [r2, #56]	; 0x38
    cutoff *= 30.567164179104478f;
2401591c:	ee07 3a10 	vmov	s14, r3
    f->cutoffMIDI = cutoff;
24015920:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015924:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015928:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
2401592c:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015930:	edd2 2a07 	vldr	s5, [r2, #28]
24015934:	eeb5 2a00 	vmov.f32	s4, #80	; 0x3e800000  0.250
24015938:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
	int32_t intVer = (int32_t)cutoff;
2401593c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015940:	ee76 3a47 	vsub.f32	s7, s12, s14
	int32_t intVer = (int32_t)cutoff;
24015944:	ee16 3a90 	vmov	r3, s13
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24015948:	eef0 6a47 	vmov.f32	s13, s14
2401594c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24015950:	eee5 6aa7 	vfma.f32	s13, s11, s15
24015954:	4563      	cmp	r3, ip
24015956:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401595a:	bfa8      	it	ge
2401595c:	4663      	movge	r3, ip
	intVer = (int32_t)fl;
2401595e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
	Lfloat gLower = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015962:	ee36 4a66 	vsub.f32	s8, s12, s13
	intVer = (int32_t)fl;
24015966:	ee17 1a90 	vmov	r1, s15
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401596a:	ee07 3a90 	vmov	s15, r3
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401596e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015972:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015976:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
2401597a:	edd3 0a01 	vldr	s1, [r3, #4]
2401597e:	ed93 1a00 	vldr	s2, [r3]
24015982:	4561      	cmp	r1, ip
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015984:	ee77 7a43 	vsub.f32	s15, s14, s6
    z.i  = 0x5f3759df - (z.i >> 1);
24015988:	f645 13df 	movw	r3, #23007	; 0x59df
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
2401598c:	ee33 7a83 	vadd.f32	s14, s7, s6
24015990:	bfa8      	it	ge
24015992:	4661      	movge	r1, ip
24015994:	f6c5 7337 	movt	r3, #24375	; 0x5f37
24015998:	ee67 7aa0 	vmul.f32	s15, s15, s1
	LfloatVer = fl - (Lfloat)intVer;
2401599c:	ee03 1a90 	vmov	s7, r1
	Lfloat gLower = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
240159a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
240159a4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
240159a8:	eee1 7a07 	vfma.f32	s15, s2, s14
	LfloatVer = fl - (Lfloat)intVer;
240159ac:	ee76 6ae3 	vsub.f32	s13, s13, s7
	Lfloat gLower = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
240159b0:	ee34 7a23 	vadd.f32	s14, s8, s7
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
240159b4:	ee67 7a85 	vmul.f32	s15, s15, s10
240159b8:	edc2 7a03 	vstr	s15, [r2, #12]
	Lfloat gLower = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
240159bc:	edd1 3a01 	vldr	s7, [r1, #4]
240159c0:	ed91 4a00 	vldr	s8, [r1]
240159c4:	ee66 6aa3 	vmul.f32	s13, s13, s7
240159c8:	eee4 6a07 	vfma.f32	s13, s8, s14
240159cc:	ee25 5a26 	vmul.f32	s10, s10, s13
    Lfloat r  = f->g/gLower;
240159d0:	ee87 7a85 	vdiv.f32	s14, s15, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240159d4:	eeb0 5a46 	vmov.f32	s10, s12
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240159d8:	ee27 7a07 	vmul.f32	s14, s14, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240159dc:	eea7 5a07 	vfma.f32	s10, s14, s14
    f->rToUse = r;
240159e0:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240159e4:	eec5 6a07 	vdiv.f32	s13, s10, s14
240159e8:	ee36 7ae1 	vsub.f32	s14, s13, s3
240159ec:	ee27 7a02 	vmul.f32	s14, s14, s4
240159f0:	ee87 5a22 	vdiv.f32	s10, s14, s5
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240159f4:	ee15 1a10 	vmov	r1, s10
240159f8:	ee65 6a25 	vmul.f32	s13, s10, s11
240159fc:	eef0 5a64 	vmov.f32	s11, s9
24015a00:	eba3 0351 	sub.w	r3, r3, r1, lsr #1
24015a04:	ee07 3a10 	vmov	s14, r3
24015a08:	ee67 6a66 	vnmul.f32	s13, s14, s13
24015a0c:	eee6 5a87 	vfma.f32	s11, s13, s14
24015a10:	ee27 7a25 	vmul.f32	s14, s14, s11
24015a14:	ee17 3a10 	vmov	r3, s14
24015a18:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24015a1c:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24015a20:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24015a24:	336e      	adds	r3, #110	; 0x6e
24015a26:	ee07 3a10 	vmov	s14, r3
24015a2a:	ee37 7a07 	vadd.f32	s14, s14, s14
    f->R2Plusg = f->R2+f->g;
24015a2e:	ee77 6a87 	vadd.f32	s13, s15, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24015a32:	ed82 7a04 	vstr	s14, [r2, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015a36:	eeb0 7a46 	vmov.f32	s14, s12
    f->R2Plusg = f->R2+f->g;
24015a3a:	edc2 6a09 	vstr	s13, [r2, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015a3e:	eea7 7aa6 	vfma.f32	s14, s15, s13
24015a42:	eec6 7a07 	vdiv.f32	s15, s12, s14
24015a46:	edc2 7a05 	vstr	s15, [r2, #20]
}
24015a4a:	4770      	bx	lr

24015a4c <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24015a4c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
24015a50:	6802      	ldr	r2, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24015a52:	2100      	movs	r1, #0
24015a54:	f243 73bd 	movw	r3, #14269	; 0x37bd
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24015a58:	edd2 5a0c 	vldr	s11, [r2, #48]	; 0x30
24015a5c:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
24015a60:	eef0 3a46 	vmov.f32	s7, s12
24015a64:	f2c4 517a 	movt	r1, #17786	; 0x457a
24015a68:	f2c3 5386 	movt	r3, #13702	; 0x3586
24015a6c:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
24015a70:	ee06 1a90 	vmov	s13, r1
24015a74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24015a78:	eee5 3aa5 	vfma.f32	s7, s11, s11
24015a7c:	ee07 3a10 	vmov	s14, r3
24015a80:	fe80 0a66 	vminnm.f32	s0, s0, s13
    z.i  = 0x5f3759df - (z.i >> 1);
24015a84:	f645 13df 	movw	r3, #23007	; 0x59df
24015a88:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015a8c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    z.i  = 0x5f3759df - (z.i >> 1);
24015a90:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    f->R2Plusg = f->R2+f->g;
24015a94:	ed92 5a03 	vldr	s10, [r2, #12]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24015a98:	ed82 0a07 	vstr	s0, [r2, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24015a9c:	ee83 7aa5 	vdiv.f32	s14, s7, s11
24015aa0:	ee37 7a44 	vsub.f32	s14, s14, s8
24015aa4:	ee27 7a24 	vmul.f32	s14, s14, s9
24015aa8:	eec7 5a00 	vdiv.f32	s11, s14, s0
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015aac:	ee15 1a90 	vmov	r1, s11
24015ab0:	ee25 7aa7 	vmul.f32	s14, s11, s15
24015ab4:	eba3 0351 	sub.w	r3, r3, r1, lsr #1
24015ab8:	ee07 3a90 	vmov	s15, r3
24015abc:	ee27 7a27 	vmul.f32	s14, s14, s15
24015ac0:	eee7 6ac7 	vfms.f32	s13, s15, s14
24015ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015ac8:	eef0 6a46 	vmov.f32	s13, s12
24015acc:	ee17 3a90 	vmov	r3, s15
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24015ad0:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24015ad4:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24015ad8:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24015adc:	336e      	adds	r3, #110	; 0x6e
24015ade:	ee07 3a90 	vmov	s15, r3
24015ae2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    f->R2Plusg = f->R2+f->g;
24015ae6:	ee37 7a85 	vadd.f32	s14, s15, s10
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24015aea:	edc2 7a04 	vstr	s15, [r2, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015aee:	eee5 6a07 	vfma.f32	s13, s10, s14
    f->R2Plusg = f->R2+f->g;
24015af2:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015af6:	eec6 7a26 	vdiv.f32	s15, s12, s13
24015afa:	edc2 7a05 	vstr	s15, [r2, #20]
}
24015afe:	4770      	bx	lr

24015b00 <tVZFilterBR_init>:

}


void    tVZFilterBR_init           (tVZFilterBR* const vf,Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24015b00:	b570      	push	{r4, r5, r6, lr}
24015b02:	ed2d 8b06 	vpush	{d8-d10}
    tVZFilterBR_initToPool(vf, freq, Q, &leaf->mempool);
}

void    tVZFilterBR_initToPool     (tVZFilterBR* const vf, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24015b06:	698d      	ldr	r5, [r1, #24]
{
24015b08:	4606      	mov	r6, r0
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
24015b0a:	2034      	movs	r0, #52	; 0x34
{
24015b0c:	eef0 8a40 	vmov.f32	s17, s0
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
24015b10:	4629      	mov	r1, r5
{
24015b12:	eeb0 9a60 	vmov.f32	s18, s1
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
24015b16:	f001 fa23 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24015b1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
24015b1e:	6030      	str	r0, [r6, #0]
    if (val < min)
24015b20:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    f->mempool = m;
24015b24:	6005      	str	r5, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
24015b26:	f2c4 723b 	movt	r2, #18235	; 0x473b
    LEAF* leaf = f->mempool->leaf;
24015b2a:	686d      	ldr	r5, [r5, #4]
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
24015b2c:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24015b2e:	ee07 2a10 	vmov	s14, r2
24015b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->sampleRate = leaf->sampleRate;
24015b36:	edd5 7a00 	vldr	s15, [r5]
    f->sampRatio = 48000.0f / f->sampleRate;
24015b3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    f->sampleRate = leaf->sampleRate;
24015b3e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    f->sampRatio = 48000.0f / f->sampleRate;
24015b42:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
24015b46:	ed95 0a01 	vldr	s0, [r5, #4]
24015b4a:	ed80 0a0a 	vstr	s0, [r0, #40]	; 0x28
24015b4e:	d468      	bmi.n	24015c22 <tVZFilterBR_init+0x122>
    f->cutoffMIDI = ftom(freq);
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->R2 = 1.0f / Q;
    f->G = 1.0f;
    f->g = tanf(PI * fc * f->invSampleRate);
24015b50:	f640 73db 	movw	r3, #4059	; 0xfdb
    Lfloat fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24015b54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    f->g = tanf(PI * fc * f->invSampleRate);
24015b58:	f2c4 0349 	movt	r3, #16457	; 0x4049
    Lfloat fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24015b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
    f->g = tanf(PI * fc * f->invSampleRate);
24015b60:	ee07 3a10 	vmov	s14, r3
24015b64:	ee20 0a07 	vmul.f32	s0, s0, s14
24015b68:	fec7 7ae8 	vminnm.f32	s15, s15, s17
24015b6c:	ee27 0a80 	vmul.f32	s0, s15, s0
24015b70:	f007 fa18 	bl	2401cfa4 <tanf>
    f->R2 = 1.0f / Q;
24015b74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->g = tanf(PI * fc * f->invSampleRate);
24015b78:	eeb0 8a40 	vmov.f32	s16, s0
    f->R2 = 1.0f / Q;
24015b7c:	eec7 9a89 	vdiv.f32	s19, s15, s18
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015b80:	eeb0 7a67 	vmov.f32	s14, s15
    f->R2Plusg = f->R2+f->g;
24015b84:	ee30 aa29 	vadd.f32	s20, s0, s19
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015b88:	eea0 7a0a 	vfma.f32	s14, s0, s20
24015b8c:	ee87 9a87 	vdiv.f32	s18, s15, s14
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015b90:	eef5 8ac0 	vcmpe.f32	s17, #0.0
24015b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015b98:	dd3c      	ble.n	24015c14 <tVZFilterBR_init+0x114>
24015b9a:	f647 63d2 	movw	r3, #32466	; 0x7ed2
24015b9e:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
24015ba2:	ee00 3a10 	vmov	s0, r3
24015ba6:	ee28 0a80 	vmul.f32	s0, s17, s0
24015baa:	f006 fe15 	bl	2401c7d8 <logf>
24015bae:	f647 73ac 	movw	r3, #32684	; 0x7fac
24015bb2:	f2c4 138a 	movt	r3, #16778	; 0x418a
24015bb6:	ee07 3a90 	vmov	s15, r3
24015bba:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (leaf->sampleRate > 80000)
24015bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f->G = 1.0f;
24015bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->s1    = 0.0f;
24015bc6:	2200      	movs	r2, #0
    f->cutoffMIDI = ftom(freq);
24015bc8:	ed84 0a07 	vstr	s0, [r4, #28]
    if (leaf->sampleRate > 80000)
24015bcc:	f2c4 739c 	movt	r3, #18332	; 0x479c
    f->R2 = 1.0f / Q;
24015bd0:	edc4 9a04 	vstr	s19, [r4, #16]
    f->s1    = 0.0f;
24015bd4:	6062      	str	r2, [r4, #4]
    f->s2   = 0.0f;
24015bd6:	60a2      	str	r2, [r4, #8]
    if (leaf->sampleRate > 80000)
24015bd8:	ee07 3a90 	vmov	s15, r3
    f->g = tanf(PI * fc * f->invSampleRate);
24015bdc:	ed84 8a03 	vstr	s16, [r4, #12]
    {
        f->table = __filterTanhTable_96000;
    }
    else
    {
        f->table = __filterTanhTable_48000;
24015be0:	f64f 1294 	movw	r2, #63892	; 0xf994
    f->G = 1.0f;
24015be4:	ed84 7a08 	vstr	s14, [r4, #32]
        f->table = __filterTanhTable_48000;
24015be8:	f643 1394 	movw	r3, #14740	; 0x3994
    f->R2Plusg = f->R2+f->g;
24015bec:	ed84 aa06 	vstr	s20, [r4, #24]
        f->table = __filterTanhTable_48000;
24015bf0:	f2c2 4201 	movt	r2, #9217	; 0x2401
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015bf4:	ed84 9a05 	vstr	s18, [r4, #20]
        f->table = __filterTanhTable_48000;
24015bf8:	f2c2 4302 	movt	r3, #9218	; 0x2402
    if (leaf->sampleRate > 80000)
24015bfc:	ed95 7a00 	vldr	s14, [r5]
        f->table = __filterTanhTable_48000;
24015c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
24015c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c08:	bfd8      	it	le
24015c0a:	4613      	movle	r3, r2
24015c0c:	6323      	str	r3, [r4, #48]	; 0x30
}
24015c0e:	ecbd 8b06 	vpop	{d8-d10}
24015c12:	bd70      	pop	{r4, r5, r6, pc}
24015c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24015c18:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
24015c1c:	ee00 3a10 	vmov	s0, r3
24015c20:	e7cd      	b.n	24015bbe <tVZFilterBR_init+0xbe>
    f->R2 = 1.0f / Q;
24015c22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015c26:	2300      	movs	r3, #0
24015c28:	ee08 3a10 	vmov	s16, r3
24015c2c:	eec7 9a89 	vdiv.f32	s19, s15, s18
24015c30:	eeb0 9a67 	vmov.f32	s18, s15
24015c34:	eeb0 aa69 	vmov.f32	s20, s19
24015c38:	e7aa      	b.n	24015b90 <tVZFilterBR_init+0x90>
24015c3a:	bf00      	nop

24015c3c <tVZFilterBR_setSampleRate>:
void    tVZFilterBR_setSampleRate  (tVZFilterBR* const vf, Lfloat sampleRate)
{
        _tVZFilterBR* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
24015c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f->invSampleRate = 1.0f / sampleRate;
24015c40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sampleRate > 80000)
24015c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
       {
           f->table = __filterTanhTable_96000;
       }
       else
       {
           f->table = __filterTanhTable_48000;
24015c48:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / f->sampleRate;
24015c4c:	f2c4 713b 	movt	r1, #18235	; 0x473b
    f->invSampleRate = 1.0f / sampleRate;
24015c50:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sampleRate > 80000)
24015c54:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->sampRatio = 48000.0f / f->sampleRate;
24015c58:	ee07 1a10 	vmov	s14, r1
           f->table = __filterTanhTable_48000;
24015c5c:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sampleRate > 80000)
24015c60:	ee07 2a90 	vmov	s15, r2
           f->table = __filterTanhTable_48000;
24015c64:	f2c2 4302 	movt	r3, #9218	; 0x2402
24015c68:	f2c2 4101 	movt	r1, #9217	; 0x2401
        _tVZFilterBR* f = *vf;
24015c6c:	6802      	ldr	r2, [r0, #0]
    f->sampRatio = 48000.0f / f->sampleRate;
24015c6e:	eec7 6a00 	vdiv.f32	s13, s14, s0
        f->sampleRate = sampleRate;
24015c72:	ed82 0a09 	vstr	s0, [r2, #36]	; 0x24
           f->table = __filterTanhTable_48000;
24015c76:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c7e:	bfd8      	it	le
24015c80:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f / sampleRate;
24015c82:	ed82 6a0a 	vstr	s12, [r2, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
24015c86:	6313      	str	r3, [r2, #48]	; 0x30
24015c88:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
       }
}
24015c8c:	4770      	bx	lr
24015c8e:	bf00      	nop

24015c90 <tVZFilterBR_tick>:
Lfloat   tVZFilterBR_tick               (tVZFilterBR* const vf, Lfloat input)
{
        _tVZFilterBR* f = *vf;
24015c90:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24015c92:	edd3 6a02 	vldr	s13, [r3, #8]
24015c96:	ed93 7a01 	vldr	s14, [r3, #4]
24015c9a:	ee70 7a66 	vsub.f32	s15, s0, s13
24015c9e:	ed93 5a06 	vldr	s10, [r3, #24]
24015ca2:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24015ca6:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24015caa:	eee5 7a47 	vfms.f32	s15, s10, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return (yH + yL)*f->G;
24015cae:	ed93 0a08 	vldr	s0, [r3, #32]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24015cb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
    yB = v1 + f->s1;
24015cb6:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
24015cba:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24015cbe:	eeb0 5a47 	vmov.f32	s10, s14
24015cc2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24015cc6:	eef0 5a66 	vmov.f32	s11, s13
    return (yH + yL)*f->G;
24015cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24015cce:	eee6 5a07 	vfma.f32	s11, s12, s14
}
24015cd2:	ee27 0a80 	vmul.f32	s0, s15, s0
    f->s1 = v1 + yB; // state update in 1st integrator
24015cd6:	ed83 5a01 	vstr	s10, [r3, #4]
    f->s2 = v2 + yL; // state update in 2nd integrator
24015cda:	edc3 5a02 	vstr	s11, [r3, #8]
}
24015cde:	4770      	bx	lr

24015ce0 <tVZFilterBR_setFreqFast>:

void    tVZFilterBR_setFreqFast           (tVZFilterBR* const vf, Lfloat cutoff)
{
        _tVZFilterBR* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24015ce0:	f648 128d 	movw	r2, #35213	; 0x898d
        _tVZFilterBR* f = *vf;
24015ce4:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
24015ce6:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
            intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        cutoff *= 30.567164179104478f;
24015cee:	f2c4 12f4 	movt	r2, #16884	; 0x41f4
        f->cutoffMIDI = cutoff;
24015cf2:	ed83 0a07 	vstr	s0, [r3, #28]
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
        cutoff *= 30.567164179104478f;
24015cf8:	ee07 2a90 	vmov	s15, r2
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015cfc:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24015d00:	ed93 7a04 	vldr	s14, [r3, #16]
        cutoff *= 30.567164179104478f;
24015d04:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
24015d08:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d0c:	ee36 6ac0 	vsub.f32	s12, s13, s0
        int32_t intVer = (int32_t)cutoff;
24015d10:	ee17 2a90 	vmov	r2, s15
24015d14:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24015d18:	4562      	cmp	r2, ip
24015d1a:	bfa8      	it	ge
24015d1c:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015d1e:	ee07 2a90 	vmov	s15, r2
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015d26:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d2a:	ed92 4a01 	vldr	s8, [r2, #4]
24015d2e:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24015d32:	ee70 7a65 	vsub.f32	s15, s0, s11
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d36:	ee36 6a25 	vadd.f32	s12, s12, s11
24015d3a:	ee67 7a84 	vmul.f32	s15, s15, s8
24015d3e:	eee4 7a86 	vfma.f32	s15, s9, s12
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015d42:	eeb0 6a66 	vmov.f32	s12, s13
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d46:	ee67 7a85 	vmul.f32	s15, s15, s10
    f->R2Plusg = f->R2+f->g;
24015d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
24015d4e:	edc3 7a03 	vstr	s15, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015d52:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24015d56:	ed83 7a06 	vstr	s14, [r3, #24]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24015d5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
24015d5e:	edc3 7a05 	vstr	s15, [r3, #20]
    
}
24015d62:	4770      	bx	lr

24015d64 <tVZFilterBR_setGain>:

void    tVZFilterBR_setGain           (tVZFilterBR* const vf, Lfloat gain)
{
    _tVZFilterBR* f = *vf;
24015d64:	6803      	ldr	r3, [r0, #0]
    f->G = gain;
24015d66:	ed83 0a08 	vstr	s0, [r3, #32]
}
24015d6a:	4770      	bx	lr

24015d6c <tVZFilterBR_setResonance>:


void    tVZFilterBR_setResonance                (tVZFilterBR* const vf, Lfloat res)
{
        _tVZFilterBR* f = *vf;
        f->R2 = 1.0f/res;
24015d6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterBR* f = *vf;
24015d70:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24015d72:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
24015d76:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->R2Plusg = f->R2+f->g;
24015d7a:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24015d7e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015d82:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
24015d86:	ed83 7a06 	vstr	s14, [r3, #24]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24015d8a:	eea6 6a87 	vfma.f32	s12, s13, s14
24015d8e:	ee87 7a86 	vdiv.f32	s14, s15, s12
24015d92:	ed83 7a05 	vstr	s14, [r3, #20]
}
24015d96:	4770      	bx	lr

24015d98 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24015d98:	b570      	push	{r4, r5, r6, lr}
24015d9a:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24015d9e:	698d      	ldr	r5, [r1, #24]
{
24015da0:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24015da2:	204c      	movs	r0, #76	; 0x4c
{
24015da4:	eeb0 8a40 	vmov.f32	s16, s0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24015da8:	4629      	mov	r1, r5
{
24015daa:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24015dae:	f001 f8d7 	bl	24016f60 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24015db2:	f640 73db 	movw	r3, #4059	; 0xfdb
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24015db6:	6030      	str	r0, [r6, #0]
24015db8:	4604      	mov	r4, r0
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24015dba:	f2c4 0349 	movt	r3, #16457	; 0x4049
    f->mempool = m;
24015dbe:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24015dc0:	686d      	ldr	r5, [r5, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24015dc2:	ee07 3a90 	vmov	s15, r3
    f->invSampleRate = leaf->invSampleRate;
24015dc6:	ed95 7a01 	vldr	s14, [r5, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24015dca:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->cutoff = cutoff;
24015dce:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
24015dd2:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24015dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
24015dda:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
24015dde:	f007 f977 	bl	2401d0d0 <tan>
24015de2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24015de6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015dee:	ed84 0a02 	vstr	s0, [r4, #8]
24015df2:	dd74      	ble.n	24015ede <tDiodeFilter_init+0x146>
24015df4:	f647 63d2 	movw	r3, #32466	; 0x7ed2
24015df8:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
24015dfc:	ee00 3a10 	vmov	s0, r3
24015e00:	ee28 0a00 	vmul.f32	s0, s16, s0
24015e04:	f006 fce8 	bl	2401c7d8 <logf>
24015e08:	f647 73ac 	movw	r3, #32684	; 0x7fac
24015e0c:	f2c4 138a 	movt	r3, #16778	; 0x418a
24015e10:	ee07 3a90 	vmov	s15, r3
24015e14:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->cutoffMIDI = ftom(cutoff);
    f->r = (7.f * resonance + 0.5f);
    f->Vt = 0.5f;
    f->n = 1.836f;
24015e18:	f44f 7103 	mov.w	r1, #524	; 0x20c
    f->r = (7.f * resonance + 0.5f);
24015e1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
24015e20:	f24d 730a 	movw	r3, #55050	; 0xd70a
    f->r = (7.f * resonance + 0.5f);
24015e24:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
    f->gamma = f->Vt*f->n;
24015e28:	460a      	mov	r2, r1
    f->n = 1.836f;
24015e2a:	f6c3 71eb 	movt	r1, #16363	; 0x3feb
    f->s0 = 0.01f;
24015e2e:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    f->r = (7.f * resonance + 0.5f);
24015e32:	eef0 6a67 	vmov.f32	s13, s15
    f->gamma = f->Vt*f->n;
24015e36:	f6c3 726b 	movt	r2, #16235	; 0x3f6b
    f->n = 1.836f;
24015e3a:	6161      	str	r1, [r4, #20]
    f->s1 = 0.02f;
24015e3c:	f24d 710a 	movw	r1, #55050	; 0xd70a
    f->s0 = 0.01f;
24015e40:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->gamma = f->Vt*f->n;
24015e42:	61a2      	str	r2, [r4, #24]
    f->s2 = 0.03f;
24015e44:	f24c 228f 	movw	r2, #49807	; 0xc28f
    f->s1 = 0.02f;
24015e48:	f6c3 41a3 	movt	r1, #15523	; 0x3ca3
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
    f->g1inv = 1.f/(2.f*f->gamma);
24015e4c:	f646 63fd 	movw	r3, #28413	; 0x6efd
    f->s2 = 0.03f;
24015e50:	f6c3 42f5 	movt	r2, #15605	; 0x3cf5
    f->r = (7.f * resonance + 0.5f);
24015e54:	eee8 6a87 	vfma.f32	s13, s17, s14
    f->s1 = 0.02f;
24015e58:	6321      	str	r1, [r4, #48]	; 0x30
    f->g1inv = 1.f/(2.f*f->gamma);
24015e5a:	f6c3 730b 	movt	r3, #16139	; 0x3f0b
    f->s2 = 0.03f;
24015e5e:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
24015e60:	f24d 710a 	movw	r1, #55050	; 0xd70a
    f->g2inv = 1.f/(6.f*f->gamma);
24015e64:	f64e 1252 	movw	r2, #59730	; 0xe952
    f->g1inv = 1.f/(2.f*f->gamma);
24015e68:	6263      	str	r3, [r4, #36]	; 0x24
    f->zi = 0.0f; //previous input value
24015e6a:	2000      	movs	r0, #0
    f->s3 = 0.04f;
24015e6c:	f6c3 5123 	movt	r1, #15651	; 0x3d23
    f->g2inv = 1.f/(6.f*f->gamma);
24015e70:	f6c3 6239 	movt	r2, #15929	; 0x3e39
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f->g0inv = 1.f/(2.f*f->Vt);
24015e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->zi = 0.0f; //previous input value
24015e7c:	61e0      	str	r0, [r4, #28]
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015e7e:	f2c4 733b 	movt	r3, #18235	; 0x473b
    f->s3 = 0.04f;
24015e82:	4608      	mov	r0, r1
    f->g2inv = 1.f/(6.f*f->gamma);
24015e84:	4611      	mov	r1, r2
    f->Vt = 0.5f;
24015e86:	edc4 7a04 	vstr	s15, [r4, #16]
    f->g0inv = 1.f/(2.f*f->Vt);
24015e8a:	ed84 7a08 	vstr	s14, [r4, #32]
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015e8e:	ee07 3a90 	vmov	s15, r3
    f->g2inv = 1.f/(6.f*f->gamma);
24015e92:	62a1      	str	r1, [r4, #40]	; 0x28
    if (leaf->sampleRate > 80000)
24015e94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f->cutoffMIDI = ftom(cutoff);
24015e98:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24015e9c:	f64f 1194 	movw	r1, #63892	; 0xf994
    f->r = (7.f * resonance + 0.5f);
24015ea0:	edc4 6a03 	vstr	s13, [r4, #12]
    if (leaf->sampleRate > 80000)
24015ea4:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->s3 = 0.04f;
24015ea8:	63a0      	str	r0, [r4, #56]	; 0x38
    	f->table = __filterTanhTable_48000;
24015eaa:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015eae:	edd5 6a00 	vldr	s13, [r5]
    	f->table = __filterTanhTable_48000;
24015eb2:	f2c2 4101 	movt	r1, #9217	; 0x2401
24015eb6:	f2c2 4302 	movt	r3, #9218	; 0x2402
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015eba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (leaf->sampleRate > 80000)
24015ebe:	ee07 2a90 	vmov	s15, r2
    f->sampRatio = 48000.0f / leaf->sampleRate;
24015ec2:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    if (leaf->sampleRate > 80000)
24015ec6:	ed95 7a00 	vldr	s14, [r5]
    	f->table = __filterTanhTable_48000;
24015eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
24015ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ed2:	bfd8      	it	le
24015ed4:	460b      	movle	r3, r1
24015ed6:	6463      	str	r3, [r4, #68]	; 0x44
}
24015ed8:	ecbd 8b02 	vpop	{d8}
24015edc:	bd70      	pop	{r4, r5, r6, pc}
24015ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24015ee2:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
24015ee6:	ee00 3a10 	vmov	s0, r3
24015eea:	e795      	b.n	24015e18 <tDiodeFilter_init+0x80>

24015eec <tDiodeFilter_tickEfficient>:
    f->zi = in;
    return tanhf(y3*f->r);
}

Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
24015eec:	b500      	push	{lr}
24015eee:	ed2d 8b06 	vpush	{d8-d10}
    _tDiodeFilter* f = *vf;
24015ef2:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015ef4:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015ef8:	2200      	movs	r2, #0
24015efa:	eeb2 5a0e 	vmov.f32	s10, #46	; 0x41700000  15.0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015efe:	edd3 6a03 	vldr	s13, [r3, #12]
24015f02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f06:	f2c4 32d2 	movt	r2, #17362	; 0x43d2
    Lfloat ih = 0.5f * (in + f->zi);
24015f0a:	edd3 5a07 	vldr	s11, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015f0e:	ee27 7ae6 	vnmul.f32	s14, s15, s13
24015f12:	edd3 2a08 	vldr	s5, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24015f16:	ee70 5a25 	vadd.f32	s11, s0, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f1a:	ee06 2a10 	vmov	s12, r2
    if (testVal > 0.000001f)
24015f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015f22:	edd3 3a02 	vldr	s7, [r3, #8]
24015f26:	eea5 7aa4 	vfma.f32	s14, s11, s9
    if (testVal > 0.000001f)
24015f2a:	f2cc 426c 	movt	r2, #50284	; 0xc46c
24015f2e:	ee05 2a90 	vmov	s11, r2
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015f32:	ee27 7a22 	vmul.f32	s14, s14, s5
    Lfloat a = x*x;
24015f36:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f3a:	eea7 6a05 	vfma.f32	s12, s14, s10
24015f3e:	ee27 6a06 	vmul.f32	s12, s14, s12
    if (testVal > 0.000001f)
24015f42:	eeb4 6ae5 	vcmpe.f32	s12, s11
24015f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f4a:	f340 829e 	ble.w	2401648a <tDiodeFilter_tickEfficient+0x59e>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24015f52:	f2c4 426c 	movt	r2, #17516	; 0x446c
24015f56:	ee05 2a90 	vmov	s11, r2
24015f5a:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24015f5e:	ed93 4a0c 	vldr	s8, [r3, #48]	; 0x30
    return ((a + 105.0f)*a + 945.0f) / output;
24015f62:	2200      	movs	r2, #0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24015f64:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
    return ((a + 105.0f)*a + 945.0f) / output;
24015f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24015f6c:	f2c4 22d2 	movt	r2, #17106	; 0x42d2
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24015f70:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
24015f74:	f2c4 416c 	movt	r1, #17516	; 0x446c
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24015f78:	ee34 5a46 	vsub.f32	s10, s8, s12
    return ((a + 105.0f)*a + 945.0f) / output;
24015f7c:	ee04 2a90 	vmov	s9, r2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f80:	2200      	movs	r2, #0
    return ((a + 105.0f)*a + 945.0f) / output;
24015f82:	ee03 1a10 	vmov	s6, r1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f86:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24015f8a:	ee25 5a01 	vmul.f32	s10, s10, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015f8e:	f2c4 32d2 	movt	r2, #17362	; 0x43d2
    return ((a + 105.0f)*a + 945.0f) / output;
24015f92:	ee77 4a24 	vadd.f32	s9, s14, s9
    if (testVal > 0.000001f)
24015f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    return ((a + 105.0f)*a + 945.0f) / output;
24015f9a:	eef0 1a43 	vmov.f32	s3, s6
24015f9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    Lfloat a = x*x;
24015fa2:	ee25 5a05 	vmul.f32	s10, s10, s10
    if (testVal > 0.000001f)
24015fa6:	f2cc 416c 	movt	r1, #50284	; 0xc46c
    return ((a + 105.0f)*a + 945.0f) / output;
24015faa:	f2c4 406c 	movt	r0, #17516	; 0x446c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24015fae:	ee63 2aa2 	vmul.f32	s5, s7, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24015fb2:	eee7 1a24 	vfma.f32	s3, s14, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015fb6:	ee07 2a10 	vmov	s14, r2
    if (testVal > 0.000001f)
24015fba:	ee04 1a90 	vmov	s9, r1
    return ((a + 105.0f)*a + 945.0f) / output;
24015fbe:	2100      	movs	r1, #0
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015fc0:	eea5 7a02 	vfma.f32	s14, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24015fc4:	ee08 0a90 	vmov	s17, r0
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015fc8:	460a      	mov	r2, r1
    return ((a + 105.0f)*a + 945.0f) / output;
24015fca:	f2c4 21d2 	movt	r1, #17106	; 0x42d2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015fce:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
24015fd2:	f2c4 32d2 	movt	r2, #17362	; 0x43d2
24015fd6:	ee63 0a81 	vmul.f32	s1, s7, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24015fda:	ee81 2aa5 	vdiv.f32	s4, s3, s11
24015fde:	ee01 0a90 	vmov	s3, r0
24015fe2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
24015fe6:	f2c4 406c 	movt	r0, #17516	; 0x446c
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24015fea:	ee25 7a07 	vmul.f32	s14, s10, s14
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);

    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24015fee:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    if (testVal > 0.000001f)
24015ff2:	eeb4 7ae4 	vcmpe.f32	s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24015ff6:	ee04 1a90 	vmov	s9, r1
    if (testVal > 0.000001f)
24015ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    return ((a + 105.0f)*a + 945.0f) / output;
24015ffe:	ee75 4a24 	vadd.f32	s9, s10, s9
    if (testVal > 0.000001f)
24016002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016006:	f2cc 416c 	movt	r1, #50284	; 0xc46c
    return ((a + 105.0f)*a + 945.0f) / output;
2401600a:	eee5 8a24 	vfma.f32	s17, s10, s9
    if (testVal > 0.000001f)
2401600e:	ee05 1a10 	vmov	s10, r1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24016012:	bfc8      	it	gt
24016014:	ee77 5a03 	vaddgt.f32	s11, s14, s6
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24016018:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
    Lfloat output = 1.0f;
2401601c:	bfd8      	it	le
2401601e:	eef7 5a00 	vmovle.f32	s11, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24016022:	2100      	movs	r1, #0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24016024:	ee37 3a44 	vsub.f32	s6, s14, s8
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24016028:	ee62 2a22 	vmul.f32	s5, s4, s5
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401602c:	ee23 3a01 	vmul.f32	s6, s6, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24016030:	ee88 2aa5 	vdiv.f32	s4, s17, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24016034:	ee05 2a90 	vmov	s11, r2
24016038:	460a      	mov	r2, r1
    return ((a + 105.0f)*a + 945.0f) / output;
2401603a:	f2c4 21d2 	movt	r1, #17106	; 0x42d2
2401603e:	ee08 0a90 	vmov	s17, r0
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24016042:	f2c4 32d2 	movt	r2, #17362	; 0x43d2
    Lfloat a = x*x;
24016046:	ee23 3a03 	vmul.f32	s6, s6, s6
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401604a:	eee3 5a08 	vfma.f32	s11, s6, s16
2401604e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
24016052:	ee63 5a25 	vmul.f32	s11, s6, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24016056:	ee22 2a20 	vmul.f32	s4, s4, s1
    if (testVal > 0.000001f)
2401605a:	eef4 5ac5 	vcmpe.f32	s11, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401605e:	ee05 2a10 	vmov	s10, r2
    if (testVal > 0.000001f)
24016062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24016066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401606a:	f2cc 426c 	movt	r2, #50284	; 0xc46c
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401606e:	bfc8      	it	gt
24016070:	ee75 4aa1 	vaddgt.f32	s9, s11, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24016074:	ee01 1a90 	vmov	s3, r1
    Lfloat output = 1.0f;
24016078:	bfd8      	it	le
2401607a:	eef7 4a00 	vmovle.f32	s9, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401607e:	2100      	movs	r1, #0
24016080:	ee73 1a21 	vadd.f32	s3, s6, s3
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24016084:	ee77 5ac7 	vsub.f32	s11, s15, s14
    return ((a + 105.0f)*a + 945.0f) / output;
24016088:	eee3 8a21 	vfma.f32	s17, s6, s3
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401608c:	ee65 5a81 	vmul.f32	s11, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24016090:	ee01 0a10 	vmov	s2, r0
24016094:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    Lfloat a = x*x;
24016098:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
2401609c:	f2c4 406c 	movt	r0, #17516	; 0x446c
240160a0:	ee88 3aa4 	vdiv.f32	s6, s17, s9
240160a4:	ee09 0a10 	vmov	s18, r0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240160a8:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240160ac:	eea5 5a88 	vfma.f32	s10, s11, s16
    if (testVal > 0.000001f)
240160b0:	ee08 2a10 	vmov	s16, r2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240160b4:	460a      	mov	r2, r1
    return ((a + 105.0f)*a + 945.0f) / output;
240160b6:	f2c4 21d2 	movt	r1, #17106	; 0x42d2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240160ba:	f2c4 32d2 	movt	r2, #17362	; 0x43d2
240160be:	ee25 5a85 	vmul.f32	s10, s11, s10
    if (testVal > 0.000001f)
240160c2:	eeb4 5ac8 	vcmpe.f32	s10, s16
    return ((a + 105.0f)*a + 945.0f) / output;
240160c6:	ee08 0a10 	vmov	s16, r0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240160ca:	ee63 4a20 	vmul.f32	s9, s6, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240160ce:	ee03 1a10 	vmov	s6, r1
    if (testVal > 0.000001f)
240160d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    return ((a + 105.0f)*a + 945.0f) / output;
240160da:	ee35 3a83 	vadd.f32	s6, s11, s6
    if (testVal > 0.000001f)
240160de:	f2cc 416c 	movt	r1, #50284	; 0xc46c
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240160e2:	bfc8      	it	gt
240160e4:	ee35 5a01 	vaddgt.f32	s10, s10, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240160e8:	eea5 9a83 	vfma.f32	s18, s11, s6
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240160ec:	ee05 2a90 	vmov	s11, r2
    Lfloat output = 1.0f;
240160f0:	bfd8      	it	le
240160f2:	eeb7 5a00 	vmovle.f32	s10, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
240160f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240160fa:	ee27 1aa8 	vmul.f32	s2, s15, s17
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240160fe:	ee36 3a07 	vadd.f32	s6, s12, s14
    return ((a + 105.0f)*a + 945.0f) / output;
24016102:	f2c4 426c 	movt	r2, #17516	; 0x446c
    Lfloat a = x*x;
24016106:	ee21 1a01 	vmul.f32	s2, s2, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401610a:	eec9 1a05 	vdiv.f32	s3, s18, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401610e:	eeb2 5a0e 	vmov.f32	s10, #46	; 0x41700000  15.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24016112:	ee23 9aa8 	vmul.f32	s18, s7, s17
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24016116:	ee77 3a87 	vadd.f32	s7, s15, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401611a:	eee1 5a05 	vfma.f32	s11, s2, s10
    if (testVal > 0.000001f)
2401611e:	ee05 1a10 	vmov	s10, r1
    return ((a + 105.0f)*a + 945.0f) / output;
24016122:	2100      	movs	r1, #0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24016124:	ee67 8a82 	vmul.f32	s17, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24016128:	f2c4 21d2 	movt	r1, #17106	; 0x42d2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401612c:	ee65 5a81 	vmul.f32	s11, s11, s2
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24016130:	ee61 1aa0 	vmul.f32	s3, s3, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24016134:	ee00 2a90 	vmov	s1, r2
    if (testVal > 0.000001f)
24016138:	eef4 5ac5 	vcmpe.f32	s11, s10
2401613c:	ee37 5a84 	vadd.f32	s10, s15, s8
24016140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24016144:	ee33 3a05 	vadd.f32	s6, s6, s10
24016148:	ee37 5a05 	vadd.f32	s10, s14, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401614c:	bfc8      	it	gt
2401614e:	ee75 5a88 	vaddgt.f32	s11, s11, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24016152:	ee08 1a10 	vmov	s16, r1
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24016156:	eea0 3a22 	vfma.f32	s6, s0, s5

    if (tempy3denom < 0.000001f)
2401615a:	f64f 71ef 	movw	r1, #65519	; 0xffef
    return ((a + 105.0f)*a + 945.0f) / output;
2401615e:	ee31 8a08 	vadd.f32	s16, s2, s16
    Lfloat output = 1.0f;
24016162:	bfd8      	it	le
24016164:	eef7 5a00 	vmovle.f32	s11, #112	; 0x3f800000  1.0
    if (tempy3denom < 0.000001f)
24016168:	f6cb 717f 	movt	r1, #49023	; 0xbf7f
    return ((a + 105.0f)*a + 945.0f) / output;
2401616c:	eee8 0a01 	vfma.f32	s1, s16, s2
24016170:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24016174:	eea3 5a02 	vfma.f32	s10, s6, s4
24016178:	ee33 3aa3 	vadd.f32	s6, s7, s7
2401617c:	eeb0 aa41 	vmov.f32	s20, s2
24016180:	eee2 3a03 	vfma.f32	s7, s4, s6
    return ((a + 105.0f)*a + 945.0f) / output;
24016184:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24016188:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401618c:	eee5 3a24 	vfma.f32	s7, s10, s9
24016190:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24016194:	ee23 3a09 	vmul.f32	s6, s6, s18
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24016198:	eeb0 9a65 	vmov.f32	s18, s11
2401619c:	eee6 5aa2 	vfma.f32	s11, s13, s5
240161a0:	ee33 8a01 	vadd.f32	s16, s6, s2
240161a4:	eea3 9a01 	vfma.f32	s18, s6, s2
240161a8:	eea3 aa01 	vfma.f32	s20, s6, s2
240161ac:	ee73 0a25 	vadd.f32	s1, s6, s11
240161b0:	eef0 5a43 	vmov.f32	s11, s6
240161b4:	eea9 8a02 	vfma.f32	s16, s18, s4
240161b8:	ee33 9a29 	vadd.f32	s18, s6, s19
240161bc:	ee29 9a02 	vmul.f32	s18, s18, s4
240161c0:	eea9 aa05 	vfma.f32	s20, s18, s10
240161c4:	eee9 5a01 	vfma.f32	s11, s18, s2
240161c8:	ee33 9a05 	vadd.f32	s18, s6, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240161cc:	ee28 5a85 	vmul.f32	s10, s17, s10
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240161d0:	eea0 9a82 	vfma.f32	s18, s1, s4
240161d4:	eef0 0a48 	vmov.f32	s1, s16
240161d8:	eeea 5a24 	vfma.f32	s11, s20, s9
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240161dc:	eea7 5a81 	vfma.f32	s10, s15, s2
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240161e0:	eee9 0a24 	vfma.f32	s1, s18, s9
240161e4:	eee0 5aa1 	vfma.f32	s11, s1, s3
240161e8:	eef0 0a67 	vmov.f32	s1, s15
240161ec:	eee8 0a81 	vfma.f32	s1, s17, s2
240161f0:	eeb0 1a60 	vmov.f32	s2, s1
240161f4:	eea5 1a24 	vfma.f32	s2, s10, s9
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240161f8:	eeb0 5a41 	vmov.f32	s10, s2
240161fc:	eea3 5aa1 	vfma.f32	s10, s7, s3
    if (tempy3denom < 0.000001f)
24016200:	ee03 1a90 	vmov	s7, r1
24016204:	eef4 5ae3 	vcmpe.f32	s11, s7
24016208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401620c:	f100 8140 	bmi.w	24016490 <tDiodeFilter_tickEfficient+0x5a4>
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24016210:	ee75 5aa9 	vadd.f32	s11, s11, s19
    {
        tempy3denom = 0.000001f;
    }

    y3 = y3 / tempy3denom;
24016214:	ee85 8a25 	vdiv.f32	s16, s10, s11

    if (t1 < 0.000001f)
24016218:	f243 71bd 	movw	r1, #14269	; 0x37bd
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
    f->s1 = 1000.0f * fast_tanh(f->s1 * 0.001f);
    f->s2 = 1000.0f * fast_tanh(f->s2 * 0.001f);
    f->s3 = 1000.0f * fast_tanh(f->s3 * 0.001f);
    
    f->zi = in;
2401621c:	ed83 0a07 	vstr	s0, [r3, #28]
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
24016220:	f241 226f 	movw	r2, #4719	; 0x126f
24016224:	f2c3 5186 	movt	r1, #13702	; 0x3586
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016228:	2000      	movs	r0, #0
2401622a:	f6c3 2283 	movt	r2, #14979	; 0x3a83
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401622e:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
24016232:	ee05 1a10 	vmov	s10, r1
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016236:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401623a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401623e:	f2c4 5e44 	movt	lr, #17732	; 0x4544
24016242:	fec1 1a85 	vmaxnm.f32	s3, s3, s10
24016246:	fec4 4a85 	vmaxnm.f32	s9, s9, s10
2401624a:	fe82 5a05 	vmaxnm.f32	s10, s4, s10
2401624e:	eeb0 2a67 	vmov.f32	s4, s15
24016252:	ee71 5a81 	vadd.f32	s11, s3, s2
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016256:	f2c4 30bd 	movt	r0, #17341	; 0x43bd
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401625a:	ee74 3a81 	vadd.f32	s7, s9, s2
2401625e:	f2c4 6187 	movt	r1, #18055	; 0x4687
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
24016262:	f44f 4c22 	mov.w	ip, #41472	; 0xa200
24016266:	ee09 ea90 	vmov	s19, lr
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401626a:	ee75 5a83 	vadd.f32	s11, s11, s6
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401626e:	ee73 3aa1 	vadd.f32	s7, s7, s3
24016272:	f2c4 7c73 	movt	ip, #18291	; 0x4773
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24016276:	ee95 2a88 	vfnms.f32	s4, s11, s16
    Lfloat xx = (in - f->r*y3);
2401627a:	ee66 6a88 	vmul.f32	s13, s13, s16
2401627e:	ee70 0a66 	vsub.f32	s1, s0, s13
24016282:	eeb0 0a47 	vmov.f32	s0, s14
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24016286:	eec2 5a21 	vdiv.f32	s11, s4, s3
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401628a:	eea1 0a88 	vfma.f32	s0, s3, s16
2401628e:	ee93 0aa5 	vfnms.f32	s0, s7, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24016292:	ee75 3a01 	vadd.f32	s7, s10, s2
24016296:	ee73 3aa4 	vadd.f32	s7, s7, s9
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401629a:	ee80 2a24 	vdiv.f32	s4, s0, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401629e:	eeb0 0a44 	vmov.f32	s0, s8
240162a2:	eea4 0aa5 	vfma.f32	s0, s9, s11
240162a6:	ee93 0a82 	vfnms.f32	s0, s7, s4
240162aa:	eec0 3a05 	vdiv.f32	s7, s0, s10
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240162ae:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240162b2:	ee72 3a63 	vsub.f32	s7, s4, s7
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240162b6:	ee35 2ac2 	vsub.f32	s4, s11, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240162ba:	ee78 5a65 	vsub.f32	s11, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240162be:	ee23 5a85 	vmul.f32	s10, s7, s10
240162c2:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240162c6:	ee65 5aa1 	vmul.f32	s11, s11, s3
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240162ca:	eef0 1a45 	vmov.f32	s3, s10
240162ce:	ee92 5a24 	vfnms.f32	s10, s4, s9
240162d2:	eee2 1aa0 	vfma.f32	s3, s5, s1
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
240162d6:	ee02 1a90 	vmov	s5, r1
240162da:	eef0 0a65 	vmov.f32	s1, s11
240162de:	f64d 1127 	movw	r1, #55591	; 0xd927
240162e2:	eee3 5a08 	vfma.f32	s11, s6, s16
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
240162e6:	eeb3 8a0c 	vmov.f32	s16, #60	; 0x41e00000  28.0
240162ea:	f6c3 6128 	movt	r1, #15912	; 0x3e28
240162ee:	eee2 0a64 	vfms.f32	s1, s4, s9
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
240162f2:	ee04 2a90 	vmov	s9, r2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240162f6:	eea5 4a23 	vfma.f32	s8, s10, s7
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
240162fa:	ee02 0a10 	vmov	s4, r0
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240162fe:	eea1 6aa3 	vfma.f32	s12, s3, s7
24016302:	f24f 72c0 	movw	r2, #63424	; 0xf7c0
24016306:	eeb0 9a62 	vmov.f32	s18, s5
2401630a:	f247 5086 	movw	r0, #30086	; 0x7586
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401630e:	eee5 7ae3 	vfms.f32	s15, s11, s7
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
24016312:	ee05 ca90 	vmov	s11, ip
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016316:	f6c4 0203 	movt	r2, #18435	; 0x4803
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
2401631a:	f04f 0c00 	mov.w	ip, #0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401631e:	eea0 7aa3 	vfma.f32	s14, s1, s7
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
24016322:	f6c3 4021 	movt	r0, #15393	; 0x3c21
    f->s1 = 1000.0f * fast_tanh(f->s1 * 0.001f);
24016326:	ee24 4a24 	vmul.f32	s8, s8, s9
2401632a:	ee03 2a10 	vmov	s6, r2
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
2401632e:	ee26 6a24 	vmul.f32	s12, s12, s9
24016332:	f2c4 4c7a 	movt	ip, #17530	; 0x447a
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
24016336:	eeb0 aa65 	vmov.f32	s20, s11
2401633a:	ee08 0a90 	vmov	s17, r0
    f->s3 = 1000.0f * fast_tanh(f->s3 * 0.001f);
2401633e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    i = 0x5f3759df - (i>>1); // gives initial guess y0
24016342:	f645 12df 	movw	r2, #23007	; 0x59df
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24016346:	ee26 5aa6 	vmul.f32	s10, s13, s13
    f->s2 = 1000.0f * fast_tanh(f->s2 * 0.001f);
2401634a:	ee67 3a24 	vmul.f32	s7, s14, s9
    i = 0x5f3759df - (i>>1); // gives initial guess y0
2401634e:	f6c5 7237 	movt	r2, #24375	; 0x5f37
  Lfloat x2 = x * x;
24016352:	ee66 4a06 	vmul.f32	s9, s12, s12
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24016356:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401635a:	eef0 1a43 	vmov.f32	s3, s6
2401635e:	eee4 9a88 	vfma.f32	s19, s9, s16
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016362:	ee74 0a82 	vadd.f32	s1, s9, s4
24016366:	eea4 9aa0 	vfma.f32	s18, s9, s1
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
2401636a:	ee00 ca90 	vmov	s1, ip
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401636e:	eea4 aaa9 	vfma.f32	s20, s9, s19
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016372:	eef0 9a43 	vmov.f32	s19, s6
24016376:	eee4 9a89 	vfma.f32	s19, s9, s18
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401637a:	eeb0 9a43 	vmov.f32	s18, s6
2401637e:	eea4 9a8a 	vfma.f32	s18, s9, s20
  Lfloat x2 = x * x;
24016382:	ee23 aaa3 	vmul.f32	s20, s7, s7
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016386:	ee26 6a29 	vmul.f32	s12, s12, s19
  Lfloat x2 = x * x;
2401638a:	ee67 9aa7 	vmul.f32	s19, s15, s15
  return a / b;
2401638e:	eec6 4a09 	vdiv.f32	s9, s12, s18
  Lfloat x2 = x * x;
24016392:	ee24 9a04 	vmul.f32	s18, s8, s8
24016396:	ee24 6aa0 	vmul.f32	s12, s9, s1
2401639a:	ee04 1a90 	vmov	s9, r1
2401639e:	eee5 4a28 	vfma.f32	s9, s10, s17
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240163a2:	ee26 5a85 	vmul.f32	s10, s13, s10
240163a6:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
    Lfloat den = InvSqrt(1.0f + a * a);
240163aa:	eeb0 6a41 	vmov.f32	s12, s2
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
240163ae:	eeb0 1a43 	vmov.f32	s2, s6
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240163b2:	eee5 6a24 	vfma.f32	s13, s10, s9
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
240163b6:	ee05 ea10 	vmov	s10, lr
240163ba:	eea9 5a88 	vfma.f32	s10, s19, s16
    Lfloat den = InvSqrt(1.0f + a * a);
240163be:	eea6 6aa6 	vfma.f32	s12, s13, s13
    x = *(Lfloat*)&i; // convert bits back to float
240163c2:	ee16 1a10 	vmov	r1, s12
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240163c6:	ee26 7a07 	vmul.f32	s14, s12, s14
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
240163ca:	eeb0 6a62 	vmov.f32	s12, s5
    x = *(Lfloat*)&i; // convert bits back to float
240163ce:	eba2 0261 	sub.w	r2, r2, r1, asr #1
240163d2:	ee04 2a90 	vmov	s9, r2
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240163d6:	ee27 7a24 	vmul.f32	s14, s14, s9
    return a * den;
240163da:	ee66 6aa4 	vmul.f32	s13, s13, s9
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240163de:	eea4 0ac7 	vfms.f32	s0, s9, s14
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
240163e2:	ee07 ea10 	vmov	s14, lr
240163e6:	ee04 ea90 	vmov	s9, lr
240163ea:	eea9 7a08 	vfma.f32	s14, s18, s16
240163ee:	eeea 4a08 	vfma.f32	s9, s20, s16
    return fast_tanh5(y3*f->r);
}
240163f2:	ee26 0a80 	vmul.f32	s0, s13, s0
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
240163f6:	ee7a 6a02 	vadd.f32	s13, s20, s4
240163fa:	eeaa 6a26 	vfma.f32	s12, s20, s13
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
240163fe:	eef0 6a65 	vmov.f32	s13, s11
24016402:	eee9 6a07 	vfma.f32	s13, s18, s14
24016406:	eeb0 7a65 	vmov.f32	s14, s11
2401640a:	eee9 5a85 	vfma.f32	s11, s19, s10
2401640e:	eeb0 5a43 	vmov.f32	s10, s6
24016412:	eeaa 7a24 	vfma.f32	s14, s20, s9
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016416:	eeaa 1a06 	vfma.f32	s2, s20, s12
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
2401641a:	eea9 5a26 	vfma.f32	s10, s18, s13
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
2401641e:	ee79 6a82 	vadd.f32	s13, s19, s4
24016422:	ee39 6a02 	vadd.f32	s12, s18, s4
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
24016426:	eef0 4a43 	vmov.f32	s9, s6
2401642a:	eeea 1a07 	vfma.f32	s3, s20, s14
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
2401642e:	eeb0 7a62 	vmov.f32	s14, s5
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
24016432:	eee9 4aa5 	vfma.f32	s9, s19, s11
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
24016436:	eef0 5a43 	vmov.f32	s11, s6
2401643a:	eea9 7aa6 	vfma.f32	s14, s19, s13
2401643e:	eef0 6a62 	vmov.f32	s13, s5
24016442:	ee63 3a81 	vmul.f32	s7, s7, s2
24016446:	eee9 6a06 	vfma.f32	s13, s18, s12
  return a / b;
2401644a:	ee83 6aa1 	vdiv.f32	s12, s7, s3
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
2401644e:	eee9 5a87 	vfma.f32	s11, s19, s14
24016452:	eeb0 7a43 	vmov.f32	s14, s6
24016456:	eea9 7a26 	vfma.f32	s14, s18, s13
2401645a:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401645e:	ee24 4a07 	vmul.f32	s8, s8, s14
  return a / b;
24016462:	ee87 7aa4 	vdiv.f32	s14, s15, s9
24016466:	eec4 7a05 	vdiv.f32	s15, s8, s10
    f->s2 = 1000.0f * fast_tanh(f->s2 * 0.001f);
2401646a:	ee66 6a20 	vmul.f32	s13, s12, s1
2401646e:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
    f->s3 = 1000.0f * fast_tanh(f->s3 * 0.001f);
24016472:	ee27 7a20 	vmul.f32	s14, s14, s1
24016476:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s1 = 1000.0f * fast_tanh(f->s1 * 0.001f);
2401647a:	ee67 7aa0 	vmul.f32	s15, s15, s1
2401647e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
24016482:	ecbd 8b06 	vpop	{d8-d10}
24016486:	f85d fb04 	ldr.w	pc, [sp], #4
    Lfloat output = 1.0f;
2401648a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401648e:	e566      	b.n	24015f5e <tDiodeFilter_tickEfficient+0x72>
        tempy3denom = 0.000001f;
24016490:	f243 72bd 	movw	r2, #14269	; 0x37bd
24016494:	f2c3 5286 	movt	r2, #13702	; 0x3586
24016498:	ee05 2a90 	vmov	s11, r2
2401649c:	e6ba      	b.n	24016214 <tDiodeFilter_tickEfficient+0x328>
2401649e:	bf00      	nop

240164a0 <tDiodeFilter_setFreqFast>:
    if (val < min)
240164a0:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    f->f = tanf(TWO_PI * f->cutoff * f->invSampleRate);
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
240164a4:	6800      	ldr	r0, [r0, #0]
240164a6:	f6cb 7390 	movt	r3, #49040	; 0xbf90
240164aa:	ee07 3a90 	vmov	s15, r3
240164ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
240164b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240164b6:	d45e      	bmi.n	24016576 <tDiodeFilter_setFreqFast+0xd6>
    else if (val > max)
240164b8:	f64d 63b8 	movw	r3, #57016	; 0xdeb8
240164bc:	f2c4 3300 	movt	r3, #17152	; 0x4300
240164c0:	ee07 3a90 	vmov	s15, r3
240164c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240164c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240164cc:	dc3e      	bgt.n	2401654c <tDiodeFilter_setFreqFast+0xac>
    cutoff = LEAF_clip(10.0f, cutoff+11.13f, 140.0f);//compensate for tuning error
240164ce:	f241 427b 	movw	r2, #5243	; 0x147b
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240164d2:	f648 138d 	movw	r3, #35213	; 0x898d
240164d6:	f640 7cfe 	movw	ip, #4094	; 0xffe
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
240164da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    cutoff = LEAF_clip(10.0f, cutoff+11.13f, 140.0f);//compensate for tuning error
240164de:	f2c4 1232 	movt	r2, #16690	; 0x4132
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240164e2:	f2c4 13f4 	movt	r3, #16884	; 0x41f4
    cutoff = LEAF_clip(10.0f, cutoff+11.13f, 140.0f);//compensate for tuning error
240164e6:	ee06 2a90 	vmov	s13, r2
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240164ea:	ee07 3a90 	vmov	s15, r3
    cutoff = LEAF_clip(10.0f, cutoff+11.13f, 140.0f);//compensate for tuning error
240164ee:	ee30 0a26 	vadd.f32	s0, s0, s13
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240164f2:	ee60 7a27 	vmul.f32	s15, s0, s15
    int32_t intVer = (int32_t)cutoff;
240164f6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
240164fa:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
240164fe:	ee16 1a90 	vmov	r1, s13
24016502:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
24016506:	4561      	cmp	r1, ip
24016508:	bfa8      	it	ge
2401650a:	4661      	movge	r1, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401650c:	ee06 1a90 	vmov	s13, r1
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
24016510:	0089      	lsls	r1, r1, #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24016512:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
24016516:	f101 0c04 	add.w	ip, r1, #4
2401651a:	ee37 7a26 	vadd.f32	s14, s14, s13
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401651e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
24016522:	6c43      	ldr	r3, [r0, #68]	; 0x44
	f->cutoffMIDI = cutoff;
24016524:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
24016528:	eb03 020c 	add.w	r2, r3, ip
2401652c:	440b      	add	r3, r1
2401652e:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
24016532:	edd2 5a00 	vldr	s11, [r2]
24016536:	ed93 6a00 	vldr	s12, [r3]
2401653a:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401653e:	eee6 7a07 	vfma.f32	s15, s12, s14
24016542:	ee66 7aa7 	vmul.f32	s15, s13, s15
24016546:	edc0 7a02 	vstr	s15, [r0, #8]
}
2401654a:	4770      	bx	lr
2401654c:	f246 7320 	movw	r3, #26400	; 0x6720
        return max;
24016550:	2200      	movs	r2, #0
24016552:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
24016556:	4619      	mov	r1, r3
24016558:	f2c4 320c 	movt	r2, #17164	; 0x430c
2401655c:	f2c4 3339 	movt	r3, #17209	; 0x4339
24016560:	f2cc 3138 	movt	r1, #49976	; 0xc338
24016564:	ee00 2a10 	vmov	s0, r2
24016568:	ee07 3a90 	vmov	s15, r3
2401656c:	ee07 1a10 	vmov	s14, r1
24016570:	f643 71f8 	movw	r1, #16376	; 0x3ff8
24016574:	e7d5      	b.n	24016522 <tDiodeFilter_setFreqFast+0x82>
24016576:	f44f 4370 	mov.w	r3, #61440	; 0xf000
2401657a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
        return min;
2401657e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
24016582:	f44f 6c99 	mov.w	ip, #1224	; 0x4c8
24016586:	f6c3 732b 	movt	r3, #16171	; 0x3f2b
2401658a:	f6c3 62a8 	movt	r2, #16040	; 0x3ea8
2401658e:	f240 41c4 	movw	r1, #1220	; 0x4c4
24016592:	ee07 3a90 	vmov	s15, r3
24016596:	ee07 2a10 	vmov	s14, r2
2401659a:	e7c2      	b.n	24016522 <tDiodeFilter_setFreqFast+0x82>

2401659c <tDiodeFilter_setQ>:
    if (val < min)
2401659c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
240165a0:	6803      	ldr	r3, [r0, #0]
240165a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
240165a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240165aa:	d410      	bmi.n	240165ce <tDiodeFilter_setQ+0x32>
    else if (val > max)
240165ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
240165b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
240165b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240165b8:	dc04      	bgt.n	240165c4 <tDiodeFilter_setQ+0x28>
    //f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 20.0f);
    f->r = LEAF_clip(0.5f, resonance*2.0f, 20.0f);
240165ba:	ee30 0a00 	vadd.f32	s0, s0, s0
240165be:	ed83 0a03 	vstr	s0, [r3, #12]
}
240165c2:	4770      	bx	lr
        return max;
240165c4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
    f->r = LEAF_clip(0.5f, resonance*2.0f, 20.0f);
240165c8:	ed83 0a03 	vstr	s0, [r3, #12]
}
240165cc:	4770      	bx	lr
        return min;
240165ce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    f->r = LEAF_clip(0.5f, resonance*2.0f, 20.0f);
240165d2:	ed83 0a03 	vstr	s0, [r3, #12]
}
240165d6:	4770      	bx	lr

240165d8 <tDiodeFilter_setSampleRate>:
void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
    f->sampRatio = 48000.0f / sr;
240165d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f->invSampleRate = 1.0f/sr;
240165dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sr > 80000)
240165e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240165e4:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampRatio = 48000.0f / sr;
240165e8:	f2c4 713b 	movt	r1, #18235	; 0x473b
    f->invSampleRate = 1.0f/sr;
240165ec:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sr > 80000)
240165f0:	f2c4 729c 	movt	r2, #18332	; 0x479c
    f->sampRatio = 48000.0f / sr;
240165f4:	ee07 1a10 	vmov	s14, r1
    	f->table = __filterTanhTable_48000;
240165f8:	f64f 1194 	movw	r1, #63892	; 0xf994
    if (sr > 80000)
240165fc:	ee07 2a90 	vmov	s15, r2
    	f->table = __filterTanhTable_48000;
24016600:	f2c2 4302 	movt	r3, #9218	; 0x2402
24016604:	f2c2 4101 	movt	r1, #9217	; 0x2401
    _tDiodeFilter* f = *vf;
24016608:	6802      	ldr	r2, [r0, #0]
    f->sampRatio = 48000.0f / sr;
2401660a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    	f->table = __filterTanhTable_48000;
2401660e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24016612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016616:	bfd8      	it	le
24016618:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f/sr;
2401661a:	ed82 6a0f 	vstr	s12, [r2, #60]	; 0x3c
    f->sampRatio = 48000.0f / sr;
2401661e:	6453      	str	r3, [r2, #68]	; 0x44
24016620:	edc2 6a10 	vstr	s13, [r2, #64]	; 0x40
    }
}
24016624:	4770      	bx	lr
24016626:	bf00      	nop

24016628 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24016628:	b570      	push	{r4, r5, r6, lr}
2401662a:	ed2d 8b04 	vpush	{d8-d9}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
2401662e:	698d      	ldr	r5, [r1, #24]
{
24016630:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24016632:	2048      	movs	r0, #72	; 0x48
{
24016634:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24016638:	4629      	mov	r1, r5
{
2401663a:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401663e:	f000 fc8f 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->sampleRatio = 48000.0f / leaf->sampleRate;
24016642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24016646:	6030      	str	r0, [r6, #0]
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24016648:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    f->mempool = m;
2401664c:	6005      	str	r5, [r0, #0]
    f->sampleRatio = 48000.0f / leaf->sampleRate;
2401664e:	f2c4 733b 	movt	r3, #18235	; 0x473b
    LEAF* leaf = f->mempool->leaf;
24016652:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24016654:	4604      	mov	r4, r0
    f->sampleRatio = 48000.0f / leaf->sampleRate;
24016656:	ee07 3a90 	vmov	s15, r3
2401665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f->invSampleRate = leaf->invSampleRate;
2401665e:	edd5 9a01 	vldr	s19, [r5, #4]
24016662:	edc0 9a02 	vstr	s19, [r0, #8]
    f->sampleRatio = 48000.0f / leaf->sampleRate;
24016666:	edd5 6a00 	vldr	s13, [r5]
    f->cutoff = cutoff;
2401666a:	ed80 8a01 	vstr	s16, [r0, #4]
    f->sampleRatio = 48000.0f / leaf->sampleRate;
2401666e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
24016672:	ed80 7a03 	vstr	s14, [r0, #12]
24016676:	dd5f      	ble.n	24016738 <tLadderFilter_init+0x110>
24016678:	f647 63d2 	movw	r3, #32466	; 0x7ed2
2401667c:	f6c3 53fa 	movt	r3, #15866	; 0x3dfa
24016680:	ee00 3a10 	vmov	s0, r3
24016684:	ee28 0a00 	vmul.f32	s0, s16, s0
24016688:	f006 f8a6 	bl	2401c7d8 <logf>
2401668c:	f647 73ac 	movw	r3, #32684	; 0x7fac
24016690:	f2c4 138a 	movt	r3, #16778	; 0x418a
24016694:	ee07 3a90 	vmov	s15, r3
24016698:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->cutoffMIDI = ftom(cutoff);
    f->oversampling = 1;
    f->invOS = 1.0f;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
2401669c:	f640 73db 	movw	r3, #4059	; 0xfdb
    f->cutoffMIDI = ftom(cutoff);
240166a0:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->invOS = 1.0f;
240166a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    f->oversampling = 1;
240166a8:	2201      	movs	r2, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240166aa:	f2c4 0349 	movt	r3, #16457	; 0x4049
    f->oversampling = 1;
240166ae:	6122      	str	r2, [r4, #16]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240166b0:	ee07 3a90 	vmov	s15, r3
    f->invOS = 1.0f;
240166b4:	ed84 9a05 	vstr	s18, [r4, #20]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240166b8:	ee28 0a27 	vmul.f32	s0, s16, s15
240166bc:	ee20 0a29 	vmul.f32	s0, s0, s19
240166c0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240166c4:	f006 fd04 	bl	2401d0d0 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
240166c8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240166cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
    f->s = 0.1f;
240166d0:	f64c 41cd 	movw	r1, #52429	; 0xcccd
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
240166d4:	f24d 720a 	movw	r2, #55050	; 0xd70a
    if (leaf->sampleRate > 80000)
240166d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f->a = 2.0f;
240166dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    f->s = 0.1f;
240166e0:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
    f->c2 = 2.0f * f->c;
240166e4:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->b[0] = 0.04f;
240166e8:	f6c3 5223 	movt	r2, #15651	; 0x3d23
    f->fb = (resonance * 8.0f);
240166ec:	ee68 8aa6 	vmul.f32	s17, s17, s13
    if (leaf->sampleRate > 80000)
240166f0:	f2c4 739c 	movt	r3, #18332	; 0x479c
    f->b[0] = 0.04f;
240166f4:	6322      	str	r2, [r4, #48]	; 0x30
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240166f6:	f64f 1294 	movw	r2, #63892	; 0xf994
    f->c2 = 2.0f * f->c;
240166fa:	edc4 7a08 	vstr	s15, [r4, #32]
    if (leaf->sampleRate > 80000)
240166fe:	ee07 3a90 	vmov	s15, r3
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24016702:	ed84 0a06 	vstr	s0, [r4, #24]
    	f->table = __filterTanhTable_48000;
24016706:	f643 1394 	movw	r3, #14740	; 0x3994
    f->s = 0.1f;
2401670a:	62a1      	str	r1, [r4, #40]	; 0x28
    	f->table = __filterTanhTable_48000;
2401670c:	f2c2 4201 	movt	r2, #9217	; 0x2401
    f->fb = (resonance * 8.0f);
24016710:	edc4 8a07 	vstr	s17, [r4, #28]
    	f->table = __filterTanhTable_48000;
24016714:	f2c2 4302 	movt	r3, #9218	; 0x2402
    f->a = 2.0f;
24016718:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->d = 1.0f;
2401671c:	ed84 9a0b 	vstr	s18, [r4, #44]	; 0x2c
    if (leaf->sampleRate > 80000)
24016720:	ed95 7a00 	vldr	s14, [r5]
    	f->table = __filterTanhTable_48000;
24016724:	eeb4 7ae7 	vcmpe.f32	s14, s15
24016728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401672c:	bfd8      	it	le
2401672e:	4613      	movle	r3, r2
24016730:	6423      	str	r3, [r4, #64]	; 0x40
}
24016732:	ecbd 8b04 	vpop	{d8-d9}
24016736:	bd70      	pop	{r4, r5, r6, pc}
24016738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2401673c:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
24016740:	ee00 3a10 	vmov	s0, r3
24016744:	e7aa      	b.n	2401669c <tLadderFilter_init+0x74>
24016746:	bf00      	nop

24016748 <tLadderFilter_tick>:
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
24016748:	ed2d 8b10 	vpush	{d8-d15}
    _tLadderFilter* f = *vf;
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
2401674c:	f24c 238f 	movw	r3, #49807	; 0xc28f
    _tLadderFilter* f = *vf;
24016750:	6802      	ldr	r2, [r0, #0]
    in += 0.015f;
24016752:	f6c3 4375 	movt	r3, #15477	; 0x3c75
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
24016756:	6911      	ldr	r1, [r2, #16]
    in += 0.015f;
24016758:	ee07 3a90 	vmov	s15, r3
    for (int i = 0; i < f->oversampling; i++) {
2401675c:	2900      	cmp	r1, #0
    in += 0.015f;
2401675e:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24016762:	f340 8148 	ble.w	240169f6 <tLadderFilter_tick+0x2ae>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24016766:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat den0 =1.0f / (1.0f + f->c*t0);
2401676a:	edd2 5a06 	vldr	s11, [r2, #24]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401676e:	edd2 2a0b 	vldr	s5, [r2, #44]	; 0x2c
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24016772:	f24d 700a 	movw	r0, #55050	; 0xd70a
        Lfloat z1 = f->c*t1 * den1;
        Lfloat z2 = f->c*t2 * den2;
        Lfloat z3 = f->c*t3 * den3;
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
24016776:	ee25 8aa5 	vmul.f32	s16, s11, s11
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401677a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
2401677e:	ee32 3a86 	vadd.f32	s6, s5, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24016782:	f6c3 4023 	movt	r0, #15395	; 0x3c23
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
24016786:	ee25 aa80 	vmul.f32	s20, s11, s0
2401678a:	edd2 3a0c 	vldr	s7, [r2, #48]	; 0x30
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401678e:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24016792:	edd2 1a09 	vldr	s3, [r2, #36]	; 0x24
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
24016796:	ee25 9a88 	vmul.f32	s18, s11, s16
2401679a:	ed92 4a0d 	vldr	s8, [r2, #52]	; 0x34
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2401679e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240167a2:	edd2 4a0e 	vldr	s9, [r2, #56]	; 0x38
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240167a6:	ee23 3a27 	vmul.f32	s6, s6, s15
240167aa:	ed92 5a0f 	vldr	s10, [r2, #60]	; 0x3c
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240167ae:	ed92 1a07 	vldr	s2, [r2, #28]
    for (int i = 0; i < f->oversampling; i++) {
240167b2:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
240167b4:	ed92 2a08 	vldr	s4, [r2, #32]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240167b8:	ee00 0a90 	vmov	s1, r0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240167bc:	ee71 aaa3 	vadd.f32	s21, s3, s7
    for (int i = 0; i < f->oversampling; i++) {
240167c0:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
240167c2:	ee71 6a84 	vadd.f32	s13, s3, s8
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240167c6:	ee71 7aa4 	vadd.f32	s15, s3, s9
    for (int i = 0; i < f->oversampling; i++) {
240167ca:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240167cc:	ee6a aaaa 	vmul.f32	s21, s21, s21
240167d0:	ee66 6aa6 	vmul.f32	s13, s13, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
240167d4:	ee31 7a85 	vadd.f32	s14, s3, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240167d8:	ee23 ca2a 	vmul.f32	s24, s6, s21
240167dc:	ee72 aaaa 	vadd.f32	s21, s5, s21
240167e0:	ee26 ba83 	vmul.f32	s22, s13, s6
240167e4:	ee72 6aa6 	vadd.f32	s13, s5, s13
240167e8:	eecc da2a 	vdiv.f32	s27, s24, s21
240167ec:	eecb aa26 	vdiv.f32	s21, s22, s13
240167f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
240167f4:	ee27 7a07 	vmul.f32	s14, s14, s14
240167f8:	ee33 ea8a 	vadd.f32	s28, s7, s20
240167fc:	ee67 ba83 	vmul.f32	s23, s15, s6
24016800:	ee72 7aa7 	vadd.f32	s15, s5, s15
24016804:	ee23 ca07 	vmul.f32	s24, s6, s14
24016808:	ee76 da6d 	vsub.f32	s27, s12, s27
2401680c:	ee8b baa7 	vdiv.f32	s22, s23, s15
24016810:	ee32 7a87 	vadd.f32	s14, s5, s14
24016814:	ee76 7a6a 	vsub.f32	s15, s12, s21
24016818:	ee2e ea09 	vmul.f32	s28, s28, s18
2401681c:	eecc ba07 	vdiv.f32	s23, s24, s14
        Lfloat den0 =1.0f / (1.0f + f->c*t0);
24016820:	ee25 7aad 	vmul.f32	s14, s11, s27
        Lfloat den1 =1.0f / (1.0f + f->c*t1);
24016824:	ee25 caa7 	vmul.f32	s24, s11, s15
24016828:	ee2e ea2d 	vmul.f32	s28, s28, s27
        Lfloat den0 =1.0f / (1.0f + f->c*t0);
2401682c:	ee77 ea06 	vadd.f32	s29, s14, s12
        Lfloat den1 =1.0f / (1.0f + f->c*t1);
24016830:	ee3c fa06 	vadd.f32	s30, s24, s12
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24016834:	ee36 ba4b 	vsub.f32	s22, s12, s22
        Lfloat den0 =1.0f / (1.0f + f->c*t0);
24016838:	eec6 6a2e 	vdiv.f32	s13, s12, s29
        Lfloat den1 =1.0f / (1.0f + f->c*t1);
2401683c:	eec6 ea0f 	vdiv.f32	s29, s12, s30
24016840:	ee27 7a0c 	vmul.f32	s14, s14, s24
        Lfloat den2 =1.0f / (1.0f + f->c*t2);
24016844:	ee65 ca8b 	vmul.f32	s25, s11, s22
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24016848:	ee76 ba6b 	vsub.f32	s23, s12, s23
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401684c:	ee21 7a07 	vmul.f32	s14, s2, s14
        Lfloat den2 =1.0f / (1.0f + f->c*t2);
24016850:	ee3c da86 	vadd.f32	s26, s25, s12
        Lfloat den3 =1.0f / (1.0f + f->c*t3);
24016854:	ee65 aaab 	vmul.f32	s21, s11, s23
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24016858:	ee27 7a2c 	vmul.f32	s14, s14, s25
2401685c:	ee2e ea26 	vmul.f32	s28, s28, s13
        Lfloat den2 =1.0f / (1.0f + f->c*t2);
24016860:	ee86 ca0d 	vdiv.f32	s24, s12, s26
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24016864:	ee27 7a2a 	vmul.f32	s14, s14, s21
        Lfloat den3 =1.0f / (1.0f + f->c*t3);
24016868:	ee3a fa86 	vadd.f32	s30, s21, s12
2401686c:	eea4 ea08 	vfma.f32	s28, s8, s16
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24016870:	ee67 aa26 	vmul.f32	s21, s14, s13
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24016874:	ee66 6aad 	vmul.f32	s13, s13, s27
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24016878:	ee6e daa7 	vmul.f32	s27, s29, s15
2401687c:	ee6b 7a27 	vmul.f32	s15, s22, s15
        Lfloat den3 =1.0f / (1.0f + f->c*t3);
24016880:	ee86 da0f 	vdiv.f32	s26, s12, s30
        Lfloat estimate =
24016884:	ee67 7aae 	vmul.f32	s15, s15, s29
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24016888:	ee6a aaae 	vmul.f32	s21, s21, s29
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
2401688c:	ee2c ba0b 	vmul.f32	s22, s24, s22
24016890:	ee67 7a8e 	vmul.f32	s15, s15, s28
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24016894:	ee6a aa8c 	vmul.f32	s21, s21, s24
24016898:	eeb0 ea46 	vmov.f32	s28, s12
2401689c:	eee4 7aac 	vfma.f32	s15, s9, s25
240168a0:	eef0 ca45 	vmov.f32	s25, s10
240168a4:	ee21 7a0d 	vmul.f32	s14, s2, s26
240168a8:	eeec ca27 	vfma.f32	s25, s24, s15
240168ac:	eead ea2a 	vfma.f32	s28, s26, s21
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240168b0:	eef0 aa46 	vmov.f32	s21, s12
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240168b4:	eef0 7a69 	vmov.f32	s15, s19
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240168b8:	eeb0 ca60 	vmov.f32	s24, s1
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240168bc:	ee6d ba2b 	vmul.f32	s23, s26, s23
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240168c0:	eeec aa87 	vfma.f32	s21, s25, s14
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240168c4:	eeec 7a87 	vfma.f32	s15, s25, s14
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240168c8:	ee88 da8e 	vdiv.f32	s26, s17, s28
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240168cc:	eeaa caaa 	vfma.f32	s24, s21, s21
240168d0:	eef0 aa60 	vmov.f32	s21, s1
240168d4:	eee7 aaa7 	vfma.f32	s21, s15, s15
240168d8:	eeb1 7acc 	vsqrt.f32	s14, s24
240168dc:	eef1 7aea 	vsqrt.f32	s15, s21
    x = x - x2;
240168e0:	ee37 7a67 	vsub.f32	s14, s14, s15
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240168e4:	eef0 7a40 	vmov.f32	s15, s0
240168e8:	eeed 7a47 	vfms.f32	s15, s26, s14
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
240168ec:	eeb0 7a63 	vmov.f32	s14, s7
240168f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
240168f4:	ee66 6a87 	vmul.f32	s13, s13, s14
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240168f8:	eeb0 7a44 	vmov.f32	s14, s8
        f->b[0] += f->c2 * (xx - y0);
240168fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24016900:	eea5 7aa6 	vfma.f32	s14, s11, s13
        f->b[0] += f->c2 * (xx - y0);
24016904:	eee2 3a27 	vfma.f32	s7, s4, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24016908:	eef0 7a64 	vmov.f32	s15, s9
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
2401690c:	ee2d 7a87 	vmul.f32	s14, s27, s14
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24016910:	eee5 7a87 	vfma.f32	s15, s11, s14
        f->b[1] += f->c2 * (y0 - y1);
24016914:	ee76 6ac7 	vsub.f32	s13, s13, s14
24016918:	eea2 4a26 	vfma.f32	s8, s4, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401691c:	eef0 6a45 	vmov.f32	s13, s10
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24016920:	ee6b 7a27 	vmul.f32	s15, s22, s15
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24016924:	eee5 6aa7 	vfma.f32	s13, s11, s15
        f->b[2] += f->c2 * (y1 - y2);
24016928:	ee37 7a67 	vsub.f32	s14, s14, s15
2401692c:	eee2 4a07 	vfma.f32	s9, s4, s14
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24016930:	ee2b 7aa6 	vmul.f32	s14, s23, s13
        f->b[3] += f->c2 * (y2 - y3);
24016934:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016938:	eea2 5a27 	vfma.f32	s10, s4, s15
    for (int i = 0; i < f->oversampling; i++) {
2401693c:	f47f af3e 	bne.w	240167bc <tLadderFilter_tick+0x74>
24016940:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
24016944:	ed82 4a0d 	vstr	s8, [r2, #52]	; 0x34
24016948:	edc2 4a0e 	vstr	s9, [r2, #56]	; 0x38
2401694c:	ed82 5a0f 	vstr	s10, [r2, #60]	; 0x3c
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24016950:	f24d 730a 	movw	r3, #55050	; 0xd70a
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24016954:	eeb1 4a00 	vmov.f32	s8, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24016958:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401695c:	f247 5186 	movw	r1, #30086	; 0x7586
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24016960:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24016964:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24016968:	ee31 6a44 	vsub.f32	s12, s2, s8
2401696c:	f64d 1227 	movw	r2, #55591	; 0xd927
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24016970:	ee07 3a90 	vmov	s15, r3
24016974:	f6c3 4121 	movt	r1, #15393	; 0x3c21
24016978:	f6c3 6228 	movt	r2, #15912	; 0x3e28
    i = 0x5f3759df - (i>>1); // gives initial guess y0
2401697c:	f645 13df 	movw	r3, #23007	; 0x59df
24016980:	eef0 3a67 	vmov.f32	s7, s15
24016984:	ee04 1a90 	vmov	s9, r1
24016988:	eee6 7a06 	vfma.f32	s15, s12, s12
2401698c:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24016990:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
24016994:	eee1 3a01 	vfma.f32	s7, s2, s2
    return fast_tanh5(y3 * compensation);
}
24016998:	ecbd 8b10 	vpop	{d8-d15}
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401699c:	eeb1 5ae3 	vsqrt.f32	s10, s7
240169a0:	eef1 3ae7 	vsqrt.f32	s7, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240169a4:	eef0 7a65 	vmov.f32	s15, s11
    x = x - x2;
240169a8:	ee35 5a04 	vadd.f32	s10, s10, s8
240169ac:	ee35 5a63 	vsub.f32	s10, s10, s7
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240169b0:	eee5 7a26 	vfma.f32	s15, s10, s13
    return fast_tanh5(y3 * compensation);
240169b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240169b8:	ee07 2a10 	vmov	s14, r2
240169bc:	ee27 5aa7 	vmul.f32	s10, s15, s15
240169c0:	eea5 7a24 	vfma.f32	s14, s10, s9
240169c4:	ee27 5a85 	vmul.f32	s10, s15, s10
240169c8:	eee7 7a05 	vfma.f32	s15, s14, s10
    Lfloat den = InvSqrt(1.0f + a * a);
240169cc:	eeb0 7a65 	vmov.f32	s14, s11
240169d0:	eea7 7aa7 	vfma.f32	s14, s15, s15
    x = *(Lfloat*)&i; // convert bits back to float
240169d4:	ee17 2a10 	vmov	r2, s14
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240169d8:	ee67 6a26 	vmul.f32	s13, s14, s13
    x = *(Lfloat*)&i; // convert bits back to float
240169dc:	eba3 0362 	sub.w	r3, r3, r2, asr #1
240169e0:	ee07 3a10 	vmov	s14, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240169e4:	ee66 6a87 	vmul.f32	s13, s13, s14
    return a * den;
240169e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
240169ec:	eea7 0a66 	vfms.f32	s0, s14, s13
}
240169f0:	ee27 0a80 	vmul.f32	s0, s15, s0
240169f4:	4770      	bx	lr
    Lfloat y3 = 0.0f;
240169f6:	2300      	movs	r3, #0
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240169f8:	ed92 1a07 	vldr	s2, [r2, #28]
    Lfloat y3 = 0.0f;
240169fc:	ee07 3a10 	vmov	s14, r3
24016a00:	e7a6      	b.n	24016950 <tLadderFilter_tick+0x208>
24016a02:	bf00      	nop

24016a04 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    cutoff += 3.0f;
24016a04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24016a08:	f648 138d 	movw	r3, #35213	; 0x898d
24016a0c:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
24016a10:	6802      	ldr	r2, [r0, #0]
    cutoff *= 30.567164179104478f;
24016a12:	f2c4 13f4 	movt	r3, #16884	; 0x41f4
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff += 3.0f;
24016a1a:	ee30 0a27 	vadd.f32	s0, s0, s15
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a1e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    cutoff *= 30.567164179104478f;
24016a20:	ee07 3a10 	vmov	s14, r3
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a24:	edd2 5a03 	vldr	s11, [r2, #12]
    cutoff *= 30.567164179104478f;
24016a28:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->cutoffMIDI = cutoff;
24016a2c:	ed82 0a11 	vstr	s0, [r2, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
24016a30:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a34:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
24016a38:	ee17 3a90 	vmov	r3, s15
24016a3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24016a40:	4563      	cmp	r3, ip
24016a42:	bfa8      	it	ge
24016a44:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24016a46:	ee07 3a90 	vmov	s15, r3
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24016a4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a52:	edd3 4a01 	vldr	s9, [r3, #4]
24016a56:	ed93 5a00 	vldr	s10, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24016a5a:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a5e:	ee36 7a86 	vadd.f32	s14, s13, s12
24016a62:	ee67 7aa4 	vmul.f32	s15, s15, s9
24016a66:	eee5 7a07 	vfma.f32	s15, s10, s14
24016a6a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    f->c2 = 2.0f * f->c;
24016a6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
24016a72:	edc2 7a06 	vstr	s15, [r2, #24]
    f->c2 = 2.0f * f->c;
24016a76:	ed82 7a08 	vstr	s14, [r2, #32]
}
24016a7a:	4770      	bx	lr

24016a7c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
    _tLadderFilter* f = *vf;
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24016a7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24016a80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    _tLadderFilter* f = *vf;
24016a84:	6802      	ldr	r2, [r0, #0]
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24016a86:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
24016a8a:	fe80 0a47 	vminnm.f32	s0, s0, s14
24016a8e:	ee07 3a90 	vmov	s15, r3
24016a92:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24016a96:	ed82 0a07 	vstr	s0, [r2, #28]
}
24016a9a:	4770      	bx	lr

24016a9c <tLadderFilter_setSampleRate>:
void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    f->invSampleRate = 1.0f/sr;
24016aa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (sr > 80000)
24016aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24016aa8:	f64f 1194 	movw	r1, #63892	; 0xf994
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016aac:	f2c4 723b 	movt	r2, #18235	; 0x473b
    f->invSampleRate = 1.0f/sr;
24016ab0:	ee87 6a80 	vdiv.f32	s12, s15, s0
    if (sr > 80000)
24016ab4:	f2c4 739c 	movt	r3, #18332	; 0x479c
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016ab8:	ee07 2a10 	vmov	s14, r2
    _tLadderFilter* f = *vf;
24016abc:	6802      	ldr	r2, [r0, #0]
    if (sr > 80000)
24016abe:	ee07 3a90 	vmov	s15, r3
    	f->table = __filterTanhTable_48000;
24016ac2:	f2c2 4101 	movt	r1, #9217	; 0x2401
24016ac6:	f643 1394 	movw	r3, #14740	; 0x3994
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016aca:	eec7 6a00 	vdiv.f32	s13, s14, s0
    	f->table = __filterTanhTable_48000;
24016ace:	f2c2 4302 	movt	r3, #9218	; 0x2402
24016ad2:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016ad6:	edd2 7a05 	vldr	s15, [r2, #20]
    	f->table = __filterTanhTable_48000;
24016ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016ade:	bfd8      	it	le
24016ae0:	460b      	movle	r3, r1
    f->invSampleRate = 1.0f/sr;
24016ae2:	ed82 6a02 	vstr	s12, [r2, #8]
    f->sampleRatio = 48000.0f / sr * f->invOS;
24016ae6:	6413      	str	r3, [r2, #64]	; 0x40
24016ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
24016aec:	edc2 7a03 	vstr	s15, [r2, #12]
    }
}
24016af0:	4770      	bx	lr
24016af2:	bf00      	nop

24016af4 <tTiltFilter_init>:
}



void    tTiltFilter_init           (tTiltFilter* const vf, Lfloat cutoff, LEAF* const leaf)
{
24016af4:	b538      	push	{r3, r4, r5, lr}
24016af6:	ed2d 8b02 	vpush	{d8}
    tTiltFilter_initToPool(vf, cutoff, &leaf->mempool);
}

void    tTiltFilter_initToPool     (tTiltFilter* const vf, Lfloat cutoff, tMempool* const mp)
{
    _tMempool* m = *mp;
24016afa:	698c      	ldr	r4, [r1, #24]
{
24016afc:	4605      	mov	r5, r0
    _tTiltFilter* f = *vf = (_tTiltFilter*) mpool_alloc(sizeof(_tTiltFilter), m);
24016afe:	2028      	movs	r0, #40	; 0x28
{
24016b00:	eeb0 8a40 	vmov.f32	s16, s0
    _tTiltFilter* f = *vf = (_tTiltFilter*) mpool_alloc(sizeof(_tTiltFilter), m);
24016b04:	4621      	mov	r1, r4
24016b06:	f000 fa2b 	bl	24016f60 <mpool_alloc>
    f->mempool = m;
    
    LEAF* leaf = f->mempool->leaf;
    f->cutoff = cutoff;
    f->invAmp = 1.0f / (6.0f/logf(2.0f));
24016b0a:	f649 0221 	movw	r2, #38945	; 0x9821
    f->gfactor = 5.0f;
    

    f->sr3 = leaf->sampleRate*3.0f;
    Lfloat omega = TWO_PI*cutoff;
24016b0e:	f640 73db 	movw	r3, #4059	; 0xfdb
    f->gfactor = 5.0f;
24016b12:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    _tTiltFilter* f = *vf = (_tTiltFilter*) mpool_alloc(sizeof(_tTiltFilter), m);
24016b16:	6028      	str	r0, [r5, #0]
    f->invAmp = 1.0f / (6.0f/logf(2.0f));
24016b18:	f6c3 52ec 	movt	r2, #15852	; 0x3dec
    f->mempool = m;
24016b1c:	6004      	str	r4, [r0, #0]
    Lfloat omega = TWO_PI*cutoff;
24016b1e:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    LEAF* leaf = f->mempool->leaf;
24016b22:	6861      	ldr	r1, [r4, #4]
    f->sr3 = leaf->sampleRate*3.0f;
24016b24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
    Lfloat omega = TWO_PI*cutoff;
24016b28:	ee07 3a10 	vmov	s14, r3
    f->cutoff = cutoff;
24016b2c:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invAmp = 1.0f / (6.0f/logf(2.0f));
24016b30:	6242      	str	r2, [r0, #36]	; 0x24
    Lfloat n = 1.0f/(f->sr3 + omega);
24016b32:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    f->gfactor = 5.0f;
24016b36:	edc0 7a03 	vstr	s15, [r0, #12]
    Lfloat omega = TWO_PI*cutoff;
24016b3a:	ee28 0a07 	vmul.f32	s0, s16, s14
    f->sr3 = leaf->sampleRate*3.0f;
24016b3e:	edd1 7a00 	vldr	s15, [r1]
24016b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f->a0 = 2.0f*omega*n;
24016b46:	ee30 7a00 	vadd.f32	s14, s0, s0
    Lfloat n = 1.0f/(f->sr3 + omega);
24016b4a:	ee37 6a80 	vadd.f32	s12, s15, s0
    f->sr3 = leaf->sampleRate*3.0f;
24016b4e:	edc0 7a02 	vstr	s15, [r0, #8]
    f->b1 = (f->sr3 - omega)*n;
24016b52:	ee37 0ac0 	vsub.f32	s0, s15, s0
    Lfloat n = 1.0f/(f->sr3 + omega);
24016b56:	eec5 6a86 	vdiv.f32	s13, s11, s12
    f->a0 = 2.0f*omega*n;
24016b5a:	ee67 7a26 	vmul.f32	s15, s14, s13
    f->b1 = (f->sr3 - omega)*n;
24016b5e:	ee20 0a26 	vmul.f32	s0, s0, s13
    f->a0 = 2.0f*omega*n;
24016b62:	edc0 7a04 	vstr	s15, [r0, #16]
    f->b1 = (f->sr3 - omega)*n;
24016b66:	ed80 0a05 	vstr	s0, [r0, #20]
}
24016b6a:	ecbd 8b02 	vpop	{d8}
24016b6e:	bd38      	pop	{r3, r4, r5, pc}

24016b70 <tTiltFilter_tick>:



Lfloat   tTiltFilter_tick               (tTiltFilter* const vf, Lfloat in)
{
    _tTiltFilter* f = *vf;
24016b70:	6803      	ldr	r3, [r0, #0]
    f->lp_out = f->a0*in + f->b1 * f->lp_out;
24016b72:	ed93 6a06 	vldr	s12, [r3, #24]
24016b76:	ed93 7a05 	vldr	s14, [r3, #20]
24016b7a:	edd3 6a04 	vldr	s13, [r3, #16]
24016b7e:	ee27 7a06 	vmul.f32	s14, s14, s12
    return in + f->lgain*f->lp_out + f->hgain*(in - f->lp_out);
24016b82:	edd3 7a07 	vldr	s15, [r3, #28]
24016b86:	ed93 6a08 	vldr	s12, [r3, #32]
    f->lp_out = f->a0*in + f->b1 * f->lp_out;
24016b8a:	eea6 7a80 	vfma.f32	s14, s13, s0
    return in + f->lgain*f->lp_out + f->hgain*(in - f->lp_out);
24016b8e:	eef0 6a40 	vmov.f32	s13, s0
24016b92:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->lp_out = f->a0*in + f->b1 * f->lp_out;
24016b96:	ed83 7a06 	vstr	s14, [r3, #24]
    return in + f->lgain*f->lp_out + f->hgain*(in - f->lp_out);
24016b9a:	ee70 7a47 	vsub.f32	s15, s0, s14
}
24016b9e:	eee6 6a27 	vfma.f32	s13, s12, s15
24016ba2:	eeb0 0a66 	vmov.f32	s0, s13
24016ba6:	4770      	bx	lr

24016ba8 <tTiltFilter_setTilt>:
void    tTiltFilter_setTilt     (tTiltFilter* const vf, Lfloat tilt)
{
    _tTiltFilter* f = *vf;
    Lfloat g1;
    Lfloat g2;
    if (tilt > 0.0f)
24016ba8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tTiltFilter* f = *vf;
24016bac:	6803      	ldr	r3, [r0, #0]
    if (tilt > 0.0f)
24016bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016bb2:	dd3c      	ble.n	24016c2e <tTiltFilter_setTilt+0x86>
    {
        g1 = -f->gfactor*tilt;
24016bb4:	edd3 5a03 	vldr	s11, [r3, #12]
24016bb8:	ee65 5ac0 	vnmul.f32	s11, s11, s0
        g1 = -tilt;
        g2 = f->gfactor*tilt;
    }
    
    //two separate gains
    f->lgain = fasterexpf(g1*f->invAmp)-1.0f;
24016bbc:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
    x = 1.0f + (x * 0.00390625f);
24016bc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24016bc4:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
24016bc8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24016bcc:	ee07 2a10 	vmov	s14, r2
24016bd0:	ee26 6a07 	vmul.f32	s12, s12, s14
24016bd4:	eeb0 7a67 	vmov.f32	s14, s15
24016bd8:	eee0 7a06 	vfma.f32	s15, s0, s12
24016bdc:	eea5 7a86 	vfma.f32	s14, s11, s12
24016be0:	eeb0 6a66 	vmov.f32	s12, s13
    x *= x; x *= x; x *= x; x *= x;
24016be4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016be8:	ee27 7a07 	vmul.f32	s14, s14, s14
24016bec:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016bf0:	ee27 7a07 	vmul.f32	s14, s14, s14
24016bf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016bf8:	ee27 7a07 	vmul.f32	s14, s14, s14
24016bfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016c00:	ee27 7a07 	vmul.f32	s14, s14, s14
    x *= x; x *= x; x *= x; x *= x;
24016c04:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016c08:	ee27 7a07 	vmul.f32	s14, s14, s14
24016c0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016c10:	ee27 7a07 	vmul.f32	s14, s14, s14
24016c14:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016c18:	ee27 7a07 	vmul.f32	s14, s14, s14
    f->hgain = fasterexpf(g2*f->invAmp)-1.0f;
24016c1c:	eee7 6aa7 	vfma.f32	s13, s15, s15
    f->lgain = fasterexpf(g1*f->invAmp)-1.0f;
24016c20:	eea7 6a07 	vfma.f32	s12, s14, s14
    f->hgain = fasterexpf(g2*f->invAmp)-1.0f;
24016c24:	edc3 6a08 	vstr	s13, [r3, #32]
    f->lgain = fasterexpf(g1*f->invAmp)-1.0f;
24016c28:	ed83 6a07 	vstr	s12, [r3, #28]
}
24016c2c:	4770      	bx	lr
        g2 = f->gfactor*tilt;
24016c2e:	edd3 7a03 	vldr	s15, [r3, #12]
        g1 = -tilt;
24016c32:	eef1 5a40 	vneg.f32	s11, s0
        g2 = f->gfactor*tilt;
24016c36:	ee20 0a27 	vmul.f32	s0, s0, s15
24016c3a:	e7bf      	b.n	24016bbc <tTiltFilter_setTilt+0x14>

24016c3c <tTiltFilter_setSampleRate>:
void    tTiltFilter_setSampleRate(tTiltFilter* const vf, Lfloat sr)
{
    _tTiltFilter* f = *vf;
    
    f->sr3 = sr*3.0f;
    Lfloat omega = TWO_PI*f->cutoff;
24016c3c:	f640 72db 	movw	r2, #4059	; 0xfdb
    _tTiltFilter* f = *vf;
24016c40:	6803      	ldr	r3, [r0, #0]
    f->sr3 = sr*3.0f;
24016c42:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
    Lfloat omega = TWO_PI*f->cutoff;
24016c46:	f2c4 02c9 	movt	r2, #16585	; 0x40c9
24016c4a:	edd3 7a01 	vldr	s15, [r3, #4]
    Lfloat n = 1.0f/(f->sr3 + omega);
24016c4e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    Lfloat omega = TWO_PI*f->cutoff;
24016c52:	ee07 2a10 	vmov	s14, r2
    f->sr3 = sr*3.0f;
24016c56:	ee20 0a26 	vmul.f32	s0, s0, s13
    Lfloat omega = TWO_PI*f->cutoff;
24016c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
    f->sr3 = sr*3.0f;
24016c5e:	ed83 0a02 	vstr	s0, [r3, #8]
    Lfloat n = 1.0f/(f->sr3 + omega);
24016c62:	ee30 6a27 	vadd.f32	s12, s0, s15
    f->a0 = 2.0f*omega*n;
24016c66:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->b1 = (f->sr3 - omega)*n;
24016c6a:	ee30 0a67 	vsub.f32	s0, s0, s15
    Lfloat n = 1.0f/(f->sr3 + omega);
24016c6e:	eec5 6a86 	vdiv.f32	s13, s11, s12
    f->a0 = 2.0f*omega*n;
24016c72:	ee67 7a26 	vmul.f32	s15, s14, s13
    f->b1 = (f->sr3 - omega)*n;
24016c76:	ee20 0a26 	vmul.f32	s0, s0, s13
    f->a0 = 2.0f*omega*n;
24016c7a:	edc3 7a04 	vstr	s15, [r3, #16]
    f->b1 = (f->sr3 - omega)*n;
24016c7e:	ed83 0a05 	vstr	s0, [r3, #20]
}
24016c82:	4770      	bx	lr

24016c84 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
24016c84:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24016c86:	1e4b      	subs	r3, r1, #1
24016c88:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
24016c8c:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24016c8e:	ee07 3a90 	vmov	s15, r3
24016c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24016c96:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24016c9a:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24016c9e:	dd16      	ble.n	24016cce <LEAF_generate_exp+0x4a>
24016ca0:	4604      	mov	r4, r0
24016ca2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24016ca6:	eeb0 8a60 	vmov.f32	s16, s1
24016caa:	eef0 8a40 	vmov.f32	s17, s0
24016cae:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24016cb2:	eef0 0a48 	vmov.f32	s1, s16
24016cb6:	eeb0 0a68 	vmov.f32	s0, s17
24016cba:	f005 ff91 	bl	2401cbe0 <powf>
24016cbe:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24016cc2:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24016cc6:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24016cca:	42a5      	cmp	r5, r4
24016ccc:	d1f1      	bne.n	24016cb2 <LEAF_generate_exp+0x2e>
    }
}
24016cce:	ecbd 8b04 	vpop	{d8-d9}
24016cd2:	bd38      	pop	{r3, r4, r5, pc}

24016cd4 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24016cd4:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24016cd6:	ee31 1a40 	vsub.f32	s2, s2, s0
{
24016cda:	460d      	mov	r5, r1
24016cdc:	4604      	mov	r4, r0
24016cde:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24016ce2:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
24016ce6:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24016cea:	ee81 0a29 	vdiv.f32	s0, s2, s19
24016cee:	f005 fd73 	bl	2401c7d8 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24016cf2:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
24016cf4:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24016cf6:	ee07 3a90 	vmov	s15, r3
24016cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016d02:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
24016d06:	dd2a      	ble.n	24016d5e <LEAF_generate_table_skew_non_sym+0x8a>
24016d08:	f64a 213b 	movw	r1, #43579	; 0xaa3b
24016d0c:	f243 43f1 	movw	r3, #13553	; 0x34f1
    Lfloat x = 0.0000000001f;
24016d10:	f24e 62ff 	movw	r2, #59135	; 0xe6ff
24016d14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
24016d18:	f6cb 71b8 	movt	r1, #49080	; 0xbfb8
    for (int i = 0; i < size; i++)
24016d1c:	f2cc 13b8 	movt	r3, #49592	; 0xc1b8
    Lfloat x = 0.0000000001f;
24016d20:	f6c2 62db 	movt	r2, #11995	; 0x2edb
24016d24:	eeb0 9a40 	vmov.f32	s18, s0
24016d28:	ee07 1a90 	vmov	s15, r1
    for (int i = 0; i < size; i++)
24016d2c:	ee00 3a10 	vmov	s0, r3
    Lfloat x = 0.0000000001f;
24016d30:	ee08 2a10 	vmov	s16, r2
24016d34:	ee29 9a27 	vmul.f32	s18, s18, s15
24016d38:	e001      	b.n	24016d3e <LEAF_generate_table_skew_non_sym+0x6a>
    {
        proportion = expf (logf(x) / skew);
24016d3a:	f005 fd4d 	bl	2401c7d8 <logf>
24016d3e:	ee29 0a00 	vmul.f32	s0, s18, s0
24016d42:	f005 fcd5 	bl	2401c6f0 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24016d46:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24016d4a:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24016d4e:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
24016d52:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24016d56:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24016d5a:	42a5      	cmp	r5, r4
24016d5c:	d1ed      	bne.n	24016d3a <LEAF_generate_table_skew_non_sym+0x66>
    }
}
24016d5e:	ecbd 8b06 	vpop	{d8-d10}
24016d62:	bd38      	pop	{r3, r4, r5, pc}

24016d64 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
24016d64:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24016d66:	1e4b      	subs	r3, r1, #1
24016d68:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24016d6c:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24016d6e:	ee07 3a90 	vmov	s15, r3
24016d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24016d76:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24016d7a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24016d7e:	dd12      	ble.n	24016da6 <LEAF_generate_atodb+0x42>
24016d80:	4604      	mov	r4, r0
24016d82:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24016d86:	eeb0 8a40 	vmov.f32	s16, s0
    return 20.0f*log10f(a);
24016d8a:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24016d8e:	eeb0 0a48 	vmov.f32	s0, s16
24016d92:	f006 f8cb 	bl	2401cf2c <log10f>
24016d96:	ee20 0a09 	vmul.f32	s0, s0, s18
    {
        buffer[i] = atodb(x);
        x += increment;
24016d9a:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24016d9e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24016da2:	42a5      	cmp	r5, r4
24016da4:	d1f3      	bne.n	24016d8e <LEAF_generate_atodb+0x2a>
    }
}
24016da6:	ecbd 8b04 	vpop	{d8-d9}
24016daa:	bd38      	pop	{r3, r4, r5, pc}

24016dac <LEAF_generate_dbtoa>:

void LEAF_generate_dbtoa(Lfloat* buffer, int size, Lfloat minDb, Lfloat maxDb)
{
24016dac:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24016dae:	1e4b      	subs	r3, r1, #1
24016db0:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = minDb;
    for (int i = 0; i < size; i++)
24016db4:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24016db6:	ee07 3a90 	vmov	s15, r3
24016dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24016dbe:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24016dc2:	eec0 9aa7 	vdiv.f32	s19, s1, s15
    for (int i = 0; i < size; i++)
24016dc6:	dd1c      	ble.n	24016e02 <LEAF_generate_dbtoa+0x56>
    return powf(10.0f, db * 0.05f);
24016dc8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
24016dcc:	f645 538e 	movw	r3, #23950	; 0x5d8e
24016dd0:	4604      	mov	r4, r0
24016dd2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24016dd6:	f6c3 524c 	movt	r2, #15692	; 0x3d4c
24016dda:	f2c4 0313 	movt	r3, #16403	; 0x4013
24016dde:	eeb0 8a40 	vmov.f32	s16, s0
24016de2:	ee09 2a10 	vmov	s18, r2
24016de6:	ee08 3a90 	vmov	s17, r3
24016dea:	ee28 0a09 	vmul.f32	s0, s16, s18
    {
        buffer[i] = dbtoa(x);
        x += increment;
24016dee:	ee38 8a29 	vadd.f32	s16, s16, s19
24016df2:	ee20 0a28 	vmul.f32	s0, s0, s17
24016df6:	f005 fc7b 	bl	2401c6f0 <expf>
        buffer[i] = dbtoa(x);
24016dfa:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24016dfe:	42a5      	cmp	r5, r4
24016e00:	d1f3      	bne.n	24016dea <LEAF_generate_dbtoa+0x3e>
    }
}
24016e02:	ecbd 8b04 	vpop	{d8-d9}
24016e06:	bd38      	pop	{r3, r4, r5, pc}

24016e08 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(Lfloat* buffer, Lfloat startMIDI, Lfloat endMIDI, int size)
{
24016e08:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24016e0a:	1e4b      	subs	r3, r1, #1
24016e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat x = 0.0f;
    Lfloat scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
24016e10:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24016e12:	ee07 3a90 	vmov	s15, r3
24016e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24016e1a:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24016e1e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24016e22:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24016e26:	dd3b      	ble.n	24016ea0 <LEAF_generate_mtof+0x98>
    else if (f > 1499.0f) return(mtof(1499.0f));
24016e28:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
24016e2c:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24016e2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    else return (8.17579891564f * expf(0.0577622650f * f));
24016e32:	f649 0020 	movw	r0, #38944	; 0x9820
    else if (f > 1499.0f) return(mtof(1499.0f));
24016e36:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
    Lfloat x = 0.0f;
24016e3a:	f04f 0c00 	mov.w	ip, #0
    if (f <= -1500.0f) return(0);
24016e3e:	f2cc 42bb 	movt	r2, #50363	; 0xc4bb
    else return (8.17579891564f * expf(0.0577622650f * f));
24016e42:	f6c3 506c 	movt	r0, #15724	; 0x3d6c
    else if (f > 1499.0f) return(mtof(1499.0f));
24016e46:	ee08 3a10 	vmov	s16, r3
    else return (8.17579891564f * expf(0.0577622650f * f));
24016e4a:	f24d 0313 	movw	r3, #53267	; 0xd013
24016e4e:	eef0 9a40 	vmov.f32	s19, s0
24016e52:	ee09 ca10 	vmov	s18, ip
24016e56:	f2c4 1302 	movt	r3, #16642	; 0x4102
24016e5a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    if (f <= -1500.0f) return(0);
24016e5e:	ee08 2a90 	vmov	s17, r2
24016e62:	ee0c ca10 	vmov	s24, ip
    else return (8.17579891564f * expf(0.0577622650f * f));
24016e66:	ee0b 0a90 	vmov	s23, r0
24016e6a:	ee0b 3a10 	vmov	s22, r3
    {
        Lfloat midiVal = (x * scalar) + startMIDI;
24016e6e:	eeb0 0a69 	vmov.f32	s0, s19
24016e72:	eeaa 0a09 	vfma.f32	s0, s20, s18
inline Lfloat mtof(Lfloat f)
24016e76:	e006      	b.n	24016e86 <LEAF_generate_mtof+0x7e>
    else if (f > 1499.0f) return(mtof(1499.0f));
24016e78:	eeb4 0ac8 	vcmpe.f32	s0, s16
24016e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e80:	dd11      	ble.n	24016ea6 <LEAF_generate_mtof+0x9e>
24016e82:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24016e86:	eeb4 0ae8 	vcmpe.f32	s0, s17
24016e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e8e:	d8f3      	bhi.n	24016e78 <LEAF_generate_mtof+0x70>
24016e90:	eef0 7a4c 	vmov.f32	s15, s24
        buffer[i] = mtof(midiVal);
24016e94:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24016e98:	42ac      	cmp	r4, r5
        x += increment;
24016e9a:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24016e9e:	d1e6      	bne.n	24016e6e <LEAF_generate_mtof+0x66>
    }
}
24016ea0:	ecbd 8b0a 	vpop	{d8-d12}
24016ea4:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24016ea6:	ee20 0a2b 	vmul.f32	s0, s0, s23
24016eaa:	f005 fc21 	bl	2401c6f0 <expf>
24016eae:	ee60 7a0b 	vmul.f32	s15, s0, s22
24016eb2:	e7ef      	b.n	24016e94 <LEAF_generate_mtof+0x8c>

24016eb4 <fast_sinf2>:
Lfloat fast_sinf2(Lfloat x)
{
    Lfloat invert = 1.0f;
    Lfloat out;

    x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
24016eb4:	f64f 1383 	movw	r3, #63875	; 0xf983
24016eb8:	f2c4 33a2 	movt	r3, #17314	; 0x43a2
24016ebc:	ee07 3a90 	vmov	s15, r3
24016ec0:	ee20 0a27 	vmul.f32	s0, s0, s15

    if (x < 0.0f)
24016ec4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24016ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016ecc:	d429      	bmi.n	24016f22 <fast_sinf2+0x6e>
    Lfloat invert = 1.0f;
24016ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    {
        x *= -1.0f;
        invert = -1.0f;
    }
    int intX = ((int)x) & 2047;
24016ed2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    int intXNext = (intX + 1) & 2047;
    Lfloat LfloatX = x-intX;

    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24016ed6:	f24b 0214 	movw	r2, #45076	; 0xb014
24016eda:	f2c2 4202 	movt	r2, #9218	; 0x2402
    int intX = ((int)x) & 2047;
24016ede:	ee17 3a90 	vmov	r3, s15
    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24016ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intX = ((int)x) & 2047;
24016ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24016eea:	ee77 7ac0 	vsub.f32	s15, s15, s0
    int intXNext = (intX + 1) & 2047;
24016eee:	1c59      	adds	r1, r3, #1
    Lfloat LfloatX = x-intX;
24016ef0:	ee07 3a10 	vmov	s14, r3
    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24016ef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatX = x-intX;
24016ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    int intXNext = (intX + 1) & 2047;
24016efc:	f3c1 010a 	ubfx	r1, r1, #0, #11
    out += __leaf_table_sinewave[intXNext] * LfloatX;
24016f00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat LfloatX = x-intX;
24016f04:	ee30 0a47 	vsub.f32	s0, s0, s14
    out += __leaf_table_sinewave[intXNext] * LfloatX;
24016f08:	ed92 6a00 	vldr	s12, [r2]
    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24016f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
    out += __leaf_table_sinewave[intXNext] * LfloatX;
24016f10:	ed93 7a00 	vldr	s14, [r3]
24016f14:	ee20 0a06 	vmul.f32	s0, s0, s12
24016f18:	eea7 0a27 	vfma.f32	s0, s14, s15
    out *= invert;
    return out;
}
24016f1c:	ee26 0a80 	vmul.f32	s0, s13, s0
24016f20:	4770      	bx	lr
        x *= -1.0f;
24016f22:	eeb1 0a40 	vneg.f32	s0, s0
        invert = -1.0f;
24016f26:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24016f2a:	e7d2      	b.n	24016ed2 <fast_sinf2+0x1e>

24016f2c <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24016f2c:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24016f2e:	6a03      	ldr	r3, [r0, #32]
24016f30:	2510      	movs	r5, #16
    pool->usize  = 0;
24016f32:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24016f34:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24016f36:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
24016f38:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
24016f3c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
24016f3e:	42aa      	cmp	r2, r5
24016f40:	bf38      	it	cc
24016f42:	462a      	movcc	r2, r5
    pool->msize  = size;
24016f44:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24016f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24016f48:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24016f4a:	440b      	add	r3, r1
24016f4c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24016f4e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24016f52:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24016f54:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24016f58:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24016f5a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24016f5c:	6183      	str	r3, [r0, #24]
}
24016f5e:	4770      	bx	lr

24016f60 <mpool_alloc>:
{
24016f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24016f62:	684a      	ldr	r2, [r1, #4]
{
24016f64:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24016f66:	6c93      	ldr	r3, [r2, #72]	; 0x48
24016f68:	3301      	adds	r3, #1
24016f6a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24016f6c:	694b      	ldr	r3, [r1, #20]
24016f6e:	2b00      	cmp	r3, #0
24016f70:	d04a      	beq.n	24017008 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24016f72:	1dc4      	adds	r4, r0, #7
24016f74:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24016f78:	e002      	b.n	24016f80 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24016f7a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24016f7c:	2b00      	cmp	r3, #0
24016f7e:	d043      	beq.n	24017008 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24016f80:	68da      	ldr	r2, [r3, #12]
24016f82:	42a2      	cmp	r2, r4
24016f84:	d3f9      	bcc.n	24016f7a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24016f86:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24016f88:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24016f8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
24016f8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24016f90:	4281      	cmp	r1, r0
24016f92:	d246      	bcs.n	24017022 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24016f94:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24016f98:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24016f9a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24016f9c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24016f9e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24016fa0:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24016fa2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24016fa6:	4429      	add	r1, r5
24016fa8:	5111      	str	r1, [r2, r4]
    node->size = size;
24016faa:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24016fac:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24016fb0:	f8dc 2014 	ldr.w	r2, [ip, #20]
24016fb4:	429a      	cmp	r2, r3
        pool->head = new_node;
24016fb6:	bf08      	it	eq
24016fb8:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24016fbc:	685a      	ldr	r2, [r3, #4]
24016fbe:	b10a      	cbz	r2, 24016fc4 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24016fc0:	6899      	ldr	r1, [r3, #8]
24016fc2:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24016fc4:	689a      	ldr	r2, [r3, #8]
24016fc6:	b10a      	cbz	r2, 24016fcc <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24016fc8:	6859      	ldr	r1, [r3, #4]
24016fca:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24016fcc:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24016fce:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24016fd0:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24016fd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
24016fd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
24016fdc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24016fde:	4422      	add	r2, r4
24016fe0:	4402      	add	r2, r0
24016fe2:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24016fe6:	694a      	ldr	r2, [r1, #20]
24016fe8:	42aa      	cmp	r2, r5
24016fea:	dd0b      	ble.n	24017004 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24016fec:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24016fee:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24016ff0:	b14a      	cbz	r2, 24017006 <mpool_alloc+0xa6>
24016ff2:	1e41      	subs	r1, r0, #1
24016ff4:	460a      	mov	r2, r1
24016ff6:	f801 5f01 	strb.w	r5, [r1, #1]!
24016ffa:	68dc      	ldr	r4, [r3, #12]
24016ffc:	3202      	adds	r2, #2
24016ffe:	1a12      	subs	r2, r2, r0
24017000:	42a2      	cmp	r2, r4
24017002:	d3f7      	bcc.n	24016ff4 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
24017004:	6818      	ldr	r0, [r3, #0]
}
24017006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24017008:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
2401700c:	1a9b      	subs	r3, r3, r2
2401700e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24017010:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24017014:	bf8c      	ite	hi
24017016:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24017018:	2100      	movls	r1, #0
2401701a:	f005 fac3 	bl	2401c5a4 <LEAF_internalErrorCallback>
        return NULL;
2401701e:	2000      	movs	r0, #0
}
24017020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24017022:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24017024:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24017026:	e7c3      	b.n	24016fb0 <mpool_alloc+0x50>

24017028 <mpool_calloc>:
{
24017028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
2401702a:	684a      	ldr	r2, [r1, #4]
{
2401702c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
2401702e:	6c93      	ldr	r3, [r2, #72]	; 0x48
24017030:	3301      	adds	r3, #1
24017032:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24017034:	694b      	ldr	r3, [r1, #20]
24017036:	2b00      	cmp	r3, #0
24017038:	d044      	beq.n	240170c4 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
2401703a:	1dc4      	adds	r4, r0, #7
2401703c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24017040:	e002      	b.n	24017048 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24017042:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24017044:	2b00      	cmp	r3, #0
24017046:	d03d      	beq.n	240170c4 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24017048:	68da      	ldr	r2, [r3, #12]
2401704a:	42a2      	cmp	r2, r4
2401704c:	d3f9      	bcc.n	24017042 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
2401704e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24017050:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24017052:	f8dc 1004 	ldr.w	r1, [ip, #4]
24017056:	6b49      	ldr	r1, [r1, #52]	; 0x34
24017058:	4281      	cmp	r1, r0
2401705a:	d240      	bcs.n	240170de <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401705c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24017060:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24017062:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24017064:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24017066:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24017068:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
2401706a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
2401706e:	4429      	add	r1, r5
24017070:	5111      	str	r1, [r2, r4]
    node->size = size;
24017072:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24017074:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24017078:	f8dc 2014 	ldr.w	r2, [ip, #20]
2401707c:	429a      	cmp	r2, r3
        pool->head = new_node;
2401707e:	bf08      	it	eq
24017080:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24017084:	685a      	ldr	r2, [r3, #4]
24017086:	b10a      	cbz	r2, 2401708c <mpool_calloc+0x64>
        node->next->prev = node->prev;
24017088:	6899      	ldr	r1, [r3, #8]
2401708a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
2401708c:	689a      	ldr	r2, [r3, #8]
2401708e:	b10a      	cbz	r2, 24017094 <mpool_calloc+0x6c>
        node->prev->next = node->next;
24017090:	6859      	ldr	r1, [r3, #4]
24017092:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24017094:	2200      	movs	r2, #0
    node->prev = NULL;
24017096:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2401709a:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401709e:	f8dc 000c 	ldr.w	r0, [ip, #12]
240170a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
240170a4:	4401      	add	r1, r0
240170a6:	68d8      	ldr	r0, [r3, #12]
240170a8:	4401      	add	r1, r0
240170aa:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
240170ae:	68d9      	ldr	r1, [r3, #12]
240170b0:	b131      	cbz	r1, 240170c0 <mpool_calloc+0x98>
240170b2:	4610      	mov	r0, r2
240170b4:	6819      	ldr	r1, [r3, #0]
240170b6:	5488      	strb	r0, [r1, r2]
240170b8:	3201      	adds	r2, #1
240170ba:	68d9      	ldr	r1, [r3, #12]
240170bc:	4291      	cmp	r1, r2
240170be:	d8f9      	bhi.n	240170b4 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
240170c0:	6818      	ldr	r0, [r3, #0]
}
240170c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
240170c4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
240170c8:	1a9b      	subs	r3, r3, r2
240170ca:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240170cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240170d0:	bf8c      	ite	hi
240170d2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240170d4:	2100      	movls	r1, #0
240170d6:	f005 fa65 	bl	2401c5a4 <LEAF_internalErrorCallback>
        return NULL;
240170da:	2000      	movs	r0, #0
}
240170dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
240170de:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
240170e0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
240170e2:	e7c9      	b.n	24017078 <mpool_calloc+0x50>

240170e4 <mpool_free>:
{
240170e4:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
240170e6:	684a      	ldr	r2, [r1, #4]
240170e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240170ea:	3301      	adds	r3, #1
240170ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240170ee:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240170f0:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240170f2:	6b72      	ldr	r2, [r6, #52]	; 0x34
240170f4:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
240170f6:	1a9b      	subs	r3, r3, r2
240170f8:	68e2      	ldr	r2, [r4, #12]
240170fa:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
240170fc:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240170fe:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
24017100:	2b00      	cmp	r3, #0
24017102:	d051      	beq.n	240171a8 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
24017104:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
24017106:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
24017108:	429a      	cmp	r2, r3
2401710a:	dc17      	bgt.n	2401713c <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
2401710c:	690d      	ldr	r5, [r1, #16]
2401710e:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
24017110:	429a      	cmp	r2, r3
24017112:	d913      	bls.n	2401713c <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24017114:	6b72      	ldr	r2, [r6, #52]	; 0x34
24017116:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
24017118:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
2401711a:	eb02 0c06 	add.w	ip, r2, r6
2401711e:	eb0c 0604 	add.w	r6, ip, r4
24017122:	42b3      	cmp	r3, r6
24017124:	d029      	beq.n	2401717a <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
24017126:	68de      	ldr	r6, [r3, #12]
24017128:	441a      	add	r2, r3
2401712a:	4432      	add	r2, r6
2401712c:	4294      	cmp	r4, r2
2401712e:	d00a      	beq.n	24017146 <mpool_free+0x62>
    while (other_node != NULL)
24017130:	b1e5      	cbz	r5, 2401716c <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24017132:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
24017134:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24017136:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
24017138:	429a      	cmp	r2, r3
2401713a:	dde7      	ble.n	2401710c <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
2401713c:	4630      	mov	r0, r6
2401713e:	2102      	movs	r1, #2
}
24017140:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24017142:	f005 ba2f 	b.w	2401c5a4 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
24017146:	4466      	add	r6, ip
24017148:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
2401714a:	694a      	ldr	r2, [r1, #20]
2401714c:	429a      	cmp	r2, r3
2401714e:	d028      	beq.n	240171a2 <mpool_free+0xbe>
    if (node->next != NULL)
24017150:	b10d      	cbz	r5, 24017156 <mpool_free+0x72>
        node->next->prev = node->prev;
24017152:	689a      	ldr	r2, [r3, #8]
24017154:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
24017156:	689a      	ldr	r2, [r3, #8]
24017158:	b10a      	cbz	r2, 2401715e <mpool_free+0x7a>
        node->prev->next = node->next;
2401715a:	685c      	ldr	r4, [r3, #4]
2401715c:	6054      	str	r4, [r2, #4]
    node->next = NULL;
2401715e:	461c      	mov	r4, r3
    node->prev = NULL;
24017160:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
24017164:	694a      	ldr	r2, [r1, #20]
24017166:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24017168:	2d00      	cmp	r5, #0
2401716a:	d1e2      	bne.n	24017132 <mpool_free+0x4e>
    freed_node->next = pool->head;
2401716c:	694b      	ldr	r3, [r1, #20]
2401716e:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24017170:	b103      	cbz	r3, 24017174 <mpool_free+0x90>
24017172:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
24017174:	614c      	str	r4, [r1, #20]
}
24017176:	bc70      	pop	{r4, r5, r6}
24017178:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
2401717a:	68da      	ldr	r2, [r3, #12]
2401717c:	4462      	add	r2, ip
2401717e:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24017180:	694a      	ldr	r2, [r1, #20]
24017182:	429a      	cmp	r2, r3
24017184:	d00a      	beq.n	2401719c <mpool_free+0xb8>
    if (node->next != NULL)
24017186:	685a      	ldr	r2, [r3, #4]
24017188:	b10a      	cbz	r2, 2401718e <mpool_free+0xaa>
        node->next->prev = node->prev;
2401718a:	689e      	ldr	r6, [r3, #8]
2401718c:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
2401718e:	689a      	ldr	r2, [r3, #8]
24017190:	b10a      	cbz	r2, 24017196 <mpool_free+0xb2>
        node->prev->next = node->next;
24017192:	685e      	ldr	r6, [r3, #4]
24017194:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
24017196:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
2401719a:	e7c9      	b.n	24017130 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
2401719c:	685a      	ldr	r2, [r3, #4]
2401719e:	614a      	str	r2, [r1, #20]
240171a0:	e7f1      	b.n	24017186 <mpool_free+0xa2>
                pool->head = pool->head->next;
240171a2:	461c      	mov	r4, r3
240171a4:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
240171a6:	e7c3      	b.n	24017130 <mpool_free+0x4c>
    freed_node->next = pool->head;
240171a8:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
240171aa:	e7e3      	b.n	24017174 <mpool_free+0x90>

240171ac <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
240171ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
240171ae:	699f      	ldr	r7, [r3, #24]
{
240171b0:	4606      	mov	r6, r0
240171b2:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
240171b4:	2018      	movs	r0, #24
240171b6:	4639      	mov	r1, r7
{
240171b8:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
240171ba:	f7ff fed1 	bl	24016f60 <mpool_alloc>
240171be:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
240171c0:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240171c2:	2210      	movs	r2, #16
    pool->usize  = 0;
240171c4:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
240171c6:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240171c8:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
240171ca:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
240171cc:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
240171d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240171d2:	42aa      	cmp	r2, r5
240171d4:	bf38      	it	cc
240171d6:	462a      	movcc	r2, r5
    pool->msize  = size;
240171d8:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240171da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240171dc:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
240171de:	4423      	add	r3, r4
    node->prev = prev;
240171e0:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
240171e4:	6023      	str	r3, [r4, #0]
    node->size = size;
240171e6:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240171e8:	6144      	str	r4, [r0, #20]
}
240171ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240171ec <tCycle_init>:
}

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
240171ec:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240171ee:	698c      	ldr	r4, [r1, #24]
{
240171f0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240171f2:	2018      	movs	r0, #24
240171f4:	4621      	mov	r1, r4
240171f6:	f7ff feb3 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240171fa:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240171fe:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
24017200:	2200      	movs	r2, #0
    c->mempool = m;
24017202:	6004      	str	r4, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017204:	ee07 3a10 	vmov	s14, r3
    LEAF* leaf = c->mempool->leaf;
24017208:	6861      	ldr	r1, [r4, #4]
    c->mask = SINE_TABLE_SIZE - 1;
2401720a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->phase    =  0;
2401720e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017212:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24017216:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017218:	ee67 7a87 	vmul.f32	s15, s15, s14
2401721c:	edc0 7a04 	vstr	s15, [r0, #16]
}
24017220:	bd38      	pop	{r3, r4, r5, pc}
24017222:	bf00      	nop

24017224 <tCycle_initToPool>:
{
24017224:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24017226:	680c      	ldr	r4, [r1, #0]
{
24017228:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401722a:	2018      	movs	r0, #24
2401722c:	4621      	mov	r1, r4
2401722e:	f7ff fe97 	bl	24016f60 <mpool_alloc>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017232:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24017236:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
24017238:	2200      	movs	r2, #0
    c->mempool = m;
2401723a:	6004      	str	r4, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401723c:	ee07 3a10 	vmov	s14, r3
    LEAF* leaf = c->mempool->leaf;
24017240:	6861      	ldr	r1, [r4, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24017242:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->phase    =  0;
24017246:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401724a:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
2401724e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017250:	ee67 7a87 	vmul.f32	s15, s15, s14
24017254:	edc0 7a04 	vstr	s15, [r0, #16]
}
24017258:	bd38      	pop	{r3, r4, r5, pc}
2401725a:	bf00      	nop

2401725c <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
2401725c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
2401725e:	6801      	ldr	r1, [r0, #0]
24017260:	f7ff bf40 	b.w	240170e4 <mpool_free>

24017264 <tCycle_tick>:
    
    samp0 = __leaf_table_sinewave[idx];
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017264:	2104      	movs	r1, #4
    _tCycle* c = *cy;
24017266:	6800      	ldr	r0, [r0, #0]
    samp0 = __leaf_table_sinewave[idx];
24017268:	f24b 0214 	movw	r2, #45076	; 0xb014
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401726c:	f2c3 5100 	movt	r1, #13568	; 0x3500
    c->phase += c->inc;
24017270:	6843      	ldr	r3, [r0, #4]
    samp0 = __leaf_table_sinewave[idx];
24017272:	f2c2 4202 	movt	r2, #9218	; 0x2402
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017276:	ee07 1a10 	vmov	s14, r1
    c->phase += c->inc;
2401727a:	6881      	ldr	r1, [r0, #8]
2401727c:	440b      	add	r3, r1
    idx = c->phase >> 21; //11 bit table 
2401727e:	0d59      	lsrs	r1, r3, #21
    c->phase += c->inc;
24017280:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24017282:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
24017286:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24017288:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
2401728c:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
24017290:	3101      	adds	r1, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24017296:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
2401729a:	4001      	ands	r1, r0
    samp1 = __leaf_table_sinewave[idx];
2401729c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240172a0:	ee67 7a87 	vmul.f32	s15, s15, s14
240172a4:	ed92 7a00 	vldr	s14, [r2]
240172a8:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240172ac:	eea7 0a27 	vfma.f32	s0, s14, s15
240172b0:	4770      	bx	lr
240172b2:	bf00      	nop

240172b4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
240172b4:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240172b6:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
240172ba:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240172be:	ee20 0a27 	vmul.f32	s0, s0, s15
240172c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240172c6:	ed83 0a02 	vstr	s0, [r3, #8]
}
240172ca:	4770      	bx	lr

240172cc <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
240172cc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240172d0:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
240172d4:	ee07 3a90 	vmov	s15, r3
    _tCycle* c = *cy;
240172d8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240172da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240172de:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
240172e2:	ee20 0a27 	vmul.f32	s0, s0, s15
240172e6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240172ea:	ed83 0a01 	vstr	s0, [r3, #4]
}
240172ee:	4770      	bx	lr

240172f0 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
240172f0:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
240172f4:	ee07 3a90 	vmov	s15, r3
    _tCycle* c = *cy;
240172f8:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
240172fa:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
240172fe:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
24017302:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
24017306:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017308:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
2401730c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017310:	ee67 7a87 	vmul.f32	s15, s15, s14
24017314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017318:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401731c:	4770      	bx	lr
2401731e:	bf00      	nop

24017320 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
24017320:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24017322:	698c      	ldr	r4, [r1, #24]
{
24017324:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
24017326:	2024      	movs	r0, #36	; 0x24
24017328:	4621      	mov	r1, r4
2401732a:	f7ff fe19 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401732e:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
24017332:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
24017334:	2100      	movs	r1, #0
    c->mempool = m;
24017336:	6004      	str	r4, [r0, #0]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017338:	ee07 3a90 	vmov	s15, r3
    c->invSampleRate = leaf->invSampleRate;
2401733c:	6864      	ldr	r4, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
2401733e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c->invSampleRate = leaf->invSampleRate;
24017342:	ed94 7a01 	vldr	s14, [r4, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
24017346:	60c1      	str	r1, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017348:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
2401734c:	ed80 7a07 	vstr	s14, [r0, #28]
    c->phase    =  0;
24017350:	e9c0 1101 	strd	r1, r1, [r0, #4]
    c->oneMinusWidth =  c->width;
24017354:	e9c0 2204 	strd	r2, r2, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017358:	edc0 7a08 	vstr	s15, [r0, #32]
}
2401735c:	bd38      	pop	{r3, r4, r5, pc}
2401735e:	bf00      	nop

24017360 <tPBTriangle_tick>:
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
    _tPBTriangle* c = *osc;
24017360:	6801      	ldr	r1, [r0, #0]

    uint32_t halfWidth =(c->width >> 1);
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
24017362:	220d      	movs	r2, #13
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 2.0f;

    if (y >= 2.0f - floatWidth) {
24017364:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    uint32_t halfWidth =(c->width >> 1);
24017368:	690b      	ldr	r3, [r1, #16]
    float y = t * 2.0f;
2401736a:	4694      	mov	ip, r2
    uint32_t t1 = c->phase + halfWidth;
2401736c:	6848      	ldr	r0, [r1, #4]
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
2401736e:	f6c2 7280 	movt	r2, #12160	; 0x2f80
24017372:	ee07 3a90 	vmov	s15, r3
    float y = t * 2.0f;
24017376:	f2c3 0c00 	movt	ip, #12288	; 0x3000
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
2401737a:	ee06 2a90 	vmov	s13, r2
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401737e:	688a      	ldr	r2, [r1, #8]
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
24017380:	eeb8 4a67 	vcvt.f32.u32	s8, s15
    Lfloat t = c->phase * INV_TWO_TO_32;
24017384:	ee07 0a90 	vmov	s15, r0
    float y = t * 2.0f;
24017388:	ee05 ca10 	vmov	s10, ip
    uint32_t t1 = c->phase + halfWidth;
2401738c:	eb00 0c53 	add.w	ip, r0, r3, lsr #1
    Lfloat t = c->phase * INV_TWO_TO_32;
24017390:	eef8 5a67 	vcvt.f32.u32	s11, s15
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
24017394:	eba0 0353 	sub.w	r3, r0, r3, lsr #1
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
24017398:	ee24 4a26 	vmul.f32	s8, s8, s13
    uint32_t t1 = c->phase + halfWidth;
2401739c:	ee06 ca10 	vmov	s12, ip
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
240173a0:	ee07 3a90 	vmov	s15, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240173a4:	ee07 2a10 	vmov	s14, r2
    float y = t * 2.0f;
240173a8:	ee65 5a85 	vmul.f32	s11, s11, s10
    if (y >= 2.0f - floatWidth) {
240173ac:	ee34 5ac4 	vsub.f32	s10, s9, s8
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240173b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    Lfloat t1F = t1 * INV_TWO_TO_32;
240173b4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    if (y >= 2.0f - floatWidth) {
240173b8:	eeb4 5ae5 	vcmpe.f32	s10, s11
    Lfloat t2F = t2 * INV_TWO_TO_32;
240173bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240173c0:	ee27 7a26 	vmul.f32	s14, s14, s13
    if (y >= 2.0f - floatWidth) {
240173c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t1F = t1 * INV_TWO_TO_32;
240173c8:	ee26 6a26 	vmul.f32	s12, s12, s13
    Lfloat t2F = t2 * INV_TWO_TO_32;
240173cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    if (y >= 2.0f - floatWidth) {
240173d0:	d841      	bhi.n	24017456 <tPBTriangle_tick+0xf6>
        y = (y - 2.0f) / floatWidth;
240173d2:	ee75 5ae4 	vsub.f32	s11, s11, s9
240173d6:	ee85 0a84 	vdiv.f32	s0, s11, s8
    if (t < dt) {
240173da:	eeb4 6ac7 	vcmpe.f32	s12, s14
240173de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240173e2:	d44c      	bmi.n	2401747e <tPBTriangle_tick+0x11e>
    } else if (t > (1.0f - dt)) {
240173e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240173e8:	ee75 6ac7 	vsub.f32	s13, s11, s14
240173ec:	eeb4 6ae6 	vcmpe.f32	s12, s13
240173f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240173f4:	dc6d      	bgt.n	240174d2 <tPBTriangle_tick+0x172>
        return 0.0f;
240173f6:	2300      	movs	r3, #0
240173f8:	ee06 3a90 	vmov	s13, r3
    if (t < dt) {
240173fc:	eef4 7ac7 	vcmpe.f32	s15, s14
24017400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017404:	d452      	bmi.n	240174ac <tPBTriangle_tick+0x14c>
    } else if (t > (1.0f - dt)) {
24017406:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401740a:	ee35 6ac7 	vsub.f32	s12, s11, s14
2401740e:	eef4 7ac6 	vcmpe.f32	s15, s12
24017412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017416:	dd11      	ble.n	2401743c <tPBTriangle_tick+0xdc>
        t = (t - 1.0f) / dt + 1.0f;
24017418:	ee77 7ae5 	vsub.f32	s15, s15, s11
        y /= floatWidth;
    }
    Lfloat blampOne = blamp(t1F, incFloat);
    Lfloat blampTwo = blamp(t2F, incFloat);
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
    y += scaling * (blampOne - blampTwo);
2401741c:	f64a 23ab 	movw	r3, #43691	; 0xaaab
24017420:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
        t = (t - 1.0f) / dt + 1.0f;
24017424:	ee87 6a87 	vdiv.f32	s12, s15, s14
    y += scaling * (blampOne - blampTwo);
24017428:	ee05 3a10 	vmov	s10, r3
        t = (t - 1.0f) / dt + 1.0f;
2401742c:	ee76 7a25 	vadd.f32	s15, s12, s11
        return 1.0f / 3.0f * t * t * t;
24017430:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
24017434:	ee26 6a05 	vmul.f32	s12, s12, s10
24017438:	eee7 6ac6 	vfms.f32	s13, s15, s12
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
2401743c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->phase += c->inc;
24017440:	4402      	add	r2, r0
24017442:	604a      	str	r2, [r1, #4]
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
24017444:	ee77 7ac4 	vsub.f32	s15, s15, s8
24017448:	ee67 7a84 	vmul.f32	s15, s15, s8
2401744c:	ee87 6a27 	vdiv.f32	s12, s14, s15
    return y;
}
24017450:	eea6 0a26 	vfma.f32	s0, s12, s13
24017454:	4770      	bx	lr
    } else if (y >= floatWidth) {
24017456:	eeb4 4ae5 	vcmpe.f32	s8, s11
2401745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401745e:	d84b      	bhi.n	240174f8 <tPBTriangle_tick+0x198>
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
24017460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24017464:	ee75 5ac4 	vsub.f32	s11, s11, s8
    if (t < dt) {
24017468:	eeb4 6ac7 	vcmpe.f32	s12, s14
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
2401746c:	ee34 5a66 	vsub.f32	s10, s8, s13
    if (t < dt) {
24017470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
24017474:	ee85 0a85 	vdiv.f32	s0, s11, s10
24017478:	ee30 0a26 	vadd.f32	s0, s0, s13
    if (t < dt) {
2401747c:	d5b2      	bpl.n	240173e4 <tPBTriangle_tick+0x84>
        t = (t / dt) - 1.0f;
2401747e:	eec6 6a07 	vdiv.f32	s13, s12, s14
        return -1.0f / 3.0f * t * t * t;
24017482:	f64a 23ab 	movw	r3, #43691	; 0xaaab
24017486:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
2401748a:	ee05 3a90 	vmov	s11, r3
        t = (t / dt) - 1.0f;
2401748e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    if (t < dt) {
24017492:	eef4 7ac7 	vcmpe.f32	s15, s14
24017496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
2401749a:	ee36 6ac6 	vsub.f32	s12, s13, s12
        return -1.0f / 3.0f * t * t * t;
2401749e:	ee66 6a06 	vmul.f32	s13, s12, s12
240174a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
240174a6:	ee66 6a86 	vmul.f32	s13, s13, s12
    if (t < dt) {
240174aa:	d5ac      	bpl.n	24017406 <tPBTriangle_tick+0xa6>
        t = (t / dt) - 1.0f;
240174ac:	ee87 6a87 	vdiv.f32	s12, s15, s14
    y += scaling * (blampOne - blampTwo);
240174b0:	f64a 23ab 	movw	r3, #43691	; 0xaaab
240174b4:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
240174b8:	ee05 3a90 	vmov	s11, r3
        t = (t / dt) - 1.0f;
240174bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240174c0:	ee76 7a67 	vsub.f32	s15, s12, s15
        return -1.0f / 3.0f * t * t * t;
240174c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
240174c8:	ee26 6a25 	vmul.f32	s12, s12, s11
240174cc:	eee7 6ac6 	vfms.f32	s13, s15, s12
        return -1.0f / 3.0f * t * t * t;
240174d0:	e7b4      	b.n	2401743c <tPBTriangle_tick+0xdc>
        t = (t - 1.0f) / dt + 1.0f;
240174d2:	ee36 6a65 	vsub.f32	s12, s12, s11
        return 1.0f / 3.0f * t * t * t;
240174d6:	f64a 23ab 	movw	r3, #43691	; 0xaaab
240174da:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
        t = (t - 1.0f) / dt + 1.0f;
240174de:	eec6 6a07 	vdiv.f32	s13, s12, s14
        return 1.0f / 3.0f * t * t * t;
240174e2:	ee05 3a10 	vmov	s10, r3
        t = (t - 1.0f) / dt + 1.0f;
240174e6:	ee36 6aa5 	vadd.f32	s12, s13, s11
        return 1.0f / 3.0f * t * t * t;
240174ea:	ee66 6a06 	vmul.f32	s13, s12, s12
240174ee:	ee66 6a85 	vmul.f32	s13, s13, s10
240174f2:	ee66 6a86 	vmul.f32	s13, s13, s12
240174f6:	e781      	b.n	240173fc <tPBTriangle_tick+0x9c>
        y /= floatWidth;
240174f8:	ee85 0a84 	vdiv.f32	s0, s11, s8
240174fc:	e76d      	b.n	240173da <tPBTriangle_tick+0x7a>
240174fe:	bf00      	nop

24017500 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
24017500:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017502:	edd3 7a08 	vldr	s15, [r3, #32]
    c->freq  = freq;
24017506:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401750a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401750e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017512:	ed83 0a02 	vstr	s0, [r3, #8]
}
24017516:	4770      	bx	lr

24017518 <tPBTriangle_setSkew>:
    if (val < min)
24017518:	f24e 1348 	movw	r3, #57672	; 0xe148

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat width)
{
    _tPBTriangle* c = *osc;
2401751c:	6801      	ldr	r1, [r0, #0]
2401751e:	f6cb 737a 	movt	r3, #49018	; 0xbf7a
24017522:	ee07 3a90 	vmov	s15, r3
24017526:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401752e:	d432      	bmi.n	24017596 <tPBTriangle_setSkew+0x7e>
    else if (val > max)
24017530:	f24e 1348 	movw	r3, #57672	; 0xe148
24017534:	f6c3 737a 	movt	r3, #16250	; 0x3f7a
24017538:	ee07 3a90 	vmov	s15, r3
2401753c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017544:	dc1c      	bgt.n	24017580 <tPBTriangle_setSkew+0x68>
    width = width*0.5f + 0.5f;
24017546:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    width = LEAF_clip(0.01f, width, 0.99f);
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
2401754a:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    width = width*0.5f + 0.5f;
2401754e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24017552:	ee07 3a10 	vmov	s14, r3
    width = width*0.5f + 0.5f;
24017556:	ee30 0a27 	vadd.f32	s0, s0, s15
2401755a:	ee20 0a26 	vmul.f32	s0, s0, s13
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
2401755e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
24017562:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24017566:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
2401756a:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
2401756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
24017572:	ee17 3a10 	vmov	r3, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24017576:	ee17 2a90 	vmov	r2, s15
    c->width = width * TWO_TO_32;
2401757a:	e9c1 3204 	strd	r3, r2, [r1, #16]
}
2401757e:	4770      	bx	lr
24017580:	f44f 4324 	mov.w	r3, #41984	; 0xa400
24017584:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
24017588:	f6cf 5370 	movt	r3, #64880	; 0xfd70
2401758c:	f2c0 228f 	movt	r2, #655	; 0x28f
    c->width = width * TWO_TO_32;
24017590:	e9c1 3204 	strd	r3, r2, [r1, #16]
}
24017594:	4770      	bx	lr
24017596:	f645 4328 	movw	r3, #23592	; 0x5c28
2401759a:	f44f 4224 	mov.w	r2, #41984	; 0xa400
2401759e:	f2c0 238f 	movt	r3, #655	; 0x28f
240175a2:	f6cf 5270 	movt	r2, #64880	; 0xfd70
    c->width = width * TWO_TO_32;
240175a6:	e9c1 3204 	strd	r3, r2, [r1, #16]
}
240175aa:	4770      	bx	lr

240175ac <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
240175ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240175ae:	698e      	ldr	r6, [r1, #24]
{
240175b0:	4607      	mov	r7, r0
240175b2:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
240175b4:	2024      	movs	r0, #36	; 0x24
240175b6:	4631      	mov	r1, r6
240175b8:	f7ff fcd2 	bl	24016f60 <mpool_alloc>
240175bc:	6038      	str	r0, [r7, #0]
    c->mempool = m;
240175be:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
240175c0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240175c2:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240175c4:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
240175c6:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240175c8:	4629      	mov	r1, r5
240175ca:	f7ff fcc9 	bl	24016f60 <mpool_alloc>
    c->inc      =  0;
240175ce:	2200      	movs	r2, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240175d0:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
    c->phase    =  0;
    c->freq = 0.0f;
    c->shape     =  0.0f;
    c->oneMinusShape = 1.0f;
240175d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->mempool = m;
240175d6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240175d8:	686b      	ldr	r3, [r5, #4]
    c->phase    =  0;
240175da:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240175de:	ed93 7a01 	vldr	s14, [r3, #4]
240175e2:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
240175e6:	ee07 3a90 	vmov	s15, r3
    c->mask = SINE_TABLE_SIZE - 1;
240175ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240175ee:	ee27 7a27 	vmul.f32	s14, s14, s15
    c->mask = SINE_TABLE_SIZE - 1;
240175f2:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240175f4:	ed80 7a04 	vstr	s14, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
240175f8:	ed96 7a01 	vldr	s14, [r6, #4]
    c->inc      =  0;
240175fc:	60e2      	str	r2, [r4, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240175fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24017602:	ed84 7a07 	vstr	s14, [r4, #28]
    c->phase    =  0;
24017606:	6062      	str	r2, [r4, #4]
    c->freq = 0.0f;
24017608:	6122      	str	r2, [r4, #16]
    c->shape     =  0.0f;
2401760a:	6162      	str	r2, [r4, #20]
    c->oneMinusShape = 1.0f;
2401760c:	edc4 6a06 	vstr	s13, [r4, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017610:	edc4 7a08 	vstr	s15, [r4, #32]
}
24017614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017616:	bf00      	nop

24017618 <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
24017618:	b510      	push	{r4, lr}
    _tPBSineTriangle* c = *osc;
2401761a:	6801      	ldr	r1, [r0, #0]
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 4.0f;

    if (y >= 3.0f) {
2401761c:	f64f 7ced 	movw	ip, #65517	; 0xffed
    Lfloat t1F = t1 * INV_TWO_TO_32;
24017620:	220d      	movs	r2, #13
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
24017622:	684b      	ldr	r3, [r1, #4]
    if (y >= 3.0f) {
24017624:	f6c4 7c3f 	movt	ip, #20287	; 0x4f3f
    float y = t * 4.0f;
24017628:	4696      	mov	lr, r2
    Lfloat t1F = t1 * INV_TWO_TO_32;
2401762a:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    Lfloat t = c->phase * INV_TWO_TO_32;
2401762e:	ee07 3a90 	vmov	s15, r3
    if (y >= 3.0f) {
24017632:	ee05 ca90 	vmov	s11, ip
    Lfloat t1F = t1 * INV_TWO_TO_32;
24017636:	ee06 2a10 	vmov	s12, r2
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
2401763a:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    Lfloat t = c->phase * INV_TWO_TO_32;
2401763e:	eef8 4a67 	vcvt.f32.u32	s9, s15
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
24017642:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
24017646:	ee06 2a90 	vmov	s13, r2
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401764a:	edd1 7a03 	vldr	s15, [r1, #12]
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
2401764e:	ee07 3a10 	vmov	s14, r3
    float y = t * 4.0f;
24017652:	f2c3 0e80 	movt	lr, #12416	; 0x3080
    if (y >= 3.0f) {
24017656:	eef4 4ae5 	vcmpe.f32	s9, s11
    Lfloat t1F = t1 * INV_TWO_TO_32;
2401765a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float y = t * 4.0f;
2401765e:	ee05 ea10 	vmov	s10, lr
    Lfloat t2F = t2 * INV_TWO_TO_32;
24017662:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (y >= 3.0f) {
2401766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y = t * 4.0f;
2401766e:	ee24 5a85 	vmul.f32	s10, s9, s10
    Lfloat t1F = t1 * INV_TWO_TO_32;
24017672:	ee27 7a06 	vmul.f32	s14, s14, s12
    Lfloat t2F = t2 * INV_TWO_TO_32;
24017676:	ee66 6a86 	vmul.f32	s13, s13, s12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401767a:	ee67 7a86 	vmul.f32	s15, s15, s12
    if (y >= 3.0f) {
2401767e:	db71      	blt.n	24017764 <tPBSineTriangle_tick+0x14c>
        y -= 4.0f;
24017680:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
24017684:	ee35 5a46 	vsub.f32	s10, s10, s12
    if (t < dt) {
24017688:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017690:	d47c      	bmi.n	2401778c <tPBSineTriangle_tick+0x174>
    } else if (t > (1.0f - dt)) {
24017692:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24017696:	ee35 6ae7 	vsub.f32	s12, s11, s15
2401769a:	eeb4 7ac6 	vcmpe.f32	s14, s12
2401769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240176a2:	f300 809e 	bgt.w	240177e2 <tPBSineTriangle_tick+0x1ca>
        return 0.0f;
240176a6:	2300      	movs	r3, #0
240176a8:	ee07 3a10 	vmov	s14, r3
    if (t < dt) {
240176ac:	eef4 6ae7 	vcmpe.f32	s13, s15
240176b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240176b4:	f100 8082 	bmi.w	240177bc <tPBSineTriangle_tick+0x1a4>
    } else if (t > (1.0f - dt)) {
240176b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240176bc:	ee35 6ae7 	vsub.f32	s12, s11, s15
240176c0:	eef4 6ac6 	vcmpe.f32	s13, s12
240176c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240176c8:	dd11      	ble.n	240176ee <tPBSineTriangle_tick+0xd6>
        t = (t - 1.0f) / dt + 1.0f;
240176ca:	ee76 6ae5 	vsub.f32	s13, s13, s11
    } else if (y > 1.0f) {
        y = 2.0f - y;
    }
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240176ce:	f64a 23ab 	movw	r3, #43691	; 0xaaab
240176d2:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
        t = (t - 1.0f) / dt + 1.0f;
240176d6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240176da:	ee04 3a90 	vmov	s9, r3
        t = (t - 1.0f) / dt + 1.0f;
240176de:	ee76 6a25 	vadd.f32	s13, s12, s11
        return 1.0f / 3.0f * t * t * t;
240176e2:	ee26 6aa6 	vmul.f32	s12, s13, s13
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240176e6:	ee26 6a24 	vmul.f32	s12, s12, s9
240176ea:	eea6 7ac6 	vfms.f32	s14, s13, s12
    _tCycle* c = *cy;
240176ee:	6888      	ldr	r0, [r1, #8]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240176f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    y = y * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
240176f4:	edd1 5a05 	vldr	s11, [r1, #20]
    samp0 = __leaf_table_sinewave[idx];
240176f8:	f24b 0214 	movw	r2, #45076	; 0xb014
    c->phase += c->inc;
240176fc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
24017700:	ee67 7aa6 	vmul.f32	s15, s15, s13
    samp0 = __leaf_table_sinewave[idx];
24017704:	f2c2 4202 	movt	r2, #9218	; 0x2402
    c->phase += c->inc;
24017708:	4423      	add	r3, r4
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
2401770a:	eef0 6a45 	vmov.f32	s13, s10
    idx = (idx + 1) & c->mask;
2401770e:	6944      	ldr	r4, [r0, #20]
    c->phase += c->inc;
24017710:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
24017712:	0d58      	lsrs	r0, r3, #21
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24017714:	f3c3 0314 	ubfx	r3, r3, #0, #21
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
24017718:	eee7 6a87 	vfma.f32	s13, s15, s14

    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
2401771c:	ed91 5a06 	vldr	s10, [r1, #24]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24017720:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
24017724:	1c43      	adds	r3, r0, #1
    samp0 = __leaf_table_sinewave[idx];
24017726:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    idx = (idx + 1) & c->mask;
2401772a:	4023      	ands	r3, r4
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401772c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24017730:	ed90 0a00 	vldr	s0, [r0]
    samp1 = __leaf_table_sinewave[idx];
24017734:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017738:	2304      	movs	r3, #4
    
    c->phase += c->inc;
2401773a:	68c8      	ldr	r0, [r1, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401773c:	f2c3 5300 	movt	r3, #13568	; 0x3500
24017740:	ed92 6a00 	vldr	s12, [r2]
    c->phase += c->inc;
24017744:	684a      	ldr	r2, [r1, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017746:	ee07 3a10 	vmov	s14, r3
2401774a:	ee36 6a40 	vsub.f32	s12, s12, s0
    c->phase += c->inc;
2401774e:	4410      	add	r0, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017750:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->phase += c->inc;
24017754:	6048      	str	r0, [r1, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24017756:	eea6 0a27 	vfma.f32	s0, s12, s15
    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
2401775a:	ee20 0a05 	vmul.f32	s0, s0, s10
    
    return y;
}
2401775e:	eea5 0aa6 	vfma.f32	s0, s11, s13
24017762:	bd10      	pop	{r4, pc}
    } else if (y > 1.0f) {
24017764:	f64f 73e6 	movw	r3, #65510	; 0xffe6
24017768:	f6c4 637f 	movt	r3, #20095	; 0x4e7f
2401776c:	ee06 3a10 	vmov	s12, r3
24017770:	eef4 4ac6 	vcmpe.f32	s9, s12
24017774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017778:	dd86      	ble.n	24017688 <tPBSineTriangle_tick+0x70>
    if (t < dt) {
2401777a:	eeb4 7ae7 	vcmpe.f32	s14, s15
        y = 2.0f - y;
2401777e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    if (t < dt) {
24017782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 2.0f - y;
24017786:	ee36 5a45 	vsub.f32	s10, s12, s10
    if (t < dt) {
2401778a:	d582      	bpl.n	24017692 <tPBSineTriangle_tick+0x7a>
        t = (t / dt) - 1.0f;
2401778c:	ee87 6a27 	vdiv.f32	s12, s14, s15
        return -1.0f / 3.0f * t * t * t;
24017790:	f64a 23ab 	movw	r3, #43691	; 0xaaab
24017794:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
24017798:	ee05 3a90 	vmov	s11, r3
        t = (t / dt) - 1.0f;
2401779c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if (t < dt) {
240177a0:	eef4 6ae7 	vcmpe.f32	s13, s15
240177a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
240177a8:	ee36 6a47 	vsub.f32	s12, s12, s14
        return -1.0f / 3.0f * t * t * t;
240177ac:	ee26 7a06 	vmul.f32	s14, s12, s12
240177b0:	ee27 7a25 	vmul.f32	s14, s14, s11
240177b4:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (t < dt) {
240177b8:	f57f af7e 	bpl.w	240176b8 <tPBSineTriangle_tick+0xa0>
        t = (t / dt) - 1.0f;
240177bc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240177c0:	f64a 23ab 	movw	r3, #43691	; 0xaaab
240177c4:	f6cb 63aa 	movt	r3, #48810	; 0xbeaa
240177c8:	ee05 3a90 	vmov	s11, r3
        t = (t / dt) - 1.0f;
240177cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240177d0:	ee76 6a66 	vsub.f32	s13, s12, s13
        return -1.0f / 3.0f * t * t * t;
240177d4:	ee26 6aa6 	vmul.f32	s12, s13, s13
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240177d8:	ee26 6a25 	vmul.f32	s12, s12, s11
240177dc:	eea6 7ac6 	vfms.f32	s14, s13, s12
        return -1.0f / 3.0f * t * t * t;
240177e0:	e785      	b.n	240176ee <tPBSineTriangle_tick+0xd6>
        t = (t - 1.0f) / dt + 1.0f;
240177e2:	ee37 7a65 	vsub.f32	s14, s14, s11
        return 1.0f / 3.0f * t * t * t;
240177e6:	f64a 23ab 	movw	r3, #43691	; 0xaaab
240177ea:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
        t = (t - 1.0f) / dt + 1.0f;
240177ee:	ee87 6a27 	vdiv.f32	s12, s14, s15
        return 1.0f / 3.0f * t * t * t;
240177f2:	ee04 3a90 	vmov	s9, r3
        t = (t - 1.0f) / dt + 1.0f;
240177f6:	ee36 6a25 	vadd.f32	s12, s12, s11
        return 1.0f / 3.0f * t * t * t;
240177fa:	ee26 7a06 	vmul.f32	s14, s12, s12
240177fe:	ee27 7a24 	vmul.f32	s14, s14, s9
24017802:	ee27 7a06 	vmul.f32	s14, s14, s12
24017806:	e751      	b.n	240176ac <tPBSineTriangle_tick+0x94>

24017808 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
24017808:	6803      	ldr	r3, [r0, #0]
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401780a:	edd3 7a08 	vldr	s15, [r3, #32]
    _tCycle* c = *cy;
2401780e:	689a      	ldr	r2, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017810:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->freq  = freq;
24017814:	ed83 0a04 	vstr	s0, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401781c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017820:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
24017824:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017828:	ee20 0a27 	vmul.f32	s0, s0, s15
2401782c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017830:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
24017834:	4770      	bx	lr
24017836:	bf00      	nop

24017838 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = 1.0f * shape;
    c->oneMinusShape = 1.0f - shape;
24017838:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
2401783c:	6803      	ldr	r3, [r0, #0]
    c->shape = 1.0f * shape;
2401783e:	ed83 0a05 	vstr	s0, [r3, #20]
    c->oneMinusShape = 1.0f - shape;
24017842:	ee77 7ac0 	vsub.f32	s15, s15, s0
24017846:	edc3 7a06 	vstr	s15, [r3, #24]
}
2401784a:	4770      	bx	lr

2401784c <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
2401784c:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401784e:	698c      	ldr	r4, [r1, #24]
{
24017850:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
24017852:	2020      	movs	r0, #32
24017854:	4621      	mov	r1, r4
24017856:	f7ff fb83 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401785a:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
2401785e:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
24017860:	2100      	movs	r1, #0
    c->mempool = m;
24017862:	6004      	str	r4, [r0, #0]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017864:	ee07 3a90 	vmov	s15, r3
    c->invSampleRate = leaf->invSampleRate;
24017868:	6864      	ldr	r4, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
2401786a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c->invSampleRate = leaf->invSampleRate;
2401786e:	ed94 7a01 	vldr	s14, [r4, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
24017872:	60c1      	str	r1, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017874:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24017878:	ed80 7a06 	vstr	s14, [r0, #24]
    c->phase    =  0;
2401787c:	e9c0 1101 	strd	r1, r1, [r0, #4]
    c->oneMinusWidth =  c->width;
24017880:	e9c0 2204 	strd	r2, r2, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017884:	edc0 7a07 	vstr	s15, [r0, #28]
}
24017888:	bd38      	pop	{r3, r4, r5, pc}
2401788a:	bf00      	nop

2401788c <tPBPulse_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
    _tPBPulse* c = *osc;
2401788c:	6801      	ldr	r1, [r0, #0]
    
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
2401788e:	220d      	movs	r2, #13
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
    Lfloat out = -2.0f * widthFloat;
24017890:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24017894:	6848      	ldr	r0, [r1, #4]
24017896:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
2401789a:	694b      	ldr	r3, [r1, #20]
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
2401789c:	ee07 0a90 	vmov	s15, r0
240178a0:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
240178a4:	18c3      	adds	r3, r0, r3
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
240178a6:	eef8 5a67 	vcvt.f32.u32	s11, s15
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
240178aa:	edd1 7a04 	vldr	s15, [r1, #16]
240178ae:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
240178b2:	ee07 3a90 	vmov	s15, r3
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
240178b6:	ee65 5aa6 	vmul.f32	s11, s11, s13
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
240178ba:	688b      	ldr	r3, [r1, #8]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
240178bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
240178c0:	ee26 6a26 	vmul.f32	s12, s12, s13
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
240178c4:	ee07 3a10 	vmov	s14, r3
240178c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if (phaseFloat < widthFloat) {
240178cc:	eef4 5ac6 	vcmpe.f32	s11, s12
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
240178d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    Lfloat out = -2.0f * widthFloat;
240178d4:	ee26 0a00 	vmul.f32	s0, s12, s0
    if (phaseFloat < widthFloat) {
240178d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
240178dc:	ee27 7a26 	vmul.f32	s14, s14, s13
    if (phaseFloat < widthFloat) {
240178e0:	d503      	bpl.n	240178ea <tPBPulse_tick+0x5e>
        out += 2.0f;
240178e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
240178e6:	ee30 0a26 	vadd.f32	s0, s0, s13
    dt = fabsf(dt);
240178ea:	eeb0 7ac7 	vabs.f32	s14, s14
        if (t < dt)
240178ee:	eef4 5ac7 	vcmpe.f32	s11, s14
240178f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240178f6:	d449      	bmi.n	2401798c <tPBPulse_tick+0x100>
        else if (t > 1.0f - dt)
240178f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240178fc:	ee36 6ac7 	vsub.f32	s12, s13, s14
24017900:	eef4 5ac6 	vcmpe.f32	s11, s12
24017904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017908:	dc20      	bgt.n	2401794c <tPBPulse_tick+0xc0>
        if (t < dt)
2401790a:	eef4 7ac7 	vcmpe.f32	s15, s14
2401790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017912:	d42c      	bmi.n	2401796e <tPBPulse_tick+0xe2>
        else if (t > 1.0f - dt)
24017914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24017918:	ee36 6ac7 	vsub.f32	s12, s13, s14
2401791c:	eef4 7ac6 	vcmpe.f32	s15, s12
24017920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017924:	dd0f      	ble.n	24017946 <tPBPulse_tick+0xba>
            t = (t - 1.0f) / dt;
24017926:	ee77 7ae6 	vsub.f32	s15, s15, s13
            return t*t + t+t + 1.0f;
2401792a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
2401792e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
            t = (t - 1.0f) / dt;
24017932:	eec7 5a87 	vdiv.f32	s11, s15, s14
            return t*t + t+t + 1.0f;
24017936:	eef0 7a66 	vmov.f32	s15, s13
2401793a:	ee35 7a86 	vadd.f32	s14, s11, s12
2401793e:	eee5 7ac7 	vfms.f32	s15, s11, s14
    }
    out += LEAF_poly_blep(phaseFloat,incFloat);
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24017942:	ee30 0a27 	vadd.f32	s0, s0, s15
    c->phase += c->inc;
24017946:	4403      	add	r3, r0
24017948:	604b      	str	r3, [r1, #4]
    return out;
    
}
2401794a:	4770      	bx	lr
            t = (t - 1.0f) / dt;
2401794c:	ee75 5ae6 	vsub.f32	s11, s11, s13
            return t*t + t+t + 1.0f;
24017950:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
        if (t < dt)
24017954:	eef4 7ac7 	vcmpe.f32	s15, s14
            t = (t - 1.0f) / dt;
24017958:	ee85 5a87 	vdiv.f32	s10, s11, s14
        if (t < dt)
2401795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return t*t + t+t + 1.0f;
24017960:	ee35 6a06 	vadd.f32	s12, s10, s12
24017964:	eee5 6a06 	vfma.f32	s13, s10, s12
    out += LEAF_poly_blep(phaseFloat,incFloat);
24017968:	ee30 0a26 	vadd.f32	s0, s0, s13
        if (t < dt)
2401796c:	d5d2      	bpl.n	24017914 <tPBPulse_tick+0x88>
            t /= dt;
2401796e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    c->phase += c->inc;
24017972:	4403      	add	r3, r0
24017974:	604b      	str	r3, [r1, #4]
            return t+t - t*t - 1.0f;
24017976:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401797a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401797e:	ee37 7a66 	vsub.f32	s14, s14, s13
24017982:	eee6 7ac7 	vfms.f32	s15, s13, s14
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24017986:	ee30 0a27 	vadd.f32	s0, s0, s15
}
2401798a:	4770      	bx	lr
            t /= dt;
2401798c:	ee85 5a87 	vdiv.f32	s10, s11, s14
            return t+t - t*t - 1.0f;
24017990:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
24017994:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24017998:	ee36 6a45 	vsub.f32	s12, s12, s10
2401799c:	eee5 6a06 	vfma.f32	s13, s10, s12
    out += LEAF_poly_blep(phaseFloat,incFloat);
240179a0:	ee30 0a26 	vadd.f32	s0, s0, s13
240179a4:	e7b1      	b.n	2401790a <tPBPulse_tick+0x7e>
240179a6:	bf00      	nop

240179a8 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
240179a8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240179aa:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
240179ae:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240179b2:	ee20 0a27 	vmul.f32	s0, s0, s15
240179b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240179ba:	ed83 0a02 	vstr	s0, [r3, #8]
}
240179be:	4770      	bx	lr

240179c0 <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
240179c0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
240179c4:	f243 3333 	movw	r3, #13107	; 0x3333
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240179c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240179cc:	f6c3 524c 	movt	r2, #15692	; 0x3d4c
240179d0:	f6c3 7373 	movt	r3, #16243	; 0x3f73
240179d4:	ee06 2a90 	vmov	s13, r2
240179d8:	ee07 3a10 	vmov	s14, r3
240179dc:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tPBPulse* c = *osc;
240179e0:	6802      	ldr	r2, [r0, #0]
    if (width > 0.95f)
240179e2:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
240179e6:	fe80 0a47 	vminnm.f32	s0, s0, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240179ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
240179ee:	ee07 3a10 	vmov	s14, r3
    c->width = width * TWO_TO_32;
240179f2:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240179f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
240179fa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240179fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
24017a02:	ed82 0a04 	vstr	s0, [r2, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24017a06:	edc2 7a05 	vstr	s15, [r2, #20]
}
24017a0a:	4770      	bx	lr

24017a0c <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24017a0c:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24017a0e:	698c      	ldr	r4, [r1, #24]
{
24017a10:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24017a12:	2020      	movs	r0, #32
24017a14:	4621      	mov	r1, r4
24017a16:	f7ff faa3 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017a1a:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24017a1e:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
    c->phase    =  0;
    c->freq = 0.0f;
24017a20:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017a22:	ee07 3a90 	vmov	s15, r3
    c->mempool = m;
24017a26:	6004      	str	r4, [r0, #0]
    c->invSampleRate = leaf->invSampleRate;
24017a28:	6863      	ldr	r3, [r4, #4]
24017a2a:	ed93 7a01 	vldr	s14, [r3, #4]
    c->freq = 0.0f;
24017a2e:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017a30:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24017a34:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24017a38:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017a3c:	edc0 7a05 	vstr	s15, [r0, #20]
}
24017a40:	bd38      	pop	{r3, r4, r5, pc}
24017a42:	bf00      	nop

24017a44 <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
24017a44:	b410      	push	{r4}
    _tPBSaw* c = *osc;
24017a46:	6800      	ldr	r0, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017a48:	230d      	movs	r3, #13
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24017a4a:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017a4e:	6882      	ldr	r2, [r0, #8]
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017a50:	f6c2 7380 	movt	r3, #12160	; 0x2f80
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24017a54:	6844      	ldr	r4, [r0, #4]
24017a56:	f6c2 71ff 	movt	r1, #12287	; 0x2fff
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017a5a:	ee07 2a10 	vmov	s14, r2
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017a5e:	ee07 3a90 	vmov	s15, r3
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24017a62:	ee06 4a90 	vmov	s13, r4
24017a66:	ee06 1a10 	vmov	s12, r1
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017a6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24017a6e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017a72:	ee27 7a27 	vmul.f32	s14, s14, s15
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24017a7a:	ee66 6a86 	vmul.f32	s13, s13, s12
    dt = fabsf(dt);
24017a7e:	eeb0 7ac7 	vabs.f32	s14, s14
        if (t < dt)
24017a82:	eef4 7ac7 	vcmpe.f32	s15, s14
24017a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a8a:	d423      	bmi.n	24017ad4 <tPBSaw_tick+0x90>
        else if (t > 1.0f - dt)
24017a8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24017a90:	ee30 6a47 	vsub.f32	s12, s0, s14
24017a94:	eef4 7ac6 	vcmpe.f32	s15, s12
24017a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a9c:	dc0d      	bgt.n	24017aba <tPBSaw_tick+0x76>
        else return 0.0f;
24017a9e:	2300      	movs	r3, #0
24017aa0:	ee07 3a90 	vmov	s15, r3
    out -= LEAF_poly_blep(phaseFloat, incFloat);
    c->phase += c->inc;
    return (-1.0f * out);
24017aa4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    c->phase += c->inc;
24017aa8:	4422      	add	r2, r4
24017aaa:	6042      	str	r2, [r0, #4]
    return (-1.0f * out);
24017aac:	ee30 0a66 	vsub.f32	s0, s0, s13
}
24017ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
24017ab4:	ee30 0a27 	vadd.f32	s0, s0, s15
24017ab8:	4770      	bx	lr
            t = (t - 1.0f) / dt;
24017aba:	ee77 7ac0 	vsub.f32	s15, s15, s0
            return t*t + t+t + 1.0f;
24017abe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
            t = (t - 1.0f) / dt;
24017ac2:	eec7 5a87 	vdiv.f32	s11, s15, s14
            return t*t + t+t + 1.0f;
24017ac6:	eef0 7a40 	vmov.f32	s15, s0
24017aca:	ee35 7a86 	vadd.f32	s14, s11, s12
24017ace:	eee5 7a87 	vfma.f32	s15, s11, s14
24017ad2:	e7e7      	b.n	24017aa4 <tPBSaw_tick+0x60>
            t /= dt;
24017ad4:	ee87 6a87 	vdiv.f32	s12, s15, s14
            return t+t - t*t - 1.0f;
24017ad8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24017adc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24017ae0:	ee37 7a46 	vsub.f32	s14, s14, s12
24017ae4:	eee6 7a07 	vfma.f32	s15, s12, s14
24017ae8:	e7dc      	b.n	24017aa4 <tPBSaw_tick+0x60>
24017aea:	bf00      	nop

24017aec <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
24017aec:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017aee:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24017af2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017af6:	ee20 0a27 	vmul.f32	s0, s0, s15
24017afa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017afe:	ed83 0a02 	vstr	s0, [r3, #8]
}
24017b02:	4770      	bx	lr

24017b04 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
24017b04:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24017b06:	698c      	ldr	r4, [r1, #24]
{
24017b08:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24017b0a:	2028      	movs	r0, #40	; 0x28
24017b0c:	4621      	mov	r1, r4
24017b0e:	f7ff fa27 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017b12:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24017b16:	6028      	str	r0, [r5, #0]
    c->inc      =  0;
    c->phase    =  0;
    c->freq = 0.0f;
24017b18:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017b1a:	ee07 3a90 	vmov	s15, r3
    c->mempool = m;
24017b1e:	6004      	str	r4, [r0, #0]
    c->invSampleRate = leaf->invSampleRate;
24017b20:	6863      	ldr	r3, [r4, #4]
24017b22:	ed93 7a01 	vldr	s14, [r3, #4]
    c->freq = 0.0f;
24017b26:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017b28:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24017b2c:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24017b30:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24017b34:	edc0 7a05 	vstr	s15, [r0, #20]
}
24017b38:	bd38      	pop	{r3, r4, r5, pc}
24017b3a:	bf00      	nop

24017b3c <tPBSawSquare_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
    _tPBSawSquare* c = *osc;
24017b3c:	6802      	ldr	r2, [r0, #0]

    //Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017b3e:	230d      	movs	r3, #13
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017b40:	6891      	ldr	r1, [r2, #8]
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24017b42:	469c      	mov	ip, r3
24017b44:	6850      	ldr	r0, [r2, #4]
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017b46:	f6c2 7380 	movt	r3, #12160	; 0x2f80
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017b4a:	ee07 1a90 	vmov	s15, r1
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24017b4e:	f2c3 0c00 	movt	ip, #12288	; 0x3000
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017b52:	ee06 3a90 	vmov	s13, r3
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24017b56:	ee07 0a10 	vmov	s14, r0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24017b5e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24017b62:	eeb8 5a47 	vcvt.f32.u32	s10, s14
24017b66:	ee06 ca10 	vmov	s12, ip
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24017b6a:	ee07 3a10 	vmov	s14, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24017b6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
24017b72:	ee65 5a26 	vmul.f32	s11, s10, s13
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24017b76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    dt = fabsf(dt);
24017b7a:	eef0 7ae7 	vabs.f32	s15, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24017b7e:	ee25 6a06 	vmul.f32	s12, s10, s12
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24017b82:	ee27 7a26 	vmul.f32	s14, s14, s13
        if (t < dt)
24017b86:	eef4 5ae7 	vcmpe.f32	s11, s15
24017b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017b8e:	d467      	bmi.n	24017c60 <tPBSawSquare_tick+0x124>
        else if (t > 1.0f - dt)
24017b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24017b94:	ee76 4ae7 	vsub.f32	s9, s13, s15
24017b98:	eef4 5ae4 	vcmpe.f32	s11, s9
24017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017ba0:	dc42      	bgt.n	24017c28 <tPBSawSquare_tick+0xec>
        else return 0.0f;
24017ba2:	2300      	movs	r3, #0
24017ba4:	ee06 3a90 	vmov	s13, r3
        if (t < dt)
24017ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
24017bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017bb0:	d449      	bmi.n	24017c46 <tPBSawSquare_tick+0x10a>
        else if (t > 1.0f - dt)
24017bb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24017bb6:	ee75 4ae7 	vsub.f32	s9, s11, s15
24017bba:	eeb4 7ae4 	vcmpe.f32	s14, s9
24017bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017bc2:	dd58      	ble.n	24017c76 <tPBSawSquare_tick+0x13a>
            t = (t - 1.0f) / dt;
24017bc4:	ee37 7a65 	vsub.f32	s14, s14, s11
            return t*t + t+t + 1.0f;
24017bc8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
24017bcc:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
            t = (t - 1.0f) / dt;
24017bd0:	ee87 4a27 	vdiv.f32	s8, s14, s15
            return t*t + t+t + 1.0f;
24017bd4:	ee74 7a24 	vadd.f32	s15, s8, s9
24017bd8:	eee4 5a67 	vfms.f32	s11, s8, s15
24017bdc:	ee76 5aa5 	vadd.f32	s11, s13, s11
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    
    Lfloat squareOut = -1.0f;
    if (phaseFloat < 0.5f) {
24017be0:	f64f 73e6 	movw	r3, #65510	; 0xffe6
    Lfloat squareOut = -1.0f;
24017be4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24017be8:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
    squareOut += resetBlep;
    squareOut -= midBlep;

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24017bec:	ed92 4a08 	vldr	s8, [r2, #32]
    if (phaseFloat < 0.5f) {
24017bf0:	f6c4 63ff 	movt	r3, #20223	; 0x4eff
    c->phase += c->inc;
24017bf4:	4401      	add	r1, r0
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24017bf6:	ee37 7ac6 	vsub.f32	s14, s15, s12
24017bfa:	edd2 4a09 	vldr	s9, [r2, #36]	; 0x24
    if (phaseFloat < 0.5f) {
24017bfe:	ee06 3a10 	vmov	s12, r3
    c->phase += c->inc;
24017c02:	6051      	str	r1, [r2, #4]
    Lfloat squareOut = -1.0f;
24017c04:	eeb4 5ac6 	vcmpe.f32	s10, s12
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24017c08:	ee37 7a26 	vadd.f32	s14, s14, s13
    Lfloat squareOut = -1.0f;
24017c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c10:	bf54      	ite	pl
24017c12:	eeb0 0a63 	vmovpl.f32	s0, s7
24017c16:	eeb0 0a67 	vmovmi.f32	s0, s15
    squareOut -= midBlep;
24017c1a:	ee30 0a25 	vadd.f32	s0, s0, s11
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24017c1e:	ee20 0a04 	vmul.f32	s0, s0, s8
}
24017c22:	eea7 0a24 	vfma.f32	s0, s14, s9
24017c26:	4770      	bx	lr
            t = (t - 1.0f) / dt;
24017c28:	ee75 5ae6 	vsub.f32	s11, s11, s13
            return t*t + t+t + 1.0f;
24017c2c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
        if (t < dt)
24017c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
            t = (t - 1.0f) / dt;
24017c34:	ee85 4aa7 	vdiv.f32	s8, s11, s15
        if (t < dt)
24017c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return t*t + t+t + 1.0f;
24017c3c:	ee74 5a24 	vadd.f32	s11, s8, s9
24017c40:	eee4 6a25 	vfma.f32	s13, s8, s11
        if (t < dt)
24017c44:	d5b5      	bpl.n	24017bb2 <tPBSawSquare_tick+0x76>
            t /= dt;
24017c46:	eec7 4a27 	vdiv.f32	s9, s14, s15
            return t+t - t*t - 1.0f;
24017c4a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24017c4e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24017c52:	ee77 7ae4 	vsub.f32	s15, s15, s9
24017c56:	eee4 5ae7 	vfms.f32	s11, s9, s15
24017c5a:	ee76 5aa5 	vadd.f32	s11, s13, s11
24017c5e:	e7bf      	b.n	24017be0 <tPBSawSquare_tick+0xa4>
            t /= dt;
24017c60:	eec5 4aa7 	vdiv.f32	s9, s11, s15
            return t+t - t*t - 1.0f;
24017c64:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24017c68:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24017c6c:	ee75 5ae4 	vsub.f32	s11, s11, s9
24017c70:	eee4 6aa5 	vfma.f32	s13, s9, s11
24017c74:	e798      	b.n	24017ba8 <tPBSawSquare_tick+0x6c>
24017c76:	eef0 5a66 	vmov.f32	s11, s13
24017c7a:	e7b1      	b.n	24017be0 <tPBSawSquare_tick+0xa4>

24017c7c <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
24017c7c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
24017c7e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24017c82:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
24017c86:	ee20 0a27 	vmul.f32	s0, s0, s15
24017c8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017c8e:	ed83 0a02 	vstr	s0, [r3, #8]

}
24017c92:	4770      	bx	lr

24017c94 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
24017c94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
24017c98:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
24017c9a:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
24017c9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24017ca2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
24017ca6:	4770      	bx	lr

24017ca8 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24017ca8:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24017caa:	6995      	ldr	r5, [r2, #24]
{
24017cac:	4606      	mov	r6, r0
24017cae:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24017cb0:	2018      	movs	r0, #24
24017cb2:	4629      	mov	r1, r5
24017cb4:	f7ff f954 	bl	24016f60 <mpool_alloc>
24017cb8:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24017cba:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24017cbc:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24017cbe:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24017cc0:	691b      	ldr	r3, [r3, #16]
24017cc2:	6143      	str	r3, [r0, #20]
}
24017cc4:	bd70      	pop	{r4, r5, r6, pc}
24017cc6:	bf00      	nop

24017cc8 <tNoise_initToPool>:
{
24017cc8:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
24017cca:	6815      	ldr	r5, [r2, #0]
{
24017ccc:	4606      	mov	r6, r0
24017cce:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24017cd0:	2018      	movs	r0, #24
24017cd2:	4629      	mov	r1, r5
24017cd4:	f7ff f944 	bl	24016f60 <mpool_alloc>
24017cd8:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24017cda:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24017cdc:	686b      	ldr	r3, [r5, #4]
    n->type = type;
24017cde:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24017ce0:	691b      	ldr	r3, [r3, #16]
24017ce2:	6143      	str	r3, [r0, #20]
}
24017ce4:	bd70      	pop	{r4, r5, r6, pc}
24017ce6:	bf00      	nop

24017ce8 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
24017ce8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
24017cea:	6801      	ldr	r1, [r0, #0]
24017cec:	f7ff b9fa 	b.w	240170e4 <mpool_free>

24017cf0 <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24017cf0:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24017cf2:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24017cf4:	6963      	ldr	r3, [r4, #20]
24017cf6:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24017cf8:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24017cfa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24017cfe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24017d02:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24017d04:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24017d08:	d151      	bne.n	24017dae <tNoise_tick+0xbe>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d0a:	f64d 02a1 	movw	r2, #55457	; 0xd8a1
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d0e:	f24d 03ff 	movw	r3, #53503	; 0xd0ff
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d12:	f246 50fe 	movw	r0, #26110	; 0x65fe
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d16:	f248 712b 	movw	r1, #34603	; 0x872b
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d1a:	f6c3 52ca 	movt	r2, #15818	; 0x3dca
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d1e:	f6c3 6397 	movt	r3, #16023	; 0x3e97
24017d22:	f6c3 7176 	movt	r1, #16246	; 0x3f76
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d26:	f6c3 707f 	movt	r0, #16255	; 0x3f7f
24017d2a:	ee06 2a10 	vmov	s12, r2
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d2e:	ee06 3a90 	vmov	s13, r3
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d32:	edd4 4a02 	vldr	s9, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d36:	ee07 1a10 	vmov	s14, r1
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d3a:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d3e:	ed94 5a03 	vldr	s10, [r4, #12]
24017d42:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d46:	ee05 0a90 	vmov	s11, r0
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24017d4a:	f64b 6397 	movw	r3, #48791	; 0xbe97
24017d4e:	f64e 3185 	movw	r1, #60293	; 0xeb85
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d52:	eea4 6aa5 	vfma.f32	s12, s9, s11
24017d56:	f643 4236 	movw	r2, #15414	; 0x3c36
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d5a:	eee5 6a07 	vfma.f32	s13, s10, s14
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24017d5e:	f6c3 7386 	movt	r3, #16262	; 0x3f86
24017d62:	f6c3 7111 	movt	r1, #16145	; 0x3f11
24017d66:	f6c3 623d 	movt	r2, #15933	; 0x3e3d
24017d6a:	ee07 3a10 	vmov	s14, r3
24017d6e:	ed94 4a04 	vldr	s8, [r4, #16]
24017d72:	ee05 1a10 	vmov	s10, r1
24017d76:	ee05 2a90 	vmov	s11, r2
24017d7a:	ee27 7a87 	vmul.f32	s14, s15, s14
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24017d7e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24017d82:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24017d86:	ee76 4a26 	vadd.f32	s9, s12, s13
        return (tmp * 0.05f);
24017d8a:	f6c3 534c 	movt	r3, #15692	; 0x3d4c
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24017d8e:	eea4 7a05 	vfma.f32	s14, s8, s10
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24017d92:	edc4 6a03 	vstr	s13, [r4, #12]
        return (tmp * 0.05f);
24017d96:	ee06 3a90 	vmov	s13, r3
24017d9a:	eeb0 6a64 	vmov.f32	s12, s9
24017d9e:	eea7 6aa5 	vfma.f32	s12, s15, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24017da2:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24017da6:	ee37 7a06 	vadd.f32	s14, s14, s12
        return (tmp * 0.05f);
24017daa:	ee67 7a26 	vmul.f32	s15, s14, s13
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24017dae:	eeb0 0a67 	vmov.f32	s0, s15
24017db2:	bd10      	pop	{r4, pc}

24017db4 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24017db4:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24017db6:	698c      	ldr	r4, [r1, #24]
{
24017db8:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017dba:	201c      	movs	r0, #28
24017dbc:	4621      	mov	r1, r4
24017dbe:	f7ff f8cf 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017dc2:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017dc6:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
24017dc8:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017dca:	ee07 3a10 	vmov	s14, r3
    c->mempool = m;
24017dce:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24017dd0:	6863      	ldr	r3, [r4, #4]
    c->inc  = 0;
24017dd2:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017dd6:	edd3 7a01 	vldr	s15, [r3, #4]
24017dda:	ee67 7a87 	vmul.f32	s15, s15, s14
24017dde:	edc0 7a06 	vstr	s15, [r0, #24]
}
24017de2:	bd38      	pop	{r3, r4, r5, pc}

24017de4 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24017de4:	6801      	ldr	r1, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24017de6:	230d      	movs	r3, #13
    c->phase = (c->phase + c->inc);
24017de8:	e9d1 2001 	ldrd	r2, r0, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24017dec:	f6c2 7380 	movt	r3, #12160	; 0x2f80
    c->phase = (c->phase + c->inc);
24017df0:	4402      	add	r2, r0
    return c->phase * INV_TWO_TO_32; 
24017df2:	ee07 3a90 	vmov	s15, r3
24017df6:	ee07 2a10 	vmov	s14, r2
    c->phase = (c->phase + c->inc);
24017dfa:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24017dfc:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24017e00:	ee20 0a27 	vmul.f32	s0, s0, s15
24017e04:	4770      	bx	lr
24017e06:	bf00      	nop

24017e08 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24017e08:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017e0a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24017e0e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017e12:	ee20 0a27 	vmul.f32	s0, s0, s15
24017e16:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24017e1a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24017e1e:	4770      	bx	lr

24017e20 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
24017e20:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24017e24:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
24017e28:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24017e2c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24017e2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24017e32:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
24017e36:	ee20 0a27 	vmul.f32	s0, s0, s15
24017e3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24017e3e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24017e42:	4770      	bx	lr

24017e44 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
24017e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24017e46:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24017e4a:	698f      	ldr	r7, [r1, #24]
{
24017e4c:	4606      	mov	r6, r0
24017e4e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017e50:	2010      	movs	r0, #16
24017e52:	4639      	mov	r1, r7
24017e54:	f7ff f884 	bl	24016f60 <mpool_alloc>
24017e58:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24017e5a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017e5c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24017e5e:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017e60:	201c      	movs	r0, #28
24017e62:	4639      	mov	r1, r7
24017e64:	f7ff f87c 	bl	24016f60 <mpool_alloc>
24017e68:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24017e6a:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24017e6c:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24017e6e:	2700      	movs	r7, #0
    c->inc  = 0;
24017e70:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017e74:	edd2 7a01 	vldr	s15, [r2, #4]
24017e78:	f04f 429f 	mov.w	r2, #1333788672	; 0x4f800000
24017e7c:	ee08 2a10 	vmov	s16, r2
24017e80:	ee67 7a88 	vmul.f32	s15, s15, s16
24017e84:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017e88:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24017e8a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017e8c:	4629      	mov	r1, r5
24017e8e:	f7ff f867 	bl	24016f60 <mpool_alloc>
24017e92:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24017e94:	6005      	str	r5, [r0, #0]
void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017e96:	220d      	movs	r2, #13
    LEAF* leaf = c->mempool->leaf;
24017e98:	6869      	ldr	r1, [r5, #4]
    c->pulsewidth = pw;
24017e9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017e9e:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    c->inc  = 0;
24017ea2:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017ea6:	edd1 6a01 	vldr	s13, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017eaa:	ee07 2a10 	vmov	s14, r2
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017eae:	ee66 6a88 	vmul.f32	s13, s13, s16
24017eb2:	edc0 6a06 	vstr	s13, [r0, #24]
    _tSquareLFO *c = *cy;
24017eb6:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017eb8:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24017eba:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017ebe:	edd2 6a01 	vldr	s13, [r2, #4]
    _tIntPhasor* c = *cy;
24017ec2:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017ec4:	eef8 6a66 	vcvt.f32.u32	s13, s13
24017ec8:	eee6 7a87 	vfma.f32	s15, s13, s14
    int i = phase;
24017ecc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24017ed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24017ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24017ed8:	ee67 7a88 	vmul.f32	s15, s15, s16
24017edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017ee0:	edc3 7a01 	vstr	s15, [r3, #4]
}
24017ee4:	ecbd 8b02 	vpop	{d8}
24017ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017eea:	bf00      	nop

24017eec <tSquareLFO_initToPool>:
{
24017eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24017eee:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24017ef2:	680f      	ldr	r7, [r1, #0]
{
24017ef4:	4606      	mov	r6, r0
24017ef6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017ef8:	2010      	movs	r0, #16
24017efa:	4639      	mov	r1, r7
24017efc:	f7ff f830 	bl	24016f60 <mpool_alloc>
24017f00:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24017f02:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017f04:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24017f06:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017f08:	201c      	movs	r0, #28
24017f0a:	4639      	mov	r1, r7
24017f0c:	f7ff f828 	bl	24016f60 <mpool_alloc>
24017f10:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24017f12:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24017f14:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24017f16:	2700      	movs	r7, #0
    c->inc  = 0;
24017f18:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017f1c:	edd2 7a01 	vldr	s15, [r2, #4]
24017f20:	f04f 429f 	mov.w	r2, #1333788672	; 0x4f800000
24017f24:	ee08 2a10 	vmov	s16, r2
24017f28:	ee67 7a88 	vmul.f32	s15, s15, s16
24017f2c:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017f30:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24017f32:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017f34:	4629      	mov	r1, r5
24017f36:	f7ff f813 	bl	24016f60 <mpool_alloc>
24017f3a:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24017f3c:	6005      	str	r5, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f3e:	220d      	movs	r2, #13
    LEAF* leaf = c->mempool->leaf;
24017f40:	6869      	ldr	r1, [r5, #4]
    c->pulsewidth = pw;
24017f42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f46:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    c->inc  = 0;
24017f4a:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017f4e:	edd1 6a01 	vldr	s13, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f52:	ee07 2a10 	vmov	s14, r2
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017f56:	ee66 6a88 	vmul.f32	s13, s13, s16
24017f5a:	edc0 6a06 	vstr	s13, [r0, #24]
    _tSquareLFO *c = *cy;
24017f5e:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f60:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24017f62:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f66:	edd2 6a01 	vldr	s13, [r2, #4]
    _tIntPhasor* c = *cy;
24017f6a:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017f6c:	eef8 6a66 	vcvt.f32.u32	s13, s13
24017f70:	eee6 7a87 	vfma.f32	s15, s13, s14
    int i = phase;
24017f74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24017f78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24017f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24017f80:	ee67 7a88 	vmul.f32	s15, s15, s16
24017f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017f88:	edc3 7a01 	vstr	s15, [r3, #4]
}
24017f8c:	ecbd 8b02 	vpop	{d8}
24017f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017f92:	bf00      	nop

24017f94 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24017f94:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017f96:	230d      	movs	r3, #13
24017f98:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
24017f9c:	6891      	ldr	r1, [r2, #8]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017f9e:	f6c2 7380 	movt	r3, #12160	; 0x2f80
24017fa2:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24017fa6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24017faa:	4403      	add	r3, r0
24017fac:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24017fae:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24017fb2:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24017fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24017fb8:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24017fbc:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24017fbe:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24017fc2:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017fc4:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24017fc8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017fcc:	ee30 0a66 	vsub.f32	s0, s0, s13
24017fd0:	ee77 7ac6 	vsub.f32	s15, s15, s12
24017fd4:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24017fd8:	ee30 0a00 	vadd.f32	s0, s0, s0
24017fdc:	4770      	bx	lr
24017fde:	bf00      	nop

24017fe0 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24017fe0:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24017fe2:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017fe4:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24017fe8:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017fec:	ee60 7a27 	vmul.f32	s15, s0, s15
24017ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017ff4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24017ff8:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017ffa:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24017ffe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018002:	ee20 0a27 	vmul.f32	s0, s0, s15
24018006:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401800a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401800e:	4770      	bx	lr

24018010 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24018010:	6801      	ldr	r1, [r0, #0]
    c->phase = phase * TWO_TO_32;
24018012:	f04f 429f 	mov.w	r2, #1333788672	; 0x4f800000
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018016:	230d      	movs	r3, #13
    c->phase = phase * TWO_TO_32;
24018018:	ee07 2a10 	vmov	s14, r2
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401801c:	688a      	ldr	r2, [r1, #8]
    c->pulsewidth = pw;
2401801e:	ed81 0a01 	vstr	s0, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018022:	f6c2 7380 	movt	r3, #12160	; 0x2f80
24018026:	edd2 6a01 	vldr	s13, [r2, #4]
2401802a:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
2401802e:	68cb      	ldr	r3, [r1, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018030:	eef8 6a66 	vcvt.f32.u32	s13, s13
24018034:	eea6 0aa7 	vfma.f32	s0, s13, s15
    int i = phase;
24018038:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
2401803c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018040:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24018044:	ee20 0a07 	vmul.f32	s0, s0, s14
24018048:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401804c:	ed83 0a01 	vstr	s0, [r3, #4]
}
24018050:	4770      	bx	lr
24018052:	bf00      	nop

24018054 <tSquareLFO_setPhase>:
    int i = phase;
24018054:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24018058:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401805c:	220d      	movs	r2, #13
    c->phase = phase * TWO_TO_32;
2401805e:	ee07 3a10 	vmov	s14, r3
    _tSquareLFO *c = *cy;
24018062:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24018064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018068:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    _tIntPhasor* c = *cy;
2401806c:	6899      	ldr	r1, [r3, #8]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401806e:	ee06 2a90 	vmov	s13, r2
    phase -= i;
24018072:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24018076:	ee20 0a07 	vmul.f32	s0, s0, s14
2401807a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401807e:	ed81 0a01 	vstr	s0, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018082:	689a      	ldr	r2, [r3, #8]
24018084:	edd3 7a01 	vldr	s15, [r3, #4]
24018088:	ed92 6a01 	vldr	s12, [r2, #4]
    _tIntPhasor* c = *cy;
2401808c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401808e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
24018092:	eee6 7a26 	vfma.f32	s15, s12, s13
    int i = phase;
24018096:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    phase -= i;
2401809a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2401809e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->phase = phase * TWO_TO_32;
240180a2:	ee67 7a87 	vmul.f32	s15, s15, s14
240180a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240180aa:	edc3 7a01 	vstr	s15, [r3, #4]
}
240180ae:	4770      	bx	lr

240180b0 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
240180b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240180b2:	460c      	mov	r4, r1
{
240180b4:	4606      	mov	r6, r0
240180b6:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240180b8:	2010      	movs	r0, #16
    _tMempool* m = *mp;
240180ba:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240180be:	4639      	mov	r1, r7
240180c0:	f7fe ff4e 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
240180c4:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240180c6:	6030      	str	r0, [r6, #0]
240180c8:	4604      	mov	r4, r0
    c->mempool = m;
240180ca:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
240180ce:	f7ff ff0d 	bl	24017eec <tSquareLFO_initToPool>
    _tMempool* m = *mp;
240180d2:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240180d4:	201c      	movs	r0, #28
240180d6:	4629      	mov	r1, r5
240180d8:	f7fe ff42 	bl	24016f60 <mpool_alloc>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240180dc:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240180e0:	60a0      	str	r0, [r4, #8]
    c->phase    =  0;
240180e2:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240180e4:	ee07 3a10 	vmov	s14, r3
    c->mempool = m;
240180e8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240180ea:	686b      	ldr	r3, [r5, #4]
    c->inc  = 0;
240180ec:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240180f0:	edd3 7a01 	vldr	s15, [r3, #4]
240180f4:	ee67 7a87 	vmul.f32	s15, s15, s14
240180f8:	edc0 7a06 	vstr	s15, [r0, #24]
}
240180fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240180fe:	bf00      	nop

24018100 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24018100:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24018102:	230d      	movs	r3, #13
    _tSawSquareLFO* c = *cy;
24018104:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24018106:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tIntPhasor* c = *cy;
2401810a:	6891      	ldr	r1, [r2, #8]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
2401810c:	f6c2 7380 	movt	r3, #12160	; 0x2f80
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24018110:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24018114:	ee06 3a10 	vmov	s12, r3
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24018118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
2401811c:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24018120:	4403      	add	r3, r0
24018122:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24018124:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
24018128:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
2401812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
2401812e:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
24018130:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24018132:	eee7 5a86 	vfma.f32	s11, s15, s12
    c->phase = (c->phase + c->inc);
24018136:	6884      	ldr	r4, [r0, #8]
24018138:	4423      	add	r3, r4
2401813a:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
2401813c:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24018140:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
24018142:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24018146:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
2401814a:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
2401814c:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
24018150:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24018152:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24018156:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401815a:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
2401815e:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24018162:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24018166:	ee76 6ac5 	vsub.f32	s13, s13, s10
2401816a:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
2401816e:	ee30 0a00 	vadd.f32	s0, s0, s0
24018172:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24018176:	eee7 6a86 	vfma.f32	s13, s15, s12
    return  (1 - c->shape) * a + c->shape * b; 
2401817a:	ee20 0a26 	vmul.f32	s0, s0, s13
}
2401817e:	eea5 0a87 	vfma.f32	s0, s11, s14
24018182:	4770      	bx	lr

24018184 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
24018184:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
24018186:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24018188:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401818a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401818e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018192:	ee60 7a27 	vmul.f32	s15, s0, s15
24018196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401819a:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
2401819e:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240181a0:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240181a4:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240181a8:	ee60 7a27 	vmul.f32	s15, s0, s15
240181ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240181b0:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240181b4:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240181b6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240181ba:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240181be:	ee20 0a27 	vmul.f32	s0, s0, s15
240181c2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240181c6:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
240181ca:	4770      	bx	lr

240181cc <tSawSquareLFO_setPhase>:
    int i = phase;
240181cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240181d0:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240181d4:	220d      	movs	r2, #13
    c->phase = phase * TWO_TO_32;
240181d6:	ee07 3a10 	vmov	s14, r3
    phase -= i;
240181da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240181de:	f6c2 7280 	movt	r2, #12160	; 0x2f80
    _tSawSquareLFO* c = *cy;
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
240181e2:	b410      	push	{r4}
    phase -= i;
240181e4:	ee30 0a67 	vsub.f32	s0, s0, s15
    _tSawSquareLFO* c = *cy;
240181e8:	6800      	ldr	r0, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240181ea:	ee06 2a90 	vmov	s13, r2
    _tSquareLFO *c = *cy;
240181ee:	68c1      	ldr	r1, [r0, #12]
    c->phase = phase * TWO_TO_32;
240181f0:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tIntPhasor* c = *cy;
240181f4:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
240181f6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
240181fa:	edc2 7a01 	vstr	s15, [r2, #4]
240181fe:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24018202:	688c      	ldr	r4, [r1, #8]
24018204:	edd1 7a01 	vldr	s15, [r1, #4]
24018208:	ed94 6a01 	vldr	s12, [r4, #4]
    _tIntPhasor* c = *cy;
2401820c:	68ca      	ldr	r2, [r1, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401820e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
24018212:	eee6 7a26 	vfma.f32	s15, s12, s13
    int i = phase;
24018216:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    phase -= i;
2401821a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2401821e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->phase = phase * TWO_TO_32;
24018222:	ee67 7a87 	vmul.f32	s15, s15, s14
24018226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401822a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
2401822e:	6882      	ldr	r2, [r0, #8]
    c->phase = phase * TWO_TO_32;
24018230:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24018232:	f85d 4b04 	ldr.w	r4, [sp], #4
24018236:	4770      	bx	lr

24018238 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
24018238:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
2401823a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401823e:	4770      	bx	lr

24018240 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
24018240:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24018242:	698d      	ldr	r5, [r1, #24]
{
24018244:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24018246:	2018      	movs	r0, #24
24018248:	4629      	mov	r1, r5
2401824a:	f7fe fe89 	bl	24016f60 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
2401824e:	2200      	movs	r2, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24018250:	6020      	str	r0, [r4, #0]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24018252:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
    c->mempool = m;
24018256:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24018258:	6869      	ldr	r1, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401825a:	ee07 3a90 	vmov	s15, r3

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
2401825e:	4613      	mov	r3, r2
    c->phase    =  0;
24018260:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24018264:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq  = freq;
24018268:	f2c4 335c 	movt	r3, #17244	; 0x435c
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401826c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24018270:	ed80 7a04 	vstr	s14, [r0, #16]
    c->freq  = freq;
24018274:	ee07 3a10 	vmov	s14, r3
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24018278:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
2401827c:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401827e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24018282:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018286:	ee67 7a87 	vmul.f32	s15, s15, s14
2401828a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401828e:	edc3 7a02 	vstr	s15, [r3, #8]
}
24018292:	bd38      	pop	{r3, r4, r5, pc}

24018294 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24018294:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24018296:	f64f 73f6 	movw	r3, #65526	; 0xfff6
2401829a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401829e:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
    c->phase += c->inc;
240182a2:	e9d1 2001 	ldrd	r2, r0, [r1, #4]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240182a6:	ee07 3a10 	vmov	s14, r3
    c->phase += c->inc;
240182aa:	4410      	add	r0, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240182ac:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
    c->phase += c->inc;
240182b0:	6048      	str	r0, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
240182b2:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
240182b6:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240182ba:	ee07 3a90 	vmov	s15, r3
240182be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240182c2:	eea7 0a87 	vfma.f32	s0, s15, s14
}
240182c6:	ee30 0a00 	vadd.f32	s0, s0, s0
240182ca:	4770      	bx	lr

240182cc <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
240182cc:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240182ce:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240182d2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240182d6:	ee20 0a27 	vmul.f32	s0, s0, s15
240182da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240182de:	ed83 0a02 	vstr	s0, [r3, #8]
}
240182e2:	4770      	bx	lr

240182e4 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
240182e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
240182e8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240182ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240182ee:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
240182f2:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
240182f6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240182fa:	4770      	bx	lr

240182fc <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
240182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240182fe:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24018302:	698f      	ldr	r7, [r1, #24]
{
24018304:	4606      	mov	r6, r0
24018306:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24018308:	2010      	movs	r0, #16
2401830a:	4639      	mov	r1, r7
2401830c:	f7fe fe28 	bl	24016f60 <mpool_alloc>
24018310:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24018312:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24018314:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24018316:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24018318:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401831a:	4631      	mov	r1, r6
2401831c:	f7fe fe20 	bl	24016f60 <mpool_alloc>
24018320:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24018322:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24018324:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
24018326:	2600      	movs	r6, #0
    c->phase    =  0;
24018328:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
2401832c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24018330:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
24018334:	ee08 3a10 	vmov	s16, r3
    c->invSampleRate = leaf->invSampleRate;
24018338:	edc0 7a04 	vstr	s15, [r0, #16]
    c->freq  = freq;
2401833c:	4633      	mov	r3, r6
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401833e:	ee67 7a88 	vmul.f32	s15, s15, s16
    c->freq  = freq;
24018342:	f2c4 335c 	movt	r3, #17244	; 0x435c
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24018346:	edc0 7a05 	vstr	s15, [r0, #20]
    c->freq  = freq;
2401834a:	ee07 3a10 	vmov	s14, r3
    _tTriLFO* c = *cy;
2401834e:	68a2      	ldr	r2, [r4, #8]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24018350:	2018      	movs	r0, #24
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018352:	edd2 7a05 	vldr	s15, [r2, #20]
    c->freq  = freq;
24018356:	60d3      	str	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018358:	ee67 7a87 	vmul.f32	s15, s15, s14
2401835c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24018360:	edc2 7a02 	vstr	s15, [r2, #8]
    _tMempool* m = *mp;
24018364:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24018366:	4629      	mov	r1, r5
24018368:	f7fe fdfa 	bl	24016f60 <mpool_alloc>
2401836c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
2401836e:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24018370:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
24018374:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
24018376:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401837a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
2401837e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24018380:	ee67 7a88 	vmul.f32	s15, s15, s16
24018384:	edc0 7a04 	vstr	s15, [r0, #16]
}
24018388:	ecbd 8b02 	vpop	{d8}
2401838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401838e:	bf00      	nop

24018390 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24018390:	b430      	push	{r4, r5}
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24018392:	2304      	movs	r3, #4
    _tSineTriLFO* c = *cy;
24018394:	6804      	ldr	r4, [r0, #0]
    samp0 = __leaf_table_sinewave[idx];
24018396:	f24b 0214 	movw	r2, #45076	; 0xb014
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401839a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
2401839e:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183a0:	f2c3 5300 	movt	r3, #13568	; 0x3500
    samp0 = __leaf_table_sinewave[idx];
240183a4:	f2c2 4202 	movt	r2, #9218	; 0x2402
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
240183a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183ac:	ee07 3a10 	vmov	s14, r3
    idx = (idx + 1) & c->mask;
240183b0:	6945      	ldr	r5, [r0, #20]
    c->phase += c->inc;
240183b2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
240183b6:	440b      	add	r3, r1
240183b8:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
240183ba:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
240183bc:	f3c3 0314 	ubfx	r3, r3, #0, #21
    _tTriLFO* c = *cy;
240183c0:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
240183c2:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
240183c6:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
240183c8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
240183cc:	402b      	ands	r3, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp1 = __leaf_table_sinewave[idx];
240183d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240183d6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183da:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
240183de:	ed91 7a00 	vldr	s14, [r1]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183e2:	edd2 4a00 	vldr	s9, [r2]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240183e6:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
    c->phase += c->inc;
240183ea:	6841      	ldr	r1, [r0, #4]
240183ec:	6882      	ldr	r2, [r0, #8]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240183ee:	ee06 3a90 	vmov	s13, r3
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183f2:	ee74 4ac7 	vsub.f32	s9, s9, s14
    c->phase += c->inc;
240183f6:	188a      	adds	r2, r1, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240183f8:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240183fc:	eea7 7aa4 	vfma.f32	s14, s15, s9
    c->phase += c->inc;
24018400:	6042      	str	r2, [r0, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24018402:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24018406:	ed94 5a01 	vldr	s10, [r4, #4]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401840a:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
2401840e:	ee35 0a05 	vadd.f32	s0, s10, s10
24018412:	ee36 6a45 	vsub.f32	s12, s12, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24018416:	ee07 3a90 	vmov	s15, r3
2401841a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2401841e:	bc30      	pop	{r4, r5}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24018420:	eee7 5aa6 	vfma.f32	s11, s15, s13
    return  (1.0f - c->shape) * a + c->shape * b;
24018424:	ee20 0a25 	vmul.f32	s0, s0, s11
}
24018428:	eea6 0a07 	vfma.f32	s0, s12, s14
2401842c:	4770      	bx	lr
2401842e:	bf00      	nop

24018430 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
24018430:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24018432:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018434:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24018438:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401843c:	ee60 7a27 	vmul.f32	s15, s0, s15
24018440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24018444:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24018448:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401844a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
2401844e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24018452:	ee20 0a27 	vmul.f32	s0, s0, s15
24018456:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401845a:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
2401845e:	4770      	bx	lr

24018460 <tSineTriLFO_setPhase>:
    int i = phase;
24018460:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32_INT;
24018464:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
24018468:	ee07 3a90 	vmov	s15, r3
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
2401846c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401846e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tTriLFO* c = *cy;
24018472:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24018474:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32_INT;
24018478:	ee20 0a27 	vmul.f32	s0, s0, s15
2401847c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24018480:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24018484:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24018488:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
2401848a:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
2401848e:	4770      	bx	lr

24018490 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24018490:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24018492:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24018496:	4770      	bx	lr

24018498 <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
24018498:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
2401849a:	698d      	ldr	r5, [r1, #24]
{
2401849c:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
2401849e:	2008      	movs	r0, #8
240184a0:	4629      	mov	r1, r5
240184a2:	f7fe fd5d 	bl	24016f60 <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
240184a6:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
240184a8:	6020      	str	r0, [r4, #0]
    p->mempool = m;
240184aa:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
240184ac:	6043      	str	r3, [r0, #4]
}
240184ae:	bd38      	pop	{r3, r4, r5, pc}

240184b0 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
240184b0:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
240184b2:	6801      	ldr	r1, [r0, #0]
240184b4:	f7fe be16 	b.w	240170e4 <mpool_free>

240184b8 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
240184b8:	ee30 7a00 	vadd.f32	s14, s0, s0
240184bc:	f24d 7177 	movw	r1, #55159	; 0xd777
240184c0:	f640 126c 	movw	r2, #2412	; 0x96c
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240184c4:	f244 73ed 	movw	r3, #18413	; 0x47ed
240184c8:	f6c3 2159 	movt	r1, #14937	; 0x3a59
240184cc:	f6c3 12f9 	movt	r2, #14841	; 0x39f9
240184d0:	ee27 5a07 	vmul.f32	s10, s14, s14
240184d4:	ee06 1a90 	vmov	s13, r1
240184d8:	f6c3 330a 	movt	r3, #15114	; 0x3b0a
240184dc:	ee06 2a10 	vmov	s12, r2
240184e0:	f642 711b 	movw	r1, #12059	; 0x2f1b
240184e4:	ee65 4a07 	vmul.f32	s9, s10, s14
240184e8:	f649 129a 	movw	r2, #39322	; 0x999a
240184ec:	eea7 6a26 	vfma.f32	s12, s14, s13
240184f0:	ee07 3a90 	vmov	s15, r3
240184f4:	f6c3 31dd 	movt	r1, #15325	; 0x3bdd
240184f8:	f6c3 5299 	movt	r2, #15769	; 0x3d99
240184fc:	ee64 7aa7 	vmul.f32	s15, s9, s15
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
24018500:	f64b 43ed 	movw	r3, #48365	; 0xbced
24018504:	ee05 1a90 	vmov	s11, r1
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24018508:	ee06 2a90 	vmov	s13, r2
	Lfloat y = out - p->prev;
2401850c:	f2c4 038b 	movt	r3, #16523	; 0x408b
24018510:	6802      	ldr	r2, [r0, #0]
24018512:	eee5 7a25 	vfma.f32	s15, s10, s11
24018516:	eee4 6a86 	vfma.f32	s13, s9, s12
2401851a:	ed92 0a01 	vldr	s0, [r2, #4]
2401851e:	ee06 3a10 	vmov	s12, r3
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24018522:	eee7 7a26 	vfma.f32	s15, s14, s13
	return y;
}
24018526:	ee97 0a86 	vfnms.f32	s0, s15, s12
2401852a:	4770      	bx	lr

2401852c <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
2401852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24018530:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24018534:	f8d3 8000 	ldr.w	r8, [r3]
{
24018538:	b083      	sub	sp, #12
2401853a:	460e      	mov	r6, r1
2401853c:	4683      	mov	fp, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
2401853e:	4641      	mov	r1, r8
24018540:	2070      	movs	r0, #112	; 0x70
{
24018542:	461d      	mov	r5, r3
24018544:	eeb0 8a40 	vmov.f32	s16, s0
24018548:	eeb0 9a41 	vmov.f32	s18, s2
2401854c:	4617      	mov	r7, r2
2401854e:	eef0 9a61 	vmov.f32	s19, s3
24018552:	eeb0 aa42 	vmov.f32	s20, s4
24018556:	eeb0 ba62 	vmov.f32	s22, s5
2401855a:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
2401855e:	f7fe fcff 	bl	24016f60 <mpool_alloc>
24018562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018566:	f8cb 0000 	str.w	r0, [fp]
    p->mempool = m;
2401856a:	f8c0 8000 	str.w	r8, [r0]
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
2401856e:	ee07 6a90 	vmov	s15, r6
    LEAF* leaf = p->mempool->leaf;
24018572:	f8d8 3004 	ldr.w	r3, [r8, #4]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24018576:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
2401857a:	ee87 ca08 	vdiv.f32	s24, s14, s16
    p->oversampling = oversampling;
2401857e:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->sampleRate = leaf->sampleRate * oversampling;
24018580:	ed93 7a00 	vldr	s14, [r3]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24018584:	f24d 730a 	movw	r3, #55050	; 0xd70a
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24018588:	4604      	mov	r4, r0
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401858a:	f100 0858 	add.w	r8, r0, #88	; 0x58
2401858e:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24018592:	f100 0a34 	add.w	sl, r0, #52	; 0x34
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24018596:	4629      	mov	r1, r5
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24018598:	f104 0938 	add.w	r9, r4, #56	; 0x38
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401859c:	ee00 3a90 	vmov	s1, r3
    p->sampleRate = leaf->sampleRate * oversampling;
240185a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->curr=0.0f;
240185a4:	2300      	movs	r3, #0
240185a6:	6243      	str	r3, [r0, #36]	; 0x24
    p->maxLength = 2400 * oversampling;
240185a8:	f44f 6316 	mov.w	r3, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
240185ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    p->maxLength = 2400 * oversampling;
240185b0:	fb03 f606 	mul.w	r6, r3, r6
    p->sampleRate = leaf->sampleRate * oversampling;
240185b4:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->maxLength = 2400 * oversampling;
240185b8:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240185ba:	4640      	mov	r0, r8
240185bc:	ee2c 0a2a 	vmul.f32	s0, s24, s21
240185c0:	ee20 0a27 	vmul.f32	s0, s0, s15
240185c4:	f7fa fe3a 	bl	2401323c <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
240185c8:	ed94 0a02 	vldr	s0, [r4, #8]
240185cc:	462a      	mov	r2, r5
240185ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
240185d0:	4650      	mov	r0, sl
240185d2:	f7f9 fb97 	bl	24011d04 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
240185d6:	462a      	mov	r2, r5
240185d8:	ed94 0a02 	vldr	s0, [r4, #8]
240185dc:	4648      	mov	r0, r9
240185de:	6b21      	ldr	r1, [r4, #48]	; 0x30
240185e0:	f7f9 fb90 	bl	24011d04 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
240185e4:	f8db 6000 	ldr.w	r6, [fp]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
    if (waveLength<4.8) waveLength=4.8f;
240185e8:	f243 3233 	movw	r2, #13107	; 0x3333
240185ec:	f243 3333 	movw	r3, #13107	; 0x3333
    Lfloat waveLength = (p->sampleRate/freq);
240185f0:	edd6 6a18 	vldr	s13, [r6, #96]	; 0x60
    if (waveLength<4.8) waveLength=4.8f;
240185f4:	f2c3 3233 	movt	r2, #13107	; 0x3333
240185f8:	f2c4 0313 	movt	r3, #16403	; 0x4013
    Lfloat waveLength = (p->sampleRate/freq);
240185fc:	ee6c 6a26 	vmul.f32	s13, s24, s13
    p->freq = freq;
24018600:	ed86 8a01 	vstr	s16, [r6, #4]
    if (waveLength<4.8) waveLength=4.8f;
24018604:	ec43 2b17 	vmov	d7, r2, r3
24018608:	eeb7 5ae6 	vcvt.f64.f32	d5, s13
2401860c:	eeb4 5bc7 	vcmpe.f64	d5, d7
24018610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018614:	f100 80e5 	bmi.w	240187e2 <tSimpleLivingString3_initToPool+0x2b6>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24018618:	6b33      	ldr	r3, [r6, #48]	; 0x30
2401861a:	005b      	lsls	r3, r3, #1
2401861c:	ee07 3a90 	vmov	s15, r3
24018620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24018624:	fec7 7ae6 	vminnm.f32	s15, s15, s13
24018628:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401862c:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24018630:	ed86 0a02 	vstr	s0, [r6, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24018634:	f7fa fe3e 	bl	240132b4 <tExpSmooth_setDest>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24018638:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
2401863c:	f647 03c4 	movw	r3, #30916	; 0x78c4
24018640:	ed96 7a05 	vldr	s14, [r6, #20]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018644:	ed96 6a01 	vldr	s12, [r6, #4]
24018648:	f247 00a4 	movw	r0, #28836	; 0x70a4
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401864c:	f6c3 538d 	movt	r3, #15757	; 0x3d8d
24018650:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018654:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24018658:	f24a 31d7 	movw	r1, #41943	; 0xa3d7
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401865c:	ee07 3a90 	vmov	s15, r3
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018660:	f6c0 203d 	movt	r0, #2621	; 0xa3d
24018664:	f2cc 011b 	movt	r1, #49179	; 0xc01b
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24018668:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401866c:	ee27 7a27 	vmul.f32	s14, s14, s15
    tHighpass_initToPool(&p->DCblocker,13, mp);
24018670:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24018674:	9301      	str	r3, [sp, #4]
    p->rippleDelay = 0.5f;
24018676:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401867a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401867e:	ec41 0b10 	vmov	d0, r0, r1
24018682:	ee27 7b06 	vmul.f64	d7, d7, d6
24018686:	ee80 0b07 	vdiv.f64	d0, d0, d7
2401868a:	f004 f971 	bl	2401c970 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
2401868e:	4650      	mov	r0, sl
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018690:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018694:	ed86 0a04 	vstr	s0, [r6, #16]
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24018698:	ed94 0a02 	vldr	s0, [r4, #8]
2401869c:	f7f9 fc38 	bl	24011f10 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
240186a0:	ed94 0a02 	vldr	s0, [r4, #8]
240186a4:	4648      	mov	r0, r9
240186a6:	f7f9 fc33 	bl	24011f10 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
240186aa:	4650      	mov	r0, sl
240186ac:	f7f9 fba6 	bl	24011dfc <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
240186b0:	4648      	mov	r0, r9
240186b2:	f7f9 fba3 	bl	24011dfc <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
240186b6:	9b01      	ldr	r3, [sp, #4]
240186b8:	4629      	mov	r1, r5
240186ba:	eeb0 0a68 	vmov.f32	s0, s17
240186be:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
240186c0:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
240186c4:	f7fb f8d0 	bl	24013868 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
240186c8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
240186cc:	9801      	ldr	r0, [sp, #4]
240186ce:	f7fb f92d 	bl	2401392c <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240186d2:	eeb0 0a68 	vmov.f32	s0, s17
240186d6:	9801      	ldr	r0, [sp, #4]
240186d8:	f7fb f8fc 	bl	240138d4 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
240186dc:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
240186de:	4629      	mov	r1, r5
240186e0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
240186e4:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
240186e6:	4658      	mov	r0, fp
    p->rippleDelay = 0.5f;
240186e8:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
240186ec:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
240186f0:	f8cd b004 	str.w	fp, [sp, #4]
240186f4:	f7fb fd5a 	bl	240141ac <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
240186f8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
240186fc:	9801      	ldr	r0, [sp, #4]
240186fe:	f7fb fd95 	bl	2401422c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24018702:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24018706:	9801      	ldr	r0, [sp, #4]
24018708:	f7fb fd74 	bl	240141f4 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401870c:	462a      	mov	r2, r5
2401870e:	eeb0 1a4b 	vmov.f32	s2, s22
24018712:	f104 0054 	add.w	r0, r4, #84	; 0x54
24018716:	eef0 0a4a 	vmov.f32	s1, s20
2401871a:	4639      	mov	r1, r7
2401871c:	eeb0 0a69 	vmov.f32	s0, s19
    p->userDecay = decay;
24018720:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24018724:	f7fa f9b6 	bl	24012a94 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24018728:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
    if (waveLength<4.8) waveLength=4.8f;
2401872c:	f243 3233 	movw	r2, #13107	; 0x3333
24018730:	f243 3333 	movw	r3, #13107	; 0x3333
    Lfloat waveLength = (p->sampleRate/freq);
24018734:	ee6c 7a27 	vmul.f32	s15, s24, s15
    p->levMode=levMode;
24018738:	6227      	str	r7, [r4, #32]
    if (waveLength<4.8) waveLength=4.8f;
2401873a:	f2c3 3233 	movt	r2, #13107	; 0x3333
2401873e:	f2c4 0313 	movt	r3, #16403	; 0x4013
    p->changeGainCompensator = 1.0f;
24018742:	edc4 ba07 	vstr	s23, [r4, #28]
    if (waveLength<4.8) waveLength=4.8f;
24018746:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
    p->freq = freq;
2401874a:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
2401874e:	ec43 2b16 	vmov	d6, r2, r3
24018752:	eeb4 5bc6 	vcmpe.f64	d5, d6
24018756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401875a:	d449      	bmi.n	240187f0 <tSimpleLivingString3_initToPool+0x2c4>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
2401875c:	6b23      	ldr	r3, [r4, #48]	; 0x30
2401875e:	005b      	lsls	r3, r3, #1
24018760:	ee00 3a10 	vmov	s0, r3
24018764:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24018768:	fe80 0a67 	vminnm.f32	s0, s0, s15
2401876c:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24018770:	4640      	mov	r0, r8
    p->waveLengthInSamples =  waveLength * 0.5f;
24018772:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24018776:	f7fa fd9d 	bl	240132b4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401877a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401877e:	f647 01c4 	movw	r1, #30916	; 0x78c4
24018782:	ed94 7a05 	vldr	s14, [r4, #20]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018786:	ed94 6a01 	vldr	s12, [r4, #4]
2401878a:	f247 02a4 	movw	r2, #28836	; 0x70a4
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401878e:	f6c3 518d 	movt	r1, #15757	; 0x3d8d
24018792:	ee37 7a27 	vadd.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24018796:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
2401879a:	f24a 33d7 	movw	r3, #41943	; 0xa3d7
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401879e:	ee07 1a90 	vmov	s15, r1
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240187a2:	f6c0 223d 	movt	r2, #2621	; 0xa3d
240187a6:	f2cc 031b 	movt	r3, #49179	; 0xc01b
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240187aa:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240187ae:	ec43 2b10 	vmov	d0, r2, r3
240187b2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240187b6:	ee27 7b06 	vmul.f64	d7, d7, d6
240187ba:	ee80 0b07 	vdiv.f64	d0, d0, d7
240187be:	f004 f8d7 	bl	2401c970 <exp>
    p->pickupPoint = 0.9f;
240187c2:	f246 6366 	movw	r3, #26214	; 0x6666
    p->prevDelayLength = p->waveLengthInSamples;
240187c6:	68a2      	ldr	r2, [r4, #8]
    p->pickupPoint = 0.9f;
240187c8:	f6c3 7366 	movt	r3, #16230	; 0x3f66
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240187cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
240187d0:	61a2      	str	r2, [r4, #24]
    p->pickupPoint = 0.9f;
240187d2:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240187d4:	ed84 0a04 	vstr	s0, [r4, #16]
}
240187d8:	b003      	add	sp, #12
240187da:	ecbd 8b0a 	vpop	{d8-d12}
240187de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240187e2:	f649 139a 	movw	r3, #39322	; 0x999a
240187e6:	f2c4 0319 	movt	r3, #16409	; 0x4019
240187ea:	ee00 3a10 	vmov	s0, r3
240187ee:	e71d      	b.n	2401862c <tSimpleLivingString3_initToPool+0x100>
240187f0:	f649 139a 	movw	r3, #39322	; 0x999a
240187f4:	f2c4 0319 	movt	r3, #16409	; 0x4019
240187f8:	ee00 3a10 	vmov	s0, r3
240187fc:	e7b8      	b.n	24018770 <tSimpleLivingString3_initToPool+0x244>
240187fe:	bf00      	nop

24018800 <tSimpleLivingString3_free>:
{
24018800:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24018802:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
24018804:	f104 0054 	add.w	r0, r4, #84	; 0x54
24018808:	f7fa f96c 	bl	24012ae4 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
2401880c:	f104 0050 	add.w	r0, r4, #80	; 0x50
24018810:	f7fb fcec 	bl	240141ec <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
24018814:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24018818:	f7fb f858 	bl	240138cc <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
2401881c:	f104 0038 	add.w	r0, r4, #56	; 0x38
24018820:	f7f9 fae0 	bl	24011de4 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
24018824:	f104 0034 	add.w	r0, r4, #52	; 0x34
24018828:	f7f9 fadc 	bl	24011de4 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
2401882c:	f104 0058 	add.w	r0, r4, #88	; 0x58
24018830:	f7fa fd2a 	bl	24013288 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
24018834:	6821      	ldr	r1, [r4, #0]
24018836:	4620      	mov	r0, r4
}
24018838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
2401883c:	f7fe bc52 	b.w	240170e4 <mpool_free>

24018840 <tSimpleLivingString3_setFreq>:
{
24018840:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24018842:	6804      	ldr	r4, [r0, #0]
    if (waveLength<4.8) waveLength=4.8f;
24018844:	f243 3233 	movw	r2, #13107	; 0x3333
24018848:	f243 3333 	movw	r3, #13107	; 0x3333
    Lfloat waveLength = (p->sampleRate/freq);
2401884c:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
    if (waveLength<4.8) waveLength=4.8f;
24018850:	f2c3 3233 	movt	r2, #13107	; 0x3333
24018854:	f2c4 0313 	movt	r3, #16403	; 0x4013
    p->freq = freq;
24018858:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
2401885c:	eec6 6a00 	vdiv.f32	s13, s12, s0
    if (waveLength<4.8) waveLength=4.8f;
24018860:	ec43 2b17 	vmov	d7, r2, r3
24018864:	eeb7 5ae6 	vcvt.f64.f32	d5, s13
24018868:	eeb4 5bc7 	vcmpe.f64	d5, d7
2401886c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018870:	d43a      	bmi.n	240188e8 <tSimpleLivingString3_setFreq+0xa8>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24018872:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24018874:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24018878:	005b      	lsls	r3, r3, #1
2401887a:	ee00 3a10 	vmov	s0, r3
2401887e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24018882:	fe80 0a66 	vminnm.f32	s0, s0, s13
24018886:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401888a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
2401888e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24018892:	f7fa fd0f 	bl	240132b4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24018896:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401889a:	f647 01c4 	movw	r1, #30916	; 0x78c4
2401889e:	ed94 7a05 	vldr	s14, [r4, #20]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240188a2:	ed94 6a01 	vldr	s12, [r4, #4]
240188a6:	f247 02a4 	movw	r2, #28836	; 0x70a4
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240188aa:	f6c3 518d 	movt	r1, #15757	; 0x3d8d
240188ae:	ee37 7a27 	vadd.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240188b2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
240188b6:	f24a 33d7 	movw	r3, #41943	; 0xa3d7
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240188ba:	ee07 1a90 	vmov	s15, r1
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240188be:	f6c0 223d 	movt	r2, #2621	; 0xa3d
240188c2:	f2cc 031b 	movt	r3, #49179	; 0xc01b
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240188c6:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240188ca:	ec43 2b10 	vmov	d0, r2, r3
240188ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240188d2:	ee27 7b06 	vmul.f64	d7, d7, d6
240188d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
240188da:	f004 f849 	bl	2401c970 <exp>
240188de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240188e2:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
240188e6:	bd10      	pop	{r4, pc}
240188e8:	f649 139a 	movw	r3, #39322	; 0x999a
240188ec:	f2c4 0319 	movt	r3, #16409	; 0x4019
240188f0:	ee00 3a10 	vmov	s0, r3
240188f4:	e7c9      	b.n	2401888a <tSimpleLivingString3_setFreq+0x4a>
240188f6:	bf00      	nop

240188f8 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240188f8:	6800      	ldr	r0, [r0, #0]
240188fa:	303c      	adds	r0, #60	; 0x3c
240188fc:	f7fa bfea 	b.w	240138d4 <tOnePole_setFreq>

24018900 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24018900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018904:	f647 01c4 	movw	r1, #30916	; 0x78c4
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24018908:	f643 4236 	movw	r2, #15414	; 0x3c36
2401890c:	f24a 1396 	movw	r3, #41366	; 0xa196
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24018910:	f6c3 518d 	movt	r1, #15757	; 0x3d8d
24018914:	ee30 7a07 	vadd.f32	s14, s0, s14
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24018918:	f2c5 22bd 	movt	r2, #21181	; 0x52bd
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
2401891c:	ee07 1a90 	vmov	s15, r1
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24018920:	f2cc 031b 	movt	r3, #49179	; 0xc01b
{
24018924:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24018926:	6804      	ldr	r4, [r0, #0]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24018928:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
2401892c:	ed94 5a01 	vldr	s10, [r4, #4]
24018930:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    p->userDecay = decay;
24018934:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24018938:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
2401893c:	ec43 2b16 	vmov	d6, r2, r3
24018940:	ee27 7b05 	vmul.f64	d7, d7, d5
24018944:	ee86 0b07 	vdiv.f64	d0, d6, d7
24018948:	f004 f812 	bl	2401c970 <exp>
2401894c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018950:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24018954:	bd10      	pop	{r4, pc}
24018956:	bf00      	nop

24018958 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24018958:	6800      	ldr	r0, [r0, #0]
2401895a:	3054      	adds	r0, #84	; 0x54
2401895c:	f7fa b8fc 	b.w	24012b58 <tFeedbackLeveler_setTargetLevel>

24018960 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24018960:	6800      	ldr	r0, [r0, #0]
24018962:	3054      	adds	r0, #84	; 0x54
24018964:	f7fa b8ce 	b.w	24012b04 <tFeedbackLeveler_setFactor>

24018968 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24018968:	6800      	ldr	r0, [r0, #0]
2401896a:	3054      	adds	r0, #84	; 0x54
2401896c:	f7fa b8c6 	b.w	24012afc <tFeedbackLeveler_setStrength>

24018970 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24018970:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24018972:	6805      	ldr	r5, [r0, #0]
{
24018974:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24018976:	f105 0054 	add.w	r0, r5, #84	; 0x54
2401897a:	f7fa f8c7 	bl	24012b0c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
2401897e:	622c      	str	r4, [r5, #32]
}
24018980:	bd38      	pop	{r3, r4, r5, pc}
24018982:	bf00      	nop

24018984 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24018984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
24018988:	6801      	ldr	r1, [r0, #0]
{
2401898a:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
2401898c:	edd1 7a02 	vldr	s15, [r1, #8]
24018990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24018994:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24018998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401899c:	ee67 0aa0 	vmul.f32	s1, s15, s1
240189a0:	eefd 7ae0 	vcvt.s32.f32	s15, s1
240189a4:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
240189a8:	2e00      	cmp	r6, #0
240189aa:	f340 8085 	ble.w	24018ab8 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
240189ae:	42b0      	cmp	r0, r6
240189b0:	dc11      	bgt.n	240189d6 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
240189b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
240189b6:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
240189b8:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
240189ba:	dd7a      	ble.n	24018ab2 <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240189bc:	ee07 ca90 	vmov	s15, ip
240189c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240189c4:	f1bc 0f00 	cmp.w	ip, #0
240189c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240189cc:	ee86 7a86 	vdiv.f32	s14, s13, s12
240189d0:	da10      	bge.n	240189f4 <tSimpleLivingString3_pluck+0x70>
240189d2:	2300      	movs	r3, #0
240189d4:	e02d      	b.n	24018a32 <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
240189d6:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240189d8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240189dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240189e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240189e4:	ee07 3a90 	vmov	s15, r3
240189e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240189ec:	ee85 7a86 	vdiv.f32	s14, s11, s12
240189f0:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240189f4:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
240189f6:	f04f 0300 	mov.w	r3, #0
240189fa:	bfa8      	it	ge
240189fc:	4666      	movge	r6, ip
240189fe:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a02:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24018a04:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a08:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24018a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
24018a10:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a12:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24018a14:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a16:	fbb2 f7f5 	udiv	r7, r2, r5
24018a1a:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24018a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
24018a22:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
24018a24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24018a28:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24018a2c:	dde9      	ble.n	24018a02 <tSimpleLivingString3_pluck+0x7e>
24018a2e:	4298      	cmp	r0, r3
24018a30:	dd1d      	ble.n	24018a6e <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018a32:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24018a36:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a3a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24018a40:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a44:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018a48:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24018a4c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a4e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24018a50:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018a52:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24018a56:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24018a58:	fbb2 f6f5 	udiv	r6, r2, r5
24018a5c:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018a60:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24018a64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24018a68:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24018a6c:	dce3      	bgt.n	24018a36 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24018a6e:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
24018a72:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a76:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24018a7a:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24018a7c:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a7e:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
24018a80:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a82:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
24018a84:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a86:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24018a88:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a8a:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24018a8c:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
24018a8e:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24018a92:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018a96:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24018a9a:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
24018a9e:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24018aa0:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24018aa4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24018aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24018aac:	6812      	ldr	r2, [r2, #0]
24018aae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
24018ab0:	d1df      	bne.n	24018a72 <tSimpleLivingString3_pluck+0xee>
    }
}
24018ab2:	b003      	add	sp, #12
24018ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
24018ab8:	2800      	cmp	r0, #0
24018aba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
24018abe:	ddf8      	ble.n	24018ab2 <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018ac0:	ee07 ca10 	vmov	s14, ip
24018ac4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
24018ac8:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24018aca:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
24018ace:	eeb0 7a67 	vmov.f32	s14, s15
24018ad2:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24018ad6:	eeb0 6a67 	vmov.f32	s12, s15
24018ada:	e78b      	b.n	240189f4 <tSimpleLivingString3_pluck+0x70>

24018adc <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24018adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24018ae0:	ed2d 8b04 	vpush	{d8-d9}
    _tSimpleLivingString3* p = *pl;
24018ae4:	6804      	ldr	r4, [r0, #0]
{
24018ae6:	eef0 9a40 	vmov.f32	s19, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24018aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24018aee:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24018af2:	f7fa fbed 	bl	240132d0 <tExpSmooth_tick>
24018af6:	eeb0 9a40 	vmov.f32	s18, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24018afa:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
24018afe:	4628      	mov	r0, r5
24018b00:	f7f9 fa06 	bl	24011f10 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24018b04:	eeb0 0a49 	vmov.f32	s0, s18
24018b08:	4638      	mov	r0, r7
24018b0a:	f7f9 fa01 	bl	24011f10 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24018b0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24018b10:	2b00      	cmp	r3, #0
24018b12:	dd50      	ble.n	24018bb6 <tSimpleLivingString3_tick+0xda>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24018b18:	f104 0a50 	add.w	sl, r4, #80	; 0x50
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b1c:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24018b20:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b24:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
24018b28:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24018b2a:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
24018b2c:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24018b2e:	f7f9 f9c3 	bl	24011eb8 <tLinearDelay_tickOut>
24018b32:	4648      	mov	r0, r9
24018b34:	f7fa fee6 	bl	24013904 <tOnePole_tick>
24018b38:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
24018b3c:	edd4 7a04 	vldr	s15, [r4, #16]
24018b40:	4650      	mov	r0, sl
24018b42:	ee67 7a87 	vmul.f32	s15, s15, s14
24018b46:	ee27 0a80 	vmul.f32	s0, s15, s0
24018b4a:	f7fb fb5f 	bl	2401420c <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b4e:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24018b50:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b54:	f7f9 ffde 	bl	24012b14 <tFeedbackLeveler_tick>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24018b58:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24018b5a:	fec0 7a68 	vminnm.f32	s15, s0, s17
24018b5e:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
24018b62:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24018b66:	f7f9 f9a7 	bl	24011eb8 <tLinearDelay_tickOut>

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
24018b6a:	4628      	mov	r0, r5
24018b6c:	fec0 7a68 	vminnm.f32	s15, s0, s17
24018b70:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
24018b74:	ee39 0ae7 	vsub.f32	s0, s19, s15
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24018b78:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
24018b7c:	f7f9 f988 	bl	24011e90 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24018b80:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24018b84:	4638      	mov	r0, r7
24018b86:	eeb1 0a40 	vneg.f32	s0, s0
24018b8a:	f7f9 f981 	bl	24011e90 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
24018b8e:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
24018b92:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24018b96:	4628      	mov	r0, r5
24018b98:	ee69 7a27 	vmul.f32	s15, s18, s15
24018b9c:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
24018ba0:	ee26 0a80 	vmul.f32	s0, s13, s0
24018ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018ba8:	ee17 1a90 	vmov	r1, s15
24018bac:	f7f9 f9ec 	bl	24011f88 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
24018bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24018bb2:	42b3      	cmp	r3, r6
24018bb4:	dcb9      	bgt.n	24018b2a <tSimpleLivingString3_tick+0x4e>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24018bb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
24018bba:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24018bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24018bc0:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
24018bc4:	ee66 5a89 	vmul.f32	s11, s13, s18
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24018bc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24018bca:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24018bce:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24018bd0:	feb8 6a65 	vrinta.f32	s12, s11
24018bd4:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24018bd8:	ee66 6a89 	vmul.f32	s13, s13, s18
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24018bdc:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24018be0:	feb8 7a66 	vrinta.f32	s14, s13
24018be4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018be8:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24018bec:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24018bf0:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24018bf4:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24018bf8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24018bfc:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24018bfe:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24018c00:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24018c04:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24018c06:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24018c0a:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24018c0e:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24018c10:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c12:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
24018c14:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
24018c18:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24018c1c:	fb93 f6f0 	sdiv	r6, r3, r0
24018c20:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24018c24:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24018c26:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c2a:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
24018c2e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24018c32:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c36:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24018c3a:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c3c:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24018c40:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c44:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24018c48:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24018c4c:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24018c4e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24018c52:	eea7 0a27 	vfma.f32	s0, s14, s15
24018c56:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24018c5a:	fb93 f5f0 	sdiv	r5, r3, r0
24018c5e:	eea7 0aa5 	vfma.f32	s0, s15, s11
24018c62:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24018c66:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24018c6a:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
24018c6e:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24018c70:	eea7 0aa6 	vfma.f32	s0, s15, s13
24018c74:	ee20 0a24 	vmul.f32	s0, s0, s9
24018c78:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24018c7c:	ecbd 8b04 	vpop	{d8-d9}
24018c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24018c84 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
24018c84:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24018c86:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24018c8a:	4770      	bx	lr

24018c8c <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
24018c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24018c90:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
24018c94:	f8d2 8000 	ldr.w	r8, [r2]
{
24018c98:	460f      	mov	r7, r1
24018c9a:	b085      	sub	sp, #20
24018c9c:	4681      	mov	r9, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24018c9e:	4641      	mov	r1, r8
24018ca0:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
24018ca4:	4615      	mov	r5, r2
24018ca6:	eef0 9a40 	vmov.f32	s19, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24018caa:	f7fe f959 	bl	24016f60 <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
24018cae:	ee07 7a90 	vmov	s15, r7
24018cb2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24018cb6:	f8c9 0000 	str.w	r0, [r9]
    x->invOversampling = 1.0f / oversampling;
24018cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
24018cbe:	f8c0 8000 	str.w	r8, [r0]
    LEAF* leaf = x->mempool->leaf;
24018cc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
    x->sampleRate          = leaf->sampleRate * oversampling;
    x->invSampleRate = 1.f / x->sampleRate;
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24018cc6:	f640 73db 	movw	r3, #4059	; 0xfdb
    x->oversampling = oversampling;
24018cca:	6047      	str	r7, [r0, #4]
    x->output = 0.0f;
    x->outputP = 0.0f;
    x->rippleRate = 1.0f;
    x->r = 0.0f;
    x->invOnePlusr = 1.0f;
    x->decayInSeconds = 10.0f;
24018ccc:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
    x->invOversampling = 1.0f / oversampling;
24018cd0:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24018cd4:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    x->tensionAmount = 0.0f;

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
24018cd8:	2601      	movs	r6, #1
    x->barPulsePhasor = 0;
24018cda:	2700      	movs	r7, #0
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24018cdc:	ee0b 3a10 	vmov	s22, r3
    x->tensionGain = 0.0f;
24018ce0:	2300      	movs	r3, #0
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24018ce2:	f100 0814 	add.w	r8, r0, #20
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24018ce6:	4604      	mov	r4, r0
    x->tensionGain = 0.0f;
24018ce8:	ee08 3a10 	vmov	s16, r3
    x->baseDelay = 100.0f;
24018cec:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
    x->barDrive = 1.5f;
24018cf0:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
    tLagrangeDelay_clear(&x->delayP);

    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);

    tCookOnePole_initToPool(&x->reflFilt, mp);
24018cf4:	f100 0924 	add.w	r9, r0, #36	; 0x24
    x->baseDelay = 100.0f;
24018cf8:	ee09 3a10 	vmov	s18, r3
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24018cfc:	ee00 3a10 	vmov	s0, r3
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24018d00:	f100 0a18 	add.w	sl, r0, #24
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24018d04:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24018d08:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
24018d0c:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24018d10:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
24018d14:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24018d18:	462a      	mov	r2, r5
    x->baseDelay = 100.0f;
24018d1a:	62c3      	str	r3, [r0, #44]	; 0x2c
    x->slideGain = 0.4f;
24018d1c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    x->sampleRate          = leaf->sampleRate * oversampling;
24018d20:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->decayInSeconds = 10.0f;
24018d24:	edc0 5a22 	vstr	s11, [r0, #136]	; 0x88
    x->slideGain = 0.4f;
24018d28:	f6c3 63cc 	movt	r3, #16076	; 0x3ecc
    x->barDrive = 1.5f;
24018d2c:	ed80 6a4c 	vstr	s12, [r0, #304]	; 0x130
    x->wound = 1;
24018d30:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->invSampleRate = 1.f / x->sampleRate;
24018d34:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
24018d38:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->slideGain = 0.4f;
24018d3c:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barPulsePhasor = 0;
24018d40:	f8c0 70e4 	str.w	r7, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
24018d44:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
24018d48:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
24018d4c:	ee87 7aa9 	vdiv.f32	s14, s15, s19
    x->decayCoeff = 1.0f;
24018d50:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
24018d54:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
24018d58:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
24018d5c:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
24018d60:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
24018d64:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
24018d68:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
24018d6c:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->tensionAmount = 0.0f;
24018d70:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
24018d74:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24018d78:	ee66 7a8b 	vmul.f32	s15, s13, s22
    x->invSampleRate = 1.f / x->sampleRate;
24018d7c:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24018d80:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24018d84:	4640      	mov	r0, r8
24018d86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24018d8a:	ee17 1a90 	vmov	r1, s15
24018d8e:	edcd 7a00 	vstr	s15, [sp]
24018d92:	f7f9 f9c5 	bl	24012120 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
24018d96:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
24018d9a:	4640      	mov	r0, r8
24018d9c:	f7f9 fa8a 	bl	240122b4 <tLagrangeDelay_getMaxDelay>
24018da0:	eec9 7a80 	vdiv.f32	s15, s19, s0
    tLagrangeDelay_clear(&x->delay);
24018da4:	4640      	mov	r0, r8
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
24018da6:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
24018daa:	f7f9 f90b 	bl	24011fc4 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24018dae:	462a      	mov	r2, r5
24018db0:	eeb0 0a49 	vmov.f32	s0, s18
24018db4:	9900      	ldr	r1, [sp, #0]
24018db6:	4650      	mov	r0, sl
24018db8:	f7f9 f9b2 	bl	24012120 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
24018dbc:	4650      	mov	r0, sl
24018dbe:	f7f9 f901 	bl	24011fc4 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
24018dc2:	4640      	mov	r0, r8
24018dc4:	f7f9 fa76 	bl	240122b4 <tLagrangeDelay_getMaxDelay>
24018dc8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24018dcc:	f104 0828 	add.w	r8, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
24018dd0:	4629      	mov	r1, r5
24018dd2:	4648      	mov	r0, r9
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
24018dd4:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
24018dd8:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
24018ddc:	f7fa fdc6 	bl	2401396c <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
24018de0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24018de4:	4648      	mov	r0, r9
24018de6:	f7fa fe07 	bl	240139f8 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24018dea:	4629      	mov	r1, r5
24018dec:	4640      	mov	r0, r8
24018dee:	f7fa fdbd 	bl	2401396c <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
24018df2:	4640      	mov	r0, r8
24018df4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24018df8:	f7fa fdfe 	bl	240139f8 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
24018dfc:	f248 0334 	movw	r3, #32820	; 0x8034
24018e00:	4648      	mov	r0, r9
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
24018e02:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
24018e06:	f6cb 23b7 	movt	r3, #47799	; 0xbab7
24018e0a:	ee00 3a90 	vmov	s1, r3
24018e0e:	9301      	str	r3, [sp, #4]
24018e10:	f64b 6377 	movw	r3, #48759	; 0xbe77
24018e14:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
24018e18:	ee00 3a10 	vmov	s0, r3
24018e1c:	9300      	str	r3, [sp, #0]
24018e1e:	f7fa fdd5 	bl	240139cc <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
24018e22:	eddd 0a01 	vldr	s1, [sp, #4]
24018e26:	4640      	mov	r0, r8
24018e28:	ed9d 0a00 	vldr	s0, [sp]
24018e2c:	f7fa fdce 	bl	240139cc <tCookOnePole_setGainAndPole>
    if (freq < x->actualLowestFreq)
24018e30:	463b      	mov	r3, r7
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24018e32:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24018e36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
24018e3a:	f2c4 33dc 	movt	r3, #17372	; 0x43dc
24018e3e:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24018e42:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24018e46:	4658      	mov	r0, fp
24018e48:	ee0a 3a90 	vmov	s21, r3
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24018e4c:	f104 084c 	add.w	r8, r4, #76	; 0x4c
24018e50:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24018e54:	ee86 0a27 	vdiv.f32	s0, s12, s15
    x->freq = freq;
24018e58:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24018e5c:	ee67 9a87 	vmul.f32	s19, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24018e60:	ee30 0a66 	vsub.f32	s0, s0, s13
24018e64:	f7fa fa26 	bl	240132b4 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24018e68:	eeb0 0a69 	vmov.f32	s0, s19
24018e6c:	ed94 aa50 	vldr	s20, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
24018e70:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24018e74:	f7e7 fcf8 	bl	24000868 <arm_sin_f32>
24018e78:	eef0 7a40 	vmov.f32	s15, s0
24018e7c:	edd4 ba50 	vldr	s23, [r4, #320]	; 0x140
24018e80:	eeb0 0a69 	vmov.f32	s0, s19
24018e84:	ee2a aa27 	vmul.f32	s20, s20, s15
24018e88:	f7e7 fc96 	bl	240007b8 <arm_cos_f32>
24018e8c:	eef0 0a68 	vmov.f32	s1, s17
24018e90:	a803      	add	r0, sp, #12
24018e92:	eef0 7a40 	vmov.f32	s15, s0
24018e96:	eeb0 0a4a 	vmov.f32	s0, s20
24018e9a:	eeeb 0ae7 	vfms.f32	s1, s23, s15
24018e9e:	f7e7 fa23 	bl	240002e8 <arm_atan2_f32>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24018ea2:	f241 236f 	movw	r3, #4719	; 0x126f
24018ea6:	edd4 0a02 	vldr	s1, [r4, #8]
24018eaa:	4629      	mov	r1, r5
24018eac:	f6c3 3383 	movt	r3, #15235	; 0x3b83
24018eb0:	4640      	mov	r0, r8
24018eb2:	eeb0 0a48 	vmov.f32	s0, s16
24018eb6:	ee09 3a90 	vmov	s19, r3
     x->phaseComp = result;
24018eba:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24018ebc:	ee60 0aa9 	vmul.f32	s1, s1, s19
     x->phaseComp = result;
24018ec0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24018ec4:	f7fa f9ba 	bl	2401323c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
24018ec8:	4640      	mov	r0, r8
24018eca:	eeb0 0a48 	vmov.f32	s0, s16
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
24018ece:	f104 0858 	add.w	r8, r4, #88	; 0x58
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
24018ed2:	f7fa f9ef 	bl	240132b4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
24018ed6:	f24d 730a 	movw	r3, #55050	; 0xd70a
24018eda:	edd4 0a02 	vldr	s1, [r4, #8]
24018ede:	eeb0 0a49 	vmov.f32	s0, s18
24018ee2:	f6c3 5323 	movt	r3, #15651	; 0x3d23
24018ee6:	4629      	mov	r1, r5
24018ee8:	4658      	mov	r0, fp
24018eea:	ee07 3a90 	vmov	s15, r3
24018eee:	ee60 0aa7 	vmul.f32	s1, s1, s15
24018ef2:	f7fa f9a3 	bl	2401323c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
24018ef6:	eeb0 0a49 	vmov.f32	s0, s18
24018efa:	4658      	mov	r0, fp
24018efc:	f7fa f9da 	bl	240132b4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
24018f00:	f245 13ec 	movw	r3, #20972	; 0x51ec
24018f04:	edd4 0a02 	vldr	s1, [r4, #8]
24018f08:	4629      	mov	r1, r5
24018f0a:	f6c3 53b8 	movt	r3, #15800	; 0x3db8
24018f0e:	eeb0 0a48 	vmov.f32	s0, s16
24018f12:	4650      	mov	r0, sl
24018f14:	ee07 3a90 	vmov	s15, r3
24018f18:	ee60 0aa7 	vmul.f32	s1, s1, s15
24018f1c:	f7fa f98e 	bl	2401323c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
24018f20:	eeb0 0a48 	vmov.f32	s0, s16
24018f24:	4650      	mov	r0, sl
24018f26:	f7fa f9c5 	bl	240132b4 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
24018f2a:	462a      	mov	r2, r5
24018f2c:	2104      	movs	r1, #4
24018f2e:	4648      	mov	r0, r9
24018f30:	f7fa fa6a 	bl	24013408 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
24018f34:	462a      	mov	r2, r5
24018f36:	2104      	movs	r1, #4
24018f38:	4640      	mov	r0, r8
24018f3a:	f7fa fa65 	bl	24013408 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
24018f3e:	f24b 7317 	movw	r3, #46871	; 0xb717
24018f42:	eef0 0a49 	vmov.f32	s1, s18
24018f46:	ed94 1a02 	vldr	s2, [r4, #8]
24018f4a:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
24018f4e:	4648      	mov	r0, r9
24018f50:	ee00 3a10 	vmov	s0, r3
24018f54:	f7fa fae6 	bl	24013524 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24018f58:	f24b 7317 	movw	r3, #46871	; 0xb717
24018f5c:	ed94 1a02 	vldr	s2, [r4, #8]
24018f60:	eef0 0a49 	vmov.f32	s1, s18
24018f64:	f2c3 73d1 	movt	r3, #14289	; 0x37d1
24018f68:	4640      	mov	r0, r8
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
24018f6a:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tCycle_initToPool(&x->tensionModOsc, mp);
24018f6e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24018f72:	ee00 3a10 	vmov	s0, r3
24018f76:	f7fa fad5 	bl	24013524 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
24018f7a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24018f7e:	f104 0068 	add.w	r0, r4, #104	; 0x68
24018f82:	4631      	mov	r1, r6
24018f84:	f6c3 734c 	movt	r3, #16204	; 0x3f4c
24018f88:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24018f8a:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
24018f8e:	ee00 3a90 	vmov	s1, r3
24018f92:	9301      	str	r3, [sp, #4]
24018f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24018f98:	9000      	str	r0, [sp, #0]
24018f9a:	f2c4 539c 	movt	r3, #17820	; 0x459c
24018f9e:	ee00 3a10 	vmov	s0, r3
24018fa2:	f7fa fdd9 	bl	24013b58 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
24018fa6:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24018faa:	9800      	ldr	r0, [sp, #0]
24018fac:	f7fa ffba 	bl	24013f24 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
24018fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24018fb4:	9800      	ldr	r0, [sp, #0]
24018fb6:	f2c4 53bb 	movt	r3, #17851	; 0x45bb
24018fba:	ee00 3a10 	vmov	s0, r3
24018fbe:	f7fa ff0f 	bl	24013de0 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
24018fc2:	463b      	mov	r3, r7
24018fc4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
24018fc8:	eddd 0a01 	vldr	s1, [sp, #4]
24018fcc:	f2c4 43e1 	movt	r3, #17633	; 0x44e1
24018fd0:	462a      	mov	r2, r5
24018fd2:	4639      	mov	r1, r7
24018fd4:	9000      	str	r0, [sp, #0]
24018fd6:	ee09 3a10 	vmov	s18, r3
24018fda:	ee00 3a10 	vmov	s0, r3
24018fde:	f7fa fdbb 	bl	24013b58 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
24018fe2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24018fe6:	9800      	ldr	r0, [sp, #0]
    tCycle_initToPool(&x->pickupModOsc, mp);
24018fe8:	f104 07ac 	add.w	r7, r4, #172	; 0xac
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
24018fec:	f7fa ff9a 	bl	24013f24 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
24018ff0:	eeb0 0a49 	vmov.f32	s0, s18
24018ff4:	9800      	ldr	r0, [sp, #0]
24018ff6:	f7fa fef3 	bl	24013de0 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24018ffa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
24018ffe:	4629      	mov	r1, r5
24019000:	4640      	mov	r0, r8
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24019002:	ee67 7a8b 	vmul.f32	s15, s15, s22
24019006:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
2401900a:	f7fe f90b 	bl	24017224 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
2401900e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24019012:	4640      	mov	r0, r8
24019014:	f7fe f96c 	bl	240172f0 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
24019018:	4629      	mov	r1, r5
2401901a:	4638      	mov	r0, r7
2401901c:	f7fe f902 	bl	24017224 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
24019020:	4638      	mov	r0, r7
24019022:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24019026:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
2401902a:	f7fe f961 	bl	240172f0 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
2401902e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24019032:	4631      	mov	r1, r6
24019034:	eef0 0a68 	vmov.f32	s1, s17
24019038:	f2c4 5335 	movt	r3, #17717	; 0x4535
2401903c:	462a      	mov	r2, r5
2401903e:	4638      	mov	r0, r7
    x->pickupModOscFreq = 440.0f;
24019040:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24019044:	ee00 3a10 	vmov	s0, r3
    x->pickupModOscAmp = 1.0f;
24019048:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
2401904c:	f7fa fd84 	bl	24013b58 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
24019050:	4638      	mov	r0, r7
24019052:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24019056:	f7fa ff65 	bl	24013f24 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
2401905a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
2401905e:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
24019060:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
24019064:	f2c4 5373 	movt	r3, #17779	; 0x4573
24019068:	ee00 3a10 	vmov	s0, r3
2401906c:	f7fa feb8 	bl	24013de0 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
24019070:	f64c 43cd 	movw	r3, #52429	; 0xcccd
24019074:	4631      	mov	r1, r6
24019076:	462a      	mov	r2, r5
24019078:	f6c3 738c 	movt	r3, #16268	; 0x3f8c
2401907c:	4638      	mov	r0, r7
2401907e:	ee00 3a90 	vmov	s1, r3
24019082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24019086:	f2c4 536d 	movt	r3, #17773	; 0x456d
2401908a:	ee00 3a10 	vmov	s0, r3
2401908e:	f7fa fd63 	bl	24013b58 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
24019092:	4638      	mov	r0, r7
24019094:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24019098:	f7fa ff44 	bl	24013f24 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
2401909c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240190a0:	4638      	mov	r0, r7
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
240190a2:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
240190a6:	f2c4 5380 	movt	r3, #17792	; 0x4580
240190aa:	ee00 3a10 	vmov	s0, r3
240190ae:	f7fa fe97 	bl	24013de0 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
240190b2:	f246 6366 	movw	r3, #26214	; 0x6666
240190b6:	462a      	mov	r2, r5
240190b8:	2104      	movs	r1, #4
240190ba:	f6c3 7366 	movt	r3, #16230	; 0x3f66
240190be:	4638      	mov	r0, r7
240190c0:	ee00 3a90 	vmov	s1, r3
240190c4:	2300      	movs	r3, #0
240190c6:	f2c4 437a 	movt	r3, #17530	; 0x447a
240190ca:	ee09 3a10 	vmov	s18, r3
240190ce:	ee00 3a10 	vmov	s0, r3
240190d2:	f7fa fd41 	bl	24013b58 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
240190d6:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
240190da:	4638      	mov	r0, r7
240190dc:	f7fa ff22 	bl	24013f24 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
240190e0:	eeb0 0a49 	vmov.f32	s0, s18
240190e4:	4638      	mov	r0, r7
240190e6:	f7fa fe7b 	bl	24013de0 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
240190ea:	462a      	mov	r2, r5
240190ec:	4631      	mov	r1, r6
240190ee:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
240190f2:	f7fe fde9 	bl	24017cc8 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
240190f6:	f104 001c 	add.w	r0, r4, #28
240190fa:	4629      	mov	r1, r5
240190fc:	eeb0 0a68 	vmov.f32	s0, s17
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24019100:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
24019104:	9000      	str	r0, [sp, #0]
24019106:	f7fb f851 	bl	240141ac <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
2401910a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
2401910e:	9800      	ldr	r0, [sp, #0]
24019110:	f7fb f88c 	bl	2401422c <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24019114:	4629      	mov	r1, r5
24019116:	eeb0 0a68 	vmov.f32	s0, s17
2401911a:	4630      	mov	r0, r6
2401911c:	f7fb f846 	bl	240141ac <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
24019120:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24019124:	4630      	mov	r0, r6
24019126:	f7fb f881 	bl	2401422c <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
2401912a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2401912e:	eeb0 0a48 	vmov.f32	s0, s16
24019132:	4629      	mov	r1, r5
24019134:	f2c4 533b 	movt	r3, #17723	; 0x453b
24019138:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401913c:	ee00 3a90 	vmov	s1, r3
24019140:	f7fa f8d6 	bl	240132f0 <tSlide_initToPool>
    if (x->wound)
24019144:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
24019148:	2b00      	cmp	r3, #0
2401914a:	f000 80cd 	beq.w	240192e8 <tTString_initToPool+0x65c>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
2401914e:	f241 236f 	movw	r3, #4719	; 0x126f
24019152:	f504 708c 	add.w	r0, r4, #280	; 0x118
24019156:	4629      	mov	r1, r5
24019158:	eeb0 0a48 	vmov.f32	s0, s16
2401915c:	f6c3 2303 	movt	r3, #14851	; 0x3a03
24019160:	9000      	str	r0, [sp, #0]
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
24019162:	f504 768e 	add.w	r6, r4, #284	; 0x11c
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
24019166:	ee00 3a90 	vmov	s1, r3
2401916a:	f7fa f867 	bl	2401323c <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
2401916e:	eeb0 0a48 	vmov.f32	s0, s16
24019172:	9800      	ldr	r0, [sp, #0]
24019174:	f7fa f89e 	bl	240132b4 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
24019178:	f24b 7317 	movw	r3, #46871	; 0xb717
2401917c:	eeb0 0a48 	vmov.f32	s0, s16
24019180:	4629      	mov	r1, r5
24019182:	f6c3 2351 	movt	r3, #14929	; 0x3a51
24019186:	ee00 3a90 	vmov	s1, r3
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
2401918a:	4630      	mov	r0, r6
2401918c:	9600      	str	r6, [sp, #0]
2401918e:	f7fa f855 	bl	2401323c <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
24019192:	eeb0 0a48 	vmov.f32	s0, s16
24019196:	9800      	ldr	r0, [sp, #0]
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
24019198:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
2401919c:	f7fa f88a 	bl	240132b4 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
240191a0:	2300      	movs	r3, #0
240191a2:	f504 7084 	add.w	r0, r4, #264	; 0x108
240191a6:	4629      	mov	r1, r5
240191a8:	f2c4 437a 	movt	r3, #17530	; 0x447a
    x->timeSinceLastBump = 1;
240191ac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
240191b0:	ee00 3a90 	vmov	s1, r3
240191b4:	ee00 3a10 	vmov	s0, r3
240191b8:	f7fa f89a 	bl	240132f0 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
240191bc:	4629      	mov	r1, r5
240191be:	f504 708a 	add.w	r0, r4, #276	; 0x114
240191c2:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
240191c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240191ca:	f7fa f891 	bl	240132f0 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
240191ce:	f64c 42cd 	movw	r2, #52429	; 0xcccd
240191d2:	2300      	movs	r3, #0
240191d4:	4629      	mov	r1, r5
240191d6:	f6c3 524c 	movt	r2, #15692	; 0x3d4c
240191da:	4630      	mov	r0, r6
240191dc:	ee08 3a10 	vmov	s16, r3
240191e0:	ee00 3a10 	vmov	s0, r3
240191e4:	ee00 2a90 	vmov	s1, r2
240191e8:	f7fa f828 	bl	2401323c <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
240191ec:	eeb0 0a48 	vmov.f32	s0, s16
240191f0:	4630      	mov	r0, r6
240191f2:	f7fa f85f 	bl	240132b4 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
240191f6:	462a      	mov	r2, r5
240191f8:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
240191fc:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
24019200:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24019204:	2102      	movs	r1, #2
24019206:	f7fa fca7 	bl	24013b58 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
2401920a:	4629      	mov	r1, r5
2401920c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
24019210:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
24019214:	ed84 9a40 	vstr	s18, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
24019218:	f7fa ffc8 	bl	240141ac <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
2401921c:	f246 6166 	movw	r1, #26214	; 0x6666
24019220:	f44f 4340 	mov.w	r3, #49152	; 0xc000
24019224:	462a      	mov	r2, r5
24019226:	f6c3 7166 	movt	r1, #16230	; 0x3f66
2401922a:	f504 7088 	add.w	r0, r4, #272	; 0x110
2401922e:	f2c4 53da 	movt	r3, #17882	; 0x45da
24019232:	ee00 1a90 	vmov	s1, r1
24019236:	2101      	movs	r1, #1
24019238:	ee00 3a10 	vmov	s0, r3
2401923c:	f7fa fc8c 	bl	24013b58 <tSVF_initToPool>
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24019240:	f24d 730a 	movw	r3, #55050	; 0xd70a
24019244:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    x->inharmonic = 1;
24019248:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
2401924a:	f6c3 5323 	movt	r3, #15651	; 0x3d23
2401924e:	edd4 0a02 	vldr	s1, [r4, #8]
24019252:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
24019256:	f504 70ac 	add.w	r0, r4, #344	; 0x158
2401925a:	ee08 3a90 	vmov	s17, r3
    x->inharmonic = 1;
2401925e:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24019262:	ee01 2a10 	vmov	s2, r2
24019266:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
2401926a:	ee60 0aa8 	vmul.f32	s1, s1, s17
2401926e:	462a      	mov	r2, r5
    x->inharmonicMult = 1.0f;
24019270:	ed84 9a53 	vstr	s18, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24019274:	ed8d 1a00 	vstr	s2, [sp]
24019278:	f7f9 fc0c 	bl	24012a94 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
2401927c:	edd4 0a02 	vldr	s1, [r4, #8]
24019280:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
24019284:	ed9d 1a00 	vldr	s2, [sp]
24019288:	462a      	mov	r2, r5
2401928a:	ee60 0aa8 	vmul.f32	s1, s1, s17
2401928e:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
24019292:	2101      	movs	r1, #1
24019294:	f7f9 fbfe 	bl	24012a94 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24019298:	f24e 1248 	movw	r2, #57672	; 0xe148
2401929c:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    x->windingsPerInch = 70.0f;
240192a0:	2300      	movs	r3, #0
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
240192a2:	f6c3 627a 	movt	r2, #15994	; 0x3e7a
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
240192a6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->windingsPerInch = 70.0f;
240192aa:	f2c4 238c 	movt	r3, #17036	; 0x428c
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
240192ae:	2101      	movs	r1, #1
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
240192b0:	ee07 2a90 	vmov	s15, r2
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
240192b4:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
240192b6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
240192ba:	ee67 7a27 	vmul.f32	s15, s14, s15
240192be:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
240192c2:	f7fe fd01 	bl	24017cc8 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
240192c6:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
240192ca:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
240192cc:	2008      	movs	r0, #8
240192ce:	4629      	mov	r1, r5
240192d0:	f7fd fe46 	bl	24016f60 <mpool_alloc>
240192d4:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
240192d8:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
240192da:	ed80 8a01 	vstr	s16, [r0, #4]
}
240192de:	b005      	add	sp, #20
240192e0:	ecbd 8b08 	vpop	{d8-d11}
240192e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
240192e8:	f24d 730a 	movw	r3, #55050	; 0xd70a
240192ec:	f504 708c 	add.w	r0, r4, #280	; 0x118
240192f0:	4629      	mov	r1, r5
240192f2:	eeb0 0a48 	vmov.f32	s0, s16
240192f6:	f6c3 33a3 	movt	r3, #15267	; 0x3ba3
240192fa:	9000      	str	r0, [sp, #0]
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
240192fc:	f504 768e 	add.w	r6, r4, #284	; 0x11c
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
24019300:	ee00 3a90 	vmov	s1, r3
24019304:	f7f9 ff9a 	bl	2401323c <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
24019308:	eeb0 0a48 	vmov.f32	s0, s16
2401930c:	9800      	ldr	r0, [sp, #0]
2401930e:	f7f9 ffd1 	bl	240132b4 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
24019312:	eef0 0a69 	vmov.f32	s1, s19
24019316:	eeb0 0a48 	vmov.f32	s0, s16
2401931a:	4629      	mov	r1, r5
2401931c:	e735      	b.n	2401918a <tTString_initToPool+0x4fe>
2401931e:	bf00      	nop

24019320 <tTString_free>:
{
24019320:	b510      	push	{r4, lr}
    _tTString* x = *bw;
24019322:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
24019324:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
24019328:	6801      	ldr	r1, [r0, #0]
2401932a:	f7fd fedb 	bl	240170e4 <mpool_free>
    tNoise_free(&x->pickNoiseSource);
2401932e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
24019332:	f7fe fcd9 	bl	24017ce8 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
24019336:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
2401933a:	f7f9 fbd3 	bl	24012ae4 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
2401933e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
24019342:	f7f9 fbcf 	bl	24012ae4 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
24019346:	f504 7088 	add.w	r0, r4, #272	; 0x110
2401934a:	f7fa fca9 	bl	24013ca0 <tSVF_free>
    tHighpass_free(&x->barHP);
2401934e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
24019352:	f7fa ff4b 	bl	240141ec <tHighpass_free>
    tSVF_free(&x->barResonator);
24019356:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
2401935a:	f7fa fca1 	bl	24013ca0 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
2401935e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
24019362:	f7f9 ff91 	bl	24013288 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
24019366:	f504 708a 	add.w	r0, r4, #276	; 0x114
2401936a:	f7f9 ffe7 	bl	2401333c <tSlide_free>
    tSlide_free(&x->barSmooth);
2401936e:	f504 7084 	add.w	r0, r4, #264	; 0x108
24019372:	f7f9 ffe3 	bl	2401333c <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
24019376:	f504 708e 	add.w	r0, r4, #284	; 0x11c
2401937a:	f7f9 ff85 	bl	24013288 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
2401937e:	f504 708c 	add.w	r0, r4, #280	; 0x118
24019382:	f7f9 ff81 	bl	24013288 <tExpSmooth_free>
	tSlide_free(&x->slide);
24019386:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401938a:	f7f9 ffd7 	bl	2401333c <tSlide_free>
    tHighpass_free(&x->dcBlockP);
2401938e:	f104 0020 	add.w	r0, r4, #32
24019392:	f7fa ff2b 	bl	240141ec <tHighpass_free>
    tHighpass_free(&x->dcBlock);
24019396:	f104 001c 	add.w	r0, r4, #28
2401939a:	f7fa ff27 	bl	240141ec <tHighpass_free>
    tNoise_free(&x->noise);
2401939e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
240193a2:	f7fe fca1 	bl	24017ce8 <tNoise_free>
    tSVF_free(&x->peakFilt);
240193a6:	f504 70c4 	add.w	r0, r4, #392	; 0x188
240193aa:	f7fa fc79 	bl	24013ca0 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
240193ae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
240193b2:	f7fa fc75 	bl	24013ca0 <tSVF_free>
    tSVF_free(&x->pickupFilter);
240193b6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
240193ba:	f7fa fc71 	bl	24013ca0 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
240193be:	f104 00ac 	add.w	r0, r4, #172	; 0xac
240193c2:	f7fd ff4b 	bl	2401725c <tCycle_free>
    tCycle_free(&x->tensionModOsc);
240193c6:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
240193ca:	f7fd ff47 	bl	2401725c <tCycle_free>
    tSVF_free(&x->highpassP);
240193ce:	f104 006c 	add.w	r0, r4, #108	; 0x6c
240193d2:	f7fa fc65 	bl	24013ca0 <tSVF_free>
    tSVF_free(&x->lowpassP),
240193d6:	f104 0068 	add.w	r0, r4, #104	; 0x68
240193da:	f7fa fc61 	bl	24013ca0 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
240193de:	f104 0058 	add.w	r0, r4, #88	; 0x58
240193e2:	f7fa f885 	bl	240134f0 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
240193e6:	f104 0054 	add.w	r0, r4, #84	; 0x54
240193ea:	f7fa f881 	bl	240134f0 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
240193ee:	f504 70be 	add.w	r0, r4, #380	; 0x17c
240193f2:	f7f9 ff49 	bl	24013288 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
240193f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
240193fa:	f7f9 ff45 	bl	24013288 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
240193fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24019402:	f7f9 ff41 	bl	24013288 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
24019406:	f104 0028 	add.w	r0, r4, #40	; 0x28
2401940a:	f7fa fac9 	bl	240139a0 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
2401940e:	f104 0024 	add.w	r0, r4, #36	; 0x24
24019412:	f7fa fac5 	bl	240139a0 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
24019416:	f104 0018 	add.w	r0, r4, #24
2401941a:	f7f8 fdc7 	bl	24011fac <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
2401941e:	f104 0014 	add.w	r0, r4, #20
24019422:	f7f8 fdc3 	bl	24011fac <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
24019426:	6821      	ldr	r1, [r4, #0]
24019428:	4620      	mov	r0, r4
}
2401942a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
2401942e:	f7fd be59 	b.w	240170e4 <mpool_free>
24019432:	bf00      	nop

24019434 <tTString_tick>:
{
24019434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24019438:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
2401943c:	6804      	ldr	r4, [r0, #0]
{
2401943e:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
24019440:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24019444:	f7fe fc54 	bl	24017cf0 <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24019448:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
2401944c:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24019450:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
24019454:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24019458:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
2401945c:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24019460:	9001      	str	r0, [sp, #4]
24019462:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24019466:	eef4 6ac8 	vcmpe.f32	s13, s16
2401946a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401946e:	d407      	bmi.n	24019480 <tTString_tick+0x4c>
24019470:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019474:	eef4 7ac8 	vcmpe.f32	s15, s16
24019478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401947c:	f340 8436 	ble.w	24019cec <tTString_tick+0x8b8>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24019480:	f7f9 ff20 	bl	240132c4 <tExpSmooth_setValAndDest>
24019484:	9801      	ldr	r0, [sp, #4]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
24019486:	f7f9 ff23 	bl	240132d0 <tExpSmooth_tick>
2401948a:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
2401948e:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
24019492:	f504 758e 	add.w	r5, r4, #284	; 0x11c
24019496:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
2401949a:	ee79 7a67 	vsub.f32	s15, s18, s15
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
2401949e:	4628      	mov	r0, r5
240194a0:	9501      	str	r5, [sp, #4]
    return alias.f;
240194a2:	ee17 3a90 	vmov	r3, s15
240194a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240194aa:	ee08 3a90 	vmov	s17, r3
240194ae:	f7f9 ff01 	bl	240132b4 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
240194b2:	9801      	ldr	r0, [sp, #4]
240194b4:	f7f9 ff0c 	bl	240132d0 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
240194b8:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
240194bc:	f24b 7317 	movw	r3, #46871	; 0xb717
        x->prevBarPosSmoothVol = barPosSmoothVol;
240194c0:	ed84 0a48 	vstr	s0, [r4, #288]	; 0x120
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
240194c4:	ee70 7a67 	vsub.f32	s15, s0, s15
        if (differenceFastSmooth < 0.0001f)
240194c8:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
240194cc:	ee07 3a10 	vmov	s14, r3
240194d0:	ee17 3a90 	vmov	r3, s15
240194d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240194d8:	ee07 3a90 	vmov	s15, r3
240194dc:	eef4 7ac7 	vcmpe.f32	s15, s14
240194e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240194e4:	f140 83af 	bpl.w	24019c46 <tTString_tick+0x812>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
240194e8:	f24c 52ac 	movw	r2, #50604	; 0xc5ac
240194ec:	f24e 338e 	movw	r3, #58254	; 0xe38e
240194f0:	2100      	movs	r1, #0
240194f2:	f2c3 7227 	movt	r2, #14119	; 0x3727
240194f6:	f2c4 438a 	movt	r3, #17546	; 0x448a
240194fa:	ee06 1a10 	vmov	s12, r1
240194fe:	ee06 2a90 	vmov	s13, r2
24019502:	ee07 3a10 	vmov	s14, r3
24019506:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401950a:	ee27 8a87 	vmul.f32	s16, s15, s14
2401950e:	fe88 8a06 	vmaxnm.f32	s16, s16, s12
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24019512:	ee38 0aa8 	vadd.f32	s0, s17, s17
    if (val < min)
24019516:	2300      	movs	r3, #0
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
24019518:	ed94 aa5b 	vldr	s20, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
2401951c:	edd4 9a3f 	vldr	s19, [r4, #252]	; 0xfc
24019520:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    x->prevBarPosSmoothed = barPosSmoothed;
24019524:	ed84 9a4a 	vstr	s18, [r4, #296]	; 0x128
24019528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401952c:	f100 8410 	bmi.w	24019d50 <tTString_tick+0x91c>
    else if (val > max)
24019530:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        return max;
24019534:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24019538:	eef4 8a47 	vcmp.f32	s17, s14
2401953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019540:	fe37 0a80 	vselgt.f32	s0, s15, s0
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
24019544:	f104 0048 	add.w	r0, r4, #72	; 0x48
24019548:	f7f9 ff2e 	bl	240133a8 <tSlide_tick>
    if (x->wound)
2401954c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
24019550:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
24019554:	2b00      	cmp	r3, #0
24019556:	f000 83ff 	beq.w	24019d58 <tTString_tick+0x924>
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
2401955a:	ee2a aa09 	vmul.f32	s20, s20, s18
		if (bumpDifference > 1.0f)
2401955e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24019562:	ee7a 8a69 	vsub.f32	s17, s20, s19
    return alias.f;
24019566:	ee18 3a90 	vmov	r3, s17
2401956a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401956e:	ee08 3a90 	vmov	s17, r3
		if (bumpDifference > 1.0f)
24019572:	eef4 8ac9 	vcmpe.f32	s17, s18
24019576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401957a:	f300 8367 	bgt.w	24019c4c <tTString_tick+0x818>
			x->bumpOsc = 0;
2401957e:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24019580:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24019584:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019588:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
2401958c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
24019590:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
24019594:	f640 32b7 	movw	r2, #2999	; 0xbb7
24019598:	4293      	cmp	r3, r2
2401959a:	f240 83a3 	bls.w	24019ce4 <tTString_tick+0x8b0>
			tSlide_setDest(&x->barSmooth, 5.0f);
2401959e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240195a2:	4628      	mov	r0, r5
240195a4:	f7f9 fece 	bl	24013344 <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
240195a8:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
240195aa:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
240195ae:	f7f9 fecd 	bl	2401334c <tSlide_tickNoInput>
240195b2:	eeb0 9a40 	vmov.f32	s18, s0
		tSVF_setFreq(&x->barResonator, barFreq);
240195b6:	4628      	mov	r0, r5
240195b8:	f7fa fc12 	bl	24013de0 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
240195bc:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240195c0:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
240195c2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240195c6:	f7f9 fec1 	bl	2401334c <tSlide_tickNoInput>
		if (pulseVal > .99f)
240195ca:	f247 03a4 	movw	r3, #28836	; 0x70a4
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240195ce:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
240195d2:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
240195d6:	ee07 3a90 	vmov	s15, r3
240195da:	eeb4 0ae7 	vcmpe.f32	s0, s15
240195de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240195e2:	f300 83e7 	bgt.w	24019db4 <tTString_tick+0x980>
		x->slideNoise *= pulseVal;
240195e6:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
240195ea:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
240195ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
240195f0:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
240195f4:	f7f9 fe6c 	bl	240132d0 <tExpSmooth_tick>
240195f8:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
240195fc:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
240195fe:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24019602:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24019606:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
2401960a:	f7fa fb4d 	bl	24013ca8 <tSVF_tick>
2401960e:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
24019612:	f247 5386 	movw	r3, #30086	; 0x7586
24019616:	f64d 1227 	movw	r2, #55591	; 0xd927
2401961a:	ee60 7a27 	vmul.f32	s15, s0, s15
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
2401961e:	f6c3 4321 	movt	r3, #15393	; 0x3c21
24019622:	f6c3 6228 	movt	r2, #15912	; 0x3e28
    Lfloat den = InvSqrt(1.0f + a * a);
24019626:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
2401962a:	ee27 6aa7 	vmul.f32	s12, s15, s15
2401962e:	ee05 3a10 	vmov	s10, r3
24019632:	ee06 2a90 	vmov	s13, r2
		if (barFreq < 300.0f)
24019636:	2200      	movs	r2, #0
    i = 0x5f3759df - (i>>1); // gives initial guess y0
24019638:	f645 13df 	movw	r3, #23007	; 0x59df
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2401963c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24019640:	eee6 6a05 	vfma.f32	s13, s12, s10
24019644:	f2c4 3296 	movt	r2, #17302	; 0x4396
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24019648:	ee27 5a86 	vmul.f32	s10, s15, s12
    i = 0x5f3759df - (i>>1); // gives initial guess y0
2401964c:	f6c5 7337 	movt	r3, #24375	; 0x5f37
24019650:	ee06 2a10 	vmov	s12, r2
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24019654:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
24019658:	eeb4 9ac6 	vcmpe.f32	s18, s12
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
2401965c:	eee5 7a26 	vfma.f32	s15, s10, s13
    Lfloat den = InvSqrt(1.0f + a * a);
24019660:	eef0 6a65 	vmov.f32	s13, s11
24019664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019668:	eee7 6aa7 	vfma.f32	s13, s15, s15
    x = *(Lfloat*)&i; // convert bits back to float
2401966c:	ee67 7a87 	vmul.f32	s15, s15, s14
24019670:	ee16 2a90 	vmov	r2, s13
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24019674:	ee26 7a87 	vmul.f32	s14, s13, s14
    x = *(Lfloat*)&i; // convert bits back to float
24019678:	eba3 0362 	sub.w	r3, r3, r2, asr #1
2401967c:	ee06 3a90 	vmov	s13, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
24019680:	ee27 7a26 	vmul.f32	s14, s14, s13
24019684:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019688:	eee6 4ac7 	vfms.f32	s9, s13, s14
2401968c:	d519      	bpl.n	240196c2 <tTString_tick+0x28e>
			filterFade = (barFreq - 100.0f) * 0.005f;
2401968e:	2300      	movs	r3, #0
24019690:	f24d 720a 	movw	r2, #55050	; 0xd70a
24019694:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
24019698:	f6c3 32a3 	movt	r2, #15267	; 0x3ba3
2401969c:	ee07 3a10 	vmov	s14, r3
240196a0:	ee06 2a90 	vmov	s13, r2
240196a4:	ee39 7a47 	vsub.f32	s14, s18, s14
240196a8:	ee27 7a26 	vmul.f32	s14, s14, s13
    if (val < min)
240196ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
240196b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240196b4:	d407      	bmi.n	240196c6 <tTString_tick+0x292>
    else if (val > max)
240196b6:	eeb4 9ac6 	vcmpe.f32	s18, s12
240196ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240196be:	f340 8380 	ble.w	24019dc2 <tTString_tick+0x98e>
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
240196c2:	eee4 8aa7 	vfma.f32	s17, s9, s15
		x->slideNoise *= x->muted;
240196c6:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
240196ca:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
240196ce:	ee28 0aa7 	vmul.f32	s0, s17, s15
240196d2:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
240196d6:	f7fa fd99 	bl	2401420c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
240196da:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
240196de:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
240196e2:	f504 7088 	add.w	r0, r4, #272	; 0x110
240196e6:	ee68 7a27 	vmul.f32	s15, s16, s15
240196ea:	ee27 0a80 	vmul.f32	s0, s15, s0
240196ee:	f7fa fadb 	bl	24013ca8 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
240196f2:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
240196f6:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
240196f8:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
240196fc:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
240196fe:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
24019702:	f340 834f 	ble.w	24019da4 <tTString_tick+0x970>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24019706:	f104 0350 	add.w	r3, r4, #80	; 0x50
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
2401970a:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
2401970e:	f104 0518 	add.w	r5, r4, #24
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
24019712:	f04f 0900 	mov.w	r9, #0
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24019716:	9301      	str	r3, [sp, #4]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
24019718:	f104 034c 	add.w	r3, r4, #76	; 0x4c
2401971c:	9302      	str	r3, [sp, #8]
    	x->tensionAmount = tension * 0.01f;
2401971e:	f24d 730a 	movw	r3, #55050	; 0xd70a
24019722:	f6c3 4323 	movt	r3, #15395	; 0x3c23
24019726:	ee0c 3a10 	vmov	s24, r3
2401972a:	f64f 1383 	movw	r3, #63875	; 0xf983
2401972e:	f6c3 6322 	movt	r3, #15906	; 0x3e22
24019732:	ee0a 3a90 	vmov	s21, r3
24019736:	f24f 53c2 	movw	r3, #62914	; 0xf5c2
2401973a:	f6cb 53a8 	movt	r3, #48552	; 0xbda8
2401973e:	ee0b 3a90 	vmov	s23, r3
24019742:	f245 5355 	movw	r3, #21845	; 0x5555
24019746:	f6c3 53d5 	movt	r3, #15829	; 0x3dd5
2401974a:	9311      	str	r3, [sp, #68]	; 0x44
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401974c:	f244 73ed 	movw	r3, #18413	; 0x47ed
24019750:	f6c3 330a 	movt	r3, #15114	; 0x3b0a
24019754:	ee09 3a90 	vmov	s19, r3
24019758:	f642 731b 	movw	r3, #12059	; 0x2f1b
2401975c:	f6c3 33dd 	movt	r3, #15325	; 0x3bdd
24019760:	ee09 3a10 	vmov	s18, r3
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
24019764:	f504 73c0 	add.w	r3, r4, #384	; 0x180
24019768:	9303      	str	r3, [sp, #12]
2401976a:	f504 73be 	add.w	r3, r4, #380	; 0x17c
2401976e:	9304      	str	r3, [sp, #16]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
24019770:	f104 0324 	add.w	r3, r4, #36	; 0x24
24019774:	9305      	str	r3, [sp, #20]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24019776:	f104 0328 	add.w	r3, r4, #40	; 0x28
2401977a:	9306      	str	r3, [sp, #24]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
2401977c:	f104 03ac 	add.w	r3, r4, #172	; 0xac
24019780:	9307      	str	r3, [sp, #28]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24019782:	f504 73ac 	add.w	r3, r4, #344	; 0x158
24019786:	9308      	str	r3, [sp, #32]
24019788:	f104 031c 	add.w	r3, r4, #28
2401978c:	9309      	str	r3, [sp, #36]	; 0x24
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
2401978e:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
24019792:	930a      	str	r3, [sp, #40]	; 0x28
24019794:	f104 0320 	add.w	r3, r4, #32
24019798:	930b      	str	r3, [sp, #44]	; 0x2c
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
2401979a:	f104 0368 	add.w	r3, r4, #104	; 0x68
2401979e:	930c      	str	r3, [sp, #48]	; 0x30
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
240197a0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
240197a4:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
240197a6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
240197aa:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
240197ac:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
240197b0:	930f      	str	r3, [sp, #60]	; 0x3c
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
240197b2:	f504 73c4 	add.w	r3, r4, #392	; 0x188
240197b6:	9310      	str	r3, [sp, #64]	; 0x40
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
240197b8:	9801      	ldr	r0, [sp, #4]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
240197ba:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
240197be:	f7f9 fd87 	bl	240132d0 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
240197c2:	9802      	ldr	r0, [sp, #8]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
240197c4:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
240197c8:	f7f9 fd82 	bl	240132d0 <tExpSmooth_tick>
240197cc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
240197d0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
240197d4:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
240197d6:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
240197da:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
240197de:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
240197e2:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
240197e6:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
240197ea:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
240197ee:	eef8 da45 	vcvt.f32.u32	s27, s10
240197f2:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
    	x->tensionAmount = tension * 0.01f;
240197f6:	ee67 7a8c 	vmul.f32	s15, s15, s24
240197fa:	ee27 7a2a 	vmul.f32	s14, s14, s21
240197fe:	fecd dae6 	vminnm.f32	s27, s27, s13
24019802:	eeb1 8a6d 	vneg.f32	s16, s27
24019806:	ee67 7a80 	vmul.f32	s15, s15, s0
2401980a:	eeb0 0a6d 	vmov.f32	s0, s27
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
2401980e:	ee6d 8aa8 	vmul.f32	s17, s27, s17
    	x->tensionAmount = tension * 0.01f;
24019812:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24019816:	eea5 0ac6 	vfms.f32	s0, s11, s12
2401981a:	eead 0ac7 	vfms.f32	s0, s27, s14
2401981e:	ee30 0a67 	vsub.f32	s0, s0, s15
24019822:	f7f8 fc1d 	bl	24012060 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24019826:	eeb0 0a6d 	vmov.f32	s0, s27
2401982a:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
2401982e:	4628      	mov	r0, r5
24019830:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
24019834:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
24019838:	eea6 0a66 	vfms.f32	s0, s12, s13
2401983c:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
24019840:	ee67 7aaa 	vmul.f32	s15, s15, s21
24019844:	ee30 0a47 	vsub.f32	s0, s0, s14
24019848:	eea8 0a27 	vfma.f32	s0, s16, s15
2401984c:	f7f8 fc08 	bl	24012060 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
24019850:	9803      	ldr	r0, [sp, #12]
24019852:	f7fe fa4d 	bl	24017cf0 <tNoise_tick>
24019856:	eeb0 8a40 	vmov.f32	s16, s0
2401985a:	9804      	ldr	r0, [sp, #16]
2401985c:	f7f9 fd38 	bl	240132d0 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
24019860:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
24019864:	ee28 8a00 	vmul.f32	s16, s16, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
24019868:	4630      	mov	r0, r6
2401986a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401986e:	ee38 8a08 	vadd.f32	s16, s16, s16
24019872:	ee17 1a90 	vmov	r1, s15
24019876:	eeb0 0a48 	vmov.f32	s0, s16
2401987a:	f7f8 fd0b 	bl	24012294 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
2401987e:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
24019882:	eeb0 0a48 	vmov.f32	s0, s16
24019886:	4628      	mov	r0, r5
24019888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401988c:	ee17 1a90 	vmov	r1, s15
24019890:	f7f8 fd00 	bl	24012294 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
24019894:	9805      	ldr	r0, [sp, #20]
24019896:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
2401989a:	f7fa f89d 	bl	240139d8 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
2401989e:	9806      	ldr	r0, [sp, #24]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
240198a0:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
240198a4:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
240198a8:	f7fa f896 	bl	240139d8 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
240198ac:	ed94 8a20 	vldr	s16, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
240198b0:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
240198b2:	eeb0 aa40 	vmov.f32	s20, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
240198b6:	ee2d 8a88 	vmul.f32	s16, s27, s16
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
240198ba:	eebc bac8 	vcvt.u32.f32	s22, s16
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
240198be:	eef8 7a4b 	vcvt.f32.u32	s15, s22
240198c2:	ee38 8a67 	vsub.f32	s16, s16, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
240198c6:	f7f8 fb99 	bl	24011ffc <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240198ca:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
240198cc:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240198d0:	f7f8 fb94 	bl	24011ffc <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
240198d4:	ee1b 1a10 	vmov	r1, s22
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240198d8:	eeb0 da40 	vmov.f32	s26, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
240198dc:	4630      	mov	r0, r6
240198de:	eeb0 0a48 	vmov.f32	s0, s16
240198e2:	f7f8 fc71 	bl	240121c8 <tLagrangeDelay_tapOutInterpolated>
240198e6:	eef0 7a40 	vmov.f32	s15, s0
240198ea:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
240198ee:	eeb0 0a48 	vmov.f32	s0, s16
240198f2:	ee1b 1a10 	vmov	r1, s22
240198f6:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
240198f8:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
240198fc:	f7f8 fc64 	bl	240121c8 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
24019900:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
24019904:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
24019908:	eea0 da27 	vfma.f32	s26, s0, s15
        if (x->inharmonic)
2401990c:	2b00      	cmp	r3, #0
2401990e:	f040 8207 	bne.w	24019d20 <tTString_tick+0x8ec>
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019912:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
24019916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401991a:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
2401991e:	ed94 6a1e 	vldr	s12, [r4, #120]	; 0x78
24019922:	ee67 7a87 	vmul.f32	s15, s15, s14
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24019926:	9807      	ldr	r0, [sp, #28]
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019928:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
2401992c:	ed94 8a3d 	vldr	s16, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24019930:	edd4 ea27 	vldr	s29, [r4, #156]	; 0x9c
24019934:	ee67 7a86 	vmul.f32	s15, s15, s12
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019938:	ee2e ea27 	vmul.f32	s28, s28, s15
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
2401993c:	ee2d da27 	vmul.f32	s26, s26, s15
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019940:	fe8e ea66 	vminnm.f32	s28, s28, s13
24019944:	fe8e ea07 	vmaxnm.f32	s28, s28, s14
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019948:	fe8d da66 	vminnm.f32	s26, s26, s13
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
2401994c:	ed84 ea0f 	vstr	s28, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24019950:	fe8d da07 	vmaxnm.f32	s26, s26, s14
24019954:	ed84 da10 	vstr	s26, [r4, #64]	; 0x40
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24019958:	f7fd fc84 	bl	24017264 <tCycle_tick>
2401995c:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
24019960:	eee0 ea27 	vfma.f32	s29, s0, s15
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
24019964:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
24019968:	eeee 7aab 	vfma.f32	s15, s29, s23
2401996c:	ee68 7a27 	vmul.f32	s15, s16, s15
        while (pickupPos > halfCurrentDelay)
24019970:	eef4 8ae7 	vcmpe.f32	s17, s15
24019974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019978:	f140 81e3 	bpl.w	24019d42 <tTString_tick+0x90e>
        uint32_t backwards = 0;
2401997c:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
2401997e:	ee77 7ae8 	vsub.f32	s15, s15, s17
        	backwards = !backwards;
24019982:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
24019986:	eef4 8ae7 	vcmpe.f32	s17, s15
2401998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401998e:	d4f6      	bmi.n	2401997e <tTString_tick+0x54a>
        while (pickupPos < 0.0f)
24019990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24019994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019998:	d508      	bpl.n	240199ac <tTString_tick+0x578>
        	pickupPos = pickupPos + halfCurrentDelay;
2401999a:	ee77 7aa8 	vadd.f32	s15, s15, s17
        	backwards = !backwards;
2401999e:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
240199a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240199a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240199aa:	d4f6      	bmi.n	2401999a <tTString_tick+0x566>
        if (backwards)
240199ac:	2b00      	cmp	r3, #0
240199ae:	f000 81a2 	beq.w	24019cf6 <tTString_tick+0x8c2>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
240199b2:	ee38 6ae7 	vsub.f32	s12, s17, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
240199b6:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
        	inversePickupPos = halfCurrentDelay + pickupPos;
240199ba:	ee38 7aa7 	vadd.f32	s14, s17, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
240199be:	eec6 6a28 	vdiv.f32	s13, s12, s17
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
240199c2:	ee3d da68 	vsub.f32	s26, s26, s17
240199c6:	ee3d da27 	vadd.f32	s26, s26, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
240199ca:	eefc 7ac6 	vcvt.u32.f32	s15, s12
240199ce:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
240199d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
240199d6:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
240199da:	ee36 8a67 	vsub.f32	s16, s12, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
240199de:	ee3d da27 	vadd.f32	s26, s26, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
240199e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240199e6:	edc4 6a5e 	vstr	s13, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
240199ea:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
240199ee:	4639      	mov	r1, r7
240199f0:	4630      	mov	r0, r6
    for (int i = 0; i < x->oversampling; i++)
240199f2:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
240199f6:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
240199fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
240199fe:	ee7d dac7 	vsub.f32	s27, s27, s14
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
24019a02:	f108 0b01 	add.w	fp, r8, #1
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
24019a06:	ee77 8a67 	vsub.f32	s17, s14, s15
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
24019a0a:	ee7d daa7 	vadd.f32	s27, s27, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
24019a0e:	f7f8 fbcf 	bl	240121b0 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24019a12:	4651      	mov	r1, sl
24019a14:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
24019a16:	eef0 ea40 	vmov.f32	s29, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24019a1a:	f7f8 fbc9 	bl	240121b0 <tLagrangeDelay_tapOut>
24019a1e:	ee60 6a08 	vmul.f32	s13, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019a22:	4641      	mov	r1, r8
24019a24:	4630      	mov	r0, r6
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24019a26:	eeee 6a8d 	vfma.f32	s13, s29, s26
24019a2a:	eeb0 ea66 	vmov.f32	s28, s13
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019a2e:	f7f8 fbbf 	bl	240121b0 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019a32:	4659      	mov	r1, fp
24019a34:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019a36:	eef0 ea40 	vmov.f32	s29, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019a3a:	f7f8 fbb9 	bl	240121b0 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
24019a3e:	ee7e 6a0e 	vadd.f32	s13, s28, s28
24019a42:	f640 106c 	movw	r0, #2412	; 0x96c
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019a46:	ee20 7a28 	vmul.f32	s14, s0, s17
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24019a4a:	4639      	mov	r1, r7
24019a4c:	f6c3 10f9 	movt	r0, #14841	; 0x39f9
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019a50:	ee66 5aa6 	vmul.f32	s11, s13, s13
24019a54:	ee0e 0a10 	vmov	s28, r0
24019a58:	f24d 7077 	movw	r0, #55159	; 0xd777
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019a5c:	eeae 7aad 	vfma.f32	s14, s29, s27
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019a60:	ee25 6aa6 	vmul.f32	s12, s11, s13
24019a64:	f6c3 2059 	movt	r0, #14937	; 0x3a59
24019a68:	ee0f 0a10 	vmov	s30, r0
24019a6c:	f649 109a 	movw	r0, #39322	; 0x999a
24019a70:	ee66 7a29 	vmul.f32	s15, s12, s19
24019a74:	ee26 6a86 	vmul.f32	s12, s13, s12
24019a78:	f6c3 5099 	movt	r0, #15769	; 0x3d99
	x = x * 2.0f;
24019a7c:	ee37 7a07 	vadd.f32	s14, s14, s14
24019a80:	eee5 7a89 	vfma.f32	s15, s11, s18
24019a84:	ee0e 0a90 	vmov	s29, r0
24019a88:	ee03 0a90 	vmov	s7, r0
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24019a8c:	f64b 40ed 	movw	r0, #48365	; 0xbced
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019a90:	ee67 4a07 	vmul.f32	s9, s14, s14
24019a94:	eee6 3a0f 	vfma.f32	s7, s12, s30
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24019a98:	f2c4 008b 	movt	r0, #16523	; 0x408b
24019a9c:	ee27 4a0f 	vmul.f32	s8, s14, s30
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019aa0:	ee24 5a87 	vmul.f32	s10, s9, s14
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24019aa4:	ee0f 0a90 	vmov	s31, r0
24019aa8:	eee6 7a0e 	vfma.f32	s15, s12, s28
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24019aac:	4628      	mov	r0, r5
24019aae:	ee65 5a47 	vnmul.f32	s11, s10, s14
24019ab2:	eee7 7a6e 	vfms.f32	s15, s14, s29
24019ab6:	eee6 7aa3 	vfma.f32	s15, s13, s7
24019aba:	eee4 7ac9 	vfms.f32	s15, s9, s18
24019abe:	eee5 7a69 	vfms.f32	s15, s10, s19
24019ac2:	eee5 7a8e 	vfma.f32	s15, s11, s28
24019ac6:	eee5 7a84 	vfma.f32	s15, s11, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24019aca:	ee67 7aaf 	vmul.f32	s15, s15, s31
24019ace:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24019ad2:	f7f8 fb6d 	bl	240121b0 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24019ad6:	4651      	mov	r1, sl
24019ad8:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24019ada:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24019ade:	f7f8 fb67 	bl	240121b0 <tLagrangeDelay_tapOut>
24019ae2:	ee60 6a08 	vmul.f32	s13, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019ae6:	4641      	mov	r1, r8
24019ae8:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24019aea:	eeeb 6a0d 	vfma.f32	s13, s22, s26
24019aee:	eeb0 8a66 	vmov.f32	s16, s13
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019af2:	f7f8 fb5d 	bl	240121b0 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019af6:	4659      	mov	r1, fp
24019af8:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24019afa:	eeb0 da40 	vmov.f32	s26, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019afe:	f7f8 fb57 	bl	240121b0 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
24019b02:	ee78 6a08 	vadd.f32	s13, s16, s16
24019b06:	ed94 5a58 	vldr	s10, [r4, #352]	; 0x160
24019b0a:	ed94 6a59 	vldr	s12, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019b0e:	ee20 7a28 	vmul.f32	s14, s0, s17
24019b12:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
24019b16:	eef0 4a6e 	vmov.f32	s9, s29
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019b1a:	ee66 5aa6 	vmul.f32	s11, s13, s13
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24019b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
24019b20:	eee5 7a06 	vfma.f32	s15, s10, s12
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24019b24:	eead 7a2d 	vfma.f32	s14, s26, s27
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019b28:	ee25 6aa6 	vmul.f32	s12, s11, s13
24019b2c:	eeb0 0a67 	vmov.f32	s0, s15
24019b30:	ee66 7a29 	vmul.f32	s15, s12, s19
24019b34:	ee26 6a86 	vmul.f32	s12, s13, s12
	x = x * 2.0f;
24019b38:	ee37 7a07 	vadd.f32	s14, s14, s14
24019b3c:	eee5 7a89 	vfma.f32	s15, s11, s18
24019b40:	eee6 4a0f 	vfma.f32	s9, s12, s30
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019b44:	ee27 5a07 	vmul.f32	s10, s14, s14
24019b48:	ee27 fa0f 	vmul.f32	s30, s14, s30
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24019b4c:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24019b50:	ee67 5a05 	vmul.f32	s11, s14, s10
24019b54:	eee6 7a0e 	vfma.f32	s15, s12, s28
	return out;
24019b58:	ee25 6ac7 	vnmul.f32	s12, s11, s14
24019b5c:	eee7 7a6e 	vfms.f32	s15, s14, s29
24019b60:	eee6 7aa4 	vfma.f32	s15, s13, s9
24019b64:	eee5 7a49 	vfms.f32	s15, s10, s18
24019b68:	eee5 7ae9 	vfms.f32	s15, s11, s19
24019b6c:	eee6 7a0e 	vfma.f32	s15, s12, s28
24019b70:	eee6 7a0f 	vfma.f32	s15, s12, s30
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24019b74:	ee67 7aaf 	vmul.f32	s15, s15, s31
24019b78:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24019b7c:	f7fa fb46 	bl	2401420c <tHighpass_tick>
24019b80:	9808      	ldr	r0, [sp, #32]
24019b82:	f7f8 ffc7 	bl	24012b14 <tFeedbackLeveler_tick>
24019b86:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
24019b8a:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
24019b8e:	eef0 8a40 	vmov.f32	s17, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24019b92:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
24019b96:	980b      	ldr	r0, [sp, #44]	; 0x2c
24019b98:	eee6 7a87 	vfma.f32	s15, s13, s14
24019b9c:	ee3a 0a27 	vadd.f32	s0, s20, s15
24019ba0:	f7fa fb34 	bl	2401420c <tHighpass_tick>
24019ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
24019ba6:	f7f8 ffb5 	bl	24012b14 <tFeedbackLeveler_tick>
24019baa:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
24019bae:	4630      	mov	r0, r6
24019bb0:	eeb0 0a68 	vmov.f32	s0, s17
24019bb4:	f7f8 fa14 	bl	24011fe0 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
24019bb8:	4628      	mov	r0, r5
24019bba:	eeb0 0a48 	vmov.f32	s0, s16
24019bbe:	f7f8 fa0f 	bl	24011fe0 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
24019bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
24019bc4:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
24019bc8:	f7fa f86e 	bl	24013ca8 <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
24019bcc:	980d      	ldr	r0, [sp, #52]	; 0x34
24019bce:	f7fa f86b 	bl	24013ca8 <tSVF_tick>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
24019bd2:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
24019bd6:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
24019bda:	980e      	ldr	r0, [sp, #56]	; 0x38
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
24019bdc:	eee7 7a00 	vfma.f32	s15, s14, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24019be0:	edd4 8a63 	vldr	s17, [r4, #396]	; 0x18c
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
24019be4:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
24019be8:	eeb0 0a48 	vmov.f32	s0, s16
24019bec:	f7fa f85c 	bl	24013ca8 <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
24019bf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
24019bf2:	f7fa f859 	bl	24013ca8 <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
24019bf6:	9810      	ldr	r0, [sp, #64]	; 0x40
24019bf8:	f7fa f856 	bl	24013ca8 <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
24019bfc:	6863      	ldr	r3, [r4, #4]
24019bfe:	454b      	cmp	r3, r9
24019c00:	f73f adda 	bgt.w	240197b8 <tTString_tick+0x384>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24019c04:	ee78 8aa8 	vadd.f32	s17, s17, s17
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
24019c08:	f246 6366 	movw	r3, #26214	; 0x6666
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24019c0c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24019c10:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24019c14:	f6c3 73a6 	movt	r3, #16294	; 0x3fa6
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24019c18:	ee77 7ae8 	vsub.f32	s15, s15, s17
24019c1c:	ee07 3a10 	vmov	s14, r3
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24019c20:	ee68 8aa6 	vmul.f32	s17, s17, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24019c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24019c28:	eef1 6ae8 	vsqrt.f32	s13, s17
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24019c2c:	eeb1 6ae7 	vsqrt.f32	s12, s15
24019c30:	ee20 0a06 	vmul.f32	s0, s0, s12
24019c34:	eea8 0a26 	vfma.f32	s0, s16, s13
24019c38:	ee20 0a07 	vmul.f32	s0, s0, s14
}
24019c3c:	b013      	add	sp, #76	; 0x4c
24019c3e:	ecbd 8b10 	vpop	{d8-d15}
24019c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
24019c46:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24019c4a:	e462      	b.n	24019512 <tTString_tick+0xde>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24019c4c:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24019c50:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24019c54:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019c58:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24019c5c:	4638      	mov	r0, r7
24019c5e:	f7f9 fb2d 	bl	240132bc <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24019c62:	eeb0 0a49 	vmov.f32	s0, s18
24019c66:	4630      	mov	r0, r6
24019c68:	f7f9 fb6c 	bl	24013344 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24019c6c:	eec9 6a28 	vdiv.f32	s13, s18, s17
24019c70:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			if (x->timeSinceLastBump < 100)
24019c74:	2300      	movs	r3, #0
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019c76:	ed94 7a02 	vldr	s14, [r4, #8]
24019c7a:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
24019c7c:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019c80:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
			x->lastBump = currentBump;
24019c84:	ed84 aa3f 	vstr	s20, [r4, #252]	; 0xfc
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24019c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019c8c:	ee20 0a07 	vmul.f32	s0, s0, s14
			if (x->timeSinceLastBump < 100)
24019c90:	ee07 3a10 	vmov	s14, r3
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24019c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
24019c98:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24019c9c:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019ca0:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
24019ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ca8:	bf4c      	ite	mi
24019caa:	2301      	movmi	r3, #1
24019cac:	2300      	movpl	r3, #0
24019cae:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24019cb2:	f7f9 fb47 	bl	24013344 <tSlide_setDest>
			x->sampleCount = 0;
24019cb6:	2200      	movs	r2, #0
		if (x->bumpOsc)
24019cb8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
24019cbc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
24019cc0:	b183      	cbz	r3, 24019ce4 <tTString_tick+0x8b0>
			if (x->bumpCount > x->timeSinceLastBump)
24019cc2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
24019cc6:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
24019cca:	ee07 3a10 	vmov	s14, r3
24019cce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24019cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
24019cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019cda:	dc77      	bgt.n	24019dcc <tTString_tick+0x998>
			x->bumpCount++;
24019cdc:	3301      	adds	r3, #1
24019cde:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
24019ce2:	4613      	mov	r3, r2
			x->sampleCount++;
24019ce4:	3301      	adds	r3, #1
24019ce6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
24019cea:	e45d      	b.n	240195a8 <tTString_tick+0x174>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
24019cec:	f7f9 fae2 	bl	240132b4 <tExpSmooth_setDest>
24019cf0:	9801      	ldr	r0, [sp, #4]
24019cf2:	f7ff bbc8 	b.w	24019486 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24019cf6:	eebc 6ae7 	vcvt.u32.f32	s12, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24019cfa:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
24019cfe:	eec7 6aa8 	vdiv.f32	s13, s15, s17
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24019d02:	ee16 7a10 	vmov	r7, s12
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
24019d06:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24019d0a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24019d0e:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat inversePickupPos = currentDelay - pickupPos;
24019d12:	ee3d 7ae7 	vsub.f32	s14, s27, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24019d16:	ee37 8ac6 	vsub.f32	s16, s15, s12
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24019d1a:	ee3d da06 	vadd.f32	s26, s26, s12
        if (backwards)
24019d1e:	e660      	b.n	240199e2 <tTString_tick+0x5ae>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24019d20:	eeb0 0a4e 	vmov.f32	s0, s28
24019d24:	f104 0054 	add.w	r0, r4, #84	; 0x54
24019d28:	f7f9 fd5c 	bl	240137e4 <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
24019d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24019d30:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
24019d34:	eeb0 0a4d 	vmov.f32	s0, s26
24019d38:	f7f9 fd54 	bl	240137e4 <tThiranAllpassSOCascade_tick>
24019d3c:	eeb0 da40 	vmov.f32	s26, s0
24019d40:	e5e7      	b.n	24019912 <tTString_tick+0x4de>
        while (pickupPos < 0.0f)
24019d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24019d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019d4a:	d5d4      	bpl.n	24019cf6 <tTString_tick+0x8c2>
        uint32_t backwards = 0;
24019d4c:	2300      	movs	r3, #0
24019d4e:	e624      	b.n	2401999a <tTString_tick+0x566>
        return min;
24019d50:	ee00 3a10 	vmov	s0, r3
24019d54:	f7ff bbf6 	b.w	24019544 <tTString_tick+0x110>
		x->slideNoise *= x->muted;
24019d58:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24019d5c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
24019d60:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
24019d64:	ee20 0a27 	vmul.f32	s0, s0, s15
24019d68:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24019d6c:	f7fa fa4e 	bl	2401420c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24019d70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24019d74:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
24019d78:	f504 7088 	add.w	r0, r4, #272	; 0x110
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24019d7c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24019d80:	ee67 7a87 	vmul.f32	s15, s15, s14
24019d84:	ee67 7a88 	vmul.f32	s15, s15, s16
24019d88:	ee27 0a80 	vmul.f32	s0, s15, s0
24019d8c:	f7f9 ff8c 	bl	24013ca8 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
24019d90:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
24019d94:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
24019d96:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
24019d9a:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
24019d9c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
24019da0:	f73f acb1 	bgt.w	24019706 <tTString_tick+0x2d2>
24019da4:	2300      	movs	r3, #0
24019da6:	ee00 3a10 	vmov	s0, r3
}
24019daa:	b013      	add	sp, #76	; 0x4c
24019dac:	ecbd 8b10 	vpop	{d8-d15}
24019db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tSlide_setDest(&x->barPulseSlide, 0.0f);
24019db4:	2300      	movs	r3, #0
24019db6:	4630      	mov	r0, r6
24019db8:	ee00 3a10 	vmov	s0, r3
24019dbc:	f7f9 fac2 	bl	24013344 <tSlide_setDest>
24019dc0:	e411      	b.n	240195e6 <tTString_tick+0x1b2>
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
24019dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
24019dc6:	eee4 8a87 	vfma.f32	s17, s9, s14
        return val;
24019dca:	e47c      	b.n	240196c6 <tTString_tick+0x292>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
24019dcc:	eeb0 0a49 	vmov.f32	s0, s18
24019dd0:	4638      	mov	r0, r7
24019dd2:	f7f9 fa73 	bl	240132bc <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
24019dd6:	eeb0 0a49 	vmov.f32	s0, s18
24019dda:	4630      	mov	r0, r6
24019ddc:	f7f9 fab2 	bl	24013344 <tSlide_setDest>
			x->bumpCount++;
24019de0:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
24019de2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
24019de6:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
24019dea:	f7ff bbd3 	b.w	24019594 <tTString_tick+0x160>
24019dee:	bf00      	nop

24019df0 <tTString_setFreq>:
{
24019df0:	b510      	push	{r4, lr}
24019df2:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
24019df6:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24019df8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
{
24019dfc:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24019dfe:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24019e02:	f104 0050 	add.w	r0, r4, #80	; 0x50
24019e06:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24019e0a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
24019e0e:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24019e12:	ee86 7a00 	vdiv.f32	s14, s12, s0
    x->freq = freq;
24019e16:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24019e1a:	ee20 8a26 	vmul.f32	s16, s0, s13
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24019e1e:	ee37 0a67 	vsub.f32	s0, s14, s15
24019e22:	f7f9 fa47 	bl	240132b4 <tExpSmooth_setDest>
    Lfloat result = 0.0f;
24019e26:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24019e28:	eeb0 0a48 	vmov.f32	s0, s16
24019e2c:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
24019e30:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24019e32:	f7e6 fd19 	bl	24000868 <arm_sin_f32>
24019e36:	eef0 7a40 	vmov.f32	s15, s0
24019e3a:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
24019e3e:	eeb0 0a48 	vmov.f32	s0, s16
24019e42:	ee68 8aa7 	vmul.f32	s17, s17, s15
24019e46:	f7e6 fcb7 	bl	240007b8 <arm_cos_f32>
24019e4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24019e4e:	a801      	add	r0, sp, #4
24019e50:	eef0 7a40 	vmov.f32	s15, s0
24019e54:	eeb0 0a68 	vmov.f32	s0, s17
24019e58:	eee9 0a67 	vfms.f32	s1, s18, s15
24019e5c:	f7e6 fa44 	bl	240002e8 <arm_atan2_f32>
     x->phaseComp = result;
24019e60:	9b01      	ldr	r3, [sp, #4]
24019e62:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
24019e66:	b002      	add	sp, #8
24019e68:	ecbd 8b04 	vpop	{d8-d9}
24019e6c:	bd10      	pop	{r4, pc}
24019e6e:	bf00      	nop

24019e70 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
24019e70:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
	 _tTString* x = *bw;
24019e74:	6801      	ldr	r1, [r0, #0]
	 x->decayInSeconds = decay;
24019e76:	ed81 0a22 	vstr	s0, [r1, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
24019e7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019e82:	dc3c      	bgt.n	24019efe <tTString_setDecayInSeconds+0x8e>
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019e84:	f64a 223b 	movw	r2, #43579	; 0xaa3b
24019e88:	f64c 43cd 	movw	r3, #52429	; 0xcccd
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019e8c:	f240 4cfd 	movw	ip, #1277	; 0x4fd
24019e90:	f643 10e9 	movw	r0, #14825	; 0x39e9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019e94:	f6cc 3238 	movt	r2, #52024	; 0xcb38
24019e98:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
24019e9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24019ea0:	ee06 2a90 	vmov	s13, r2
24019ea4:	ee07 3a10 	vmov	s14, r3
{
24019ea8:	b500      	push	{lr}
	 {
		 x->decayCoeff = 1.0f;
	 }
	 else
	 {
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
24019eaa:	edd1 7a19 	vldr	s15, [r1, #100]	; 0x64
24019eae:	ee20 0a27 	vmul.f32	s0, s0, s15
24019eb2:	eec6 7a80 	vdiv.f32	s15, s13, s0
24019eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019eba:	ee17 2a90 	vmov	r2, s15
24019ebe:	f102 5e7e 	add.w	lr, r2, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
24019ec2:	f3c2 12cf 	ubfx	r2, r2, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019ec6:	fb0c f302 	mul.w	r3, ip, r2
24019eca:	eb00 30a3 	add.w	r0, r0, r3, asr #14
24019ece:	f64c 037b 	movw	r3, #51323	; 0xc87b
24019ed2:	fb02 f000 	mul.w	r0, r2, r0
24019ed6:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
24019eda:	eb03 33a0 	add.w	r3, r3, r0, asr #14
24019ede:	fb02 f303 	mul.w	r3, r2, r3
24019ee2:	12db      	asrs	r3, r3, #11
24019ee4:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
24019ee8:	4473      	add	r3, lr
24019eea:	ee07 3a90 	vmov	s15, r3
24019eee:	fec7 7ac6 	vminnm.f32	s15, s15, s12
24019ef2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
24019ef6:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
	 }
}
24019efa:	f85d fb04 	ldr.w	pc, [sp], #4
		 x->decayCoeff = 1.0f;
24019efe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24019f02:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
24019f06:	4770      	bx	lr

24019f08 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
24019f08:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
24019f0a:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
24019f0e:	4770      	bx	lr

24019f10 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
24019f10:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
24019f12:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
24019f16:	4770      	bx	lr

24019f18 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
24019f18:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
24019f1a:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
24019f1e:	4770      	bx	lr

24019f20 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
24019f20:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
24019f22:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
24019f26:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
24019f2a:	f7fd b9c3 	b.w	240172b4 <tCycle_setFreq>
24019f2e:	bf00      	nop

24019f30 <tTString_mute>:
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019f30:	f641 126a 	movw	r2, #6506	; 0x196a
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
24019f34:	f04f 0c00 	mov.w	ip, #0
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019f38:	f643 11e9 	movw	r1, #14825	; 0x39e9
24019f3c:	f64c 037b 	movw	r3, #51323	; 0xc87b
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019f40:	f6cc 62ce 	movt	r2, #52942	; 0xcece
24019f44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019f48:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019f4c:	ee07 2a10 	vmov	s14, r2
{
24019f50:	b500      	push	{lr}
	 _tTString* x = *bw;
24019f52:	6800      	ldr	r0, [r0, #0]
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019f54:	f240 4efd 	movw	lr, #1277	; 0x4fd
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019f58:	ed90 6a19 	vldr	s12, [r0, #100]	; 0x64
	 x->muted = 0.0f;
24019f5c:	f8c0 c144 	str.w	ip, [r0, #324]	; 0x144
24019f60:	eec7 7a06 	vdiv.f32	s15, s14, s12
24019f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019f68:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
24019f6c:	f3c2 1ccf 	ubfx	ip, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24019f70:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24019f74:	fb0e fe0c 	mul.w	lr, lr, ip
24019f78:	eb01 31ae 	add.w	r1, r1, lr, asr #14
24019f7c:	fb0c f101 	mul.w	r1, ip, r1
24019f80:	eb03 33a1 	add.w	r3, r3, r1, asr #14
24019f84:	fb0c f303 	mul.w	r3, ip, r3
24019f88:	12db      	asrs	r3, r3, #11
24019f8a:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
24019f8e:	4413      	add	r3, r2
24019f90:	ee07 3a90 	vmov	s15, r3
24019f94:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
24019f98:	edc0 7a1e 	vstr	s15, [r0, #120]	; 0x78
}
24019f9c:	f85d fb04 	ldr.w	pc, [sp], #4

24019fa0 <tTString_setFilterFreqDirectly>:
    if (val < min)
24019fa0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
24019fa4:	b510      	push	{r4, lr}
24019fa6:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019faa:	ed2d 8b02 	vpush	{d8}
24019fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 _tTString* x = *bw;
24019fb2:	6804      	ldr	r4, [r0, #0]
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
24019fb4:	ed94 7a5a 	vldr	s14, [r4, #360]	; 0x168
24019fb8:	d401      	bmi.n	24019fbe <tTString_setFilterFreqDirectly+0x1e>
    else if (val > max)
24019fba:	fec7 7a40 	vminnm.f32	s15, s14, s0
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24019fbe:	ed94 0a04 	vldr	s0, [r4, #16]
24019fc2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	x->filterFreq = freqToUse;
24019fc6:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24019fca:	ee27 0a80 	vmul.f32	s0, s15, s0
24019fce:	f7e6 fc4b 	bl	24000868 <arm_sin_f32>
24019fd2:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
24019fd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
24019fda:	eeb0 0a48 	vmov.f32	s0, s16
24019fde:	f7f9 fce3 	bl	240139a8 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
24019fe2:	eeb0 0a48 	vmov.f32	s0, s16
24019fe6:	f104 0028 	add.w	r0, r4, #40	; 0x28
24019fea:	f7f9 fcdd 	bl	240139a8 <tCookOnePole_setPole>
	x->poleCoeff = freq;
24019fee:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
24019ff2:	ecbd 8b02 	vpop	{d8}
24019ff6:	bd10      	pop	{r4, pc}

24019ff8 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
24019ff8:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
24019ffa:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
24019ffe:	4770      	bx	lr

2401a000 <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
2401a000:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
2401a002:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
2401a006:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
2401a00a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
2401a00e:	4770      	bx	lr

2401a010 <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
2401a010:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
2401a012:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401a016:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
2401a01a:	eec6 7a80 	vdiv.f32	s15, s13, s0
2401a01e:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a022:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
2401a026:	4770      	bx	lr

2401a028 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
2401a028:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
2401a02a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
2401a02e:	4770      	bx	lr

2401a030 <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
2401a030:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
2401a032:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
2401a036:	4770      	bx	lr

2401a038 <tTString_setRippleDepth>:


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
	_tTString* x = *bw;
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a038:	f24d 710a 	movw	r1, #55050	; 0xd70a
2401a03c:	f24b 7317 	movw	r3, #46871	; 0xb717
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a040:	f64a 223b 	movw	r2, #43579	; 0xaa3b
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
2401a044:	f240 4cfd 	movw	ip, #1277	; 0x4fd
2401a048:	f6c3 31a3 	movt	r1, #15267	; 0x3ba3
2401a04c:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a050:	f6cc 3238 	movt	r2, #52024	; 0xcb38
	x->invOnePlusr = 1.0f / (1.0f + x->r);
2401a054:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a058:	ee07 1a10 	vmov	s14, r1
2401a05c:	ee07 3a90 	vmov	s15, r3
2401a060:	ee05 2a90 	vmov	s11, r2
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
2401a064:	f643 11e9 	movw	r1, #14825	; 0x39e9
2401a068:	f64c 037b 	movw	r3, #51323	; 0xc87b
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
2401a06c:	eef3 4a0e 	vmov.f32	s9, #62	; 0x41f00000  30.0
{
2401a070:	b510      	push	{r4, lr}
	_tTString* x = *bw;
2401a072:	6804      	ldr	r4, [r0, #0]
2401a074:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
{
2401a078:	b082      	sub	sp, #8
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a07a:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
2401a07e:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
2401a082:	eee6 7a07 	vfma.f32	s15, s12, s14
2401a086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
{
2401a08a:	eeb0 6a40 	vmov.f32	s12, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a08e:	ee20 7a07 	vmul.f32	s14, s0, s14
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
2401a092:	eeb0 0a45 	vmov.f32	s0, s10
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a096:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
2401a09a:	eea6 0a24 	vfma.f32	s0, s12, s9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a09e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
2401a0a2:	ed8d 0a01 	vstr	s0, [sp, #4]
2401a0a6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
2401a0aa:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401a0ae:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a0b2:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
2401a0b6:	fb0c fc00 	mul.w	ip, ip, r0
2401a0ba:	eb01 31ac 	add.w	r1, r1, ip, asr #14
2401a0be:	fb00 f101 	mul.w	r1, r0, r1
2401a0c2:	eb03 33a1 	add.w	r3, r3, r1, asr #14
2401a0c6:	fb00 f303 	mul.w	r3, r0, r3
2401a0ca:	f104 001c 	add.w	r0, r4, #28
2401a0ce:	12db      	asrs	r3, r3, #11
2401a0d0:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
2401a0d4:	4413      	add	r3, r2
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a0d6:	ee07 3a90 	vmov	s15, r3
2401a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
	x->invOnePlusr = 1.0f / (1.0f + x->r);
2401a0de:	ee37 7a85 	vadd.f32	s14, s15, s10
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401a0e2:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
2401a0e6:	eec5 7a07 	vdiv.f32	s15, s10, s14
2401a0ea:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
2401a0ee:	f7fa f881 	bl	240141f4 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
2401a0f2:	ed9d 0a01 	vldr	s0, [sp, #4]
2401a0f6:	f104 0020 	add.w	r0, r4, #32
}
2401a0fa:	b002      	add	sp, #8
2401a0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
2401a100:	f7fa b878 	b.w	240141f4 <tHighpass_setFreq>

2401a104 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
2401a104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
2401a108:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
2401a10a:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
2401a10e:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a112:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
2401a116:	4770      	bx	lr

2401a118 <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
2401a118:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
2401a11c:	b510      	push	{r4, lr}
2401a11e:	ed2d 8b02 	vpush	{d8}
2401a122:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
2401a126:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
2401a128:	ee20 0a27 	vmul.f32	s0, s0, s15
{
2401a12c:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
2401a12e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
2401a132:	ed8d 0a01 	vstr	s0, [sp, #4]
2401a136:	f7f8 fce1 	bl	24012afc <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
2401a13a:	ed9d 0a01 	vldr	s0, [sp, #4]
2401a13e:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
2401a142:	f7f8 fcdb 	bl	24012afc <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
2401a146:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401a14a:	f6c3 33a3 	movt	r3, #15267	; 0x3ba3
2401a14e:	ee07 3a90 	vmov	s15, r3
2401a152:	ee28 8a27 	vmul.f32	s16, s16, s15
2401a156:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
2401a15a:	b002      	add	sp, #8
2401a15c:	ecbd 8b02 	vpop	{d8}
2401a160:	bd10      	pop	{r4, pc}
2401a162:	bf00      	nop

2401a164 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
2401a164:	f64c 42cd 	movw	r2, #52429	; 0xcccd
2401a168:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
2401a16c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
2401a170:	f2c3 7327 	movt	r3, #14119	; 0x3727
{
2401a174:	b510      	push	{r4, lr}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
2401a176:	ee07 2a90 	vmov	s15, r2
{
2401a17a:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
2401a17e:	ee08 3a10 	vmov	s16, r3
	_tTString* x = *bw;
2401a182:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
2401a184:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
2401a188:	f504 70ac 	add.w	r0, r4, #344	; 0x158
2401a18c:	eeb0 0a48 	vmov.f32	s0, s16
2401a190:	f7f8 fcb8 	bl	24012b04 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
2401a194:	eeb0 0a48 	vmov.f32	s0, s16
2401a198:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
2401a19c:	ecbd 8b02 	vpop	{d8}
2401a1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
2401a1a4:	f7f8 bcae 	b.w	24012b04 <tFeedbackLeveler_setFactor>

2401a1a8 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
2401a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401a1ac:	ed2d 8b08 	vpush	{d8-d11}
    _tTString* x = *bw;

    x->muted = 1.0f;
2401a1b0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
2401a1b4:	f8d0 a000 	ldr.w	sl, [r0]
{
2401a1b8:	b085      	sub	sp, #20
2401a1ba:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
2401a1be:	f10a 004c 	add.w	r0, sl, #76	; 0x4c
2401a1c2:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
2401a1c6:	ed8a 9a51 	vstr	s18, [sl, #324]	; 0x144
{
2401a1ca:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
2401a1ce:	f7f9 f875 	bl	240132bc <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
2401a1d2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
2401a1d6:	f50a 70ac 	add.w	r0, sl, #344	; 0x158
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
2401a1da:	f10a 0514 	add.w	r5, sl, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
2401a1de:	ee28 0aa7 	vmul.f32	s0, s17, s15
2401a1e2:	ed8d 0a01 	vstr	s0, [sp, #4]
2401a1e6:	f7f8 fcb7 	bl	24012b58 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
2401a1ea:	ed9d 0a01 	vldr	s0, [sp, #4]
2401a1ee:	f50a 70ae 	add.w	r0, sl, #348	; 0x15c
2401a1f2:	f7f8 fcb1 	bl	24012b58 <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
2401a1f6:	4650      	mov	r0, sl
2401a1f8:	f850 3f50 	ldr.w	r3, [r0, #80]!
2401a1fc:	ed93 0a04 	vldr	s0, [r3, #16]
2401a200:	f7f9 f860 	bl	240132c4 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
2401a204:	f640 22ec 	movw	r2, #2796	; 0xaec
2401a208:	f241 1311 	movw	r3, #4369	; 0x1111
2401a20c:	f8da 1050 	ldr.w	r1, [sl, #80]	; 0x50
2401a210:	f6cb 6250 	movt	r2, #48720	; 0xbe50
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
2401a214:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
2401a218:	f6c3 6351 	movt	r3, #15953	; 0x3e51
    x->baseDelay = x->pitchSmoother->dest;
2401a21c:	edd1 5a04 	vldr	s11, [r1, #16]
2401a220:	ee07 2a10 	vmov	s14, r2
2401a224:	ed9a 5a3d 	vldr	s10, [sl, #244]	; 0xf4
2401a228:	ee07 3a90 	vmov	s15, r3
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
2401a22c:	ee25 6a86 	vmul.f32	s12, s11, s12
2401a230:	2200      	movs	r2, #0
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
2401a232:	f241 236f 	movw	r3, #4719	; 0x126f
2401a236:	eee8 7a07 	vfma.f32	s15, s16, s14
    tLagrangeDelay_clear(&x->delay);
2401a23a:	4628      	mov	r0, r5
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
2401a23c:	eebc 7ac6 	vcvt.u32.f32	s14, s12
2401a240:	ee06 2a90 	vmov	s13, r2
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
2401a244:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    x->baseDelay = x->pitchSmoother->dest;
2401a248:	edca 5a0b 	vstr	s11, [sl, #44]	; 0x2c
    x->muteCoeff = 1.0f;
2401a24c:	ed8a 9a1e 	vstr	s18, [sl, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
2401a250:	ee17 ba10 	vmov	fp, s14
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
2401a254:	ee07 3a10 	vmov	s14, r3
2401a258:	ee67 7a85 	vmul.f32	s15, s15, s10
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
2401a25c:	ee06 ba10 	vmov	s12, fp
2401a260:	eeb8 8a46 	vcvt.f32.u32	s16, s12
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
2401a264:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
2401a268:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
2401a26c:	ee38 6a08 	vadd.f32	s12, s16, s16
2401a270:	fec8 7a67 	vminnm.f32	s15, s16, s15
2401a274:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
2401a278:	edcd 7a02 	vstr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
2401a27c:	eddd 6a02 	vldr	s13, [sp, #8]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
2401a280:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
2401a284:	eddd 7a02 	vldr	s15, [sp, #8]
2401a288:	ee77 7a67 	vsub.f32	s15, s14, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
2401a28c:	ee16 9a10 	vmov	r9, s12
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
2401a290:	ee77 7a88 	vadd.f32	s15, s15, s16
2401a294:	ee89 6a27 	vdiv.f32	s12, s18, s15
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
2401a298:	eefc 7ae6 	vcvt.u32.f32	s15, s13
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
2401a29c:	eef8 9a67 	vcvt.f32.u32	s19, s15
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
2401a2a0:	ee17 8a90 	vmov	r8, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
2401a2a4:	ee39 7a87 	vadd.f32	s14, s19, s14
2401a2a8:	ee89 aa07 	vdiv.f32	s20, s18, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
2401a2ac:	ed8d 6a03 	vstr	s12, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
2401a2b0:	f7f7 fe88 	bl	24011fc4 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
2401a2b4:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
2401a2b8:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
2401a2ba:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
2401a2be:	f8ca 3184 	str.w	r3, [sl, #388]	; 0x184
    x->pluckRatio = pluckPoint / halfCurrentDelay;
2401a2c2:	edca 7a5d 	vstr	s15, [sl, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401a2c6:	f1bb 0f00 	cmp.w	fp, #0
2401a2ca:	d05b      	beq.n	2401a384 <tTString_pluck+0x1dc>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
2401a2cc:	f10a 0618 	add.w	r6, sl, #24
2401a2d0:	f1b8 0f00 	cmp.w	r8, #0
2401a2d4:	d069      	beq.n	2401a3aa <tTString_pluck+0x202>
2401a2d6:	f24a 334b 	movw	r3, #41803	; 0xa34b
2401a2da:	45c3      	cmp	fp, r8
    if( x < -3.0f )
2401a2dc:	eef8 aa04 	vmov.f32	s21, #132	; 0xc0200000 -2.5
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401a2e0:	f04f 0400 	mov.w	r4, #0
2401a2e4:	f6c3 735a 	movt	r3, #16218	; 0x3f5a
2401a2e8:	ee0b 3a10 	vmov	s22, r3
        val = LEAF_tanh(val* 1.2f) * amplitude;
2401a2ec:	f649 139a 	movw	r3, #39322	; 0x999a
2401a2f0:	f6c3 7399 	movt	r3, #16281	; 0x3f99
2401a2f4:	ee0b 3a90 	vmov	s23, r3
2401a2f8:	465b      	mov	r3, fp
2401a2fa:	bf28      	it	cs
2401a2fc:	4643      	movcs	r3, r8
2401a2fe:	9301      	str	r3, [sp, #4]
2401a300:	e025      	b.n	2401a34e <tTString_pluck+0x1a6>
    else if( x > 3.0f )
2401a302:	eef4 7ac7 	vcmpe.f32	s15, s14
2401a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a30a:	f340 80b6 	ble.w	2401a47a <tTString_pluck+0x2d2>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401a30e:	eeb1 9a48 	vneg.f32	s18, s16
2401a312:	eba9 0704 	sub.w	r7, r9, r4
        tLagrangeDelay_tapIn(&x->delay, val, i);
2401a316:	4621      	mov	r1, r4
2401a318:	eeb0 0a48 	vmov.f32	s0, s16
2401a31c:	4628      	mov	r0, r5
2401a31e:	f7f7 ffad 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401a322:	eeb0 0a49 	vmov.f32	s0, s18
2401a326:	4639      	mov	r1, r7
2401a328:	4628      	mov	r0, r5
2401a32a:	f7f7 ffa7 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
2401a32e:	4621      	mov	r1, r4
2401a330:	eeb0 0a48 	vmov.f32	s0, s16
2401a334:	4630      	mov	r0, r6
2401a336:	f7f7 ffa1 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
2401a33a:	eeb0 0a49 	vmov.f32	s0, s18
2401a33e:	4639      	mov	r1, r7
2401a340:	4630      	mov	r0, r6
2401a342:	f7f7 ff9b 	bl	2401227c <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401a346:	3401      	adds	r4, #1
2401a348:	9b01      	ldr	r3, [sp, #4]
2401a34a:	429c      	cmp	r4, r3
2401a34c:	d218      	bcs.n	2401a380 <tTString_pluck+0x1d8>
            val = ((Lfloat)i * invPluckPointInt);
2401a34e:	ee07 4a90 	vmov	s15, r4
        if (i == pluckPointInt)
2401a352:	45a0      	cmp	r8, r4
2401a354:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
            val = ((Lfloat)i * invPluckPointInt);
2401a358:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a35c:	ee67 7a8a 	vmul.f32	s15, s15, s20
        if (i == pluckPointInt)
2401a360:	d009      	beq.n	2401a376 <tTString_pluck+0x1ce>
    if( x < -3.0f )
2401a362:	eef4 7aea 	vcmpe.f32	s15, s21
2401a366:	eeb0 8a68 	vmov.f32	s16, s17
2401a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a36e:	d5c8      	bpl.n	2401a302 <tTString_pluck+0x15a>
2401a370:	eeb1 8a68 	vneg.f32	s16, s17
2401a374:	e7cb      	b.n	2401a30e <tTString_pluck+0x166>
2401a376:	eeb0 8a4b 	vmov.f32	s16, s22
        val = LEAF_tanh(val* 1.2f) * amplitude;
2401a37a:	ee28 8a88 	vmul.f32	s16, s17, s16
2401a37e:	e7c6      	b.n	2401a30e <tTString_pluck+0x166>
2401a380:	45a3      	cmp	fp, r4
2401a382:	d813      	bhi.n	2401a3ac <tTString_pluck+0x204>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
2401a384:	f10a 0054 	add.w	r0, sl, #84	; 0x54
2401a388:	f7f9 fa5a 	bl	24013840 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
2401a38c:	f10a 0058 	add.w	r0, sl, #88	; 0x58
2401a390:	f7f9 fa56 	bl	24013840 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
2401a394:	eeb0 0a68 	vmov.f32	s0, s17
2401a398:	f50a 70be 	add.w	r0, sl, #380	; 0x17c
}
2401a39c:	b005      	add	sp, #20
2401a39e:	ecbd 8b08 	vpop	{d8-d11}
2401a3a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
2401a3a6:	f7f8 bf89 	b.w	240132bc <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
2401a3aa:	4644      	mov	r4, r8
        if (i == pluckPointInt)
2401a3ac:	f24a 334b 	movw	r3, #41803	; 0xa34b
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
2401a3b0:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
        if (i == pluckPointInt)
2401a3b4:	f6c3 735a 	movt	r3, #16218	; 0x3f5a
2401a3b8:	ee0a 3a90 	vmov	s21, r3
        val = LEAF_tanh(val* 1.2f) * amplitude;
2401a3bc:	f649 139a 	movw	r3, #39322	; 0x999a
2401a3c0:	f6c3 7399 	movt	r3, #16281	; 0x3f99
2401a3c4:	ee0b 3a10 	vmov	s22, r3
2401a3c8:	e023      	b.n	2401a412 <tTString_pluck+0x26a>
    else if( x > 3.0f )
2401a3ca:	eef4 7ac6 	vcmpe.f32	s15, s12
2401a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a3d2:	dd3f      	ble.n	2401a454 <tTString_pluck+0x2ac>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401a3d4:	eeb1 9a48 	vneg.f32	s18, s16
2401a3d8:	eba9 0704 	sub.w	r7, r9, r4
        tLagrangeDelay_tapIn(&x->delay, val, i);
2401a3dc:	4621      	mov	r1, r4
2401a3de:	eeb0 0a48 	vmov.f32	s0, s16
2401a3e2:	4628      	mov	r0, r5
2401a3e4:	f7f7 ff4a 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401a3e8:	eeb0 0a49 	vmov.f32	s0, s18
2401a3ec:	4639      	mov	r1, r7
2401a3ee:	4628      	mov	r0, r5
2401a3f0:	f7f7 ff44 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
2401a3f4:	4621      	mov	r1, r4
2401a3f6:	eeb0 0a48 	vmov.f32	s0, s16
2401a3fa:	4630      	mov	r0, r6
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401a3fc:	3401      	adds	r4, #1
        tLagrangeDelay_tapIn(&x->delayP, val, i);
2401a3fe:	f7f7 ff3d 	bl	2401227c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
2401a402:	eeb0 0a49 	vmov.f32	s0, s18
2401a406:	4639      	mov	r1, r7
2401a408:	4630      	mov	r0, r6
2401a40a:	f7f7 ff37 	bl	2401227c <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401a40e:	45a3      	cmp	fp, r4
2401a410:	d9b8      	bls.n	2401a384 <tTString_pluck+0x1dc>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
2401a412:	ee07 4a90 	vmov	s15, r4
        if (i == pluckPointInt)
2401a416:	45a0      	cmp	r8, r4
    if( x < -3.0f )
2401a418:	eeb8 7a0c 	vmov.f32	s14, #140	; 0xc0600000 -3.5
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
2401a41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    else if( x > 3.0f )
2401a420:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
2401a424:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
2401a428:	d00f      	beq.n	2401a44a <tTString_pluck+0x2a2>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
2401a42a:	eddd 6a03 	vldr	s13, [sp, #12]
2401a42e:	eeb0 8a68 	vmov.f32	s16, s17
2401a432:	ee67 7aa6 	vmul.f32	s15, s15, s13
    if( x < -3.0f )
2401a436:	eef4 7ac7 	vcmpe.f32	s15, s14
2401a43a:	ee77 6a8a 	vadd.f32	s13, s15, s20
2401a43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a442:	d5c2      	bpl.n	2401a3ca <tTString_pluck+0x222>
2401a444:	eeb1 8a68 	vneg.f32	s16, s17
2401a448:	e7c4      	b.n	2401a3d4 <tTString_pluck+0x22c>
        if (i == pluckPointInt)
2401a44a:	eeb0 8a6a 	vmov.f32	s16, s21
        val = LEAF_tanh(val* 1.2f) * amplitude;
2401a44e:	ee28 8a88 	vmul.f32	s16, s17, s16
2401a452:	e7bf      	b.n	2401a3d4 <tTString_pluck+0x22c>
2401a454:	ee66 6a8b 	vmul.f32	s13, s13, s22
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
2401a458:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
2401a45c:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
2401a460:	ee66 7aa6 	vmul.f32	s15, s13, s13
2401a464:	eeb0 6a47 	vmov.f32	s12, s14
2401a468:	eea7 6aa5 	vfma.f32	s12, s15, s11
2401a46c:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a470:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a474:	ee87 8a86 	vdiv.f32	s16, s15, s12
2401a478:	e7e9      	b.n	2401a44e <tTString_pluck+0x2a6>
2401a47a:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
2401a47e:	ee67 7aab 	vmul.f32	s15, s15, s23
2401a482:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
2401a486:	eeb0 6a66 	vmov.f32	s12, s13
2401a48a:	ee27 7aa7 	vmul.f32	s14, s15, s15
2401a48e:	eea7 6a25 	vfma.f32	s12, s14, s11
2401a492:	ee37 7a26 	vadd.f32	s14, s14, s13
2401a496:	ee27 7a27 	vmul.f32	s14, s14, s15
2401a49a:	ee87 8a06 	vdiv.f32	s16, s14, s12
2401a49e:	e76c      	b.n	2401a37a <tTString_pluck+0x1d2>

2401a4a0 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
2401a4a0:	b510      	push	{r4, lr}
2401a4a2:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
2401a4a6:	6804      	ldr	r4, [r0, #0]
{
2401a4a8:	eeb0 8a60 	vmov.f32	s16, s1
2401a4ac:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
2401a4b0:	edd4 7a01 	vldr	s15, [r4, #4]
2401a4b4:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401a4b8:	edd4 0a02 	vldr	s1, [r4, #8]
2401a4bc:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
2401a4c0:	ee68 0a20 	vmul.f32	s1, s16, s1
2401a4c4:	f7f9 f82e 	bl	24013524 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
2401a4c8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
2401a4cc:	edd4 0a02 	vldr	s1, [r4, #8]
2401a4d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
2401a4d4:	ed94 7a01 	vldr	s14, [r4, #4]
2401a4d8:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
2401a4dc:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
2401a4e0:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
2401a4e4:	ee28 0aa7 	vmul.f32	s0, s17, s15
2401a4e8:	f7f9 f81c 	bl	24013524 <tThiranAllpassSOCascade_setCoeff>
2401a4ec:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
2401a4f0:	ecbd 8b02 	vpop	{d8}
2401a4f4:	bd10      	pop	{r4, pc}
2401a4f6:	bf00      	nop

2401a4f8 <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
2401a4f8:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
2401a4fc:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
2401a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
2401a502:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
2401a506:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
2401a50a:	4770      	bx	lr

2401a50c <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
2401a50c:	b510      	push	{r4, lr}
    _tTString* x = *bw;
2401a50e:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
2401a510:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
2401a514:	b1a9      	cbz	r1, 2401a542 <tTString_setWoundOrUnwound+0x36>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
2401a516:	f241 236f 	movw	r3, #4719	; 0x126f
2401a51a:	f504 708c 	add.w	r0, r4, #280	; 0x118
2401a51e:	f6c3 2303 	movt	r3, #14851	; 0x3a03
2401a522:	ee00 3a10 	vmov	s0, r3
2401a526:	f7f8 feb3 	bl	24013290 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
2401a52a:	f24b 7317 	movw	r3, #46871	; 0xb717
2401a52e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
2401a532:	f6c3 2351 	movt	r3, #14929	; 0x3a51

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
2401a536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
2401a53a:	ee00 3a10 	vmov	s0, r3
2401a53e:	f7f8 bea7 	b.w	24013290 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
2401a542:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401a546:	f504 708c 	add.w	r0, r4, #280	; 0x118
2401a54a:	f6c3 33a3 	movt	r3, #15267	; 0x3ba3
2401a54e:	ee00 3a10 	vmov	s0, r3
2401a552:	f7f8 fe9d 	bl	24013290 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
2401a556:	f241 236f 	movw	r3, #4719	; 0x126f
2401a55a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
2401a55e:	f6c3 3383 	movt	r3, #15235	; 0x3b83
}
2401a562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
2401a566:	ee00 3a10 	vmov	s0, r3
2401a56a:	f7f8 be91 	b.w	24013290 <tExpSmooth_setFactor>
2401a56e:	bf00      	nop

2401a570 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
    _tTString* x = *bw;
    x->windingsPerInch = windings;
2401a570:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
2401a574:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
2401a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a57a:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
2401a57e:	4770      	bx	lr

2401a580 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->pickupFilter,cutoff);
2401a580:	6800      	ldr	r0, [r0, #0]
2401a582:	30b8      	adds	r0, #184	; 0xb8
2401a584:	f7f9 bc2c 	b.w	24013de0 <tSVF_setFreq>

2401a588 <tTString_setPickupFilterQ>:

}
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
2401a588:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a58c:	6800      	ldr	r0, [r0, #0]
2401a58e:	30b8      	adds	r0, #184	; 0xb8
2401a590:	ee30 0a27 	vadd.f32	s0, s0, s15
2401a594:	f7f9 bca8 	b.w	24013ee8 <tSVF_setQ>

2401a598 <tTString_setPeakFilterFreq>:
}

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->peakFilt,cutoff);
2401a598:	6800      	ldr	r0, [r0, #0]
2401a59a:	f500 70c4 	add.w	r0, r0, #392	; 0x188
2401a59e:	f7f9 bc1f 	b.w	24013de0 <tSVF_setFreq>
2401a5a2:	bf00      	nop

2401a5a4 <tTString_setPeakFilterQ>:

}
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->peakFilt,Q+0.5f);
2401a5a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a5a8:	6800      	ldr	r0, [r0, #0]
2401a5aa:	f500 70c4 	add.w	r0, r0, #392	; 0x188
2401a5ae:	ee30 0a27 	vadd.f32	s0, s0, s15
2401a5b2:	f7f9 bc99 	b.w	24013ee8 <tSVF_setQ>
2401a5b6:	bf00      	nop

2401a5b8 <tStiffString_initToPool>:
{
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
}

void    tStiffString_initToPool   (tStiffString* const pm, int numModes, tMempool* const mp)
{
2401a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401a5bc:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401a5c0:	6813      	ldr	r3, [r2, #0]
{
2401a5c2:	b082      	sub	sp, #8
2401a5c4:	460e      	mov	r6, r1
2401a5c6:	4680      	mov	r8, r0
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
2401a5c8:	4619      	mov	r1, r3
2401a5ca:	2054      	movs	r0, #84	; 0x54
    _tMempool* m = *mp;
2401a5cc:	9301      	str	r3, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
2401a5ce:	f7fc fcc7 	bl	24016f60 <mpool_alloc>
    p->mempool = m;

    // initialize variables
    p->numModes = numModes;
    p->freqHz = 440.0f;
    p->stiffness = 0.001f;
2401a5d2:	f241 236f 	movw	r3, #4719	; 0x126f
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
2401a5d6:	f8c8 0000 	str.w	r0, [r8]
    p->freqHz = 440.0f;
2401a5da:	2200      	movs	r2, #0
    p->mempool = m;
2401a5dc:	9901      	ldr	r1, [sp, #4]
    p->stiffness = 0.001f;
2401a5de:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    p->decay = 0.0001f;
    p->decayHighFreq = 0.0003f;
    p->muteDecay = 0.4f;
    p->sampleRate = m->leaf->sampleRate;
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
    p->nyquist = p->sampleRate * 0.5f;
2401a5e2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    p->freqHz = 440.0f;
2401a5e6:	f2c4 32dc 	movt	r2, #17372	; 0x43dc
    p->osc = (tDampedOscillator *) mpool_alloc(numModes * sizeof(tDampedOscillator), m);
    for (int i = 0; i < numModes; ++i) {
    	tDampedOscillator_initToPool(&p->osc[i], &m);
    }
    */
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
2401a5ea:	00b7      	lsls	r7, r6, #2
    p->stiffness = 0.001f;
2401a5ec:	6183      	str	r3, [r0, #24]
    p->pickupPos = 0.3f;
2401a5ee:	f649 139a 	movw	r3, #39322	; 0x999a
    p->freqHz = 440.0f;
2401a5f2:	6142      	str	r2, [r0, #20]
    p->pluckPos = 0.2f;
2401a5f4:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    p->pickupPos = 0.3f;
2401a5f8:	f6c3 6399 	movt	r3, #16025	; 0x3e99
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
2401a5fc:	4605      	mov	r5, r0
    p->pluckPos = 0.2f;
2401a5fe:	f6c3 624c 	movt	r2, #15948	; 0x3e4c
    p->pickupPos = 0.3f;
2401a602:	6203      	str	r3, [r0, #32]
    p->decayHighFreq = 0.0003f;
2401a604:	f644 1352 	movw	r3, #18770	; 0x4952
    p->pluckPos = 0.2f;
2401a608:	61c2      	str	r2, [r0, #28]
    p->decay = 0.0001f;
2401a60a:	f24b 7217 	movw	r2, #46871	; 0xb717
    p->decayHighFreq = 0.0003f;
2401a60e:	f6c3 139d 	movt	r3, #14749	; 0x399d
    p->decay = 0.0001f;
2401a612:	f6c3 02d1 	movt	r2, #14545	; 0x38d1
    p->decayHighFreq = 0.0003f;
2401a616:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
2401a618:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    p->decay = 0.0001f;
2401a61c:	6242      	str	r2, [r0, #36]	; 0x24
    p->muteDecay = 0.4f;
2401a61e:	f6c3 63cc 	movt	r3, #16076	; 0x3ecc
    p->numModes = numModes;
2401a622:	e9c0 1600 	strd	r1, r6, [r0]
    p->muteDecay = 0.4f;
2401a626:	6483      	str	r3, [r0, #72]	; 0x48
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
2401a628:	2301      	movs	r3, #1
    p->sampleRate = m->leaf->sampleRate;
2401a62a:	9901      	ldr	r1, [sp, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
2401a62c:	f2cc 1320 	movt	r3, #49440	; 0xc120
    p->sampleRate = m->leaf->sampleRate;
2401a630:	684a      	ldr	r2, [r1, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
2401a632:	ee07 3a10 	vmov	s14, r3
    p->amp = 0.0f;
2401a636:	2300      	movs	r3, #0
    p->sampleRate = m->leaf->sampleRate;
2401a638:	edd2 7a00 	vldr	s15, [r2]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
2401a63c:	eec7 6a27 	vdiv.f32	s13, s14, s15
    p->sampleRate = m->leaf->sampleRate;
2401a640:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
2401a644:	684a      	ldr	r2, [r1, #4]
2401a646:	68d2      	ldr	r2, [r2, #12]
    p->amp = 0.0f;
2401a648:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->nyquist = p->sampleRate * 0.5f;
2401a64a:	ee67 7a86 	vmul.f32	s15, s15, s12
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
2401a64e:	6302      	str	r2, [r0, #48]	; 0x30
    p->gainComp = 0.0f;
2401a650:	6503      	str	r3, [r0, #80]	; 0x50
    p->nyquist = p->sampleRate * 0.5f;
2401a652:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
2401a656:	edc0 6a11 	vstr	s13, [r0, #68]	; 0x44
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
2401a65a:	4638      	mov	r0, r7
2401a65c:	f7fc fc80 	bl	24016f60 <mpool_alloc>
    for (int i = 0; i < numModes; ++i) {
2401a660:	2e00      	cmp	r6, #0
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
2401a662:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
2401a664:	dd0a      	ble.n	2401a67c <tStiffString_initToPool+0xc4>
2401a666:	2400      	movs	r4, #0
2401a668:	e000      	b.n	2401a66c <tStiffString_initToPool+0xb4>
    	tCycle_initToPool(&p->osc[i], &m);
2401a66a:	68a8      	ldr	r0, [r5, #8]
2401a66c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < numModes; ++i) {
2401a670:	3401      	adds	r4, #1
    	tCycle_initToPool(&p->osc[i], &m);
2401a672:	a901      	add	r1, sp, #4
2401a674:	f7fc fdd6 	bl	24017224 <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
2401a678:	42a6      	cmp	r6, r4
2401a67a:	d1f6      	bne.n	2401a66a <tStiffString_initToPool+0xb2>
    }
    //
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a67c:	9901      	ldr	r1, [sp, #4]
2401a67e:	4638      	mov	r0, r7
2401a680:	f7fc fc6e 	bl	24016f60 <mpool_alloc>
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a684:	9901      	ldr	r1, [sp, #4]
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a686:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a688:	4638      	mov	r0, r7
2401a68a:	f7fc fc69 	bl	24016f60 <mpool_alloc>
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a68e:	9901      	ldr	r1, [sp, #4]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a690:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a692:	4638      	mov	r0, r7
2401a694:	f7fc fc64 	bl	24016f60 <mpool_alloc>
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a698:	9901      	ldr	r1, [sp, #4]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a69a:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a69c:	4638      	mov	r0, r7
2401a69e:	f7fc fc5f 	bl	24016f60 <mpool_alloc>
2401a6a2:	4603      	mov	r3, r0
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a6a4:	9901      	ldr	r1, [sp, #4]
2401a6a6:	4638      	mov	r0, r7
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a6a8:	63ab      	str	r3, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a6aa:	f7fc fc59 	bl	24016f60 <mpool_alloc>
    }
}
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
	_tStiffString *p = *pm;
		Lfloat x0 = p->pickupPos * PI;
2401a6ae:	f640 73db 	movw	r3, #4059	; 0xfdb
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401a6b2:	63e8      	str	r0, [r5, #60]	; 0x3c
	_tStiffString *p = *pm;
2401a6b4:	f8d8 7000 	ldr.w	r7, [r8]
		Lfloat x0 = p->pickupPos * PI;
2401a6b8:	f2c4 0349 	movt	r3, #16457	; 0x4049
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
2401a6bc:	687a      	ldr	r2, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
2401a6be:	ee07 3a90 	vmov	s15, r3
2401a6c2:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
2401a6c6:	2a00      	cmp	r2, #0
		Lfloat x0 = p->pickupPos * PI;
2401a6c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
2401a6cc:	dd39      	ble.n	2401a742 <tStiffString_initToPool+0x18a>
		Lfloat totalGain = 0.0f;
2401a6ce:	2200      	movs	r2, #0
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401a6d0:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
2401a6d2:	4615      	mov	r5, r2
		Lfloat totalGain = 0.0f;
2401a6d4:	ee08 2a10 	vmov	s16, r2
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401a6d8:	3501      	adds	r5, #1
2401a6da:	ee07 5a90 	vmov	s15, r5
2401a6de:	00ac      	lsls	r4, r5, #2
2401a6e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401a6e4:	3c04      	subs	r4, #4
2401a6e6:	4426      	add	r6, r4
2401a6e8:	ee20 0a28 	vmul.f32	s0, s0, s17
2401a6ec:	f7e6 f8bc 	bl	24000868 <arm_sin_f32>
2401a6f0:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
2401a6f4:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401a6f6:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
2401a6fa:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401a6fc:	eb06 0004 	add.w	r0, r6, r4
2401a700:	4422      	add	r2, r4
2401a702:	edd0 7a00 	vldr	s15, [r0]
2401a706:	ed92 7a00 	vldr	s14, [r2]
2401a70a:	eef0 7ae7 	vabs.f32	s15, s15
2401a70e:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
2401a712:	dbe1      	blt.n	2401a6d8 <tStiffString_initToPool+0x120>
	  if (totalGain < 0.01f)
	  {
		  totalGain = 0.01f;
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
	  p->gainComp = 1.0f / totalGain;
2401a714:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401a718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a71c:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401a720:	ee07 3a90 	vmov	s15, r3
2401a724:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401a728:	fe88 8a47 	vminnm.f32	s16, s16, s14
2401a72c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401a730:	eec7 7a08 	vdiv.f32	s15, s14, s16
2401a734:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
2401a738:	b002      	add	sp, #8
2401a73a:	ecbd 8b02 	vpop	{d8}
2401a73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  for (int i = 0; i < p->numModes; ++i)
2401a742:	2300      	movs	r3, #0
2401a744:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
2401a748:	ee07 3a90 	vmov	s15, r3
	  p->gainComp = 1.0f / totalGain;
2401a74c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
2401a750:	b002      	add	sp, #8
2401a752:	ecbd 8b02 	vpop	{d8}
2401a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2401a75a:	bf00      	nop

2401a75c <tStiffString_init>:
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
2401a75c:	3218      	adds	r2, #24
2401a75e:	f7ff bf2b 	b.w	2401a5b8 <tStiffString_initToPool>
2401a762:	bf00      	nop

2401a764 <tStiffString_free>:
{
2401a764:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
2401a766:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < p->numModes; ++i) {
2401a768:	686b      	ldr	r3, [r5, #4]
2401a76a:	2b00      	cmp	r3, #0
2401a76c:	dd09      	ble.n	2401a782 <tStiffString_free+0x1e>
2401a76e:	2400      	movs	r4, #0
    	tCycle_free(&p->osc[i]);
2401a770:	68a8      	ldr	r0, [r5, #8]
2401a772:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
2401a776:	3401      	adds	r4, #1
    	tCycle_free(&p->osc[i]);
2401a778:	f7fc fd70 	bl	2401725c <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
2401a77c:	686b      	ldr	r3, [r5, #4]
2401a77e:	42a3      	cmp	r3, r4
2401a780:	dcf6      	bgt.n	2401a770 <tStiffString_free+0xc>
    mpool_free((char *) p->nyquistCoeff, p->mempool);
2401a782:	6829      	ldr	r1, [r5, #0]
2401a784:	6be8      	ldr	r0, [r5, #60]	; 0x3c
2401a786:	f7fc fcad 	bl	240170e4 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
2401a78a:	6829      	ldr	r1, [r5, #0]
2401a78c:	6b68      	ldr	r0, [r5, #52]	; 0x34
2401a78e:	f7fc fca9 	bl	240170e4 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
2401a792:	6829      	ldr	r1, [r5, #0]
2401a794:	6ba8      	ldr	r0, [r5, #56]	; 0x38
2401a796:	f7fc fca5 	bl	240170e4 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
2401a79a:	6829      	ldr	r1, [r5, #0]
2401a79c:	68e8      	ldr	r0, [r5, #12]
2401a79e:	f7fc fca1 	bl	240170e4 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
2401a7a2:	6829      	ldr	r1, [r5, #0]
2401a7a4:	6928      	ldr	r0, [r5, #16]
2401a7a6:	f7fc fc9d 	bl	240170e4 <mpool_free>
    mpool_free((char *) p, p->mempool);
2401a7aa:	6829      	ldr	r1, [r5, #0]
2401a7ac:	4628      	mov	r0, r5
}
2401a7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char *) p, p->mempool);
2401a7b2:	f7fc bc97 	b.w	240170e4 <mpool_free>
2401a7b6:	bf00      	nop

2401a7b8 <tStiffString_updateOscillators>:
{
2401a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401a7ba:	ed2d 8b06 	vpush	{d8-d10}
	_tStiffString *p = *pm;
2401a7be:	6804      	ldr	r4, [r0, #0]
    for (int i = 0; i < p->numModes; ++i) {
2401a7c0:	6863      	ldr	r3, [r4, #4]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
2401a7c2:	edd4 8a06 	vldr	s17, [r4, #24]
    for (int i = 0; i < p->numModes; ++i) {
2401a7c6:	2b00      	cmp	r3, #0
	Lfloat kappa_sq = p->stiffness * p->stiffness;
2401a7c8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    for (int i = 0; i < p->numModes; ++i) {
2401a7cc:	f340 808e 	ble.w	2401a8ec <tStiffString_updateOscillators+0x134>
2401a7d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a7d4:	f64a 233b 	movw	r3, #43579	; 0xaa3b
	Lfloat compensation = 0.0f;
2401a7d8:	2200      	movs	r2, #0
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a7da:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
2401a7de:	f6cc 3338 	movt	r3, #52024	; 0xcb38
2401a7e2:	ee68 8aa7 	vmul.f32	s17, s17, s15
	Lfloat compensation = 0.0f;
2401a7e6:	ee08 2a10 	vmov	s16, r2
    for (int i = 0; i < p->numModes; ++i) {
2401a7ea:	4615      	mov	r5, r2
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
2401a7ec:	ee09 2a90 	vmov	s19, r2
2401a7f0:	ee09 3a10 	vmov	s18, r3
    	  compensation = 1.0f / w;
2401a7f4:	462b      	mov	r3, r5
2401a7f6:	3501      	adds	r5, #1
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a7f8:	eeb0 6a6a 	vmov.f32	s12, s21
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
2401a7fc:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
      int n_sq = n * n;
2401a800:	fb05 f205 	mul.w	r2, r5, r5
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
2401a804:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a808:	ee07 5a90 	vmov	s15, r5
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
2401a80c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
      int n_sq = n * n;
2401a810:	ee07 2a10 	vmov	s14, r2
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
2401a814:	eeb0 0a6a 	vmov.f32	s0, s21
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a81c:	009f      	lsls	r7, r3, #2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
2401a81e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a822:	eea7 6a28 	vfma.f32	s12, s14, s17
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
2401a826:	eea5 aa87 	vfma.f32	s20, s11, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
2401a82a:	ee67 7a86 	vmul.f32	s15, s15, s12
      Lfloat zeta = sig / w0;
2401a82e:	ee8a 7a27 	vdiv.f32	s14, s20, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
2401a832:	ee27 7a47 	vnmul.f32	s14, s14, s14
2401a836:	eea7 0a26 	vfma.f32	s0, s14, s13
2401a83a:	ee20 0a27 	vmul.f32	s0, s0, s15
      if (i == 0)
2401a83e:	b90b      	cbnz	r3, 2401a844 <tStiffString_updateOscillators+0x8c>
    	  compensation = 1.0f / w;
2401a840:	ee8a 8a80 	vdiv.f32	s16, s21, s0
      Lfloat	testFreq = (p->freqHz * w);
2401a844:	edd4 6a05 	vldr	s13, [r4, #20]
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401a848:	f640 56d1 	movw	r6, #3537	; 0xdd1
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
2401a84c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
2401a850:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
2401a854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      Lfloat	testFreq = (p->freqHz * w);
2401a856:	ee20 0a26 	vmul.f32	s0, s0, s13
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
2401a85a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
2401a85e:	ee70 7a67 	vsub.f32	s15, s0, s15
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
2401a862:	ee28 0a00 	vmul.f32	s0, s16, s0
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
2401a866:	ee67 7a87 	vmul.f32	s15, s15, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
2401a86a:	fec7 7aea 	vminnm.f32	s15, s15, s21
2401a86e:	fec7 7aa9 	vmaxnm.f32	s15, s15, s19
2401a872:	edc2 7a00 	vstr	s15, [r2]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
2401a876:	68a0      	ldr	r0, [r4, #8]
2401a878:	eb00 0083 	add.w	r0, r0, r3, lsl #2
2401a87c:	f7fc fd1a 	bl	240172b4 <tCycle_setFreq>
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a880:	edd4 7a05 	vldr	s15, [r4, #20]
2401a884:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401a888:	f243 5064 	movw	r0, #13668	; 0x3564
	  p->decayScalar[i] = r * r;
2401a88c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2401a88e:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a892:	ee67 7a87 	vmul.f32	s15, s15, s14
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401a896:	f24c 52aa 	movw	r2, #50602	; 0xc5aa
2401a89a:	eb03 0c07 	add.w	ip, r3, r7
2401a89e:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a8a2:	ee67 7a89 	vmul.f32	s15, s15, s18
2401a8a6:	ee67 7a8a 	vmul.f32	s15, s15, s20
2401a8aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a8ae:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401a8b2:	f3c3 1ecf 	ubfx	lr, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401a8b6:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401a8ba:	fb06 f60e 	mul.w	r6, r6, lr
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401a8be:	eb00 4026 	add.w	r0, r0, r6, asr #16
2401a8c2:	fb0e f000 	mul.w	r0, lr, r0
2401a8c6:	eb01 41a0 	add.w	r1, r1, r0, asr #18
2401a8ca:	fb0e f101 	mul.w	r1, lr, r1
2401a8ce:	eb02 32a1 	add.w	r2, r2, r1, asr #14
2401a8d2:	fb0e f202 	mul.w	r2, lr, r2
    return reinterpreter.f;
2401a8d6:	eb03 23e2 	add.w	r3, r3, r2, asr #11
2401a8da:	ee07 3a90 	vmov	s15, r3
2401a8de:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401a8e2:	edcc 7a00 	vstr	s15, [ip]
    for (int i = 0; i < p->numModes; ++i) {
2401a8e6:	6863      	ldr	r3, [r4, #4]
2401a8e8:	42ab      	cmp	r3, r5
2401a8ea:	dc83      	bgt.n	2401a7f4 <tStiffString_updateOscillators+0x3c>
}
2401a8ec:	ecbd 8b06 	vpop	{d8-d10}
2401a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401a8f2:	bf00      	nop

2401a8f4 <tStiffString_updateOutputWeights>:
{
2401a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		Lfloat x0 = p->pickupPos * PI;
2401a8f6:	f640 73db 	movw	r3, #4059	; 0xfdb
{
2401a8fa:	ed2d 8b02 	vpush	{d8}
		Lfloat x0 = p->pickupPos * PI;
2401a8fe:	f2c4 0349 	movt	r3, #16457	; 0x4049
	_tStiffString *p = *pm;
2401a902:	6807      	ldr	r7, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
2401a904:	ee07 3a90 	vmov	s15, r3
	  for (int i = 0; i < p->numModes; ++i)
2401a908:	687b      	ldr	r3, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
2401a90a:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
2401a90e:	2b00      	cmp	r3, #0
		Lfloat x0 = p->pickupPos * PI;
2401a910:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
2401a914:	dd37      	ble.n	2401a986 <tStiffString_updateOutputWeights+0x92>
		Lfloat totalGain = 0.0f;
2401a916:	2200      	movs	r2, #0
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401a918:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
2401a91a:	4615      	mov	r5, r2
		Lfloat totalGain = 0.0f;
2401a91c:	ee08 2a10 	vmov	s16, r2
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401a920:	3501      	adds	r5, #1
2401a922:	ee07 5a90 	vmov	s15, r5
2401a926:	00ac      	lsls	r4, r5, #2
2401a928:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401a92c:	3c04      	subs	r4, #4
2401a92e:	4426      	add	r6, r4
2401a930:	ee20 0a28 	vmul.f32	s0, s0, s17
2401a934:	f7e5 ff98 	bl	24000868 <arm_sin_f32>
2401a938:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
2401a93c:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401a93e:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
2401a942:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401a944:	eb06 0004 	add.w	r0, r6, r4
2401a948:	4422      	add	r2, r4
2401a94a:	edd0 7a00 	vldr	s15, [r0]
2401a94e:	ed92 7a00 	vldr	s14, [r2]
2401a952:	eef0 7ae7 	vabs.f32	s15, s15
2401a956:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
2401a95a:	dbe1      	blt.n	2401a920 <tStiffString_updateOutputWeights+0x2c>
	  p->gainComp = 1.0f / totalGain;
2401a95c:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401a960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a964:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401a968:	ee07 3a90 	vmov	s15, r3
2401a96c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401a970:	fe88 8a47 	vminnm.f32	s16, s16, s14
2401a974:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401a978:	eec7 7a08 	vdiv.f32	s15, s14, s16
2401a97c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
2401a980:	ecbd 8b02 	vpop	{d8}
2401a984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  for (int i = 0; i < p->numModes; ++i)
2401a986:	2300      	movs	r3, #0
2401a988:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
2401a98c:	ee07 3a90 	vmov	s15, r3
	  p->gainComp = 1.0f / totalGain;
2401a990:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
2401a994:	ecbd 8b02 	vpop	{d8}
2401a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401a99a:	bf00      	nop

2401a99c <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
2401a99c:	b570      	push	{r4, r5, r6, lr}
2401a99e:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
2401a9a2:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
2401a9a4:	6863      	ldr	r3, [r4, #4]
2401a9a6:	2b00      	cmp	r3, #0
    Lfloat sample = 0.0f;
2401a9a8:	f04f 0300 	mov.w	r3, #0
    for (int i = 0; i < p->numModes; ++i) {
2401a9ac:	dd3b      	ble.n	2401aa26 <tStiffString_tick+0x8a>
2401a9ae:	461e      	mov	r6, r3
    Lfloat sample = 0.0f;
2401a9b0:	ee08 3a10 	vmov	s16, r3
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9b4:	68a0      	ldr	r0, [r4, #8]
2401a9b6:	00b5      	lsls	r5, r6, #2
2401a9b8:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
2401a9bc:	3601      	adds	r6, #1
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9be:	f7fc fc51 	bl	24017264 <tCycle_tick>
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9c2:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9c6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
2401a9ca:	442b      	add	r3, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9cc:	442a      	add	r2, r5
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9ce:	4428      	add	r0, r5
2401a9d0:	4429      	add	r1, r5
2401a9d2:	edd3 6a00 	vldr	s13, [r3]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9d6:	ed92 7a00 	vldr	s14, [r2]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9da:	ed91 6a00 	vldr	s12, [r1]
2401a9de:	edd0 7a00 	vldr	s15, [r0]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9e2:	ee26 7a87 	vmul.f32	s14, s13, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
2401a9e8:	ee67 7a86 	vmul.f32	s15, s15, s12
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9ec:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9f0:	442a      	add	r2, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9f2:	ee27 7a06 	vmul.f32	s14, s14, s12
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401a9f6:	ee27 0a80 	vmul.f32	s0, s15, s0
2401a9fa:	edd2 7a00 	vldr	s15, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
2401a9fe:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
2401aa02:	6863      	ldr	r3, [r4, #4]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401aa04:	ee20 0a26 	vmul.f32	s0, s0, s13
    for (int i = 0; i < p->numModes; ++i) {
2401aa08:	42b3      	cmp	r3, r6
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
2401aa0a:	eea0 8a27 	vfma.f32	s16, s0, s15
    for (int i = 0; i < p->numModes; ++i) {
2401aa0e:	dcd1      	bgt.n	2401a9b4 <tStiffString_tick+0x18>
    }
    return sample * p->amp * p->gainComp;
2401aa10:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
2401aa14:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
2401aa18:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2401aa1c:	ee20 0a08 	vmul.f32	s0, s0, s16
2401aa20:	ecbd 8b02 	vpop	{d8}
2401aa24:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat sample = 0.0f;
2401aa26:	ee08 3a10 	vmov	s16, r3
2401aa2a:	e7f1      	b.n	2401aa10 <tStiffString_tick+0x74>

2401aa2c <tStiffString_setFreq>:
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
2401aa2c:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
2401aa2e:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
2401aa32:	f7ff bec1 	b.w	2401a7b8 <tStiffString_updateOscillators>
2401aa36:	bf00      	nop

2401aa38 <tStiffString_mute>:
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
    p->muteDecay = 0.99f;
2401aa38:	f247 03a4 	movw	r3, #28836	; 0x70a4
    _tStiffString *p = *pm;
2401aa3c:	6802      	ldr	r2, [r0, #0]
    p->muteDecay = 0.99f;
2401aa3e:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
2401aa42:	6493      	str	r3, [r2, #72]	; 0x48
}
2401aa44:	4770      	bx	lr
2401aa46:	bf00      	nop

2401aa48 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
2401aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tStiffString* p = *mp;
    Lfloat x0 = p->pluckPos * PI;
2401aa4a:	f640 73db 	movw	r3, #4059	; 0xfdb
{
2401aa4e:	4606      	mov	r6, r0
2401aa50:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat x0 = p->pluckPos * PI;
2401aa54:	f2c4 0349 	movt	r3, #16457	; 0x4049
    _tStiffString* p = *mp;
2401aa58:	6807      	ldr	r7, [r0, #0]
    p->muteDecay = 1.0f;
2401aa5a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    Lfloat x0 = p->pluckPos * PI;
2401aa5e:	ee08 3a10 	vmov	s16, r3
    for (int i = 0; i < p->numModes; ++i) {
2401aa62:	687b      	ldr	r3, [r7, #4]
    Lfloat x0 = p->pluckPos * PI;
2401aa64:	edd7 8a07 	vldr	s17, [r7, #28]
{
2401aa68:	eeb0 aa40 	vmov.f32	s20, s0
    for (int i = 0; i < p->numModes; ++i) {
2401aa6c:	2b00      	cmp	r3, #0
    p->muteDecay = 1.0f;
2401aa6e:	edc7 9a12 	vstr	s19, [r7, #72]	; 0x48
    Lfloat x0 = p->pluckPos * PI;
2401aa72:	ee68 8a88 	vmul.f32	s17, s17, s16
    for (int i = 0; i < p->numModes; ++i) {
2401aa76:	dd2e      	ble.n	2401aad6 <tStiffString_pluck+0x8e>
        int n = i + 1;
        float denom = n * n * x0 * (PI - x0);
2401aa78:	ee38 8a68 	vsub.f32	s16, s16, s17
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aa7c:	f241 236f 	movw	r3, #4719	; 0x126f
        float denom = n * n * x0 * (PI - x0);
2401aa80:	2500      	movs	r5, #0
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aa82:	f6c3 2383 	movt	r3, #14979	; 0x3a83
2401aa86:	ee28 8a28 	vmul.f32	s16, s16, s17
    for (int i = 0; i < p->numModes; ++i) {
2401aa8a:	462c      	mov	r4, r5
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aa8c:	ee09 3a10 	vmov	s18, r3
        int n = i + 1;
2401aa90:	3401      	adds	r4, #1
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aa92:	ee07 4a90 	vmov	s15, r4
2401aa96:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401aa9a:	ee20 0a28 	vmul.f32	s0, s0, s17
2401aa9e:	f7e5 fee3 	bl	24000868 <arm_sin_f32>
        float denom = n * n * x0 * (PI - x0);
2401aaa2:	fb04 f304 	mul.w	r3, r4, r4
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aaa6:	ee30 0a00 	vadd.f32	s0, s0, s0
        float denom = n * n * x0 * (PI - x0);
2401aaaa:	ee07 3a90 	vmov	s15, r3
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aaae:	68fb      	ldr	r3, [r7, #12]
        float denom = n * n * x0 * (PI - x0);
2401aab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aab4:	442b      	add	r3, r5
        float denom = n * n * x0 * (PI - x0);
2401aab6:	ee67 7a88 	vmul.f32	s15, s15, s16
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401aaba:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
2401aabe:	ee80 7a27 	vdiv.f32	s14, s0, s15
2401aac2:	ed83 7a00 	vstr	s14, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
2401aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401aac8:	442b      	add	r3, r5
2401aaca:	3504      	adds	r5, #4
2401aacc:	edc3 9a00 	vstr	s19, [r3]
    for (int i = 0; i < p->numModes; ++i) {
2401aad0:	687b      	ldr	r3, [r7, #4]
2401aad2:	42a3      	cmp	r3, r4
2401aad4:	dcdc      	bgt.n	2401aa90 <tStiffString_pluck+0x48>
		Lfloat x0 = p->pickupPos * PI;
2401aad6:	f640 73db 	movw	r3, #4059	; 0xfdb
    }
    p->amp = amp;
2401aada:	ed87 aa13 	vstr	s20, [r7, #76]	; 0x4c
	_tStiffString *p = *pm;
2401aade:	6837      	ldr	r7, [r6, #0]
		Lfloat x0 = p->pickupPos * PI;
2401aae0:	f2c4 0349 	movt	r3, #16457	; 0x4049
	  for (int i = 0; i < p->numModes; ++i)
2401aae4:	687a      	ldr	r2, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
2401aae6:	edd7 8a08 	vldr	s17, [r7, #32]
2401aaea:	ee07 3a90 	vmov	s15, r3
	  for (int i = 0; i < p->numModes; ++i)
2401aaee:	2a00      	cmp	r2, #0
		Lfloat x0 = p->pickupPos * PI;
2401aaf0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
2401aaf4:	dd37      	ble.n	2401ab66 <tStiffString_pluck+0x11e>
		Lfloat totalGain = 0.0f;
2401aaf6:	2200      	movs	r2, #0
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401aaf8:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
2401aafa:	4615      	mov	r5, r2
		Lfloat totalGain = 0.0f;
2401aafc:	ee08 2a10 	vmov	s16, r2
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
2401ab00:	3501      	adds	r5, #1
2401ab02:	ee07 5a90 	vmov	s15, r5
2401ab06:	00ac      	lsls	r4, r5, #2
2401ab08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401ab0c:	3c04      	subs	r4, #4
2401ab0e:	4426      	add	r6, r4
2401ab10:	ee20 0a28 	vmul.f32	s0, s0, s17
2401ab14:	f7e5 fea8 	bl	24000868 <arm_sin_f32>
2401ab18:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
2401ab1c:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401ab1e:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
2401ab22:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
2401ab24:	eb06 0004 	add.w	r0, r6, r4
2401ab28:	4422      	add	r2, r4
2401ab2a:	edd0 7a00 	vldr	s15, [r0]
2401ab2e:	ed92 7a00 	vldr	s14, [r2]
2401ab32:	eef0 7ae7 	vabs.f32	s15, s15
2401ab36:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
2401ab3a:	dbe1      	blt.n	2401ab00 <tStiffString_pluck+0xb8>
	  p->gainComp = 1.0f / totalGain;
2401ab3c:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401ab40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401ab44:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401ab48:	ee07 3a90 	vmov	s15, r3
2401ab4c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401ab50:	fe88 8a47 	vminnm.f32	s16, s16, s14
2401ab54:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
2401ab58:	eec7 7a08 	vdiv.f32	s15, s14, s16
2401ab5c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    tStiffString_updateOutputWeights(mp);
}
2401ab60:	ecbd 8b06 	vpop	{d8-d10}
2401ab64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  for (int i = 0; i < p->numModes; ++i)
2401ab66:	2300      	movs	r3, #0
2401ab68:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
2401ab6c:	ee07 3a90 	vmov	s15, r3
	  p->gainComp = 1.0f / totalGain;
2401ab70:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
2401ab74:	ecbd 8b06 	vpop	{d8-d10}
2401ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401ab7a:	bf00      	nop

2401ab7c <tStiffString_setStiffnessNoUpdate>:
2401ab7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
2401ab80:	6802      	ldr	r2, [r0, #0]
2401ab82:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
2401ab86:	ee07 3a90 	vmov	s15, r3
2401ab8a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401ab8e:	ed82 0a06 	vstr	s0, [r2, #24]
2401ab92:	4770      	bx	lr

2401ab94 <tStiffString_setPickupPosNoUpdate>:

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
    tStiffString p = *pm;

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
2401ab94:	f247 02a4 	movw	r2, #28836	; 0x70a4
2401ab98:	f24d 730a 	movw	r3, #55050	; 0xd70a
    tStiffString p = *pm;
2401ab9c:	6801      	ldr	r1, [r0, #0]
    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
2401ab9e:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
2401aba2:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401aba6:	ee07 2a10 	vmov	s14, r2
2401abaa:	ee07 3a90 	vmov	s15, r3
2401abae:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401abb2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
2401abb6:	ed81 0a08 	vstr	s0, [r1, #32]
}
2401abba:	4770      	bx	lr

2401abbc <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
    tStiffString p = *pm;

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
2401abbc:	f247 02a4 	movw	r2, #28836	; 0x70a4
2401abc0:	f24d 730a 	movw	r3, #55050	; 0xd70a
    tStiffString p = *pm;
2401abc4:	6801      	ldr	r1, [r0, #0]
    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
2401abc6:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
2401abca:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401abce:	ee07 2a10 	vmov	s14, r2
2401abd2:	ee07 3a90 	vmov	s15, r3
2401abd6:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401abda:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
2401abde:	ed81 0a07 	vstr	s0, [r1, #28]
}
2401abe2:	4770      	bx	lr

2401abe4 <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
2401abe4:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
2401abe6:	ed83 0a05 	vstr	s0, [r3, #20]
}
2401abea:	4770      	bx	lr

2401abec <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
2401abec:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
2401abee:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
2401abf2:	4770      	bx	lr

2401abf4 <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
2401abf4:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
2401abf6:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
2401abfa:	4770      	bx	lr

2401abfc <glottis_setup_waveform>:
    union { float f; uint32_t x; } u = { f };
    return (u.x << 1) > 0xff000000u;
}

void glottis_setup_waveform(glottis* const glo)
{
2401abfc:	b538      	push	{r3, r4, r5, lr}
2401abfe:	ed2d 8b0a 	vpush	{d8-d12}
	_glottis* glot = *glo;
2401ac02:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
2401ac04:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
2401ac08:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
2401ac0c:	f64c 41cd 	movw	r1, #52429	; 0xcccd
2401ac10:	edd4 6a02 	vldr	s13, [r4, #8]
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
2401ac14:	f64a 12fc 	movw	r2, #43516	; 0xa9fc
2401ac18:	f246 0342 	movw	r3, #24642	; 0x6042
2401ac1c:	f2c4 012c 	movt	r1, #16428	; 0x402c
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
2401ac20:	ee79 6ae6 	vsub.f32	s13, s19, s13
    Rk = 0.224f + 0.118f*Rd;
2401ac24:	f6c3 52f1 	movt	r2, #15857	; 0x3df1
2401ac28:	f6c3 6365 	movt	r3, #15973	; 0x3e65
2401ac2c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
2401ac30:	ee05 2a10 	vmov	s10, r2
2401ac34:	ee07 1a90 	vmov	s15, r1
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
2401ac38:	ee66 6a86 	vmul.f32	s13, s13, s12
    Rk = 0.224f + 0.118f*Rd;
2401ac3c:	ee07 3a10 	vmov	s14, r3
    Ra = -0.01f + 0.048f*Rd;
2401ac40:	f649 30a6 	movw	r0, #39846	; 0x9ba6
2401ac44:	f24d 720a 	movw	r2, #55050	; 0xd70a
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac48:	f649 139a 	movw	r3, #39322	; 0x999a
2401ac4c:	eef0 3a6a 	vmov.f32	s7, s21
2401ac50:	fe86 6aaa 	vmaxnm.f32	s12, s13, s21
2401ac54:	fe86 6a67 	vminnm.f32	s12, s12, s15
    Rk = 0.224f + 0.118f*Rd;
2401ac58:	eea6 7a05 	vfma.f32	s14, s12, s10
    Ra = -0.01f + 0.048f*Rd;
2401ac5c:	f6c3 5044 	movt	r0, #15684	; 0x3d44
2401ac60:	f6cb 4223 	movt	r2, #48163	; 0xbc23
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac64:	f6c3 7399 	movt	r3, #16281	; 0x3f99
    Ra = -0.01f + 0.048f*Rd;
2401ac68:	ee05 0a90 	vmov	s11, r0
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
2401ac6c:	edc4 6a03 	vstr	s13, [r4, #12]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac70:	ee04 3a90 	vmov	s9, r3
    Ra = -0.01f + 0.048f*Rd;
2401ac74:	ee07 2a90 	vmov	s15, r2
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac78:	f244 71ae 	movw	r1, #18350	; 0x47ae


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
2401ac7c:	f64a 4308 	movw	r3, #44040	; 0xac08
    Ra = -0.01f + 0.048f*Rd;
2401ac80:	eee6 7a25 	vfma.f32	s15, s12, s11
    x = 1.0f + (x * 0.00390625f);
2401ac84:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac88:	eee7 3a24 	vfma.f32	s7, s14, s9
2401ac8c:	f6c3 51e1 	movt	r1, #15841	; 0x3de1
    Te = Tp + Tp*Rk;
2401ac90:	f6c3 739c 	movt	r3, #16284	; 0x3f9c
    glot->waveform_length = 1.0f / glot->freq;
2401ac94:	edd4 2a01 	vldr	s5, [r4, #4]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401ac98:	ee03 1a10 	vmov	s6, r1
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
2401ac9c:	f642 5018 	movw	r0, #11544	; 0x2d18
    Te = Tp + Tp*Rk;
2401aca0:	ee08 3a90 	vmov	s17, r3
    omega = M_PI / Tp;
2401aca4:	f242 11fb 	movw	r1, #8699	; 0x21fb
2401aca8:	ee05 2a90 	vmov	s11, r2
2401acac:	f2c5 4044 	movt	r0, #21572	; 0x5444
    epsilon = (Lfloat)1.0f / Ta;
2401acb0:	ee89 baa7 	vdiv.f32	s22, s19, s15
    omega = M_PI / Tp;
2401acb4:	f2c4 0109 	movt	r1, #16393	; 0x4009
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401acb8:	f640 55d1 	movw	r5, #3537	; 0xdd1
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401acbc:	ee67 6ae3 	vnmul.f32	s13, s15, s7
2401acc0:	ee63 3a87 	vmul.f32	s7, s7, s14
    Te = Tp + Tp*Rk;
2401acc4:	eee6 8a05 	vfma.f32	s17, s12, s10
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401acc8:	eeb0 7a66 	vmov.f32	s14, s13
    glot->waveform_length = 1.0f / glot->freq;
2401accc:	ee89 5aa2 	vdiv.f32	s10, s19, s5
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401acd0:	eea6 7a03 	vfma.f32	s14, s12, s6
    x = 1.0f + (x * 0.00390625f);
2401acd4:	eeb0 8a69 	vmov.f32	s16, s19
2401acd8:	ee6b 5a25 	vmul.f32	s11, s22, s11
    omega = M_PI / Tp;
2401acdc:	ec41 0b14 	vmov	d4, r0, r1
    Tp = (Lfloat)1.0f / (2.0f*Rg);
2401ace0:	ee37 7a07 	vadd.f32	s14, s14, s14
2401ace4:	ee87 aa23 	vdiv.f32	s20, s14, s7
    glot->waveform_length = 1.0f / glot->freq;
2401ace8:	ed84 5a04 	vstr	s10, [r4, #16]
    Te = Tp + Tp*Rk;
2401acec:	ee68 8a8a 	vmul.f32	s17, s17, s20
    omega = M_PI / Tp;
2401acf0:	eeb7 2aca 	vcvt.f64.f32	d2, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
2401acf4:	ee78 3ae9 	vsub.f32	s7, s17, s19
    omega = M_PI / Tp;
2401acf8:	ee84 6b02 	vdiv.f64	d6, d4, d2
2401acfc:	eea3 8aa5 	vfma.f32	s16, s7, s11
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
2401ad00:	ee39 7ae8 	vsub.f32	s14, s19, s17
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
2401ad04:	ee3a 5a68 	vsub.f32	s10, s20, s17
    x *= x; x *= x; x *= x; x *= x;
2401ad08:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad0c:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad10:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad14:	ee28 8a08 	vmul.f32	s16, s16, s16
    x *= x; x *= x; x *= x; x *= x;
2401ad18:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad1c:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad20:	ee28 8a08 	vmul.f32	s16, s16, s16
2401ad24:	ee28 8a08 	vmul.f32	s16, s16, s16
    omega = M_PI / Tp;
2401ad28:	eef7 bbc6 	vcvt.f32.f64	s23, d6
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
2401ad2c:	ee27 7a08 	vmul.f32	s14, s14, s16
2401ad30:	ee78 6a69 	vsub.f32	s13, s16, s19
    delta = 1.0f - shift;
2401ad34:	ee39 cac8 	vsub.f32	s24, s19, s16
    s = fast_sinf2(omega * Te);
2401ad38:	ee28 0aab 	vmul.f32	s0, s17, s23
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
2401ad3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
    rhs_integral = rhs_integral / delta;
2401ad40:	ee87 9a0c 	vdiv.f32	s18, s14, s24
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
2401ad44:	eea5 9a2a 	vfma.f32	s18, s10, s21
    s = fast_sinf2(omega * Te);
2401ad48:	f7fc f8b4 	bl	24016eb4 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
2401ad4c:	f642 5218 	movw	r2, #11544	; 0x2d18
2401ad50:	f242 13fb 	movw	r3, #8699	; 0x21fb
2401ad54:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
2401ad58:	f245 5e55 	movw	lr, #21845	; 0x5555
2401ad5c:	f2c5 4244 	movt	r2, #21572	; 0x5444
2401ad60:	f2cc 0309 	movt	r3, #49161	; 0xc009
2401ad64:	ee3a 4a0a 	vadd.f32	s8, s20, s20
2401ad68:	f2cc 0ed5 	movt	lr, #49365	; 0xc0d5
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401ad6c:	f246 0178 	movw	r1, #24696	; 0x6078
    z = my_faster_logf(y);
    alpha = z / (Tp/2.0f - Te);
2401ad70:	eef0 3a68 	vmov.f32	s7, s17
    upper_integral = -lower_integral;
2401ad74:	eeb1 6a49 	vneg.f32	s12, s18
    glot->alpha = alpha;
    glot->E0 = E0;
    glot->epsilon = epsilon;
    glot->shift = shift;
    glot->delta = delta;
    glot->Te = Te;
2401ad78:	edc4 8a0b 	vstr	s17, [r4, #44]	; 0x2c
    y = -M_PI * s * upper_integral / (Tp*2.0f);
2401ad7c:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
2401ad80:	f6c3 616c 	movt	r1, #15980	; 0x3e6c
    alpha = z / (Tp/2.0f - Te);
2401ad84:	eeda 3a2a 	vfnms.f32	s7, s20, s21
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401ad88:	f243 5c64 	movw	ip, #13668	; 0x3564
    y = -M_PI * s * upper_integral / (Tp*2.0f);
2401ad8c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401ad90:	ee02 1a10 	vmov	s4, r1
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401ad94:	f24e 511a 	movw	r1, #58650	; 0xe51a
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401ad98:	f643 50c9 	movw	r0, #15817	; 0x3dc9
    E0 = -1.0f / (s * fastExp4(alpha*Te));
2401ad9c:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
    glot->epsilon = epsilon;
2401ada0:	ed84 ba08 	vstr	s22, [r4, #32]
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401ada4:	f6c3 61a9 	movt	r1, #16041	; 0x3ea9
    glot->shift = shift;
2401ada8:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
    glot->delta = delta;
2401adac:	ed84 ca0a 	vstr	s24, [r4, #40]	; 0x28
2401adb0:	ee02 1a90 	vmov	s5, r1
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
2401adb4:	f247 2118 	movw	r1, #29208	; 0x7218
    glot->omega = omega;
2401adb8:	edc4 ba0c 	vstr	s23, [r4, #48]	; 0x30
2401adbc:	f6c3 7131 	movt	r1, #16177	; 0x3f31
    y = -M_PI * s * upper_integral / (Tp*2.0f);
2401adc0:	ec43 2b15 	vmov	d5, r2, r3
2401adc4:	ee26 6b05 	vmul.f64	d6, d6, d5
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401adc8:	f24f 436d 	movw	r3, #62573	; 0xf46d
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
2401adcc:	2200      	movs	r2, #0
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
2401adce:	ee03 1a10 	vmov	s6, r1
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401add2:	f6cb 638e 	movt	r3, #48782	; 0xbe8e
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401add6:	f24c 51aa 	movw	r1, #50602	; 0xc5aa
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
2401adda:	f6cf 7280 	movt	r2, #65408	; 0xff80
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401adde:	ee05 3a10 	vmov	s10, r3
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401ade2:	f247 132d 	movw	r3, #28973	; 0x712d
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401ade6:	f6cf 71fe 	movt	r1, #65534	; 0xfffe
2401adea:	ee26 6b07 	vmul.f64	d6, d6, d7
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401adee:	f6cb 63ff 	movt	r3, #48895	; 0xbeff
2401adf2:	ee05 3a90 	vmov	s11, r3
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401adf6:	f64a 233b 	movw	r3, #43579	; 0xaa3b
2401adfa:	f6c4 3338 	movt	r3, #19256	; 0x4b38
2401adfe:	ee86 7b04 	vdiv.f64	d7, d6, d4
2401ae02:	ee06 3a90 	vmov	s13, r3
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401ae06:	eeb0 6a45 	vmov.f32	s12, s10
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401ae0a:	ee68 8aa6 	vmul.f32	s17, s17, s13
    unholy.f = a;
2401ae0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
2401ae12:	ee17 3a90 	vmov	r3, s15
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401ae16:	eef0 7a65 	vmov.f32	s15, s11
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
2401ae1a:	449e      	add	lr, r3
2401ae1c:	ea0e 0202 	and.w	r2, lr, r2
    unholy2.i = (unholy.i - e);
2401ae20:	1a9b      	subs	r3, r3, r2
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
2401ae22:	ee06 2a90 	vmov	s13, r2
    unholy2.i = (unholy.i - e);
2401ae26:	ee07 3a10 	vmov	s14, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
2401ae2a:	eefa 6ae4 	vcvt.f32.s32	s13, s13, #23
    f = m - 1.0f;
2401ae2e:	ee37 7a69 	vsub.f32	s14, s14, s19
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401ae32:	eea2 6a07 	vfma.f32	s12, s4, s14
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401ae36:	eee2 7a87 	vfma.f32	s15, s5, s14
    s = f * f;
2401ae3a:	ee67 5a07 	vmul.f32	s11, s14, s14
    r = fmaf (r, s, t);
2401ae3e:	eee6 7a25 	vfma.f32	s15, s12, s11
    r = fmaf (r, s, f);
2401ae42:	eea7 7aa5 	vfma.f32	s14, s15, s11
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
2401ae46:	eea6 7a83 	vfma.f32	s14, s13, s6
    alpha = z / (Tp/2.0f - Te);
2401ae4a:	eec7 7a23 	vdiv.f32	s15, s14, s7
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401ae4e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    glot->alpha = alpha;
2401ae52:	edc4 7a06 	vstr	s15, [r4, #24]
2401ae56:	eefd 7ae8 	vcvt.s32.f32	s15, s17
2401ae5a:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401ae5e:	f3c3 1ecf 	ubfx	lr, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401ae62:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401ae66:	fb05 f20e 	mul.w	r2, r5, lr
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401ae6a:	eb0c 4222 	add.w	r2, ip, r2, asr #16
2401ae6e:	fb0e f202 	mul.w	r2, lr, r2
2401ae72:	eb00 42a2 	add.w	r2, r0, r2, asr #18
2401ae76:	fb0e f202 	mul.w	r2, lr, r2
2401ae7a:	eb01 31a2 	add.w	r1, r1, r2, asr #14
2401ae7e:	fb0e f101 	mul.w	r1, lr, r1
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401ae82:	eb03 23e1 	add.w	r3, r3, r1, asr #11
    E0 = -1.0f / (s * fastExp4(alpha*Te));
2401ae86:	ee07 3a90 	vmov	s15, r3
2401ae8a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401ae8e:	eec1 7a80 	vdiv.f32	s15, s3, s0
    glot->E0 = E0;
2401ae92:	edc4 7a07 	vstr	s15, [r4, #28]
}
2401ae96:	ecbd 8b0a 	vpop	{d8-d12}
2401ae9a:	bd38      	pop	{r3, r4, r5, pc}

2401ae9c <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
2401ae9c:	b530      	push	{r4, r5, lr}
2401ae9e:	ed2d 8b02 	vpush	{d8}
	_glottis* glot = *glo;
2401aea2:	6804      	ldr	r4, [r0, #0]
{
2401aea4:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
2401aea6:	edd4 7a05 	vldr	s15, [r4, #20]
2401aeaa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38

    if(glot->time_in_waveform > glot->waveform_length) {
2401aeae:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
2401aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
2401aeb6:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
2401aeb8:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
2401aeba:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
2401aebc:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
2401aec0:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
2401aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401aec8:	dc69      	bgt.n	2401af9e <glottis_compute+0x102>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
2401aeca:	ed94 7a01 	vldr	s14, [r4, #4]
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401aece:	f64a 233b 	movw	r3, #43579	; 0xaa3b

    if(t > glot->Te) {
2401aed2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
2401aed6:	ee67 7a87 	vmul.f32	s15, s15, s14
    if(t > glot->Te) {
2401aeda:	eef4 6ae7 	vcmpe.f32	s13, s15
2401aede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401aee2:	d567      	bpl.n	2401afb4 <glottis_compute+0x118>
2401aee4:	f6c4 3338 	movt	r3, #19256	; 0x4b38
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
2401aee8:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401aeec:	ed94 7a08 	vldr	s14, [r4, #32]
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401aef0:	f640 51d1 	movw	r1, #3537	; 0xdd1
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401aef4:	ee07 3a90 	vmov	s15, r3
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401aef8:	f243 5264 	movw	r2, #13668	; 0x3564
2401aefc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401af00:	ee67 7a27 	vmul.f32	s15, s14, s15
2401af04:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
2401af08:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401af0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401af10:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401af14:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401af18:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401af1c:	fb00 f101 	mul.w	r1, r0, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401af20:	eb02 4221 	add.w	r2, r2, r1, asr #16
2401af24:	f643 51c9 	movw	r1, #15817	; 0x3dc9
2401af28:	fb00 f202 	mul.w	r2, r0, r2
2401af2c:	eb01 41a2 	add.w	r1, r1, r2, asr #18
2401af30:	f24c 52aa 	movw	r2, #50602	; 0xc5aa
2401af34:	fb00 f101 	mul.w	r1, r0, r1
2401af38:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
2401af3c:	eb02 32a1 	add.w	r2, r2, r1, asr #14
2401af40:	fb00 f202 	mul.w	r2, r0, r2
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401af44:	eb03 23e2 	add.w	r3, r3, r2, asr #11
2401af48:	ee07 3a90 	vmov	s15, r3
2401af4c:	ee76 7a67 	vsub.f32	s15, s12, s15
2401af50:	ee87 8aa5 	vdiv.f32	s16, s15, s11
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
2401af54:	692b      	ldr	r3, [r5, #16]
2401af56:	4798      	blx	r3

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
2401af58:	ed94 7a02 	vldr	s14, [r4, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
2401af5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    noise = (2.0f * leaf->random()) - 1.0f;
2401af60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401af64:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401af6c:	eee0 7a26 	vfma.f32	s15, s0, s13
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
2401af70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401af74:	db03      	blt.n	2401af7e <glottis_compute+0xe2>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
2401af76:	eeb1 7ac7 	vsqrt.f32	s14, s14
2401af7a:	ee76 6ac7 	vsub.f32	s13, s13, s14
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;

    out += aspiration;
2401af7e:	f24c 2390 	movw	r3, #49808	; 0xc290

    return out;
}
2401af82:	eeb0 0a48 	vmov.f32	s0, s16
    out += aspiration;
2401af86:	f6c3 5375 	movt	r3, #15733	; 0x3d75
2401af8a:	ee07 3a10 	vmov	s14, r3
2401af8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
2401af92:	eea7 0aa6 	vfma.f32	s0, s15, s13
2401af96:	b003      	add	sp, #12
2401af98:	ecbd 8b02 	vpop	{d8}
2401af9c:	bd30      	pop	{r4, r5, pc}
        glot->time_in_waveform -= glot->waveform_length;
2401af9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
2401afa2:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
2401afa4:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
2401afa8:	f7ff fe28 	bl	2401abfc <glottis_setup_waveform>
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
2401afac:	9c01      	ldr	r4, [sp, #4]
2401afae:	edd4 7a05 	vldr	s15, [r4, #20]
2401afb2:	e78a      	b.n	2401aeca <glottis_compute+0x2e>
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401afb4:	f6c4 3338 	movt	r3, #19256	; 0x4b38
2401afb8:	ed94 7a06 	vldr	s14, [r4, #24]
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
2401afbc:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401afc0:	f640 51d1 	movw	r1, #3537	; 0xdd1
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401afc4:	ee06 3a90 	vmov	s13, r3
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401afc8:	f243 5264 	movw	r2, #13668	; 0x3564
2401afcc:	ee27 0a80 	vmul.f32	s0, s15, s0
2401afd0:	ed94 8a07 	vldr	s16, [r4, #28]
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401afd4:	ee27 7a26 	vmul.f32	s14, s14, s13
2401afd8:	ee27 7a27 	vmul.f32	s14, s14, s15
2401afdc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
2401afe0:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401afe4:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401afe8:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401afec:	fb00 f101 	mul.w	r1, r0, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
2401aff0:	eb02 4221 	add.w	r2, r2, r1, asr #16
2401aff4:	f643 51c9 	movw	r1, #15817	; 0x3dc9
2401aff8:	fb00 f202 	mul.w	r2, r0, r2
2401affc:	eb01 41a2 	add.w	r1, r1, r2, asr #18
2401b000:	f24c 52aa 	movw	r2, #50602	; 0xc5aa
2401b004:	fb00 f101 	mul.w	r1, r0, r1
2401b008:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
2401b00c:	eb02 32a1 	add.w	r2, r2, r1, asr #14
2401b010:	fb00 f202 	mul.w	r2, r0, r2
    reinterpreter.i += (((((((((((3537*m) >> 16)
2401b014:	eb03 23e2 	add.w	r3, r3, r2, asr #11
2401b018:	ee07 3a90 	vmov	s15, r3
2401b01c:	ee28 8a27 	vmul.f32	s16, s16, s15
2401b020:	f7e5 fc22 	bl	24000868 <arm_sin_f32>
2401b024:	ee28 8a00 	vmul.f32	s16, s16, s0
2401b028:	e794      	b.n	2401af54 <glottis_compute+0xb8>
2401b02a:	bf00      	nop

2401b02c <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
2401b02c:	b500      	push	{lr}
	_tract* tr = *t;
2401b02e:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++)
2401b030:	685a      	ldr	r2, [r3, #4]
2401b032:	2a00      	cmp	r2, #0
2401b034:	dd5e      	ble.n	2401b0f4 <tract_calculate_reflections+0xc8>
2401b036:	2200      	movs	r2, #0
    {
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
2401b038:	6958      	ldr	r0, [r3, #20]
2401b03a:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
2401b03e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        tr->A[i] = scaledDiameter * scaledDiameter;
2401b042:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
2401b044:	edd0 7a00 	vldr	s15, [r0]
        tr->A[i] = scaledDiameter * scaledDiameter;
2401b048:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++)
2401b04c:	3201      	adds	r2, #1
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
2401b04e:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
2401b052:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401b056:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++)
2401b05a:	6859      	ldr	r1, [r3, #4]
2401b05c:	4291      	cmp	r1, r2
2401b05e:	dceb      	bgt.n	2401b038 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++)
2401b060:	2901      	cmp	r1, #1
2401b062:	dd47      	ble.n	2401b0f4 <tract_calculate_reflections+0xc8>
    {
        tr->reflection[i] = tr->new_reflection[i];

        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);

        if(tr->A[i] <= 0.0000001f)
2401b064:	f64b 7195 	movw	r1, #49045	; 0xbf95
        {
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
2401b068:	f247 0ea4 	movw	lr, #28836	; 0x70a4
    for(i = 1; i < tr->n; i++)
2401b06c:	2204      	movs	r2, #4
2401b06e:	f04f 0c01 	mov.w	ip, #1
        }
        else
        {
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401b072:	4608      	mov	r0, r1
        if(tr->A[i] <= 0.0000001f)
2401b074:	f2c3 31d6 	movt	r1, #13270	; 0x33d6
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
2401b078:	f6c3 7e7d 	movt	lr, #16253	; 0x3f7d
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401b07c:	f2cb 30d6 	movt	r0, #46038	; 0xb3d6
        if(tr->A[i] <= 0.0000001f)
2401b080:	ee06 1a10 	vmov	s12, r1
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401b084:	ee05 0a90 	vmov	s11, r0
2401b088:	e009      	b.n	2401b09e <tract_calculate_reflections+0x72>
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
2401b08a:	6b19      	ldr	r1, [r3, #48]	; 0x30
2401b08c:	4411      	add	r1, r2
2401b08e:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++)
2401b092:	f10c 0c01 	add.w	ip, ip, #1
2401b096:	6859      	ldr	r1, [r3, #4]
2401b098:	3204      	adds	r2, #4
2401b09a:	4561      	cmp	r1, ip
2401b09c:	dd2a      	ble.n	2401b0f4 <tract_calculate_reflections+0xc8>
        tr->reflection[i] = tr->new_reflection[i];
2401b09e:	e9d3 100b 	ldrd	r1, r0, [r3, #44]	; 0x2c
2401b0a2:	4410      	add	r0, r2
2401b0a4:	4411      	add	r1, r2
2401b0a6:	6800      	ldr	r0, [r0, #0]
2401b0a8:	6008      	str	r0, [r1, #0]
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
2401b0aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
2401b0ac:	4411      	add	r1, r2
2401b0ae:	edd1 7a00 	vldr	s15, [r1]
2401b0b2:	ed11 7a01 	vldr	s14, [r1, #-4]
        if(tr->A[i] <= 0.0000001f)
2401b0b6:	eef4 7ac6 	vcmpe.f32	s15, s12
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
2401b0ba:	ee77 6a27 	vadd.f32	s13, s14, s15
        if(tr->A[i] <= 0.0000001f)
2401b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b0c2:	d9e2      	bls.n	2401b08a <tract_calculate_reflections+0x5e>
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401b0c4:	eef4 6ac6 	vcmpe.f32	s13, s12
        	{
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
2401b0c8:	ee37 7a67 	vsub.f32	s14, s14, s15
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b0d0:	da04      	bge.n	2401b0dc <tract_calculate_reflections+0xb0>
2401b0d2:	eef4 6a65 	vcmp.f32	s13, s11
2401b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b0da:	d8da      	bhi.n	2401b092 <tract_calculate_reflections+0x66>
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
2401b0dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401b0e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    for(i = 1; i < tr->n; i++)
2401b0e2:	f10c 0c01 	add.w	ip, ip, #1
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
2401b0e6:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++)
2401b0e8:	3204      	adds	r2, #4
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
2401b0ea:	edc1 7a00 	vstr	s15, [r1]
    for(i = 1; i < tr->n; i++)
2401b0ee:	6859      	ldr	r1, [r3, #4]
2401b0f0:	4561      	cmp	r1, ip
2401b0f2:	dcd4      	bgt.n	2401b09e <tract_calculate_reflections+0x72>

    tr->reflection_left = tr->new_reflection_left;
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401b0f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2401b0f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    tr->reflection_left = tr->new_reflection_left;
2401b0f8:	f8d3 c08c 	ldr.w	ip, [r3, #140]	; 0x8c
    tr->reflection_right = tr->new_reflection_right;
2401b0fc:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    tr->reflection_left = tr->new_reflection_left;
2401b100:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401b104:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
    tr->reflection_right = tr->new_reflection_right;
2401b108:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    if ((sum  <= 0.001f) && (sum >= -0.001f))
2401b10c:	f241 216f 	movw	r1, #4719	; 0x126f
    tr->reflection_nose = tr->new_reflection_nose;
2401b110:	f8d3 e094 	ldr.w	lr, [r3, #148]	; 0x94
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401b114:	4662      	mov	r2, ip
2401b116:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    if ((sum  <= 0.001f) && (sum >= -0.001f))
2401b118:	f6c3 2183 	movt	r1, #14979	; 0x3a83
    tr->reflection_nose = tr->new_reflection_nose;
2401b11c:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401b120:	3204      	adds	r2, #4
2401b122:	eddc 5a00 	vldr	s11, [ip]
    if ((sum  <= 0.001f) && (sum >= -0.001f))
2401b126:	ee07 1a10 	vmov	s14, r1
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401b12a:	edd0 7a00 	vldr	s15, [r0]
2401b12e:	eddc 6a01 	vldr	s13, [ip, #4]
2401b132:	ee75 7aa7 	vadd.f32	s15, s11, s15
2401b136:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if ((sum  <= 0.001f) && (sum >= -0.001f))
2401b13a:	eef4 7a47 	vcmp.f32	s15, s14
2401b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b142:	d830      	bhi.n	2401b1a6 <tract_calculate_reflections+0x17a>
2401b144:	f241 216f 	movw	r1, #4719	; 0x126f
2401b148:	f6cb 2183 	movt	r1, #47747	; 0xba83
2401b14c:	ee06 1a90 	vmov	s13, r1
2401b150:	eef4 7ae6 	vcmpe.f32	s15, s13
2401b154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b158:	db25      	blt.n	2401b1a6 <tract_calculate_reflections+0x17a>
2401b15a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    {
    	sum = 0.001f;
2401b15e:	eef0 7a47 	vmov.f32	s15, s14
2401b162:	f2c4 4179 	movt	r1, #17529	; 0x4479
2401b166:	ee07 1a10 	vmov	s14, r1
    }
    Lfloat invSum = 1.0f / sum;
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
2401b16a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401b16e:	eeb0 6a67 	vmov.f32	s12, s15
2401b172:	ee95 6aa6 	vfnms.f32	s12, s11, s13
2401b176:	ee26 6a07 	vmul.f32	s12, s12, s14
2401b17a:	ed83 6a23 	vstr	s12, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
2401b17e:	eeb0 6a67 	vmov.f32	s12, s15
2401b182:	edd2 5a00 	vldr	s11, [r2]
2401b186:	ee95 6aa6 	vfnms.f32	s12, s11, s13
2401b18a:	ee26 6a07 	vmul.f32	s12, s12, s14
2401b18e:	ed83 6a24 	vstr	s12, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
2401b192:	ed90 6a00 	vldr	s12, [r0]
2401b196:	eed6 7a26 	vfnms.f32	s15, s12, s13
2401b19a:	ee67 7a87 	vmul.f32	s15, s15, s14
2401b19e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
2401b1a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Lfloat invSum = 1.0f / sum;
2401b1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401b1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401b1ae:	e7dc      	b.n	2401b16a <tract_calculate_reflections+0x13e>

2401b1b0 <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
2401b1b0:	b510      	push	{r4, lr}
	_tract* tr = *t;
2401b1b2:	6803      	ldr	r3, [r0, #0]
    tr->lip_reflection = -0.85f;
    tr->last_obstruction = -1;
    tr->movement_speed = 200.0f;
    tr->lip_output = 0.0f;
    tr->nose_output = 0.0f;
    tr->tip_start = n*0.727272727272727f;
2401b1b4:	f642 6c8c 	movw	ip, #11916	; 0x2e8c
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b1b8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    tr->last_obstruction = -1;
2401b1bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (numTractSections < tr->maxNumTractSections)
2401b1c0:	691a      	ldr	r2, [r3, #16]
    tr->tip_start = n*0.727272727272727f;
2401b1c2:	f6c3 7c3a 	movt	ip, #16186	; 0x3f3a

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));

	tr->turbuluencePointPosition[0] = n* 0.45f;
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401b1c6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
    tr->last_obstruction = -1;
2401b1ca:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    if (numTractSections < tr->maxNumTractSections)
2401b1ce:	428a      	cmp	r2, r1
    tr->tip_start = n*0.727272727272727f;
2401b1d0:	ee05 ca10 	vmov	s10, ip
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b1d4:	f24a 2ce9 	movw	ip, #41705	; 0xa2e9
    tr->glottal_reflection = 0.75f;
2401b1d8:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
    	n = numTractSections;
2401b1dc:	bfcc      	ite	gt
2401b1de:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
2401b1e2:	ee07 2a90 	vmovle	s15, r2
    tr->blade_start = n*0.227272727272727f;
2401b1e6:	f64b 212f 	movw	r1, #47663	; 0xba2f
    tr->nose_length = n*0.636363636363636f; //28
2401b1ea:	f64e 02ba 	movw	r2, #59578	; 0xe8ba
    	n = tr->maxNumTractSections;
2401b1ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b1f2:	f6c3 5c8b 	movt	ip, #15755	; 0x3d8b
    tr->nose_length = n*0.636363636363636f; //28
2401b1f6:	f6c3 7222 	movt	r2, #16162	; 0x3f22
    tr->blade_start = n*0.227272727272727f;
2401b1fa:	f6c3 6168 	movt	r1, #15976	; 0x3e68
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b1fe:	ee03 ca10 	vmov	s6, ip
    tr->glottal_reflection = 0.75f;
2401b202:	ed83 1a27 	vstr	s2, [r3, #156]	; 0x9c
    tr->n = n; //44
2401b206:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    tr->nose_length = n*0.636363636363636f; //28
2401b20a:	ee06 2a10 	vmov	s12, r2
    tr->tip_start = n*0.727272727272727f;
2401b20e:	ee26 5a85 	vmul.f32	s10, s13, s10
    tr->blade_start = n*0.227272727272727f;
2401b212:	ee05 1a90 	vmov	s11, r1
    tr->lip_start = n*0.886363636363636f;
2401b216:	f64e 02ba 	movw	r2, #59578	; 0xe8ba
    tr->nose_length = n*0.636363636363636f; //28
2401b21a:	ee26 6a86 	vmul.f32	s12, s13, s12
	tr->turbuluencePointDiameter[0] = 1.5f;
	tr->turbuluencePointDiameter[1] = 1.5f;

    tr->invN = 1.0f / tr->n;
2401b21e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    tr->n = n; //44
2401b222:	ee17 0a90 	vmov	r0, s15
    tr->blade_start = n*0.227272727272727f;
2401b226:	ee66 5aa5 	vmul.f32	s11, s13, s11
    tr->lip_start = n*0.886363636363636f;
2401b22a:	f6c3 7262 	movt	r2, #16226	; 0x3f62
    tr->tip_start = n*0.727272727272727f;
2401b22e:	eebd 5ac5 	vcvt.s32.f32	s10, s10
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b232:	f642 618c 	movw	r1, #11916	; 0x2e8c
    tr->invN = 1.0f / tr->n;
2401b236:	eec4 7a87 	vdiv.f32	s15, s9, s14
    tr->lip_start = n*0.886363636363636f;
2401b23a:	ee04 2a10 	vmov	s8, r2
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401b23e:	f246 6266 	movw	r2, #26214	; 0x6666
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b242:	f6c3 513a 	movt	r1, #15674	; 0x3d3a
    tr->n = n; //44
2401b246:	6058      	str	r0, [r3, #4]
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401b248:	f6c3 62e6 	movt	r2, #16102	; 0x3ee6
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b24c:	ee03 1a90 	vmov	s7, r1
    tr->lip_reflection = -0.85f;
2401b250:	f649 119a 	movw	r1, #39322	; 0x999a
    tr->tip_start = n*0.727272727272727f;
2401b254:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
    tr->nose_length = n*0.636363636363636f; //28
2401b258:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->blade_start = n*0.227272727272727f;
2401b25c:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->lip_reflection = -0.85f;
2401b260:	f6cb 7159 	movt	r1, #48985	; 0xbf59
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b264:	eef8 1ac5 	vcvt.f32.s32	s3, s10
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b268:	ee76 4aa4 	vadd.f32	s9, s13, s9
    tr->lip_reflection = -0.85f;
2401b26c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b270:	eef8 2ac6 	vcvt.f32.s32	s5, s12
    tr->reflection_left = 0.0f;
2401b274:	2100      	movs	r1, #0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b276:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
    tr->nose_length = n*0.636363636363636f; //28
2401b27a:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b27e:	eee6 1ac3 	vfms.f32	s3, s13, s6
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401b282:	ee03 2a10 	vmov	s6, r2
    tr->movement_speed = 200.0f;
2401b286:	2200      	movs	r2, #0
    tr->lip_start = n*0.886363636363636f;
2401b288:	ee26 4a84 	vmul.f32	s8, s13, s8
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b28c:	eea6 2aa3 	vfma.f32	s4, s13, s7

    for(i = 0; i < tr->n; i++) {
2401b290:	4288      	cmp	r0, r1
    tr->movement_speed = 200.0f;
2401b292:	f2c4 3248 	movt	r2, #17224	; 0x4348
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b296:	ee74 4ae2 	vsub.f32	s9, s9, s5
	tr->turbuluencePointDiameter[0] = 1.5f;
2401b29a:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
    tr->blade_start = n*0.227272727272727f;
2401b29e:	edc3 5a15 	vstr	s11, [r3, #84]	; 0x54
    tr->movement_speed = 200.0f;
2401b2a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    tr->velum_target = 0.01f;
2401b2a6:	f24d 720a 	movw	r2, #55050	; 0xd70a
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401b2aa:	ee26 3a83 	vmul.f32	s6, s13, s6
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401b2ae:	edc3 1a17 	vstr	s3, [r3, #92]	; 0x5c
    tr->lip_start = n*0.886363636363636f;
2401b2b2:	eebd 4ac4 	vcvt.s32.f32	s8, s8
    tr->velum_target = 0.01f;
2401b2b6:	f6c3 4223 	movt	r2, #15395	; 0x3c23
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401b2ba:	ee66 6aa0 	vmul.f32	s13, s13, s1
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401b2be:	ed83 2a18 	vstr	s4, [r3, #96]	; 0x60
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b2c2:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401b2c6:	ed83 3a34 	vstr	s6, [r3, #208]	; 0xd0
    tr->lip_start = n*0.886363636363636f;
2401b2ca:	ed83 4a16 	vstr	s8, [r3, #88]	; 0x58
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401b2ce:	edc3 6a35 	vstr	s13, [r3, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
2401b2d2:	edc3 3a36 	vstr	s7, [r3, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
2401b2d6:	edc3 3a37 	vstr	s7, [r3, #220]	; 0xdc
    tr->invN = 1.0f / tr->n;
2401b2da:	edc3 7a02 	vstr	s15, [r3, #8]
    tr->velum_target = 0.01f;
2401b2de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    tr->reflection_left = 0.0f;
2401b2e2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->reflection_right = 0.0f;
2401b2e6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    tr->reflection_nose = 0.0f;
2401b2ea:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
2401b2ee:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
2401b2f2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
2401b2f6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    tr->lip_output = 0.0f;
2401b2fa:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
2401b2fe:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401b302:	edc3 4a13 	vstr	s9, [r3, #76]	; 0x4c
    for(i = 0; i < tr->n; i++) {
2401b306:	dd64      	ble.n	2401b3d2 <tract_newLength+0x222>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
            diameter = 0.6f;
2401b308:	f649 109a 	movw	r0, #39322	; 0x999a
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
            diameter = 1.1f;
        } else {
            diameter = 1.5f;
2401b30c:	f64c 4ccd 	movw	ip, #52429	; 0xcccd
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401b310:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
2401b314:	460a      	mov	r2, r1
            diameter = 0.6f;
2401b316:	f6c3 7019 	movt	r0, #16153	; 0x3f19
            diameter = 1.5f;
2401b31a:	f6c3 7c8c 	movt	ip, #16268	; 0x3f8c
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401b31e:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
2401b322:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 0.6f;
2401b326:	ee06 0a10 	vmov	s12, r0
            diameter = 1.5f;
2401b32a:	ee04 ca10 	vmov	s8, ip
2401b32e:	e001      	b.n	2401b334 <tract_newLength+0x184>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401b330:	edd3 7a02 	vldr	s15, [r3, #8]
2401b334:	ee67 7a27 	vmul.f32	s15, s14, s15
2401b338:	eef0 6a45 	vmov.f32	s13, s10
            diameter = 0.6f;
2401b33c:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401b340:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
2401b344:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401b348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401b34c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
2401b350:	ee16 0a90 	vmov	r0, s13
2401b354:	4290      	cmp	r0, r2
2401b356:	dc04      	bgt.n	2401b362 <tract_newLength+0x1b2>
            diameter = 1.5f;
2401b358:	ee17 0a90 	vmov	r0, s15
2401b35c:	4290      	cmp	r0, r2
2401b35e:	fe34 7a23 	vselgt.f32	s14, s8, s7
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
2401b362:	6a18      	ldr	r0, [r3, #32]
2401b364:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b368:	ed80 7a00 	vstr	s14, [r0]
            tr->target_diameter[i] =
2401b36c:	69d8      	ldr	r0, [r3, #28]
2401b36e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b372:	ed80 7a00 	vstr	s14, [r0]
            tr->rest_diameter[i] =
2401b376:	6998      	ldr	r0, [r3, #24]
2401b378:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b37c:	ed80 7a00 	vstr	s14, [r0]
        tr->diameter[i] =
2401b380:	6958      	ldr	r0, [r3, #20]
2401b382:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b386:	ed80 7a00 	vstr	s14, [r0]
        tr->reflection[i] = 0.0f;
2401b38a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
2401b38c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b390:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
2401b392:	6b18      	ldr	r0, [r3, #48]	; 0x30
2401b394:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b398:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
2401b39a:	6a58      	ldr	r0, [r3, #36]	; 0x24
2401b39c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b3a0:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
2401b3a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
2401b3a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b3a8:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
2401b3aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
2401b3ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b3b0:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
2401b3b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
2401b3b4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
2401b3b8:	3201      	adds	r2, #1
        tr->junction_outL[i] = 0.0f;
2401b3ba:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
2401b3bc:	6858      	ldr	r0, [r3, #4]
2401b3be:	ee07 0a90 	vmov	s15, r0
2401b3c2:	4290      	cmp	r0, r2
2401b3c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401b3c8:	dcb2      	bgt.n	2401b330 <tract_newLength+0x180>
    }

    if (tr->nose_length < 0.01f)
2401b3ca:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
2401b3ce:	eef8 2ac6 	vcvt.f32.s32	s5, s12
2401b3d2:	f24d 720a 	movw	r2, #55050	; 0xd70a
2401b3d6:	f6c3 4223 	movt	r2, #15395	; 0x3c23
2401b3da:	ee07 2a90 	vmov	s15, r2
2401b3de:	eef4 2ae7 	vcmpe.f32	s5, s15
2401b3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b3e6:	d513      	bpl.n	2401b410 <tract_newLength+0x260>
    {
    	tr->nose_length = 0.01f;
2401b3e8:	2200      	movs	r2, #0
2401b3ea:	649a      	str	r2, [r3, #72]	; 0x48
        tr->noseL[i] = 0.0f;
        tr->nose_junc_outR[i] = 0.0f;
        tr->nose_junc_outL[i] = 0.0f;
	}

    tr->new_reflection_left = 0.0f;
2401b3ec:	2200      	movs	r2, #0
2401b3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
2401b3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
2401b3f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
2401b3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
2401b3fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
2401b402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
2401b406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
2401b40a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
2401b40e:	bd10      	pop	{r4, pc}
	for(i = 0; i < tr->nose_length; i++) {
2401b410:	ee16 2a10 	vmov	r2, s12
    Lfloat invNoseLength = 1.0f / tr->nose_length;
2401b414:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
2401b418:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
2401b41a:	eec7 3aa2 	vdiv.f32	s7, s15, s5
	for(i = 0; i < tr->nose_length; i++) {
2401b41e:	dde5      	ble.n	2401b3ec <tract_newLength+0x23c>
			diameter = 0.4f + 1.6f * d;
2401b420:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
		diameter = MIN(diameter, 1.9f);
2401b424:	f243 3033 	movw	r0, #13107	; 0x3333
        tr->nose_reflection[i] = 0.0f;
2401b428:	2100      	movs	r1, #0
			diameter = 0.4f + 1.6f * d;
2401b42a:	46f4      	mov	ip, lr
		diameter = MIN(diameter, 1.9f);
2401b42c:	f6c3 70f3 	movt	r0, #16371	; 0x3ff3
			diameter = 0.4f + 1.6f * d;
2401b430:	f6c3 7ecc 	movt	lr, #16332	; 0x3fcc
		if(d < 1.0f) {
2401b434:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			diameter = 0.4f + 1.6f * d;
2401b438:	f6c3 6ccc 	movt	ip, #16076	; 0x3ecc
			diameter = 0.5f + 1.5f*(2.0f-d);
2401b43c:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
2401b440:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
	for(i = 0; i < tr->nose_length; i++) {
2401b444:	460a      	mov	r2, r1
			diameter = 0.4f + 1.6f * d;
2401b446:	ee04 ea90 	vmov	s9, lr
2401b44a:	ee05 ca10 	vmov	s10, ip
		diameter = MIN(diameter, 1.9f);
2401b44e:	ee05 0a90 	vmov	s11, r0
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401b452:	ee07 2a90 	vmov	s15, r2
2401b456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b45a:	ee67 7aa3 	vmul.f32	s15, s15, s7
		if(d < 1.0f) {
2401b45e:	eef4 7ae6 	vcmpe.f32	s15, s13
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401b462:	ee37 7aa7 	vadd.f32	s14, s15, s15
			diameter = 0.4f + 1.6f * d;
2401b466:	eef0 7a45 	vmov.f32	s15, s10
		if(d < 1.0f) {
2401b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.5f + 1.5f*(2.0f-d);
2401b46e:	ee34 6a47 	vsub.f32	s12, s8, s14
			diameter = 0.4f + 1.6f * d;
2401b472:	eee7 7a24 	vfma.f32	s15, s14, s9
		if(d < 1.0f) {
2401b476:	d403      	bmi.n	2401b480 <tract_newLength+0x2d0>
			diameter = 0.5f + 1.5f*(2.0f-d);
2401b478:	eef0 7a66 	vmov.f32	s15, s13
2401b47c:	eee6 7a03 	vfma.f32	s15, s12, s6
		tr->nose_diameter[i] = diameter;
2401b480:	6f98      	ldr	r0, [r3, #120]	; 0x78
		diameter = MIN(diameter, 1.9f);
2401b482:	fec7 7ae5 	vminnm.f32	s15, s15, s11
		tr->nose_diameter[i] = diameter;
2401b486:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b48a:	edc0 7a00 	vstr	s15, [r0]
        tr->nose_reflection[i] = 0.0f;
2401b48e:	6f58      	ldr	r0, [r3, #116]	; 0x74
2401b490:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b494:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
2401b496:	6e98      	ldr	r0, [r3, #104]	; 0x68
2401b498:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b49c:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
2401b49e:	6e58      	ldr	r0, [r3, #100]	; 0x64
2401b4a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b4a4:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
2401b4a6:	6f18      	ldr	r0, [r3, #112]	; 0x70
2401b4a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401b4ac:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
2401b4ae:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
2401b4b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
2401b4b4:	3201      	adds	r2, #1
        tr->nose_junc_outL[i] = 0.0f;
2401b4b6:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
2401b4b8:	6c98      	ldr	r0, [r3, #72]	; 0x48
2401b4ba:	4290      	cmp	r0, r2
2401b4bc:	dcc9      	bgt.n	2401b452 <tract_newLength+0x2a2>
2401b4be:	e795      	b.n	2401b3ec <tract_newLength+0x23c>

2401b4c0 <tract_reshape>:

void tract_reshape(tract* const t)
{
2401b4c0:	b410      	push	{r4}
	_tract* tr = *t;
2401b4c2:	6802      	ldr	r2, [r0, #0]
    //current_obstruction = -1;


    amount = tr->block_time * tr->movement_speed;

    for(i = 0; i < tr->n; i++) {
2401b4c4:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
2401b4c6:	edd2 4a2e 	vldr	s9, [r2, #184]	; 0xb8
2401b4ca:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
2401b4ce:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
2401b4d0:	ee64 4aa7 	vmul.f32	s9, s9, s15
    for(i = 0; i < tr->n; i++) {
2401b4d4:	dd77      	ble.n	2401b5c6 <tract_reshape+0x106>

            slow_return =
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
        }

        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b4d6:	f64c 41cd 	movw	r1, #52429	; 0xcccd
2401b4da:	f649 149a 	movw	r4, #39322	; 0x999a
    for(i = 0; i < tr->n; i++) {
2401b4de:	2300      	movs	r3, #0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b4e0:	4608      	mov	r0, r1
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b4e2:	f6c3 7419 	movt	r4, #16153	; 0x3f19
2401b4e6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
2401b4ea:	ee03 4a10 	vmov	s6, r4
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b4ee:	f6c3 60cc 	movt	r0, #16076	; 0x3ecc
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b4f2:	ee05 1a10 	vmov	s10, r1
2401b4f6:	ee24 4a83 	vmul.f32	s8, s9, s6
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b4fa:	ee03 0a90 	vmov	s7, r0
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b4fe:	ee24 5a85 	vmul.f32	s10, s9, s10
        diameter = tr->diameter[i];
2401b502:	6951      	ldr	r1, [r2, #20]
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b504:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
2401b508:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
        target_diameter = tr->target_diameter[i];
2401b50a:	69d4      	ldr	r4, [r2, #28]
        diameter = tr->diameter[i];
2401b50c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(i < tr->nose_start) slow_return = 0.6f;
2401b510:	4298      	cmp	r0, r3
        target_diameter = tr->target_diameter[i];
2401b512:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        diameter = tr->diameter[i];
2401b516:	ed91 6a00 	vldr	s12, [r1]
        target_diameter = tr->target_diameter[i];
2401b51a:	eddc 6a00 	vldr	s13, [ip]
        if(i < tr->nose_start) slow_return = 0.6f;
2401b51e:	dc16      	bgt.n	2401b54e <tract_reshape+0x8e>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b520:	1a1c      	subs	r4, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
2401b522:	eef0 7a64 	vmov.f32	s15, s9
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b526:	ee05 4a90 	vmov	s11, r4
        else if(i >= tr->tip_start) slow_return = 1.0f;
2401b52a:	6d14      	ldr	r4, [r2, #80]	; 0x50
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
2401b52c:	1a20      	subs	r0, r4, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b52e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
2401b532:	429c      	cmp	r4, r3
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
2401b534:	ee07 0a10 	vmov	s14, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b538:	ee65 5aa3 	vmul.f32	s11, s11, s7
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
2401b53c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        else if(i >= tr->tip_start) slow_return = 1.0f;
2401b540:	dd05      	ble.n	2401b54e <tract_reshape+0x8e>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401b542:	eec5 7a87 	vdiv.f32	s15, s11, s14
            slow_return =
2401b546:	ee77 7a83 	vadd.f32	s15, s15, s6
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b54a:	ee67 7aa4 	vmul.f32	s15, s15, s9

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
2401b54e:	eef4 6ac6 	vcmpe.f32	s13, s12
        tmp = current + amt_up;
2401b552:	ee76 7a27 	vadd.f32	s15, s12, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
2401b556:	ee36 7a45 	vsub.f32	s14, s12, s10
    if(current < target) {
2401b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
2401b55e:	fec7 7ae6 	vminnm.f32	s15, s15, s13
        return MAX(tmp, target);
2401b562:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
    if(current < target) {
2401b566:	dd22      	ble.n	2401b5ae <tract_reshape+0xee>
    for(i = 0; i < tr->n; i++) {
2401b568:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b56a:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
2401b56e:	6851      	ldr	r1, [r2, #4]
2401b570:	428b      	cmp	r3, r1
2401b572:	dbc6      	blt.n	2401b502 <tract_reshape+0x42>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
2401b574:	6f93      	ldr	r3, [r2, #120]	; 0x78
2401b576:	edd2 7a26 	vldr	s15, [r2, #152]	; 0x98
2401b57a:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
2401b57e:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b586:	d519      	bpl.n	2401b5bc <tract_reshape+0xfc>
        tmp = current + amt_up;
2401b588:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401b58c:	eea4 7aa6 	vfma.f32	s14, s9, s13
        return MIN(tmp, target);
2401b590:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
2401b594:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
2401b598:	e9d2 131e 	ldrd	r1, r3, [r2, #120]	; 0x78
2401b59c:	edd1 7a00 	vldr	s15, [r1]
2401b5a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401b5a4:	edc3 7a00 	vstr	s15, [r3]
}
2401b5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b5ac:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
2401b5ae:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401b5b0:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
2401b5b4:	6851      	ldr	r1, [r2, #4]
2401b5b6:	428b      	cmp	r3, r1
2401b5b8:	dba3      	blt.n	2401b502 <tract_reshape+0x42>
2401b5ba:	e7db      	b.n	2401b574 <tract_reshape+0xb4>
        tmp = current - amt_down;
2401b5bc:	ee37 7a45 	vsub.f32	s14, s14, s10
        return MAX(tmp, target);
2401b5c0:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
2401b5c4:	e7e6      	b.n	2401b594 <tract_reshape+0xd4>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
2401b5c6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
2401b5ca:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
2401b5ce:	ee05 3a10 	vmov	s10, r3
2401b5d2:	ee24 5a85 	vmul.f32	s10, s9, s10
2401b5d6:	e7cd      	b.n	2401b574 <tract_reshape+0xb4>

2401b5d8 <tract_addTurbulenceNoiseAtPosition>:
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
2401b5d8:	f245 13ec 	movw	r3, #20972	; 0x51ec
2401b5dc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
	int i = (int)floorf(position);
2401b5e0:	fefb 7a60 	vrintm.f32	s15, s1
2401b5e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
2401b5e8:	f6c3 53b8 	movt	r3, #15800	; 0x3db8
	_tract* tr = *t;
2401b5ec:	6801      	ldr	r1, [r0, #0]
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
2401b5ee:	ee07 3a10 	vmov	s14, r3
	int i = (int)floorf(position);
2401b5f2:	ee17 2a90 	vmov	r2, s15
    if (val < min)
2401b5f6:	2300      	movs	r3, #0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
2401b5f8:	ee37 7a41 	vsub.f32	s14, s14, s2
2401b5fc:	ee27 7a26 	vmul.f32	s14, s14, s13
2401b600:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
2401b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b608:	d46e      	bmi.n	2401b6e8 <tract_addTurbulenceNoiseAtPosition+0x110>
    else if (val > max)
2401b60a:	f645 4328 	movw	r3, #23592	; 0x5c28
	Lfloat delta = position - i;
2401b60e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
2401b612:	f6cb 530f 	movt	r3, #48399	; 0xbd0f
2401b616:	ee70 6ac6 	vsub.f32	s13, s1, s12
2401b61a:	ee07 3a90 	vmov	s15, r3
2401b61e:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401b622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b626:	d455      	bmi.n	2401b6d4 <tract_addTurbulenceNoiseAtPosition+0xfc>
        return val;
2401b628:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
2401b62c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401b630:	ee20 0a25 	vmul.f32	s0, s0, s11
2401b634:	ee77 0ae0 	vsub.f32	s1, s15, s1
2401b638:	ee20 0a07 	vmul.f32	s0, s0, s14
2401b63c:	ee70 7a86 	vadd.f32	s15, s1, s12
2401b640:	ee26 7a80 	vmul.f32	s14, s13, s0
2401b644:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
2401b648:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
    if (val < min)
2401b64c:	2300      	movs	r3, #0
2401b64e:	ee61 6a26 	vmul.f32	s13, s2, s13
2401b652:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401b656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b65a:	d440      	bmi.n	2401b6de <tract_addTurbulenceNoiseAtPosition+0x106>
    else if (val > max)
2401b65c:	f648 0389 	movw	r3, #34953	; 0x8889
2401b660:	f6c3 5308 	movt	r3, #15624	; 0x3d08
2401b664:	ee06 3a10 	vmov	s12, r3
2401b668:	eeb4 1ac6 	vcmpe.f32	s2, s12
2401b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b670:	dc03      	bgt.n	2401b67a <tract_addTurbulenceNoiseAtPosition+0xa2>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
2401b672:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
2401b676:	ee27 7a26 	vmul.f32	s14, s14, s13
	if ((i + 1) < tr->n) {
2401b67a:	684b      	ldr	r3, [r1, #4]
2401b67c:	1c50      	adds	r0, r2, #1
2401b67e:	4298      	cmp	r0, r3
2401b680:	da12      	bge.n	2401b6a8 <tract_addTurbulenceNoiseAtPosition+0xd0>
		tr->R[i + 1] += noise0;
2401b682:	6a4b      	ldr	r3, [r1, #36]	; 0x24
2401b684:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401b688:	edd3 6a00 	vldr	s13, [r3]
2401b68c:	ee76 6aa7 	vadd.f32	s13, s13, s15
2401b690:	edc3 6a00 	vstr	s13, [r3]
		tr->L[i + 1] += noise0;
2401b694:	6a8b      	ldr	r3, [r1, #40]	; 0x28
2401b696:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401b69a:	edd3 6a00 	vldr	s13, [r3]
2401b69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401b6a2:	edc3 7a00 	vstr	s15, [r3]
	if ((i + 2) < tr->n) {
2401b6a6:	684b      	ldr	r3, [r1, #4]
2401b6a8:	3202      	adds	r2, #2
2401b6aa:	429a      	cmp	r2, r3
2401b6ac:	da11      	bge.n	2401b6d2 <tract_addTurbulenceNoiseAtPosition+0xfa>
		tr->R[i + 2] += noise1;
2401b6ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
2401b6b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401b6b4:	edd3 7a00 	vldr	s15, [r3]
2401b6b8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401b6bc:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
2401b6c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
2401b6c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401b6c6:	edd3 7a00 	vldr	s15, [r3]
2401b6ca:	ee77 7a87 	vadd.f32	s15, s15, s14
2401b6ce:	edc3 7a00 	vstr	s15, [r3]
 }
2401b6d2:	4770      	bx	lr
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
2401b6d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401b6d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
2401b6dc:	e7aa      	b.n	2401b634 <tract_addTurbulenceNoiseAtPosition+0x5c>
2401b6de:	ee07 3a10 	vmov	s14, r3
2401b6e2:	ee07 3a90 	vmov	s15, r3
2401b6e6:	e7c8      	b.n	2401b67a <tract_addTurbulenceNoiseAtPosition+0xa2>
2401b6e8:	ee07 3a90 	vmov	s15, r3
2401b6ec:	ee07 3a10 	vmov	s14, r3
2401b6f0:	e7aa      	b.n	2401b648 <tract_addTurbulenceNoiseAtPosition+0x70>
2401b6f2:	bf00      	nop

2401b6f4 <tract_compute>:
{
2401b6f4:	b530      	push	{r4, r5, lr}
2401b6f6:	ed2d 8b06 	vpush	{d8-d10}
	_tract* tr = *t;
2401b6fa:	6804      	ldr	r4, [r0, #0]
    Lfloat oneMinusLambda = 1.0f - lambda;
2401b6fc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
{
2401b700:	b083      	sub	sp, #12
2401b702:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
2401b706:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
{
2401b70a:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat oneMinusLambda = 1.0f - lambda;
2401b70e:	ee38 9ae0 	vsub.f32	s18, s17, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
2401b712:	4628      	mov	r0, r5
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2401b714:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
2401b718:	f7fc faea 	bl	24017cf0 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
2401b71c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
2401b720:	f7f8 fac2 	bl	24013ca8 <tSVF_tick>
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
2401b724:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
2401b728:	f247 5386 	movw	r3, #30086	; 0x7586
2401b72c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
2401b730:	ee78 7ac7 	vsub.f32	s15, s17, s14
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
2401b734:	4628      	mov	r0, r5
2401b736:	f6c3 4321 	movt	r3, #15393	; 0x3c21
2401b73a:	edd4 aa10 	vldr	s21, [r4, #64]	; 0x40
	_tract* tr = *t;
2401b73e:	9401      	str	r4, [sp, #4]
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
2401b740:	ee67 7aa9 	vmul.f32	s15, s15, s19
2401b744:	ee05 3a90 	vmov	s11, r3
2401b748:	f64d 1327 	movw	r3, #55591	; 0xd927
2401b74c:	eee7 7a00 	vfma.f32	s15, s14, s0
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
2401b750:	f6c3 6328 	movt	r3, #15912	; 0x3e28
2401b754:	ee07 3a10 	vmov	s14, r3
    i = 0x5f3759df - (i>>1); // gives initial guess y0
2401b758:	f645 13df 	movw	r3, #23007	; 0x59df
2401b75c:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
2401b760:	ee27 6aa7 	vmul.f32	s12, s15, s15
2401b764:	eea6 7a25 	vfma.f32	s14, s12, s11
2401b768:	ee27 6a86 	vmul.f32	s12, s15, s12
2401b76c:	eee7 7a06 	vfma.f32	s15, s14, s12
    Lfloat den = InvSqrt(1.0f + a * a);
2401b770:	eee7 8aa7 	vfma.f32	s17, s15, s15
    x = *(Lfloat*)&i; // convert bits back to float
2401b774:	ee18 2a90 	vmov	r2, s17
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2401b778:	ee68 6aa6 	vmul.f32	s13, s17, s13
    x = *(Lfloat*)&i; // convert bits back to float
2401b77c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
2401b780:	ee07 3a10 	vmov	s14, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
2401b784:	ee67 6a66 	vnmul.f32	s13, s14, s13
2401b788:	ee67 8a87 	vmul.f32	s17, s15, s14
2401b78c:	eea6 aa87 	vfma.f32	s20, s13, s14
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
2401b790:	f7fc faae 	bl	24017cf0 <tNoise_tick>
2401b794:	f64c 43cd 	movw	r3, #52429	; 0xcccd
2401b798:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
2401b79c:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
2401b7a0:	ee09 3a90 	vmov	s19, r3
2401b7a4:	ee20 0a29 	vmul.f32	s0, s0, s19
2401b7a8:	f7f8 fa7e 	bl	24013ca8 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
2401b7ac:	ed94 1a36 	vldr	s2, [r4, #216]	; 0xd8
2401b7b0:	edd4 0a34 	vldr	s1, [r4, #208]	; 0xd0
2401b7b4:	ee20 0a2a 	vmul.f32	s0, s0, s21
2401b7b8:	a801      	add	r0, sp, #4
2401b7ba:	f7ff ff0d 	bl	2401b5d8 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
2401b7be:	9d01      	ldr	r5, [sp, #4]
2401b7c0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
2401b7c4:	edd5 aa10 	vldr	s21, [r5, #64]	; 0x40
2401b7c8:	f7fc fa92 	bl	24017cf0 <tNoise_tick>
2401b7cc:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
2401b7d0:	ee20 0a29 	vmul.f32	s0, s0, s19
2401b7d4:	f7f8 fa68 	bl	24013ca8 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
2401b7d8:	ed95 1a37 	vldr	s2, [r5, #220]	; 0xdc
2401b7dc:	ee2a 0a80 	vmul.f32	s0, s21, s0
2401b7e0:	edd5 0a35 	vldr	s1, [r5, #212]	; 0xd4
2401b7e4:	a801      	add	r0, sp, #4
2401b7e6:	f7ff fef7 	bl	2401b5d8 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
2401b7ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2401b7ec:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
2401b7f0:	edd3 7a00 	vldr	s15, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
2401b7f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
2401b7f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2401b7fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
2401b7fe:	f6c3 73ff 	movt	r3, #16383	; 0x3fff
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
2401b802:	eee8 7a8a 	vfma.f32	s15, s17, s20
2401b806:	edc2 7a00 	vstr	s15, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
2401b80a:	6862      	ldr	r2, [r4, #4]
2401b80c:	6a61      	ldr	r1, [r4, #36]	; 0x24
2401b80e:	4413      	add	r3, r2
2401b810:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
2401b814:	6b62      	ldr	r2, [r4, #52]	; 0x34
2401b816:	eb01 0183 	add.w	r1, r1, r3, lsl #2
2401b81a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401b81e:	edd1 7a00 	vldr	s15, [r1]
2401b822:	ee67 7a87 	vmul.f32	s15, s15, s14
2401b826:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
2401b82a:	6863      	ldr	r3, [r4, #4]
2401b82c:	2b01      	cmp	r3, #1
2401b82e:	dd2f      	ble.n	2401b890 <tract_compute+0x19c>
2401b830:	2304      	movs	r3, #4
2401b832:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
2401b836:	6b25      	ldr	r5, [r4, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
2401b838:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
2401b83c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
2401b83e:	eb05 0e03 	add.w	lr, r5, r3
2401b842:	4418      	add	r0, r3
2401b844:	edde 7a00 	vldr	s15, [lr]
2401b848:	ed90 6a00 	vldr	s12, [r0]
2401b84c:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
2401b850:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
2401b854:	eee6 7a09 	vfma.f32	s15, s12, s18
        w = r * (tr->R[i - 1] + tr->L[i]);
2401b858:	4419      	add	r1, r3
2401b85a:	441a      	add	r2, r3
2401b85c:	ed51 6a01 	vldr	s13, [r1, #-4]
2401b860:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
2401b864:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        w = r * (tr->R[i - 1] + tr->L[i]);
2401b866:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
2401b86a:	441a      	add	r2, r3
2401b86c:	eee7 6a67 	vfms.f32	s13, s14, s15
2401b870:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
2401b874:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2401b876:	6b62      	ldr	r2, [r4, #52]	; 0x34
2401b878:	4419      	add	r1, r3
2401b87a:	441a      	add	r2, r3
2401b87c:	3304      	adds	r3, #4
2401b87e:	edd1 6a00 	vldr	s13, [r1]
2401b882:	eee7 6a27 	vfma.f32	s13, s14, s15
2401b886:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
2401b88a:	6862      	ldr	r2, [r4, #4]
2401b88c:	4562      	cmp	r2, ip
2401b88e:	dcd2      	bgt.n	2401b836 <tract_compute+0x142>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
2401b890:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401b894:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2401b896:	6a62      	ldr	r2, [r4, #36]	; 0x24
2401b898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401b89c:	f6c3 73ff 	movt	r3, #16383	; 0x3fff
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
2401b8a0:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
2401b8a4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
2401b8a8:	440b      	add	r3, r1
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
2401b8aa:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
2401b8ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
2401b8b0:	009b      	lsls	r3, r3, #2
2401b8b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
2401b8b4:	eea7 7a89 	vfma.f32	s14, s15, s18
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
2401b8b8:	441a      	add	r2, r3
2401b8ba:	ed92 6a00 	vldr	s12, [r2]
2401b8be:	1d1a      	adds	r2, r3, #4
2401b8c0:	4410      	add	r0, r2
2401b8c2:	4411      	add	r1, r2
2401b8c4:	ee77 5a26 	vadd.f32	s11, s14, s13
2401b8c8:	edd0 7a00 	vldr	s15, [r0]
2401b8cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
2401b8ce:	ed90 5a00 	vldr	s10, [r0]
2401b8d2:	ee77 7a85 	vadd.f32	s15, s15, s10
2401b8d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401b8da:	eee6 7a07 	vfma.f32	s15, s12, s14
2401b8de:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
2401b8e2:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
2401b8e6:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
2401b8ea:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
2401b8ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
2401b8f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
2401b8f2:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
2401b8f4:	eea7 7a89 	vfma.f32	s14, s15, s18
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
2401b8f8:	4419      	add	r1, r3
2401b8fa:	ed90 6a00 	vldr	s12, [r0]
2401b8fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
2401b900:	edd1 7a00 	vldr	s15, [r1]
2401b904:	ed90 5a00 	vldr	s10, [r0]
2401b908:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2401b90a:	ee77 5a26 	vadd.f32	s11, s14, s13
2401b90e:	ee77 7a85 	vadd.f32	s15, s15, s10
2401b912:	4411      	add	r1, r2
2401b914:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401b918:	eee6 7a07 	vfma.f32	s15, s12, s14
2401b91c:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
2401b920:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
2401b924:	6e61      	ldr	r1, [r4, #100]	; 0x64
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
2401b926:	ee28 7a07 	vmul.f32	s14, s16, s14
2401b92a:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
2401b92e:	ed91 6a00 	vldr	s12, [r1]
2401b932:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
2401b934:	eea7 7a89 	vfma.f32	s14, s15, s18
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
2401b938:	6f20      	ldr	r0, [r4, #112]	; 0x70
2401b93a:	4411      	add	r1, r2
2401b93c:	6a62      	ldr	r2, [r4, #36]	; 0x24
2401b93e:	441a      	add	r2, r3
2401b940:	edd1 7a00 	vldr	s15, [r1]
2401b944:	edd2 5a00 	vldr	s11, [r2]
2401b948:	ee77 6a26 	vadd.f32	s13, s14, s13
2401b94c:	ee77 7aa5 	vadd.f32	s15, s15, s11
2401b950:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401b954:	eee6 7a07 	vfma.f32	s15, s12, s14
2401b958:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
2401b95c:	6863      	ldr	r3, [r4, #4]
2401b95e:	2b00      	cmp	r3, #0
2401b960:	dd21      	ble.n	2401b9a6 <tract_compute+0x2b2>
        tr->R[i] = (tr->junction_outR[i]*0.999f);
2401b962:	f64b 6277 	movw	r2, #48759	; 0xbe77
    for(i = 0; i < tr->n; i++) {
2401b966:	2300      	movs	r3, #0
        tr->R[i] = (tr->junction_outR[i]*0.999f);
2401b968:	f6c3 727f 	movt	r2, #16255	; 0x3f7f
    for(i = 0; i < tr->n; i++) {
2401b96c:	4618      	mov	r0, r3
        tr->R[i] = (tr->junction_outR[i]*0.999f);
2401b96e:	ee07 2a10 	vmov	s14, r2
2401b972:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2401b974:	469c      	mov	ip, r3
2401b976:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(i = 0; i < tr->n; i++) {
2401b978:	3001      	adds	r0, #1
        tr->R[i] = (tr->junction_outR[i]*0.999f);
2401b97a:	4419      	add	r1, r3
2401b97c:	441a      	add	r2, r3
2401b97e:	3304      	adds	r3, #4
2401b980:	edd1 7a00 	vldr	s15, [r1]
2401b984:	ee67 7a87 	vmul.f32	s15, s15, s14
2401b988:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = (tr->junction_outL[i + 1]*0.999f);
2401b98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
2401b98e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2401b990:	4419      	add	r1, r3
2401b992:	4462      	add	r2, ip
2401b994:	edd1 7a00 	vldr	s15, [r1]
2401b998:	ee67 7a87 	vmul.f32	s15, s15, s14
2401b99c:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
2401b9a0:	6862      	ldr	r2, [r4, #4]
2401b9a2:	4282      	cmp	r2, r0
2401b9a4:	dce5      	bgt.n	2401b972 <tract_compute+0x27e>
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
2401b9a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2401b9a8:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
2401b9ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
2401b9b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
2401b9b4:	edd2 7a00 	vldr	s15, [r2]
2401b9b8:	fec7 7ae6 	vminnm.f32	s15, s15, s13
2401b9bc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
2401b9c0:	edc2 7a00 	vstr	s15, [r2]
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
2401b9c4:	6861      	ldr	r1, [r4, #4]
2401b9c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2401b9c8:	4419      	add	r1, r3
2401b9ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401b9ce:	edd2 7a00 	vldr	s15, [r2]
2401b9d2:	fec7 7ae6 	vminnm.f32	s15, s15, s13
2401b9d6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
2401b9da:	edc2 7a00 	vstr	s15, [r2]
    tr->lip_output = tr->R[tr->n - 1];
2401b9de:	6862      	ldr	r2, [r4, #4]
2401b9e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
2401b9e2:	1898      	adds	r0, r3, r2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
2401b9e4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
2401b9e6:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
    tr->lip_output = tr->R[tr->n - 1];
2401b9ea:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
2401b9ee:	442b      	add	r3, r5
    tr->nose_junc_outL[tr->nose_length] =
2401b9f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    tr->lip_output = tr->R[tr->n - 1];
2401b9f2:	6809      	ldr	r1, [r1, #0]
    tr->nose_junc_outL[tr->nose_length] =
2401b9f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
2401b9f8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
2401b9fc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
2401b9fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
2401ba02:	edd1 7a00 	vldr	s15, [r1]
2401ba06:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
2401ba0a:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->nose_length; i++) {
2401ba0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2401ba10:	2a01      	cmp	r2, #1
2401ba12:	dd27      	ble.n	2401ba64 <tract_compute+0x370>
2401ba14:	2304      	movs	r3, #4
2401ba16:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401ba1a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    for(i = 1; i < tr->nose_length; i++) {
2401ba1c:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401ba20:	6ea5      	ldr	r5, [r4, #104]	; 0x68
2401ba22:	4418      	add	r0, r3
2401ba24:	eb05 0e03 	add.w	lr, r5, r3
2401ba28:	edd0 7a00 	vldr	s15, [r0]
2401ba2c:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
2401ba30:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401ba34:	ee77 7a27 	vadd.f32	s15, s14, s15
2401ba38:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
2401ba3a:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401ba3c:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
2401ba40:	eea6 7ae7 	vfms.f32	s14, s13, s15
2401ba44:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
2401ba48:	6e61      	ldr	r1, [r4, #100]	; 0x64
2401ba4a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
2401ba4c:	4419      	add	r1, r3
2401ba4e:	441a      	add	r2, r3
2401ba50:	3304      	adds	r3, #4
2401ba52:	ed91 7a00 	vldr	s14, [r1]
2401ba56:	eea6 7aa7 	vfma.f32	s14, s13, s15
2401ba5a:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
2401ba5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2401ba60:	4562      	cmp	r2, ip
2401ba62:	dcda      	bgt.n	2401ba1a <tract_compute+0x326>
    for(i = 0; i < tr->nose_length; i++) {
2401ba64:	2a00      	cmp	r2, #0
2401ba66:	dd13      	ble.n	2401ba90 <tract_compute+0x39c>
2401ba68:	2300      	movs	r3, #0
2401ba6a:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
2401ba6c:	6f21      	ldr	r1, [r4, #112]	; 0x70
2401ba6e:	469c      	mov	ip, r3
2401ba70:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    for(i = 0; i < tr->nose_length; i++) {
2401ba72:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
2401ba74:	4419      	add	r1, r3
2401ba76:	441a      	add	r2, r3
2401ba78:	3304      	adds	r3, #4
2401ba7a:	6809      	ldr	r1, [r1, #0]
2401ba7c:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
2401ba7e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
2401ba80:	6e62      	ldr	r2, [r4, #100]	; 0x64
2401ba82:	4419      	add	r1, r3
2401ba84:	4462      	add	r2, ip
2401ba86:	6809      	ldr	r1, [r1, #0]
2401ba88:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
2401ba8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2401ba8c:	4282      	cmp	r2, r0
2401ba8e:	dced      	bgt.n	2401ba6c <tract_compute+0x378>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
2401ba90:	6ea3      	ldr	r3, [r4, #104]	; 0x68
2401ba92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401ba96:	f853 3c04 	ldr.w	r3, [r3, #-4]
2401ba9a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
}
2401ba9e:	b003      	add	sp, #12
2401baa0:	ecbd 8b06 	vpop	{d8-d10}
2401baa4:	bd30      	pop	{r4, r5, pc}
2401baa6:	bf00      	nop

2401baa8 <tract_calculate_nose_reflections>:
	_tract* tr = *t;
2401baa8:	6803      	ldr	r3, [r0, #0]
    for(i = 0; i < tr->nose_length; i++) {
2401baaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2401baac:	2a00      	cmp	r2, #0
2401baae:	dd58      	ble.n	2401bb62 <tract_calculate_nose_reflections+0xba>
2401bab0:	2200      	movs	r2, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
2401bab2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
2401bab6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401baba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
2401babe:	3201      	adds	r2, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
2401bac0:	edd0 7a00 	vldr	s15, [r0]
2401bac4:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401bac8:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
2401bacc:	6c99      	ldr	r1, [r3, #72]	; 0x48
2401bace:	4291      	cmp	r1, r2
2401bad0:	dcef      	bgt.n	2401bab2 <tract_calculate_nose_reflections+0xa>
    for(i = 1; i < tr->nose_length; i++) {
2401bad2:	2901      	cmp	r1, #1
2401bad4:	dd45      	ble.n	2401bb62 <tract_calculate_nose_reflections+0xba>
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401bad6:	f241 216f 	movw	r1, #4719	; 0x126f
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bada:	2200      	movs	r2, #0
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401badc:	468c      	mov	ip, r1
    for(i = 1; i < tr->nose_length; i++) {
2401bade:	4610      	mov	r0, r2
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401bae0:	f6cb 2183 	movt	r1, #47747	; 0xba83
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bae4:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401bae8:	f6c3 2c83 	movt	ip, #14979	; 0x3a83
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401baec:	ee05 2a90 	vmov	s11, r2
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401baf0:	ee05 1a10 	vmov	s10, r1
2401baf4:	ee04 ca90 	vmov	s9, ip
    for(i = 1; i < tr->nose_length; i++) {
2401baf8:	2201      	movs	r2, #1
{
2401bafa:	b500      	push	{lr}
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
2401bafc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
2401bafe:	ea4f 0c82 	mov.w	ip, r2, lsl #2
2401bb02:	eb01 0e00 	add.w	lr, r1, r0
2401bb06:	eb01 0182 	add.w	r1, r1, r2, lsl #2
2401bb0a:	ed9e 7a00 	vldr	s14, [lr]
2401bb0e:	edd1 7a00 	vldr	s15, [r1]
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb12:	ee37 6a67 	vsub.f32	s12, s14, s15
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
2401bb16:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb1a:	ee66 6a25 	vmul.f32	s13, s12, s11
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
2401bb1e:	eef4 7a45 	vcmp.f32	s15, s10
2401bb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bb26:	db0f      	blt.n	2401bb48 <tract_calculate_nose_reflections+0xa0>
2401bb28:	eef4 7a64 	vcmp.f32	s15, s9
2401bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bb30:	d80a      	bhi.n	2401bb48 <tract_calculate_nose_reflections+0xa0>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb32:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
2401bb34:	3201      	adds	r2, #1
2401bb36:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb38:	4461      	add	r1, ip
2401bb3a:	edc1 6a00 	vstr	s13, [r1]
    for(i = 1; i < tr->nose_length; i++) {
2401bb3e:	6c99      	ldr	r1, [r3, #72]	; 0x48
2401bb40:	428a      	cmp	r2, r1
2401bb42:	dbdb      	blt.n	2401bafc <tract_calculate_nose_reflections+0x54>
}
2401bb44:	f85d fb04 	ldr.w	pc, [sp], #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb48:	ee86 7a27 	vdiv.f32	s14, s12, s15
2401bb4c:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
2401bb4e:	3201      	adds	r2, #1
2401bb50:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
2401bb52:	4461      	add	r1, ip
2401bb54:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
2401bb58:	6c99      	ldr	r1, [r3, #72]	; 0x48
2401bb5a:	4291      	cmp	r1, r2
2401bb5c:	dcce      	bgt.n	2401bafc <tract_calculate_nose_reflections+0x54>
}
2401bb5e:	f85d fb04 	ldr.w	pc, [sp], #4
2401bb62:	4770      	bx	lr

2401bb64 <tract_initToPool>:
{
2401bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401bb68:	460c      	mov	r4, r1
2401bb6a:	4605      	mov	r5, r0
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401bb6c:	20e8      	movs	r0, #232	; 0xe8
{
2401bb6e:	4617      	mov	r7, r2
    tr->velum_target = 0.01f;
2401bb70:	f24d 760a 	movw	r6, #55050	; 0xd70a
{
2401bb74:	ed2d 8b02 	vpush	{d8}
2401bb78:	b084      	sub	sp, #16
	_tMempool* m = *mp;
2401bb7a:	6819      	ldr	r1, [r3, #0]
{
2401bb7c:	ee08 4a10 	vmov	s16, r4
    tr->velum_target = 0.01f;
2401bb80:	f6c3 4623 	movt	r6, #15395	; 0x3c23
	_tMempool* m = *mp;
2401bb84:	9102      	str	r1, [sp, #8]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401bb86:	f7fb fa4f 	bl	24017028 <mpool_calloc>
    tr->nose_length = n*0.636363636363636f; //28
2401bb8a:	f64e 03ba 	movw	r3, #59578	; 0xe8ba
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401bb8e:	6028      	str	r0, [r5, #0]
    Lfloat n = numTractSections;
2401bb90:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->tip_start = n*0.727272727272727f;
2401bb94:	f642 618c 	movw	r1, #11916	; 0x2e8c
    tr->nose_length = n*0.636363636363636f; //28
2401bb98:	f6c3 7322 	movt	r3, #16162	; 0x3f22
    tr->invN = 1.0f / n;
2401bb9c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
2401bba0:	f6c3 713a 	movt	r1, #16186	; 0x3f3a
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401bba4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    tr->nose_length = n*0.636363636363636f; //28
2401bba8:	ee06 3a10 	vmov	s12, r3
	tr->mempool = m;
2401bbac:	9b02      	ldr	r3, [sp, #8]
    tr->tip_start = n*0.727272727272727f;
2401bbae:	ee06 1a90 	vmov	s13, r1
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401bbb2:	ee37 4aa4 	vadd.f32	s8, s15, s9
	tr->mempool = m;
2401bbb6:	6003      	str	r3, [r0, #0]
    tr->blade_start = n*0.227272727272727f;
2401bbb8:	f64b 232f 	movw	r3, #47663	; 0xba2f
    tr->nose_length = n*0.636363636363636f; //28
2401bbbc:	ee27 6a86 	vmul.f32	s12, s15, s12
    tr->lip_reflection = -0.85f;
2401bbc0:	f649 129a 	movw	r2, #39322	; 0x999a
    tr->blade_start = n*0.227272727272727f;
2401bbc4:	f6c3 6368 	movt	r3, #15976	; 0x3e68
    tr->tip_start = n*0.727272727272727f;
2401bbc8:	ee67 6aa6 	vmul.f32	s13, s15, s13
    tr->invN = 1.0f / n;
2401bbcc:	ee84 2aa7 	vdiv.f32	s4, s9, s15
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401bbd0:	4604      	mov	r4, r0
    tr->blade_start = n*0.227272727272727f;
2401bbd2:	ee07 3a10 	vmov	s14, r3
    tr->lip_start = n*0.886363636363636f;
2401bbd6:	f64e 03ba 	movw	r3, #59578	; 0xe8ba
    tr->lip_reflection = -0.85f;
2401bbda:	f6cb 7259 	movt	r2, #48985	; 0xbf59
    tr->last_obstruction = -1;
2401bbde:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    tr->lip_start = n*0.886363636363636f;
2401bbe2:	f6c3 7362 	movt	r3, #16226	; 0x3f62
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bbe6:	00bd      	lsls	r5, r7, #2
	LEAF* leaf = m->leaf;
2401bbe8:	9902      	ldr	r1, [sp, #8]
    tr->velum_target = 0.01f;
2401bbea:	4630      	mov	r0, r6
    tr->nose_length = n*0.636363636363636f; //28
2401bbec:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->lip_start = n*0.886363636363636f;
2401bbf0:	ee05 3a90 	vmov	s11, r3
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401bbf4:	f24a 23e9 	movw	r3, #41705	; 0xa2e9
    tr->tip_start = n*0.727272727272727f;
2401bbf8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->blade_start = n*0.227272727272727f;
2401bbfc:	ee27 7a87 	vmul.f32	s14, s15, s14
	LEAF* leaf = m->leaf;
2401bc00:	684e      	ldr	r6, [r1, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401bc02:	eeb8 5ac6 	vcvt.f32.s32	s10, s12
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401bc06:	f6c3 538b 	movt	r3, #15755	; 0x3d8b
2401bc0a:	eef8 2ae6 	vcvt.f32.s32	s5, s13
    tr->lip_reflection = -0.85f;
2401bc0e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    tr->blade_start = n*0.227272727272727f;
2401bc12:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    tr->last_obstruction = -1;
2401bc16:	f8c4 e0a4 	str.w	lr, [r4, #164]	; 0xa4
    Lfloat invNoseLength = 1.0f / tr->nose_length;
2401bc1a:	ee84 8a85 	vdiv.f32	s16, s9, s10
    tr->nose_length = n*0.636363636363636f; //28
2401bc1e:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
    tr->tip_start = n*0.727272727272727f;
2401bc22:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
    tr->blade_start = n*0.227272727272727f;
2401bc26:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
    tr->TnoiseGain = 1.0f;
2401bc2a:	edc4 4a10 	vstr	s9, [r4, #64]	; 0x40
    tr->AnoiseGain = 1.0f;
2401bc2e:	edc4 4a11 	vstr	s9, [r4, #68]	; 0x44
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401bc32:	ee34 4a45 	vsub.f32	s8, s8, s10
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401bc36:	ee05 3a10 	vmov	s10, r3
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401bc3a:	f642 638c 	movw	r3, #11916	; 0x2e8c
2401bc3e:	eeb8 3ac7 	vcvt.f32.s32	s6, s14
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401bc42:	eee7 2ac5 	vfms.f32	s5, s15, s10
    tr->invN = 1.0f / n;
2401bc46:	ed84 2a02 	vstr	s4, [r4, #8]
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401bc4a:	f6c3 533a 	movt	r3, #15674	; 0x3d3a
    tr->lip_start = n*0.886363636363636f;
2401bc4e:	ee67 5aa5 	vmul.f32	s11, s15, s11
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401bc52:	ee67 3aa3 	vmul.f32	s7, s15, s7
    tr->diameterScale = 1.0f;
2401bc56:	edc4 4a2f 	vstr	s9, [r4, #188]	; 0xbc
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401bc5a:	ee05 3a10 	vmov	s10, r3
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401bc5e:	f246 6366 	movw	r3, #26214	; 0x6666
    tr->glottal_reflection = 0.75f;
2401bc62:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
    tr->velum_target = 0.01f;
2401bc66:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401bc6a:	f6c3 63e6 	movt	r3, #16102	; 0x3ee6
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401bc6e:	eea7 3a85 	vfma.f32	s6, s15, s10
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401bc72:	eebd 4ac4 	vcvt.s32.f32	s8, s8
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401bc76:	edc4 2a17 	vstr	s5, [r4, #92]	; 0x5c
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401bc7a:	ee05 3a10 	vmov	s10, r3
    tr->movement_speed = 200.0f;
2401bc7e:	2300      	movs	r3, #0
    tr->lip_start = n*0.886363636363636f;
2401bc80:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->glottal_reflection = 0.75f;
2401bc84:	edc4 1a27 	vstr	s3, [r4, #156]	; 0x9c
    tr->movement_speed = 200.0f;
2401bc88:	f2c4 3348 	movt	r3, #17224	; 0x4348
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401bc8c:	ee27 5a85 	vmul.f32	s10, s15, s10
	tr->turbuluencePointDiameter[0] = 1.5f;
2401bc90:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401bc94:	ed84 4a13 	vstr	s8, [r4, #76]	; 0x4c
    tr->n = n; //44
2401bc98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    tr->movement_speed = 200.0f;
2401bc9c:	469c      	mov	ip, r3
    tr->reflection_left = 0.0f;
2401bc9e:	2300      	movs	r3, #0
    tr->lip_start = n*0.886363636363636f;
2401bca0:	edc4 5a16 	vstr	s11, [r4, #88]	; 0x58
    tr->movement_speed = 200.0f;
2401bca4:	f8c4 c0ac 	str.w	ip, [r4, #172]	; 0xac
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bca8:	4628      	mov	r0, r5
    tr->n = n; //44
2401bcaa:	edc4 7a01 	vstr	s15, [r4, #4]
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401bcae:	ed84 3a18 	vstr	s6, [r4, #96]	; 0x60
    tr->reflection_left = 0.0f;
2401bcb2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->reflection_right = 0.0f;
2401bcb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->reflection_nose = 0.0f;
2401bcba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
2401bcbe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
2401bcc2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
2401bcc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    tr->lip_output = 0.0f;
2401bcca:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    tr->nose_output = 0.0f;
2401bcce:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    tr->maxNumTractSections = maxNumTractSections;
2401bcd2:	6127      	str	r7, [r4, #16]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bcd4:	1d2f      	adds	r7, r5, #4
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401bcd6:	9403      	str	r4, [sp, #12]
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401bcd8:	ed84 5a34 	vstr	s10, [r4, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401bcdc:	edc4 3a35 	vstr	s7, [r4, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
2401bce0:	edc4 8a36 	vstr	s17, [r4, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
2401bce4:	edc4 8a37 	vstr	s17, [r4, #220]	; 0xdc
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bce8:	f7fb f99e 	bl	24017028 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcec:	9902      	ldr	r1, [sp, #8]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcee:	6160      	str	r0, [r4, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcf0:	4628      	mov	r0, r5
2401bcf2:	f7fb f999 	bl	24017028 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcf6:	9902      	ldr	r1, [sp, #8]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcf8:	61a0      	str	r0, [r4, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bcfa:	4628      	mov	r0, r5
2401bcfc:	f7fb f994 	bl	24017028 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd00:	9902      	ldr	r1, [sp, #8]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd02:	61e0      	str	r0, [r4, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd04:	4628      	mov	r0, r5
2401bd06:	f7fb f98f 	bl	24017028 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd0a:	9902      	ldr	r1, [sp, #8]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd0c:	6220      	str	r0, [r4, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd0e:	4628      	mov	r0, r5
2401bd10:	f7fb f98a 	bl	24017028 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd14:	9902      	ldr	r1, [sp, #8]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd16:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd18:	4628      	mov	r0, r5
2401bd1a:	f7fb f985 	bl	24017028 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd1e:	9902      	ldr	r1, [sp, #8]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd20:	6260      	str	r0, [r4, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd22:	4638      	mov	r0, r7
2401bd24:	f7fb f980 	bl	24017028 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd28:	9902      	ldr	r1, [sp, #8]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd2a:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd2c:	4638      	mov	r0, r7
2401bd2e:	f7fb f97b 	bl	24017028 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd32:	9902      	ldr	r1, [sp, #8]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd34:	6320      	str	r0, [r4, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd36:	4638      	mov	r0, r7
2401bd38:	f7fb f976 	bl	24017028 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd3c:	9902      	ldr	r1, [sp, #8]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd3e:	6360      	str	r0, [r4, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd40:	4638      	mov	r0, r7
2401bd42:	f7fb f971 	bl	24017028 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd46:	9902      	ldr	r1, [sp, #8]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd48:	63a0      	str	r0, [r4, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd4a:	4628      	mov	r0, r5
2401bd4c:	f7fb f96c 	bl	24017028 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd50:	9902      	ldr	r1, [sp, #8]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd52:	63e0      	str	r0, [r4, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd54:	4628      	mov	r0, r5
2401bd56:	f7fb f967 	bl	24017028 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd5a:	9902      	ldr	r1, [sp, #8]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd5c:	6660      	str	r0, [r4, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd5e:	4628      	mov	r0, r5
2401bd60:	f7fb f962 	bl	24017028 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd64:	9902      	ldr	r1, [sp, #8]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd66:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd68:	4638      	mov	r0, r7
2401bd6a:	f7fb f95d 	bl	24017028 <mpool_calloc>
2401bd6e:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd70:	9902      	ldr	r1, [sp, #8]
2401bd72:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd74:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd76:	f7fb f957 	bl	24017028 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd7a:	9902      	ldr	r1, [sp, #8]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401bd7c:	6720      	str	r0, [r4, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd7e:	4628      	mov	r0, r5
2401bd80:	f7fb f952 	bl	24017028 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd84:	9902      	ldr	r1, [sp, #8]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd86:	67a0      	str	r0, [r4, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd88:	4628      	mov	r0, r5
2401bd8a:	f7fb f94d 	bl	24017028 <mpool_calloc>
2401bd8e:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd90:	9902      	ldr	r1, [sp, #8]
2401bd92:	4628      	mov	r0, r5
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd94:	6763      	str	r3, [r4, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd96:	f7fb f947 	bl	24017028 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
2401bd9a:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401bd9c:	67e0      	str	r0, [r4, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
2401bd9e:	2b00      	cmp	r3, #0
2401bda0:	dd47      	ble.n	2401be32 <tract_initToPool+0x2ce>
            diameter = 0.6f;
2401bda2:	f649 119a 	movw	r1, #39322	; 0x999a
            diameter = 1.5f;
2401bda6:	f64c 40cd 	movw	r0, #52429	; 0xcccd
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401bdaa:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
2401bdae:	2200      	movs	r2, #0
            diameter = 0.6f;
2401bdb0:	f6c3 7119 	movt	r1, #16153	; 0x3f19
            diameter = 1.5f;
2401bdb4:	f6c3 708c 	movt	r0, #16268	; 0x3f8c
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401bdb8:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
2401bdbc:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 0.6f;
2401bdc0:	ee06 1a10 	vmov	s12, r1
            diameter = 1.5f;
2401bdc4:	ee04 0a10 	vmov	s8, r0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401bdc8:	ee07 3a90 	vmov	s15, r3
2401bdcc:	edd4 6a02 	vldr	s13, [r4, #8]
            diameter = 0.6f;
2401bdd0:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401bdd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401bdd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401bddc:	eef0 6a45 	vmov.f32	s13, s10
2401bde0:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
2401bde4:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401bde8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401bdec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
2401bdf0:	ee16 3a90 	vmov	r3, s13
2401bdf4:	429a      	cmp	r2, r3
2401bdf6:	db04      	blt.n	2401be02 <tract_initToPool+0x29e>
            diameter = 1.5f;
2401bdf8:	ee17 3a90 	vmov	r3, s15
2401bdfc:	429a      	cmp	r2, r3
2401bdfe:	fe28 7a84 	vselge.f32	s14, s17, s8
            tr->new_diameter[i] = diameter;
2401be02:	6a23      	ldr	r3, [r4, #32]
2401be04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401be08:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
2401be0c:	69e3      	ldr	r3, [r4, #28]
2401be0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401be12:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
2401be16:	69a3      	ldr	r3, [r4, #24]
2401be18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401be1c:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
2401be20:	6963      	ldr	r3, [r4, #20]
2401be22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
2401be26:	3201      	adds	r2, #1
        tr->diameter[i] =
2401be28:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
2401be2c:	6863      	ldr	r3, [r4, #4]
2401be2e:	429a      	cmp	r2, r3
2401be30:	dbca      	blt.n	2401bdc8 <tract_initToPool+0x264>
	for(i = 0; i < tr->nose_length; i++) {
2401be32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2401be34:	2b00      	cmp	r3, #0
2401be36:	dd3a      	ble.n	2401beae <tract_initToPool+0x34a>
			diameter = 0.4f + 1.6f * d;
2401be38:	f64c 41cd 	movw	r1, #52429	; 0xcccd
		diameter = MIN(diameter, 1.9f);
2401be3c:	f243 3033 	movw	r0, #13107	; 0x3333
		if(d < 1.0f) {
2401be40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
2401be44:	2300      	movs	r3, #0
			diameter = 0.4f + 1.6f * d;
2401be46:	460a      	mov	r2, r1
		diameter = MIN(diameter, 1.9f);
2401be48:	f6c3 70f3 	movt	r0, #16371	; 0x3ff3
			diameter = 0.4f + 1.6f * d;
2401be4c:	f6c3 71cc 	movt	r1, #16332	; 0x3fcc
			diameter = 0.5f + 1.5f*(2.0f-d);
2401be50:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
			diameter = 0.4f + 1.6f * d;
2401be54:	f6c3 62cc 	movt	r2, #16076	; 0x3ecc
			diameter = 0.5f + 1.5f*(2.0f-d);
2401be58:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
		diameter = MIN(diameter, 1.9f);
2401be5c:	ee04 0a10 	vmov	s8, r0
			diameter = 0.4f + 1.6f * d;
2401be60:	ee04 1a90 	vmov	s9, r1
2401be64:	ee05 2a10 	vmov	s10, r2
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401be68:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
2401be6c:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
2401be70:	6fa2      	ldr	r2, [r4, #120]	; 0x78
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401be72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401be76:	ee67 7a88 	vmul.f32	s15, s15, s16
2401be7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
2401be7e:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
2401be82:	eef0 7a46 	vmov.f32	s15, s12
2401be86:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
2401be8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
2401be8e:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
2401be92:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
2401be96:	f140 8097 	bpl.w	2401bfc8 <tract_initToPool+0x464>
		tr->nose_diameter[i] = diameter;
2401be9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
2401be9e:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
2401bea2:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
2401bea4:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
2401bea8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2401beaa:	429a      	cmp	r2, r3
2401beac:	dcdc      	bgt.n	2401be68 <tract_initToPool+0x304>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
2401beae:	f243 3333 	movw	r3, #13107	; 0x3333
2401beb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
2401beb6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
2401beba:	2102      	movs	r1, #2
2401bebc:	f6c3 7333 	movt	r3, #16179	; 0x3f33
2401bec0:	f2c4 427c 	movt	r2, #17532	; 0x447c
        tr->tpool->pool[i]->is_free = 1;
2401bec4:	2701      	movs	r7, #1
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
2401bec6:	ee00 3a90 	vmov	s1, r3
2401beca:	ee00 2a10 	vmov	s0, r2
2401bece:	aa02      	add	r2, sp, #8
2401bed0:	9301      	str	r3, [sp, #4]
2401bed2:	f7f7 fe41 	bl	24013b58 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
2401bed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2401beda:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
2401bede:	eddd 0a01 	vldr	s1, [sp, #4]
2401bee2:	f2c4 4377 	movt	r3, #17527	; 0x4477
2401bee6:	aa02      	add	r2, sp, #8
2401bee8:	2102      	movs	r1, #2
2401beea:	ee00 3a10 	vmov	s0, r3
2401beee:	f7f7 fe33 	bl	24013b58 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
2401bef2:	2300      	movs	r3, #0
2401bef4:	eddd 0a01 	vldr	s1, [sp, #4]
2401bef8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
2401befc:	f2c4 33fa 	movt	r3, #17402	; 0x43fa
2401bf00:	2102      	movs	r1, #2
2401bf02:	aa02      	add	r2, sp, #8
2401bf04:	ee00 3a10 	vmov	s0, r3
2401bf08:	f7f7 fe26 	bl	24013b58 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
2401bf0c:	aa02      	add	r2, sp, #8
2401bf0e:	2100      	movs	r1, #0
2401bf10:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
2401bf14:	f7fb fed8 	bl	24017cc8 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
2401bf18:	a803      	add	r0, sp, #12
2401bf1a:	f7ff f887 	bl	2401b02c <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
2401bf1e:	a803      	add	r0, sp, #12
2401bf20:	f7ff fdc2 	bl	2401baa8 <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
2401bf24:	9d03      	ldr	r5, [sp, #12]
    tr->block_time = 64.0f / leaf->sampleRate;
2401bf26:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
    tr->T = 1.0f / leaf->sampleRate;
2401bf2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
2401bf2e:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    tr->tpool->size = 0;
2401bf32:	2400      	movs	r4, #0
    tr->nose_diameter[0] = tr->velum_target;
2401bf34:	6faa      	ldr	r2, [r5, #120]	; 0x78
    tr->block_time = 64.0f / leaf->sampleRate;
2401bf36:	ee07 3a90 	vmov	s15, r3
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401bf3a:	201c      	movs	r0, #28
    tr->nose_diameter[0] = tr->velum_target;
2401bf3c:	6011      	str	r1, [r2, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
2401bf3e:	ed96 6a00 	vldr	s12, [r6]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401bf42:	9902      	ldr	r1, [sp, #8]
    tr->block_time = 64.0f / leaf->sampleRate;
2401bf44:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401bf48:	ed85 7a2e 	vstr	s14, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
2401bf4c:	ed96 7a00 	vldr	s14, [r6]
        tr->tpool->pool[i]->time_alive = 0;
2401bf50:	4626      	mov	r6, r4
    tr->T = 1.0f / leaf->sampleRate;
2401bf52:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401bf56:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401bf5a:	f7fb f801 	bl	24016f60 <mpool_alloc>
2401bf5e:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    tr->tpool->size = 0;
2401bf62:	6144      	str	r4, [r0, #20]
    tr->tpool->next_free = 0;
2401bf64:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bf68:	619c      	str	r4, [r3, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
2401bf6a:	f8d5 80e0 	ldr.w	r8, [r5, #224]	; 0xe0
2401bf6e:	2020      	movs	r0, #32
2401bf70:	9902      	ldr	r1, [sp, #8]
2401bf72:	f7fa fff5 	bl	24016f60 <mpool_alloc>
2401bf76:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
2401bf7a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        tr->tpool->pool[i]->position = 0;
2401bf7e:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
2401bf80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401bf84:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
2401bf86:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bf8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401bf8e:	619c      	str	r4, [r3, #24]
        tr->tpool->pool[i]->position = 0;
2401bf90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bf94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401bf98:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
2401bf9a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bf9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401bfa2:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
2401bfa4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bfa8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401bfac:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
2401bfae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401bfb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
2401bfb6:	3401      	adds	r4, #1
2401bfb8:	2c04      	cmp	r4, #4
        tr->tpool->pool[i]->exponent = 0;
2401bfba:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
2401bfbc:	d1d5      	bne.n	2401bf6a <tract_initToPool+0x406>
}
2401bfbe:	b004      	add	sp, #16
2401bfc0:	ecbd 8b02 	vpop	{d8}
2401bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
2401bfc8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
2401bfcc:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
2401bfd0:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
2401bfd2:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
2401bfd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2401bfd8:	429a      	cmp	r2, r3
2401bfda:	f73f af45 	bgt.w	2401be68 <tract_initToPool+0x304>
2401bfde:	e766      	b.n	2401beae <tract_initToPool+0x34a>

2401bfe0 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
2401bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
2401bfe2:	699d      	ldr	r5, [r3, #24]
{
2401bfe4:	b085      	sub	sp, #20
2401bfe6:	4607      	mov	r7, r0
2401bfe8:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
2401bfea:	2018      	movs	r0, #24
2401bfec:	4629      	mov	r1, r5
{
2401bfee:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
2401bff0:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
2401bff2:	f7fa ffb5 	bl	24016f60 <mpool_alloc>
2401bff6:	4604      	mov	r4, r0
2401bff8:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401bffa:	4629      	mov	r1, r5
	v->mempool = m;
2401bffc:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401bffe:	203c      	movs	r0, #60	; 0x3c
2401c000:	f7fb f812 	bl	24017028 <mpool_calloc>
2401c004:	6060      	str	r0, [r4, #4]
2401c006:	4603      	mov	r3, r0
	glot->mempool = m;
2401c008:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401c00a:	9003      	str	r0, [sp, #12]
	glot->freq = 140.0f; /* 140Hz frequency by default */
2401c00c:	2000      	movs	r0, #0
	LEAF* leaf = glot->mempool->leaf;
2401c00e:	6869      	ldr	r1, [r5, #4]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401c010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
2401c014:	f2c4 300c 	movt	r0, #17164	; 0x430c
2401c018:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
2401c01a:	f649 109a 	movw	r0, #39322	; 0x999a
2401c01e:	f6c3 7019 	movt	r0, #16153	; 0x3f19
2401c022:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
2401c024:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401c026:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
2401c02a:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401c02c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
2401c030:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401c032:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glottis_setup_waveform(&glot);
2401c036:	f7fe fde1 	bl	2401abfc <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
2401c03a:	ab02      	add	r3, sp, #8
2401c03c:	9a01      	ldr	r2, [sp, #4]
2401c03e:	4631      	mov	r1, r6
2401c040:	f104 0008 	add.w	r0, r4, #8
2401c044:	f7ff fd8e 	bl	2401bb64 <tract_initToPool>
	v->counter = 0;
2401c048:	2300      	movs	r3, #0
2401c04a:	6123      	str	r3, [r4, #16]
}
2401c04c:	b005      	add	sp, #20
2401c04e:	bdf0      	pop	{r4, r5, r6, r7, pc}

2401c050 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
2401c050:	b538      	push	{r3, r4, r5, lr}
2401c052:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
2401c056:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
2401c058:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
2401c05a:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
2401c05e:	b333      	cbz	r3, 2401c0ae <tVoc_tick+0x5e>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401c060:	ee07 3a90 	vmov	s15, r3
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
2401c064:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401c066:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
2401c06a:	f7fe ff17 	bl	2401ae9c <glottis_compute>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401c06e:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000

	tract_compute(&v->tr, glot, lambda1);
2401c072:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
2401c074:	eef0 9a40 	vmov.f32	s19, s0
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401c078:	ee09 3a10 	vmov	s18, r3
	tract_compute(&v->tr, glot, lambda1);
2401c07c:	ee68 0a09 	vmul.f32	s1, s16, s18
2401c080:	f7ff fb38 	bl	2401b6f4 <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
2401c084:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
2401c088:	edd3 8a2c 	vldr	s17, [r3, #176]	; 0xb0
2401c08c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
2401c090:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (v->doubleCompute)
2401c094:	b99a      	cbnz	r2, 2401c0be <tVoc_tick+0x6e>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
2401c096:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
2401c09a:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}

	v->counter = (v->counter + 1) & 63;
2401c09e:	6923      	ldr	r3, [r4, #16]
2401c0a0:	3301      	adds	r3, #1
2401c0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401c0a6:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
2401c0a8:	ecbd 8b04 	vpop	{d8-d9}
2401c0ac:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
2401c0ae:	4628      	mov	r0, r5
2401c0b0:	f7ff fa06 	bl	2401b4c0 <tract_reshape>
		tract_calculate_reflections(&v->tr);
2401c0b4:	4628      	mov	r0, r5
2401c0b6:	f7fe ffb9 	bl	2401b02c <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401c0ba:	6923      	ldr	r3, [r4, #16]
2401c0bc:	e7d0      	b.n	2401c060 <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
2401c0be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		tract_compute(&v->tr, glot, lambda2);
2401c0c2:	4628      	mov	r0, r5
2401c0c4:	eeb0 0a69 	vmov.f32	s0, s19
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
2401c0c8:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
2401c0cc:	ee60 0a89 	vmul.f32	s1, s1, s18
2401c0d0:	f7ff fb10 	bl	2401b6f4 <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
2401c0d4:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.125f;
2401c0d6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		vocal_output += v->tr->lip_output + v->tr->nose_output;
2401c0da:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
2401c0de:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
2401c0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401c0e6:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.125f;
2401c0ea:	ee27 0a87 	vmul.f32	s0, s15, s14
2401c0ee:	e7d6      	b.n	2401c09e <tVoc_tick+0x4e>

2401c0f0 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
2401c0f0:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
2401c0f2:	60d9      	str	r1, [r3, #12]
}
2401c0f4:	4770      	bx	lr
2401c0f6:	bf00      	nop

2401c0f8 <tVoc_setFreq>:
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
2401c0f8:	6803      	ldr	r3, [r0, #0]
2401c0fa:	685b      	ldr	r3, [r3, #4]
2401c0fc:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401c100:	4770      	bx	lr
2401c102:	bf00      	nop

2401c104 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
2401c104:	6800      	ldr	r0, [r0, #0]
2401c106:	3008      	adds	r0, #8
2401c108:	f7ff b852 	b.w	2401b1b0 <tract_newLength>

2401c10c <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
2401c10c:	6803      	ldr	r3, [r0, #0]
2401c10e:	685b      	ldr	r3, [r3, #4]
2401c110:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401c114:	4770      	bx	lr
2401c116:	bf00      	nop

2401c118 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
2401c118:	6803      	ldr	r3, [r0, #0]
2401c11a:	689b      	ldr	r3, [r3, #8]
2401c11c:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
2401c120:	4770      	bx	lr
2401c122:	bf00      	nop

2401c124 <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->TnoiseGain = gain;
2401c124:	6803      	ldr	r3, [r0, #0]
2401c126:	689b      	ldr	r3, [r3, #8]
2401c128:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
2401c12c:	4770      	bx	lr
2401c12e:	bf00      	nop

2401c130 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->AnoiseGain = gain;
2401c130:	6803      	ldr	r3, [r0, #0]
2401c132:	689b      	ldr	r3, [r3, #8]
2401c134:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
2401c138:	4770      	bx	lr
2401c13a:	bf00      	nop

2401c13c <tVoc_setAspirationNoiseFilterFreq>:

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
2401c13c:	2300      	movs	r3, #0
2401c13e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
2401c142:	6802      	ldr	r2, [r0, #0]
2401c144:	f2c4 2370 	movt	r3, #17008	; 0x4270
2401c148:	6890      	ldr	r0, [r2, #8]
2401c14a:	ee07 3a90 	vmov	s15, r3
2401c14e:	30c8      	adds	r0, #200	; 0xc8
2401c150:	eee0 7a07 	vfma.f32	s15, s0, s14
2401c154:	eeb0 0a67 	vmov.f32	s0, s15
2401c158:	f7f7 be7e 	b.w	24013e58 <tSVF_setFreqFast>

2401c15c <tVoc_setAspirationNoiseFilterQ>:
}

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
	_tVoc* v = *voc;
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
2401c15c:	f24e 1348 	movw	r3, #57672	; 0xe148
2401c160:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
2401c164:	6802      	ldr	r2, [r0, #0]
2401c166:	f6c3 63fa 	movt	r3, #16122	; 0x3efa
2401c16a:	6890      	ldr	r0, [r2, #8]
2401c16c:	ee07 3a90 	vmov	s15, r3
2401c170:	30c8      	adds	r0, #200	; 0xc8
2401c172:	eea0 7a27 	vfma.f32	s14, s0, s15
2401c176:	eeb0 0a47 	vmov.f32	s0, s14
2401c17a:	f7f7 beb5 	b.w	24013ee8 <tSVF_setQ>
2401c17e:	bf00      	nop

2401c180 <tVoc_set_tongue_and_touch_diameters>:
}


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
2401c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401c182:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
2401c186:	6805      	ldr	r5, [r0, #0]
{
2401c188:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401c18a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401c18e:	68ab      	ldr	r3, [r5, #8]
{
2401c190:	eef0 8a40 	vmov.f32	s17, s0
2401c194:	eef0 ba41 	vmov.f32	s23, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401c198:	6d5c      	ldr	r4, [r3, #84]	; 0x54
{
2401c19a:	eeb0 ca61 	vmov.f32	s24, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401c19e:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	for (i = 0; i < v->tr->n; i++)
2401c1a0:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401c1a2:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
2401c1a4:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401c1a6:	ee07 2a90 	vmov	s15, r2
2401c1aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c1ae:	ee87 9a27 	vdiv.f32	s18, s14, s15
	for (i = 0; i < v->tr->n; i++)
2401c1b2:	dd0d      	ble.n	2401c1d0 <tVoc_set_tongue_and_touch_diameters+0x50>
2401c1b4:	4630      	mov	r0, r6
2401c1b6:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
2401c1b8:	699b      	ldr	r3, [r3, #24]
2401c1ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
2401c1be:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
2401c1c0:	681b      	ldr	r3, [r3, #0]
2401c1c2:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
2401c1c6:	68ab      	ldr	r3, [r5, #8]
2401c1c8:	6859      	ldr	r1, [r3, #4]
2401c1ca:	4291      	cmp	r1, r2
2401c1cc:	dcf4      	bgt.n	2401c1b8 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401c1ce:	6d5c      	ldr	r4, [r3, #84]	; 0x54
2401c1d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2401c1d2:	42a2      	cmp	r2, r4
2401c1d4:	dd5f      	ble.n	2401c296 <tVoc_set_tongue_and_touch_diameters+0x116>
2401c1d6:	f246 22ef 	movw	r2, #25327	; 0x62ef
2401c1da:	f24a 5361 	movw	r3, #42337	; 0xa561
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
2401c1de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
#ifdef ARM_MATH_CM7
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c1e2:	f64a 20ab 	movw	r0, #43691	; 0xaaab
2401c1e6:	f6c4 5225 	movt	r2, #19749	; 0x4d25
2401c1ea:	f2c4 030b 	movt	r3, #16395	; 0x400b
2401c1ee:	f649 119a 	movw	r1, #39322	; 0x999a
2401c1f2:	f6c3 702a 	movt	r0, #16170	; 0x3f2a
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
2401c1f6:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
2401c1fa:	eb06 0784 	add.w	r7, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c1fe:	f6c3 7199 	movt	r1, #16281	; 0x3f99
2401c202:	ee36 6a60 	vsub.f32	s12, s12, s1
2401c206:	ee06 0a90 	vmov	s13, r0
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
2401c20a:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c20e:	ee08 1a10 	vmov	s16, r1
2401c212:	ec43 2b17 	vmov	d7, r2, r3
			curve *= 0.8f;
2401c216:	f64c 42cd 	movw	r2, #52429	; 0xcccd
			curve *= 0.94f;
2401c21a:	f24a 33d7 	movw	r3, #41943	; 0xa3d7
2401c21e:	ee29 9b07 	vmul.f64	d9, d9, d7
			curve *= 0.8f;
2401c222:	f6c3 724c 	movt	r2, #16204	; 0x3f4c
			curve *= 0.94f;
2401c226:	f6c3 7370 	movt	r3, #16240	; 0x3f70
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c22a:	eea6 8a26 	vfma.f32	s16, s12, s13
			curve *= 0.8f;
2401c22e:	ee0b 2a10 	vmov	s22, r2
			curve *= 0.94f;
2401c232:	ee0a 3a90 	vmov	s21, r3
2401c236:	e00c      	b.n	2401c252 <tVoc_set_tongue_and_touch_diameters+0xd2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
2401c238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401c23a:	3b02      	subs	r3, #2
2401c23c:	42a3      	cmp	r3, r4
2401c23e:	d023      	beq.n	2401c288 <tVoc_set_tongue_and_touch_diameters+0x108>
		theDiameters[i] = 1.5f - curve;
2401c240:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401c244:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
2401c246:	ece7 7a01 	vstmia	r7!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401c24a:	68ab      	ldr	r3, [r5, #8]
2401c24c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2401c24e:	42a2      	cmp	r2, r4
2401c250:	dd20      	ble.n	2401c294 <tVoc_set_tongue_and_touch_diameters+0x114>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
2401c252:	ee07 4a90 	vmov	s15, r4
2401c256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401c25a:	ee38 7ac7 	vsub.f32	s14, s17, s14
2401c25e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401c262:	ee27 7b09 	vmul.f64	d7, d7, d9
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c266:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
2401c26a:	f7e4 faa5 	bl	240007b8 <arm_cos_f32>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
2401c26e:	68ab      	ldr	r3, [r5, #8]
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401c270:	ee28 0a00 	vmul.f32	s0, s16, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
2401c274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2401c276:	1e91      	subs	r1, r2, #2
2401c278:	42a1      	cmp	r1, r4
2401c27a:	d008      	beq.n	2401c28e <tVoc_set_tongue_and_touch_diameters+0x10e>
2401c27c:	6d99      	ldr	r1, [r3, #88]	; 0x58
2401c27e:	3901      	subs	r1, #1
2401c280:	42a1      	cmp	r1, r4
2401c282:	d004      	beq.n	2401c28e <tVoc_set_tongue_and_touch_diameters+0x10e>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
2401c284:	42a2      	cmp	r2, r4
2401c286:	d1d7      	bne.n	2401c238 <tVoc_set_tongue_and_touch_diameters+0xb8>
			curve *= 0.94f;
2401c288:	ee20 0a2a 	vmul.f32	s0, s0, s21
2401c28c:	e7d8      	b.n	2401c240 <tVoc_set_tongue_and_touch_diameters+0xc0>
			curve *= 0.8f;
2401c28e:	ee20 0a0b 	vmul.f32	s0, s0, s22
2401c292:	e7f7      	b.n	2401c284 <tVoc_set_tongue_and_touch_diameters+0x104>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
2401c294:	6859      	ldr	r1, [r3, #4]
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
2401c296:	f247 425d 	movw	r2, #29789	; 0x745d
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
2401c29a:	ee07 1a90 	vmov	s15, r1
2401c29e:	f64b 212f 	movw	r1, #47663	; 0xba2f
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
2401c2a2:	f6c3 7211 	movt	r2, #16145	; 0x3f11
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
2401c2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c2aa:	f6c3 6168 	movt	r1, #15976	; 0x3e68
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
2401c2ae:	ee07 2a10 	vmov	s14, r2
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
2401c2b2:	ee08 1a10 	vmov	s16, r1
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
2401c2b6:	ee27 7a87 	vmul.f32	s14, s15, s14
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
2401c2ba:	ee27 8a88 	vmul.f32	s16, s15, s16
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
2401c2be:	eeb4 7aeb 	vcmpe.f32	s14, s23
2401c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c2c6:	dc12      	bgt.n	2401c2ee <tVoc_set_tongue_and_touch_diameters+0x16e>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
2401c2c8:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
2401c2cc:	f64b 222f 	movw	r2, #47663	; 0xba2f
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
2401c2d0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
2401c2d4:	f6c3 52e8 	movt	r2, #15848	; 0x3de8
2401c2d8:	ee06 2a90 	vmov	s13, r2
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
2401c2dc:	eeb4 6aeb 	vcmpe.f32	s12, s23
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
2401c2e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
2401c2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c2e8:	d85e      	bhi.n	2401c3a8 <tVoc_set_tongue_and_touch_diameters+0x228>
2401c2ea:	eeb0 8a66 	vmov.f32	s16, s13
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
		if ((width <= 0.01f) && (width >= -0.01f))
2401c2ee:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401c2f2:	f6c3 4323 	movt	r3, #15395	; 0x3c23
2401c2f6:	ee07 3a10 	vmov	s14, r3
2401c2fa:	eeb4 8a47 	vcmp.f32	s16, s14
2401c2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c302:	d819      	bhi.n	2401c338 <tVoc_set_tongue_and_touch_diameters+0x1b8>
2401c304:	f24d 730a 	movw	r3, #55050	; 0xd70a
2401c308:	f6cb 4323 	movt	r3, #48163	; 0xbc23
2401c30c:	ee07 3a10 	vmov	s14, r3
2401c310:	eeb4 8ac7 	vcmpe.f32	s16, s14
2401c314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c318:	db0e      	blt.n	2401c338 <tVoc_set_tongue_and_touch_diameters+0x1b8>
		{
			width = 1.0f;
		}
		Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
2401c31a:	eef4 7a6b 	vcmp.f32	s15, s23
2401c31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c322:	dd06      	ble.n	2401c332 <tVoc_set_tongue_and_touch_diameters+0x1b2>
2401c324:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2401c328:	eeb4 cae7 	vcmpe.f32	s24, s15
2401c32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c330:	d445      	bmi.n	2401c3be <tVoc_set_tongue_and_touch_diameters+0x23e>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
2401c332:	ecbd 8b0a 	vpop	{d8-d12}
2401c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
2401c338:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
2401c33c:	eeb4 ca47 	vcmp.f32	s24, s14
2401c340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c344:	d5f5      	bpl.n	2401c332 <tVoc_set_tongue_and_touch_diameters+0x1b2>
2401c346:	eef4 7aeb 	vcmpe.f32	s15, s23
2401c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c34e:	ddf0      	ble.n	2401c332 <tVoc_set_tongue_and_touch_diameters+0x1b2>
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401c350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401c354:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
2401c358:	feb8 7a6b 	vrinta.f32	s14, s23
2401c35c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401c360:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401c364:	ee38 aa26 	vadd.f32	s20, s16, s13
		int intIndex = roundf(touch_index);
2401c368:	ee17 7a10 	vmov	r7, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401c36c:	eef1 7a67 	vneg.f32	s15, s15
2401c370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401c374:	ee17 4a90 	vmov	r4, s15
2401c378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c37c:	eef4 7aca 	vcmpe.f32	s15, s20
2401c380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c384:	d5d5      	bpl.n	2401c332 <tVoc_set_tongue_and_touch_diameters+0x1b2>
		Lfloat invWidth = 1.0f / width;
2401c386:	ee86 9a88 	vdiv.f32	s18, s13, s16
2401c38a:	f642 5218 	movw	r2, #11544	; 0x2d18
2401c38e:	f242 13fb 	movw	r3, #8699	; 0x21fb
2401c392:	f2c5 4244 	movt	r2, #21572	; 0x5444
2401c396:	f2c4 0309 	movt	r3, #16393	; 0x4009
2401c39a:	ec43 2b17 	vmov	d7, r2, r3
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
2401c39e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
2401c3a2:	ee29 9b07 	vmul.f64	d9, d9, d7
2401c3a6:	e020      	b.n	2401c3ea <tVoc_set_tongue_and_touch_diameters+0x26a>
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
2401c3a8:	ee7b 5ac7 	vsub.f32	s11, s23, s14
2401c3ac:	ee37 7a46 	vsub.f32	s14, s14, s12
2401c3b0:	ee65 6aa6 	vmul.f32	s13, s11, s13
2401c3b4:	ee86 6a87 	vdiv.f32	s12, s13, s14
2401c3b8:	ee38 8a06 	vadd.f32	s16, s16, s12
2401c3bc:	e797      	b.n	2401c2ee <tVoc_set_tongue_and_touch_diameters+0x16e>
		int intIndex = roundf(touch_index);
2401c3be:	f642 5218 	movw	r2, #11544	; 0x2d18
2401c3c2:	f242 13fb 	movw	r3, #8699	; 0x21fb
2401c3c6:	fef8 7a6b 	vrinta.f32	s15, s23
2401c3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401c3ce:	f2c5 4244 	movt	r2, #21572	; 0x5444
2401c3d2:	f2c4 0309 	movt	r3, #16393	; 0x4009
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401c3d6:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
2401c3da:	f06f 0401 	mvn.w	r4, #1
			width = 1.0f;
2401c3de:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int intIndex = roundf(touch_index);
2401c3e2:	ee17 7a90 	vmov	r7, s15
2401c3e6:	ec43 2b19 	vmov	d9, r2, r3
2401c3ea:	443c      	add	r4, r7
			if (relpos <= 0.0f) shrink = 0.0f;
2401c3ec:	2300      	movs	r3, #0
2401c3ee:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
2401c3f2:	f1c7 0701 	rsb	r7, r7, #1
			else if (relpos > width) shrink = 1.0f;
2401c3f6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
2401c3fa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			if (relpos <= 0.0f) shrink = 0.0f;
2401c3fe:	ee0a 3a90 	vmov	s21, r3
			Lfloat relpos = (intIndex+i) - touch_index;
2401c402:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401c406:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
2401c408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401c40c:	db26      	blt.n	2401c45c <tVoc_set_tongue_and_touch_diameters+0x2dc>
2401c40e:	68ab      	ldr	r3, [r5, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
2401c410:	ee77 7aeb 	vsub.f32	s15, s15, s23
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401c414:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
2401c416:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401c41a:	429c      	cmp	r4, r3
2401c41c:	da1e      	bge.n	2401c45c <tVoc_set_tongue_and_touch_diameters+0x2dc>
			if (relpos <= 0.0f) shrink = 0.0f;
2401c41e:	eef4 7ae8 	vcmpe.f32	s15, s17
			relpos = fabsf(relpos)-0.5f;
2401c422:	ee37 0ae8 	vsub.f32	s0, s15, s17
			if (relpos <= 0.0f) shrink = 0.0f;
2401c426:	eef0 7a6a 	vmov.f32	s15, s21
2401c42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c42e:	d906      	bls.n	2401c43e <tVoc_set_tongue_and_touch_diameters+0x2be>
			else if (relpos > width) shrink = 1.0f;
2401c430:	eeb4 0ac8 	vcmpe.f32	s0, s16
2401c434:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401c438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c43c:	dd1d      	ble.n	2401c47a <tVoc_set_tongue_and_touch_diameters+0x2fa>
			if (touch_diameter < theDiameters[intIndex+i])
2401c43e:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
2401c442:	ee77 6a4c 	vsub.f32	s13, s14, s24
			if (touch_diameter < theDiameters[intIndex+i])
2401c446:	eeb4 7acc 	vcmpe.f32	s14, s24
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
2401c44a:	eeb0 7a4c 	vmov.f32	s14, s24
			if (touch_diameter < theDiameters[intIndex+i])
2401c44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
2401c452:	eea6 7aa7 	vfma.f32	s14, s13, s15
2401c456:	bfc8      	it	gt
2401c458:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401c45c:	193b      	adds	r3, r7, r4
2401c45e:	3604      	adds	r6, #4
2401c460:	3401      	adds	r4, #1
2401c462:	ee07 3a90 	vmov	s15, r3
2401c466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c46a:	eef4 7aca 	vcmpe.f32	s15, s20
2401c46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c472:	d4c6      	bmi.n	2401c402 <tVoc_set_tongue_and_touch_diameters+0x282>
}
2401c474:	ecbd 8b0a 	vpop	{d8-d12}
2401c478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
2401c47a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401c47e:	ee20 0b09 	vmul.f64	d0, d0, d9
2401c482:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401c486:	f7e4 f997 	bl	240007b8 <arm_cos_f32>
2401c48a:	ee3b 0a40 	vsub.f32	s0, s22, s0
2401c48e:	ee60 7a28 	vmul.f32	s15, s0, s17
2401c492:	e7d4      	b.n	2401c43e <tVoc_set_tongue_and_touch_diameters+0x2be>

2401c494 <tVoc_set_tongue_shape_and_touch>:
{
2401c494:	b500      	push	{lr}
2401c496:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
2401c49a:	6803      	ldr	r3, [r0, #0]
{
2401c49c:	b083      	sub	sp, #12
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c49e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
	return v->tr->target_diameter;
2401c4a2:	689a      	ldr	r2, [r3, #8]
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c4a4:	eef0 9a00 	vmov.f32	s19, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
2401c4a8:	9301      	str	r3, [sp, #4]
	tongue_diameter += 2.05f;
2401c4aa:	2300      	movs	r3, #0
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401c4ac:	ed92 9a18 	vldr	s18, [r2, #96]	; 0x60
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401c4b0:	a801      	add	r0, sp, #4
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401c4b2:	edd2 7a17 	vldr	s15, [r2, #92]	; 0x5c
2401c4b6:	ee07 3a10 	vmov	s14, r3
	touch_diameter *= 1.6f;
2401c4ba:	f64c 43cd 	movw	r3, #52429	; 0xcccd
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401c4be:	69d1      	ldr	r1, [r2, #28]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401c4c0:	ee77 7ac9 	vsub.f32	s15, s15, s18
2401c4c4:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
	touch_diameter *= 1.6f;
2401c4c8:	f6c3 73cc 	movt	r3, #16332	; 0x3fcc
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401c4cc:	eea7 9a80 	vfma.f32	s18, s15, s0
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c4d0:	edd2 7a01 	vldr	s15, [r2, #4]
	touch_diameter *= 1.6f;
2401c4d4:	ee07 3a10 	vmov	s14, r3
	tongue_diameter += 2.05f;
2401c4d8:	f649 129a 	movw	r2, #39322	; 0x999a
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tongue_diameter += 2.05f;
2401c4e0:	f243 3333 	movw	r3, #13107	; 0x3333
2401c4e4:	f6c3 72b9 	movt	r2, #16313	; 0x3fb9
	touch_diameter *= 1.6f;
2401c4e8:	ee61 8a87 	vmul.f32	s17, s3, s14
	tongue_diameter += 2.05f;
2401c4ec:	f2c4 0303 	movt	r3, #16387	; 0x4003
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c4f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_diameter += 2.05f;
2401c4f4:	ee08 3a10 	vmov	s16, r3
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401c4f8:	eeb0 0a49 	vmov.f32	s0, s18
2401c4fc:	eef0 1a68 	vmov.f32	s3, s17
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401c500:	eee7 9a81 	vfma.f32	s19, s15, s2
	tongue_diameter += 2.05f;
2401c504:	ee07 2a90 	vmov	s15, r2
2401c508:	eea0 8aa7 	vfma.f32	s16, s1, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401c50c:	eeb0 1a69 	vmov.f32	s2, s19
2401c510:	eef0 0a48 	vmov.f32	s1, s16
2401c514:	f7ff fe34 	bl	2401c180 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
2401c518:	9b01      	ldr	r3, [sp, #4]
2401c51a:	689a      	ldr	r2, [r3, #8]
2401c51c:	ed82 9a34 	vstr	s18, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
2401c520:	689a      	ldr	r2, [r3, #8]
2401c522:	ed82 8a36 	vstr	s16, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
2401c526:	689a      	ldr	r2, [r3, #8]
2401c528:	edc2 9a35 	vstr	s19, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
2401c52c:	689b      	ldr	r3, [r3, #8]
2401c52e:	edc3 8a37 	vstr	s17, [r3, #220]	; 0xdc
}
2401c532:	b003      	add	sp, #12
2401c534:	ecbd 8b04 	vpop	{d8-d9}
2401c538:	f85d fb04 	ldr.w	pc, [sp], #4

2401c53c <tVoc_rescaleDiameter>:
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
	v->tr->diameterScale = scale;
2401c53c:	6803      	ldr	r3, [r0, #0]
2401c53e:	689b      	ldr	r3, [r3, #8]
2401c540:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
2401c544:	4770      	bx	lr
2401c546:	bf00      	nop

2401c548 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
2401c548:	4770      	bx	lr
2401c54a:	bf00      	nop

2401c54c <LEAF_init>:
{
2401c54c:	b538      	push	{r3, r4, r5, lr}
2401c54e:	ed2d 8b02 	vpush	{d8}
    leaf->_internal_mempool.leaf = leaf;
2401c552:	6200      	str	r0, [r0, #32]
{
2401c554:	4604      	mov	r4, r0
2401c556:	eeb0 8a40 	vmov.f32	s16, s0
2401c55a:	461d      	mov	r5, r3
    leaf_pool_init(leaf, memory, memorysize);
2401c55c:	f7fa fce6 	bl	24016f2c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
2401c560:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401c564:	f640 72db 	movw	r2, #4059	; 0xfdb
    leaf->errorCallback = &LEAF_defaultErrorCallback;
2401c568:	f24c 5049 	movw	r0, #50505	; 0xc549
    leaf->clearOnAllocation = 0;
2401c56c:	2100      	movs	r1, #0
    leaf->sampleRate = sr;
2401c56e:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
2401c572:	ee87 7a88 	vdiv.f32	s14, s15, s16
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401c576:	f2c4 02c9 	movt	r2, #16585	; 0x40c9
    leaf->errorCallback = &LEAF_defaultErrorCallback;
2401c57a:	f2c2 4001 	movt	r0, #9217	; 0x2401
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401c57e:	ee07 2a90 	vmov	s15, r2
    leaf->clearOnAllocation = 0;
2401c582:	e9c4 5104 	strd	r5, r1, [r4, #16]
        leaf->errorState[i] = 0;
2401c586:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
2401c58a:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
    leaf->freeCount = 0;
2401c58e:	e9c4 1112 	strd	r1, r1, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401c592:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
2401c596:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401c59a:	edc4 7a03 	vstr	s15, [r4, #12]
}
2401c59e:	ecbd 8b02 	vpop	{d8}
2401c5a2:	bd38      	pop	{r3, r4, r5, pc}

2401c5a4 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
2401c5a4:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
2401c5a6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
2401c5aa:	2401      	movs	r4, #1
2401c5ac:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
2401c5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
2401c5b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
2401c5b4:	4718      	bx	r3
2401c5b6:	bf00      	nop

2401c5b8 <__itoa>:
2401c5b8:	1e93      	subs	r3, r2, #2
2401c5ba:	2b22      	cmp	r3, #34	; 0x22
2401c5bc:	b510      	push	{r4, lr}
2401c5be:	460c      	mov	r4, r1
2401c5c0:	d904      	bls.n	2401c5cc <__itoa+0x14>
2401c5c2:	2300      	movs	r3, #0
2401c5c4:	700b      	strb	r3, [r1, #0]
2401c5c6:	461c      	mov	r4, r3
2401c5c8:	4620      	mov	r0, r4
2401c5ca:	bd10      	pop	{r4, pc}
2401c5cc:	2a0a      	cmp	r2, #10
2401c5ce:	d109      	bne.n	2401c5e4 <__itoa+0x2c>
2401c5d0:	2800      	cmp	r0, #0
2401c5d2:	da07      	bge.n	2401c5e4 <__itoa+0x2c>
2401c5d4:	232d      	movs	r3, #45	; 0x2d
2401c5d6:	700b      	strb	r3, [r1, #0]
2401c5d8:	4240      	negs	r0, r0
2401c5da:	2101      	movs	r1, #1
2401c5dc:	4421      	add	r1, r4
2401c5de:	f000 f805 	bl	2401c5ec <__utoa>
2401c5e2:	e7f1      	b.n	2401c5c8 <__itoa+0x10>
2401c5e4:	2100      	movs	r1, #0
2401c5e6:	e7f9      	b.n	2401c5dc <__itoa+0x24>

2401c5e8 <itoa>:
2401c5e8:	f7ff bfe6 	b.w	2401c5b8 <__itoa>

2401c5ec <__utoa>:
2401c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
2401c5ee:	4c1f      	ldr	r4, [pc, #124]	; (2401c66c <__utoa+0x80>)
2401c5f0:	b08b      	sub	sp, #44	; 0x2c
2401c5f2:	4605      	mov	r5, r0
2401c5f4:	460b      	mov	r3, r1
2401c5f6:	466e      	mov	r6, sp
2401c5f8:	f104 0c20 	add.w	ip, r4, #32
2401c5fc:	6820      	ldr	r0, [r4, #0]
2401c5fe:	6861      	ldr	r1, [r4, #4]
2401c600:	4637      	mov	r7, r6
2401c602:	c703      	stmia	r7!, {r0, r1}
2401c604:	3408      	adds	r4, #8
2401c606:	4564      	cmp	r4, ip
2401c608:	463e      	mov	r6, r7
2401c60a:	d1f7      	bne.n	2401c5fc <__utoa+0x10>
2401c60c:	7921      	ldrb	r1, [r4, #4]
2401c60e:	7139      	strb	r1, [r7, #4]
2401c610:	1e91      	subs	r1, r2, #2
2401c612:	6820      	ldr	r0, [r4, #0]
2401c614:	6038      	str	r0, [r7, #0]
2401c616:	2922      	cmp	r1, #34	; 0x22
2401c618:	f04f 0100 	mov.w	r1, #0
2401c61c:	d904      	bls.n	2401c628 <__utoa+0x3c>
2401c61e:	7019      	strb	r1, [r3, #0]
2401c620:	460b      	mov	r3, r1
2401c622:	4618      	mov	r0, r3
2401c624:	b00b      	add	sp, #44	; 0x2c
2401c626:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401c628:	1e58      	subs	r0, r3, #1
2401c62a:	4684      	mov	ip, r0
2401c62c:	fbb5 f7f2 	udiv	r7, r5, r2
2401c630:	fb02 5617 	mls	r6, r2, r7, r5
2401c634:	3628      	adds	r6, #40	; 0x28
2401c636:	446e      	add	r6, sp
2401c638:	460c      	mov	r4, r1
2401c63a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
2401c63e:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401c642:	462e      	mov	r6, r5
2401c644:	42b2      	cmp	r2, r6
2401c646:	f101 0101 	add.w	r1, r1, #1
2401c64a:	463d      	mov	r5, r7
2401c64c:	d9ee      	bls.n	2401c62c <__utoa+0x40>
2401c64e:	2200      	movs	r2, #0
2401c650:	545a      	strb	r2, [r3, r1]
2401c652:	1919      	adds	r1, r3, r4
2401c654:	1aa5      	subs	r5, r4, r2
2401c656:	42aa      	cmp	r2, r5
2401c658:	dae3      	bge.n	2401c622 <__utoa+0x36>
2401c65a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
2401c65e:	780e      	ldrb	r6, [r1, #0]
2401c660:	7006      	strb	r6, [r0, #0]
2401c662:	3201      	adds	r2, #1
2401c664:	f801 5901 	strb.w	r5, [r1], #-1
2401c668:	e7f4      	b.n	2401c654 <__utoa+0x68>
2401c66a:	bf00      	nop
2401c66c:	2402d094 	.word	0x2402d094

2401c670 <memset>:
2401c670:	4402      	add	r2, r0
2401c672:	4603      	mov	r3, r0
2401c674:	4293      	cmp	r3, r2
2401c676:	d100      	bne.n	2401c67a <memset+0xa>
2401c678:	4770      	bx	lr
2401c67a:	f803 1b01 	strb.w	r1, [r3], #1
2401c67e:	e7f9      	b.n	2401c674 <memset+0x4>

2401c680 <__errno>:
2401c680:	4b01      	ldr	r3, [pc, #4]	; (2401c688 <__errno+0x8>)
2401c682:	6818      	ldr	r0, [r3, #0]
2401c684:	4770      	bx	lr
2401c686:	bf00      	nop
2401c688:	20000a0c 	.word	0x20000a0c

2401c68c <__libc_init_array>:
2401c68c:	b570      	push	{r4, r5, r6, lr}
2401c68e:	4d0d      	ldr	r5, [pc, #52]	; (2401c6c4 <__libc_init_array+0x38>)
2401c690:	4c0d      	ldr	r4, [pc, #52]	; (2401c6c8 <__libc_init_array+0x3c>)
2401c692:	1b64      	subs	r4, r4, r5
2401c694:	10a4      	asrs	r4, r4, #2
2401c696:	2600      	movs	r6, #0
2401c698:	42a6      	cmp	r6, r4
2401c69a:	d109      	bne.n	2401c6b0 <__libc_init_array+0x24>
2401c69c:	4d0b      	ldr	r5, [pc, #44]	; (2401c6cc <__libc_init_array+0x40>)
2401c69e:	4c0c      	ldr	r4, [pc, #48]	; (2401c6d0 <__libc_init_array+0x44>)
2401c6a0:	f011 fe72 	bl	2402e388 <_init>
2401c6a4:	1b64      	subs	r4, r4, r5
2401c6a6:	10a4      	asrs	r4, r4, #2
2401c6a8:	2600      	movs	r6, #0
2401c6aa:	42a6      	cmp	r6, r4
2401c6ac:	d105      	bne.n	2401c6ba <__libc_init_array+0x2e>
2401c6ae:	bd70      	pop	{r4, r5, r6, pc}
2401c6b0:	f855 3b04 	ldr.w	r3, [r5], #4
2401c6b4:	4798      	blx	r3
2401c6b6:	3601      	adds	r6, #1
2401c6b8:	e7ee      	b.n	2401c698 <__libc_init_array+0xc>
2401c6ba:	f855 3b04 	ldr.w	r3, [r5], #4
2401c6be:	4798      	blx	r3
2401c6c0:	3601      	adds	r6, #1
2401c6c2:	e7f2      	b.n	2401c6aa <__libc_init_array+0x1e>
2401c6c4:	2402e410 	.word	0x2402e410
2401c6c8:	2402e410 	.word	0x2402e410
2401c6cc:	2402e410 	.word	0x2402e410
2401c6d0:	2402e414 	.word	0x2402e414

2401c6d4 <memcpy>:
2401c6d4:	440a      	add	r2, r1
2401c6d6:	4291      	cmp	r1, r2
2401c6d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2401c6dc:	d100      	bne.n	2401c6e0 <memcpy+0xc>
2401c6de:	4770      	bx	lr
2401c6e0:	b510      	push	{r4, lr}
2401c6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
2401c6e6:	f803 4f01 	strb.w	r4, [r3, #1]!
2401c6ea:	4291      	cmp	r1, r2
2401c6ec:	d1f9      	bne.n	2401c6e2 <memcpy+0xe>
2401c6ee:	bd10      	pop	{r4, pc}

2401c6f0 <expf>:
2401c6f0:	ee10 2a10 	vmov	r2, s0
2401c6f4:	f240 412a 	movw	r1, #1066	; 0x42a
2401c6f8:	f3c2 530a 	ubfx	r3, r2, #20, #11
2401c6fc:	428b      	cmp	r3, r1
2401c6fe:	b430      	push	{r4, r5}
2401c700:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
2401c704:	d92a      	bls.n	2401c75c <expf+0x6c>
2401c706:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
2401c70a:	d058      	beq.n	2401c7be <expf+0xce>
2401c70c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
2401c710:	d303      	bcc.n	2401c71a <expf+0x2a>
2401c712:	ee30 0a00 	vadd.f32	s0, s0, s0
2401c716:	bc30      	pop	{r4, r5}
2401c718:	4770      	bx	lr
2401c71a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2401c7c4 <expf+0xd4>
2401c71e:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c726:	dd03      	ble.n	2401c730 <expf+0x40>
2401c728:	bc30      	pop	{r4, r5}
2401c72a:	2000      	movs	r0, #0
2401c72c:	f000 bbd6 	b.w	2401cedc <__math_oflowf>
2401c730:	eddf 7a25 	vldr	s15, [pc, #148]	; 2401c7c8 <expf+0xd8>
2401c734:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c73c:	d503      	bpl.n	2401c746 <expf+0x56>
2401c73e:	bc30      	pop	{r4, r5}
2401c740:	2000      	movs	r0, #0
2401c742:	f000 bbbf 	b.w	2401cec4 <__math_uflowf>
2401c746:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401c7cc <expf+0xdc>
2401c74a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401c74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c752:	d503      	bpl.n	2401c75c <expf+0x6c>
2401c754:	bc30      	pop	{r4, r5}
2401c756:	2000      	movs	r0, #0
2401c758:	f000 bbba 	b.w	2401ced0 <__math_may_uflowf>
2401c75c:	4b1c      	ldr	r3, [pc, #112]	; (2401c7d0 <expf+0xe0>)
2401c75e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401c762:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
2401c766:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
2401c76a:	eeb0 7b44 	vmov.f64	d7, d4
2401c76e:	eea5 7b06 	vfma.f64	d7, d5, d6
2401c772:	ee17 0a10 	vmov	r0, s14
2401c776:	ee37 7b44 	vsub.f64	d7, d7, d4
2401c77a:	f000 021f 	and.w	r2, r0, #31
2401c77e:	ee95 7b06 	vfnms.f64	d7, d5, d6
2401c782:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
2401c786:	ee27 4b07 	vmul.f64	d4, d7, d7
2401c78a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
2401c78e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
2401c792:	eea5 6b07 	vfma.f64	d6, d5, d7
2401c796:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
2401c79a:	684d      	ldr	r5, [r1, #4]
2401c79c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
2401c7a0:	2100      	movs	r1, #0
2401c7a2:	190a      	adds	r2, r1, r4
2401c7a4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
2401c7a8:	eea5 0b07 	vfma.f64	d0, d5, d7
2401c7ac:	ec43 2b17 	vmov	d7, r2, r3
2401c7b0:	eea6 0b04 	vfma.f64	d0, d6, d4
2401c7b4:	ee20 0b07 	vmul.f64	d0, d0, d7
2401c7b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401c7bc:	e7ab      	b.n	2401c716 <expf+0x26>
2401c7be:	ed9f 0a05 	vldr	s0, [pc, #20]	; 2401c7d4 <expf+0xe4>
2401c7c2:	e7a8      	b.n	2401c716 <expf+0x26>
2401c7c4:	42b17217 	.word	0x42b17217
2401c7c8:	c2cff1b4 	.word	0xc2cff1b4
2401c7cc:	c2ce8ecf 	.word	0xc2ce8ecf
2401c7d0:	2402d0c0 	.word	0x2402d0c0
2401c7d4:	00000000 	.word	0x00000000

2401c7d8 <logf>:
2401c7d8:	ee10 3a10 	vmov	r3, s0
2401c7dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401c7e0:	b410      	push	{r4}
2401c7e2:	d055      	beq.n	2401c890 <logf+0xb8>
2401c7e4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
2401c7e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
2401c7ec:	d31a      	bcc.n	2401c824 <logf+0x4c>
2401c7ee:	005a      	lsls	r2, r3, #1
2401c7f0:	d104      	bne.n	2401c7fc <logf+0x24>
2401c7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c7f6:	2001      	movs	r0, #1
2401c7f8:	f000 bb76 	b.w	2401cee8 <__math_divzerof>
2401c7fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401c800:	d043      	beq.n	2401c88a <logf+0xb2>
2401c802:	2b00      	cmp	r3, #0
2401c804:	db02      	blt.n	2401c80c <logf+0x34>
2401c806:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401c80a:	d303      	bcc.n	2401c814 <logf+0x3c>
2401c80c:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c810:	f000 bb7c 	b.w	2401cf0c <__math_invalidf>
2401c814:	eddf 7a20 	vldr	s15, [pc, #128]	; 2401c898 <logf+0xc0>
2401c818:	ee20 0a27 	vmul.f32	s0, s0, s15
2401c81c:	ee10 3a10 	vmov	r3, s0
2401c820:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
2401c824:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
2401c828:	491c      	ldr	r1, [pc, #112]	; (2401c89c <logf+0xc4>)
2401c82a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
2401c82e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401c832:	f3c2 40c3 	ubfx	r0, r2, #19, #4
2401c836:	0dd4      	lsrs	r4, r2, #23
2401c838:	eb01 1000 	add.w	r0, r1, r0, lsl #4
2401c83c:	05e4      	lsls	r4, r4, #23
2401c83e:	ed90 6b00 	vldr	d6, [r0]
2401c842:	1b1b      	subs	r3, r3, r4
2401c844:	ee07 3a90 	vmov	s15, r3
2401c848:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401c84c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401c850:	15d2      	asrs	r2, r2, #23
2401c852:	eea6 0b07 	vfma.f64	d0, d6, d7
2401c856:	ed90 6b02 	vldr	d6, [r0, #8]
2401c85a:	ee20 4b00 	vmul.f64	d4, d0, d0
2401c85e:	ee07 2a90 	vmov	s15, r2
2401c862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401c866:	eea7 6b05 	vfma.f64	d6, d7, d5
2401c86a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
2401c86e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
2401c872:	eea5 7b00 	vfma.f64	d7, d5, d0
2401c876:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
2401c87a:	ee30 0b06 	vadd.f64	d0, d0, d6
2401c87e:	eea5 7b04 	vfma.f64	d7, d5, d4
2401c882:	eea4 0b07 	vfma.f64	d0, d4, d7
2401c886:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401c88a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c88e:	4770      	bx	lr
2401c890:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2401c8a0 <logf+0xc8>
2401c894:	e7f9      	b.n	2401c88a <logf+0xb2>
2401c896:	bf00      	nop
2401c898:	4b000000 	.word	0x4b000000
2401c89c:	2402d208 	.word	0x2402d208
2401c8a0:	00000000 	.word	0x00000000

2401c8a4 <log2f>:
2401c8a4:	ee10 2a10 	vmov	r2, s0
2401c8a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
2401c8ac:	b410      	push	{r4}
2401c8ae:	d055      	beq.n	2401c95c <log2f+0xb8>
2401c8b0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
2401c8b4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401c8b8:	d31a      	bcc.n	2401c8f0 <log2f+0x4c>
2401c8ba:	0053      	lsls	r3, r2, #1
2401c8bc:	d104      	bne.n	2401c8c8 <log2f+0x24>
2401c8be:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c8c2:	2001      	movs	r0, #1
2401c8c4:	f000 bb10 	b.w	2401cee8 <__math_divzerof>
2401c8c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401c8cc:	d043      	beq.n	2401c956 <log2f+0xb2>
2401c8ce:	2a00      	cmp	r2, #0
2401c8d0:	db02      	blt.n	2401c8d8 <log2f+0x34>
2401c8d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
2401c8d6:	d303      	bcc.n	2401c8e0 <log2f+0x3c>
2401c8d8:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c8dc:	f000 bb16 	b.w	2401cf0c <__math_invalidf>
2401c8e0:	eddf 7a20 	vldr	s15, [pc, #128]	; 2401c964 <log2f+0xc0>
2401c8e4:	ee20 0a27 	vmul.f32	s0, s0, s15
2401c8e8:	ee10 3a10 	vmov	r3, s0
2401c8ec:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
2401c8f0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
2401c8f4:	491c      	ldr	r1, [pc, #112]	; (2401c968 <log2f+0xc4>)
2401c8f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
2401c8fa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
2401c8fe:	f3c3 40c3 	ubfx	r0, r3, #19, #4
2401c902:	0ddc      	lsrs	r4, r3, #23
2401c904:	eb01 1000 	add.w	r0, r1, r0, lsl #4
2401c908:	05e4      	lsls	r4, r4, #23
2401c90a:	ed90 5b00 	vldr	d5, [r0]
2401c90e:	1b12      	subs	r2, r2, r4
2401c910:	ee07 2a90 	vmov	s15, r2
2401c914:	15db      	asrs	r3, r3, #23
2401c916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401c91a:	eea5 6b07 	vfma.f64	d6, d5, d7
2401c91e:	ed90 7b02 	vldr	d7, [r0, #8]
2401c922:	ee26 4b06 	vmul.f64	d4, d6, d6
2401c926:	ee00 3a10 	vmov	s0, r3
2401c92a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
2401c92e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
2401c932:	ee30 0b07 	vadd.f64	d0, d0, d7
2401c936:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
2401c93a:	eea5 7b06 	vfma.f64	d7, d5, d6
2401c93e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401c942:	eea5 7b04 	vfma.f64	d7, d5, d4
2401c946:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
2401c94a:	eea5 0b06 	vfma.f64	d0, d5, d6
2401c94e:	eea4 0b07 	vfma.f64	d0, d4, d7
2401c952:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401c956:	f85d 4b04 	ldr.w	r4, [sp], #4
2401c95a:	4770      	bx	lr
2401c95c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2401c96c <log2f+0xc8>
2401c960:	e7f9      	b.n	2401c956 <log2f+0xb2>
2401c962:	bf00      	nop
2401c964:	4b000000 	.word	0x4b000000
2401c968:	2402db98 	.word	0x2402db98
2401c96c:	00000000 	.word	0x00000000

2401c970 <exp>:
2401c970:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
2401c972:	ee10 3a90 	vmov	r3, s1
2401c976:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
2401c97a:	f3c3 540a 	ubfx	r4, r3, #20, #11
2401c97e:	18a2      	adds	r2, r4, r2
2401c980:	2a3e      	cmp	r2, #62	; 0x3e
2401c982:	ee10 1a10 	vmov	r1, s0
2401c986:	d922      	bls.n	2401c9ce <exp+0x5e>
2401c988:	2a00      	cmp	r2, #0
2401c98a:	da06      	bge.n	2401c99a <exp+0x2a>
2401c98c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
2401c990:	ee30 0b07 	vadd.f64	d0, d0, d7
2401c994:	b004      	add	sp, #16
2401c996:	bcf0      	pop	{r4, r5, r6, r7}
2401c998:	4770      	bx	lr
2401c99a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
2401c99e:	f04f 0000 	mov.w	r0, #0
2401c9a2:	d913      	bls.n	2401c9cc <exp+0x5c>
2401c9a4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
2401c9a8:	bf08      	it	eq
2401c9aa:	4281      	cmpeq	r1, r0
2401c9ac:	f000 80a0 	beq.w	2401caf0 <exp+0x180>
2401c9b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401c9b4:	4294      	cmp	r4, r2
2401c9b6:	d0e9      	beq.n	2401c98c <exp+0x1c>
2401c9b8:	4283      	cmp	r3, r0
2401c9ba:	da03      	bge.n	2401c9c4 <exp+0x54>
2401c9bc:	b004      	add	sp, #16
2401c9be:	bcf0      	pop	{r4, r5, r6, r7}
2401c9c0:	f000 b8c6 	b.w	2401cb50 <__math_uflow>
2401c9c4:	b004      	add	sp, #16
2401c9c6:	bcf0      	pop	{r4, r5, r6, r7}
2401c9c8:	f000 b8ca 	b.w	2401cb60 <__math_oflow>
2401c9cc:	4604      	mov	r4, r0
2401c9ce:	4950      	ldr	r1, [pc, #320]	; (2401cb10 <exp+0x1a0>)
2401c9d0:	ed91 6b02 	vldr	d6, [r1, #8]
2401c9d4:	ed91 5b00 	vldr	d5, [r1]
2401c9d8:	eeb0 7b46 	vmov.f64	d7, d6
2401c9dc:	eea5 7b00 	vfma.f64	d7, d5, d0
2401c9e0:	ee17 5a10 	vmov	r5, s14
2401c9e4:	ee37 7b46 	vsub.f64	d7, d7, d6
2401c9e8:	ed91 6b04 	vldr	d6, [r1, #16]
2401c9ec:	f005 037f 	and.w	r3, r5, #127	; 0x7f
2401c9f0:	eea6 0b07 	vfma.f64	d0, d6, d7
2401c9f4:	ed91 6b06 	vldr	d6, [r1, #24]
2401c9f8:	18d8      	adds	r0, r3, r3
2401c9fa:	f100 030f 	add.w	r3, r0, #15
2401c9fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
2401ca02:	eea6 0b07 	vfma.f64	d0, d6, d7
2401ca06:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
2401ca0a:	ee20 7b00 	vmul.f64	d7, d0, d0
2401ca0e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
2401ca12:	ed91 4b08 	vldr	d4, [r1, #32]
2401ca16:	ee30 6b06 	vadd.f64	d6, d0, d6
2401ca1a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
2401ca1e:	eea3 4b00 	vfma.f64	d4, d3, d0
2401ca22:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
2401ca26:	eea4 6b07 	vfma.f64	d6, d4, d7
2401ca2a:	ee27 7b07 	vmul.f64	d7, d7, d7
2401ca2e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
2401ca32:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
2401ca36:	f8d2 c004 	ldr.w	ip, [r2, #4]
2401ca3a:	eea3 4b00 	vfma.f64	d4, d3, d0
2401ca3e:	2600      	movs	r6, #0
2401ca40:	19f2      	adds	r2, r6, r7
2401ca42:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
2401ca46:	eea7 6b04 	vfma.f64	d6, d7, d4
2401ca4a:	2c00      	cmp	r4, #0
2401ca4c:	d14b      	bne.n	2401cae6 <exp+0x176>
2401ca4e:	42b5      	cmp	r5, r6
2401ca50:	db10      	blt.n	2401ca74 <exp+0x104>
2401ca52:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
2401ca56:	ed9f 7b28 	vldr	d7, [pc, #160]	; 2401caf8 <exp+0x188>
2401ca5a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
2401ca5e:	4610      	mov	r0, r2
2401ca60:	ec41 0b10 	vmov	d0, r0, r1
2401ca64:	eea6 0b00 	vfma.f64	d0, d6, d0
2401ca68:	ee20 0b07 	vmul.f64	d0, d0, d7
2401ca6c:	b004      	add	sp, #16
2401ca6e:	bcf0      	pop	{r4, r5, r6, r7}
2401ca70:	f000 b88a 	b.w	2401cb88 <__math_check_oflow>
2401ca74:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
2401ca78:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
2401ca7c:	4610      	mov	r0, r2
2401ca7e:	ec41 0b17 	vmov	d7, r0, r1
2401ca82:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
2401ca86:	ee26 6b07 	vmul.f64	d6, d6, d7
2401ca8a:	ee37 5b06 	vadd.f64	d5, d7, d6
2401ca8e:	eeb4 5bc4 	vcmpe.f64	d5, d4
2401ca92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ca96:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 2401cb00 <exp+0x190>
2401ca9a:	d51e      	bpl.n	2401cada <exp+0x16a>
2401ca9c:	ee35 3b04 	vadd.f64	d3, d5, d4
2401caa0:	ee37 7b45 	vsub.f64	d7, d7, d5
2401caa4:	ee37 7b06 	vadd.f64	d7, d7, d6
2401caa8:	ee34 6b43 	vsub.f64	d6, d4, d3
2401caac:	ee36 6b05 	vadd.f64	d6, d6, d5
2401cab0:	ee36 6b07 	vadd.f64	d6, d6, d7
2401cab4:	ee36 6b03 	vadd.f64	d6, d6, d3
2401cab8:	ee36 5b44 	vsub.f64	d5, d6, d4
2401cabc:	eeb5 5b40 	vcmp.f64	d5, #0.0
2401cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cac4:	d101      	bne.n	2401caca <exp+0x15a>
2401cac6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 2401cb08 <exp+0x198>
2401caca:	ed8d 0b00 	vstr	d0, [sp]
2401cace:	ed9d 7b00 	vldr	d7, [sp]
2401cad2:	ee27 7b00 	vmul.f64	d7, d7, d0
2401cad6:	ed8d 7b02 	vstr	d7, [sp, #8]
2401cada:	ee25 0b00 	vmul.f64	d0, d5, d0
2401cade:	b004      	add	sp, #16
2401cae0:	bcf0      	pop	{r4, r5, r6, r7}
2401cae2:	f000 b845 	b.w	2401cb70 <__math_check_uflow>
2401cae6:	ec43 2b10 	vmov	d0, r2, r3
2401caea:	eea6 0b00 	vfma.f64	d0, d6, d0
2401caee:	e751      	b.n	2401c994 <exp+0x24>
2401caf0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 2401cb08 <exp+0x198>
2401caf4:	e74e      	b.n	2401c994 <exp+0x24>
2401caf6:	bf00      	nop
2401caf8:	00000000 	.word	0x00000000
2401cafc:	7f000000 	.word	0x7f000000
2401cb00:	00000000 	.word	0x00000000
2401cb04:	00100000 	.word	0x00100000
	...
2401cb10:	2402d328 	.word	0x2402d328

2401cb14 <with_errno>:
2401cb14:	b513      	push	{r0, r1, r4, lr}
2401cb16:	4604      	mov	r4, r0
2401cb18:	ed8d 0b00 	vstr	d0, [sp]
2401cb1c:	f7ff fdb0 	bl	2401c680 <__errno>
2401cb20:	ed9d 0b00 	vldr	d0, [sp]
2401cb24:	6004      	str	r4, [r0, #0]
2401cb26:	b002      	add	sp, #8
2401cb28:	bd10      	pop	{r4, pc}

2401cb2a <xflow>:
2401cb2a:	b082      	sub	sp, #8
2401cb2c:	b158      	cbz	r0, 2401cb46 <xflow+0x1c>
2401cb2e:	eeb1 7b40 	vneg.f64	d7, d0
2401cb32:	ed8d 7b00 	vstr	d7, [sp]
2401cb36:	ed9d 7b00 	vldr	d7, [sp]
2401cb3a:	2022      	movs	r0, #34	; 0x22
2401cb3c:	ee20 0b07 	vmul.f64	d0, d0, d7
2401cb40:	b002      	add	sp, #8
2401cb42:	f7ff bfe7 	b.w	2401cb14 <with_errno>
2401cb46:	eeb0 7b40 	vmov.f64	d7, d0
2401cb4a:	e7f2      	b.n	2401cb32 <xflow+0x8>
2401cb4c:	0000      	movs	r0, r0
	...

2401cb50 <__math_uflow>:
2401cb50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 2401cb58 <__math_uflow+0x8>
2401cb54:	f7ff bfe9 	b.w	2401cb2a <xflow>
2401cb58:	00000000 	.word	0x00000000
2401cb5c:	10000000 	.word	0x10000000

2401cb60 <__math_oflow>:
2401cb60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 2401cb68 <__math_oflow+0x8>
2401cb64:	f7ff bfe1 	b.w	2401cb2a <xflow>
2401cb68:	00000000 	.word	0x00000000
2401cb6c:	70000000 	.word	0x70000000

2401cb70 <__math_check_uflow>:
2401cb70:	eeb5 0b40 	vcmp.f64	d0, #0.0
2401cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cb78:	d102      	bne.n	2401cb80 <__math_check_uflow+0x10>
2401cb7a:	2022      	movs	r0, #34	; 0x22
2401cb7c:	f7ff bfca 	b.w	2401cb14 <with_errno>
2401cb80:	4770      	bx	lr
2401cb82:	0000      	movs	r0, r0
2401cb84:	0000      	movs	r0, r0
	...

2401cb88 <__math_check_oflow>:
2401cb88:	ed9f 6b07 	vldr	d6, [pc, #28]	; 2401cba8 <__math_check_oflow+0x20>
2401cb8c:	eeb0 7bc0 	vabs.f64	d7, d0
2401cb90:	eeb4 7b46 	vcmp.f64	d7, d6
2401cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cb98:	dd02      	ble.n	2401cba0 <__math_check_oflow+0x18>
2401cb9a:	2022      	movs	r0, #34	; 0x22
2401cb9c:	f7ff bfba 	b.w	2401cb14 <with_errno>
2401cba0:	4770      	bx	lr
2401cba2:	bf00      	nop
2401cba4:	f3af 8000 	nop.w
2401cba8:	ffffffff 	.word	0xffffffff
2401cbac:	7fefffff 	.word	0x7fefffff

2401cbb0 <checkint>:
2401cbb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
2401cbb4:	2b7e      	cmp	r3, #126	; 0x7e
2401cbb6:	dd10      	ble.n	2401cbda <checkint+0x2a>
2401cbb8:	2b96      	cmp	r3, #150	; 0x96
2401cbba:	dc0c      	bgt.n	2401cbd6 <checkint+0x26>
2401cbbc:	2201      	movs	r2, #1
2401cbbe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
2401cbc2:	fa02 f303 	lsl.w	r3, r2, r3
2401cbc6:	1e5a      	subs	r2, r3, #1
2401cbc8:	4202      	tst	r2, r0
2401cbca:	d106      	bne.n	2401cbda <checkint+0x2a>
2401cbcc:	4203      	tst	r3, r0
2401cbce:	bf0c      	ite	eq
2401cbd0:	2002      	moveq	r0, #2
2401cbd2:	2001      	movne	r0, #1
2401cbd4:	4770      	bx	lr
2401cbd6:	2002      	movs	r0, #2
2401cbd8:	4770      	bx	lr
2401cbda:	2000      	movs	r0, #0
2401cbdc:	4770      	bx	lr
	...

2401cbe0 <powf>:
2401cbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
2401cbe2:	ee10 1a10 	vmov	r1, s0
2401cbe6:	ee10 4a90 	vmov	r4, s1
2401cbea:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
2401cbee:	0062      	lsls	r2, r4, #1
2401cbf0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401cbf4:	eef0 7a40 	vmov.f32	s15, s0
2401cbf8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
2401cbfc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
2401cc00:	d252      	bcs.n	2401cca8 <powf+0xc8>
2401cc02:	4298      	cmp	r0, r3
2401cc04:	d252      	bcs.n	2401ccac <powf+0xcc>
2401cc06:	2000      	movs	r0, #0
2401cc08:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
2401cc0c:	4a9e      	ldr	r2, [pc, #632]	; (2401ce88 <powf+0x2a8>)
2401cc0e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
2401cc12:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
2401cc16:	f3c3 44c3 	ubfx	r4, r3, #19, #4
2401cc1a:	0ddb      	lsrs	r3, r3, #23
2401cc1c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
2401cc20:	05db      	lsls	r3, r3, #23
2401cc22:	ed94 5b00 	vldr	d5, [r4]
2401cc26:	1ac9      	subs	r1, r1, r3
2401cc28:	ee07 1a90 	vmov	s15, r1
2401cc2c:	15db      	asrs	r3, r3, #23
2401cc2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401cc32:	eea5 6b07 	vfma.f64	d6, d5, d7
2401cc36:	ed94 5b02 	vldr	d5, [r4, #8]
2401cc3a:	ee26 2b06 	vmul.f64	d2, d6, d6
2401cc3e:	ee22 1b02 	vmul.f64	d1, d2, d2
2401cc42:	ee07 3a90 	vmov	s15, r3
2401cc46:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
2401cc4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401cc4e:	ee37 7b05 	vadd.f64	d7, d7, d5
2401cc52:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
2401cc56:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
2401cc5a:	eea6 3b05 	vfma.f64	d3, d6, d5
2401cc5e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
2401cc62:	eea6 5b04 	vfma.f64	d5, d6, d4
2401cc66:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
2401cc6a:	eea6 7b04 	vfma.f64	d7, d6, d4
2401cc6e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
2401cc72:	eea2 7b05 	vfma.f64	d7, d2, d5
2401cc76:	eea3 7b01 	vfma.f64	d7, d3, d1
2401cc7a:	ee26 6b07 	vmul.f64	d6, d6, d7
2401cc7e:	ee16 3a90 	vmov	r3, s13
2401cc82:	f3c3 32cf 	ubfx	r2, r3, #15, #16
2401cc86:	f248 03bf 	movw	r3, #32959	; 0x80bf
2401cc8a:	429a      	cmp	r2, r3
2401cc8c:	f0c0 80b0 	bcc.w	2401cdf0 <powf+0x210>
2401cc90:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401ce68 <powf+0x288>
2401cc94:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401cc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cc9c:	dd78      	ble.n	2401cd90 <powf+0x1b0>
2401cc9e:	b003      	add	sp, #12
2401cca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401cca4:	f000 b91a 	b.w	2401cedc <__math_oflowf>
2401cca8:	4298      	cmp	r0, r3
2401ccaa:	d32d      	bcc.n	2401cd08 <powf+0x128>
2401ccac:	b952      	cbnz	r2, 2401ccc4 <powf+0xe4>
2401ccae:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
2401ccb2:	0049      	lsls	r1, r1, #1
2401ccb4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
2401ccb8:	f240 80c8 	bls.w	2401ce4c <powf+0x26c>
2401ccbc:	ee37 0aa0 	vadd.f32	s0, s15, s1
2401ccc0:	b003      	add	sp, #12
2401ccc2:	bd30      	pop	{r4, r5, pc}
2401ccc4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
2401ccc8:	d105      	bne.n	2401ccd6 <powf+0xf6>
2401ccca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
2401ccce:	0064      	lsls	r4, r4, #1
2401ccd0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
2401ccd4:	e7f0      	b.n	2401ccb8 <powf+0xd8>
2401ccd6:	0049      	lsls	r1, r1, #1
2401ccd8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
2401ccdc:	d8ee      	bhi.n	2401ccbc <powf+0xdc>
2401ccde:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401cce2:	d1eb      	bne.n	2401ccbc <powf+0xdc>
2401cce4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
2401cce8:	f000 80b0 	beq.w	2401ce4c <powf+0x26c>
2401ccec:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
2401ccf0:	ea6f 0404 	mvn.w	r4, r4
2401ccf4:	bf34      	ite	cc
2401ccf6:	2100      	movcc	r1, #0
2401ccf8:	2101      	movcs	r1, #1
2401ccfa:	0fe4      	lsrs	r4, r4, #31
2401ccfc:	42a1      	cmp	r1, r4
2401ccfe:	f040 80a8 	bne.w	2401ce52 <powf+0x272>
2401cd02:	ee20 0aa0 	vmul.f32	s0, s1, s1
2401cd06:	e7db      	b.n	2401ccc0 <powf+0xe0>
2401cd08:	004d      	lsls	r5, r1, #1
2401cd0a:	1e6a      	subs	r2, r5, #1
2401cd0c:	429a      	cmp	r2, r3
2401cd0e:	d31c      	bcc.n	2401cd4a <powf+0x16a>
2401cd10:	2900      	cmp	r1, #0
2401cd12:	ee20 0a00 	vmul.f32	s0, s0, s0
2401cd16:	da0f      	bge.n	2401cd38 <powf+0x158>
2401cd18:	ee10 0a90 	vmov	r0, s1
2401cd1c:	f7ff ff48 	bl	2401cbb0 <checkint>
2401cd20:	2801      	cmp	r0, #1
2401cd22:	d109      	bne.n	2401cd38 <powf+0x158>
2401cd24:	eeb1 0a40 	vneg.f32	s0, s0
2401cd28:	b945      	cbnz	r5, 2401cd3c <powf+0x15c>
2401cd2a:	2c00      	cmp	r4, #0
2401cd2c:	dac8      	bge.n	2401ccc0 <powf+0xe0>
2401cd2e:	b003      	add	sp, #12
2401cd30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401cd34:	f000 b8d8 	b.w	2401cee8 <__math_divzerof>
2401cd38:	2000      	movs	r0, #0
2401cd3a:	e7f5      	b.n	2401cd28 <powf+0x148>
2401cd3c:	2c00      	cmp	r4, #0
2401cd3e:	dabf      	bge.n	2401ccc0 <powf+0xe0>
2401cd40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401cd44:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401cd48:	e7ba      	b.n	2401ccc0 <powf+0xe0>
2401cd4a:	2900      	cmp	r1, #0
2401cd4c:	da1e      	bge.n	2401cd8c <powf+0x1ac>
2401cd4e:	ee10 0a90 	vmov	r0, s1
2401cd52:	f7ff ff2d 	bl	2401cbb0 <checkint>
2401cd56:	b920      	cbnz	r0, 2401cd62 <powf+0x182>
2401cd58:	b003      	add	sp, #12
2401cd5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401cd5e:	f000 b8d5 	b.w	2401cf0c <__math_invalidf>
2401cd62:	1e43      	subs	r3, r0, #1
2401cd64:	4258      	negs	r0, r3
2401cd66:	4158      	adcs	r0, r3
2401cd68:	0400      	lsls	r0, r0, #16
2401cd6a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401cd6e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2401cd72:	f4bf af49 	bcs.w	2401cc08 <powf+0x28>
2401cd76:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2401ce8c <powf+0x2ac>
2401cd7a:	ee27 0a87 	vmul.f32	s0, s15, s14
2401cd7e:	ee10 3a10 	vmov	r3, s0
2401cd82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401cd86:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
2401cd8a:	e73d      	b.n	2401cc08 <powf+0x28>
2401cd8c:	2000      	movs	r0, #0
2401cd8e:	e7ee      	b.n	2401cd6e <powf+0x18e>
2401cd90:	ed9f 7b37 	vldr	d7, [pc, #220]	; 2401ce70 <powf+0x290>
2401cd94:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401cd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cd9c:	dd10      	ble.n	2401cdc0 <powf+0x1e0>
2401cd9e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
2401cda2:	2800      	cmp	r0, #0
2401cda4:	d158      	bne.n	2401ce58 <powf+0x278>
2401cda6:	9300      	str	r3, [sp, #0]
2401cda8:	eddd 7a00 	vldr	s15, [sp]
2401cdac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401cdb0:	ee77 7a87 	vadd.f32	s15, s15, s14
2401cdb4:	eef4 7a47 	vcmp.f32	s15, s14
2401cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cdbc:	f47f af6f 	bne.w	2401cc9e <powf+0xbe>
2401cdc0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 2401ce78 <powf+0x298>
2401cdc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401cdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cdcc:	d804      	bhi.n	2401cdd8 <powf+0x1f8>
2401cdce:	b003      	add	sp, #12
2401cdd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401cdd4:	f000 b876 	b.w	2401cec4 <__math_uflowf>
2401cdd8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 2401ce80 <powf+0x2a0>
2401cddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401cde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cde4:	d504      	bpl.n	2401cdf0 <powf+0x210>
2401cde6:	b003      	add	sp, #12
2401cde8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401cdec:	f000 b870 	b.w	2401ced0 <__math_may_uflowf>
2401cdf0:	4b27      	ldr	r3, [pc, #156]	; (2401ce90 <powf+0x2b0>)
2401cdf2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401cdf6:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
2401cdfa:	ee36 7b05 	vadd.f64	d7, d6, d5
2401cdfe:	ee17 2a10 	vmov	r2, s14
2401ce02:	ee37 7b45 	vsub.f64	d7, d7, d5
2401ce06:	f002 011f 	and.w	r1, r2, #31
2401ce0a:	ee36 7b47 	vsub.f64	d7, d6, d7
2401ce0e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
2401ce12:	ee27 4b07 	vmul.f64	d4, d7, d7
2401ce16:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
2401ce1a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
2401ce1e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
2401ce22:	eea7 6b05 	vfma.f64	d6, d7, d5
2401ce26:	686d      	ldr	r5, [r5, #4]
2401ce28:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
2401ce2c:	1882      	adds	r2, r0, r2
2401ce2e:	2300      	movs	r3, #0
2401ce30:	1918      	adds	r0, r3, r4
2401ce32:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
2401ce36:	eea7 0b05 	vfma.f64	d0, d7, d5
2401ce3a:	ec41 0b17 	vmov	d7, r0, r1
2401ce3e:	eea6 0b04 	vfma.f64	d0, d6, d4
2401ce42:	ee20 0b07 	vmul.f64	d0, d0, d7
2401ce46:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401ce4a:	e739      	b.n	2401ccc0 <powf+0xe0>
2401ce4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401ce50:	e736      	b.n	2401ccc0 <powf+0xe0>
2401ce52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 2401ce94 <powf+0x2b4>
2401ce56:	e733      	b.n	2401ccc0 <powf+0xe0>
2401ce58:	9301      	str	r3, [sp, #4]
2401ce5a:	eddd 7a01 	vldr	s15, [sp, #4]
2401ce5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401ce62:	ee77 7a67 	vsub.f32	s15, s14, s15
2401ce66:	e7a5      	b.n	2401cdb4 <powf+0x1d4>
2401ce68:	ffd1d571 	.word	0xffd1d571
2401ce6c:	405fffff 	.word	0x405fffff
2401ce70:	ffa3aae2 	.word	0xffa3aae2
2401ce74:	405fffff 	.word	0x405fffff
2401ce78:	00000000 	.word	0x00000000
2401ce7c:	c062c000 	.word	0xc062c000
2401ce80:	00000000 	.word	0x00000000
2401ce84:	c062a000 	.word	0xc062a000
2401ce88:	2402e1d8 	.word	0x2402e1d8
2401ce8c:	4b000000 	.word	0x4b000000
2401ce90:	2402d0c0 	.word	0x2402d0c0
2401ce94:	00000000 	.word	0x00000000

2401ce98 <with_errnof>:
2401ce98:	b513      	push	{r0, r1, r4, lr}
2401ce9a:	4604      	mov	r4, r0
2401ce9c:	ed8d 0a01 	vstr	s0, [sp, #4]
2401cea0:	f7ff fbee 	bl	2401c680 <__errno>
2401cea4:	ed9d 0a01 	vldr	s0, [sp, #4]
2401cea8:	6004      	str	r4, [r0, #0]
2401ceaa:	b002      	add	sp, #8
2401ceac:	bd10      	pop	{r4, pc}

2401ceae <xflowf>:
2401ceae:	b130      	cbz	r0, 2401cebe <xflowf+0x10>
2401ceb0:	eef1 7a40 	vneg.f32	s15, s0
2401ceb4:	ee27 0a80 	vmul.f32	s0, s15, s0
2401ceb8:	2022      	movs	r0, #34	; 0x22
2401ceba:	f7ff bfed 	b.w	2401ce98 <with_errnof>
2401cebe:	eef0 7a40 	vmov.f32	s15, s0
2401cec2:	e7f7      	b.n	2401ceb4 <xflowf+0x6>

2401cec4 <__math_uflowf>:
2401cec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401cecc <__math_uflowf+0x8>
2401cec8:	f7ff bff1 	b.w	2401ceae <xflowf>
2401cecc:	10000000 	.word	0x10000000

2401ced0 <__math_may_uflowf>:
2401ced0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401ced8 <__math_may_uflowf+0x8>
2401ced4:	f7ff bfeb 	b.w	2401ceae <xflowf>
2401ced8:	1a200000 	.word	0x1a200000

2401cedc <__math_oflowf>:
2401cedc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401cee4 <__math_oflowf+0x8>
2401cee0:	f7ff bfe5 	b.w	2401ceae <xflowf>
2401cee4:	70000000 	.word	0x70000000

2401cee8 <__math_divzerof>:
2401cee8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2401cf08 <__math_divzerof+0x20>
2401ceec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401cef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401cef4:	2800      	cmp	r0, #0
2401cef6:	f04f 0022 	mov.w	r0, #34	; 0x22
2401cefa:	fe47 7a27 	vseleq.f32	s15, s14, s15
2401cefe:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401cf02:	f7ff bfc9 	b.w	2401ce98 <with_errnof>
2401cf06:	bf00      	nop
2401cf08:	00000000 	.word	0x00000000

2401cf0c <__math_invalidf>:
2401cf0c:	eef0 7a40 	vmov.f32	s15, s0
2401cf10:	ee30 7a40 	vsub.f32	s14, s0, s0
2401cf14:	eef4 7a67 	vcmp.f32	s15, s15
2401cf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf1c:	ee87 0a07 	vdiv.f32	s0, s14, s14
2401cf20:	d602      	bvs.n	2401cf28 <__math_invalidf+0x1c>
2401cf22:	2021      	movs	r0, #33	; 0x21
2401cf24:	f7ff bfb8 	b.w	2401ce98 <with_errnof>
2401cf28:	4770      	bx	lr
	...

2401cf2c <log10f>:
2401cf2c:	b508      	push	{r3, lr}
2401cf2e:	ed2d 8b02 	vpush	{d8}
2401cf32:	eeb0 8a40 	vmov.f32	s16, s0
2401cf36:	f000 f9df 	bl	2401d2f8 <__ieee754_log10f>
2401cf3a:	eeb4 8a48 	vcmp.f32	s16, s16
2401cf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf42:	d60f      	bvs.n	2401cf64 <log10f+0x38>
2401cf44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf4c:	d80a      	bhi.n	2401cf64 <log10f+0x38>
2401cf4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401cf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf56:	d108      	bne.n	2401cf6a <log10f+0x3e>
2401cf58:	f7ff fb92 	bl	2401c680 <__errno>
2401cf5c:	2322      	movs	r3, #34	; 0x22
2401cf5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401cf80 <log10f+0x54>
2401cf62:	6003      	str	r3, [r0, #0]
2401cf64:	ecbd 8b02 	vpop	{d8}
2401cf68:	bd08      	pop	{r3, pc}
2401cf6a:	f7ff fb89 	bl	2401c680 <__errno>
2401cf6e:	ecbd 8b02 	vpop	{d8}
2401cf72:	2321      	movs	r3, #33	; 0x21
2401cf74:	6003      	str	r3, [r0, #0]
2401cf76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401cf7a:	4802      	ldr	r0, [pc, #8]	; (2401cf84 <log10f+0x58>)
2401cf7c:	f000 b80c 	b.w	2401cf98 <nanf>
2401cf80:	ff800000 	.word	0xff800000
2401cf84:	2402d0b8 	.word	0x2402d0b8

2401cf88 <fabsf>:
2401cf88:	ee10 3a10 	vmov	r3, s0
2401cf8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401cf90:	ee00 3a10 	vmov	s0, r3
2401cf94:	4770      	bx	lr
	...

2401cf98 <nanf>:
2401cf98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401cfa0 <nanf+0x8>
2401cf9c:	4770      	bx	lr
2401cf9e:	bf00      	nop
2401cfa0:	7fc00000 	.word	0x7fc00000

2401cfa4 <tanf>:
2401cfa4:	ee10 3a10 	vmov	r3, s0
2401cfa8:	b507      	push	{r0, r1, r2, lr}
2401cfaa:	4a12      	ldr	r2, [pc, #72]	; (2401cff4 <tanf+0x50>)
2401cfac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401cfb0:	4293      	cmp	r3, r2
2401cfb2:	dc07      	bgt.n	2401cfc4 <tanf+0x20>
2401cfb4:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401cff8 <tanf+0x54>
2401cfb8:	2001      	movs	r0, #1
2401cfba:	b003      	add	sp, #12
2401cfbc:	f85d eb04 	ldr.w	lr, [sp], #4
2401cfc0:	f000 b8ba 	b.w	2401d138 <__kernel_tanf>
2401cfc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401cfc8:	db04      	blt.n	2401cfd4 <tanf+0x30>
2401cfca:	ee30 0a40 	vsub.f32	s0, s0, s0
2401cfce:	b003      	add	sp, #12
2401cfd0:	f85d fb04 	ldr.w	pc, [sp], #4
2401cfd4:	4668      	mov	r0, sp
2401cfd6:	f000 f9e7 	bl	2401d3a8 <__ieee754_rem_pio2f>
2401cfda:	0040      	lsls	r0, r0, #1
2401cfdc:	f000 0002 	and.w	r0, r0, #2
2401cfe0:	eddd 0a01 	vldr	s1, [sp, #4]
2401cfe4:	ed9d 0a00 	vldr	s0, [sp]
2401cfe8:	f1c0 0001 	rsb	r0, r0, #1
2401cfec:	f000 f8a4 	bl	2401d138 <__kernel_tanf>
2401cff0:	e7ed      	b.n	2401cfce <tanf+0x2a>
2401cff2:	bf00      	nop
2401cff4:	3f490fda 	.word	0x3f490fda
2401cff8:	00000000 	.word	0x00000000

2401cffc <tanhf>:
2401cffc:	b538      	push	{r3, r4, r5, lr}
2401cffe:	ee10 5a10 	vmov	r5, s0
2401d002:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
2401d006:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401d00a:	ed2d 8b02 	vpush	{d8}
2401d00e:	db0f      	blt.n	2401d030 <tanhf+0x34>
2401d010:	4b2a      	ldr	r3, [pc, #168]	; (2401d0bc <tanhf+0xc0>)
2401d012:	ed93 6a00 	vldr	s12, [r3]
2401d016:	edd3 6a00 	vldr	s13, [r3]
2401d01a:	eec6 7a00 	vdiv.f32	s15, s12, s0
2401d01e:	2d00      	cmp	r5, #0
2401d020:	bfac      	ite	ge
2401d022:	ee37 0aa6 	vaddge.f32	s0, s15, s13
2401d026:	ee37 0ae6 	vsublt.f32	s0, s15, s13
2401d02a:	ecbd 8b02 	vpop	{d8}
2401d02e:	bd38      	pop	{r3, r4, r5, pc}
2401d030:	4a23      	ldr	r2, [pc, #140]	; (2401d0c0 <tanhf+0xc4>)
2401d032:	4293      	cmp	r3, r2
2401d034:	dc39      	bgt.n	2401d0aa <tanhf+0xae>
2401d036:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401d03a:	da07      	bge.n	2401d04c <tanhf+0x50>
2401d03c:	4b1f      	ldr	r3, [pc, #124]	; (2401d0bc <tanhf+0xc0>)
2401d03e:	edd3 7a00 	vldr	s15, [r3]
2401d042:	ee77 7a80 	vadd.f32	s15, s15, s0
2401d046:	ee27 0a80 	vmul.f32	s0, s15, s0
2401d04a:	e7ee      	b.n	2401d02a <tanhf+0x2e>
2401d04c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401d050:	4c1c      	ldr	r4, [pc, #112]	; (2401d0c4 <tanhf+0xc8>)
2401d052:	db19      	blt.n	2401d088 <tanhf+0x8c>
2401d054:	f7ff ff98 	bl	2401cf88 <fabsf>
2401d058:	edd4 7a00 	vldr	s15, [r4]
2401d05c:	ee20 0a27 	vmul.f32	s0, s0, s15
2401d060:	f000 ffc2 	bl	2401dfe8 <expm1f>
2401d064:	4b15      	ldr	r3, [pc, #84]	; (2401d0bc <tanhf+0xc0>)
2401d066:	edd3 7a00 	vldr	s15, [r3]
2401d06a:	edd4 6a00 	vldr	s13, [r4]
2401d06e:	ed94 7a00 	vldr	s14, [r4]
2401d072:	ee37 0a00 	vadd.f32	s0, s14, s0
2401d076:	ee86 7a80 	vdiv.f32	s14, s13, s0
2401d07a:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401d07e:	2d00      	cmp	r5, #0
2401d080:	bfb8      	it	lt
2401d082:	eeb1 0a40 	vneglt.f32	s0, s0
2401d086:	e7d0      	b.n	2401d02a <tanhf+0x2e>
2401d088:	ed94 8a00 	vldr	s16, [r4]
2401d08c:	f7ff ff7c 	bl	2401cf88 <fabsf>
2401d090:	ee28 0a40 	vnmul.f32	s0, s16, s0
2401d094:	f000 ffa8 	bl	2401dfe8 <expm1f>
2401d098:	edd4 7a00 	vldr	s15, [r4]
2401d09c:	ee77 7a80 	vadd.f32	s15, s15, s0
2401d0a0:	eeb1 7a40 	vneg.f32	s14, s0
2401d0a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401d0a8:	e7e9      	b.n	2401d07e <tanhf+0x82>
2401d0aa:	4b04      	ldr	r3, [pc, #16]	; (2401d0bc <tanhf+0xc0>)
2401d0ac:	ed93 0a00 	vldr	s0, [r3]
2401d0b0:	4b05      	ldr	r3, [pc, #20]	; (2401d0c8 <tanhf+0xcc>)
2401d0b2:	edd3 7a00 	vldr	s15, [r3]
2401d0b6:	ee30 0a67 	vsub.f32	s0, s0, s15
2401d0ba:	e7e0      	b.n	2401d07e <tanhf+0x82>
2401d0bc:	20000a10 	.word	0x20000a10
2401d0c0:	41afffff 	.word	0x41afffff
2401d0c4:	20000a18 	.word	0x20000a18
2401d0c8:	20000a14 	.word	0x20000a14
2401d0cc:	00000000 	.word	0x00000000

2401d0d0 <tan>:
2401d0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2401d0d2:	eeb0 7b40 	vmov.f64	d7, d0
2401d0d6:	ee17 3a90 	vmov	r3, s15
2401d0da:	4a15      	ldr	r2, [pc, #84]	; (2401d130 <tan+0x60>)
2401d0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401d0e0:	4293      	cmp	r3, r2
2401d0e2:	dc07      	bgt.n	2401d0f4 <tan+0x24>
2401d0e4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 2401d128 <tan+0x58>
2401d0e8:	2001      	movs	r0, #1
2401d0ea:	b005      	add	sp, #20
2401d0ec:	f85d eb04 	ldr.w	lr, [sp], #4
2401d0f0:	f000 be5e 	b.w	2401ddb0 <__kernel_tan>
2401d0f4:	4a0f      	ldr	r2, [pc, #60]	; (2401d134 <tan+0x64>)
2401d0f6:	4293      	cmp	r3, r2
2401d0f8:	dd04      	ble.n	2401d104 <tan+0x34>
2401d0fa:	ee30 0b40 	vsub.f64	d0, d0, d0
2401d0fe:	b005      	add	sp, #20
2401d100:	f85d fb04 	ldr.w	pc, [sp], #4
2401d104:	4668      	mov	r0, sp
2401d106:	f000 fa7b 	bl	2401d600 <__ieee754_rem_pio2>
2401d10a:	0040      	lsls	r0, r0, #1
2401d10c:	f000 0002 	and.w	r0, r0, #2
2401d110:	ed9d 1b02 	vldr	d1, [sp, #8]
2401d114:	ed9d 0b00 	vldr	d0, [sp]
2401d118:	f1c0 0001 	rsb	r0, r0, #1
2401d11c:	f000 fe48 	bl	2401ddb0 <__kernel_tan>
2401d120:	e7ed      	b.n	2401d0fe <tan+0x2e>
2401d122:	bf00      	nop
2401d124:	f3af 8000 	nop.w
	...
2401d130:	3fe921fb 	.word	0x3fe921fb
2401d134:	7fefffff 	.word	0x7fefffff

2401d138 <__kernel_tanf>:
2401d138:	b508      	push	{r3, lr}
2401d13a:	ee10 3a10 	vmov	r3, s0
2401d13e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401d142:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
2401d146:	eef0 7a40 	vmov.f32	s15, s0
2401d14a:	da17      	bge.n	2401d17c <__kernel_tanf+0x44>
2401d14c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401d150:	ee17 1a10 	vmov	r1, s14
2401d154:	bb41      	cbnz	r1, 2401d1a8 <__kernel_tanf+0x70>
2401d156:	1c43      	adds	r3, r0, #1
2401d158:	4313      	orrs	r3, r2
2401d15a:	d108      	bne.n	2401d16e <__kernel_tanf+0x36>
2401d15c:	f7ff ff14 	bl	2401cf88 <fabsf>
2401d160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401d164:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401d168:	eeb0 0a67 	vmov.f32	s0, s15
2401d16c:	bd08      	pop	{r3, pc}
2401d16e:	2801      	cmp	r0, #1
2401d170:	d0fa      	beq.n	2401d168 <__kernel_tanf+0x30>
2401d172:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401d176:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401d17a:	e7f5      	b.n	2401d168 <__kernel_tanf+0x30>
2401d17c:	494c      	ldr	r1, [pc, #304]	; (2401d2b0 <__kernel_tanf+0x178>)
2401d17e:	428a      	cmp	r2, r1
2401d180:	db12      	blt.n	2401d1a8 <__kernel_tanf+0x70>
2401d182:	2b00      	cmp	r3, #0
2401d184:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2401d2b4 <__kernel_tanf+0x17c>
2401d188:	bfb8      	it	lt
2401d18a:	eef1 7a40 	vneglt.f32	s15, s0
2401d18e:	ee37 7a67 	vsub.f32	s14, s14, s15
2401d192:	eddf 7a49 	vldr	s15, [pc, #292]	; 2401d2b8 <__kernel_tanf+0x180>
2401d196:	bfb8      	it	lt
2401d198:	eef1 0a60 	vneglt.f32	s1, s1
2401d19c:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401d1a0:	eddf 0a46 	vldr	s1, [pc, #280]	; 2401d2bc <__kernel_tanf+0x184>
2401d1a4:	ee77 7a87 	vadd.f32	s15, s15, s14
2401d1a8:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401d1ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 2401d2c0 <__kernel_tanf+0x188>
2401d1b0:	ed9f 6a44 	vldr	s12, [pc, #272]	; 2401d2c4 <__kernel_tanf+0x18c>
2401d1b4:	ed9f 5a44 	vldr	s10, [pc, #272]	; 2401d2c8 <__kernel_tanf+0x190>
2401d1b8:	493d      	ldr	r1, [pc, #244]	; (2401d2b0 <__kernel_tanf+0x178>)
2401d1ba:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401d1be:	428a      	cmp	r2, r1
2401d1c0:	eea7 6a25 	vfma.f32	s12, s14, s11
2401d1c4:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401d2cc <__kernel_tanf+0x194>
2401d1c8:	eee6 5a07 	vfma.f32	s11, s12, s14
2401d1cc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401d2d0 <__kernel_tanf+0x198>
2401d1d0:	eea5 6a87 	vfma.f32	s12, s11, s14
2401d1d4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401d2d4 <__kernel_tanf+0x19c>
2401d1d8:	eee6 5a07 	vfma.f32	s11, s12, s14
2401d1dc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401d2d8 <__kernel_tanf+0x1a0>
2401d1e0:	eea5 6a87 	vfma.f32	s12, s11, s14
2401d1e4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401d2dc <__kernel_tanf+0x1a4>
2401d1e8:	eee7 5a05 	vfma.f32	s11, s14, s10
2401d1ec:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401d2e0 <__kernel_tanf+0x1a8>
2401d1f0:	eea5 5a87 	vfma.f32	s10, s11, s14
2401d1f4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401d2e4 <__kernel_tanf+0x1ac>
2401d1f8:	eee5 5a07 	vfma.f32	s11, s10, s14
2401d1fc:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401d2e8 <__kernel_tanf+0x1b0>
2401d200:	eea5 5a87 	vfma.f32	s10, s11, s14
2401d204:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401d2ec <__kernel_tanf+0x1b4>
2401d208:	eee5 5a07 	vfma.f32	s11, s10, s14
2401d20c:	eeb0 7a46 	vmov.f32	s14, s12
2401d210:	eea5 7aa6 	vfma.f32	s14, s11, s13
2401d214:	ee27 5aa6 	vmul.f32	s10, s15, s13
2401d218:	eeb0 6a60 	vmov.f32	s12, s1
2401d21c:	eea7 6a05 	vfma.f32	s12, s14, s10
2401d220:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401d2f0 <__kernel_tanf+0x1b8>
2401d224:	eee6 0a26 	vfma.f32	s1, s12, s13
2401d228:	eee5 0a07 	vfma.f32	s1, s10, s14
2401d22c:	ee77 6aa0 	vadd.f32	s13, s15, s1
2401d230:	db1d      	blt.n	2401d26e <__kernel_tanf+0x136>
2401d232:	ee07 0a10 	vmov	s14, r0
2401d236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401d23a:	ee66 5aa6 	vmul.f32	s11, s13, s13
2401d23e:	ee76 6a87 	vadd.f32	s13, s13, s14
2401d242:	179b      	asrs	r3, r3, #30
2401d244:	ee85 6aa6 	vdiv.f32	s12, s11, s13
2401d248:	f003 0302 	and.w	r3, r3, #2
2401d24c:	f1c3 0301 	rsb	r3, r3, #1
2401d250:	ee76 6a60 	vsub.f32	s13, s12, s1
2401d254:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401d258:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401d25c:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401d260:	ee07 3a90 	vmov	s15, r3
2401d264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401d268:	ee67 7a87 	vmul.f32	s15, s15, s14
2401d26c:	e77c      	b.n	2401d168 <__kernel_tanf+0x30>
2401d26e:	2801      	cmp	r0, #1
2401d270:	d01b      	beq.n	2401d2aa <__kernel_tanf+0x172>
2401d272:	4b20      	ldr	r3, [pc, #128]	; (2401d2f4 <__kernel_tanf+0x1bc>)
2401d274:	ee16 2a90 	vmov	r2, s13
2401d278:	401a      	ands	r2, r3
2401d27a:	ee05 2a90 	vmov	s11, r2
2401d27e:	ee75 7ae7 	vsub.f32	s15, s11, s15
2401d282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401d286:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401d28a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401d28e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
2401d292:	ee16 2a10 	vmov	r2, s12
2401d296:	4013      	ands	r3, r2
2401d298:	ee07 3a90 	vmov	s15, r3
2401d29c:	eea5 7aa7 	vfma.f32	s14, s11, s15
2401d2a0:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401d2a4:	eee7 7a06 	vfma.f32	s15, s14, s12
2401d2a8:	e75e      	b.n	2401d168 <__kernel_tanf+0x30>
2401d2aa:	eef0 7a66 	vmov.f32	s15, s13
2401d2ae:	e75b      	b.n	2401d168 <__kernel_tanf+0x30>
2401d2b0:	3f2ca140 	.word	0x3f2ca140
2401d2b4:	3f490fda 	.word	0x3f490fda
2401d2b8:	33222168 	.word	0x33222168
2401d2bc:	00000000 	.word	0x00000000
2401d2c0:	b79bae5f 	.word	0xb79bae5f
2401d2c4:	38a3f445 	.word	0x38a3f445
2401d2c8:	37d95384 	.word	0x37d95384
2401d2cc:	3a1a26c8 	.word	0x3a1a26c8
2401d2d0:	3b6b6916 	.word	0x3b6b6916
2401d2d4:	3cb327a4 	.word	0x3cb327a4
2401d2d8:	3e088889 	.word	0x3e088889
2401d2dc:	3895c07a 	.word	0x3895c07a
2401d2e0:	398137b9 	.word	0x398137b9
2401d2e4:	3abede48 	.word	0x3abede48
2401d2e8:	3c11371f 	.word	0x3c11371f
2401d2ec:	3d5d0dd1 	.word	0x3d5d0dd1
2401d2f0:	3eaaaaab 	.word	0x3eaaaaab
2401d2f4:	fffff000 	.word	0xfffff000

2401d2f8 <__ieee754_log10f>:
2401d2f8:	b508      	push	{r3, lr}
2401d2fa:	ee10 2a10 	vmov	r2, s0
2401d2fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401d302:	ed2d 8b02 	vpush	{d8}
2401d306:	d108      	bne.n	2401d31a <__ieee754_log10f+0x22>
2401d308:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2401d390 <__ieee754_log10f+0x98>
2401d30c:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401d394 <__ieee754_log10f+0x9c>
2401d310:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401d314:	ecbd 8b02 	vpop	{d8}
2401d318:	bd08      	pop	{r3, pc}
2401d31a:	2a00      	cmp	r2, #0
2401d31c:	da02      	bge.n	2401d324 <__ieee754_log10f+0x2c>
2401d31e:	ee30 7a40 	vsub.f32	s14, s0, s0
2401d322:	e7f3      	b.n	2401d30c <__ieee754_log10f+0x14>
2401d324:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401d328:	db02      	blt.n	2401d330 <__ieee754_log10f+0x38>
2401d32a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401d32e:	e7f1      	b.n	2401d314 <__ieee754_log10f+0x1c>
2401d330:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
2401d334:	bfbf      	itttt	lt
2401d336:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 2401d398 <__ieee754_log10f+0xa0>
2401d33a:	ee60 7a27 	vmullt.f32	s15, s0, s15
2401d33e:	f06f 0118 	mvnlt.w	r1, #24
2401d342:	ee17 2a90 	vmovlt	r2, s15
2401d346:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401d34a:	bfa8      	it	ge
2401d34c:	2100      	movge	r1, #0
2401d34e:	3b7f      	subs	r3, #127	; 0x7f
2401d350:	440b      	add	r3, r1
2401d352:	0fd9      	lsrs	r1, r3, #31
2401d354:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2401d358:	ee07 3a90 	vmov	s15, r3
2401d35c:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401d360:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
2401d364:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
2401d368:	ee00 3a10 	vmov	s0, r3
2401d36c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
2401d370:	f7ff fa32 	bl	2401c7d8 <logf>
2401d374:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401d39c <__ieee754_log10f+0xa4>
2401d378:	ee20 0a27 	vmul.f32	s0, s0, s15
2401d37c:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401d3a0 <__ieee754_log10f+0xa8>
2401d380:	eea8 0a27 	vfma.f32	s0, s16, s15
2401d384:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401d3a4 <__ieee754_log10f+0xac>
2401d388:	eea8 0a27 	vfma.f32	s0, s16, s15
2401d38c:	e7c2      	b.n	2401d314 <__ieee754_log10f+0x1c>
2401d38e:	bf00      	nop
2401d390:	cc000000 	.word	0xcc000000
2401d394:	00000000 	.word	0x00000000
2401d398:	4c000000 	.word	0x4c000000
2401d39c:	3ede5bd9 	.word	0x3ede5bd9
2401d3a0:	355427db 	.word	0x355427db
2401d3a4:	3e9a2080 	.word	0x3e9a2080

2401d3a8 <__ieee754_rem_pio2f>:
2401d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
2401d3aa:	ee10 6a10 	vmov	r6, s0
2401d3ae:	4b86      	ldr	r3, [pc, #536]	; (2401d5c8 <__ieee754_rem_pio2f+0x220>)
2401d3b0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
2401d3b4:	429d      	cmp	r5, r3
2401d3b6:	b087      	sub	sp, #28
2401d3b8:	4604      	mov	r4, r0
2401d3ba:	dc05      	bgt.n	2401d3c8 <__ieee754_rem_pio2f+0x20>
2401d3bc:	2300      	movs	r3, #0
2401d3be:	ed80 0a00 	vstr	s0, [r0]
2401d3c2:	6043      	str	r3, [r0, #4]
2401d3c4:	2000      	movs	r0, #0
2401d3c6:	e020      	b.n	2401d40a <__ieee754_rem_pio2f+0x62>
2401d3c8:	4b80      	ldr	r3, [pc, #512]	; (2401d5cc <__ieee754_rem_pio2f+0x224>)
2401d3ca:	429d      	cmp	r5, r3
2401d3cc:	dc38      	bgt.n	2401d440 <__ieee754_rem_pio2f+0x98>
2401d3ce:	2e00      	cmp	r6, #0
2401d3d0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 2401d5d0 <__ieee754_rem_pio2f+0x228>
2401d3d4:	4b7f      	ldr	r3, [pc, #508]	; (2401d5d4 <__ieee754_rem_pio2f+0x22c>)
2401d3d6:	f025 050f 	bic.w	r5, r5, #15
2401d3da:	dd18      	ble.n	2401d40e <__ieee754_rem_pio2f+0x66>
2401d3dc:	429d      	cmp	r5, r3
2401d3de:	ee70 7a47 	vsub.f32	s15, s0, s14
2401d3e2:	bf09      	itett	eq
2401d3e4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 2401d5d8 <__ieee754_rem_pio2f+0x230>
2401d3e8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 2401d5dc <__ieee754_rem_pio2f+0x234>
2401d3ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
2401d3f0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 2401d5e0 <__ieee754_rem_pio2f+0x238>
2401d3f4:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401d3f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401d3fc:	edc0 6a00 	vstr	s13, [r0]
2401d400:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401d404:	edc0 7a01 	vstr	s15, [r0, #4]
2401d408:	2001      	movs	r0, #1
2401d40a:	b007      	add	sp, #28
2401d40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401d40e:	429d      	cmp	r5, r3
2401d410:	ee70 7a07 	vadd.f32	s15, s0, s14
2401d414:	bf09      	itett	eq
2401d416:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 2401d5d8 <__ieee754_rem_pio2f+0x230>
2401d41a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 2401d5dc <__ieee754_rem_pio2f+0x234>
2401d41e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
2401d422:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 2401d5e0 <__ieee754_rem_pio2f+0x238>
2401d426:	ee77 6a87 	vadd.f32	s13, s15, s14
2401d42a:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401d42e:	edc0 6a00 	vstr	s13, [r0]
2401d432:	ee77 7a87 	vadd.f32	s15, s15, s14
2401d436:	edc0 7a01 	vstr	s15, [r0, #4]
2401d43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401d43e:	e7e4      	b.n	2401d40a <__ieee754_rem_pio2f+0x62>
2401d440:	4b68      	ldr	r3, [pc, #416]	; (2401d5e4 <__ieee754_rem_pio2f+0x23c>)
2401d442:	429d      	cmp	r5, r3
2401d444:	dc71      	bgt.n	2401d52a <__ieee754_rem_pio2f+0x182>
2401d446:	f7ff fd9f 	bl	2401cf88 <fabsf>
2401d44a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 2401d5e8 <__ieee754_rem_pio2f+0x240>
2401d44e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401d452:	eee0 7a07 	vfma.f32	s15, s0, s14
2401d456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401d45a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401d45e:	ee17 0a90 	vmov	r0, s15
2401d462:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401d5d0 <__ieee754_rem_pio2f+0x228>
2401d466:	eea7 0a67 	vfms.f32	s0, s14, s15
2401d46a:	281f      	cmp	r0, #31
2401d46c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401d5dc <__ieee754_rem_pio2f+0x234>
2401d470:	ee67 7a27 	vmul.f32	s15, s14, s15
2401d474:	eeb1 6a47 	vneg.f32	s12, s14
2401d478:	ee70 6a67 	vsub.f32	s13, s0, s15
2401d47c:	ee16 2a90 	vmov	r2, s13
2401d480:	dc1c      	bgt.n	2401d4bc <__ieee754_rem_pio2f+0x114>
2401d482:	495a      	ldr	r1, [pc, #360]	; (2401d5ec <__ieee754_rem_pio2f+0x244>)
2401d484:	1e47      	subs	r7, r0, #1
2401d486:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
2401d48a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401d48e:	428b      	cmp	r3, r1
2401d490:	d014      	beq.n	2401d4bc <__ieee754_rem_pio2f+0x114>
2401d492:	6022      	str	r2, [r4, #0]
2401d494:	ed94 7a00 	vldr	s14, [r4]
2401d498:	ee30 0a47 	vsub.f32	s0, s0, s14
2401d49c:	2e00      	cmp	r6, #0
2401d49e:	ee30 0a67 	vsub.f32	s0, s0, s15
2401d4a2:	ed84 0a01 	vstr	s0, [r4, #4]
2401d4a6:	dab0      	bge.n	2401d40a <__ieee754_rem_pio2f+0x62>
2401d4a8:	eeb1 7a47 	vneg.f32	s14, s14
2401d4ac:	eeb1 0a40 	vneg.f32	s0, s0
2401d4b0:	ed84 7a00 	vstr	s14, [r4]
2401d4b4:	ed84 0a01 	vstr	s0, [r4, #4]
2401d4b8:	4240      	negs	r0, r0
2401d4ba:	e7a6      	b.n	2401d40a <__ieee754_rem_pio2f+0x62>
2401d4bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401d4c0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
2401d4c4:	2908      	cmp	r1, #8
2401d4c6:	ea4f 53e5 	mov.w	r3, r5, asr #23
2401d4ca:	dde2      	ble.n	2401d492 <__ieee754_rem_pio2f+0xea>
2401d4cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 2401d5d8 <__ieee754_rem_pio2f+0x230>
2401d4d0:	eef0 6a40 	vmov.f32	s13, s0
2401d4d4:	eee6 6a25 	vfma.f32	s13, s12, s11
2401d4d8:	ee70 7a66 	vsub.f32	s15, s0, s13
2401d4dc:	eee6 7a25 	vfma.f32	s15, s12, s11
2401d4e0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401d5e0 <__ieee754_rem_pio2f+0x238>
2401d4e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
2401d4e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401d4ec:	ee15 2a90 	vmov	r2, s11
2401d4f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401d4f4:	1a5b      	subs	r3, r3, r1
2401d4f6:	2b19      	cmp	r3, #25
2401d4f8:	dc04      	bgt.n	2401d504 <__ieee754_rem_pio2f+0x15c>
2401d4fa:	edc4 5a00 	vstr	s11, [r4]
2401d4fe:	eeb0 0a66 	vmov.f32	s0, s13
2401d502:	e7c7      	b.n	2401d494 <__ieee754_rem_pio2f+0xec>
2401d504:	eddf 5a3a 	vldr	s11, [pc, #232]	; 2401d5f0 <__ieee754_rem_pio2f+0x248>
2401d508:	eeb0 0a66 	vmov.f32	s0, s13
2401d50c:	eea6 0a25 	vfma.f32	s0, s12, s11
2401d510:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401d514:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401d5f4 <__ieee754_rem_pio2f+0x24c>
2401d518:	eee6 7a25 	vfma.f32	s15, s12, s11
2401d51c:	eed7 7a26 	vfnms.f32	s15, s14, s13
2401d520:	ee30 7a67 	vsub.f32	s14, s0, s15
2401d524:	ed84 7a00 	vstr	s14, [r4]
2401d528:	e7b4      	b.n	2401d494 <__ieee754_rem_pio2f+0xec>
2401d52a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
2401d52e:	db06      	blt.n	2401d53e <__ieee754_rem_pio2f+0x196>
2401d530:	ee70 7a40 	vsub.f32	s15, s0, s0
2401d534:	edc0 7a01 	vstr	s15, [r0, #4]
2401d538:	edc0 7a00 	vstr	s15, [r0]
2401d53c:	e742      	b.n	2401d3c4 <__ieee754_rem_pio2f+0x1c>
2401d53e:	15ea      	asrs	r2, r5, #23
2401d540:	3a86      	subs	r2, #134	; 0x86
2401d542:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
2401d546:	ee07 3a90 	vmov	s15, r3
2401d54a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401d54e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 2401d5f8 <__ieee754_rem_pio2f+0x250>
2401d552:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401d556:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401d55a:	ed8d 7a03 	vstr	s14, [sp, #12]
2401d55e:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401d562:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401d566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401d56a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401d56e:	ed8d 7a04 	vstr	s14, [sp, #16]
2401d572:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401d576:	eef5 7a40 	vcmp.f32	s15, #0.0
2401d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401d57e:	edcd 7a05 	vstr	s15, [sp, #20]
2401d582:	d11e      	bne.n	2401d5c2 <__ieee754_rem_pio2f+0x21a>
2401d584:	eeb5 7a40 	vcmp.f32	s14, #0.0
2401d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401d58c:	bf14      	ite	ne
2401d58e:	2302      	movne	r3, #2
2401d590:	2301      	moveq	r3, #1
2401d592:	491a      	ldr	r1, [pc, #104]	; (2401d5fc <__ieee754_rem_pio2f+0x254>)
2401d594:	9101      	str	r1, [sp, #4]
2401d596:	2102      	movs	r1, #2
2401d598:	9100      	str	r1, [sp, #0]
2401d59a:	a803      	add	r0, sp, #12
2401d59c:	4621      	mov	r1, r4
2401d59e:	f000 fec9 	bl	2401e334 <__kernel_rem_pio2f>
2401d5a2:	2e00      	cmp	r6, #0
2401d5a4:	f6bf af31 	bge.w	2401d40a <__ieee754_rem_pio2f+0x62>
2401d5a8:	edd4 7a00 	vldr	s15, [r4]
2401d5ac:	eef1 7a67 	vneg.f32	s15, s15
2401d5b0:	edc4 7a00 	vstr	s15, [r4]
2401d5b4:	edd4 7a01 	vldr	s15, [r4, #4]
2401d5b8:	eef1 7a67 	vneg.f32	s15, s15
2401d5bc:	edc4 7a01 	vstr	s15, [r4, #4]
2401d5c0:	e77a      	b.n	2401d4b8 <__ieee754_rem_pio2f+0x110>
2401d5c2:	2303      	movs	r3, #3
2401d5c4:	e7e5      	b.n	2401d592 <__ieee754_rem_pio2f+0x1ea>
2401d5c6:	bf00      	nop
2401d5c8:	3f490fd8 	.word	0x3f490fd8
2401d5cc:	4016cbe3 	.word	0x4016cbe3
2401d5d0:	3fc90f80 	.word	0x3fc90f80
2401d5d4:	3fc90fd0 	.word	0x3fc90fd0
2401d5d8:	37354400 	.word	0x37354400
2401d5dc:	37354443 	.word	0x37354443
2401d5e0:	2e85a308 	.word	0x2e85a308
2401d5e4:	43490f80 	.word	0x43490f80
2401d5e8:	3f22f984 	.word	0x3f22f984
2401d5ec:	2402dcb8 	.word	0x2402dcb8
2401d5f0:	2e85a300 	.word	0x2e85a300
2401d5f4:	248d3132 	.word	0x248d3132
2401d5f8:	43800000 	.word	0x43800000
2401d5fc:	2402dd38 	.word	0x2402dd38

2401d600 <__ieee754_rem_pio2>:
2401d600:	b570      	push	{r4, r5, r6, lr}
2401d602:	eeb0 7b40 	vmov.f64	d7, d0
2401d606:	ee17 5a90 	vmov	r5, s15
2401d60a:	4b99      	ldr	r3, [pc, #612]	; (2401d870 <__ieee754_rem_pio2+0x270>)
2401d60c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
2401d610:	429e      	cmp	r6, r3
2401d612:	b088      	sub	sp, #32
2401d614:	4604      	mov	r4, r0
2401d616:	dc07      	bgt.n	2401d628 <__ieee754_rem_pio2+0x28>
2401d618:	2200      	movs	r2, #0
2401d61a:	2300      	movs	r3, #0
2401d61c:	ed84 0b00 	vstr	d0, [r4]
2401d620:	e9c0 2302 	strd	r2, r3, [r0, #8]
2401d624:	2000      	movs	r0, #0
2401d626:	e01b      	b.n	2401d660 <__ieee754_rem_pio2+0x60>
2401d628:	4b92      	ldr	r3, [pc, #584]	; (2401d874 <__ieee754_rem_pio2+0x274>)
2401d62a:	429e      	cmp	r6, r3
2401d62c:	dc3b      	bgt.n	2401d6a6 <__ieee754_rem_pio2+0xa6>
2401d62e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401d632:	2d00      	cmp	r5, #0
2401d634:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 2401d830 <__ieee754_rem_pio2+0x230>
2401d638:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
2401d63c:	dd19      	ble.n	2401d672 <__ieee754_rem_pio2+0x72>
2401d63e:	ee30 7b46 	vsub.f64	d7, d0, d6
2401d642:	429e      	cmp	r6, r3
2401d644:	d00e      	beq.n	2401d664 <__ieee754_rem_pio2+0x64>
2401d646:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 2401d838 <__ieee754_rem_pio2+0x238>
2401d64a:	ee37 5b46 	vsub.f64	d5, d7, d6
2401d64e:	ee37 7b45 	vsub.f64	d7, d7, d5
2401d652:	ed84 5b00 	vstr	d5, [r4]
2401d656:	ee37 7b46 	vsub.f64	d7, d7, d6
2401d65a:	ed84 7b02 	vstr	d7, [r4, #8]
2401d65e:	2001      	movs	r0, #1
2401d660:	b008      	add	sp, #32
2401d662:	bd70      	pop	{r4, r5, r6, pc}
2401d664:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401d840 <__ieee754_rem_pio2+0x240>
2401d668:	ee37 7b46 	vsub.f64	d7, d7, d6
2401d66c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401d848 <__ieee754_rem_pio2+0x248>
2401d670:	e7eb      	b.n	2401d64a <__ieee754_rem_pio2+0x4a>
2401d672:	429e      	cmp	r6, r3
2401d674:	ee30 7b06 	vadd.f64	d7, d0, d6
2401d678:	d00e      	beq.n	2401d698 <__ieee754_rem_pio2+0x98>
2401d67a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 2401d838 <__ieee754_rem_pio2+0x238>
2401d67e:	ee37 5b06 	vadd.f64	d5, d7, d6
2401d682:	ee37 7b45 	vsub.f64	d7, d7, d5
2401d686:	ed84 5b00 	vstr	d5, [r4]
2401d68a:	ee37 7b06 	vadd.f64	d7, d7, d6
2401d68e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401d692:	ed84 7b02 	vstr	d7, [r4, #8]
2401d696:	e7e3      	b.n	2401d660 <__ieee754_rem_pio2+0x60>
2401d698:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401d840 <__ieee754_rem_pio2+0x240>
2401d69c:	ee37 7b06 	vadd.f64	d7, d7, d6
2401d6a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401d848 <__ieee754_rem_pio2+0x248>
2401d6a4:	e7eb      	b.n	2401d67e <__ieee754_rem_pio2+0x7e>
2401d6a6:	4b74      	ldr	r3, [pc, #464]	; (2401d878 <__ieee754_rem_pio2+0x278>)
2401d6a8:	429e      	cmp	r6, r3
2401d6aa:	dc70      	bgt.n	2401d78e <__ieee754_rem_pio2+0x18e>
2401d6ac:	f000 fdb8 	bl	2401e220 <fabs>
2401d6b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401d6b4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 2401d850 <__ieee754_rem_pio2+0x250>
2401d6b8:	eea0 7b06 	vfma.f64	d7, d0, d6
2401d6bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
2401d6c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401d6c4:	ee17 0a90 	vmov	r0, s15
2401d6c8:	eeb1 4b45 	vneg.f64	d4, d5
2401d6cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401d830 <__ieee754_rem_pio2+0x230>
2401d6d0:	eea5 0b47 	vfms.f64	d0, d5, d7
2401d6d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401d838 <__ieee754_rem_pio2+0x238>
2401d6d8:	281f      	cmp	r0, #31
2401d6da:	ee25 7b07 	vmul.f64	d7, d5, d7
2401d6de:	ee30 6b47 	vsub.f64	d6, d0, d7
2401d6e2:	dc08      	bgt.n	2401d6f6 <__ieee754_rem_pio2+0xf6>
2401d6e4:	4b65      	ldr	r3, [pc, #404]	; (2401d87c <__ieee754_rem_pio2+0x27c>)
2401d6e6:	1e42      	subs	r2, r0, #1
2401d6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401d6ec:	42b3      	cmp	r3, r6
2401d6ee:	d002      	beq.n	2401d6f6 <__ieee754_rem_pio2+0xf6>
2401d6f0:	ed84 6b00 	vstr	d6, [r4]
2401d6f4:	e024      	b.n	2401d740 <__ieee754_rem_pio2+0x140>
2401d6f6:	ee16 3a90 	vmov	r3, s13
2401d6fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401d6fe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
2401d702:	2b10      	cmp	r3, #16
2401d704:	ea4f 5226 	mov.w	r2, r6, asr #20
2401d708:	ddf2      	ble.n	2401d6f0 <__ieee754_rem_pio2+0xf0>
2401d70a:	eeb0 6b40 	vmov.f64	d6, d0
2401d70e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 2401d840 <__ieee754_rem_pio2+0x240>
2401d712:	eea4 6b03 	vfma.f64	d6, d4, d3
2401d716:	ee30 7b46 	vsub.f64	d7, d0, d6
2401d71a:	eea4 7b03 	vfma.f64	d7, d4, d3
2401d71e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 2401d848 <__ieee754_rem_pio2+0x248>
2401d722:	ee95 7b03 	vfnms.f64	d7, d5, d3
2401d726:	ee36 3b47 	vsub.f64	d3, d6, d7
2401d72a:	ee13 3a90 	vmov	r3, s7
2401d72e:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401d732:	1ad3      	subs	r3, r2, r3
2401d734:	2b31      	cmp	r3, #49	; 0x31
2401d736:	dc17      	bgt.n	2401d768 <__ieee754_rem_pio2+0x168>
2401d738:	eeb0 0b46 	vmov.f64	d0, d6
2401d73c:	ed84 3b00 	vstr	d3, [r4]
2401d740:	ed94 6b00 	vldr	d6, [r4]
2401d744:	2d00      	cmp	r5, #0
2401d746:	ee30 0b46 	vsub.f64	d0, d0, d6
2401d74a:	ee30 0b47 	vsub.f64	d0, d0, d7
2401d74e:	ed84 0b02 	vstr	d0, [r4, #8]
2401d752:	da85      	bge.n	2401d660 <__ieee754_rem_pio2+0x60>
2401d754:	eeb1 6b46 	vneg.f64	d6, d6
2401d758:	eeb1 0b40 	vneg.f64	d0, d0
2401d75c:	ed84 6b00 	vstr	d6, [r4]
2401d760:	ed84 0b02 	vstr	d0, [r4, #8]
2401d764:	4240      	negs	r0, r0
2401d766:	e77b      	b.n	2401d660 <__ieee754_rem_pio2+0x60>
2401d768:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2401d858 <__ieee754_rem_pio2+0x258>
2401d76c:	eeb0 0b46 	vmov.f64	d0, d6
2401d770:	eea4 0b07 	vfma.f64	d0, d4, d7
2401d774:	ee36 6b40 	vsub.f64	d6, d6, d0
2401d778:	eea4 6b07 	vfma.f64	d6, d4, d7
2401d77c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 2401d860 <__ieee754_rem_pio2+0x260>
2401d780:	eeb0 7b46 	vmov.f64	d7, d6
2401d784:	ee95 7b04 	vfnms.f64	d7, d5, d4
2401d788:	ee30 6b47 	vsub.f64	d6, d0, d7
2401d78c:	e7b0      	b.n	2401d6f0 <__ieee754_rem_pio2+0xf0>
2401d78e:	4b3c      	ldr	r3, [pc, #240]	; (2401d880 <__ieee754_rem_pio2+0x280>)
2401d790:	429e      	cmp	r6, r3
2401d792:	dd06      	ble.n	2401d7a2 <__ieee754_rem_pio2+0x1a2>
2401d794:	ee30 7b40 	vsub.f64	d7, d0, d0
2401d798:	ed80 7b02 	vstr	d7, [r0, #8]
2401d79c:	ed80 7b00 	vstr	d7, [r0]
2401d7a0:	e740      	b.n	2401d624 <__ieee754_rem_pio2+0x24>
2401d7a2:	1532      	asrs	r2, r6, #20
2401d7a4:	ee10 0a10 	vmov	r0, s0
2401d7a8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
2401d7ac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
2401d7b0:	ec41 0b17 	vmov	d7, r0, r1
2401d7b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401d7b8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 2401d868 <__ieee754_rem_pio2+0x268>
2401d7bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401d7c0:	ee37 7b46 	vsub.f64	d7, d7, d6
2401d7c4:	ed8d 6b02 	vstr	d6, [sp, #8]
2401d7c8:	ee27 7b05 	vmul.f64	d7, d7, d5
2401d7cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401d7d0:	a808      	add	r0, sp, #32
2401d7d2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401d7d6:	ee37 7b46 	vsub.f64	d7, d7, d6
2401d7da:	ed8d 6b04 	vstr	d6, [sp, #16]
2401d7de:	ee27 7b05 	vmul.f64	d7, d7, d5
2401d7e2:	ed8d 7b06 	vstr	d7, [sp, #24]
2401d7e6:	2103      	movs	r1, #3
2401d7e8:	ed30 7b02 	vldmdb	r0!, {d7}
2401d7ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
2401d7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401d7f4:	460b      	mov	r3, r1
2401d7f6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
2401d7fa:	d0f5      	beq.n	2401d7e8 <__ieee754_rem_pio2+0x1e8>
2401d7fc:	4921      	ldr	r1, [pc, #132]	; (2401d884 <__ieee754_rem_pio2+0x284>)
2401d7fe:	9101      	str	r1, [sp, #4]
2401d800:	2102      	movs	r1, #2
2401d802:	9100      	str	r1, [sp, #0]
2401d804:	a802      	add	r0, sp, #8
2401d806:	4621      	mov	r1, r4
2401d808:	f000 f83e 	bl	2401d888 <__kernel_rem_pio2>
2401d80c:	2d00      	cmp	r5, #0
2401d80e:	f6bf af27 	bge.w	2401d660 <__ieee754_rem_pio2+0x60>
2401d812:	ed94 7b00 	vldr	d7, [r4]
2401d816:	eeb1 7b47 	vneg.f64	d7, d7
2401d81a:	ed84 7b00 	vstr	d7, [r4]
2401d81e:	ed94 7b02 	vldr	d7, [r4, #8]
2401d822:	eeb1 7b47 	vneg.f64	d7, d7
2401d826:	ed84 7b02 	vstr	d7, [r4, #8]
2401d82a:	e79b      	b.n	2401d764 <__ieee754_rem_pio2+0x164>
2401d82c:	f3af 8000 	nop.w
2401d830:	54400000 	.word	0x54400000
2401d834:	3ff921fb 	.word	0x3ff921fb
2401d838:	1a626331 	.word	0x1a626331
2401d83c:	3dd0b461 	.word	0x3dd0b461
2401d840:	1a600000 	.word	0x1a600000
2401d844:	3dd0b461 	.word	0x3dd0b461
2401d848:	2e037073 	.word	0x2e037073
2401d84c:	3ba3198a 	.word	0x3ba3198a
2401d850:	6dc9c883 	.word	0x6dc9c883
2401d854:	3fe45f30 	.word	0x3fe45f30
2401d858:	2e000000 	.word	0x2e000000
2401d85c:	3ba3198a 	.word	0x3ba3198a
2401d860:	252049c1 	.word	0x252049c1
2401d864:	397b839a 	.word	0x397b839a
2401d868:	00000000 	.word	0x00000000
2401d86c:	41700000 	.word	0x41700000
2401d870:	3fe921fb 	.word	0x3fe921fb
2401d874:	4002d97b 	.word	0x4002d97b
2401d878:	413921fb 	.word	0x413921fb
2401d87c:	2402e050 	.word	0x2402e050
2401d880:	7fefffff 	.word	0x7fefffff
2401d884:	2402e0d0 	.word	0x2402e0d0

2401d888 <__kernel_rem_pio2>:
2401d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401d88c:	ed2d 8b06 	vpush	{d8-d10}
2401d890:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
2401d894:	460f      	mov	r7, r1
2401d896:	9002      	str	r0, [sp, #8]
2401d898:	49c3      	ldr	r1, [pc, #780]	; (2401dba8 <__kernel_rem_pio2+0x320>)
2401d89a:	98a2      	ldr	r0, [sp, #648]	; 0x288
2401d89c:	9301      	str	r3, [sp, #4]
2401d89e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
2401d8a2:	9901      	ldr	r1, [sp, #4]
2401d8a4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
2401d8a6:	f112 0f14 	cmn.w	r2, #20
2401d8aa:	bfa8      	it	ge
2401d8ac:	1ed0      	subge	r0, r2, #3
2401d8ae:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
2401d8b2:	bfaa      	itet	ge
2401d8b4:	2418      	movge	r4, #24
2401d8b6:	2000      	movlt	r0, #0
2401d8b8:	fb90 f0f4 	sdivge	r0, r0, r4
2401d8bc:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 2401db90 <__kernel_rem_pio2+0x308>
2401d8c0:	f06f 0417 	mvn.w	r4, #23
2401d8c4:	fb00 4404 	mla	r4, r0, r4, r4
2401d8c8:	eba0 060a 	sub.w	r6, r0, sl
2401d8cc:	4414      	add	r4, r2
2401d8ce:	eb09 0c0a 	add.w	ip, r9, sl
2401d8d2:	ad1a      	add	r5, sp, #104	; 0x68
2401d8d4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
2401d8d8:	2200      	movs	r2, #0
2401d8da:	4562      	cmp	r2, ip
2401d8dc:	dd10      	ble.n	2401d900 <__kernel_rem_pio2+0x78>
2401d8de:	9a01      	ldr	r2, [sp, #4]
2401d8e0:	a91a      	add	r1, sp, #104	; 0x68
2401d8e2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
2401d8e6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
2401d8ea:	f04f 0c00 	mov.w	ip, #0
2401d8ee:	45cc      	cmp	ip, r9
2401d8f0:	dc26      	bgt.n	2401d940 <__kernel_rem_pio2+0xb8>
2401d8f2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 2401db90 <__kernel_rem_pio2+0x308>
2401d8f6:	f8dd e008 	ldr.w	lr, [sp, #8]
2401d8fa:	4616      	mov	r6, r2
2401d8fc:	2500      	movs	r5, #0
2401d8fe:	e015      	b.n	2401d92c <__kernel_rem_pio2+0xa4>
2401d900:	42d6      	cmn	r6, r2
2401d902:	d409      	bmi.n	2401d918 <__kernel_rem_pio2+0x90>
2401d904:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
2401d908:	ee07 1a90 	vmov	s15, r1
2401d90c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401d910:	eca5 7b02 	vstmia	r5!, {d7}
2401d914:	3201      	adds	r2, #1
2401d916:	e7e0      	b.n	2401d8da <__kernel_rem_pio2+0x52>
2401d918:	eeb0 7b46 	vmov.f64	d7, d6
2401d91c:	e7f8      	b.n	2401d910 <__kernel_rem_pio2+0x88>
2401d91e:	ecbe 5b02 	vldmia	lr!, {d5}
2401d922:	ed96 6b00 	vldr	d6, [r6]
2401d926:	3501      	adds	r5, #1
2401d928:	eea5 7b06 	vfma.f64	d7, d5, d6
2401d92c:	4555      	cmp	r5, sl
2401d92e:	f1a6 0608 	sub.w	r6, r6, #8
2401d932:	ddf4      	ble.n	2401d91e <__kernel_rem_pio2+0x96>
2401d934:	eca8 7b02 	vstmia	r8!, {d7}
2401d938:	f10c 0c01 	add.w	ip, ip, #1
2401d93c:	3208      	adds	r2, #8
2401d93e:	e7d6      	b.n	2401d8ee <__kernel_rem_pio2+0x66>
2401d940:	aa06      	add	r2, sp, #24
2401d942:	ed9f 9b95 	vldr	d9, [pc, #596]	; 2401db98 <__kernel_rem_pio2+0x310>
2401d946:	ed9f ab96 	vldr	d10, [pc, #600]	; 2401dba0 <__kernel_rem_pio2+0x318>
2401d94a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
2401d94e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401d952:	9204      	str	r2, [sp, #16]
2401d954:	9303      	str	r3, [sp, #12]
2401d956:	464d      	mov	r5, r9
2401d958:	00eb      	lsls	r3, r5, #3
2401d95a:	9305      	str	r3, [sp, #20]
2401d95c:	ab92      	add	r3, sp, #584	; 0x248
2401d95e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401d962:	f10d 0b18 	add.w	fp, sp, #24
2401d966:	ab6a      	add	r3, sp, #424	; 0x1a8
2401d968:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401d96c:	465e      	mov	r6, fp
2401d96e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401d972:	4628      	mov	r0, r5
2401d974:	2800      	cmp	r0, #0
2401d976:	f1a2 0208 	sub.w	r2, r2, #8
2401d97a:	dc48      	bgt.n	2401da0e <__kernel_rem_pio2+0x186>
2401d97c:	4620      	mov	r0, r4
2401d97e:	f000 fc5b 	bl	2401e238 <scalbn>
2401d982:	eeb0 8b40 	vmov.f64	d8, d0
2401d986:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
2401d98a:	ee28 0b00 	vmul.f64	d0, d8, d0
2401d98e:	f000 ff43 	bl	2401e818 <floor>
2401d992:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
2401d996:	eea0 8b47 	vfms.f64	d8, d0, d7
2401d99a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
2401d99e:	2c00      	cmp	r4, #0
2401d9a0:	ee17 8a90 	vmov	r8, s15
2401d9a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401d9a8:	ee38 8b47 	vsub.f64	d8, d8, d7
2401d9ac:	dd41      	ble.n	2401da32 <__kernel_rem_pio2+0x1aa>
2401d9ae:	1e68      	subs	r0, r5, #1
2401d9b0:	ab06      	add	r3, sp, #24
2401d9b2:	f1c4 0c18 	rsb	ip, r4, #24
2401d9b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
2401d9ba:	fa46 f20c 	asr.w	r2, r6, ip
2401d9be:	4490      	add	r8, r2
2401d9c0:	fa02 f20c 	lsl.w	r2, r2, ip
2401d9c4:	1ab6      	subs	r6, r6, r2
2401d9c6:	f1c4 0217 	rsb	r2, r4, #23
2401d9ca:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
2401d9ce:	4116      	asrs	r6, r2
2401d9d0:	2e00      	cmp	r6, #0
2401d9d2:	dd3d      	ble.n	2401da50 <__kernel_rem_pio2+0x1c8>
2401d9d4:	f04f 0c00 	mov.w	ip, #0
2401d9d8:	f108 0801 	add.w	r8, r8, #1
2401d9dc:	4660      	mov	r0, ip
2401d9de:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
2401d9e2:	4565      	cmp	r5, ip
2401d9e4:	dc6a      	bgt.n	2401dabc <__kernel_rem_pio2+0x234>
2401d9e6:	2c00      	cmp	r4, #0
2401d9e8:	dd04      	ble.n	2401d9f4 <__kernel_rem_pio2+0x16c>
2401d9ea:	2c01      	cmp	r4, #1
2401d9ec:	d07b      	beq.n	2401dae6 <__kernel_rem_pio2+0x25e>
2401d9ee:	2c02      	cmp	r4, #2
2401d9f0:	f000 8083 	beq.w	2401dafa <__kernel_rem_pio2+0x272>
2401d9f4:	2e02      	cmp	r6, #2
2401d9f6:	d12b      	bne.n	2401da50 <__kernel_rem_pio2+0x1c8>
2401d9f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401d9fc:	ee30 8b48 	vsub.f64	d8, d0, d8
2401da00:	b330      	cbz	r0, 2401da50 <__kernel_rem_pio2+0x1c8>
2401da02:	4620      	mov	r0, r4
2401da04:	f000 fc18 	bl	2401e238 <scalbn>
2401da08:	ee38 8b40 	vsub.f64	d8, d8, d0
2401da0c:	e020      	b.n	2401da50 <__kernel_rem_pio2+0x1c8>
2401da0e:	ee20 7b09 	vmul.f64	d7, d0, d9
2401da12:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401da16:	3801      	subs	r0, #1
2401da18:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401da1c:	eea7 0b4a 	vfms.f64	d0, d7, d10
2401da20:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401da24:	eca6 0a01 	vstmia	r6!, {s0}
2401da28:	ed92 0b00 	vldr	d0, [r2]
2401da2c:	ee37 0b00 	vadd.f64	d0, d7, d0
2401da30:	e7a0      	b.n	2401d974 <__kernel_rem_pio2+0xec>
2401da32:	d105      	bne.n	2401da40 <__kernel_rem_pio2+0x1b8>
2401da34:	1e6a      	subs	r2, r5, #1
2401da36:	ab06      	add	r3, sp, #24
2401da38:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
2401da3c:	15f6      	asrs	r6, r6, #23
2401da3e:	e7c7      	b.n	2401d9d0 <__kernel_rem_pio2+0x148>
2401da40:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401da44:	eeb4 8bc7 	vcmpe.f64	d8, d7
2401da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401da4c:	da34      	bge.n	2401dab8 <__kernel_rem_pio2+0x230>
2401da4e:	2600      	movs	r6, #0
2401da50:	eeb5 8b40 	vcmp.f64	d8, #0.0
2401da54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401da58:	f040 80aa 	bne.w	2401dbb0 <__kernel_rem_pio2+0x328>
2401da5c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
2401da60:	4658      	mov	r0, fp
2401da62:	2200      	movs	r2, #0
2401da64:	4548      	cmp	r0, r9
2401da66:	da50      	bge.n	2401db0a <__kernel_rem_pio2+0x282>
2401da68:	2a00      	cmp	r2, #0
2401da6a:	d06b      	beq.n	2401db44 <__kernel_rem_pio2+0x2bc>
2401da6c:	ab06      	add	r3, sp, #24
2401da6e:	3c18      	subs	r4, #24
2401da70:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
2401da74:	2b00      	cmp	r3, #0
2401da76:	f000 8087 	beq.w	2401db88 <__kernel_rem_pio2+0x300>
2401da7a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401da7e:	4620      	mov	r0, r4
2401da80:	f000 fbda 	bl	2401e238 <scalbn>
2401da84:	ed9f 6b44 	vldr	d6, [pc, #272]	; 2401db98 <__kernel_rem_pio2+0x310>
2401da88:	f10b 0201 	add.w	r2, fp, #1
2401da8c:	a96a      	add	r1, sp, #424	; 0x1a8
2401da8e:	00d3      	lsls	r3, r2, #3
2401da90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
2401da94:	465a      	mov	r2, fp
2401da96:	2a00      	cmp	r2, #0
2401da98:	f280 80b8 	bge.w	2401dc0c <__kernel_rem_pio2+0x384>
2401da9c:	465a      	mov	r2, fp
2401da9e:	2a00      	cmp	r2, #0
2401daa0:	f2c0 80d6 	blt.w	2401dc50 <__kernel_rem_pio2+0x3c8>
2401daa4:	a96a      	add	r1, sp, #424	; 0x1a8
2401daa6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
2401daaa:	ed9f 7b39 	vldr	d7, [pc, #228]	; 2401db90 <__kernel_rem_pio2+0x308>
2401daae:	4d3f      	ldr	r5, [pc, #252]	; (2401dbac <__kernel_rem_pio2+0x324>)
2401dab0:	2000      	movs	r0, #0
2401dab2:	ebab 0102 	sub.w	r1, fp, r2
2401dab6:	e0c0      	b.n	2401dc3a <__kernel_rem_pio2+0x3b2>
2401dab8:	2602      	movs	r6, #2
2401daba:	e78b      	b.n	2401d9d4 <__kernel_rem_pio2+0x14c>
2401dabc:	f8db 2000 	ldr.w	r2, [fp]
2401dac0:	b958      	cbnz	r0, 2401dada <__kernel_rem_pio2+0x252>
2401dac2:	b122      	cbz	r2, 2401dace <__kernel_rem_pio2+0x246>
2401dac4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
2401dac8:	f8cb 2000 	str.w	r2, [fp]
2401dacc:	2201      	movs	r2, #1
2401dace:	f10c 0c01 	add.w	ip, ip, #1
2401dad2:	f10b 0b04 	add.w	fp, fp, #4
2401dad6:	4610      	mov	r0, r2
2401dad8:	e783      	b.n	2401d9e2 <__kernel_rem_pio2+0x15a>
2401dada:	ebae 0202 	sub.w	r2, lr, r2
2401dade:	f8cb 2000 	str.w	r2, [fp]
2401dae2:	4602      	mov	r2, r0
2401dae4:	e7f3      	b.n	2401dace <__kernel_rem_pio2+0x246>
2401dae6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401daea:	ab06      	add	r3, sp, #24
2401daec:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401daf0:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401daf4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
2401daf8:	e77c      	b.n	2401d9f4 <__kernel_rem_pio2+0x16c>
2401dafa:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401dafe:	ab06      	add	r3, sp, #24
2401db00:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401db04:	f3c2 0215 	ubfx	r2, r2, #0, #22
2401db08:	e7f4      	b.n	2401daf4 <__kernel_rem_pio2+0x26c>
2401db0a:	ab06      	add	r3, sp, #24
2401db0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
2401db10:	3801      	subs	r0, #1
2401db12:	431a      	orrs	r2, r3
2401db14:	e7a6      	b.n	2401da64 <__kernel_rem_pio2+0x1dc>
2401db16:	3201      	adds	r2, #1
2401db18:	f850 6d04 	ldr.w	r6, [r0, #-4]!
2401db1c:	2e00      	cmp	r6, #0
2401db1e:	d0fa      	beq.n	2401db16 <__kernel_rem_pio2+0x28e>
2401db20:	9b05      	ldr	r3, [sp, #20]
2401db22:	f503 7312 	add.w	r3, r3, #584	; 0x248
2401db26:	eb0d 0003 	add.w	r0, sp, r3
2401db2a:	9b01      	ldr	r3, [sp, #4]
2401db2c:	18ee      	adds	r6, r5, r3
2401db2e:	ab1a      	add	r3, sp, #104	; 0x68
2401db30:	f105 0c01 	add.w	ip, r5, #1
2401db34:	3898      	subs	r0, #152	; 0x98
2401db36:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
2401db3a:	442a      	add	r2, r5
2401db3c:	4562      	cmp	r2, ip
2401db3e:	da04      	bge.n	2401db4a <__kernel_rem_pio2+0x2c2>
2401db40:	4615      	mov	r5, r2
2401db42:	e709      	b.n	2401d958 <__kernel_rem_pio2+0xd0>
2401db44:	9804      	ldr	r0, [sp, #16]
2401db46:	2201      	movs	r2, #1
2401db48:	e7e6      	b.n	2401db18 <__kernel_rem_pio2+0x290>
2401db4a:	9b03      	ldr	r3, [sp, #12]
2401db4c:	f8dd e008 	ldr.w	lr, [sp, #8]
2401db50:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401db54:	9305      	str	r3, [sp, #20]
2401db56:	ee07 3a90 	vmov	s15, r3
2401db5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401db5e:	2500      	movs	r5, #0
2401db60:	eca6 7b02 	vstmia	r6!, {d7}
2401db64:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 2401db90 <__kernel_rem_pio2+0x308>
2401db68:	46b0      	mov	r8, r6
2401db6a:	4555      	cmp	r5, sl
2401db6c:	dd04      	ble.n	2401db78 <__kernel_rem_pio2+0x2f0>
2401db6e:	eca0 7b02 	vstmia	r0!, {d7}
2401db72:	f10c 0c01 	add.w	ip, ip, #1
2401db76:	e7e1      	b.n	2401db3c <__kernel_rem_pio2+0x2b4>
2401db78:	ecbe 5b02 	vldmia	lr!, {d5}
2401db7c:	ed38 6b02 	vldmdb	r8!, {d6}
2401db80:	3501      	adds	r5, #1
2401db82:	eea5 7b06 	vfma.f64	d7, d5, d6
2401db86:	e7f0      	b.n	2401db6a <__kernel_rem_pio2+0x2e2>
2401db88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401db8c:	e76e      	b.n	2401da6c <__kernel_rem_pio2+0x1e4>
2401db8e:	bf00      	nop
	...
2401db9c:	3e700000 	.word	0x3e700000
2401dba0:	00000000 	.word	0x00000000
2401dba4:	41700000 	.word	0x41700000
2401dba8:	2402e340 	.word	0x2402e340
2401dbac:	2402e300 	.word	0x2402e300
2401dbb0:	4260      	negs	r0, r4
2401dbb2:	eeb0 0b48 	vmov.f64	d0, d8
2401dbb6:	f000 fb3f 	bl	2401e238 <scalbn>
2401dbba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 2401dd98 <__kernel_rem_pio2+0x510>
2401dbbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
2401dbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401dbc6:	db18      	blt.n	2401dbfa <__kernel_rem_pio2+0x372>
2401dbc8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401dda0 <__kernel_rem_pio2+0x518>
2401dbcc:	ee20 7b07 	vmul.f64	d7, d0, d7
2401dbd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401dbd4:	aa06      	add	r2, sp, #24
2401dbd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401dbda:	eea5 0b46 	vfms.f64	d0, d5, d6
2401dbde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401dbe2:	f105 0b01 	add.w	fp, r5, #1
2401dbe6:	ee10 3a10 	vmov	r3, s0
2401dbea:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401dbee:	ee17 3a10 	vmov	r3, s14
2401dbf2:	3418      	adds	r4, #24
2401dbf4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
2401dbf8:	e73f      	b.n	2401da7a <__kernel_rem_pio2+0x1f2>
2401dbfa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401dbfe:	aa06      	add	r2, sp, #24
2401dc00:	ee10 3a10 	vmov	r3, s0
2401dc04:	46ab      	mov	fp, r5
2401dc06:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401dc0a:	e736      	b.n	2401da7a <__kernel_rem_pio2+0x1f2>
2401dc0c:	a806      	add	r0, sp, #24
2401dc0e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401dc12:	9001      	str	r0, [sp, #4]
2401dc14:	ee07 0a90 	vmov	s15, r0
2401dc18:	3a01      	subs	r2, #1
2401dc1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401dc1e:	ee27 7b00 	vmul.f64	d7, d7, d0
2401dc22:	ee20 0b06 	vmul.f64	d0, d0, d6
2401dc26:	ed21 7b02 	vstmdb	r1!, {d7}
2401dc2a:	e734      	b.n	2401da96 <__kernel_rem_pio2+0x20e>
2401dc2c:	ecb5 5b02 	vldmia	r5!, {d5}
2401dc30:	ecb4 6b02 	vldmia	r4!, {d6}
2401dc34:	3001      	adds	r0, #1
2401dc36:	eea5 7b06 	vfma.f64	d7, d5, d6
2401dc3a:	4548      	cmp	r0, r9
2401dc3c:	dc01      	bgt.n	2401dc42 <__kernel_rem_pio2+0x3ba>
2401dc3e:	4288      	cmp	r0, r1
2401dc40:	ddf4      	ble.n	2401dc2c <__kernel_rem_pio2+0x3a4>
2401dc42:	a842      	add	r0, sp, #264	; 0x108
2401dc44:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
2401dc48:	ed81 7b00 	vstr	d7, [r1]
2401dc4c:	3a01      	subs	r2, #1
2401dc4e:	e726      	b.n	2401da9e <__kernel_rem_pio2+0x216>
2401dc50:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401dc52:	2a02      	cmp	r2, #2
2401dc54:	dc0a      	bgt.n	2401dc6c <__kernel_rem_pio2+0x3e4>
2401dc56:	2a00      	cmp	r2, #0
2401dc58:	dc2e      	bgt.n	2401dcb8 <__kernel_rem_pio2+0x430>
2401dc5a:	d047      	beq.n	2401dcec <__kernel_rem_pio2+0x464>
2401dc5c:	f008 0007 	and.w	r0, r8, #7
2401dc60:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
2401dc64:	ecbd 8b06 	vpop	{d8-d10}
2401dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401dc6c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401dc6e:	2a03      	cmp	r2, #3
2401dc70:	d1f4      	bne.n	2401dc5c <__kernel_rem_pio2+0x3d4>
2401dc72:	a942      	add	r1, sp, #264	; 0x108
2401dc74:	f1a3 0208 	sub.w	r2, r3, #8
2401dc78:	440a      	add	r2, r1
2401dc7a:	4611      	mov	r1, r2
2401dc7c:	4658      	mov	r0, fp
2401dc7e:	2800      	cmp	r0, #0
2401dc80:	f1a1 0108 	sub.w	r1, r1, #8
2401dc84:	dc55      	bgt.n	2401dd32 <__kernel_rem_pio2+0x4aa>
2401dc86:	4659      	mov	r1, fp
2401dc88:	2901      	cmp	r1, #1
2401dc8a:	f1a2 0208 	sub.w	r2, r2, #8
2401dc8e:	dc60      	bgt.n	2401dd52 <__kernel_rem_pio2+0x4ca>
2401dc90:	ed9f 7b45 	vldr	d7, [pc, #276]	; 2401dda8 <__kernel_rem_pio2+0x520>
2401dc94:	aa42      	add	r2, sp, #264	; 0x108
2401dc96:	4413      	add	r3, r2
2401dc98:	f1bb 0f01 	cmp.w	fp, #1
2401dc9c:	dc69      	bgt.n	2401dd72 <__kernel_rem_pio2+0x4ea>
2401dc9e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
2401dca2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
2401dca6:	2e00      	cmp	r6, #0
2401dca8:	d16a      	bne.n	2401dd80 <__kernel_rem_pio2+0x4f8>
2401dcaa:	ed87 5b00 	vstr	d5, [r7]
2401dcae:	ed87 6b02 	vstr	d6, [r7, #8]
2401dcb2:	ed87 7b04 	vstr	d7, [r7, #16]
2401dcb6:	e7d1      	b.n	2401dc5c <__kernel_rem_pio2+0x3d4>
2401dcb8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 2401dda8 <__kernel_rem_pio2+0x520>
2401dcbc:	aa42      	add	r2, sp, #264	; 0x108
2401dcbe:	4413      	add	r3, r2
2401dcc0:	465a      	mov	r2, fp
2401dcc2:	2a00      	cmp	r2, #0
2401dcc4:	da26      	bge.n	2401dd14 <__kernel_rem_pio2+0x48c>
2401dcc6:	b35e      	cbz	r6, 2401dd20 <__kernel_rem_pio2+0x498>
2401dcc8:	eeb1 7b46 	vneg.f64	d7, d6
2401dccc:	ed87 7b00 	vstr	d7, [r7]
2401dcd0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
2401dcd4:	aa44      	add	r2, sp, #272	; 0x110
2401dcd6:	2301      	movs	r3, #1
2401dcd8:	ee37 7b46 	vsub.f64	d7, d7, d6
2401dcdc:	459b      	cmp	fp, r3
2401dcde:	da22      	bge.n	2401dd26 <__kernel_rem_pio2+0x49e>
2401dce0:	b10e      	cbz	r6, 2401dce6 <__kernel_rem_pio2+0x45e>
2401dce2:	eeb1 7b47 	vneg.f64	d7, d7
2401dce6:	ed87 7b02 	vstr	d7, [r7, #8]
2401dcea:	e7b7      	b.n	2401dc5c <__kernel_rem_pio2+0x3d4>
2401dcec:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401dda8 <__kernel_rem_pio2+0x520>
2401dcf0:	aa42      	add	r2, sp, #264	; 0x108
2401dcf2:	4413      	add	r3, r2
2401dcf4:	f1bb 0f00 	cmp.w	fp, #0
2401dcf8:	da05      	bge.n	2401dd06 <__kernel_rem_pio2+0x47e>
2401dcfa:	b10e      	cbz	r6, 2401dd00 <__kernel_rem_pio2+0x478>
2401dcfc:	eeb1 7b47 	vneg.f64	d7, d7
2401dd00:	ed87 7b00 	vstr	d7, [r7]
2401dd04:	e7aa      	b.n	2401dc5c <__kernel_rem_pio2+0x3d4>
2401dd06:	ed33 6b02 	vldmdb	r3!, {d6}
2401dd0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401dd0e:	ee37 7b06 	vadd.f64	d7, d7, d6
2401dd12:	e7ef      	b.n	2401dcf4 <__kernel_rem_pio2+0x46c>
2401dd14:	ed33 7b02 	vldmdb	r3!, {d7}
2401dd18:	3a01      	subs	r2, #1
2401dd1a:	ee36 6b07 	vadd.f64	d6, d6, d7
2401dd1e:	e7d0      	b.n	2401dcc2 <__kernel_rem_pio2+0x43a>
2401dd20:	eeb0 7b46 	vmov.f64	d7, d6
2401dd24:	e7d2      	b.n	2401dccc <__kernel_rem_pio2+0x444>
2401dd26:	ecb2 6b02 	vldmia	r2!, {d6}
2401dd2a:	3301      	adds	r3, #1
2401dd2c:	ee37 7b06 	vadd.f64	d7, d7, d6
2401dd30:	e7d4      	b.n	2401dcdc <__kernel_rem_pio2+0x454>
2401dd32:	ed91 7b00 	vldr	d7, [r1]
2401dd36:	ed91 5b02 	vldr	d5, [r1, #8]
2401dd3a:	3801      	subs	r0, #1
2401dd3c:	ee37 6b05 	vadd.f64	d6, d7, d5
2401dd40:	ee37 7b46 	vsub.f64	d7, d7, d6
2401dd44:	ed81 6b00 	vstr	d6, [r1]
2401dd48:	ee37 7b05 	vadd.f64	d7, d7, d5
2401dd4c:	ed81 7b02 	vstr	d7, [r1, #8]
2401dd50:	e795      	b.n	2401dc7e <__kernel_rem_pio2+0x3f6>
2401dd52:	ed92 7b00 	vldr	d7, [r2]
2401dd56:	ed92 5b02 	vldr	d5, [r2, #8]
2401dd5a:	3901      	subs	r1, #1
2401dd5c:	ee37 6b05 	vadd.f64	d6, d7, d5
2401dd60:	ee37 7b46 	vsub.f64	d7, d7, d6
2401dd64:	ed82 6b00 	vstr	d6, [r2]
2401dd68:	ee37 7b05 	vadd.f64	d7, d7, d5
2401dd6c:	ed82 7b02 	vstr	d7, [r2, #8]
2401dd70:	e78a      	b.n	2401dc88 <__kernel_rem_pio2+0x400>
2401dd72:	ed33 6b02 	vldmdb	r3!, {d6}
2401dd76:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401dd7a:	ee37 7b06 	vadd.f64	d7, d7, d6
2401dd7e:	e78b      	b.n	2401dc98 <__kernel_rem_pio2+0x410>
2401dd80:	eeb1 5b45 	vneg.f64	d5, d5
2401dd84:	eeb1 6b46 	vneg.f64	d6, d6
2401dd88:	ed87 5b00 	vstr	d5, [r7]
2401dd8c:	eeb1 7b47 	vneg.f64	d7, d7
2401dd90:	ed87 6b02 	vstr	d6, [r7, #8]
2401dd94:	e78d      	b.n	2401dcb2 <__kernel_rem_pio2+0x42a>
2401dd96:	bf00      	nop
2401dd98:	00000000 	.word	0x00000000
2401dd9c:	41700000 	.word	0x41700000
2401dda0:	00000000 	.word	0x00000000
2401dda4:	3e700000 	.word	0x3e700000
	...

2401ddb0 <__kernel_tan>:
2401ddb0:	eeb0 7b40 	vmov.f64	d7, d0
2401ddb4:	ee17 3a90 	vmov	r3, s15
2401ddb8:	4989      	ldr	r1, [pc, #548]	; (2401dfe0 <__kernel_tan+0x230>)
2401ddba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401ddbe:	428a      	cmp	r2, r1
2401ddc0:	b510      	push	{r4, lr}
2401ddc2:	dc33      	bgt.n	2401de2c <__kernel_tan+0x7c>
2401ddc4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
2401ddc8:	ee16 1a90 	vmov	r1, s13
2401ddcc:	2900      	cmp	r1, #0
2401ddce:	d143      	bne.n	2401de58 <__kernel_tan+0xa8>
2401ddd0:	ee10 4a10 	vmov	r4, s0
2401ddd4:	1c43      	adds	r3, r0, #1
2401ddd6:	4323      	orrs	r3, r4
2401ddd8:	4313      	orrs	r3, r2
2401ddda:	d108      	bne.n	2401ddee <__kernel_tan+0x3e>
2401dddc:	f000 fa20 	bl	2401e220 <fabs>
2401dde0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401dde4:	ee86 7b00 	vdiv.f64	d7, d6, d0
2401dde8:	eeb0 0b47 	vmov.f64	d0, d7
2401ddec:	bd10      	pop	{r4, pc}
2401ddee:	2801      	cmp	r0, #1
2401ddf0:	d0fa      	beq.n	2401dde8 <__kernel_tan+0x38>
2401ddf2:	ee30 6b01 	vadd.f64	d6, d0, d1
2401ddf6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401ddfa:	ec53 2b16 	vmov	r2, r3, d6
2401ddfe:	ee87 3b06 	vdiv.f64	d3, d7, d6
2401de02:	460a      	mov	r2, r1
2401de04:	ec43 2b15 	vmov	d5, r2, r3
2401de08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401de0c:	ec53 2b13 	vmov	r2, r3, d3
2401de10:	ee35 4b40 	vsub.f64	d4, d5, d0
2401de14:	460a      	mov	r2, r1
2401de16:	ec43 2b17 	vmov	d7, r2, r3
2401de1a:	ee31 4b44 	vsub.f64	d4, d1, d4
2401de1e:	eea5 6b07 	vfma.f64	d6, d5, d7
2401de22:	eea4 6b07 	vfma.f64	d6, d4, d7
2401de26:	eea6 7b03 	vfma.f64	d7, d6, d3
2401de2a:	e7dd      	b.n	2401dde8 <__kernel_tan+0x38>
2401de2c:	496d      	ldr	r1, [pc, #436]	; (2401dfe4 <__kernel_tan+0x234>)
2401de2e:	428a      	cmp	r2, r1
2401de30:	dd12      	ble.n	2401de58 <__kernel_tan+0xa8>
2401de32:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 2401df60 <__kernel_tan+0x1b0>
2401de36:	2b00      	cmp	r3, #0
2401de38:	bfb8      	it	lt
2401de3a:	eeb1 7b40 	vneglt.f64	d7, d0
2401de3e:	ee36 6b47 	vsub.f64	d6, d6, d7
2401de42:	ed9f 7b49 	vldr	d7, [pc, #292]	; 2401df68 <__kernel_tan+0x1b8>
2401de46:	bfb8      	it	lt
2401de48:	eeb1 1b41 	vneglt.f64	d1, d1
2401de4c:	ee37 7b41 	vsub.f64	d7, d7, d1
2401de50:	ed9f 1b47 	vldr	d1, [pc, #284]	; 2401df70 <__kernel_tan+0x1c0>
2401de54:	ee37 7b06 	vadd.f64	d7, d7, d6
2401de58:	ee27 5b07 	vmul.f64	d5, d7, d7
2401de5c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401df78 <__kernel_tan+0x1c8>
2401de60:	ee25 6b05 	vmul.f64	d6, d5, d5
2401de64:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401df80 <__kernel_tan+0x1d0>
2401de68:	eea6 4b03 	vfma.f64	d4, d6, d3
2401de6c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401df88 <__kernel_tan+0x1d8>
2401de70:	eea4 3b06 	vfma.f64	d3, d4, d6
2401de74:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401df90 <__kernel_tan+0x1e0>
2401de78:	eea3 4b06 	vfma.f64	d4, d3, d6
2401de7c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401df98 <__kernel_tan+0x1e8>
2401de80:	eea4 3b06 	vfma.f64	d3, d4, d6
2401de84:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401dfa0 <__kernel_tan+0x1f0>
2401de88:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401dfa8 <__kernel_tan+0x1f8>
2401de8c:	eea3 4b06 	vfma.f64	d4, d3, d6
2401de90:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401dfb0 <__kernel_tan+0x200>
2401de94:	eea6 3b02 	vfma.f64	d3, d6, d2
2401de98:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401dfb8 <__kernel_tan+0x208>
2401de9c:	eea3 2b06 	vfma.f64	d2, d3, d6
2401dea0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401dfc0 <__kernel_tan+0x210>
2401dea4:	eea2 3b06 	vfma.f64	d3, d2, d6
2401dea8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401dfc8 <__kernel_tan+0x218>
2401deac:	eea3 2b06 	vfma.f64	d2, d3, d6
2401deb0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401dfd0 <__kernel_tan+0x220>
2401deb4:	494b      	ldr	r1, [pc, #300]	; (2401dfe4 <__kernel_tan+0x234>)
2401deb6:	eea2 3b06 	vfma.f64	d3, d2, d6
2401deba:	ee27 2b05 	vmul.f64	d2, d7, d5
2401debe:	eeb0 6b44 	vmov.f64	d6, d4
2401dec2:	eeb0 4b41 	vmov.f64	d4, d1
2401dec6:	eea3 6b05 	vfma.f64	d6, d3, d5
2401deca:	eea6 4b02 	vfma.f64	d4, d6, d2
2401dece:	ed9f 6b42 	vldr	d6, [pc, #264]	; 2401dfd8 <__kernel_tan+0x228>
2401ded2:	eea4 1b05 	vfma.f64	d1, d4, d5
2401ded6:	428a      	cmp	r2, r1
2401ded8:	eea2 1b06 	vfma.f64	d1, d2, d6
2401dedc:	ee37 5b01 	vadd.f64	d5, d7, d1
2401dee0:	dd1d      	ble.n	2401df1e <__kernel_tan+0x16e>
2401dee2:	ee25 3b05 	vmul.f64	d3, d5, d5
2401dee6:	179b      	asrs	r3, r3, #30
2401dee8:	ee06 0a90 	vmov	s13, r0
2401deec:	f003 0302 	and.w	r3, r3, #2
2401def0:	f1c3 0301 	rsb	r3, r3, #1
2401def4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2401def8:	ee35 5b06 	vadd.f64	d5, d5, d6
2401defc:	ee83 4b05 	vdiv.f64	d4, d3, d5
2401df00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401df04:	ee34 4b41 	vsub.f64	d4, d4, d1
2401df08:	ee37 7b44 	vsub.f64	d7, d7, d4
2401df0c:	eea7 6b45 	vfms.f64	d6, d7, d5
2401df10:	ee07 3a90 	vmov	s15, r3
2401df14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401df18:	ee27 7b06 	vmul.f64	d7, d7, d6
2401df1c:	e764      	b.n	2401dde8 <__kernel_tan+0x38>
2401df1e:	2801      	cmp	r0, #1
2401df20:	d01a      	beq.n	2401df58 <__kernel_tan+0x1a8>
2401df22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401df26:	ec51 0b15 	vmov	r0, r1, d5
2401df2a:	2000      	movs	r0, #0
2401df2c:	ec41 0b13 	vmov	d3, r0, r1
2401df30:	ee33 7b47 	vsub.f64	d7, d3, d7
2401df34:	ee31 1b47 	vsub.f64	d1, d1, d7
2401df38:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401df3c:	ee87 4b05 	vdiv.f64	d4, d7, d5
2401df40:	ec53 2b14 	vmov	r2, r3, d4
2401df44:	4602      	mov	r2, r0
2401df46:	ec43 2b17 	vmov	d7, r2, r3
2401df4a:	eea3 6b07 	vfma.f64	d6, d3, d7
2401df4e:	eea1 6b07 	vfma.f64	d6, d1, d7
2401df52:	eea6 7b04 	vfma.f64	d7, d6, d4
2401df56:	e747      	b.n	2401dde8 <__kernel_tan+0x38>
2401df58:	eeb0 7b45 	vmov.f64	d7, d5
2401df5c:	e744      	b.n	2401dde8 <__kernel_tan+0x38>
2401df5e:	bf00      	nop
2401df60:	54442d18 	.word	0x54442d18
2401df64:	3fe921fb 	.word	0x3fe921fb
2401df68:	33145c07 	.word	0x33145c07
2401df6c:	3c81a626 	.word	0x3c81a626
	...
2401df78:	db605373 	.word	0xdb605373
2401df7c:	bef375cb 	.word	0xbef375cb
2401df80:	a03792a6 	.word	0xa03792a6
2401df84:	3f147e88 	.word	0x3f147e88
2401df88:	f2f26501 	.word	0xf2f26501
2401df8c:	3f4344d8 	.word	0x3f4344d8
2401df90:	c9560328 	.word	0xc9560328
2401df94:	3f6d6d22 	.word	0x3f6d6d22
2401df98:	8406d637 	.word	0x8406d637
2401df9c:	3f9664f4 	.word	0x3f9664f4
2401dfa0:	1110fe7a 	.word	0x1110fe7a
2401dfa4:	3fc11111 	.word	0x3fc11111
2401dfa8:	74bf7ad4 	.word	0x74bf7ad4
2401dfac:	3efb2a70 	.word	0x3efb2a70
2401dfb0:	32f0a7e9 	.word	0x32f0a7e9
2401dfb4:	3f12b80f 	.word	0x3f12b80f
2401dfb8:	1a8d1068 	.word	0x1a8d1068
2401dfbc:	3f3026f7 	.word	0x3f3026f7
2401dfc0:	fee08315 	.word	0xfee08315
2401dfc4:	3f57dbc8 	.word	0x3f57dbc8
2401dfc8:	e96e8493 	.word	0xe96e8493
2401dfcc:	3f8226e3 	.word	0x3f8226e3
2401dfd0:	1bb341fe 	.word	0x1bb341fe
2401dfd4:	3faba1ba 	.word	0x3faba1ba
2401dfd8:	55555563 	.word	0x55555563
2401dfdc:	3fd55555 	.word	0x3fd55555
2401dfe0:	3e2fffff 	.word	0x3e2fffff
2401dfe4:	3fe59427 	.word	0x3fe59427

2401dfe8 <expm1f>:
2401dfe8:	ee10 2a10 	vmov	r2, s0
2401dfec:	497d      	ldr	r1, [pc, #500]	; (2401e1e4 <expm1f+0x1fc>)
2401dfee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401dff2:	428b      	cmp	r3, r1
2401dff4:	d920      	bls.n	2401e038 <expm1f+0x50>
2401dff6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401dffa:	d902      	bls.n	2401e002 <expm1f+0x1a>
2401dffc:	ee30 0a00 	vadd.f32	s0, s0, s0
2401e000:	4770      	bx	lr
2401e002:	d105      	bne.n	2401e010 <expm1f+0x28>
2401e004:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401e008:	2a00      	cmp	r2, #0
2401e00a:	fe20 0a27 	vselge.f32	s0, s0, s15
2401e00e:	4770      	bx	lr
2401e010:	2a00      	cmp	r2, #0
2401e012:	db05      	blt.n	2401e020 <expm1f+0x38>
2401e014:	4974      	ldr	r1, [pc, #464]	; (2401e1e8 <expm1f+0x200>)
2401e016:	428b      	cmp	r3, r1
2401e018:	d95c      	bls.n	2401e0d4 <expm1f+0xec>
2401e01a:	2000      	movs	r0, #0
2401e01c:	f7fe bf5e 	b.w	2401cedc <__math_oflowf>
2401e020:	eddf 7a72 	vldr	s15, [pc, #456]	; 2401e1ec <expm1f+0x204>
2401e024:	ee70 7a27 	vadd.f32	s15, s0, s15
2401e028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401e02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e030:	d550      	bpl.n	2401e0d4 <expm1f+0xec>
2401e032:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401e036:	4770      	bx	lr
2401e038:	496d      	ldr	r1, [pc, #436]	; (2401e1f0 <expm1f+0x208>)
2401e03a:	428b      	cmp	r3, r1
2401e03c:	d966      	bls.n	2401e10c <expm1f+0x124>
2401e03e:	496d      	ldr	r1, [pc, #436]	; (2401e1f4 <expm1f+0x20c>)
2401e040:	428b      	cmp	r3, r1
2401e042:	d847      	bhi.n	2401e0d4 <expm1f+0xec>
2401e044:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 2401e1f8 <expm1f+0x210>
2401e048:	2a00      	cmp	r2, #0
2401e04a:	bfa7      	ittee	ge
2401e04c:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401e050:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 2401e1fc <expm1f+0x214>
2401e054:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 2401e200 <expm1f+0x218>
2401e058:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401e05c:	bfac      	ite	ge
2401e05e:	2301      	movge	r3, #1
2401e060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401e064:	ee37 0a66 	vsub.f32	s0, s14, s13
2401e068:	ee77 7a40 	vsub.f32	s15, s14, s0
2401e06c:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401e070:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401e074:	ee20 4a25 	vmul.f32	s8, s0, s11
2401e078:	ed9f 6a62 	vldr	s12, [pc, #392]	; 2401e204 <expm1f+0x21c>
2401e07c:	eddf 6a62 	vldr	s13, [pc, #392]	; 2401e208 <expm1f+0x220>
2401e080:	ed9f 5a62 	vldr	s10, [pc, #392]	; 2401e20c <expm1f+0x224>
2401e084:	ee20 7a04 	vmul.f32	s14, s0, s8
2401e088:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401e08c:	eee7 6a06 	vfma.f32	s13, s14, s12
2401e090:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 2401e210 <expm1f+0x228>
2401e094:	eea6 6a87 	vfma.f32	s12, s13, s14
2401e098:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2401e214 <expm1f+0x22c>
2401e09c:	eee6 6a07 	vfma.f32	s13, s12, s14
2401e0a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401e0a4:	eea6 5a87 	vfma.f32	s10, s13, s14
2401e0a8:	eef0 6a46 	vmov.f32	s13, s12
2401e0ac:	eee5 6a07 	vfma.f32	s13, s10, s14
2401e0b0:	eee4 4a66 	vfms.f32	s9, s8, s13
2401e0b4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401e0b8:	eea0 4a64 	vfms.f32	s8, s0, s9
2401e0bc:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401e0c0:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401e0c4:	ee66 6a87 	vmul.f32	s13, s13, s14
2401e0c8:	bb73      	cbnz	r3, 2401e128 <expm1f+0x140>
2401e0ca:	ee90 7a26 	vfnms.f32	s14, s0, s13
2401e0ce:	ee30 0a47 	vsub.f32	s0, s0, s14
2401e0d2:	4770      	bx	lr
2401e0d4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401e0d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401e0dc:	2a00      	cmp	r2, #0
2401e0de:	fe67 7a87 	vselge.f32	s15, s15, s14
2401e0e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 2401e218 <expm1f+0x230>
2401e0e6:	ee40 7a07 	vmla.f32	s15, s0, s14
2401e0ea:	eeb0 7a40 	vmov.f32	s14, s0
2401e0ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401e0f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
2401e0f6:	ee17 3a90 	vmov	r3, s15
2401e0fa:	eddf 7a3f 	vldr	s15, [pc, #252]	; 2401e1f8 <expm1f+0x210>
2401e0fe:	eea6 7ae7 	vfms.f32	s14, s13, s15
2401e102:	eddf 7a3e 	vldr	s15, [pc, #248]	; 2401e1fc <expm1f+0x214>
2401e106:	ee66 6aa7 	vmul.f32	s13, s13, s15
2401e10a:	e7ab      	b.n	2401e064 <expm1f+0x7c>
2401e10c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401e110:	d208      	bcs.n	2401e124 <expm1f+0x13c>
2401e112:	eddf 7a42 	vldr	s15, [pc, #264]	; 2401e21c <expm1f+0x234>
2401e116:	ee70 7a27 	vadd.f32	s15, s0, s15
2401e11a:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401e11e:	ee30 0a67 	vsub.f32	s0, s0, s15
2401e122:	4770      	bx	lr
2401e124:	2300      	movs	r3, #0
2401e126:	e7a3      	b.n	2401e070 <expm1f+0x88>
2401e128:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401e12c:	1c5a      	adds	r2, r3, #1
2401e12e:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401e132:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401e136:	d106      	bne.n	2401e146 <expm1f+0x15e>
2401e138:	ee70 7a67 	vsub.f32	s15, s0, s15
2401e13c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401e140:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401e144:	4770      	bx	lr
2401e146:	2b01      	cmp	r3, #1
2401e148:	d118      	bne.n	2401e17c <expm1f+0x194>
2401e14a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401e14e:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401e152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e156:	bf5b      	ittet	pl
2401e158:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401e15c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401e160:	ee70 5a25 	vaddmi.f32	s11, s0, s11
2401e164:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401e168:	bf43      	ittte	mi
2401e16a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
2401e16e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401e172:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401e176:	eeb0 0a46 	vmovpl.f32	s0, s12
2401e17a:	4770      	bx	lr
2401e17c:	1c5a      	adds	r2, r3, #1
2401e17e:	2a39      	cmp	r2, #57	; 0x39
2401e180:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401e184:	d90b      	bls.n	2401e19e <expm1f+0x1b6>
2401e186:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401e18a:	ee76 7a67 	vsub.f32	s15, s12, s15
2401e18e:	ee17 3a90 	vmov	r3, s15
2401e192:	4419      	add	r1, r3
2401e194:	ee07 1a90 	vmov	s15, r1
2401e198:	ee37 0ac6 	vsub.f32	s0, s15, s12
2401e19c:	4770      	bx	lr
2401e19e:	2b16      	cmp	r3, #22
2401e1a0:	dc11      	bgt.n	2401e1c6 <expm1f+0x1de>
2401e1a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401e1a6:	fa42 f303 	asr.w	r3, r2, r3
2401e1aa:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401e1ae:	ee07 3a10 	vmov	s14, r3
2401e1b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401e1b6:	ee77 7a67 	vsub.f32	s15, s14, s15
2401e1ba:	ee17 3a90 	vmov	r3, s15
2401e1be:	440b      	add	r3, r1
2401e1c0:	ee00 3a10 	vmov	s0, r3
2401e1c4:	4770      	bx	lr
2401e1c6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401e1ca:	05db      	lsls	r3, r3, #23
2401e1cc:	ee07 3a10 	vmov	s14, r3
2401e1d0:	ee77 7a87 	vadd.f32	s15, s15, s14
2401e1d4:	ee70 7a67 	vsub.f32	s15, s0, s15
2401e1d8:	ee77 7a86 	vadd.f32	s15, s15, s12
2401e1dc:	ee17 3a90 	vmov	r3, s15
2401e1e0:	e7ed      	b.n	2401e1be <expm1f+0x1d6>
2401e1e2:	bf00      	nop
2401e1e4:	4195b843 	.word	0x4195b843
2401e1e8:	42b17217 	.word	0x42b17217
2401e1ec:	0da24260 	.word	0x0da24260
2401e1f0:	3eb17218 	.word	0x3eb17218
2401e1f4:	3f851591 	.word	0x3f851591
2401e1f8:	3f317180 	.word	0x3f317180
2401e1fc:	3717f7d1 	.word	0x3717f7d1
2401e200:	b717f7d1 	.word	0xb717f7d1
2401e204:	b457edbb 	.word	0xb457edbb
2401e208:	36867e54 	.word	0x36867e54
2401e20c:	bd088889 	.word	0xbd088889
2401e210:	b8a670cd 	.word	0xb8a670cd
2401e214:	3ad00d01 	.word	0x3ad00d01
2401e218:	3fb8aa3b 	.word	0x3fb8aa3b
2401e21c:	7149f2ca 	.word	0x7149f2ca

2401e220 <fabs>:
2401e220:	ec51 0b10 	vmov	r0, r1, d0
2401e224:	ee10 2a10 	vmov	r2, s0
2401e228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401e22c:	ec43 2b10 	vmov	d0, r2, r3
2401e230:	4770      	bx	lr
2401e232:	0000      	movs	r0, r0
2401e234:	0000      	movs	r0, r0
	...

2401e238 <scalbn>:
2401e238:	ee10 1a90 	vmov	r1, s1
2401e23c:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401e240:	b98b      	cbnz	r3, 2401e266 <scalbn+0x2e>
2401e242:	ee10 3a10 	vmov	r3, s0
2401e246:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401e24a:	4319      	orrs	r1, r3
2401e24c:	d00a      	beq.n	2401e264 <scalbn+0x2c>
2401e24e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 2401e300 <scalbn+0xc8>
2401e252:	4b37      	ldr	r3, [pc, #220]	; (2401e330 <scalbn+0xf8>)
2401e254:	ee20 0b07 	vmul.f64	d0, d0, d7
2401e258:	4298      	cmp	r0, r3
2401e25a:	da0b      	bge.n	2401e274 <scalbn+0x3c>
2401e25c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 2401e308 <scalbn+0xd0>
2401e260:	ee20 0b07 	vmul.f64	d0, d0, d7
2401e264:	4770      	bx	lr
2401e266:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401e26a:	4293      	cmp	r3, r2
2401e26c:	d107      	bne.n	2401e27e <scalbn+0x46>
2401e26e:	ee30 0b00 	vadd.f64	d0, d0, d0
2401e272:	4770      	bx	lr
2401e274:	ee10 1a90 	vmov	r1, s1
2401e278:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401e27c:	3b36      	subs	r3, #54	; 0x36
2401e27e:	f24c 3250 	movw	r2, #50000	; 0xc350
2401e282:	4290      	cmp	r0, r2
2401e284:	dd0d      	ble.n	2401e2a2 <scalbn+0x6a>
2401e286:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401e310 <scalbn+0xd8>
2401e28a:	ee10 3a90 	vmov	r3, s1
2401e28e:	eeb0 6b47 	vmov.f64	d6, d7
2401e292:	ed9f 5b21 	vldr	d5, [pc, #132]	; 2401e318 <scalbn+0xe0>
2401e296:	2b00      	cmp	r3, #0
2401e298:	fe27 7b05 	vselge.f64	d7, d7, d5
2401e29c:	ee27 0b06 	vmul.f64	d0, d7, d6
2401e2a0:	4770      	bx	lr
2401e2a2:	4418      	add	r0, r3
2401e2a4:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401e2a8:	4298      	cmp	r0, r3
2401e2aa:	dcec      	bgt.n	2401e286 <scalbn+0x4e>
2401e2ac:	2800      	cmp	r0, #0
2401e2ae:	dd0a      	ble.n	2401e2c6 <scalbn+0x8e>
2401e2b0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401e2b4:	ec53 2b10 	vmov	r2, r3, d0
2401e2b8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401e2bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401e2c0:	ec43 2b10 	vmov	d0, r2, r3
2401e2c4:	4770      	bx	lr
2401e2c6:	f110 0f35 	cmn.w	r0, #53	; 0x35
2401e2ca:	da09      	bge.n	2401e2e0 <scalbn+0xa8>
2401e2cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401e308 <scalbn+0xd0>
2401e2d0:	ee10 3a90 	vmov	r3, s1
2401e2d4:	eeb0 6b47 	vmov.f64	d6, d7
2401e2d8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 2401e320 <scalbn+0xe8>
2401e2dc:	2b00      	cmp	r3, #0
2401e2de:	e7db      	b.n	2401e298 <scalbn+0x60>
2401e2e0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401e2e4:	ec53 2b10 	vmov	r2, r3, d0
2401e2e8:	3036      	adds	r0, #54	; 0x36
2401e2ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401e2ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401e2f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 2401e328 <scalbn+0xf0>
2401e2f6:	ec43 2b10 	vmov	d0, r2, r3
2401e2fa:	e7b1      	b.n	2401e260 <scalbn+0x28>
2401e2fc:	f3af 8000 	nop.w
2401e300:	00000000 	.word	0x00000000
2401e304:	43500000 	.word	0x43500000
2401e308:	c2f8f359 	.word	0xc2f8f359
2401e30c:	01a56e1f 	.word	0x01a56e1f
2401e310:	8800759c 	.word	0x8800759c
2401e314:	7e37e43c 	.word	0x7e37e43c
2401e318:	8800759c 	.word	0x8800759c
2401e31c:	fe37e43c 	.word	0xfe37e43c
2401e320:	c2f8f359 	.word	0xc2f8f359
2401e324:	81a56e1f 	.word	0x81a56e1f
2401e328:	00000000 	.word	0x00000000
2401e32c:	3c900000 	.word	0x3c900000
2401e330:	ffff3cb0 	.word	0xffff3cb0

2401e334 <__kernel_rem_pio2f>:
2401e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401e338:	ed2d 8b04 	vpush	{d8-d9}
2401e33c:	b0d9      	sub	sp, #356	; 0x164
2401e33e:	4688      	mov	r8, r1
2401e340:	9002      	str	r0, [sp, #8]
2401e342:	49b8      	ldr	r1, [pc, #736]	; (2401e624 <__kernel_rem_pio2f+0x2f0>)
2401e344:	9866      	ldr	r0, [sp, #408]	; 0x198
2401e346:	9301      	str	r3, [sp, #4]
2401e348:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
2401e34c:	9901      	ldr	r1, [sp, #4]
2401e34e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
2401e350:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2401e354:	1d11      	adds	r1, r2, #4
2401e356:	db25      	blt.n	2401e3a4 <__kernel_rem_pio2f+0x70>
2401e358:	1ed0      	subs	r0, r2, #3
2401e35a:	bf48      	it	mi
2401e35c:	1d10      	addmi	r0, r2, #4
2401e35e:	10c0      	asrs	r0, r0, #3
2401e360:	1c45      	adds	r5, r0, #1
2401e362:	00e9      	lsls	r1, r5, #3
2401e364:	eba0 070b 	sub.w	r7, r0, fp
2401e368:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e36c:	9103      	str	r1, [sp, #12]
2401e36e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
2401e372:	eb0a 0c0b 	add.w	ip, sl, fp
2401e376:	ae1c      	add	r6, sp, #112	; 0x70
2401e378:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
2401e37c:	2400      	movs	r4, #0
2401e37e:	4564      	cmp	r4, ip
2401e380:	dd12      	ble.n	2401e3a8 <__kernel_rem_pio2f+0x74>
2401e382:	9901      	ldr	r1, [sp, #4]
2401e384:	ac1c      	add	r4, sp, #112	; 0x70
2401e386:	eb04 0481 	add.w	r4, r4, r1, lsl #2
2401e38a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
2401e38e:	f04f 0c00 	mov.w	ip, #0
2401e392:	45d4      	cmp	ip, sl
2401e394:	dc27      	bgt.n	2401e3e6 <__kernel_rem_pio2f+0xb2>
2401e396:	f8dd e008 	ldr.w	lr, [sp, #8]
2401e39a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e39e:	4627      	mov	r7, r4
2401e3a0:	2600      	movs	r6, #0
2401e3a2:	e016      	b.n	2401e3d2 <__kernel_rem_pio2f+0x9e>
2401e3a4:	2000      	movs	r0, #0
2401e3a6:	e7db      	b.n	2401e360 <__kernel_rem_pio2f+0x2c>
2401e3a8:	42e7      	cmn	r7, r4
2401e3aa:	bf5d      	ittte	pl
2401e3ac:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
2401e3b0:	ee07 1a90 	vmovpl	s15, r1
2401e3b4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401e3b8:	eef0 7a47 	vmovmi.f32	s15, s14
2401e3bc:	ece6 7a01 	vstmia	r6!, {s15}
2401e3c0:	3401      	adds	r4, #1
2401e3c2:	e7dc      	b.n	2401e37e <__kernel_rem_pio2f+0x4a>
2401e3c4:	ecfe 6a01 	vldmia	lr!, {s13}
2401e3c8:	ed97 7a00 	vldr	s14, [r7]
2401e3cc:	eee6 7a87 	vfma.f32	s15, s13, s14
2401e3d0:	3601      	adds	r6, #1
2401e3d2:	455e      	cmp	r6, fp
2401e3d4:	f1a7 0704 	sub.w	r7, r7, #4
2401e3d8:	ddf4      	ble.n	2401e3c4 <__kernel_rem_pio2f+0x90>
2401e3da:	ece9 7a01 	vstmia	r9!, {s15}
2401e3de:	f10c 0c01 	add.w	ip, ip, #1
2401e3e2:	3404      	adds	r4, #4
2401e3e4:	e7d5      	b.n	2401e392 <__kernel_rem_pio2f+0x5e>
2401e3e6:	a908      	add	r1, sp, #32
2401e3e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
2401e3ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401e3f0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 2401e630 <__kernel_rem_pio2f+0x2fc>
2401e3f4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 2401e62c <__kernel_rem_pio2f+0x2f8>
2401e3f8:	9105      	str	r1, [sp, #20]
2401e3fa:	9304      	str	r3, [sp, #16]
2401e3fc:	4656      	mov	r6, sl
2401e3fe:	00b3      	lsls	r3, r6, #2
2401e400:	9306      	str	r3, [sp, #24]
2401e402:	ab58      	add	r3, sp, #352	; 0x160
2401e404:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401e408:	ac08      	add	r4, sp, #32
2401e40a:	ab44      	add	r3, sp, #272	; 0x110
2401e40c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
2401e410:	46a4      	mov	ip, r4
2401e412:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401e416:	4637      	mov	r7, r6
2401e418:	2f00      	cmp	r7, #0
2401e41a:	f1a0 0004 	sub.w	r0, r0, #4
2401e41e:	dc4a      	bgt.n	2401e4b6 <__kernel_rem_pio2f+0x182>
2401e420:	4628      	mov	r0, r5
2401e422:	9207      	str	r2, [sp, #28]
2401e424:	f000 fab2 	bl	2401e98c <scalbnf>
2401e428:	eeb0 8a40 	vmov.f32	s16, s0
2401e42c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401e430:	ee28 0a00 	vmul.f32	s0, s16, s0
2401e434:	f000 fa68 	bl	2401e908 <floorf>
2401e438:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2401e43c:	eea0 8a67 	vfms.f32	s16, s0, s15
2401e440:	2d00      	cmp	r5, #0
2401e442:	9a07      	ldr	r2, [sp, #28]
2401e444:	eefd 7ac8 	vcvt.s32.f32	s15, s16
2401e448:	ee17 9a90 	vmov	r9, s15
2401e44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401e450:	ee38 8a67 	vsub.f32	s16, s16, s15
2401e454:	dd41      	ble.n	2401e4da <__kernel_rem_pio2f+0x1a6>
2401e456:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401e45a:	ab08      	add	r3, sp, #32
2401e45c:	f1c5 0e08 	rsb	lr, r5, #8
2401e460:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401e464:	fa47 f00e 	asr.w	r0, r7, lr
2401e468:	4481      	add	r9, r0
2401e46a:	fa00 f00e 	lsl.w	r0, r0, lr
2401e46e:	1a3f      	subs	r7, r7, r0
2401e470:	f1c5 0007 	rsb	r0, r5, #7
2401e474:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
2401e478:	4107      	asrs	r7, r0
2401e47a:	2f00      	cmp	r7, #0
2401e47c:	dd3c      	ble.n	2401e4f8 <__kernel_rem_pio2f+0x1c4>
2401e47e:	f04f 0e00 	mov.w	lr, #0
2401e482:	f109 0901 	add.w	r9, r9, #1
2401e486:	4671      	mov	r1, lr
2401e488:	4576      	cmp	r6, lr
2401e48a:	dc67      	bgt.n	2401e55c <__kernel_rem_pio2f+0x228>
2401e48c:	2d00      	cmp	r5, #0
2401e48e:	dd03      	ble.n	2401e498 <__kernel_rem_pio2f+0x164>
2401e490:	2d01      	cmp	r5, #1
2401e492:	d074      	beq.n	2401e57e <__kernel_rem_pio2f+0x24a>
2401e494:	2d02      	cmp	r5, #2
2401e496:	d07b      	beq.n	2401e590 <__kernel_rem_pio2f+0x25c>
2401e498:	2f02      	cmp	r7, #2
2401e49a:	d12d      	bne.n	2401e4f8 <__kernel_rem_pio2f+0x1c4>
2401e49c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401e4a0:	ee30 8a48 	vsub.f32	s16, s0, s16
2401e4a4:	b341      	cbz	r1, 2401e4f8 <__kernel_rem_pio2f+0x1c4>
2401e4a6:	4628      	mov	r0, r5
2401e4a8:	9207      	str	r2, [sp, #28]
2401e4aa:	f000 fa6f 	bl	2401e98c <scalbnf>
2401e4ae:	9a07      	ldr	r2, [sp, #28]
2401e4b0:	ee38 8a40 	vsub.f32	s16, s16, s0
2401e4b4:	e020      	b.n	2401e4f8 <__kernel_rem_pio2f+0x1c4>
2401e4b6:	ee60 7a28 	vmul.f32	s15, s0, s17
2401e4ba:	3f01      	subs	r7, #1
2401e4bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401e4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401e4c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401e4c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401e4cc:	ecac 0a01 	vstmia	ip!, {s0}
2401e4d0:	ed90 0a00 	vldr	s0, [r0]
2401e4d4:	ee37 0a80 	vadd.f32	s0, s15, s0
2401e4d8:	e79e      	b.n	2401e418 <__kernel_rem_pio2f+0xe4>
2401e4da:	d105      	bne.n	2401e4e8 <__kernel_rem_pio2f+0x1b4>
2401e4dc:	1e70      	subs	r0, r6, #1
2401e4de:	ab08      	add	r3, sp, #32
2401e4e0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
2401e4e4:	11ff      	asrs	r7, r7, #7
2401e4e6:	e7c8      	b.n	2401e47a <__kernel_rem_pio2f+0x146>
2401e4e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401e4ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e4f4:	da30      	bge.n	2401e558 <__kernel_rem_pio2f+0x224>
2401e4f6:	2700      	movs	r7, #0
2401e4f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e500:	f040 809a 	bne.w	2401e638 <__kernel_rem_pio2f+0x304>
2401e504:	1e74      	subs	r4, r6, #1
2401e506:	46a4      	mov	ip, r4
2401e508:	2100      	movs	r1, #0
2401e50a:	45d4      	cmp	ip, sl
2401e50c:	da47      	bge.n	2401e59e <__kernel_rem_pio2f+0x26a>
2401e50e:	2900      	cmp	r1, #0
2401e510:	d063      	beq.n	2401e5da <__kernel_rem_pio2f+0x2a6>
2401e512:	ab08      	add	r3, sp, #32
2401e514:	3d08      	subs	r5, #8
2401e516:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401e51a:	2b00      	cmp	r3, #0
2401e51c:	d07f      	beq.n	2401e61e <__kernel_rem_pio2f+0x2ea>
2401e51e:	4628      	mov	r0, r5
2401e520:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401e524:	f000 fa32 	bl	2401e98c <scalbnf>
2401e528:	1c63      	adds	r3, r4, #1
2401e52a:	aa44      	add	r2, sp, #272	; 0x110
2401e52c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2401e630 <__kernel_rem_pio2f+0x2fc>
2401e530:	0099      	lsls	r1, r3, #2
2401e532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401e536:	4623      	mov	r3, r4
2401e538:	2b00      	cmp	r3, #0
2401e53a:	f280 80ad 	bge.w	2401e698 <__kernel_rem_pio2f+0x364>
2401e53e:	4623      	mov	r3, r4
2401e540:	2b00      	cmp	r3, #0
2401e542:	f2c0 80cb 	blt.w	2401e6dc <__kernel_rem_pio2f+0x3a8>
2401e546:	aa44      	add	r2, sp, #272	; 0x110
2401e548:	eb02 0583 	add.w	r5, r2, r3, lsl #2
2401e54c:	4e36      	ldr	r6, [pc, #216]	; (2401e628 <__kernel_rem_pio2f+0x2f4>)
2401e54e:	eddf 7a39 	vldr	s15, [pc, #228]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e552:	2000      	movs	r0, #0
2401e554:	1ae2      	subs	r2, r4, r3
2401e556:	e0b6      	b.n	2401e6c6 <__kernel_rem_pio2f+0x392>
2401e558:	2702      	movs	r7, #2
2401e55a:	e790      	b.n	2401e47e <__kernel_rem_pio2f+0x14a>
2401e55c:	6820      	ldr	r0, [r4, #0]
2401e55e:	b949      	cbnz	r1, 2401e574 <__kernel_rem_pio2f+0x240>
2401e560:	b118      	cbz	r0, 2401e56a <__kernel_rem_pio2f+0x236>
2401e562:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401e566:	6020      	str	r0, [r4, #0]
2401e568:	2001      	movs	r0, #1
2401e56a:	f10e 0e01 	add.w	lr, lr, #1
2401e56e:	3404      	adds	r4, #4
2401e570:	4601      	mov	r1, r0
2401e572:	e789      	b.n	2401e488 <__kernel_rem_pio2f+0x154>
2401e574:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
2401e578:	6020      	str	r0, [r4, #0]
2401e57a:	4608      	mov	r0, r1
2401e57c:	e7f5      	b.n	2401e56a <__kernel_rem_pio2f+0x236>
2401e57e:	1e74      	subs	r4, r6, #1
2401e580:	ab08      	add	r3, sp, #32
2401e582:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401e586:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401e58a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
2401e58e:	e783      	b.n	2401e498 <__kernel_rem_pio2f+0x164>
2401e590:	1e74      	subs	r4, r6, #1
2401e592:	ab08      	add	r3, sp, #32
2401e594:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401e598:	f000 003f 	and.w	r0, r0, #63	; 0x3f
2401e59c:	e7f5      	b.n	2401e58a <__kernel_rem_pio2f+0x256>
2401e59e:	ab08      	add	r3, sp, #32
2401e5a0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
2401e5a4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401e5a8:	4301      	orrs	r1, r0
2401e5aa:	e7ae      	b.n	2401e50a <__kernel_rem_pio2f+0x1d6>
2401e5ac:	3001      	adds	r0, #1
2401e5ae:	f854 7d04 	ldr.w	r7, [r4, #-4]!
2401e5b2:	2f00      	cmp	r7, #0
2401e5b4:	d0fa      	beq.n	2401e5ac <__kernel_rem_pio2f+0x278>
2401e5b6:	9b06      	ldr	r3, [sp, #24]
2401e5b8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401e5bc:	eb0d 0403 	add.w	r4, sp, r3
2401e5c0:	9b01      	ldr	r3, [sp, #4]
2401e5c2:	18f7      	adds	r7, r6, r3
2401e5c4:	ab1c      	add	r3, sp, #112	; 0x70
2401e5c6:	f106 0c01 	add.w	ip, r6, #1
2401e5ca:	3c4c      	subs	r4, #76	; 0x4c
2401e5cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
2401e5d0:	4430      	add	r0, r6
2401e5d2:	4560      	cmp	r0, ip
2401e5d4:	da04      	bge.n	2401e5e0 <__kernel_rem_pio2f+0x2ac>
2401e5d6:	4606      	mov	r6, r0
2401e5d8:	e711      	b.n	2401e3fe <__kernel_rem_pio2f+0xca>
2401e5da:	9c05      	ldr	r4, [sp, #20]
2401e5dc:	2001      	movs	r0, #1
2401e5de:	e7e6      	b.n	2401e5ae <__kernel_rem_pio2f+0x27a>
2401e5e0:	9b04      	ldr	r3, [sp, #16]
2401e5e2:	f8dd e008 	ldr.w	lr, [sp, #8]
2401e5e6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401e5ea:	9306      	str	r3, [sp, #24]
2401e5ec:	ee07 3a90 	vmov	s15, r3
2401e5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401e5f4:	2600      	movs	r6, #0
2401e5f6:	ece7 7a01 	vstmia	r7!, {s15}
2401e5fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e5fe:	46b9      	mov	r9, r7
2401e600:	455e      	cmp	r6, fp
2401e602:	dd04      	ble.n	2401e60e <__kernel_rem_pio2f+0x2da>
2401e604:	ece4 7a01 	vstmia	r4!, {s15}
2401e608:	f10c 0c01 	add.w	ip, ip, #1
2401e60c:	e7e1      	b.n	2401e5d2 <__kernel_rem_pio2f+0x29e>
2401e60e:	ecfe 6a01 	vldmia	lr!, {s13}
2401e612:	ed39 7a01 	vldmdb	r9!, {s14}
2401e616:	3601      	adds	r6, #1
2401e618:	eee6 7a87 	vfma.f32	s15, s13, s14
2401e61c:	e7f0      	b.n	2401e600 <__kernel_rem_pio2f+0x2cc>
2401e61e:	3c01      	subs	r4, #1
2401e620:	e777      	b.n	2401e512 <__kernel_rem_pio2f+0x1de>
2401e622:	bf00      	nop
2401e624:	2402e37c 	.word	0x2402e37c
2401e628:	2402e350 	.word	0x2402e350
2401e62c:	43800000 	.word	0x43800000
2401e630:	3b800000 	.word	0x3b800000
2401e634:	00000000 	.word	0x00000000
2401e638:	9b03      	ldr	r3, [sp, #12]
2401e63a:	eeb0 0a48 	vmov.f32	s0, s16
2401e63e:	1a98      	subs	r0, r3, r2
2401e640:	f000 f9a4 	bl	2401e98c <scalbnf>
2401e644:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401e62c <__kernel_rem_pio2f+0x2f8>
2401e648:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e650:	db19      	blt.n	2401e686 <__kernel_rem_pio2f+0x352>
2401e652:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 2401e630 <__kernel_rem_pio2f+0x2fc>
2401e656:	ee60 7a27 	vmul.f32	s15, s0, s15
2401e65a:	aa08      	add	r2, sp, #32
2401e65c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401e660:	1c74      	adds	r4, r6, #1
2401e662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401e666:	3508      	adds	r5, #8
2401e668:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401e66c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401e670:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401e674:	ee10 3a10 	vmov	r3, s0
2401e678:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401e67c:	ee17 3a90 	vmov	r3, s15
2401e680:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401e684:	e74b      	b.n	2401e51e <__kernel_rem_pio2f+0x1ea>
2401e686:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401e68a:	aa08      	add	r2, sp, #32
2401e68c:	ee10 3a10 	vmov	r3, s0
2401e690:	4634      	mov	r4, r6
2401e692:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401e696:	e742      	b.n	2401e51e <__kernel_rem_pio2f+0x1ea>
2401e698:	a808      	add	r0, sp, #32
2401e69a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
2401e69e:	9001      	str	r0, [sp, #4]
2401e6a0:	ee07 0a90 	vmov	s15, r0
2401e6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401e6a8:	3b01      	subs	r3, #1
2401e6aa:	ee67 7a80 	vmul.f32	s15, s15, s0
2401e6ae:	ee20 0a07 	vmul.f32	s0, s0, s14
2401e6b2:	ed62 7a01 	vstmdb	r2!, {s15}
2401e6b6:	e73f      	b.n	2401e538 <__kernel_rem_pio2f+0x204>
2401e6b8:	ecf6 6a01 	vldmia	r6!, {s13}
2401e6bc:	ecb5 7a01 	vldmia	r5!, {s14}
2401e6c0:	eee6 7a87 	vfma.f32	s15, s13, s14
2401e6c4:	3001      	adds	r0, #1
2401e6c6:	4550      	cmp	r0, sl
2401e6c8:	dc01      	bgt.n	2401e6ce <__kernel_rem_pio2f+0x39a>
2401e6ca:	4290      	cmp	r0, r2
2401e6cc:	ddf4      	ble.n	2401e6b8 <__kernel_rem_pio2f+0x384>
2401e6ce:	a858      	add	r0, sp, #352	; 0x160
2401e6d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
2401e6d4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
2401e6d8:	3b01      	subs	r3, #1
2401e6da:	e731      	b.n	2401e540 <__kernel_rem_pio2f+0x20c>
2401e6dc:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401e6de:	2b02      	cmp	r3, #2
2401e6e0:	dc09      	bgt.n	2401e6f6 <__kernel_rem_pio2f+0x3c2>
2401e6e2:	2b00      	cmp	r3, #0
2401e6e4:	dc2b      	bgt.n	2401e73e <__kernel_rem_pio2f+0x40a>
2401e6e6:	d044      	beq.n	2401e772 <__kernel_rem_pio2f+0x43e>
2401e6e8:	f009 0007 	and.w	r0, r9, #7
2401e6ec:	b059      	add	sp, #356	; 0x164
2401e6ee:	ecbd 8b04 	vpop	{d8-d9}
2401e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401e6f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401e6f8:	2b03      	cmp	r3, #3
2401e6fa:	d1f5      	bne.n	2401e6e8 <__kernel_rem_pio2f+0x3b4>
2401e6fc:	aa30      	add	r2, sp, #192	; 0xc0
2401e6fe:	1f0b      	subs	r3, r1, #4
2401e700:	4413      	add	r3, r2
2401e702:	461a      	mov	r2, r3
2401e704:	4620      	mov	r0, r4
2401e706:	2800      	cmp	r0, #0
2401e708:	f1a2 0204 	sub.w	r2, r2, #4
2401e70c:	dc52      	bgt.n	2401e7b4 <__kernel_rem_pio2f+0x480>
2401e70e:	4622      	mov	r2, r4
2401e710:	2a01      	cmp	r2, #1
2401e712:	f1a3 0304 	sub.w	r3, r3, #4
2401e716:	dc5d      	bgt.n	2401e7d4 <__kernel_rem_pio2f+0x4a0>
2401e718:	ab30      	add	r3, sp, #192	; 0xc0
2401e71a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e71e:	440b      	add	r3, r1
2401e720:	2c01      	cmp	r4, #1
2401e722:	dc67      	bgt.n	2401e7f4 <__kernel_rem_pio2f+0x4c0>
2401e724:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
2401e728:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401e72c:	2f00      	cmp	r7, #0
2401e72e:	d167      	bne.n	2401e800 <__kernel_rem_pio2f+0x4cc>
2401e730:	edc8 6a00 	vstr	s13, [r8]
2401e734:	ed88 7a01 	vstr	s14, [r8, #4]
2401e738:	edc8 7a02 	vstr	s15, [r8, #8]
2401e73c:	e7d4      	b.n	2401e6e8 <__kernel_rem_pio2f+0x3b4>
2401e73e:	ab30      	add	r3, sp, #192	; 0xc0
2401e740:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e744:	440b      	add	r3, r1
2401e746:	4622      	mov	r2, r4
2401e748:	2a00      	cmp	r2, #0
2401e74a:	da24      	bge.n	2401e796 <__kernel_rem_pio2f+0x462>
2401e74c:	b34f      	cbz	r7, 2401e7a2 <__kernel_rem_pio2f+0x46e>
2401e74e:	eef1 7a47 	vneg.f32	s15, s14
2401e752:	edc8 7a00 	vstr	s15, [r8]
2401e756:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401e75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401e75e:	aa31      	add	r2, sp, #196	; 0xc4
2401e760:	2301      	movs	r3, #1
2401e762:	429c      	cmp	r4, r3
2401e764:	da20      	bge.n	2401e7a8 <__kernel_rem_pio2f+0x474>
2401e766:	b10f      	cbz	r7, 2401e76c <__kernel_rem_pio2f+0x438>
2401e768:	eef1 7a67 	vneg.f32	s15, s15
2401e76c:	edc8 7a01 	vstr	s15, [r8, #4]
2401e770:	e7ba      	b.n	2401e6e8 <__kernel_rem_pio2f+0x3b4>
2401e772:	ab30      	add	r3, sp, #192	; 0xc0
2401e774:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 2401e634 <__kernel_rem_pio2f+0x300>
2401e778:	440b      	add	r3, r1
2401e77a:	2c00      	cmp	r4, #0
2401e77c:	da05      	bge.n	2401e78a <__kernel_rem_pio2f+0x456>
2401e77e:	b10f      	cbz	r7, 2401e784 <__kernel_rem_pio2f+0x450>
2401e780:	eef1 7a67 	vneg.f32	s15, s15
2401e784:	edc8 7a00 	vstr	s15, [r8]
2401e788:	e7ae      	b.n	2401e6e8 <__kernel_rem_pio2f+0x3b4>
2401e78a:	ed33 7a01 	vldmdb	r3!, {s14}
2401e78e:	3c01      	subs	r4, #1
2401e790:	ee77 7a87 	vadd.f32	s15, s15, s14
2401e794:	e7f1      	b.n	2401e77a <__kernel_rem_pio2f+0x446>
2401e796:	ed73 7a01 	vldmdb	r3!, {s15}
2401e79a:	3a01      	subs	r2, #1
2401e79c:	ee37 7a27 	vadd.f32	s14, s14, s15
2401e7a0:	e7d2      	b.n	2401e748 <__kernel_rem_pio2f+0x414>
2401e7a2:	eef0 7a47 	vmov.f32	s15, s14
2401e7a6:	e7d4      	b.n	2401e752 <__kernel_rem_pio2f+0x41e>
2401e7a8:	ecb2 7a01 	vldmia	r2!, {s14}
2401e7ac:	3301      	adds	r3, #1
2401e7ae:	ee77 7a87 	vadd.f32	s15, s15, s14
2401e7b2:	e7d6      	b.n	2401e762 <__kernel_rem_pio2f+0x42e>
2401e7b4:	edd2 7a00 	vldr	s15, [r2]
2401e7b8:	edd2 6a01 	vldr	s13, [r2, #4]
2401e7bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401e7c0:	3801      	subs	r0, #1
2401e7c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401e7c6:	ed82 7a00 	vstr	s14, [r2]
2401e7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401e7ce:	edc2 7a01 	vstr	s15, [r2, #4]
2401e7d2:	e798      	b.n	2401e706 <__kernel_rem_pio2f+0x3d2>
2401e7d4:	edd3 7a00 	vldr	s15, [r3]
2401e7d8:	edd3 6a01 	vldr	s13, [r3, #4]
2401e7dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401e7e0:	3a01      	subs	r2, #1
2401e7e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401e7e6:	ed83 7a00 	vstr	s14, [r3]
2401e7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401e7ee:	edc3 7a01 	vstr	s15, [r3, #4]
2401e7f2:	e78d      	b.n	2401e710 <__kernel_rem_pio2f+0x3dc>
2401e7f4:	ed33 7a01 	vldmdb	r3!, {s14}
2401e7f8:	3c01      	subs	r4, #1
2401e7fa:	ee77 7a87 	vadd.f32	s15, s15, s14
2401e7fe:	e78f      	b.n	2401e720 <__kernel_rem_pio2f+0x3ec>
2401e800:	eef1 6a66 	vneg.f32	s13, s13
2401e804:	eeb1 7a47 	vneg.f32	s14, s14
2401e808:	edc8 6a00 	vstr	s13, [r8]
2401e80c:	ed88 7a01 	vstr	s14, [r8, #4]
2401e810:	eef1 7a67 	vneg.f32	s15, s15
2401e814:	e790      	b.n	2401e738 <__kernel_rem_pio2f+0x404>
2401e816:	bf00      	nop

2401e818 <floor>:
2401e818:	ee10 1a90 	vmov	r1, s1
2401e81c:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401e820:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401e824:	2b13      	cmp	r3, #19
2401e826:	b530      	push	{r4, r5, lr}
2401e828:	ee10 0a10 	vmov	r0, s0
2401e82c:	ee10 5a10 	vmov	r5, s0
2401e830:	dc31      	bgt.n	2401e896 <floor+0x7e>
2401e832:	2b00      	cmp	r3, #0
2401e834:	da15      	bge.n	2401e862 <floor+0x4a>
2401e836:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401e8f8 <floor+0xe0>
2401e83a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401e83e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e846:	dd07      	ble.n	2401e858 <floor+0x40>
2401e848:	2900      	cmp	r1, #0
2401e84a:	da4e      	bge.n	2401e8ea <floor+0xd2>
2401e84c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401e850:	4308      	orrs	r0, r1
2401e852:	d04d      	beq.n	2401e8f0 <floor+0xd8>
2401e854:	492a      	ldr	r1, [pc, #168]	; (2401e900 <floor+0xe8>)
2401e856:	2000      	movs	r0, #0
2401e858:	460b      	mov	r3, r1
2401e85a:	4602      	mov	r2, r0
2401e85c:	ec43 2b10 	vmov	d0, r2, r3
2401e860:	e020      	b.n	2401e8a4 <floor+0x8c>
2401e862:	4a28      	ldr	r2, [pc, #160]	; (2401e904 <floor+0xec>)
2401e864:	411a      	asrs	r2, r3
2401e866:	ea01 0402 	and.w	r4, r1, r2
2401e86a:	4304      	orrs	r4, r0
2401e86c:	d01a      	beq.n	2401e8a4 <floor+0x8c>
2401e86e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401e8f8 <floor+0xe0>
2401e872:	ee30 0b07 	vadd.f64	d0, d0, d7
2401e876:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401e87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e87e:	ddeb      	ble.n	2401e858 <floor+0x40>
2401e880:	2900      	cmp	r1, #0
2401e882:	bfbe      	ittt	lt
2401e884:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401e888:	fa40 f303 	asrlt.w	r3, r0, r3
2401e88c:	18c9      	addlt	r1, r1, r3
2401e88e:	ea21 0102 	bic.w	r1, r1, r2
2401e892:	2000      	movs	r0, #0
2401e894:	e7e0      	b.n	2401e858 <floor+0x40>
2401e896:	2b33      	cmp	r3, #51	; 0x33
2401e898:	dd05      	ble.n	2401e8a6 <floor+0x8e>
2401e89a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401e89e:	d101      	bne.n	2401e8a4 <floor+0x8c>
2401e8a0:	ee30 0b00 	vadd.f64	d0, d0, d0
2401e8a4:	bd30      	pop	{r4, r5, pc}
2401e8a6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401e8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401e8ae:	40e2      	lsrs	r2, r4
2401e8b0:	4210      	tst	r0, r2
2401e8b2:	d0f7      	beq.n	2401e8a4 <floor+0x8c>
2401e8b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 2401e8f8 <floor+0xe0>
2401e8b8:	ee30 0b07 	vadd.f64	d0, d0, d7
2401e8bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e8c4:	ddc8      	ble.n	2401e858 <floor+0x40>
2401e8c6:	2900      	cmp	r1, #0
2401e8c8:	da02      	bge.n	2401e8d0 <floor+0xb8>
2401e8ca:	2b14      	cmp	r3, #20
2401e8cc:	d103      	bne.n	2401e8d6 <floor+0xbe>
2401e8ce:	3101      	adds	r1, #1
2401e8d0:	ea20 0002 	bic.w	r0, r0, r2
2401e8d4:	e7c0      	b.n	2401e858 <floor+0x40>
2401e8d6:	2401      	movs	r4, #1
2401e8d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401e8dc:	fa04 f303 	lsl.w	r3, r4, r3
2401e8e0:	4418      	add	r0, r3
2401e8e2:	4285      	cmp	r5, r0
2401e8e4:	bf88      	it	hi
2401e8e6:	1909      	addhi	r1, r1, r4
2401e8e8:	e7f2      	b.n	2401e8d0 <floor+0xb8>
2401e8ea:	2000      	movs	r0, #0
2401e8ec:	4601      	mov	r1, r0
2401e8ee:	e7b3      	b.n	2401e858 <floor+0x40>
2401e8f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
2401e8f4:	e7b0      	b.n	2401e858 <floor+0x40>
2401e8f6:	bf00      	nop
2401e8f8:	8800759c 	.word	0x8800759c
2401e8fc:	7e37e43c 	.word	0x7e37e43c
2401e900:	bff00000 	.word	0xbff00000
2401e904:	000fffff 	.word	0x000fffff

2401e908 <floorf>:
2401e908:	ee10 3a10 	vmov	r3, s0
2401e90c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401e910:	3a7f      	subs	r2, #127	; 0x7f
2401e912:	2a16      	cmp	r2, #22
2401e914:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401e918:	dc2a      	bgt.n	2401e970 <floorf+0x68>
2401e91a:	2a00      	cmp	r2, #0
2401e91c:	da11      	bge.n	2401e942 <floorf+0x3a>
2401e91e:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401e980 <floorf+0x78>
2401e922:	ee30 0a27 	vadd.f32	s0, s0, s15
2401e926:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e92e:	dd05      	ble.n	2401e93c <floorf+0x34>
2401e930:	2b00      	cmp	r3, #0
2401e932:	da23      	bge.n	2401e97c <floorf+0x74>
2401e934:	4a13      	ldr	r2, [pc, #76]	; (2401e984 <floorf+0x7c>)
2401e936:	2900      	cmp	r1, #0
2401e938:	bf18      	it	ne
2401e93a:	4613      	movne	r3, r2
2401e93c:	ee00 3a10 	vmov	s0, r3
2401e940:	4770      	bx	lr
2401e942:	4911      	ldr	r1, [pc, #68]	; (2401e988 <floorf+0x80>)
2401e944:	4111      	asrs	r1, r2
2401e946:	420b      	tst	r3, r1
2401e948:	d0fa      	beq.n	2401e940 <floorf+0x38>
2401e94a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401e980 <floorf+0x78>
2401e94e:	ee30 0a27 	vadd.f32	s0, s0, s15
2401e952:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401e95a:	ddef      	ble.n	2401e93c <floorf+0x34>
2401e95c:	2b00      	cmp	r3, #0
2401e95e:	bfbe      	ittt	lt
2401e960:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401e964:	fa40 f202 	asrlt.w	r2, r0, r2
2401e968:	189b      	addlt	r3, r3, r2
2401e96a:	ea23 0301 	bic.w	r3, r3, r1
2401e96e:	e7e5      	b.n	2401e93c <floorf+0x34>
2401e970:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401e974:	d3e4      	bcc.n	2401e940 <floorf+0x38>
2401e976:	ee30 0a00 	vadd.f32	s0, s0, s0
2401e97a:	4770      	bx	lr
2401e97c:	2300      	movs	r3, #0
2401e97e:	e7dd      	b.n	2401e93c <floorf+0x34>
2401e980:	7149f2ca 	.word	0x7149f2ca
2401e984:	bf800000 	.word	0xbf800000
2401e988:	007fffff 	.word	0x007fffff

2401e98c <scalbnf>:
2401e98c:	ee10 3a10 	vmov	r3, s0
2401e990:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401e994:	d02a      	beq.n	2401e9ec <scalbnf+0x60>
2401e996:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401e99a:	d302      	bcc.n	2401e9a2 <scalbnf+0x16>
2401e99c:	ee30 0a00 	vadd.f32	s0, s0, s0
2401e9a0:	4770      	bx	lr
2401e9a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401e9a6:	d122      	bne.n	2401e9ee <scalbnf+0x62>
2401e9a8:	4b23      	ldr	r3, [pc, #140]	; (2401ea38 <scalbnf+0xac>)
2401e9aa:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401ea3c <scalbnf+0xb0>
2401e9ae:	4298      	cmp	r0, r3
2401e9b0:	ee20 0a27 	vmul.f32	s0, s0, s15
2401e9b4:	db16      	blt.n	2401e9e4 <scalbnf+0x58>
2401e9b6:	ee10 3a10 	vmov	r3, s0
2401e9ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401e9be:	3a19      	subs	r2, #25
2401e9c0:	f24c 3150 	movw	r1, #50000	; 0xc350
2401e9c4:	4288      	cmp	r0, r1
2401e9c6:	dd14      	ble.n	2401e9f2 <scalbnf+0x66>
2401e9c8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2401ea40 <scalbnf+0xb4>
2401e9cc:	eddf 6a1d 	vldr	s13, [pc, #116]	; 2401ea44 <scalbnf+0xb8>
2401e9d0:	ee10 3a10 	vmov	r3, s0
2401e9d4:	eeb0 7a67 	vmov.f32	s14, s15
2401e9d8:	2b00      	cmp	r3, #0
2401e9da:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401e9de:	ee27 0a87 	vmul.f32	s0, s15, s14
2401e9e2:	4770      	bx	lr
2401e9e4:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401ea48 <scalbnf+0xbc>
2401e9e8:	ee27 0a80 	vmul.f32	s0, s15, s0
2401e9ec:	4770      	bx	lr
2401e9ee:	0dd2      	lsrs	r2, r2, #23
2401e9f0:	e7e6      	b.n	2401e9c0 <scalbnf+0x34>
2401e9f2:	4410      	add	r0, r2
2401e9f4:	28fe      	cmp	r0, #254	; 0xfe
2401e9f6:	dce7      	bgt.n	2401e9c8 <scalbnf+0x3c>
2401e9f8:	2800      	cmp	r0, #0
2401e9fa:	dd06      	ble.n	2401ea0a <scalbnf+0x7e>
2401e9fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401ea00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401ea04:	ee00 3a10 	vmov	s0, r3
2401ea08:	4770      	bx	lr
2401ea0a:	f110 0f16 	cmn.w	r0, #22
2401ea0e:	da09      	bge.n	2401ea24 <scalbnf+0x98>
2401ea10:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401ea48 <scalbnf+0xbc>
2401ea14:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2401ea4c <scalbnf+0xc0>
2401ea18:	ee10 3a10 	vmov	r3, s0
2401ea1c:	eeb0 7a67 	vmov.f32	s14, s15
2401ea20:	2b00      	cmp	r3, #0
2401ea22:	e7da      	b.n	2401e9da <scalbnf+0x4e>
2401ea24:	3019      	adds	r0, #25
2401ea26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401ea2a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401ea2e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401ea50 <scalbnf+0xc4>
2401ea32:	ee07 3a90 	vmov	s15, r3
2401ea36:	e7d7      	b.n	2401e9e8 <scalbnf+0x5c>
2401ea38:	ffff3cb0 	.word	0xffff3cb0
2401ea3c:	4c000000 	.word	0x4c000000
2401ea40:	7149f2ca 	.word	0x7149f2ca
2401ea44:	f149f2ca 	.word	0xf149f2ca
2401ea48:	0da24260 	.word	0x0da24260
2401ea4c:	8da24260 	.word	0x8da24260
2401ea50:	33000000 	.word	0x33000000

2401ea54 <sinTable_f32>:
2401ea54:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2401ea64:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2401ea74:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2401ea84:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2401ea94:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2401eaa4:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2401eab4:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2401eac4:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2401ead4:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2401eae4:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2401eaf4:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2401eb04:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2401eb14:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2401eb24:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2401eb34:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2401eb44:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2401eb54:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2401eb64:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2401eb74:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2401eb84:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2401eb94:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2401eba4:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2401ebb4:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2401ebc4:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2401ebd4:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2401ebe4:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2401ebf4:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2401ec04:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2401ec14:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2401ec24:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2401ec34:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2401ec44:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2401ec54:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2401ec64:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2401ec74:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2401ec84:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2401ec94:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2401eca4:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2401ecb4:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2401ecc4:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2401ecd4:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2401ece4:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2401ecf4:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2401ed04:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2401ed14:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2401ed24:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2401ed34:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2401ed44:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2401ed54:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2401ed64:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2401ed74:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2401ed84:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2401ed94:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2401eda4:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2401edb4:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2401edc4:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2401edd4:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2401ede4:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2401edf4:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2401ee04:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2401ee14:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2401ee24:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2401ee34:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2401ee44:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2401ee54:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2401ee64:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2401ee74:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2401ee84:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2401ee94:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2401eea4:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2401eeb4:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2401eec4:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2401eed4:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2401eee4:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2401eef4:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2401ef04:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2401ef14:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2401ef24:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2401ef34:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2401ef44:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2401ef54:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2401ef64:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2401ef74:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2401ef84:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2401ef94:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2401efa4:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2401efb4:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2401efc4:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2401efd4:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2401efe4:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2401eff4:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2401f004:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2401f014:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2401f024:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2401f034:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2401f044:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2401f054:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2401f064:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2401f074:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2401f084:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2401f094:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2401f0a4:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2401f0b4:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2401f0c4:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2401f0d4:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2401f0e4:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2401f0f4:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2401f104:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2401f114:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2401f124:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2401f134:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2401f144:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2401f154:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2401f164:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2401f174:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2401f184:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2401f194:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2401f1a4:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2401f1b4:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2401f1c4:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2401f1d4:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2401f1e4:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2401f1f4:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2401f204:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2401f214:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2401f224:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2401f234:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2401f244:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2401f254:	80000000 62652e2a 00000070 53594850     ....*.ebp...PHYS
2401f264:	52545320 20202031 00002020 64656546      STR1     ..Feed
2401f274:	6b636162 00002020 64696c53 696f4e65     back  ..SlideNoi
2401f284:	00002073 63756c50 6469576b 00002074     s ..PluckWidt ..
2401f294:	6b636950 73696f4e 00002065 6b636950     PickNoise ..Pick
2401f2a4:	69537075 0000206d 6f622d45 20202077     upSim ..E-bow   
2401f2b4:	00002020 20202020 20202020 00002020       ..          ..
2401f2c4:	53594850 52545320 20202032 00002020     PHYS STR2     ..
2401f2d4:	61636544 6d695479 00002065 656e6f54     DecayTime ..Tone
2401f2e4:	20202020 00002020 63756c50 736f506b           ..PluckPos
2401f2f4:	00002020 6b636950 6f507075 00002073       ..PickupPos ..
2401f304:	66697453 73656e66 00002073 41204246     Stiffness ..FB A
2401f314:	2020706d 00002020 53204246 64656570     mp    ..FB Speed
2401f324:	00002020 46205550 65746c69 00002072       ..PU Filter ..
2401f334:	6d726148 63696e6f 00002020 6d726148     Harmonic  ..Harm
2401f344:	58736f50 00002020 6d726148 59736f50     PosX  ..HarmPosY
2401f354:	00002020 6f4d5550 74615264 00002065       ..PUModRate ..
2401f364:	6f4d5550 706d4164 00002020 6e616850     PUModAmp  ..Phan
2401f374:	486d6f74 00002020 69465550 7265746c     tomH  ..PUFilter
2401f384:	00002051 6b616550 72462046 00002071     Q ..PeakF Frq ..
2401f394:	6b616550 20512046 00002020 736e6554     PeakF Q   ..Tens
2401f3a4:	206e6f69 00002047 756f6341 63697473     ion G ..Acoustic
2401f3b4:	00002020 49444441 45564954 20202020       ..ADDITIVE    
2401f3c4:	00002020 65727453 20686374 00002020       ..Stretch   ..
2401f3d4:	746c6954 20202020 00002020 73696f4e     Tilt      ..Nois
2401f3e4:	706d4165 00002020 6b636950 6d417075     eAmp  ..PickupAm
2401f3f4:	00002070 65766944 20706d41 00002020     p ..DiveAmp   ..
2401f404:	65766944 65746152 00002020 61636544     DiveRate  ..Deca
2401f414:	20202079 00002020 41434f56 2020204c     y     ..VOCAL   
2401f424:	20202020 00000020 657a6953 20202020          ...Size    
2401f434:	00002020 70696843 6b6e756d 00002020       ..Chipmunk  ..
2401f444:	6d616944 72657465 00002020 6173614e     Diameter  ..Nasa
2401f454:	2020206c 00002020 62727554 696f4e20     l     ..Turb Noi
2401f464:	00002073 6f766e55 64656369 00002020     s ..Unvoiced  ..
2401f474:	6b636142 20736f50 00002020 6b636142     BackPos   ..Back
2401f484:	6d616944 00002020 6e756f54 6f506567     Diam  ..ToungePo
2401f494:	00202073 6e756f54 69446567 00202061     s  .ToungeDia  .
2401f4a4:	49525453 2033474e 20202020 00000020     STRING3      ...
2401f4b4:	50205550 20706f72 00002020 6b636c50     PU Prop   ..Plck
2401f4c4:	6f725020 00002070 73696f4e 6c694665      Prop ..NoiseFil
2401f4d4:	00002074 73696f4e 69614765 0000206e     t ..NoiseGain ..
2401f4e4:	706d6144 20676e69 00002020 63756c50     Damping   ..Pluc
2401f4f4:	736f506b 00000020 50205550 2020736f     kPos ...PU Pos  
2401f504:	00000020 69617262 69622e6e 0000006e      ...brain.bin...

2401f514 <D1CorePrescTable>:
2401f514:	00000000 04030201 04030201 09080706     ................

2401f524 <flagBitshiftOffset.0>:
2401f524:	16100600 16100600                       ........

2401f52c <SD_Driver>:
2401f52c:	2400e901 2400e935 2400e955 2400e9e5     ...$5..$U..$...$
2401f53c:	2400e97d 3c3a2a22 7f7c3f3e 00000000     }..$"*:<>?|.....
2401f54c:	3d3b2c2b 00005d5b                       +,;=[]..

2401f554 <ExCvt>:
2401f554:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401f564:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401f574:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401f584:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401f594:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401f5a4:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401f5b4:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401f5c4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401f5d4 <LfnOfs>:
2401f5d4:	07050301 12100e09 1c181614 0000001e     ................

2401f5e4 <Tbl>:
2401f5e4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401f5f4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401f604:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401f614:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401f624:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401f634:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401f644:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401f654:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401f664:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401f674:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401f684:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401f694:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401f6a4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401f6b4:	00da00de 00d900db 00dd00fd 00b400af     ................
2401f6c4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401f6d4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401f6e4 <cvt1.1>:
2401f6e4:	031a0061 031700e0 030700f8 000100ff     a...............
2401f6f4:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401f704:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401f714:	01840182 01860184 01870187 018a0189     ................
2401f724:	018b018b 018e018d 0190018f 01910191     ................
2401f734:	01940193 019601f6 01980197 023d0198     ..............=.
2401f744:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401f754:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401f764:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401f774:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401f784:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401f794:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401f7a4:	01ca01cb 011001cd 000101dd 01de018e     ................
2401f7b4:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401f7c4:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401f7d4:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401f7e4:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401f7f4:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401f804:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401f814:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401f824:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401f834:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401f844:	01a90282 02850284 02870286 024401ae     ..............D.
2401f854:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401f864:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401f874:	03880386 038a0389 031103b1 000203c2     ................
2401f884:	03a303a3 030803c4 000303cc 038e038c     ................
2401f894:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401f8a4:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401f8b4:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401f8c4:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401f8d4:	00000000                                ....

2401f8d8 <cvt2.0>:
2401f8d8:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401f8e8:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401f8f8:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401f908:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401f918:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401f928:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401f938:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401f948:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401f958:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401f968:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401f978:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401f988:	2d000164 ff410826 0000031a              d..-&.A.....

2401f994 <__filterTanhTable_48000>:
2401f994:	3a0c4647 3a0c8a33 3a0cce41 3a0d126f     GF.:3..:A..:o..:
2401f9a4:	3a0d56be 3a0d9b2e 3a0ddfc0 3a0e2472     .V.:...:...:r$.:
2401f9b4:	3a0e6946 3a0eae3c 3a0ef352 3a0f388a     Fi.:<..:R..:.8.:
2401f9c4:	3a0f7de4 3a0fc35f 3a1008fc 3a104eba     .}.:_..:...:.N.:
2401f9d4:	3a10949a 3a10da9d 3a1120c1 3a116707     ...:...:. .:.g.:
2401f9e4:	3a11ad6f 3a11f3f9 3a123aa5 3a128173     o..:...:.:.:s..:
2401f9f4:	3a12c864 3a130f77 3a1356ad 3a139e05     d..:w..:.V.:...:
2401fa04:	3a13e57f 3a142d1c 3a1474dc 3a14bcbf     ...:.-.:.t.:...:
2401fa14:	3a1504c4 3a154ced 3a159538 3a15dda6     ...:.L.:8..:...:
2401fa24:	3a162637 3a166eec 3a16b7c3 3a1700be     7&.:.n.:...:...:
2401fa34:	3a1749dc 3a17931e 3a17dc83 3a18260c     .I.:...:...:.&.:
2401fa44:	3a186fb8 3a18b988 3a19037c 3a194d93     .o.:...:|..:.M.:
2401fa54:	3a1997ce 3a19e22e 3a1a2cb1 3a1a7758     ...:...:.,.:Xw.:
2401fa64:	3a1ac224 3a1b0d14 3a1b5828 3a1ba360     $..:...:(X.:`..:
2401fa74:	3a1beebd 3a1c3a3e 3a1c85e4 3a1cd1af     ...:>:.:...:...:
2401fa84:	3a1d1d9e 3a1d69b2 3a1db5eb 3a1e0248     ...:.i.:...:H..:
2401fa94:	3a1e4ecb 3a1e9b73 3a1ee840 3a1f3532     .N.:s..:@..:25.:
2401faa4:	3a1f8249 3a1fcf86 3a201ce8 3a206a6f     I..:...:.. :oj :
2401fab4:	3a20b81c 3a2105ef 3a2153e7 3a21a205     .. :..!:.S!:..!:
2401fac4:	3a21f049 3a223eb3 3a228d43 3a22dbf9     I.!:.>":C.":..":
2401fad4:	3a232ad5 3a2379d7 3a23c8ff 3a24184e     .*#:.y#:..#:N.$:
2401fae4:	3a2467c3 3a24b75e 3a250721 3a255709     .g$:^.$:!.%:.W%:
2401faf4:	3a25a719 3a25f74f 3a2647ac 3a269830     ..%:O.%:.G&:0.&:
2401fb04:	3a26e8db 3a2739ad 3a278aa6 3a27dbc7     ..&:.9':..':..':
2401fb14:	3a282d0e 3a287e7d 3a28d014 3a2921d2     .-(:}~(:..(:.!):
2401fb24:	3a2973b7 3a29c5c4 3a2a17f9 3a2a6a56     .s):..):..*:Vj*:
2401fb34:	3a2abcda 3a2b0f87 3a2b625c 3a2bb558     ..*:..+:\b+:X.+:
2401fb44:	3a2c087d 3a2c5bca 3a2caf40 3a2d02de     }.,:.[,:@.,:..-:
2401fb54:	3a2d56a4 3a2daa93 3a2dfeaa 3a2e52eb     .V-:..-:..-:.R.:
2401fb64:	3a2ea754 3a2efbe6 3a2f50a1 3a2fa585     T..:...:.P/:../:
2401fb74:	3a2ffa92 3a304fc8 3a30a527 3a30fab0     ../:.O0:'.0:..0:
2401fb84:	3a315062 3a31a63e 3a31fc44 3a325273     bP1:>.1:D.1:sR2:
2401fb94:	3a32a8cb 3a32ff4e 3a3355fa 3a33acd0     ..2:N.2:.U3:..3:
2401fba4:	3a3403d1 3a345afb 3a34b250 3a3509cf     ..4:.Z4:P.4:..5:
2401fbb4:	3a356179 3a35b94c 3a36114b 3a366974     ya5:L.5:K.6:ti6:
2401fbc4:	3a36c1c8 3a371a46 3a3772ef 3a37cbc3     ..6:F.7:.r7:..7:
2401fbd4:	3a3824c3 3a387ded 3a38d743 3a3930c3     .$8:.}8:C.8:.09:
2401fbe4:	3a398a6f 3a39e447 3a3a3e4a 3a3a9879     o.9:G.9:J>::y.::
2401fbf4:	3a3af2d3 3a3b4d59 3a3ba80b 3a3c02e9     ..::YM;:..;:..<:
2401fc04:	3a3c5df2 3a3cb928 3a3d148a 3a3d7019     .]<:(.<:..=:.p=:
2401fc14:	3a3dcbd3 3a3e27ba 3a3e83ce 3a3ee00e     ..=:.'>:..>:..>:
2401fc24:	3a3f3c7b 3a3f9914 3a3ff5da 3a4052ce     {<?:..?:..?:.R@:
2401fc34:	3a40afee 3a410d3b 3a416ab6 3a41c85e     ..@:;.A:.jA:^.A:
2401fc44:	3a422633 3a428436 3a42e266 3a4340c4     3&B:6.B:f.B:.@C:
2401fc54:	3a439f4f 3a43fe08 3a445cef 3a44bc04     O.C:..C:.\D:..D:
2401fc64:	3a451b48 3a457ab9 3a45da58 3a463a26     H.E:.zE:X.E:&:F:
2401fc74:	3a469a22 3a46fa4d 3a475aa6 3a47bb2e     ".F:M.F:.ZG:..G:
2401fc84:	3a481be4 3a487cca 3a48ddde 3a493f21     ..H:.|H:..H:!?I:
2401fc94:	3a49a094 3a4a0235 3a4a6406 3a4ac606     ..I:5.J:.dJ:..J:
2401fca4:	3a4b2836 3a4b8a95 3a4bed24 3a4c4fe3     6(K:..K:$.K:.OL:
2401fcb4:	3a4cb2d1 3a4d15ef 3a4d793e 3a4ddcbc     ..L:..M:>yM:..M:
2401fcc4:	3a4e406b 3a4ea44a 3a4f0859 3a4f6c98     k@N:J.N:Y.O:.lO:
2401fcd4:	3a4fd109 3a5035a9 3a509a7b 3a50ff7d     ..O:.5P:{.P:}.P:
2401fce4:	3a5164b1 3a51ca15 3a522faa 3a529571     .dQ:..Q:./R:q.R:
2401fcf4:	3a52fb69 3a536192 3a53c7ed 3a542e79     i.R:.aS:..S:y.T:
2401fd04:	3a549537 3a54fc26 3a556348 3a55ca9b     7.T:&.T:HcU:..U:
2401fd14:	3a563221 3a5699d8 3a5701c2 3a5769de     !2V:..V:..W:.iW:
2401fd24:	3a57d22d 3a583aae 3a58a361 3a590c48     -.W:.:X:a.X:H.Y:
2401fd34:	3a597561 3a59dead 3a5a482c 3a5ab1de     auY:..Y:,HZ:..Z:
2401fd44:	3a5b1bc3 3a5b85dc 3a5bf028 3a5c5aa7     ..[:..[:(.[:.Z\:
2401fd54:	3a5cc55a 3a5d3041 3a5d9b5b 3a5e06aa     Z.\:A0]:[.]:..^:
2401fd64:	3a5e722c 3a5edde2 3a5f49cd 3a5fb5eb     ,r^:..^:.I_:.._:
2401fd74:	3a60223e 3a608ec6 3a60fb82 3a616873     >"`:..`:..`:sha:
2401fd84:	3a61d598 3a6242f2 3a62b082 3a631e46     ..a:.Bb:..b:F.c:
2401fd94:	3a638c3f 3a63fa6e 3a6468d2 3a64d76c     ?.c:n.c:.hd:l.d:
2401fda4:	3a65463b 3a65b53f 3a66247a 3a6693ea     ;Fe:?.e:z$f:..f:
2401fdb4:	3a670390 3a67736d 3a67e37f 3a6853c8     ..g:msg:..g:.Sh:
2401fdc4:	3a68c447 3a6934fd 3a69a5e9 3a6a170c     G.h:.4i:..i:..j:
2401fdd4:	3a6a8866 3a6af9f6 3a6b6bbe 3a6bddbc     f.j:..j:.kk:..k:
2401fde4:	3a6c4ff2 3a6cc25f 3a6d3504 3a6da7e0     .Ol:_.l:.5m:..m:
2401fdf4:	3a6e1af4 3a6e8e3f 3a6f01c2 3a6f757d     ..n:?.n:..o:}uo:
2401fe04:	3a6fe971 3a705d9c 3a70d200 3a71469c     q.o:.]p:..p:.Fq:
2401fe14:	3a71bb70 3a72307d 3a72a5c3 3a731b41     p.q:}0r:..r:A.s:
2401fe24:	3a7390f8 3a7406e9 3a747d12 3a74f375     ..s:..t:.}t:u.t:
2401fe34:	3a756a11 3a75e0e6 3a7657f5 3a76cf3e     .ju:..u:.Wv:>.v:
2401fe44:	3a7746c0 3a77be7d 3a783673 3a78aea3     .Fw:}.w:s6x:..x:
2401fe54:	3a79270e 3a799fb2 3a7a1892 3a7a91ab     .'y:..y:..z:..z:
2401fe64:	3a7b0b00 3a7b848f 3a7bfe59 3a7c785e     ..{:..{:Y.{:^x|:
2401fe74:	3a7cf29e 3a7d6d19 3a7de7d0 3a7e62c2     ..|:.m}:..}:.b~:
2401fe84:	3a7eddef 3a7f5958 3a7fd4fd 3a80286f     ..~:XY.:...:o(.:
2401fe94:	3a80667d 3a80a4aa 3a80e2f4 3a81215d     }f.:...:...:]!.:
2401fea4:	3a815fe4 3a819e89 3a81dd4d 3a821c2f     ._.:...:M..:/..:
2401feb4:	3a825b2f 3a829a4e 3a82d98b 3a8318e8     /[.:N..:...:...:
2401fec4:	3a835862 3a8397fc 3a83d7b4 3a84178b     bX.:...:...:...:
2401fed4:	3a845781 3a849796 3a84d7ca 3a85181d     .W.:...:...:...:
2401fee4:	3a855890 3a859921 3a85d9d2 3a861aa2     .X.:!..:...:...:
2401fef4:	3a865b92 3a869ca0 3a86ddcf 3a871f1d     .[.:...:...:...:
2401ff04:	3a87608a 3a87a218 3a87e3c5 3a882592     .`.:...:...:.%.:
2401ff14:	3a88677e 3a88a98b 3a88ebb7 3a892e04     ~g.:...:...:...:
2401ff24:	3a897071 3a89b2fe 3a89f5ab 3a8a3878     qp.:...:...:x8.:
2401ff34:	3a8a7b66 3a8abe74 3a8b01a3 3a8b44f2     f{.:t..:...:.D.:
2401ff44:	3a8b8862 3a8bcbf2 3a8c0fa3 3a8c5375     b..:...:...:uS.:
2401ff54:	3a8c9768 3a8cdb7b 3a8d1fb0 3a8d6406     h..:{..:...:.d.:
2401ff64:	3a8da87c 3a8ded14 3a8e31cd 3a8e76a8     |..:...:.1.:.v.:
2401ff74:	3a8ebba3 3a8f00c0 3a8f45ff 3a8f8b5f     ...:...:.E.:_..:
2401ff84:	3a8fd0e1 3a901684 3a905c49 3a90a230     ...:...:I\.:0..:
2401ff94:	3a90e839 3a912e63 3a9174b0 3a91bb1f     9..:c..:.t.:...:
2401ffa4:	3a9201af 3a924862 3a928f37 3a92d62f     ...:bH.:7..:/..:
2401ffb4:	3a931d49 3a936485 3a93abe4 3a93f365     I..:.d.:...:e..:
2401ffc4:	3a943b09 3a9482cf 3a94cab9 3a9512c5     .;.:...:...:...:
2401ffd4:	3a955af4 3a95a346 3a95ebbb 3a963453     .Z.:F..:...:S4.:
2401ffe4:	3a967d0e 3a96c5ed 3a970eef 3a975814     .}.:...:...:.X.:
2401fff4:	3a97a15c 3a97eac8 3a983458 3a987e0b     \..:...:X4.:.~.:
24020004:	3a98c7e2 3a9911dc 3a995bfb 3a99a63d     ...:...:.[.:=..:
24020014:	3a99f0a4 3a9a3b2e 3a9a85dc 3a9ad0af     ...:.;.:...:...:
24020024:	3a9b1ba6 3a9b66c1 3a9bb200 3a9bfd64     ...:.f.:...:d..:
24020034:	3a9c48ed 3a9c949a 3a9ce06b 3a9d2c62     .H.:...:k..:b,.:
24020044:	3a9d787d 3a9dc4bd 3a9e1122 3a9e5dac     }x.:...:"..:.].:
24020054:	3a9eaa5a 3a9ef72f 3a9f4428 3a9f9146     Z..:/..:(D.:F..:
24020064:	3a9fde8a 3aa02bf4 3aa07982 3aa0c737     ...:.+.:.y.:7..:
24020074:	3aa11511 3aa16310 3aa1b136 3aa1ff81     ...:.c.:6..:...:
24020084:	3aa24df2 3aa29c8a 3aa2eb47 3aa33a2a     .M.:...:G..:*:.:
24020094:	3aa38934 3aa3d864 3aa427ba 3aa47736     4..:d..:.'.:6w.:
240200a4:	3aa4c6d9 3aa516a3 3aa56693 3aa5b6aa     ...:...:.f.:...:
240200b4:	3aa606e8 3aa6574d 3aa6a7d8 3aa6f88b     ...:MW.:...:...:
240200c4:	3aa74964 3aa79a65 3aa7eb8d 3aa83cdd     dI.:e..:...:.<.:
240200d4:	3aa88e53 3aa8dff1 3aa931b7 3aa983a4     S..:...:.1.:...:
240200e4:	3aa9d5b9 3aaa27f6 3aaa7a5a 3aaacce7     ...:.'.:Zz.:...:
240200f4:	3aab1f9b 3aab7277 3aabc57c 3aac18a9     ...:wr.:|..:...:
24020104:	3aac6bfe 3aacbf7b 3aad1321 3aad66ef     .k.:{..:!..:.f.:
24020114:	3aadbae6 3aae0f05 3aae634d 3aaeb7be     ...:...:Mc.:...:
24020124:	3aaf0c58 3aaf611b 3aafb607 3ab00b1c     X..:.a.:...:...:
24020134:	3ab0605b 3ab0b5c2 3ab10b53 3ab1610d     [`.:...:S..:.a.:
24020144:	3ab1b6f1 3ab20cff 3ab26336 3ab2b996     ...:...:6c.:...:
24020154:	3ab31021 3ab366d6 3ab3bdb4 3ab414bd     !..:.f.:...:...:
24020164:	3ab46bf0 3ab4c34d 3ab51ad4 3ab57286     .k.:M..:...:.r.:
24020174:	3ab5ca62 3ab62268 3ab67a9a 3ab6d2f6     b..:h".:.z.:...:
24020184:	3ab72b7c 3ab7842e 3ab7dd0b 3ab83612     |+.:...:...:.6.:
24020194:	3ab88f45 3ab8e8a3 3ab9422c 3ab99be1     E..:...:,B.:...:
240201a4:	3ab9f5c1 3aba4fcc 3abaaa03 3abb0466     ...:.O.:...:f..:
240201b4:	3abb5ef5 3abbb9af 3abc1495 3abc6fa8     .^.:...:...:.o.:
240201c4:	3abccae6 3abd2651 3abd81e8 3abdddab     ...:Q&.:...:...:
240201d4:	3abe399b 3abe95b7 3abef200 3abf4e75     .9.:...:...:uN.:
240201e4:	3abfab18 3ac007e7 3ac064e3 3ac0c20c     ...:...:.d.:...:
240201f4:	3ac11f62 3ac17ce5 3ac1da96 3ac23874     b..:.|.:...:t8.:
24020204:	3ac29680 3ac2f4b9 3ac3531f 3ac3b1b4     ...:...:.S.:...:
24020214:	3ac41076 3ac46f66 3ac4ce84 3ac52dd0     v..:fo.:...:.-.:
24020224:	3ac58d4a 3ac5ecf3 3ac64cc9 3ac6accf     J..:...:.L.:...:
24020234:	3ac70d02 3ac76d65 3ac7cdf5 3ac82eb5     ...:em.:...:...:
24020244:	3ac88fa4 3ac8f0c1 3ac9520e 3ac9b389     ...:...:.R.:...:
24020254:	3aca1534 3aca770e 3acad918 3acb3b51     4..:.w.:...:Q;.:
24020264:	3acb9db9 3acc0051 3acc6319 3accc611     ...:Q..:.c.:...:
24020274:	3acd2939 3acd8c90 3acdf018 3ace53d0     9).:...:...:.S.:
24020284:	3aceb7b8 3acf1bd1 3acf801a 3acfe494     ...:...:...:...:
24020294:	3ad0493e 3ad0ae19 3ad11325 3ad17862     >I.:...:%..:bx.:
240202a4:	3ad1ddd0 3ad2436f 3ad2a93f 3ad30f40     ...:oC.:?..:@..:
240202b4:	3ad37573 3ad3dbd7 3ad4426d 3ad4a935     su.:...:mB.:5..:
240202c4:	3ad5102e 3ad5775a 3ad5deb7 3ad64646     ...:Zw.:...:FF.:
240202d4:	3ad6ae07 3ad715fb 3ad77e21 3ad7e679     ...:...:!~.:y..:
240202e4:	3ad84f04 3ad8b7c2 3ad920b2 3ad989d5     .O.:...:. .:...:
240202f4:	3ad9f32b 3ada5cb4 3adac670 3adb305f     +..:.\.:p..:_0.:
24020304:	3adb9a82 3adc04d8 3adc6f61 3adcda1e     ...:...:ao.:...:
24020314:	3add450f 3addb034 3ade1b8c 3ade8719     .E.:4..:...:...:
24020324:	3adef2d9 3adf5ece 3adfcaf6 3ae03754     ...:.^.:...:T7.:
24020334:	3ae0a3e6 3ae110ac 3ae17da7 3ae1ead7     ...:...:.}.:...:
24020344:	3ae2583b 3ae2c5d5 3ae333a3 3ae3a1a7     ;X.:...:.3.:...:
24020354:	3ae40fe0 3ae47e4f 3ae4ecf3 3ae55bcc     ...:O~.:...:.[.:
24020364:	3ae5cadc 3ae63a21 3ae6a99b 3ae7194c     ...:!:.:...:L..:
24020374:	3ae78933 3ae7f950 3ae869a4 3ae8da2e     3..:P..:.i.:...:
24020384:	3ae94aee 3ae9bbe5 3aea2d12 3aea9e77     .J.:...:.-.:w..:
24020394:	3aeb1012 3aeb81e4 3aebf3ee 3aec662e     ...:...:...:.f.:
240203a4:	3aecd8a6 3aed4b56 3aedbe3d 3aee315b     ...:VK.:=..:[1.:
240203b4:	3aeea4b1 3aef1840 3aef8c06 3af00004     ...:@..:...:...:
240203c4:	3af0743a 3af0e8a9 3af15d50 3af1d22f     :t.:...:P].:/..:
240203d4:	3af24747 3af2bc98 3af33222 3af3a7e4     GG.:...:"2.:...:
240203e4:	3af41ddf 3af49414 3af50a82 3af58129     ...:...:...:)..:
240203f4:	3af5f80a 3af66f24 3af6e678 3af75e06     ...:$o.:x..:.^.:
24020404:	3af7d5cd 3af84dcf 3af8c60a 3af93e80     ...:.M.:...:.>.:
24020414:	3af9b731 3afa301b 3afaa940 3afb22a0     1..:.0.:@..:.".:
24020424:	3afb9c3b 3afc1610 3afc9021 3afd0a6d     ;..:...:!..:m..:
24020434:	3afd84f3 3afdffb6 3afe7ab3 3afef5ec     ...:...:.z.:...:
24020444:	3aff7161 3affed12 3b00347f 3b007293     aq.:...:.4.;.r.;
24020454:	3b00b0c6 3b00ef16 3b012d85 3b016c12     ...;...;.-.;.l.;
24020464:	3b01aabd 3b01e986 3b02286e 3b026775     ...;...;n(.;ug.;
24020474:	3b02a699 3b02e5dd 3b03253f 3b0364c0     ...;...;?%.;.d.;
24020484:	3b03a45f 3b03e41d 3b0423fb 3b0463f7     _..;...;.#.;.c.;
24020494:	3b04a412 3b04e44c 3b0524a5 3b05651e     ...;L..;.$.;.e.;
240204a4:	3b05a5b5 3b05e66c 3b062742 3b066838     ...;l..;B'.;8h.;
240204b4:	3b06a94d 3b06ea82 3b072bd6 3b076d49     M..;...;.+.;Im.;
240204c4:	3b07aedd 3b07f090 3b083263 3b087456     ...;...;c2.;Vt.;
240204d4:	3b08b669 3b08f89c 3b093aef 3b097d62     i..;...;.:.;b}.;
240204e4:	3b09bff5 3b0a02a8 3b0a457c 3b0a8870     ...;...;|E.;p..;
240204f4:	3b0acb85 3b0b0eba 3b0b520f 3b0b9585     ...;...;.R.;...;
24020504:	3b0bd91c 3b0c1cd4 3b0c60ac 3b0ca4a5     ...;...;.`.;...;
24020514:	3b0ce8bf 3b0d2cfa 3b0d7157 3b0db5d4     ...;.,.;Wq.;...;
24020524:	3b0dfa72 3b0e3f32 3b0e8413 3b0ec915     r..;2?.;...;...;
24020534:	3b0f0e39 3b0f537e 3b0f98e4 3b0fde6d     9..;~S.;...;m..;
24020544:	3b102417 3b1069e2 3b10afd0 3b10f5df     .$.;.i.;...;...;
24020554:	3b113c10 3b118264 3b11c8d9 3b120f70     .<.;d..;...;p..;
24020564:	3b12562a 3b129d06 3b12e404 3b132b24     *V.;...;...;$+.;
24020574:	3b137267 3b13b9cd 3b140155 3b144900     gr.;...;U..;.I.;
24020584:	3b1490cd 3b14d8bd 3b1520d0 3b156906     ...;...;. .;.i.;
24020594:	3b15b15f 3b15f9db 3b16427a 3b168b3c     _..;...;zB.;<..;
240205a4:	3b16d421 3b171d2a 3b176656 3b17afa6     !..;*..;Vf.;...;
240205b4:	3b17f919 3b1842af 3b188c69 3b18d647     ...;.B.;i..;G..;
240205c4:	3b192049 3b196a6e 3b19b4b8 3b19ff25     I .;nj.;...;%..;
240205d4:	3b1a49b7 3b1a946c 3b1adf46 3b1b2a44     .I.;l..;F..;D*.;
240205e4:	3b1b7566 3b1bc0ad 3b1c0c18 3b1c57a7     fu.;...;...;.W.;
240205f4:	3b1ca35b 3b1cef34 3b1d3b32 3b1d8754     [..;4..;2;.;T..;
24020604:	3b1dd39b 3b1e2008 3b1e6c99 3b1eb94f     ...;. .;.l.;O..;
24020614:	3b1f062a 3b1f532b 3b1fa051 3b1fed9c     *..;+S.;Q..;...;
24020624:	3b203b0d 3b2088a3 3b20d65f 3b212440     .; ;.. ;_. ;@$!;
24020634:	3b217247 3b21c074 3b220ec7 3b225d3f     Gr!;t.!;..";?]";
24020644:	3b22abde 3b22faa3 3b23498e 3b23989f     ..";..";.I#;..#;
24020654:	3b23e7d6 3b243734 3b2486b8 3b24d663     ..#;47$;..$;c.$;
24020664:	3b252634 3b25762c 3b25c64a 3b261690     4&%;,v%;J.%;..&;
24020674:	3b2666fc 3b26b78f 3b27084a 3b27592b     .f&;..&;J.';+Y';
24020684:	3b27aa33 3b27fb63 3b284cba 3b289e39     3.';c.';.L(;9.(;
24020694:	3b28efde 3b2941ac 3b2993a1 3b29e5be     ..(;.A);..);..);
240206a4:	3b2a3802 3b2a8a6e 3b2add03 3b2b2fbf     .8*;n.*;..*;./+;
240206b4:	3b2b82a3 3b2bd5af 3b2c28e4 3b2c7c41     ..+;..+;.(,;A|,;
240206c4:	3b2ccfc6 3b2d2374 3b2d774a 3b2dcb49     ..,;t#-;Jw-;I.-;
240206d4:	3b2e1f71 3b2e73c1 3b2ec83a 3b2f1cdc     q..;.s.;:..;../;
240206e4:	3b2f71a7 3b2fc69b 3b301bb8 3b3070fe     .q/;../;..0;.p0;
240206f4:	3b30c66e 3b311c07 3b3171ca 3b31c7b6     n.0;..1;.q1;..1;
24020704:	3b321dcb 3b32740b 3b32ca74 3b332107     ..2;.t2;t.2;.!3;
24020714:	3b3377c3 3b33ceaa 3b3425bb 3b347cf6     .w3;..3;.%4;.|4;
24020724:	3b34d45c 3b352beb 3b3583a5 3b35db8a     \.4;.+5;..5;..5;
24020734:	3b363399 3b368bd2 3b36e437 3b373cc6     .36;..6;7.6;.<7;
24020744:	3b379580 3b37ee65 3b384775 3b38a0b1     ..7;e.7;uG8;..8;
24020754:	3b38fa17 3b3953a9 3b39ad66 3b3a074f     ..8;.S9;f.9;O.:;
24020764:	3b3a6163 3b3abba2 3b3b160e 3b3b70a5     ca:;..:;..;;.p;;
24020774:	3b3bcb68 3b3c2657 3b3c8172 3b3cdcb9     h.;;W&<;r.<;..<;
24020784:	3b3d382d 3b3d93cc 3b3def98 3b3e4b91     -8=;..=;..=;.K>;
24020794:	3b3ea7b6 3b3f0408 3b3f6086 3b3fbd31     ..>;..?;.`?;1.?;
240207a4:	3b401a09 3b40770e 3b40d440 3b41319f     ..@;.w@;@.@;.1A;
240207b4:	3b418f2b 3b41ece5 3b424acc 3b42a8e0     +.A;..A;.JB;..B;
240207c4:	3b430722 3b436592 3b43c430 3b4422fb     ".C;.eC;0.C;."D;
240207d4:	3b4481f4 3b44e11b 3b454070 3b459ff4     ..D;..D;p@E;..E;
240207e4:	3b45ffa5 3b465f85 3b46bf93 3b471fd0     ..E;._F;..F;..G;
240207f4:	3b47803c 3b47e0d6 3b48419f 3b48a297     <.G;..G;.AH;..H;
24020804:	3b4903bd 3b496513 3b49c698 3b4a284c     ..I;.eI;..I;L(J;
24020814:	3b4a8a30 3b4aec43 3b4b4e85 3b4bb0f7     0.J;C.J;.NK;..K;
24020824:	3b4c1399 3b4c766a 3b4cd96b 3b4d3c9c     ..L;jvL;k.L;.<M;
24020834:	3b4d9ffe 3b4e038f 3b4e6750 3b4ecb42     ..M;..N;PgN;B.N;
24020844:	3b4f2f64 3b4f93b7 3b4ff83a 3b505cee     d/O;..O;:.O;.\P;
24020854:	3b50c1d3 3b5126e9 3b518c2f 3b51f1a7     ..P;.&Q;/.Q;..Q;
24020864:	3b52574f 3b52bd29 3b532335 3b538971     OWR;).R;5#S;q.S;
24020874:	3b53efdf 3b54567f 3b54bd51 3b552454     ..S;.VT;Q.T;T$U;
24020884:	3b558b89 3b55f2f0 3b565a89 3b56c255     ..U;..U;.ZV;U.V;
24020894:	3b572a52 3b579282 3b57fae5 3b58637a     R*W;..W;..W;zcX;
240208a4:	3b58cc41 3b59353b 3b599e69 3b5a07c9     A.X;;5Y;i.Y;..Z;
240208b4:	3b5a715c 3b5adb22 3b5b451c 3b5baf48     \qZ;".Z;.E[;H.[;
240208c4:	3b5c19a8 3b5c843c 3b5cef03 3b5d59fe     ..\;<.\;..\;.Y];
240208d4:	3b5dc52d 3b5e3090 3b5e9c27 3b5f07f2     -.];.0^;'.^;.._;
240208e4:	3b5f73f1 3b5fe024 3b604c8c 3b60b928     .s_;$._;.L`;(.`;
240208f4:	3b6125f8 3b6192fe 3b620038 3b626da7     .%a;..a;8.b;.mb;
24020904:	3b62db4b 3b634925 3b63b733 3b642577     K.b;%Ic;3.c;w%d;
24020914:	3b6493f0 3b65029f 3b657183 3b65e09d     ..d;..e;.qe;..e;
24020924:	3b664fec 3b66bf72 3b672f2e 3b679f1f     .Of;r.f;./g;..g;
24020934:	3b680f47 3b687fa5 3b68f03a 3b696105     G.h;..h;:.h;.ai;
24020944:	3b69d207 3b6a433f 3b6ab4af 3b6b2655     ..i;?Cj;..j;U&k;
24020954:	3b6b9832 3b6c0a47 3b6c7c92 3b6cef15     2.k;G.l;.|l;..l;
24020964:	3b6d61d0 3b6dd4c2 3b6e47eb 3b6ebb4d     .am;..m;.Gn;M.n;
24020974:	3b6f2ee6 3b6fa2b7 3b7016c1 3b708b02     ..o;..o;..p;..p;
24020984:	3b70ff7c 3b71742e 3b71e919 3b725e3c     |.p;.tq;..q;<^r;
24020994:	3b72d398 3b73492d 3b73befb 3b743502     ..r;-Is;..s;.5t;
240209a4:	3b74ab42 3b7521bb 3b75986e 3b760f5a     B.t;.!u;n.u;Z.v;
240209b4:	3b768680 3b76fddf 3b777579 3b77ed4c     ..v;..v;yuw;L.w;
240209c4:	3b786559 3b78dda0 3b795622 3b79cede     Yex;..x;"Vy;..y;
240209d4:	3b7a47d4 3b7ac105 3b7b3a70 3b7bb417     .Gz;..z;p:{;..{;
240209e4:	3b7c2df8 3b7ca815 3b7d226c 3b7d9cff     .-|;..|;l"};..};
240209f4:	3b7e17cd 3b7e92d6 3b7f0e1b 3b7f899c     ..~;..~;...;...;
24020a04:	3b8002ac 3b8040a9 3b807ec3 3b80bcfb     ...;.@.;.~.;...;
24020a14:	3b80fb52 3b8139c6 3b817859 3b81b70a     R..;.9.;Yx.;...;
24020a24:	3b81f5da 3b8234c8 3b8273d4 3b82b2ff     ...;.4.;.s.;...;
24020a34:	3b82f249 3b8331b1 3b837138 3b83b0de     I..;.1.;8q.;...;
24020a44:	3b83f0a2 3b843086 3b847088 3b84b0a9     ...;.0.;.p.;...;
24020a54:	3b84f0ea 3b853149 3b8571c8 3b85b266     ...;I1.;.q.;f..;
24020a64:	3b85f323 3b8633ff 3b8674fb 3b86b617     #..;.3.;.t.;...;
24020a74:	3b86f752 3b8738ac 3b877a26 3b87bbc0     R..;.8.;&z.;...;
24020a84:	3b87fd7a 3b883f53 3b88814c 3b88c366     z..;S?.;L..;f..;
24020a94:	3b89059f 3b8947f8 3b898a72 3b89cd0c     ...;.G.;r..;...;
24020aa4:	3b8a0fc5 3b8a52a0 3b8a959a 3b8ad8b5     ...;.R.;...;...;
24020ab4:	3b8b1bf1 3b8b5f4d 3b8ba2ca 3b8be667     ...;M_.;...;g..;
24020ac4:	3b8c2a25 3b8c6e04 3b8cb204 3b8cf625     %*.;.n.;...;%..;
24020ad4:	3b8d3a66 3b8d7ec9 3b8dc34d 3b8e07f2     f:.;.~.;M..;...;
24020ae4:	3b8e4cb8 3b8e91a0 3b8ed6a9 3b8f1bd3     .L.;...;...;...;
24020af4:	3b8f611f 3b8fa68d 3b8fec1c 3b9031cd     .a.;...;...;.1.;
24020b04:	3b90779f 3b90bd93 3b9103aa 3b9149e2     .w.;...;...;.I.;
24020b14:	3b91903c 3b91d6b8 3b921d56 3b926417     <..;...;V..;.d.;
24020b24:	3b92aafa 3b92f1ff 3b933926 3b938070     ...;...;&9.;p..;
24020b34:	3b93c7dd 3b940f6c 3b94571d 3b949ef2     ...;l..;.W.;...;
24020b44:	3b94e6e9 3b952f03 3b957740 3b95bfa0     ...;./.;@w.;...;
24020b54:	3b960823 3b9650c9 3b969992 3b96e27f     #..;.P.;...;...;
24020b64:	3b972b8f 3b9774c2 3b97be19 3b980793     .+.;.t.;...;...;
24020b74:	3b985131 3b989af2 3b98e4d7 3b992ee0     1Q.;...;...;...;
24020b84:	3b99790d 3b99c35d 3b9a0dd2 3b9a586b     .y.;]..;...;kX.;
24020b94:	3b9aa328 3b9aee09 3b9b390e 3b9b8438     (..;...;.9.;8..;
24020ba4:	3b9bcf86 3b9c1af8 3b9c668f 3b9cb24b     ...;...;.f.;K..;
24020bb4:	3b9cfe2b 3b9d4a30 3b9d965a 3b9de2a9     +..;0J.;Z..;...;
24020bc4:	3b9e2f1c 3b9e7bb5 3b9ec873 3b9f1556     ./.;.{.;s..;V..;
24020bd4:	3b9f625e 3b9faf8b 3b9ffcde 3ba04a57     ^b.;...;...;WJ.;
24020be4:	3ba097f4 3ba0e5b8 3ba133a1 3ba181b0     ...;...;.3.;...;
24020bf4:	3ba1cfe4 3ba21e3f 3ba26cbf 3ba2bb65     ...;?..;.l.;e..;
24020c04:	3ba30a32 3ba35925 3ba3a83d 3ba3f77d     2..;%Y.;=..;}..;
24020c14:	3ba446e2 3ba4966e 3ba4e621 3ba535fa     .F.;n..;!..;.5.;
24020c24:	3ba585fa 3ba5d620 3ba6266e 3ba676e2     ...; ..;n&.;.v.;
24020c34:	3ba6c77d 3ba7183f 3ba76928 3ba7ba39     }..;?..;(i.;9..;
24020c44:	3ba80b71 3ba85cd0 3ba8ae56 3ba90004     q..;.\.;V..;...;
24020c54:	3ba951da 3ba9a3d7 3ba9f5fc 3baa4848     .Q.;...;...;HH.;
24020c64:	3baa9abd 3baaed59 3bab401e 3bab930a     ...;Y..;.@.;...;
24020c74:	3babe61f 3bac395c 3bac8cc1 3bace04e     ...;\9.;...;N..;
24020c84:	3bad3404 3bad87e3 3baddbea 3bae301a     .4.;...;...;.0.;
24020c94:	3bae8473 3baed8f4 3baf2d9f 3baf8272     s..;...;.-.;r..;
24020ca4:	3bafd76e 3bb02c94 3bb081e3 3bb0d75b     n..;.,.;...;[..;
24020cb4:	3bb12cfd 3bb182c8 3bb1d8bc 3bb22eda     .,.;...;...;...;
24020cc4:	3bb28522 3bb2db94 3bb3322f 3bb388f5     "..;...;/2.;...;
24020cd4:	3bb3dfe4 3bb436fe 3bb48e42 3bb4e5b0     ...;.6.;B..;...;
24020ce4:	3bb53d48 3bb5950b 3bb5ecf8 3bb64510     H=.;...;...;.E.;
24020cf4:	3bb69d53 3bb6f5c0 3bb74e58 3bb7a71b     S..;...;XN.;...;
24020d04:	3bb80009 3bb85922 3bb8b266 3bb90bd5     ...;"Y.;f..;...;
24020d14:	3bb96570 3bb9bf36 3bba1928 3bba7345     pe.;6..;(..;Es.;
24020d24:	3bbacd8e 3bbb2802 3bbb82a3 3bbbdd6f     ...;.(.;...;o..;
24020d34:	3bbc3867 3bbc938b 3bbceedb 3bbd4a58     g8.;...;...;XJ.;
24020d44:	3bbda601 3bbe01d6 3bbe5dd8 3bbeba06     ...;...;.].;...;
24020d54:	3bbf1661 3bbf72e8 3bbfcf9d 3bc02c7e     a..;.r.;...;~,.;
24020d64:	3bc0898c 3bc0e6c8 3bc14430 3bc1a1c6     ...;...;0D.;...;
24020d74:	3bc1ff89 3bc25d7a 3bc2bb97 3bc319e3     ...;z].;...;...;
24020d84:	3bc3785c 3bc3d703 3bc435d8 3bc494db     \x.;...;.5.;...;
24020d94:	3bc4f40b 3bc5536a 3bc5b2f7 3bc612b2     ...;jS.;...;...;
24020da4:	3bc6729c 3bc6d2b4 3bc732fb 3bc79370     .r.;...;.2.;p..;
24020db4:	3bc7f414 3bc854e6 3bc8b5e8 3bc91719     ...;.T.;...;...;
24020dc4:	3bc97878 3bc9da07 3bca3bc5 3bca9db3     xx.;...;.;.;...;
24020dd4:	3bcaffcf 3bcb621c 3bcbc498 3bcc2743     ...;.b.;...;C'.;
24020de4:	3bcc8a1f 3bcced2a 3bcd5065 3bcdb3d0     ...;*..;eP.;...;
24020df4:	3bce176c 3bce7b37 3bcedf33 3bcf4360     l..;7{.;3..;`C.;
24020e04:	3bcfa7bd 3bd00c4a 3bd07108 3bd0d5f7     ...;J..;.q.;...;
24020e14:	3bd13b17 3bd1a068 3bd205ea 3bd26b9d     .;.;h..;...;.k.;
24020e24:	3bd2d181 3bd33797 3bd39dde 3bd40457     ...;.7.;...;W..;
24020e34:	3bd46b01 3bd4d1dd 3bd538ea 3bd5a02a     .k.;...;.8.;*..;
24020e44:	3bd6079c 3bd66f3f 3bd6d715 3bd73f1e     ...;?o.;...;.?.;
24020e54:	3bd7a758 3bd80fc5 3bd87865 3bd8e137     X..;...;ex.;7..;
24020e64:	3bd94a3c 3bd9b374 3bda1cdf 3bda867d     <J.;t..;...;}..;
24020e74:	3bdaf04e 3bdb5a52 3bdbc48a 3bdc2ef5     N..;RZ.;...;...;
24020e84:	3bdc9994 3bdd0466 3bdd6f6c 3bdddaa6     ...;f..;lo.;...;
24020e94:	3bde4614 3bdeb1b5 3bdf1d8b 3bdf8995     .F.;...;...;...;
24020ea4:	3bdff5d4 3be06247 3be0ceee 3be13bca     ...;Gb.;...;.;.;
24020eb4:	3be1a8db 3be21620 3be2839b 3be2f14a     ...; ..;...;J..;
24020ec4:	3be35f2f 3be3cd48 3be43b97 3be4aa1c     /_.;H..;.;.;...;
24020ed4:	3be518d6 3be587c6 3be5f6eb 3be66646     ...;...;...;Ff.;
24020ee4:	3be6d5d7 3be7459f 3be7b59c 3be825cf     ...;.E.;...;.%.;
24020ef4:	3be89639 3be906d9 3be977b0 3be9e8be     9..;...;.w.;...;
24020f04:	3bea5a02 3beacb7d 3beb3d2f 3bebaf18     .Z.;}..;/=.;...;
24020f14:	3bec2138 3bec9390 3bed061f 3bed78e5     8!.;...;...;.x.;
24020f24:	3bedebe3 3bee5f19 3beed286 3bef462b     ...;._.;...;+F.;
24020f34:	3befba09 3bf02e1e 3bf0a26c 3bf116f2     ...;...;l..;...;
24020f44:	3bf18bb0 3bf200a7 3bf275d7 3bf2eb3f     ...;...;.u.;?..;
24020f54:	3bf360e0 3bf3d6ba 3bf44cce 3bf4c31a     .`.;...;.L.;...;
24020f64:	3bf539a0 3bf5b05f 3bf62757 3bf69e8a     .9.;_..;W'.;...;
24020f74:	3bf715f6 3bf78d9b 3bf8057b 3bf87d95     ...;...;{..;.}.;
24020f84:	3bf8f5e9 3bf96e77 3bf9e740 3bfa6043     ...;wn.;@..;C`.;
24020f94:	3bfad980 3bfb52f9 3bfbccac 3bfc469a     ...;.R.;...;.F.;
24020fa4:	3bfcc0c3 3bfd3b28 3bfdb5c7 3bfe30a2     ...;(;.;...;.0.;
24020fb4:	3bfeabb9 3bff270b 3bffa299 3c000f31     ...;.'.;...;1..<
24020fc4:	3c004d34 3c008b55 3c00c994 3c0107f1     4M.<U..<...<...<
24020fd4:	3c01466c 3c018506 3c01c3bd 3c020294     lF.<...<...<...<
24020fe4:	3c024188 3c02809b 3c02bfcd 3c02ff1d     .A.<...<...<...<
24020ff4:	3c033e8c 3c037e1a 3c03bdc6 3c03fd92     .>.<.~.<...<...<
24021004:	3c043d7c 3c047d85 3c04bdad 3c04fdf4     |=.<.}.<...<...<
24021014:	3c053e5b 3c057ee0 3c05bf85 3c060049     [>.<.~.<...<I..<
24021024:	3c06412c 3c06822f 3c06c352 3c070494     ,A.</..<R..<...<
24021034:	3c0745f5 3c078776 3c07c917 3c080ad8     .E.<v..<...<...<
24021044:	3c084cb8 3c088eb9 3c08d0d9 3c091319     .L.<...<...<...<
24021054:	3c09557a 3c0997fb 3c09da9b 3c0a1d5c     zU.<...<...<\..<
24021064:	3c0a603e 3c0aa340 3c0ae662 3c0b29a5     >`.<@..<b..<.).<
24021074:	3c0b6d08 3c0bb08c 3c0bf431 3c0c37f6     .m.<...<1..<.7.<
24021084:	3c0c7bdc 3c0cbfe4 3c0d040c 3c0d4855     .{.<...<...<UH.<
24021094:	3c0d8cbf 3c0dd14a 3c0e15f7 3c0e5ac4     ...<J..<...<.Z.<
240210a4:	3c0e9fb4 3c0ee4c4 3c0f29f6 3c0f6f49     ...<...<.).<Io.<
240210b4:	3c0fb4be 3c0ffa55 3c10400d 3c1085e7     ...<U..<.@.<...<
240210c4:	3c10cbe3 3c111201 3c115841 3c119ea3     ...<...<AX.<...<
240210d4:	3c11e527 3c122bcd 3c127295 3c12b97f     '..<.+.<.r.<...<
240210e4:	3c13008c 3c1347bb 3c138f0d 3c13d682     ...<.G.<...<...<
240210f4:	3c141e18 3c1465d2 3c14adae 3c14f5ad     ...<.e.<...<...<
24021104:	3c153dcf 3c158614 3c15ce7c 3c161707     .=.<...<|..<...<
24021114:	3c165fb5 3c16a887 3c16f17b 3c173a93     ._.<...<{..<.:.<
24021124:	3c1783ce 3c17cd2d 3c1816af 3c186055     ...<-..<...<U`.<
24021134:	3c18aa1f 3c18f40c 3c193e1d 3c198852     ...<...<.>.<R..<
24021144:	3c19d2ab 3c1a1d28 3c1a67c9 3c1ab28e     ...<(..<.g.<...<
24021154:	3c1afd77 3c1b4885 3c1b93b7 3c1bdf0d     w..<.H.<...<...<
24021164:	3c1c2a88 3c1c7628 3c1cc1ec 3c1d0dd5     .*.<(v.<...<...<
24021174:	3c1d59e2 3c1da614 3c1df26c 3c1e3ee8     .Y.<...<l..<.>.<
24021184:	3c1e8b89 3c1ed850 3c1f253b 3c1f724c     ...<P..<;%.<Lr.<
24021194:	3c1fbf82 3c200cde 3c205a5f 3c20a805     ...<.. <_Z <.. <
240211a4:	3c20f5d1 3c2143c3 3c2191db 3c21e018     .. <.C!<..!<..!<
240211b4:	3c222e7b 3c227d05 3c22cbb4 3c231a89     {."<.}"<.."<..#<
240211c4:	3c236985 3c23b8a7 3c2407ef 3c24575d     .i#<..#<..$<]W$<
240211d4:	3c24a6f2 3c24f6ae 3c254690 3c259699     ..$<..$<.F%<..%<
240211e4:	3c25e6c9 3c26371f 3c26879c 3c26d841     ..%<.7&<..&<A.&<
240211f4:	3c27290c 3c2779ff 3c27cb18 3c281c59     .)'<.y'<..'<Y.(<
24021204:	3c286dc2 3c28bf52 3c291109 3c2962e8     .m(<R.(<..)<.b)<
24021214:	3c29b4ee 3c2a071d 3c2a5973 3c2aabf1     ..)<..*<sY*<..*<
24021224:	3c2afe96 3c2b5164 3c2ba45a 3c2bf779     ..*<dQ+<Z.+<y.+<
24021234:	3c2c4abf 3c2c9e2e 3c2cf1c5 3c2d4585     .J,<..,<..,<.E-<
24021244:	3c2d996d 3c2ded7e 3c2e41b7 3c2e961a     m.-<~.-<.A.<...<
24021254:	3c2eeaa5 3c2f3f59 3c2f9436 3c2fe93d     ...<Y?/<6./<=./<
24021264:	3c303e6c 3c3093c5 3c30e947 3c313ef3     l>0<..0<G.0<.>1<
24021274:	3c3194c8 3c31eac6 3c3240ef 3c329740     ..1<..1<.@2<@.2<
24021284:	3c32edbc 3c334462 3c339b32 3c33f22b     ..2<bD3<2.3<+.3<
24021294:	3c34494f 3c34a09d 3c34f815 3c354fb8     OI4<..4<..4<.O5<
240212a4:	3c35a785 3c35ff7d 3c36579f 3c36afec     ..5<}.5<.W6<..6<
240212b4:	3c370863 3c376106 3c37b9d3 3c3812cc     c.7<.a7<..7<..8<
240212c4:	3c386bef 3c38c53e 3c391eb8 3c39785d     .k8<>.8<..9<]x9<
240212d4:	3c39d22e 3c3a2c2a 3c3a8652 3c3ae0a6     ..9<*,:<R.:<..:<
240212e4:	3c3b3b25 3c3b95d0 3c3bf0a7 3c3c4baa     %;;<..;<..;<.K<<
240212f4:	3c3ca6d9 3c3d0234 3c3d5dbc 3c3db970     ..<<4.=<.]=<p.=<
24021304:	3c3e1550 3c3e715c 3c3ecd96 3c3f29fc     P.><\q><..><.)?<
24021314:	3c3f868e 3c3fe34e 3c40403b 3c409d54     ..?<N.?<;@@<T.@<
24021324:	3c40fa9b 3c41580e 3c41b5af 3c42137e     ..@<.XA<..A<~.B<
24021334:	3c42717a 3c42cfa3 3c432dfa 3c438c7f     zqB<..B<.-C<..C<
24021344:	3c43eb31 3c444a11 3c44a91f 3c45085c     1.C<.JD<..D<\.E<
24021354:	3c4567c6 3c45c75f 3c462726 3c46871b     .gE<_.E<&'F<..F<
24021364:	3c46e73f 3c474791 3c47a812 3c4808c2     ?.F<.GG<..G<..H<
24021374:	3c4869a1 3c48caae 3c492beb 3c498d56     .iH<..H<.+I<V.I<
24021384:	3c49eef1 3c4a50bb 3c4ab2b4 3c4b14dd     ..I<.PJ<..J<..K<
24021394:	3c4b7736 3c4bd9be 3c4c3c76 3c4c9f5d     6wK<..K<v<L<].L<
240213a4:	3c4d0275 3c4d65bc 3c4dc934 3c4e2cdc     u.M<.eM<4.M<.,N<
240213b4:	3c4e90b4 3c4ef4bc 3c4f58f5 3c4fbd5f     ..N<..N<.XO<_.O<
240213c4:	3c5021f9 3c5086c3 3c50ebbf 3c5150ec     .!P<..P<..P<.PQ<
240213d4:	3c51b649 3c521bd8 3c528197 3c52e789     I.Q<..R<..R<..R<
240213e4:	3c534dab 3c53b3ff 3c541a85 3c54813c     .MS<..S<..T<<.T<
240213f4:	3c54e825 3c554f3f 3c55b68c 3c561e0b     %.T<?OU<..U<..V<
24021404:	3c5685bc 3c56ed9f 3c5755b4 3c57bdfc     ..V<..V<.UW<..W<
24021414:	3c582677 3c588f23 3c58f803 3c596116     w&X<#.X<..X<.aY<
24021424:	3c59ca5b 3c5a33d3 3c5a9d7f 3c5b075d     [.Y<.3Z<..Z<].[<
24021434:	3c5b716f 3c5bdbb5 3c5c462d 3c5cb0da     oq[<..[<-F\<..\<
24021444:	3c5d1bba 3c5d86ce 3c5df215 3c5e5d91     ..]<..]<..]<.]^<
24021454:	3c5ec941 3c5f3524 3c5fa13c 3c600d89     A.^<$5_<<._<..`<
24021464:	3c607a0a 3c60e6bf 3c6153a9 3c61c0c8     .z`<..`<.Sa<..a<
24021474:	3c622e1c 3c629ba5 3c630963 3c637756     ..b<..b<c.c<Vwc<
24021484:	3c63e57e 3c6453db 3c64c26e 3c653137     ~.c<.Sd<n.d<71e<
24021494:	3c65a035 3c660f69 3c667ed3 3c66ee73     5.e<i.f<.~f<s.f<
240214a4:	3c675e49 3c67ce55 3c683e97 3c68af10     I^g<U.g<.>h<..h<
240214b4:	3c691fbf 3c6990a5 3c6a01c2 3c6a7315     ..i<..i<..j<.sj<
240214c4:	3c6ae49f 3c6b5660 3c6bc859 3c6c3a88     ..j<`Vk<Y.k<.:l<
240214d4:	3c6cacef 3c6d1f8d 3c6d9263 3c6e0570     ..l<..m<c.m<p.n<
240214e4:	3c6e78b5 3c6eec32 3c6f5fe7 3c6fd3d4     .xn<2.n<._o<..o<
240214f4:	3c7047f9 3c70bc57 3c7130ed 3c71a5bb     .Gp<W.p<.0q<..q<
24021504:	3c721ac2 3c729001 3c730579 3c737b2b     ..r<..r<y.s<+{s<
24021514:	3c73f115 3c746738 3c74dd95 3c75542b     ..s<8gt<..t<+Tu<
24021524:	3c75cafa 3c764203 3c76b946 3c7730c2     ..u<.Bv<F.v<.0w<
24021534:	3c77a878 3c782068 3c789893 3c7910f7     x.w<h x<..x<..y<
24021544:	3c798996 3c7a026f 3c7a7b83 3c7af4d2     ..y<o.z<.{z<..z<
24021554:	3c7b6e5b 3c7be81f 3c7c621e 3c7cdc59     [n{<..{<.b|<Y.|<
24021564:	3c7d56ce 3c7dd17f 3c7e4c6b 3c7ec793     .V}<..}<kL~<..~<
24021574:	3c7f42f6 3c7fbe95 3c801d38 3c805b44     .B.<...<8..<D[.<
24021584:	3c80996d 3c80d7b5 3c81161b 3c81549f     m..<...<...<.T.<
24021594:	3c819342 3c81d202 3c8210e1 3c824fdf     B..<...<...<.O.<
240215a4:	3c828efb 3c82ce36 3c830d8f 3c834d07     ...<6..<...<.M.<
240215b4:	3c838c9e 3c83cc54 3c840c28 3c844c1b     ...<T..<(..<.L.<
240215c4:	3c848c2e 3c84cc5f 3c850cb0 3c854d1f     ...<_..<...<.M.<
240215d4:	3c858dae 3c85ce5c 3c860f2a 3c865017     ...<\..<*..<.P.<
240215e4:	3c869123 3c86d24f 3c87139a 3c875505     #..<O..<...<.U.<
240215f4:	3c879690 3c87d83b 3c881a05 3c885bef     ...<;..<...<.[.<
24021604:	3c889df9 3c88e023 3c89226d 3c8964d8     ...<#..<m".<.d.<
24021614:	3c89a762 3c89ea0d 3c8a2cd8 3c8a6fc3     b..<...<.,.<.o.<
24021624:	3c8ab2cf 3c8af5fb 3c8b3948 3c8b7cb6     ...<...<H9.<.|.<
24021634:	3c8bc044 3c8c03f3 3c8c47c2 3c8c8bb3     D..<...<.G.<...<
24021644:	3c8ccfc4 3c8d13f6 3c8d584a 3c8d9cbe     ...<...<JX.<...<
24021654:	3c8de154 3c8e260b 3c8e6ae3 3c8eafdd     T..<.&.<.j.<...<
24021664:	3c8ef4f8 3c8f3a34 3c8f7f92 3c8fc512     ...<4:.<...<...<
24021674:	3c900ab3 3c905076 3c90965b 3c90dc61     ...<vP.<[..<a..<
24021684:	3c91228a 3c9168d5 3c91af41 3c91f5d0     .".<.h.<A..<...<
24021694:	3c923c81 3c928354 3c92ca4a 3c931162     .<.<T..<J..<b..<
240216a4:	3c93589c 3c939ff9 3c93e779 3c942f1b     .X.<...<y..<./.<
240216b4:	3c9476df 3c94bec7 3c9506d2 3c954eff     .v.<...<...<.N.<
240216c4:	3c95974f 3c95dfc2 3c962859 3c967113     O..<...<Y(.<.q.<
240216d4:	3c96b9ef 3c9702f0 3c974c13 3c97955a     ...<...<.L.<Z..<
240216e4:	3c97dec5 3c982853 3c987204 3c98bbda     ...<S(.<.r.<...<
240216f4:	3c9905d3 3c994ff0 3c999a31 3c99e496     ...<.O.<1..<...<
24021704:	3c9a2f1f 3c9a79cc 3c9ac49d 3c9b0f93     ./.<.y.<...<...<
24021714:	3c9b5aad 3c9ba5eb 3c9bf14e 3c9c3cd5     .Z.<...<N..<.<.<
24021724:	3c9c8881 3c9cd451 3c9d2046 3c9d6c60     ...<Q..<F .<`l.<
24021734:	3c9db89f 3c9e0503 3c9e518c 3c9e9e3a     ...<...<.Q.<:..<
24021744:	3c9eeb0d 3c9f3805 3c9f8523 3c9fd266     ...<.8.<#..<f..<
24021754:	3ca01fcf 3ca06d5d 3ca0bb10 3ca108e9     ...<]m.<...<...<
24021764:	3ca156e8 3ca1a50d 3ca1f358 3ca241c8     .V.<...<X..<.A.<
24021774:	3ca2905f 3ca2df1b 3ca32dfe 3ca37d07     _..<...<.-.<.}.<
24021784:	3ca3cc36 3ca41b8c 3ca46b08 3ca4baab     6..<...<.k.<...<
24021794:	3ca50a74 3ca55a64 3ca5aa7b 3ca5fab8     t..<dZ.<{..<...<
240217a4:	3ca64b1c 3ca69ba8 3ca6ec5a 3ca73d34     .K.<...<Z..<4=.<
240217b4:	3ca78e34 3ca7df5c 3ca830ab 3ca88222     4..<\..<.0.<"..<
240217c4:	3ca8d3c0 3ca92586 3ca97773 3ca9c988     ...<.%.<sw.<...<
240217d4:	3caa1bc5 3caa6e29 3caac0b6 3cab136a     ...<)n.<...<j..<
240217e4:	3cab6647 3cabb94c 3cac0c79 3cac5fce     Gf.<L..<y..<._.<
240217f4:	3cacb34c 3cad06f2 3cad5ac1 3cadaeb8     L..<...<.Z.<...<
24021804:	3cae02d8 3cae5721 3caeab93 3caf002d     ...<!W.<...<-..<
24021814:	3caf54f1 3cafa9de 3caffef3 3cb05433     .T.<...<...<3T.<
24021824:	3cb0a99b 3cb0ff2d 3cb154e8 3cb1aacd     ...<-..<.T.<...<
24021834:	3cb200db 3cb25713 3cb2ad75 3cb30401     ...<.W.<u..<...<
24021844:	3cb35ab7 3cb3b197 3cb408a1 3cb45fd5     .Z.<...<...<._.<
24021854:	3cb4b733 3cb50ebc 3cb5666f 3cb5be4c     3..<...<of.<L..<
24021864:	3cb61655 3cb66e87 3cb6c6e5 3cb71f6e     U..<.n.<...<n..<
24021874:	3cb77821 3cb7d0ff 3cb82a09 3cb8833d     !x.<...<.*.<=..<
24021884:	3cb8dc9d 3cb93628 3cb98fdf 3cb9e9c1     ...<(6.<...<...<
24021894:	3cba43ce 3cba9e08 3cbaf86d 3cbb52fe     .C.<...<m..<.R.<
240218a4:	3cbbadba 3cbc08a3 3cbc63b8 3cbcbef9     ...<...<.c.<...<
240218b4:	3cbd1a66 3cbd75ff 3cbdd1c5 3cbe2db7     f..<.u.<...<.-.<
240218c4:	3cbe89d6 3cbee622 3cbf429a 3cbf9f3f     ...<"..<.B.<?..<
240218d4:	3cbffc11 3cc05910 3cc0b63c 3cc11396     ...<.Y.<<..<...<
240218e4:	3cc1711c 3cc1ced0 3cc22cb1 3cc28ac0     .q.<...<.,.<...<
240218f4:	3cc2e8fd 3cc34767 3cc3a5ff 3cc404c4     ...<gG.<...<...<
24021904:	3cc463b8 3cc4c2da 3cc52229 3cc581a7     .c.<...<)".<...<
24021914:	3cc5e154 3cc6412e 3cc6a137 3cc7016f     T..<.A.<7..<o..<
24021924:	3cc761d6 3cc7c26b 3cc8232f 3cc88421     .a.<k..</#.<!..<
24021934:	3cc8e543 3cc94694 3cc9a814 3cca09c3     C..<.F.<...<...<
24021944:	3cca6ba2 3ccacdb0 3ccb2fee 3ccb925b     .k.<...<./.<[..<
24021954:	3ccbf4f8 3ccc57c5 3cccbac2 3ccd1def     ...<.W.<...<...<
24021964:	3ccd814c 3ccde4d9 3cce4896 3cceac83     L..<...<.H.<...<
24021974:	3ccf10a1 3ccf74f0 3ccfd96f 3cd03e1f     ...<.t.<o..<.>.<
24021984:	3cd0a300 3cd10812 3cd16d54 3cd1d2c8     ...<...<Tm.<...<
24021994:	3cd2386d 3cd29e43 3cd3044b 3cd36a84     m8.<C..<K..<.j.<
240219a4:	3cd3d0ef 3cd4378b 3cd49e59 3cd50559     ...<.7.<Y..<Y..<
240219b4:	3cd56c8b 3cd5d3ef 3cd63b85 3cd6a34d     .l.<...<.;.<M..<
240219c4:	3cd70b48 3cd77375 3cd7dbd4 3cd84467     H..<us.<...<gD.<
240219d4:	3cd8ad2b 3cd91623 3cd97f4e 3cd9e8ab     +..<#..<N..<...<
240219e4:	3cda523c 3cdabc00 3cdb25f7 3cdb9021     <R.<...<.%.<!..<
240219f4:	3cdbfa7f 3cdc6511 3cdccfd6 3cdd3acf     ...<.e.<...<.:.<
24021a04:	3cdda5fc 3cde115d 3cde7cf2 3cdee8bb     ...<]..<.|.<...<
24021a14:	3cdf54b8 3cdfc0ea 3ce02d50 3ce099eb     .T.<...<P-.<...<
24021a24:	3ce106ba 3ce173be 3ce1e0f7 3ce24e65     ...<.s.<...<eN.<
24021a34:	3ce2bc08 3ce329e1 3ce397ee 3ce40631     ...<.).<...<1..<
24021a44:	3ce474a9 3ce4e357 3ce5523b 3ce5c154     .t.<W..<;R.<T..<
24021a54:	3ce630a4 3ce6a029 3ce70fe4 3ce77fd6     .0.<)..<...<...<
24021a64:	3ce7effe 3ce8605c 3ce8d0f1 3ce941bc     ...<\`.<...<.A.<
24021a74:	3ce9b2be 3cea23f7 3cea9567 3ceb070d     ...<.#.<g..<...<
24021a84:	3ceb78eb 3cebeb00 3cec5d4d 3ceccfd1     .x.<...<M].<...<
24021a94:	3ced428c 3cedb57f 3cee28aa 3cee9c0d     .B.<...<.(.<...<
24021aa4:	3cef0fa8 3cef837a 3ceff785 3cf06bc8     ...<z..<...<.k.<
24021ab4:	3cf0e044 3cf154f8 3cf1c9e5 3cf23f0a     D..<.T.<...<.?.<
24021ac4:	3cf2b469 3cf32a00 3cf39fd0 3cf415d9     i..<.*.<...<...<
24021ad4:	3cf48c1c 3cf50298 3cf5794d 3cf5f03c     ...<...<My.<<..<
24021ae4:	3cf66765 3cf6dec8 3cf75664 3cf7ce3b     eg.<...<dV.<;..<
24021af4:	3cf8464b 3cf8be96 3cf9371b 3cf9afdb     KF.<...<.7.<...<
24021b04:	3cfa28d5 3cfaa20a 3cfb1b7a 3cfb9525     .(.<...<z..<%..<
24021b14:	3cfc0f0a 3cfc892b 3cfd0387 3cfd7e1f     ...<+..<...<.~.<
24021b24:	3cfdf8f2 3cfe7400 3cfeef4a 3cff6ad0     ...<.t.<J..<.j.<
24021b34:	3cffe692 3d003148 3d006f65 3d00ada0     ...<H1.=eo.=...=
24021b44:	3d00ebfa 3d012a71 3d016907 3d01a7bc     ...=q*.=.i.=...=
24021b54:	3d01e68e 3d022580 3d02648f 3d02a3be     ...=.%.=.d.=...=
24021b64:	3d02e30b 3d032276 3d036201 3d03a1aa     ...=v".=.b.=...=
24021b74:	3d03e173 3d04215a 3d046160 3d04a185     s..=Z!.=`a.=...=
24021b84:	3d04e1ca 3d05222d 3d0562b0 3d05a352     ...=-".=.b.=R..=
24021b94:	3d05e413 3d0624f4 3d0665f5 3d06a715     ...=.$.=.e.=...=
24021ba4:	3d06e854 3d0729b3 3d076b32 3d07acd1     T..=.).=2k.=...=
24021bb4:	3d07ee8f 3d08306e 3d08726c 3d08b48b     ...=n0.=lr.=...=
24021bc4:	3d08f6c9 3d093928 3d097ba7 3d09be46     ...=(9.=.{.=F..=
24021bd4:	3d0a0105 3d0a43e5 3d0a86e6 3d0aca06     ...=.C.=...=...=
24021be4:	3d0b0d48 3d0b50aa 3d0b942d 3d0bd7d0     H..=.P.=-..=...=
24021bf4:	3d0c1b95 3d0c5f7a 3d0ca380 3d0ce7a7     ...=z_.=...=...=
24021c04:	3d0d2bf0 3d0d7059 3d0db4e4 3d0df990     .+.=Yp.=...=...=
24021c14:	3d0e3e5d 3d0e834b 3d0ec85c 3d0f0d8d     ]>.=K..=\..=...=
24021c24:	3d0f52e0 3d0f9855 3d0fddec 3d1023a4     .R.=U..=...=.#.=
24021c34:	3d10697e 3d10af7a 3d10f599 3d113bd9     ~i.=z..=...=.;.=
24021c44:	3d11823b 3d11c8bf 3d120f66 3d12562f     ;..=...=f..=/V.=
24021c54:	3d129d1a 3d12e428 3d132b58 3d1372ab     ...=(..=X+.=.r.=
24021c64:	3d13ba20 3d1401b8 3d144973 3d149151      ..=...=sI.=Q..=
24021c74:	3d14d951 3d152175 3d1569bb 3d15b225     Q..=u!.=.i.=%..=
24021c84:	3d15fab2 3d164362 3d168c35 3d16d52c     ...=bC.=5..=,..=
24021c94:	3d171e46 3d176783 3d17b0e4 3d17fa69     F..=.g.=...=i..=
24021ca4:	3d184412 3d188dde 3d18d7ce 3d1921e2     .D.=...=...=.!.=
24021cb4:	3d196c1a 3d19b676 3d1a00f6 3d1a4b9a     .l.=v..=...=.K.=
24021cc4:	3d1a9662 3d1ae14f 3d1b2c60 3d1b7796     b..=O..=`,.=.w.=
24021cd4:	3d1bc2f0 3d1c0e6f 3d1c5a12 3d1ca5db     ...=o..=.Z.=...=
24021ce4:	3d1cf1c8 3d1d3dd9 3d1d8a10 3d1dd66c     ...=.=.=...=l..=
24021cf4:	3d1e22ed 3d1e6f93 3d1ebc5e 3d1f094f     .".=.o.=^..=O..=
24021d04:	3d1f5665 3d1fa3a0 3d1ff101 3d203e87     eV.=...=...=.> =
24021d14:	3d208c33 3d20da05 3d2127fd 3d21761a     3. =.. =.'!=.v!=
24021d24:	3d21c45e 3d2212c7 3d226157 3d22b00c     ^.!=.."=Wa"=.."=
24021d34:	3d22fee8 3d234dea 3d239d13 3d23ec62     .."=.M#=..#=b.#=
24021d44:	3d243bd8 3d248b74 3d24db37 3d252b20     .;$=t.$=7.$= +%=
24021d54:	3d257b31 3d25cb68 3d261bc6 3d266c4c     1{%=h.%=..&=Ll&=
24021d64:	3d26bcf8 3d270dcc 3d275ec7 3d27afe9     ..&=..'=.^'=..'=
24021d74:	3d280133 3d2852a4 3d28a43d 3d28f5fd     3.(=.R(==.(=..(=
24021d84:	3d2947e5 3d2999f5 3d29ec2d 3d2a3e8d     .G)=..)=-.)=.>*=
24021d94:	3d2a9114 3d2ae3c4 3d2b369c 3d2b899c     ..*=..*=.6+=..+=
24021da4:	3d2bdcc5 3d2c3016 3d2c8390 3d2cd732     ..+=.0,=..,=2.,=
24021db4:	3d2d2afc 3d2d7ef0 3d2dd30c 3d2e2751     .*-=.~-=..-=Q'.=
24021dc4:	3d2e7bbf 3d2ed056 3d2f2517 3d2f7a00     .{.=V..=.%/=.z/=
24021dd4:	3d2fcf13 3d30244f 3d3079b4 3d30cf43     ../=O$0=.y0=C.0=
24021de4:	3d3124fb 3d317ade 3d31d0e9 3d32271f     .$1=.z1=..1=.'2=
24021df4:	3d327d7f 3d32d408 3d332abc 3d33819a     .}2=..2=.*3=..3=
24021e04:	3d33d8a2 3d342fd4 3d348731 3d34deb8     ..3=./4=1.4=..4=
24021e14:	3d35366a 3d358e46 3d35e64d 3d363e7f     j65=F.5=M.5=.>6=
24021e24:	3d3696dc 3d36ef64 3d374817 3d37a0f4     ..6=d.6=.H7=..7=
24021e34:	3d37f9fe 3d385332 3d38ac92 3d39061d     ..7=2S8=..8=..9=
24021e44:	3d395fd4 3d39b9b6 3d3a13c4 3d3a6dfe     ._9=..9=..:=.m:=
24021e54:	3d3ac863 3d3b22f5 3d3b7db3 3d3bd89d     c.:=.";=.};=..;=
24021e64:	3d3c33b3 3d3c8ef5 3d3cea64 3d3d45ff     .3<=..<=d.<=.E==
24021e74:	3d3da1c6 3d3dfdbb 3d3e59dc 3d3eb62a     ..==..==.Y>=*.>=
24021e84:	3d3f12a4 3d3f6f4c 3d3fcc21 3d402923     ..?=Lo?=!.?=#)@=
24021e94:	3d408652 3d40e3ae 3d414138 3d419ef0     R.@=..@=8AA=..A=
24021ea4:	3d41fcd5 3d425ae7 3d42b928 3d431796     ..A=.ZB=(.B=..C=
24021eb4:	3d437632 3d43d4fc 3d4433f5 3d44931b     2vC=..C=.3D=..D=
24021ec4:	3d44f270 3d4551f3 3d45b1a5 3d461185     p.D=.QE=..E=..F=
24021ed4:	3d467194 3d46d1d1 3d47323d 3d4792d9     .qF=..F==2G=..G=
24021ee4:	3d47f3a3 3d48549c 3d48b5c5 3d49171d     ..G=.TH=..H=..I=
24021ef4:	3d4978a4 3d49da5b 3d4a3c41 3d4a9e56     .xI=[.I=A<J=V.J=
24021f04:	3d4b009c 3d4b6311 3d4bc5b7 3d4c288c     ..K=.cK=..K=.(L=
24021f14:	3d4c8b91 3d4ceec7 3d4d522d 3d4db5c3     ..L=..L=-RM=..M=
24021f24:	3d4e1989 3d4e7d81 3d4ee1a9 3d4f4601     ..N=.}N=..N=.FO=
24021f34:	3d4faa8b 3d500f45 3d507430 3d50d94d     ..O=E.P=0tP=M.P=
24021f44:	3d513e9b 3d51a41a 3d5209ca 3d526fac     .>Q=..Q=..R=.oR=
24021f54:	3d52d5c0 3d533c05 3d53a27c 3d540925     ..R=.<S=|.S=%.T=
24021f64:	3d547000 3d54d70d 3d553e4c 3d55a5bd     .pT=..T=L>U=..U=
24021f74:	3d560d61 3d567537 3d56dd40 3d57457b     a.V=7uV=@.V={EW=
24021f84:	3d57adea 3d58168b 3d587f5f 3d58e866     ..W=..X=_.X=f.X=
24021f94:	3d5951a0 3d59bb0d 3d5a24ae 3d5a8e82     .QY=..Y=.$Z=..Z=
24021fa4:	3d5af88a 3d5b62c5 3d5bcd34 3d5c37d7     ..Z=.b[=4.[=.7\=
24021fb4:	3d5ca2ae 3d5d0db9 3d5d78f8 3d5de46b     ..\=..]=.x]=k.]=
24021fc4:	3d5e5012 3d5ebbee 3d5f27ff 3d5f9444     .P^=..^=.'_=D._=
24021fd4:	3d6000be 3d606d6d 3d60da50 3d614769     ..`=mm`=P.`=iGa=
24021fe4:	3d61b4b7 3d62223a 3d628ff3 3d62fde1     ..a=:"b=..b=..b=
24021ff4:	3d636c04 3d63da5d 3d6448ec 3d64b7b1     .lc=].c=.Hd=..d=
24022004:	3d6526ac 3d6595dc 3d660543 3d6674e1     .&e=..e=C.f=.tf=
24022014:	3d66e4b4 3d6754bf 3d67c4ff 3d683577     ..f=.Tg=..g=w5h=
24022024:	3d68a625 3d69170a 3d698827 3d69f97a     %.h=..i='.i=z.i=
24022034:	3d6a6b04 3d6adcc6 3d6b4ec0 3d6bc0f1     .kj=..j=.Nk=..k=
24022044:	3d6c3359 3d6ca5f9 3d6d18d2 3d6d8be2     Y3l=..l=..m=..m=
24022054:	3d6dff2a 3d6e72ab 3d6ee663 3d6f5a55     *.m=.rn=c.n=UZo=
24022064:	3d6fce7e 3d7042e1 3d70b77c 3d712c50     ~.o=.Bp=|.p=P,q=
24022074:	3d71a15d 3d7216a3 3d728c22 3d7301da     ].q=..r=".r=..s=
24022084:	3d7377cc 3d73edf7 3d74645c 3d74dafb     .ws=..s=\dt=..t=
24022094:	3d7551d4 3d75c8e6 3d764033 3d76b7ba     .Qu=..u=3@v=..v=
240220a4:	3d772f7b 3d77a776 3d781fac 3d78981d     {/w=v.w=..x=..x=
240220b4:	3d7910c8 3d7989af 3d7a02d0 3d7a7c2c     ..y=..y=..z=,|z=
240220c4:	3d7af5c4 3d7b6f97 3d7be9a5 3d7c63ef     ..z=.o{=..{=.c|=
240220d4:	3d7cde74 3d7d5936 3d7dd433 3d7e4f6c     t.|=6Y}=3.}=lO~=
240220e4:	3d7ecae1 3d7f4693 3d7fc281 3d801f56     ..~=.F.=...=V..=
240220f4:	3d805d89 3d809bdb 3d80da4b 3d8118da     .].=...=K..=...=
24022104:	3d815787 3d819653 3d81d53e 3d821447     .W.=S..=>..=G..=
24022114:	3d82536f 3d8292b6 3d82d21b 3d8311a0     oS.=...=...=...=
24022124:	3d835144 3d839106 3d83d0e8 3d8410e9     DQ.=...=...=...=
24022134:	3d84510a 3d849149 3d84d1a8 3d851227     .Q.=I..=...='..=
24022144:	3d8552c5 3d859382 3d85d45f 3d86155c     .R.=...=_..=\..=
24022154:	3d865678 3d8697b5 3d86d911 3d871a8d     xV.=...=...=...=
24022164:	3d875c29 3d879de5 3d87dfc1 3d8821be     )\.=...=...=.!.=
24022174:	3d8863da 3d88a617 3d88e874 3d892af2     .c.=...=t..=.*.=
24022184:	3d896d90 3d89b04f 3d89f32e 3d8a362e     .m.=O..=...=.6.=
24022194:	3d8a794f 3d8abc91 3d8afff3 3d8b4376     Oy.=...=...=vC.=
240221a4:	3d8b871b 3d8bcae0 3d8c0ec7 3d8c52ce     ...=...=...=.R.=
240221b4:	3d8c96f7 3d8cdb42 3d8d1fad 3d8d643a     ...=B..=...=:d.=
240221c4:	3d8da8e9 3d8dedb9 3d8e32ab 3d8e77bf     ...=...=.2.=.w.=
240221d4:	3d8ebcf4 3d8f024b 3d8f47c4 3d8f8d5f     ...=K..=.G.=_..=
240221e4:	3d8fd31c 3d9018fb 3d905efc 3d90a520     ...=...=.^.= ..=
240221f4:	3d90eb66 3d9131ce 3d917859 3d91bf06     f..=.1.=Yx.=...=
24022204:	3d9205d6 3d924cc8 3d9293dd 3d92db15     ...=.L.=...=...=
24022214:	3d93226f 3d9369ed 3d93b18e 3d93f951     o".=.i.=...=Q..=
24022224:	3d944138 3d948942 3d94d16f 3d9519bf     8A.=B..=o..=...=
24022234:	3d956233 3d95aacb 3d95f385 3d963c64     3b.=...=...=d<.=
24022244:	3d968566 3d96ce8c 3d9717d5 3d976143     f..=...=...=Ca.=
24022254:	3d97aad4 3d97f48a 3d983e63 3d988861     ...=...=c>.=a..=
24022264:	3d98d283 3d991cc9 3d996734 3d99b1c3     ...=...=4g.=...=
24022274:	3d99fc76 3d9a474e 3d9a924b 3d9add6c     v..=NG.=K..=l..=
24022284:	3d9b28b3 3d9b741e 3d9bbfae 3d9c0b63     .(.=.t.=...=c..=
24022294:	3d9c573d 3d9ca33c 3d9cef61 3d9d3bab     =W.=<..=a..=.;.=
240222a4:	3d9d881a 3d9dd4af 3d9e2169 3d9e6e49     ...=...=i!.=In.=
240222b4:	3d9ebb4e 3d9f0879 3d9f55ca 3d9fa341     N..=y..=.U.=A..=
240222c4:	3d9ff0de 3da03ea1 3da08c8a 3da0da99     ...=.>.=...=...=
240222d4:	3da128cf 3da1772b 3da1c5ad 3da21456     .(.=+w.=...=V..=
240222e4:	3da26325 3da2b21b 3da30137 3da3507b     %c.=...=7..={P.=
240222f4:	3da39fe5 3da3ef76 3da43f2f 3da48f0e     ...=v..=/?.=...=
24022304:	3da4df15 3da52f42 3da57f98 3da5d014     ...=B/.=...=...=
24022314:	3da620b8 3da67184 3da6c277 3da71392     . .=.q.=w..=...=
24022324:	3da764d5 3da7b63f 3da807d2 3da8598c     .d.=?..=...=.Y.=
24022334:	3da8ab6f 3da8fd7a 3da94fad 3da9a208     o..=z..=.O.=...=
24022344:	3da9f48c 3daa4739 3daa9a0e 3daaed0b     ...=9G.=...=...=
24022354:	3dab4032 3dab9381 3dabe6f9 3dac3a9a     2@.=...=...=.:.=
24022364:	3dac8e65 3dace258 3dad3674 3dad8aba     e..=X..=t6.=...=
24022374:	3daddf2a 3dae33c2 3dae8885 3daedd71     *..=.3.=...=q..=
24022384:	3daf3286 3daf87c6 3dafdd2f 3db032c2     .2.=...=/..=.2.=
24022394:	3db08880 3db0de67 3db13479 3db18ab5     ...=g..=y4.=...=
240223a4:	3db1e11b 3db237ac 3db28e68 3db2e54e     ...=.7.=h..=N..=
240223b4:	3db33c5e 3db3939a 3db3eb00 3db44292     ^<.=...=...=.B.=
240223c4:	3db49a4e 3db4f236 3db54a49 3db5a287     N..=6..=IJ.=...=
240223d4:	3db5faf0 3db65386 3db6ac46 3db70532     ...=.S.=F..=2..=
240223e4:	3db75e4a 3db7b78e 3db810fe 3db86a9a     J^.=...=...=.j.=
240223f4:	3db8c462 3db91e56 3db97876 3db9d2c3     b..=V..=vx.=...=
24022404:	3dba2d3c 3dba87e2 3dbae2b4 3dbb3db3     <-.=...=...=.=.=
24022414:	3dbb98df 3dbbf437 3dbc4fbd 3dbcab70     ...=7..=.O.=p..=
24022424:	3dbd074f 3dbd635c 3dbdbf97 3dbe1bff     O..=\c.=...=...=
24022434:	3dbe7894 3dbed557 3dbf3248 3dbf8f66     .x.=W..=H2.=f..=
24022444:	3dbfecb3 3dc04a2d 3dc0a7d5 3dc105ac     ...=-J.=...=...=
24022454:	3dc163b0 3dc1c1e4 3dc22045 3dc27ed5     .c.=...=E .=.~.=
24022464:	3dc2dd94 3dc33c81 3dc39b9d 3dc3fae8     ...=.<.=...=...=
24022474:	3dc45a62 3dc4ba0b 3dc519e4 3dc579eb     bZ.=...=...=.y.=
24022484:	3dc5da22 3dc63a89 3dc69b1e 3dc6fbe4     "..=.:.=...=...=
24022494:	3dc75cd9 3dc7bdfe 3dc81f54 3dc880d9     .\.=...=T..=...=
240224a4:	3dc8e28e 3dc94473 3dc9a689 3dca08cf     ...=sD.=...=...=
240224b4:	3dca6b46 3dcacded 3dcb30c5 3dcb93ce     Fk.=...=.0.=...=
240224c4:	3dcbf708 3dcc5a73 3dccbe0e 3dcd21db     ...=sZ.=...=.!.=
240224d4:	3dcd85da 3dcdea09 3dce4e6a 3dceb2fd     ...=...=jN.=...=
240224e4:	3dcf17c2 3dcf7cb8 3dcfe1e0 3dd0473a     ...=.|.=...=:G.=
240224f4:	3dd0acc6 3dd11285 3dd17875 3dd1de98     ...=...=ux.=...=
24022504:	3dd244ee 3dd2ab76 3dd31231 3dd3791f     .D.=v..=1..=.y.=
24022514:	3dd3e03f 3dd44793 3dd4af19 3dd516d3     ?..=.G.=...=...=
24022524:	3dd57ec0 3dd5e6e1 3dd64f35 3dd6b7bd     .~.=...=5O.=...=
24022534:	3dd72078 3dd78968 3dd7f28b 3dd85be2     x .=h..=...=.[.=
24022544:	3dd8c56d 3dd92f2d 3dd99921 3dda0349     m..=-/.=!..=I..=
24022554:	3dda6da7 3ddad838 3ddb42ff 3ddbadfa     .m.=8..=.B.=...=
24022564:	3ddc192a 3ddc8490 3ddcf02a 3ddd5bfa     *..=...=*..=.[.=
24022574:	3dddc800 3dde343b 3ddea0ab 3ddf0d52     ...=;4.=...=R..=
24022584:	3ddf7a2e 3ddfe740 3de05488 3de0c206     .z.=@..=.T.=...=
24022594:	3de12fbb 3de19da6 3de20bc8 3de27a20     ./.=...=...= z.=
240225a4:	3de2e8af 3de35775 3de3c671 3de435a5     ...=uW.=q..=.5.=
240225b4:	3de4a510 3de514b2 3de5848c 3de5f49d     ...=...=...=...=
240225c4:	3de664e6 3de6d566 3de7461f 3de7b70f     .d.=f..=.F.=...=
240225d4:	3de82838 3de89998 3de90b31 3de97d03     8(.=...=1..=.}.=
240225e4:	3de9ef0d 3dea614f 3dead3cb 3deb467f     ...=Oa.=...=.F.=
240225f4:	3debb96c 3dec2c92 3dec9ff2 3ded138b     l..=.,.=...=...=
24022604:	3ded875d 3dedfb69 3dee6faf 3deee42f     ]..=i..=.o.=/..=
24022614:	3def58e8 3defcddc 3df04309 3df0b871     .X.=...=.C.=q..=
24022624:	3df12e14 3df1a3f1 3df21a08 3df2905b     ...=...=...=[..=
24022634:	3df306e8 3df37db0 3df3f4b4 3df46bf3     ...=.}.=...=.k.=
24022644:	3df4e36d 3df55b22 3df5d313 3df64b40     m..="[.=...=@K.=
24022654:	3df6c3a9 3df73c4e 3df7b52f 3df82e4c     ...=N<.=/..=L..=
24022664:	3df8a7a5 3df9213b 3df99b0e 3dfa151d     ...=;!.=...=...=
24022674:	3dfa8f6a 3dfb09f3 3dfb84b9 3dfbffbd     j..=...=...=...=
24022684:	3dfc7afe 3dfcf67c 3dfd7238 3dfdee32     .z.=|..=8r.=2..=
24022694:	3dfe6a69 3dfee6df 3dff6393 3dffe085     ij.=...=.c.=...=
240226a4:	3e002eda 3e006d92 3e00ac69 3e00eb5f     ...>.m.>i..>_..>
240226b4:	3e012a74 3e0169a9 3e01a8fe 3e01e872     t*.>.i.>...>r..>
240226c4:	3e022806 3e0267ba 3e02a78e 3e02e782     .(.>.g.>...>...>
240226d4:	3e032795 3e0367c9 3e03a81c 3e03e890     .'.>.g.>...>...>
240226e4:	3e042924 3e0469d9 3e04aaad 3e04eba3     $).>.i.>...>...>
240226f4:	3e052cb8 3e056def 3e05af46 3e05f0bd     .,.>.m.>F..>...>
24022704:	3e063256 3e06740f 3e06b5e9 3e06f7e4     V2.>.t.>...>...>
24022714:	3e073a01 3e077c3e 3e07be9d 3e08011c     .:.>>|.>...>...>
24022724:	3e0843be 3e088680 3e08c964 3e090c6a     .C.>...>d..>j..>
24022734:	3e094f91 3e0992da 3e09d644 3e0a19d1     .O.>...>D..>...>
24022744:	3e0a5d7f 3e0aa14f 3e0ae542 3e0b2956     .].>O..>B..>V).>
24022754:	3e0b6d8d 3e0bb1e6 3e0bf661 3e0c3afe     .m.>...>a..>.:.>
24022764:	3e0c7fbe 3e0cc4a1 3e0d09a6 3e0d4ece     ...>...>...>.N.>
24022774:	3e0d9418 3e0dd986 3e0e1f16 3e0e64c9     ...>...>...>.d.>
24022784:	3e0eaaa0 3e0ef099 3e0f36b6 3e0f7cf6     ...>...>.6.>.|.>
24022794:	3e0fc359 3e1009e0 3e10508a 3e109758     Y..>...>.P.>X..>
240227a4:	3e10de49 3e11255e 3e116c97 3e11b3f4     I..>^%.>.l.>...>
240227b4:	3e11fb75 3e12431a 3e128ae3 3e12d2d0     u..>.C.>...>...>
240227c4:	3e131ae1 3e136316 3e13ab70 3e13f3ef     ...>.c.>p..>...>
240227d4:	3e143c92 3e14855a 3e14ce46 3e151757     .<.>Z..>F..>W..>
240227e4:	3e15608d 3e15a9e9 3e15f369 3e163d0e     .`.>...>i..>.=.>
240227f4:	3e1686d8 3e16d0c8 3e171add 3e176517     ...>...>...>.e.>
24022804:	3e17af77 3e17f9fc 3e1844a8 3e188f78     w..>...>.D.>x..>
24022814:	3e18da6f 3e19258c 3e1970ce 3e19bc37     o..>.%.>.p.>7..>
24022824:	3e1a07c6 3e1a537b 3e1a9f56 3e1aeb58     ...>{S.>V..>X..>
24022834:	3e1b3780 3e1b83cf 3e1bd045 3e1c1ce1     .7.>...>E..>...>
24022844:	3e1c69a4 3e1cb68e 3e1d039e 3e1d50d6     .i.>...>...>.P.>
24022854:	3e1d9e35 3e1debbc 3e1e3969 3e1e873e     5..>...>i9.>>..>
24022864:	3e1ed53b 3e1f235f 3e1f71aa 3e1fc01e     ;..>_#.>.q.>...>
24022874:	3e200eb9 3e205d7c 3e20ac67 3e20fb7a     .. >|] >g. >z. >
24022884:	3e214ab6 3e219a1a 3e21e9a6 3e22395a     .J!>..!>..!>Z9">
24022894:	3e228937 3e22d93c 3e23296b 3e2379c2     7."><.">k)#>.y#>
240228a4:	3e23ca42 3e241aea 3e246bbc 3e24bcb7     B.#>..$>.k$>..$>
240228b4:	3e250ddc 3e255f29 3e25b0a0 3e260241     ..%>)_%>..%>A.&>
240228c4:	3e26540b 3e26a5ff 3e26f81c 3e274a63     .T&>..&>..&>cJ'>
240228d4:	3e279cd5 3e27ef70 3e284236 3e289525     ..'>p.'>6B(>%.(>
240228e4:	3e28e83f 3e293b84 3e298ef3 3e29e28c     ?.(>.;)>..)>..)>
240228f4:	3e2a3651 3e2a8a40 3e2ade5a 3e2b329e     Q6*>@.*>Z.*>.2+>
24022904:	3e2b870e 3e2bdbaa 3e2c3070 3e2c8562     ..+>..+>p0,>b.,>
24022914:	3e2cda7f 3e2d2fc8 3e2d853c 3e2ddadc     ..,>./-><.->..->
24022924:	3e2e30a8 3e2e86a0 3e2edcc4 3e2f3314     .0.>...>...>.3/>
24022934:	3e2f8990 3e2fe038 3e30370d 3e308e0f     ../>8./>.70>..0>
24022944:	3e30e53d 3e313c98 3e31941f 3e31ebd4     =.0>.<1>..1>..1>
24022954:	3e3243b5 3e329bc4 3e32f400 3e334c69     .C2>..2>..2>iL3>
24022964:	3e33a4ff 3e33fdc3 3e3456b5 3e34afd5     ..3>..3>.V4>..4>
24022974:	3e350922 3e35629d 3e35bc46 3e36161d     ".5>.b5>F.5>..6>
24022984:	3e367023 3e36ca57 3e3724b9 3e377f4a     #p6>W.6>.$7>J.7>
24022994:	3e37da09 3e3834f7 3e389014 3e38eb60     ..7>.48>..8>`.8>
240229a4:	3e3946dc 3e39a286 3e39fe5f 3e3a5a68     .F9>..9>_.9>hZ:>
240229b4:	3e3ab6a1 3e3b1309 3e3b6fa0 3e3bcc68     ..:>..;>.o;>h.;>
240229c4:	3e3c295f 3e3c8687 3e3ce3de 3e3d4166     _)<>..<>..<>fA=>
240229d4:	3e3d9f1e 3e3dfd07 3e3e5b20 3e3eb96a     ..=>..=> [>>j.>>
240229e4:	3e3f17e5 3e3f7690 3e3fd56d 3e40347a     ..?>.v?>m.?>z4@>
240229f4:	3e4093b9 3e40f32a 3e4152cb 3e41b29f     ..@>*.@>.RA>..A>
24022a04:	3e4212a4 3e4272da 3e42d343 3e4333de     ..B>.rB>C.B>.3C>
24022a14:	3e4394ab 3e43f5aa 3e4456db 3e44b83f     ..C>..C>.VD>?.D>
24022a24:	3e4519d6 3e457b9f 3e45dd9b 3e463fcb     ..E>.{E>..E>.?F>
24022a34:	3e46a22d 3e4704c2 3e47678b 3e47ca87     -.F>..G>.gG>..G>
24022a44:	3e482db6 3e48911a 3e48f4b1 3e49587c     .-H>..H>..H>|XI>
24022a54:	3e49bc7b 3e4a20ae 3e4a8515 3e4ae9b1     {.I>. J>..J>..J>
24022a64:	3e4b4e81 3e4bb386 3e4c18bf 3e4c7e2e     .NK>..K>..L>.~L>
24022a74:	3e4ce3d1 3e4d49aa 3e4dafb7 3e4e15fa     ..L>.IM>..M>..N>
24022a84:	3e4e7c73 3e4ee321 3e4f4a05 3e4fb11f     s|N>!.N>.JO>..O>
24022a94:	3e50186f 3e507ff4 3e50e7b1 3e514fa3     o.P>..P>..P>.OQ>
24022aa4:	3e51b7cc 3e52202b 3e5288c2 3e52f18f     ..Q>+ R>..R>..R>
24022ab4:	3e535a93 3e53c3ce 3e542d41 3e5496eb     .ZS>..S>A-T>..T>
24022ac4:	3e5500cc 3e556ae5 3e55d536 3e563fbf     ..U>.jU>6.U>.?V>
24022ad4:	3e56aa80 3e571579 3e5780aa 3e57ec14     ..V>y.W>..W>..W>
24022ae4:	3e5857b6 3e58c391 3e592fa5 3e599bf2     .WX>..X>./Y>..Y>
24022af4:	3e5a0878 3e5a7537 3e5ae230 3e5b4f62     x.Z>7uZ>0.Z>bO[>
24022b04:	3e5bbcce 3e5c2a73 3e5c9853 3e5d066c     ..[>s*\>S.\>l.]>
24022b14:	3e5d74c0 3e5de34e 3e5e5217 3e5ec11a     .t]>N.]>.R^>..^>
24022b24:	3e5f3058 3e5f9fd1 3e600f85 3e607f74     X0_>.._>..`>t.`>
24022b34:	3e60ef9e 3e616004 3e61d0a6 3e624183     ..`>.`a>..a>.Ab>
24022b44:	3e62b29d 3e6323f2 3e639584 3e640751     ..b>.#c>..c>Q.d>
24022b54:	3e64795c 3e64eba3 3e655e27 3e65d0e7     \yd>..d>'^e>..e>
24022b64:	3e6643e5 3e66b720 3e672a98 3e679e4e     .Cf> .f>.*g>N.g>
24022b74:	3e681242 3e688673 3e68fae3 3e696f90     B.h>s.h>..h>.oi>
24022b84:	3e69e47c 3e6a59a6 3e6acf0f 3e6b44b6     |.i>.Yj>..j>.Dk>
24022b94:	3e6bba9d 3e6c30c2 3e6ca727 3e6d1dcb     ..k>.0l>'.l>..m>
24022ba4:	3e6d94ae 3e6e0bd2 3e6e8335 3e6efad7     ..m>..n>5.n>..n>
24022bb4:	3e6f72bb 3e6feade 3e706342 3e70dbe6     .ro>..o>Bcp>..p>
24022bc4:	3e7154cc 3e71cdf2 3e724759 3e72c101     .Tq>..q>YGr>..r>
24022bd4:	3e733aeb 3e73b517 3e742f84 3e74aa33     .:s>..s>./t>3.t>
24022be4:	3e752525 3e75a058 3e761bce 3e769786     %%u>X.u>..v>..v>
24022bf4:	3e771382 3e778fc0 3e780c41 3e788905     ..w>..w>A.x>..x>
24022c04:	3e79060d 3e798358 3e7a00e7 3e7a7eba     ..y>X.y>..z>.~z>
24022c14:	3e7afcd1 3e7b7b2d 3e7bf9cd 3e7c78b1     ..z>-{{>..{>.x|>
24022c24:	3e7cf7da 3e7d7748 3e7df6fb 3e7e76f4     ..|>Hw}>..}>.v~>
24022c34:	3e7ef732 3e7f77b6 3e7ff87f 3e803cc7     2.~>.w.>...>.<.>
24022c44:	3e807d72 3e80be40 3e80ff31 3e814046     r}.>@..>1..>F@.>
24022c54:	3e81817e 3e81c2da 3e820459 3e8245fc     ~..>...>Y..>.E.>
24022c64:	3e8287c3 3e82c9ae 3e830bbc 3e834def     ...>...>...>.M.>
24022c74:	3e839046 3e83d2c1 3e841561 3e845825     F..>...>a..>%X.>
24022c84:	3e849b0e 3e84de1b 3e85214d 3e8564a4     ...>...>M!.>.d.>
24022c94:	3e85a820 3e85ebc1 3e862f87 3e867372      ..>...>./.>rs.>
24022ca4:	3e86b783 3e86fbb9 3e874015 3e878496     ...>...>.@.>...>
24022cb4:	3e87c93d 3e880e09 3e8852fc 3e889815     =..>...>.R.>...>
24022cc4:	3e88dd54 3e8922b9 3e896844 3e89adf6     T..>.".>Dh.>...>
24022cd4:	3e89f3ce 3e8a39cd 3e8a7ff2 3e8ac63f     ...>.9.>...>?..>
24022ce4:	3e8b0cb2 3e8b534c 3e8b9a0e 3e8be0f7     ...>LS.>...>...>
24022cf4:	3e8c2807 3e8c6f3e 3e8cb69d 3e8cfe24     .(.>>o.>...>$..>
24022d04:	3e8d45d3 3e8d8da9 3e8dd5a7 3e8e1dce     .E.>...>...>...>
24022d14:	3e8e661d 3e8eae94 3e8ef733 3e8f3ffb     .f.>...>3..>.?.>
24022d24:	3e8f88eb 3e8fd205 3e901b47 3e9064b2     ...>...>G..>.d.>
24022d34:	3e90ae46 3e90f803 3e9141ea 3e918bfa     F..>...>.A.>...>
24022d44:	3e91d633 3e922096 3e926b23 3e92b5da     3..>. .>#k.>...>
24022d54:	3e9300bb 3e934bc5 3e9396fa 3e93e25a     ...>.K.>...>Z..>
24022d64:	3e942de3 3e947998 3e94c577 3e951180     .-.>.y.>w..>...>
24022d74:	3e955db5 3e95aa15 3e95f69f 3e964356     .].>...>...>VC.>
24022d84:	3e969037 3e96dd44 3e972a7c 3e9777e1     7..>D..>|*.>.w.>
24022d94:	3e97c571 3e98132d 3e986115 3e98af29     q..>-..>.a.>)..>
24022da4:	3e98fd6a 3e994bd8 3e999a71 3e99e938     j..>.K.>q..>8..>
24022db4:	3e9a382b 3e9a874c 3e9ad699 3e9b2614     +8.>L..>...>.&.>
24022dc4:	3e9b75bc 3e9bc592 3e9c1595 3e9c65c6     .u.>...>...>.e.>
24022dd4:	3e9cb625 3e9d06b1 3e9d576c 3e9da856     %..>...>lW.>V..>
24022de4:	3e9df96d 3e9e4ab3 3e9e9c28 3e9eedcc     m..>.J.>(..>...>
24022df4:	3e9f3f9e 3e9f91a0 3e9fe3d0 3ea03630     .?.>...>...>06.>
24022e04:	3ea088c0 3ea0db7f 3ea12e6e 3ea1818d     ...>...>n..>...>
24022e14:	3ea1d4db 3ea2285a 3ea27c0a 3ea2cfe9     ...>Z(.>.|.>...>
24022e24:	3ea323f9 3ea3783a 3ea3ccac 3ea4214f     .#.>:x.>...>O!.>
24022e34:	3ea47623 3ea4cb28 3ea5205f 3ea575c7     #v.>(..>_ .>.u.>
24022e44:	3ea5cb61 3ea6212d 3ea6772b 3ea6cd5b     a..>-!.>+w.>[..>
24022e54:	3ea723bd 3ea77a52 3ea7d119 3ea82813     .#.>Rz.>...>.(.>
24022e64:	3ea87f40 3ea8d6a0 3ea92e34 3ea985fa     @..>...>4..>...>
24022e74:	3ea9ddf4 3eaa3622 3eaa8e84 3eaae719     ...>"6.>...>...>
24022e84:	3eab3fe3 3eab98e1 3eabf214 3eac4b7b     .?.>...>...>{K.>
24022e94:	3eaca516 3eacfee7 3ead58ed 3eadb328     ...>...>.X.>(..>
24022ea4:	3eae0d99 3eae683f 3eaec31a 3eaf1e2c     ...>?h.>...>,..>
24022eb4:	3eaf7974 3eafd4f2 3eb030a6 3eb08c91     ty.>...>.0.>...>
24022ec4:	3eb0e8b2 3eb1450b 3eb1a19a 3eb1fe61     ...>.E.>...>a..>
24022ed4:	3eb25b5f 3eb2b894 3eb31602 3eb373a7     _[.>...>...>.s.>
24022ee4:	3eb3d184 3eb42f9a 3eb48de8 3eb4ec6e     ...>./.>...>n..>
24022ef4:	3eb54b2e 3eb5aa26 3eb60957 3eb668c2     .K.>&..>W..>.h.>
24022f04:	3eb6c866 3eb72844 3eb7885c 3eb7e8ae     f..>D(.>\..>...>
24022f14:	3eb8493a 3eb8aa00 3eb90b01 3eb96c3d     :I.>...>...>=l.>
24022f24:	3eb9cdb3 3eba2f65 3eba9152 3ebaf37a     ...>e/.>R..>z..>
24022f34:	3ebb55df 3ebbb87f 3ebc1b5b 3ebc7e74     .U.>...>[..>t~.>
24022f44:	3ebce1c9 3ebd455a 3ebda929 3ebe0d34     ...>ZE.>)..>4..>
24022f54:	3ebe717d 3ebed603 3ebf3ac7 3ebf9fc9     }q.>...>.:.>...>
24022f64:	3ec00508 3ec06a86 3ec0d043 3ec1363e     ...>.j.>C..>>6.>
24022f74:	3ec19c78 3ec202f0 3ec269a9 3ec2d0a0     x..>...>.i.>...>
24022f84:	3ec337d8 3ec39f4f 3ec40706 3ec46efe     .7.>O..>...>.n.>
24022f94:	3ec4d736 3ec53fae 3ec5a868 3ec61163     6..>.?.>h..>c..>
24022fa4:	3ec67a9f 3ec6e41d 3ec74ddd 3ec7b7de     .z.>...>.M.>...>
24022fb4:	3ec82222 3ec88ca9 3ec8f772 3ec9627e     "".>...>r..>~b.>
24022fc4:	3ec9cdcd 3eca395f 3ecaa535 3ecb114f     ...>_9.>5..>O..>
24022fd4:	3ecb7dad 3ecbea4f 3ecc5736 3eccc461     .}.>O..>6W.>a..>
24022fe4:	3ecd31d2 3ecd9f87 3ece0d82 3ece7bc3     .1.>...>...>.{.>
24022ff4:	3eceea4a 3ecf5916 3ecfc82a 3ed03783     J..>.Y.>*..>.7.>
24023004:	3ed0a724 3ed1170c 3ed1873b 3ed1f7b2     $..>...>;..>...>
24023014:	3ed26870 3ed2d977 3ed34ac6 3ed3bc5e     ph.>w..>.J.>^..>
24023024:	3ed42e3e 3ed4a068 3ed512db 3ed58598     >..>h..>...>...>
24023034:	3ed5f89e 3ed66bef 3ed6df8a 3ed75370     ...>.k.>...>pS.>
24023044:	3ed7c7a1 3ed83c1d 3ed8b0e4 3ed925f7     ...>.<.>...>.%.>
24023054:	3ed99b57 3eda1102 3eda86fa 3edafd3f     W..>...>...>?..>
24023064:	3edb73d1 3edbeab0 3edc61dd 3edcd958     .s.>...>.a.>X..>
24023074:	3edd5121 3eddc938 3ede419e 3edeba54     !Q.>8..>.A.>T..>
24023084:	3edf3358 3edfacad 3ee02651 3ee0a045     X3.>...>Q&.>E..>
24023094:	3ee11a8a 3ee19520 3ee21007 3ee28b3f     ...> ..>...>?..>
240230a4:	3ee306c9 3ee382a5 3ee3fed3 3ee47b54     ...>...>...>T{.>
240230b4:	3ee4f827 3ee5754e 3ee5f2c9 3ee67097     '..>Nu.>...>.p.>
240230c4:	3ee6eeb9 3ee76d30 3ee7ebfc 3ee86b1c     ...>0m.>...>.k.>
240230d4:	3ee8ea92 3ee96a5e 3ee9ea80 3eea6af8     ...>^j.>...>.j.>
240230e4:	3eeaebc7 3eeb6ced 3eebee6a 3eec703f     ...>.l.>j..>?p.>
240230f4:	3eecf26c 3eed74f2 3eedf7d0 3eee7b07     l..>.t.>...>.{.>
24023104:	3eeefe97 3eef8282 3ef006c6 3ef08b64     ...>...>...>d..>
24023114:	3ef1105e 3ef195b2 3ef21b62 3ef2a16e     ^..>...>b..>n..>
24023124:	3ef327d6 3ef3ae9a 3ef435bc 3ef4bd3a     .'.>...>.5.>:..>
24023134:	3ef54516 3ef5cd50 3ef655e9 3ef6dee0     .E.>P..>.U.>...>
24023144:	3ef76837 3ef7f1ec 3ef87c02 3ef90678     7h.>...>.|.>x..>
24023154:	3ef9914e 3efa1c86 3efaa81f 3efb3419     N..>...>...>.4.>
24023164:	3efbc076 3efc4d36 3efcda58 3efd67dd     v..>6M.>X..>.g.>
24023174:	3efdf5c7 3efe8414 3eff12c6 3effa1dd     ...>...>...>...>
24023184:	3f0018ad 3f00609e 3f00a8c2 3f00f11a     ...?.`.?...?...?
24023194:	3f0139a5 3f018263 3f01cb56 3f02147d     .9.?c..?V..?}..?
240231a4:	3f025dd8 3f02a768 3f02f12d 3f033b26     .].?h..?-..?&;.?
240231b4:	3f038555 3f03cfb9 3f041a53 3f046523     U..?...?S..?#e.?
240231c4:	3f04b029 3f04fb66 3f0546d9 3f059282     )..?f..?.F.?...?
240231d4:	3f05de63 3f062a7b 3f0676cb 3f06c353     c..?{*.?.v.?S..?
240231e4:	3f071012 3f075d0a 3f07aa3a 3f07f7a2     ...?.].?:..?...?
240231f4:	3f084544 3f08931f 3f08e134 3f092f82     DE.?...?4..?./.?
24023204:	3f097e0a 3f09cccc 3f0a1bc8 3f0a6b00     .~.?...?...?.k.?
24023214:	3f0aba72 3f0b0a20 3f0b5a08 3f0baa2d     r..? ..?.Z.?-..?
24023224:	3f0bfa8e 3f0c4b2b 3f0c9c04 3f0ced1a     ...?+K.?...?...?
24023234:	3f0d3e6e 3f0d8ffe 3f0de1cc 3f0e33d8     n>.?...?...?.3.?
24023244:	3f0e8622 3f0ed8ab 3f0f2b72 3f0f7e78     "..?...?r+.?x~.?
24023254:	3f0fd1be 3f102543 3f107908 3f10cd0d     ...?C%.?.y.?...?
24023264:	3f112152 3f1175d9 3f11caa0 3f121fa8     R!.?.u.?...?...?
24023274:	3f1274f2 3f12ca7e 3f13204c 3f13765d     .t.?~..?L .?]v.?
24023284:	3f13ccb0 3f142346 3f147a20 3f14d13e     ...?F#.? z.?>..?
24023294:	3f1528a0 3f158046 3f15d831 3f163060     .(.?F..?1..?`0.?
240232a4:	3f1688d5 3f16e190 3f173a91 3f1793d8     ...?...?.:.?...?
240232b4:	3f17ed65 3f18473a 3f18a156 3f18fbba     e..?:G.?V..?...?
240232c4:	3f195665 3f19b159 3f1a0c96 3f1a681b     eV.?Y..?...?.h.?
240232d4:	3f1ac3ea 3f1b2003 3f1b7c66 3f1bd913     ...?. .?f|.?...?
240232e4:	3f1c360b 3f1c934e 3f1cf0dd 3f1d4eb7     .6.?N..?...?.N.?
240232f4:	3f1dacde 3f1e0b52 3f1e6a12 3f1ec920     ...?R..?.j.? ..?
24023304:	3f1f287c 3f1f8826 3f1fe81e 3f204866     |(.?&..?...?fH ?
24023314:	3f20a8fc 3f2109e3 3f216b19 3f21cca0     .. ?..!?.k!?..!?
24023324:	3f222e78 3f2290a2 3f22f31d 3f2355ea     x."?.."?.."?.U#?
24023334:	3f23b90a 3f241c7d 3f248043 3f24e45d     ..#?}.$?C.$?].$?
24023344:	3f2548cb 3f25ad8e 3f2612a6 3f267814     .H%?..%?..&?.x&?
24023354:	3f26ddd7 3f2743f1 3f27aa62 3f28112b     ..&?.C'?b.'?+.(?
24023364:	3f28784b 3f28dfc3 3f294794 3f29afbe     Kx(?..(?.G)?..)?
24023374:	3f2a1842 3f2a8120 3f2aea59 3f2b53ed     B.*? .*?Y.*?.S+?
24023384:	3f2bbddc 3f2c2827 3f2c92cf 3f2cfdd4     ..+?'(,?..,?..,?
24023394:	3f2d6936 3f2dd4f6 3f2e4115 3f2ead93     6i-?..-?.A.?...?
240233a4:	3f2f1a70 3f2f87ae 3f2ff54c 3f30634b     p./?../?L./?Kc0?
240233b4:	3f30d1ac 3f31406e 3f31af94 3f321f1d     ..0?n@1?..1?..2?
240233c4:	3f328f09 3f32ff5a 3f337010 3f33e12b     ..2?Z.2?.p3?+.3?
240233d4:	3f3452ac 3f34c494 3f3536e3 3f35a999     .R4?..4?.65?..5?
240233e4:	3f361cb8 3f369040 3f370431 3f37788c     ..6?@.6?1.7?.x7?
240233f4:	3f37ed52 3f386283 3f38d820 3f394e2a     R.7?.b8? .8?*N9?
24023404:	3f39c4a0 3f3a3b85 3f3ab2d7 3f3b2a99     ..9?.;:?..:?.*;?
24023414:	3f3ba2ca 3f3c1b6c 3f3c947e 3f3d0e02     ..;?l.<?~.<?..=?
24023424:	3f3d87f8 3f3e0261 3f3e7d3e 3f3ef88e     ..=?a.>?>}>?..>?
24023434:	3f3f7454 3f3ff090 3f406d41 3f40ea6a     Tt??..??Am@?j.@?
24023444:	3f41680a 3f41e623 3f4264b5 3f42e3c1     .hA?#.A?.dB?..B?
24023454:	3f436347 3f43e349 3f4463c6 3f44e4c1     GcC?I.C?.cD?..D?
24023464:	3f456639 3f45e82f 3f466aa5 3f46ed9a     9fE?/.E?.jF?..F?
24023474:	3f477110 3f47f507 3f487981 3f48fe7d     .qG?..G?.yH?}.H?
24023484:	3f4983fe 3f4a0a03 3f4a908d 3f4b179e     ..I?..J?..J?..K?
24023494:	3f4b9f36 3f4c2756 3f4cafff 3f4d3932     6.K?V'L?..L?29M?
240234a4:	3f4dc2ef 3f4e4d37 3f4ed80c 3f4f636e     ..M?7MN?..N?ncO?
240234b4:	3f4fef5e 3f507bdd 3f5108ec 3f51968b     ^.O?.{P?..Q?..Q?
240234c4:	3f5224bd 3f52b381 3f5342d9 3f53d2c6     .$R?..R?.BS?..S?
240234d4:	3f546348 3f54f460 3f558611 3f561859     HcT?`.T?..U?Y.V?
240234e4:	3f56ab3b 3f573eb8 3f57d2d0 3f586785     ;.V?.>W?..W?.gX?
240234f4:	3f58fcd8 3f5992c9 3f5a295a 3f5ac08b     ..X?..Y?Z)Z?..Z?
24023504:	3f5b585f 3f5bf0d5 3f5c89f0 3f5d23b0     _X[?..[?..\?.#]?
24023514:	3f5dbe16 3f5e5923 3f5ef4d9 3f5f9138     ..]?#Y^?..^?8._?
24023524:	3f602e43 3f60cbf9 3f616a5d 3f62096f     C.`?..`?]ja?o.b?
24023534:	3f62a931 3f6349a4 3f63eac8 3f648ca0     1.b?.Ic?..c?..d?
24023544:	3f652f2d 3f65d26f 3f667669 3f671b1b     -/e?o.e?ivf?..g?
24023554:	3f67c086 3f6866ad 3f690d90 3f69b531     ..g?.fh?..i?1.i?
24023564:	3f6a5d91 3f6b06b1 3f6bb093 3f6c5b38     .]j?..k?..k?8[l?
24023574:	3f6d06a2 3f6db2d2 3f6e5fca 3f6f0d8a     ..m?..m?._n?..o?
24023584:	3f6fbc15 3f706b6c 3f711b90 3f71cc83     ..o?lkp?..q?..q?
24023594:	3f727e47 3f7330dd 3f73e446 3f749884     G~r?.0s?F.s?..t?
240235a4:	3f754d9a 3f760387 3f76ba4f 3f7771f2     .Mu?..v?O.v?.qw?
240235b4:	3f782a73 3f78e3d2 3f799e12 3f7a5935     s*x?..x?..y?5Yz?
240235c4:	3f7b153c 3f7bd228 3f7c8ffd 3f7d4ebb     <.{?(.{?..|?.N}?
240235d4:	3f7e0e64 3f7ecefa 3f7f9080 3f80297b     d.~?..~?...?{).?
240235e4:	3f808b2f 3f80ed5e 3f815008 3f81b32e     /..?^..?.P.?...?
240235f4:	3f8216d2 3f827af4 3f82df95 3f8344b6     ...?.z.?...?.D.?
24023604:	3f83aa59 3f84107e 3f847727 3f84de54     Y..?~..?'w.?T..?
24023614:	3f854606 3f85ae3f 3f861700 3f86804a     .F.??..?...?J..?
24023624:	3f86ea1e 3f87547d 3f87bf68 3f882ae1     ...?}T.?h..?.*.?
24023634:	3f8896e8 3f890380 3f8970a8 3f89de63     ...?...?.p.?c..?
24023644:	3f8a4cb1 3f8abb94 3f8b2b0d 3f8b9b1d     .L.?...?.+.?...?
24023654:	3f8c0bc6 3f8c7d09 3f8ceee7 3f8d6162     ...?.}.?...?ba.?
24023664:	3f8dd47a 3f8e4832 3f8ebc8b 3f8f3186     z..?2H.?...?.1.?
24023674:	3f8fa724 3f901d68 3f909452 3f910be4     $..?h..?R..?...?
24023684:	3f91841f 3f91fd05 3f927698 3f92f0d9     ...?...?.v.?...?
24023694:	3f936bc9 3f93e76b 3f9463bf 3f94e0c8     .k.?k..?.c.?...?
240236a4:	3f955e87 3f95dcfe 3f965c2e 3f96dc19     .^.?...?.\.?...?
240236b4:	3f975cc2 3f97de29 3f986050 3f98e33a     .\.?)..?P`.?:..?
240236c4:	3f9966e8 3f99eb5c 3f9a7097 3f9af69d     .f.?\..?.p.?...?
240236d4:	3f9b7d6e 3f9c050c 3f9c8d7a 3f9d16ba     n}.?...?z..?...?
240236e4:	3f9da0cd 3f9e2bb6 3f9eb777 3f9f4412     ...?.+.?w..?.D.?
240236f4:	3f9fd188 3fa05fdd 3fa0ef12 3fa17f29     ...?._.?...?)..?
24023704:	3fa21026 3fa2a209 3fa334d6 3fa3c88f     &..?...?.4.?...?
24023714:	3fa45d36 3fa4f2cd 3fa58958 3fa620d8     6].?...?X..?. .?
24023724:	3fa6b950 3fa752c2 3fa7ed32 3fa888a1     P..?.R.?2..?...?
24023734:	3fa92513 3fa9c28a 3faa6109 3fab0093     .%.?...?.a.?...?
24023744:	3faba12a 3fac42d2 3face58c 3fad895d     *..?.B.?...?]..?
24023754:	3fae2e47 3faed44d 3faf7b73 3fb023bb     G..?M..?s{.?.#.?
24023764:	3fb0cd28 3fb177be 3fb22380 3fb2d072     (..?.w.?.#.?r..?
24023774:	3fb37e96 3fb42df0 3fb4de84 3fb59055     .~.?.-.?...?U..?
24023784:	3fb64366 3fb6f7bc 3fb7ad59 3fb86443     fC.?...?Y..?Cd.?
24023794:	3fb91c7b 3fb9d607 3fba90ea 3fbb4d29     {..?...?...?)M.?
240237a4:	3fbc0ac6 3fbcc9c7 3fbd8a2f 3fbe4c03     ...?...?/..?.L.?
240237b4:	3fbf0f47 3fbfd400 3fc09a31 3fc161df     G..?...?1..?.a.?
240237c4:	3fc22b0f 3fc2f5c6 3fc3c208 3fc48fda     .+.?...?...?...?
240237d4:	3fc55f41 3fc63042 3fc702e2 3fc7d726     A_.?B0.?...?&..?
240237e4:	3fc8ad14 3fc984b0 3fca5e00 3fcb390a     ...?...?.^.?.9.?
240237f4:	3fcc15d2 3fccf460 3fcdd4b8 3fceb6e1     ...?`..?...?...?
24023804:	3fcf9ae0 3fd080bc 3fd1687a 3fd25222     ...?...?zh.?"R.?
24023814:	3fd33db9 3fd42b46 3fd51ad0 3fd60c5d     .=.?F+.?...?]..?
24023824:	3fd6fff4 3fd7f59d 3fd8ed5e 3fd9e73f     ...?...?^..??..?
24023834:	3fdae347 3fdbe17e 3fdce1eb 3fdde497     G..?~..?...?...?
24023844:	3fdee988 3fdff0c8 3fe0fa5e 3fe20654     ...?...?^..?T..?
24023854:	3fe314b1 3fe4257e 3fe538c5 3fe64e8d     ...?~%.?.8.?.N.?
24023864:	3fe766e2 3fe881cc 3fe99f54 3feabf85     .f.?...?T..?...?
24023874:	3febe269 3fed080a 3fee3071 3fef5bab     i..?...?q0.?.[.?
24023884:	3ff089c1 3ff1bac0 3ff2eeb1 3ff425a1     ...?...?...?.%.?
24023894:	3ff55f9c 3ff69cad 3ff7dce1 3ff92044     ._.?...?...?D .?
240238a4:	3ffa66e4 3ffbb0cc 3ffcfe0b 3ffe4eae     .f.?...?...?.N.?
240238b4:	3fffa2c4 40007d2c 40012abf 4001da20     ...?,}.@.*.@ ..@
240238c4:	40028b57 40033e6d 4003f368 4004aa52     W..@m>.@h..@R..@
240238d4:	40056333 40061e12 4006daf9 400799f1     3c.@...@...@...@
240238e4:	40085b02 40091e36 4009e397 400aab2e     .[.@6..@...@...@
240238f4:	400b7504 400c4126 400d0f9b 400de071     .u.@&A.@...@q..@
24023904:	400eb3b0 400f8965 4010619b 40113c5e     ...@e..@.a.@^<.@
24023914:	401219ba 4012f9bb 4013dc6e 4014c1e0     ...@...@n..@...@
24023924:	4015aa1e 40169536 40178336 4018742c     ...@6..@6..@,t.@
24023934:	40196827 401a5f36 401b5968 401c56cf     'h.@6_.@hY.@.V.@
24023944:	401d5779 401e5b78 401f62de 40206dbb     yW.@x[.@.b.@.m @
24023954:	40217c22 40228e25 4023a3d9 4024bd51     "|!@%."@..#@Q.$@
24023964:	4025daa1 4026fbde 4028211e 40294a76     ..%@..&@.!(@vJ)@
24023974:	402a77fe 402ba9ce 402cdffc 402e1aa3     .w*@..+@..,@...@
24023984:	402f59db 40309dc0 4031e66c 403333fc     .Y/@..0@l.1@.33@

24023994 <__filterTanhTable_96000>:
24023994:	398c4646 398c8a33 398cce40 398d126e     FF.93..9@..9n..9
240239a4:	398d56bd 398d9b2e 398ddfbf 398e2472     .V.9...9...9r$.9
240239b4:	398e6946 398eae3b 398ef351 398f3889     Fi.9;..9Q..9.8.9
240239c4:	398f7de3 398fc35e 399008fb 39904eb9     .}.9^..9...9.N.9
240239d4:	3990949a 3990da9c 399120c0 39916706     ...9...9. .9.g.9
240239e4:	3991ad6e 3991f3f8 39923aa4 39928173     n..9...9.:.9s..9
240239f4:	3992c863 39930f76 399356ac 39939e04     c..9v..9.V.9...9
24023a04:	3993e57f 39942d1c 399474dc 3994bcbe     ...9.-.9.t.9...9
24023a14:	399504c3 39954cec 39959537 3995dda5     ...9.L.97..9...9
24023a24:	39962636 39966eeb 3996b7c2 399700bd     6&.9.n.9...9...9
24023a34:	399749dc 3997931d 3997dc82 3998260b     .I.9...9...9.&.9
24023a44:	39986fb7 3998b987 3999037b 39994d92     .o.9...9{..9.M.9
24023a54:	399997ce 3999e22d 399a2cb0 399a7758     ...9-..9.,.9Xw.9
24023a64:	399ac223 399b0d13 399b5827 399ba35f     #..9...9'X.9_..9
24023a74:	399beebc 399c3a3d 399c85e3 399cd1ae     ...9=:.9...9...9
24023a84:	399d1d9d 399d69b1 399db5ea 399e0247     ...9.i.9...9G..9
24023a94:	399e4eca 399e9b72 399ee83f 399f3531     .N.9r..9?..915.9
24023aa4:	399f8248 399fcf85 39a01ce7 39a06a6e     H..9...9...9nj.9
24023ab4:	39a0b81b 39a105ee 39a153e6 39a1a204     ...9...9.S.9...9
24023ac4:	39a1f048 39a23eb2 39a28d42 39a2dbf8     H..9.>.9B..9...9
24023ad4:	39a32ad4 39a379d6 39a3c8fe 39a4184d     .*.9.y.9...9M..9
24023ae4:	39a467c2 39a4b75d 39a50720 39a55708     .g.9]..9 ..9.W.9
24023af4:	39a5a718 39a5f74e 39a647ab 39a6982f     ...9N..9.G.9/..9
24023b04:	39a6e8da 39a739ac 39a78aa5 39a7dbc5     ...9.9.9...9...9
24023b14:	39a82d0d 39a87e7c 39a8d012 39a921d0     .-.9|~.9...9.!.9
24023b24:	39a973b6 39a9c5c3 39aa17f8 39aa6a55     .s.9...9...9Uj.9
24023b34:	39aabcd9 39ab0f86 39ab625a 39abb557     ...9...9Zb.9W..9
24023b44:	39ac087c 39ac5bc9 39acaf3e 39ad02dc     |..9.[.9>..9...9
24023b54:	39ad56a3 39adaa92 39adfea9 39ae52e9     .V.9...9...9.R.9
24023b64:	39aea753 39aefbe5 39af509f 39afa583     S..9...9.P.9...9
24023b74:	39affa90 39b04fc7 39b0a526 39b0faaf     ...9.O.9&..9...9
24023b84:	39b15061 39b1a63d 39b1fc42 39b25271     aP.9=..9B..9qR.9
24023b94:	39b2a8ca 39b2ff4c 39b355f9 39b3accf     ...9L..9.U.9...9
24023ba4:	39b403d0 39b45afa 39b4b24f 39b509ce     ...9.Z.9O..9...9
24023bb4:	39b56177 39b5b94b 39b61149 39b66972     wa.9K..9I..9ri.9
24023bc4:	39b6c1c6 39b71a45 39b772ee 39b7cbc2     ...9E..9.r.9...9
24023bd4:	39b824c1 39b87dec 39b8d741 39b930c2     .$.9.}.9A..9.0.9
24023be4:	39b98a6e 39b9e445 39ba3e48 39ba9877     n..9E..9H>.9w..9
24023bf4:	39baf2d1 39bb4d57 39bba809 39bc02e7     ...9WM.9...9...9
24023c04:	39bc5df1 39bcb927 39bd1489 39bd7017     .].9'..9...9.p.9
24023c14:	39bdcbd2 39be27b9 39be83cc 39bee00c     ...9.'.9...9...9
24023c24:	39bf3c79 39bf9912 39bff5d9 39c052cc     y<.9...9...9.R.9
24023c34:	39c0afec 39c10d3a 39c16ab4 39c1c85c     ...9:..9.j.9\..9
24023c44:	39c22631 39c28434 39c2e264 39c340c2     1&.94..9d..9.@.9
24023c54:	39c39f4d 39c3fe07 39c45cee 39c4bc03     M..9...9.\.9...9
24023c64:	39c51b46 39c57ab7 39c5da56 39c63a24     F..9.z.9V..9$:.9
24023c74:	39c69a20 39c6fa4b 39c75aa4 39c7bb2c      ..9K..9.Z.9,..9
24023c84:	39c81be2 39c87cc8 39c8dddc 39c93f1f     ...9.|.9...9.?.9
24023c94:	39c9a092 39ca0233 39ca6404 39cac604     ...93..9.d.9...9
24023ca4:	39cb2834 39cb8a93 39cbed22 39cc4fe1     4(.9...9"..9.O.9
24023cb4:	39ccb2cf 39cd15ed 39cd793c 39cddcba     ...9...9<y.9...9
24023cc4:	39ce4069 39cea447 39cf0857 39cf6c96     i@.9G..9W..9.l.9
24023cd4:	39cfd106 39d035a7 39d09a79 39d0ff7b     ...9.5.9y..9{..9
24023ce4:	39d164ae 39d1ca13 39d22fa8 39d2956f     .d.9...9./.9o..9
24023cf4:	39d2fb66 39d36190 39d3c7ea 39d42e76     f..9.a.9...9v..9
24023d04:	39d49534 39d4fc24 39d56346 39d5ca99     4..9$..9Fc.9...9
24023d14:	39d6321e 39d699d6 39d701c0 39d769dc     .2.9...9...9.i.9
24023d24:	39d7d22a 39d83aab 39d8a35f 39d90c45     *..9.:.9_..9E..9
24023d34:	39d9755f 39d9deab 39da482a 39dab1dc     _u.9...9*H.9...9
24023d44:	39db1bc1 39db85d9 39dbf025 39dc5aa5     ...9...9%..9.Z.9
24023d54:	39dcc558 39dd303e 39dd9b59 39de06a7     X..9>0.9Y..9...9
24023d64:	39de7229 39dedddf 39df49ca 39dfb5e9     )r.9...9.I.9...9
24023d74:	39e0223c 39e08ec3 39e0fb7f 39e16870     <".9...9...9ph.9
24023d84:	39e1d595 39e242f0 39e2b07f 39e31e43     ...9.B.9...9C..9
24023d94:	39e38c3c 39e3fa6b 39e468cf 39e4d769     <..9k..9.h.9i..9
24023da4:	39e54638 39e5b53c 39e62477 39e693e7     8F.9<..9w$.9...9
24023db4:	39e7038d 39e7736a 39e7e37c 39e853c5     ...9js.9|..9.S.9
24023dc4:	39e8c444 39e934fa 39e9a5e6 39ea1709     D..9.4.9...9...9
24023dd4:	39ea8863 39eaf9f3 39eb6bbb 39ebddb9     c..9...9.k.9...9
24023de4:	39ec4fef 39ecc25c 39ed3501 39eda7dd     .O.9\..9.5.9...9
24023df4:	39ee1af0 39ee8e3c 39ef01bf 39ef757a     ...9<..9...9zu.9
24023e04:	39efe96d 39f05d99 39f0d1fc 39f14698     m..9.].9...9.F.9
24023e14:	39f1bb6d 39f2307a 39f2a5bf 39f31b3e     m..9z0.9...9>..9
24023e24:	39f390f5 39f406e5 39f47d0f 39f4f371     ...9...9.}.9q..9
24023e34:	39f56a0d 39f5e0e3 39f657f2 39f6cf3a     .j.9...9.W.9:..9
24023e44:	39f746bd 39f7be79 39f8366f 39f8ae9f     .F.9y..9o6.9...9
24023e54:	39f9270a 39f99faf 39fa188e 39fa91a8     .'.9...9...9...9
24023e64:	39fb0afc 39fb848b 39fbfe55 39fc785a     ...9...9U..9Zx.9
24023e74:	39fcf29a 39fd6d15 39fde7cc 39fe62be     ...9.m.9...9.b.9
24023e84:	39feddeb 39ff5955 39ffd4f9 3a00286d     ...9UY.9...9m(.:
24023e94:	3a00667b 3a00a4a8 3a00e2f2 3a01215b     {f.:...:...:[!.:
24023ea4:	3a015fe2 3a019e87 3a01dd4b 3a021c2d     ._.:...:K..:-..:
24023eb4:	3a025b2d 3a029a4c 3a02d989 3a0318e5     -[.:L..:...:...:
24023ec4:	3a035860 3a0397fa 3a03d7b2 3a041789     `X.:...:...:...:
24023ed4:	3a04577f 3a049794 3a04d7c8 3a05181b     .W.:...:...:...:
24023ee4:	3a05588d 3a05991f 3a05d9d0 3a061aa0     .X.:...:...:...:
24023ef4:	3a065b8f 3a069c9e 3a06ddcd 3a071f1a     .[.:...:...:...:
24023f04:	3a076088 3a07a215 3a07e3c2 3a08258f     .`.:...:...:.%.:
24023f14:	3a08677c 3a08a988 3a08ebb5 3a092e02     |g.:...:...:...:
24023f24:	3a09706e 3a09b2fb 3a09f5a8 3a0a3876     np.:...:...:v8.:
24023f34:	3a0a7b63 3a0abe72 3a0b01a0 3a0b44ef     c{.:r..:...:.D.:
24023f44:	3a0b885f 3a0bcbef 3a0c0fa1 3a0c5372     _..:...:...:rS.:
24023f54:	3a0c9765 3a0cdb79 3a0d1fad 3a0d6403     e..:y..:...:.d.:
24023f64:	3a0da87a 3a0ded12 3a0e31cb 3a0e76a5     z..:...:.1.:.v.:
24023f74:	3a0ebba1 3a0f00be 3a0f45fc 3a0f8b5c     ...:...:.E.:\..:
24023f84:	3a0fd0de 3a101681 3a105c46 3a10a22d     ...:...:F\.:-..:
24023f94:	3a10e836 3a112e61 3a1174ad 3a11bb1c     6..:a..:.t.:...:
24023fa4:	3a1201ac 3a12485f 3a128f34 3a12d62c     ...:_H.:4..:,..:
24023fb4:	3a131d46 3a136482 3a13abe1 3a13f362     F..:.d.:...:b..:
24023fc4:	3a143b06 3a1482cc 3a14cab6 3a1512c2     .;.:...:...:...:
24023fd4:	3a155af1 3a15a343 3a15ebb8 3a163450     .Z.:C..:...:P4.:
24023fe4:	3a167d0b 3a16c5ea 3a170eeb 3a175810     .}.:...:...:.X.:
24023ff4:	3a17a159 3a17eac5 3a183454 3a187e08     Y..:...:T4.:.~.:
24024004:	3a18c7de 3a1911d9 3a195bf7 3a19a63a     ...:...:.[.::..:
24024014:	3a19f0a0 3a1a3b2a 3a1a85d9 3a1ad0ab     ...:*;.:...:...:
24024024:	3a1b1ba2 3a1b66bd 3a1bb1fd 3a1bfd61     ...:.f.:...:a..:
24024034:	3a1c48e9 3a1c9496 3a1ce068 3a1d2c5e     .H.:...:h..:^,.:
24024044:	3a1d7879 3a1dc4b9 3a1e111e 3a1e5da8     yx.:...:...:.].:
24024054:	3a1eaa57 3a1ef72b 3a1f4424 3a1f9143     W..:+..:$D.:C..:
24024064:	3a1fde86 3a202bf0 3a20797e 3a20c733     ...:.+ :~y :3. :
24024074:	3a21150d 3a21630c 3a21b132 3a21ff7d     ..!:.c!:2.!:}.!:
24024084:	3a224dee 3a229c85 3a22eb43 3a233a26     .M":..":C.":&:#:
24024094:	3a238930 3a23d85f 3a2427b6 3a247732     0.#:_.#:.'$:2w$:
240240a4:	3a24c6d5 3a25169f 3a25668f 3a25b6a6     ..$:..%:.f%:..%:
240240b4:	3a2606e4 3a265748 3a26a7d4 3a26f886     ..&:HW&:..&:..&:
240240c4:	3a274960 3a279a61 3a27eb89 3a283cd8     `I':a.':..':.<(:
240240d4:	3a288e4f 3a28dfed 3a2931b2 3a2983a0     O.(:..(:.1):..):
240240e4:	3a29d5b4 3a2a27f1 3a2a7a56 3a2acce2     ..):.'*:Vz*:..*:
240240f4:	3a2b1f96 3a2b7273 3a2bc577 3a2c18a4     ..+:sr+:w.+:..,:
24024104:	3a2c6bf9 3a2cbf76 3a2d131c 3a2d66ea     .k,:v.,:..-:.f-:
24024114:	3a2dbae1 3a2e0f00 3a2e6348 3a2eb7b9     ..-:...:Hc.:...:
24024124:	3a2f0c53 3a2f6116 3a2fb602 3a300b17     S./:.a/:../:..0:
24024134:	3a306055 3a30b5bd 3a310b4e 3a316108     U`0:..0:N.1:.a1:
24024144:	3a31b6ec 3a320cf9 3a326330 3a32b991     ..1:..2:0c2:..2:
24024154:	3a33101c 3a3366d0 3a33bdaf 3a3414b7     ..3:.f3:..3:..4:
24024164:	3a346bea 3a34c347 3a351ace 3a357280     .k4:G.4:..5:.r5:
24024174:	3a35ca5c 3a362263 3a367a94 3a36d2f0     \.5:c"6:.z6:..6:
24024184:	3a372b77 3a378428 3a37dd05 3a38360c     w+7:(.7:..7:.68:
24024194:	3a388f3f 3a38e89d 3a394226 3a399bdb     ?.8:..8:&B9:..9:
240241a4:	3a39f5bb 3a3a4fc6 3a3aa9fd 3a3b0460     ..9:.O::..::`.;:
240241b4:	3a3b5eee 3a3bb9a9 3a3c148f 3a3c6fa1     .^;:..;:..<:.o<:
240241c4:	3a3ccae0 3a3d264b 3a3d81e1 3a3ddda5     ..<:K&=:..=:..=:
240241d4:	3a3e3994 3a3e95b0 3a3ef1f9 3a3f4e6f     .9>:..>:..>:oN?:
240241e4:	3a3fab11 3a4007e0 3a4064dc 3a40c205     ..?:..@:.d@:..@:
240241f4:	3a411f5b 3a417cdf 3a41da8f 3a42386d     [.A:.|A:..A:m8B:
24024204:	3a429679 3a42f4b2 3a435318 3a43b1ad     y.B:..B:.SC:..C:
24024214:	3a44106f 3a446f5f 3a44ce7d 3a452dc9     o.D:_oD:}.D:.-E:
24024224:	3a458d43 3a45eceb 3a464cc2 3a46acc7     C.E:..E:.LF:..F:
24024234:	3a470cfb 3a476d5d 3a47cdee 3a482eae     ..G:]mG:..G:..H:
24024244:	3a488f9c 3a48f0b9 3a495206 3a49b381     ..H:..H:.RI:..I:
24024254:	3a4a152c 3a4a7706 3a4ad910 3a4b3b49     ,.J:.wJ:..J:I;K:
24024264:	3a4b9db1 3a4c0049 3a4c6311 3a4cc609     ..K:I.L:.cL:..L:
24024274:	3a4d2930 3a4d8c88 3a4df010 3a4e53c8     0)M:..M:..M:.SN:
24024284:	3a4eb7b0 3a4f1bc8 3a4f8012 3a4fe48b     ..N:..O:..O:..O:
24024294:	3a504935 3a50ae10 3a51131c 3a517859     5IP:..P:..Q:YxQ:
240242a4:	3a51ddc7 3a524366 3a52a936 3a530f37     ..Q:fCR:6.R:7.S:
240242b4:	3a53756a 3a53dbce 3a544264 3a54a92c     juS:..S:dBT:,.T:
240242c4:	3a551025 3a557750 3a55dead 3a56463d     %.U:PwU:..U:=FV:
240242d4:	3a56adfe 3a5715f1 3a577e17 3a57e670     ..V:..W:.~W:p.W:
240242e4:	3a584efb 3a58b7b8 3a5920a8 3a5989cb     .NX:..X:. Y:..Y:
240242f4:	3a59f321 3a5a5caa 3a5ac666 3a5b3055     !.Y:.\Z:f.Z:U0[:
24024304:	3a5b9a78 3a5c04ce 3a5c6f57 3a5cda14     x.[:..\:Wo\:..\:
24024314:	3a5d4505 3a5db029 3a5e1b82 3a5e870e     .E]:).]:..^:..^:
24024324:	3a5ef2ce 3a5f5ec3 3a5fcaec 3a603749     ..^:.^_:.._:I7`:
24024334:	3a60a3db 3a6110a1 3a617d9c 3a61eacc     ..`:..a:.}a:..a:
24024344:	3a625830 3a62c5ca 3a633398 3a63a19c     0Xb:..b:.3c:..c:
24024354:	3a640fd5 3a647e44 3a64ece7 3a655bc1     ..d:D~d:..d:.[e:
24024364:	3a65cad0 3a663a15 3a66a990 3a671941     ..e:.:f:..f:A.g:
24024374:	3a678927 3a67f944 3a686998 3a68da21     '.g:D.g:.ih:!.h:
24024384:	3a694ae2 3a69bbd8 3a6a2d06 3a6a9e6a     .Ji:..i:.-j:j.j:
24024394:	3a6b1006 3a6b81d8 3a6bf3e1 3a6c6622     ..k:..k:..k:"fl:
240243a4:	3a6cd89a 3a6d4b49 3a6dbe30 3a6e314e     ..l:IKm:0.m:N1n:
240243b4:	3a6ea4a4 3a6f1832 3a6f8bf9 3a6ffff7     ..n:2.o:..o:..o:
240243c4:	3a70742d 3a70e89b 3a715d42 3a71d222     -tp:..p:B]q:".q:
240243d4:	3a72473a 3a72bc8a 3a733214 3a73a7d6     :Gr:..r:.2s:..s:
240243e4:	3a741dd2 3a749406 3a750a74 3a75811b     ..t:..t:t.u:..u:
240243f4:	3a75f7fc 3a766f16 3a76e66a 3a775df7     ..u:.ov:j.v:.]w:
24024404:	3a77d5bf 3a784dc0 3a78c5fc 3a793e72     ..w:.Mx:..x:r>y:
24024414:	3a79b722 3a7a300c 3a7aa931 3a7b2291     ".y:.0z:1.z:."{:
24024424:	3a7b9c2c 3a7c1601 3a7c9012 3a7d0a5d     ,.{:..|:..|:].}:
24024434:	3a7d84e4 3a7dffa6 3a7e7aa4 3a7ef5dd     ..}:..}:.z~:..~:
24024444:	3a7f7151 3a7fed02 3a803477 3a80728b     Qq.:...:w4.:.r.:
24024454:	3a80b0be 3a80ef0e 3a812d7d 3a816c09     ...:...:}-.:.l.:
24024464:	3a81aab5 3a81e97e 3a822866 3a82676c     ...:~..:f(.:lg.:
24024474:	3a82a691 3a82e5d4 3a832536 3a8364b7     ...:...:6%.:.d.:
24024484:	3a83a456 3a83e415 3a8423f2 3a8463ee     V..:...:.#.:.c.:
24024494:	3a84a409 3a84e443 3a85249c 3a856515     ...:C..:.$.:.e.:
240244a4:	3a85a5ac 3a85e663 3a862739 3a86682f     ...:c..:9'.:/h.:
240244b4:	3a86a944 3a86ea78 3a872bcc 3a876d40     D..:x..:.+.:@m.:
240244c4:	3a87aed3 3a87f087 3a88325a 3a88744c     ...:...:Z2.:Lt.:
240244d4:	3a88b65f 3a88f892 3a893ae5 3a897d58     _..:...:.:.:X}.:
240244e4:	3a89bfeb 3a8a029e 3a8a4572 3a8a8866     ...:...:rE.:f..:
240244f4:	3a8acb7b 3a8b0eb0 3a8b5205 3a8b957b     {..:...:.R.:{..:
24024504:	3a8bd912 3a8c1cc9 3a8c60a2 3a8ca49b     ...:...:.`.:...:
24024514:	3a8ce8b5 3a8d2cf0 3a8d714c 3a8db5c9     ...:.,.:Lq.:...:
24024524:	3a8dfa67 3a8e3f27 3a8e8408 3a8ec90a     g..:'?.:...:...:
24024534:	3a8f0e2d 3a8f5372 3a8f98d9 3a8fde61     -..:rS.:...:a..:
24024544:	3a90240b 3a9069d7 3a90afc4 3a90f5d3     .$.:.i.:...:...:
24024554:	3a913c05 3a918258 3a91c8cd 3a920f64     .<.:X..:...:d..:
24024564:	3a92561e 3a929cfa 3a92e3f8 3a932b18     .V.:...:...:.+.:
24024574:	3a93725b 3a93b9c1 3a940149 3a9448f3     [r.:...:I..:.H.:
24024584:	3a9490c1 3a94d8b1 3a9520c4 3a9568f9     ...:...:. .:.h.:
24024594:	3a95b152 3a95f9ce 3a96426d 3a968b2f     R..:...:mB.:/..:
240245a4:	3a96d414 3a971d1d 3a976649 3a97af98     ...:...:If.:...:
240245b4:	3a97f90b 3a9842a2 3a988c5c 3a98d63a     ...:.B.:\..::..:
240245c4:	3a99203b 3a996a61 3a99b4aa 3a99ff17     ; .:aj.:...:...:
240245d4:	3a9a49a9 3a9a945e 3a9adf38 3a9b2a35     .I.:^..:8..:5*.:
240245e4:	3a9b7558 3a9bc09e 3a9c0c09 3a9c5799     Xu.:...:...:.W.:
240245f4:	3a9ca34d 3a9cef26 3a9d3b23 3a9d8745     M..:&..:#;.:E..:
24024604:	3a9dd38c 3a9e1ff9 3a9e6c8a 3a9eb940     ...:...:.l.:@..:
24024614:	3a9f061b 3a9f531c 3a9fa041 3a9fed8d     ...:.S.:A..:...:
24024624:	3aa03afd 3aa08893 3aa0d64f 3aa12430     .:.:...:O..:0$.:
24024634:	3aa17237 3aa1c064 3aa20eb7 3aa25d2f     7r.:d..:...:/].:
24024644:	3aa2abce 3aa2fa92 3aa3497d 3aa3988e     ...:...:}I.:...:
24024654:	3aa3e7c5 3aa43723 3aa486a7 3aa4d652     ...:#7.:...:R..:
24024664:	3aa52623 3aa5761b 3aa5c639 3aa6167e     #&.:.v.:9..:~..:
24024674:	3aa666eb 3aa6b77e 3aa70838 3aa75919     .f.:~..:8..:.Y.:
24024684:	3aa7aa21 3aa7fb51 3aa84ca8 3aa89e26     !..:Q..:.L.:&..:
24024694:	3aa8efcc 3aa94199 3aa9938e 3aa9e5ab     ...:.A.:...:...:
240246a4:	3aaa37ef 3aaa8a5b 3aaadcf0 3aab2fac     .7.:[..:...:./.:
240246b4:	3aab8290 3aabd59c 3aac28d1 3aac7c2d     ...:...:.(.:-|.:
240246c4:	3aaccfb3 3aad2360 3aad7736 3aadcb35     ...:`#.:6w.:5..:
240246d4:	3aae1f5c 3aae73ad 3aaec826 3aaf1cc7     \..:.s.:&..:...:
240246e4:	3aaf7192 3aafc686 3ab01ba3 3ab070e9     .q.:...:...:.p.:
240246f4:	3ab0c659 3ab11bf2 3ab171b4 3ab1c7a0     Y..:...:.q.:...:
24024704:	3ab21db6 3ab273f5 3ab2ca5e 3ab320f1     ...:.s.:^..:. .:
24024714:	3ab377ad 3ab3ce94 3ab425a5 3ab47ce0     .w.:...:.%.:.|.:
24024724:	3ab4d445 3ab52bd4 3ab5838e 3ab5db73     E..:.+.:...:s..:
24024734:	3ab63382 3ab68bbb 3ab6e420 3ab73caf     .3.:...: ..:.<.:
24024744:	3ab79569 3ab7ee4e 3ab8475e 3ab8a099     i..:N..:^G.:...:
24024754:	3ab8f9ff 3ab95391 3ab9ad4e 3aba0736     ...:.S.:N..:6..:
24024764:	3aba614a 3ababb8a 3abb15f5 3abb708c     Ja.:...:...:.p.:
24024774:	3abbcb4f 3abc263e 3abc8159 3abcdca0     O..:>&.:Y..:...:
24024784:	3abd3813 3abd93b2 3abdef7e 3abe4b77     .8.:...:~..:wK.:
24024794:	3abea79b 3abf03ed 3abf606b 3abfbd16     ...:...:k`.:...:
240247a4:	3ac019ee 3ac076f3 3ac0d425 3ac13183     ...:.v.:%..:.1.:
240247b4:	3ac18f10 3ac1ecc9 3ac24ab0 3ac2a8c4     ...:...:.J.:...:
240247c4:	3ac30706 3ac36576 3ac3c413 3ac422de     ...:ve.:...:.".:
240247d4:	3ac481d7 3ac4e0fe 3ac54053 3ac59fd6     ...:...:S@.:...:
240247e4:	3ac5ff88 3ac65f67 3ac6bf75 3ac71fb2     ...:g_.:u..:...:
240247f4:	3ac7801d 3ac7e0b7 3ac84180 3ac8a278     ...:...:.A.:x..:
24024804:	3ac9039e 3ac964f4 3ac9c679 3aca282d     ...:.d.:y..:-(.:
24024814:	3aca8a10 3acaec23 3acb4e65 3acbb0d7     ...:#..:eN.:...:
24024824:	3acc1378 3acc7649 3accd94a 3acd3c7b     x..:Iv.:J..:{<.:
24024834:	3acd9fdc 3ace036d 3ace672f 3acecb20     ...:m..:/g.: ..:
24024844:	3acf2f42 3acf9395 3acff818 3ad05ccc     B/.:...:...:.\.:
24024854:	3ad0c1b0 3ad126c6 3ad18c0c 3ad1f183     ...:.&.:...:...:
24024864:	3ad2572c 3ad2bd06 3ad32311 3ad3894d     ,W.:...:.#.:M..:
24024874:	3ad3efbb 3ad4565b 3ad4bd2c 3ad5242f     ...:[V.:,..:/$.:
24024884:	3ad58b64 3ad5f2cb 3ad65a64 3ad6c22f     d..:...:dZ.:/..:
24024894:	3ad72a2c 3ad7925c 3ad7fabe 3ad86353     ,*.:\..:...:Sc.:
240248a4:	3ad8cc1a 3ad93514 3ad99e41 3ada07a1     ...:.5.:A..:...:
240248b4:	3ada7134 3adadafa 3adb44f3 3adbaf20     4q.:...:.D.: ..:
240248c4:	3adc1980 3adc8413 3adceeda 3add59d5     ...:...:...:.Y.:
240248d4:	3addc504 3ade3066 3ade9bfd 3adf07c7     ...:f0.:...:...:
240248e4:	3adf73c6 3adfdff9 3ae04c60 3ae0b8fc     .s.:...:`L.:...:
240248f4:	3ae125cd 3ae192d2 3ae2000c 3ae26d7b     .%.:...:...:{m.:
24024904:	3ae2db1f 3ae348f8 3ae3b706 3ae4254a     ...:.H.:...:J%.:
24024914:	3ae493c2 3ae50271 3ae57155 3ae5e06e     ...:q..:Uq.:n..:
24024924:	3ae64fbe 3ae6bf43 3ae72efe 3ae79ef0     .O.:C..:...:...:
24024934:	3ae80f17 3ae87f75 3ae8f00a 3ae960d5     ...:u..:...:.`.:
24024944:	3ae9d1d6 3aea430e 3aeab47d 3aeb2623     ...:.C.:}..:#&.:
24024954:	3aeb9800 3aec0a14 3aec7c60 3aeceee2     ...:...:`|.:...:
24024964:	3aed619d 3aedd48e 3aee47b8 3aeebb19     .a.:...:.G.:...:
24024974:	3aef2eb2 3aefa283 3af0168c 3af08acd     ...:...:...:...:
24024984:	3af0ff47 3af173f9 3af1e8e3 3af25e06     G..:.s.:...:.^.:
24024994:	3af2d362 3af348f6 3af3bec4 3af434ca     b..:.H.:...:.4.:
240249a4:	3af4ab0a 3af52183 3af59836 3af60f21     ...:.!.:6..:!..:
240249b4:	3af68647 3af6fda6 3af7753f 3af7ed12     G..:...:?u.:...:
240249c4:	3af8651e 3af8dd65 3af955e7 3af9cea2     .e.:e..:.U.:...:
240249d4:	3afa4798 3afac0c9 3afb3a34 3afbb3da     .G.:...:4:.:...:
240249e4:	3afc2dbb 3afca7d7 3afd222e 3afd9cc0     .-.:...:.".:...:
240249f4:	3afe178e 3afe9297 3aff0ddc 3aff895d     ...:...:...:]..:
24024a04:	3b00028c 3b004088 3b007ea3 3b00bcdb     ...;.@.;.~.;...;
24024a14:	3b00fb31 3b0139a5 3b017838 3b01b6e9     1..;.9.;8x.;...;
24024a24:	3b01f5b9 3b0234a6 3b0273b3 3b02b2dd     ...;.4.;.s.;...;
24024a34:	3b02f227 3b03318f 3b037115 3b03b0bb     '..;.1.;.q.;...;
24024a44:	3b03f07f 3b043062 3b047065 3b04b086     ...;b0.;ep.;...;
24024a54:	3b04f0c6 3b053125 3b0571a4 3b05b241     ...;%1.;.q.;A..;
24024a64:	3b05f2fe 3b0633da 3b0674d6 3b06b5f1     ...;.3.;.t.;...;
24024a74:	3b06f72c 3b073886 3b077a00 3b07bb9a     ,..;.8.;.z.;...;
24024a84:	3b07fd53 3b083f2d 3b088126 3b08c33f     S..;-?.;&..;?..;
24024a94:	3b090578 3b0947d1 3b098a4a 3b09cce4     x..;.G.;J..;...;
24024aa4:	3b0a0f9d 3b0a5277 3b0a9572 3b0ad88d     ...;wR.;r..;...;
24024ab4:	3b0b1bc8 3b0b5f24 3b0ba2a0 3b0be63d     ...;$_.;...;=..;
24024ac4:	3b0c29fb 3b0c6dda 3b0cb1d9 3b0cf5fa     .).;.m.;...;...;
24024ad4:	3b0d3a3b 3b0d7e9e 3b0dc322 3b0e07c6     ;:.;.~.;"..;...;
24024ae4:	3b0e4c8c 3b0e9174 3b0ed67d 3b0f1ba7     .L.;t..;}..;...;
24024af4:	3b0f60f2 3b0fa65f 3b0febee 3b10319f     .`.;_..;...;.1.;
24024b04:	3b107771 3b10bd65 3b11037b 3b1149b3     qw.;e..;{..;.I.;
24024b14:	3b11900d 3b11d689 3b121d27 3b1263e7     ...;...;'..;.c.;
24024b24:	3b12aac9 3b12f1ce 3b1338f5 3b13803f     ...;...;.8.;?..;
24024b34:	3b13c7ab 3b140f3a 3b1456ec 3b149ec0     ...;:..;.V.;...;
24024b44:	3b14e6b7 3b152ed0 3b15770d 3b15bf6d     ...;...;.w.;m..;
24024b54:	3b1607ef 3b165095 3b16995e 3b16e24a     ...;.P.;^..;J..;
24024b64:	3b172b5a 3b17748d 3b17bde3 3b18075d     Z+.;.t.;...;]..;
24024b74:	3b1850fb 3b189abc 3b18e4a1 3b192ea9     .P.;...;...;...;
24024b84:	3b1978d6 3b19c326 3b1a0d9a 3b1a5833     .x.;&..;...;3X.;
24024b94:	3b1aa2ef 3b1aedd0 3b1b38d5 3b1b83fe     ...;...;.8.;...;
24024ba4:	3b1bcf4c 3b1c1abe 3b1c6655 3b1cb210     L..;...;Uf.;...;
24024bb4:	3b1cfdf0 3b1d49f5 3b1d961e 3b1de26d     ...;.I.;...;m..;
24024bc4:	3b1e2ee0 3b1e7b78 3b1ec836 3b1f1518     ...;x{.;6..;...;
24024bd4:	3b1f6220 3b1faf4d 3b1ffca0 3b204a18      b.;M..;...;.J ;
24024be4:	3b2097b5 3b20e578 3b213361 3b21816f     .. ;x. ;a3!;o.!;
24024bf4:	3b21cfa4 3b221dfe 3b226c7e 3b22bb24     ..!;..";~l";$.";
24024c04:	3b2309f0 3b2358e2 3b23a7fb 3b23f739     ..#;.X#;..#;9.#;
24024c14:	3b24469f 3b24962a 3b24e5dc 3b2535b5     .F$;*.$;..$;.5%;
24024c24:	3b2585b4 3b25d5db 3b262628 3b26769b     ..%;..%;(&&;.v&;
24024c34:	3b26c736 3b2717f8 3b2768e1 3b27b9f1     6.&;..';.h';..';
24024c44:	3b280b28 3b285c87 3b28ae0d 3b28ffbb     (.(;.\(;..(;..(;
24024c54:	3b295190 3b29a38c 3b29f5b1 3b2a47fd     .Q);..);..);.G*;
24024c64:	3b2a9a71 3b2aed0d 3b2b3fd1 3b2b92bd     q.*;..*;.?+;..+;
24024c74:	3b2be5d1 3b2c390e 3b2c8c72 3b2ce000     ..+;.9,;r.,;..,;
24024c84:	3b2d33b5 3b2d8793 3b2ddb9a 3b2e2fc9     .3-;..-;..-;./.;
24024c94:	3b2e8422 3b2ed8a3 3b2f2d4c 3b2f821f     "..;...;L-/;../;
24024ca4:	3b2fd71b 3b302c41 3b30818f 3b30d707     ../;A,0;..0;..0;
24024cb4:	3b312ca8 3b318272 3b31d866 3b322e84     .,1;r.1;f.1;..2;
24024cc4:	3b3284cb 3b32db3d 3b3331d8 3b33889d     ..2;=.2;.13;..3;
24024cd4:	3b33df8c 3b3436a5 3b348de8 3b34e556     ..3;.64;..4;V.4;
24024ce4:	3b353ced 3b3594b0 3b35ec9c 3b3644b4     .<5;..5;..5;.D6;
24024cf4:	3b369cf6 3b36f562 3b374dfa 3b37a6bc     ..6;b.6;.M7;..7;
24024d04:	3b37ffaa 3b3858c2 3b38b206 3b390b75     ..7;.X8;..8;u.9;
24024d14:	3b39650f 3b39bed5 3b3a18c6 3b3a72e2     .e9;..9;..:;.r:;
24024d24:	3b3acd2a 3b3b279e 3b3b823e 3b3bdd0a     *.:;.';;>.;;..;;
24024d34:	3b3c3801 3b3c9325 3b3cee74 3b3d49f0     .8<;%.<;t.<;.I=;
24024d44:	3b3da599 3b3e016d 3b3e5d6e 3b3eb99c     ..=;m.>;n]>;..>;
24024d54:	3b3f15f6 3b3f727d 3b3fcf31 3b402c12     ..?;}r?;1.?;.,@;
24024d64:	3b408920 3b40e65a 3b4143c2 3b41a157      .@;Z.@;.CA;W.A;
24024d74:	3b41ff1a 3b425d0a 3b42bb27 3b431972     ..A;.]B;'.B;r.C;
24024d84:	3b4377ea 3b43d691 3b443565 3b449467     .wC;..C;e5D;g.D;
24024d94:	3b44f397 3b4552f5 3b45b281 3b46123c     ..D;.RE;..E;<.F;
24024da4:	3b467225 3b46d23c 3b473282 3b4792f7     %rF;<.F;.2G;..G;
24024db4:	3b47f39a 3b48546c 3b48b56d 3b49169d     ..G;lTH;m.H;..I;
24024dc4:	3b4977fc 3b49d98a 3b4a3b47 3b4a9d34     .wI;..I;G;J;4.J;
24024dd4:	3b4aff50 3b4b619b 3b4bc416 3b4c26c1     P.J;.aK;..K;.&L;
24024de4:	3b4c899c 3b4ceca6 3b4d4fe1 3b4db34b     ..L;..L;.OM;K.M;
24024df4:	3b4e16e6 3b4e7ab1 3b4edeac 3b4f42d8     ..N;.zN;..N;.BO;
24024e04:	3b4fa734 3b500bc1 3b50707e 3b50d56c     4.O;..P;~pP;l.P;
24024e14:	3b513a8b 3b519fdb 3b52055c 3b526b0f     .:Q;..Q;\.R;.kR;
24024e24:	3b52d0f2 3b533707 3b539d4d 3b5403c5     ..R;.7S;M.S;..T;
24024e34:	3b546a6e 3b54d14a 3b553857 3b559f95     njT;J.T;W8U;..U;
24024e44:	3b560706 3b566ea9 3b56d67e 3b573e85     ..V;.nV;~.V;.>W;
24024e54:	3b57a6bf 3b580f2b 3b5877ca 3b58e09c     ..W;+.X;.wX;..X;
24024e64:	3b5949a0 3b59b2d7 3b5a1c41 3b5a85de     .IY;..Y;A.Z;..Z;
24024e74:	3b5aefae 3b5b59b1 3b5bc3e8 3b5c2e52     ..Z;.Y[;..[;R.\;
24024e84:	3b5c98f0 3b5d03c1 3b5d6ec6 3b5dd9ff     ..\;..];.n];..];
24024e94:	3b5e456c 3b5eb10d 3b5f1ce2 3b5f88eb     lE^;..^;.._;.._;
24024ea4:	3b5ff528 3b60619a 3b60ce41 3b613b1c     (._;.a`;A.`;.;a;
24024eb4:	3b61a82b 3b621570 3b6282e9 3b62f098     +.a;p.b;..b;..b;
24024ec4:	3b635e7b 3b63cc94 3b643ae2 3b64a966     {^c;..c;.:d;f.d;
24024ed4:	3b65181f 3b65870d 3b65f631 3b66658c     ..e;..e;1.e;.ef;
24024ee4:	3b66d51c 3b6744e2 3b67b4de 3b682510     ..f;.Dg;..g;.%h;
24024ef4:	3b689579 3b690618 3b6976ee 3b69e7fa     y.h;..i;.vi;..i;
24024f04:	3b6a593e 3b6acab8 3b6b3c68 3b6bae50     >Yj;..j;h<k;P.k;
24024f14:	3b6c2070 3b6c92c6 3b6d0554 3b6d7819     p l;..l;T.m;.xm;
24024f24:	3b6deb16 3b6e5e4a 3b6ed1b6 3b6f455a     ..m;J^n;..n;ZEo;
24024f34:	3b6fb937 3b702d4b 3b70a197 3b71161c     7.o;K-p;..p;..q;
24024f44:	3b718ad9 3b71ffcf 3b7274fd 3b72ea64     ..q;..q;.tr;d.r;
24024f54:	3b736004 3b73d5dd 3b744bef 3b74c23a     .`s;..s;.Kt;:.t;
24024f64:	3b7538bf 3b75af7d 3b762674 3b769da5     .8u;}.u;t&v;..v;
24024f74:	3b77150f 3b778cb4 3b780492 3b787cab     ..w;..w;..x;.|x;
24024f84:	3b78f4fd 3b796d8a 3b79e651 3b7a5f53     ..x;.my;Q.y;S_z;
24024f94:	3b7ad88f 3b7b5206 3b7bcbb8 3b7c45a5     ..z;.R{;..{;.E|;
24024fa4:	3b7cbfcd 3b7d3a30 3b7db4ce 3b7e2fa8     ..|;0:};..};./~;
24024fb4:	3b7eaabd 3b7f260d 3b7fa19a 3b800eb1     ..~;.&.;...;...;
24024fc4:	3b804cb3 3b808ad3 3b80c911 3b81076e     .L.;...;...;n..;
24024fd4:	3b8145e8 3b818481 3b81c338 3b82020d     .E.;...;8..;...;
24024fe4:	3b824101 3b828014 3b82bf45 3b82fe94     .A.;...;E..;...;
24024ff4:	3b833e02 3b837d8f 3b83bd3b 3b83fd05     .>.;.}.;;..;...;
24025004:	3b843cef 3b847cf7 3b84bd1e 3b84fd65     .<.;.|.;...;e..;
24025014:	3b853dca 3b857e4f 3b85bef3 3b85ffb6     .=.;O~.;...;...;
24025024:	3b864099 3b86819b 3b86c2bc 3b8703fd     .@.;...;...;...;
24025034:	3b87455e 3b8786de 3b87c87e 3b880a3e     ^E.;...;~..;>..;
24025044:	3b884c1e 3b888e1d 3b88d03d 3b89127c     .L.;...;=..;|..;
24025054:	3b8954dc 3b89975c 3b89d9fb 3b8a1cbc     .T.;\..;...;...;
24025064:	3b8a5f9c 3b8aa29d 3b8ae5be 3b8b2900     ._.;...;...;.).;
24025074:	3b8b6c63 3b8bafe6 3b8bf389 3b8c374e     cl.;...;...;N7.;
24025084:	3b8c7b33 3b8cbf39 3b8d0361 3b8d47a9     3{.;9..;a..;.G.;
24025094:	3b8d8c12 3b8dd09c 3b8e1548 3b8e5a14     ...;...;H..;.Z.;
240250a4:	3b8e9f02 3b8ee412 3b8f2943 3b8f6e95     ...;...;C).;.n.;
240250b4:	3b8fb409 3b8ff99f 3b903f56 3b90852f     ...;...;V?.;/..;
240250c4:	3b90cb2a 3b911147 3b915785 3b919de6     *..;G..;.W.;...;
240250d4:	3b91e469 3b922b0e 3b9271d5 3b92b8bf     i..;.+.;.q.;...;
240250e4:	3b92ffca 3b9346f8 3b938e49 3b93d5bc     ...;.F.;I..;...;
240250f4:	3b941d52 3b94650b 3b94ace6 3b94f4e4     R..;.e.;...;...;
24025104:	3b953d04 3b958548 3b95cdaf 3b961639     .=.;H..;...;9..;
24025114:	3b965ee6 3b96a7b6 3b96f0a9 3b9739c0     .^.;...;...;.9.;
24025124:	3b9782fa 3b97cc58 3b9815d9 3b985f7d     ...;X..;...;}_.;
24025134:	3b98a946 3b98f332 3b993d42 3b998775     F..;2..;B=.;u..;
24025144:	3b99d1cd 3b9a1c49 3b9a66e8 3b9ab1ac     ...;I..;.f.;...;
24025154:	3b9afc94 3b9b47a1 3b9b92d1 3b9bde26     ...;.G.;...;&..;
24025164:	3b9c29a0 3b9c753e 3b9cc101 3b9d0ce8     .).;>u.;...;...;
24025174:	3b9d58f4 3b9da525 3b9df17b 3b9e3df6     .X.;%..;{..;.=.;
24025184:	3b9e8a96 3b9ed75b 3b9f2445 3b9f7155     ...;[..;E$.;Uq.;
24025194:	3b9fbe89 3ba00be3 3ba05963 3ba0a708     ...;...;cY.;...;
240251a4:	3ba0f4d3 3ba142c3 3ba190d9 3ba1df15     ...;.B.;...;...;
240251b4:	3ba22d77 3ba27bff 3ba2caad 3ba31980     w-.;.{.;...;...;
240251c4:	3ba3687b 3ba3b79b 3ba406e1 3ba4564e     {h.;...;...;NV.;
240251d4:	3ba4a5e2 3ba4f59c 3ba5457d 3ba59584     ...;...;}E.;...;
240251e4:	3ba5e5b2 3ba63607 3ba68683 3ba6d725     ...;.6.;...;%..;
240251f4:	3ba727ef 3ba778e0 3ba7c9f8 3ba81b37     .'.;.x.;...;7..;
24025204:	3ba86c9e 3ba8be2c 3ba90fe2 3ba961bf     .l.;,..;...;.a.;
24025214:	3ba9b3c4 3baa05f1 3baa5845 3baaaac1     ...;...;EX.;...;
24025224:	3baafd65 3bab5031 3baba326 3babf642     e..;1P.;&..;B..;
24025234:	3bac4987 3bac9cf4 3bacf089 3bad4447     .I.;...;...;GD.;
24025244:	3bad982e 3badec3d 3bae4074 3bae94d5     ...;=..;t@.;...;
24025254:	3baee95e 3baf3e11 3baf92ec 3bafe7f1     ^..;.>.;...;...;
24025264:	3bb03d1e 3bb09275 3bb0e7f5 3bb13d9f     .=.;u..;...;.=.;
24025274:	3bb19372 3bb1e96f 3bb23f95 3bb295e5     r..;o..;.?.;...;
24025284:	3bb2ec5f 3bb34302 3bb399d0 3bb3f0c8     _..;.C.;...;...;
24025294:	3bb447e9 3bb49f35 3bb4f6ac 3bb54e4c     .G.;5..;...;LN.;
240252a4:	3bb5a617 3bb5fe0d 3bb6562d 3bb6ae78     ...;...;-V.;x..;
240252b4:	3bb706ed 3bb75f8e 3bb7b859 3bb8114f     ...;._.;Y..;O..;
240252c4:	3bb86a71 3bb8c3bd 3bb91d35 3bb976d8     qj.;...;5..;.v.;
240252d4:	3bb9d0a7 3bba2aa1 3bba84c6 3bbadf17     ...;.*.;...;...;
240252e4:	3bbb3994 3bbb943d 3bbbef12 3bbc4a13     .9.;=..;...;.J.;
240252f4:	3bbca53f 3bbd0098 3bbd5c1d 3bbdb7cf     ?..;...;.\.;...;
24025304:	3bbe13ad 3bbe6fb7 3bbecbee 3bbf2851     ...;.o.;...;Q(.;
24025314:	3bbf84e2 3bbfe19f 3bc03e89 3bc09ba0     ...;...;.>.;...;
24025324:	3bc0f8e4 3bc15655 3bc1b3f4 3bc211c0     ...;UV.;...;...;
24025334:	3bc26fb9 3bc2cde0 3bc32c34 3bc38ab6     .o.;...;4,.;...;
24025344:	3bc3e966 3bc44844 3bc4a74f 3bc50689     f..;DH.;O..;...;
24025354:	3bc565f1 3bc5c587 3bc6254b 3bc6853d     .e.;...;K%.;=..;
24025364:	3bc6e55f 3bc745ae 3bc7a62c 3bc806d9     _..;.E.;,..;...;
24025374:	3bc867b5 3bc8c8c0 3bc929fa 3bc98b62     .g.;...;.).;b..;
24025384:	3bc9ecfa 3bca4ec2 3bcab0b8 3bcb12de     ...;.N.;...;...;
24025394:	3bcb7534 3bcbd7b9 3bcc3a6e 3bcc9d52     4u.;...;n:.;R..;
240253a4:	3bcd0067 3bcd63ac 3bcdc720 3bce2ac5     g..;.c.; ..;.*.;
240253b4:	3bce8e9a 3bcef29f 3bcf56d5 3bcfbb3b     ...;...;.V.;;..;
240253c4:	3bd01fd2 3bd0849a 3bd0e992 3bd14ebc     ...;...;...;.N.;
240253d4:	3bd1b416 3bd219a2 3bd27f5e 3bd2e54c     ...;...;^..;L..;
240253e4:	3bd34b6b 3bd3b1bc 3bd4183e 3bd47ef2     kK.;...;>..;.~.;
240253f4:	3bd4e5d8 3bd54cef 3bd5b438 3bd61bb4     ...;.L.;8..;...;
24025404:	3bd68361 3bd6eb41 3bd75353 3bd7bb97     a..;A..;SS.;...;
24025414:	3bd8240e 3bd88cb8 3bd8f594 3bd95ea3     .$.;...;...;.^.;
24025424:	3bd9c7e5 3bda3159 3bda9b01 3bdb04dc     ...;Y1.;...;...;
24025434:	3bdb6eea 3bdbd92c 3bdc43a1 3bdcae4a     .n.;,..;.C.;J..;
24025444:	3bdd1926 3bdd8436 3bddef7a 3bde5af2     &..;6..;z..;.Z.;
24025454:	3bdec69e 3bdf327e 3bdf9e92 3be00adb     ...;~2.;...;...;
24025464:	3be07758 3be0e409 3be150ef 3be1be0a     Xw.;...;.P.;...;
24025474:	3be22b5a 3be298df 3be30698 3be37487     Z+.;...;...;.t.;
24025484:	3be3e2ab 3be45105 3be4bf94 3be52e58     ...;.Q.;...;X..;
24025494:	3be59d52 3be60c82 3be67be8 3be6eb83     R..;...;.{.;...;
240254a4:	3be75b55 3be7cb5d 3be83b9b 3be8ac0f     U[.;]..;.;.;...;
240254b4:	3be91cba 3be98d9c 3be9feb4 3bea7002     ...;...;...;.p.;
240254c4:	3beae188 3beb5345 3bebc539 3bec3764     ...;ES.;9..;d7.;
240254d4:	3beca9c6 3bed1c60 3bed8f31 3bee0239     ...;`..;1..;9..;
240254e4:	3bee757a 3beee8f2 3bef5ca2 3befd08b     zu.;...;.\.;...;
240254f4:	3bf044ab 3bf0b903 3bf12d94 3bf1a25e     .D.;...;.-.;^..;
24025504:	3bf21760 3bf28c9a 3bf3020e 3bf377ba     `..;...;...;.w.;
24025514:	3bf3ed9f 3bf463bd 3bf4da15 3bf550a6     ...;.c.;...;.P.;
24025524:	3bf5c770 3bf63e74 3bf6b5b1 3bf72d28     p..;t>.;...;(-.;
24025534:	3bf7a4d9 3bf81cc4 3bf894e9 3bf90d48     ...;...;...;H..;
24025544:	3bf985e2 3bf9feb6 3bfa77c4 3bfaf10d     ...;...;.w.;...;
24025554:	3bfb6a91 3bfbe450 3bfc5e49 3bfcd87e     .j.;P..;I^.;~..;
24025564:	3bfd52ee 3bfdcd99 3bfe487f 3bfec3a2     .R.;...;.H.;...;
24025574:	3bff3eff 3bffba99 3c001b37 3c005940     .>.;...;7..<@Y.<
24025584:	3c009766 3c00d5ab 3c01140e 3c01528f     f..<...<...<.R.<
24025594:	3c01912e 3c01cfec 3c020ec8 3c024dc3     ...<...<...<.M.<
240255a4:	3c028cdc 3c02cc14 3c030b6a 3c034adf     ...<...<j..<.J.<
240255b4:	3c038a72 3c03ca25 3c0409f6 3c0449e6     r..<%..<...<.I.<
240255c4:	3c0489f5 3c04ca23 3c050a71 3c054add     ...<#..<q..<.J.<
240255d4:	3c058b69 3c05cc14 3c060cde 3c064dc7     i..<...<...<.M.<
240255e4:	3c068ed0 3c06cff9 3c071141 3c0752a8     ...<...<A..<.R.<
240255f4:	3c079430 3c07d5d7 3c08179d 3c085984     0..<...<...<.Y.<
24025604:	3c089b8b 3c08ddb1 3c091ff8 3c09625f     ...<...<...<_b.<
24025614:	3c09a4e6 3c09e78d 3c0a2a54 3c0a6d3c     ...<...<T*.<<m.<
24025624:	3c0ab044 3c0af36c 3c0b36b5 3c0b7a1f     D..<l..<.6.<.z.<
24025634:	3c0bbda9 3c0c0154 3c0c4520 3c0c890d     ...<T..< E.<...<
24025644:	3c0ccd1a 3c0d1149 3c0d5598 3c0d9a09     ...<I..<.U.<...<
24025654:	3c0dde9b 3c0e234e 3c0e6822 3c0ead17     ...<N#.<"h.<...<
24025664:	3c0ef22e 3c0f3767 3c0f7cc1 3c0fc23c     ...<g7.<.|.<<..<
24025674:	3c1007d9 3c104d98 3c109379 3c10d97b     ...<.M.<y..<{..<
24025684:	3c111fa0 3c1165e6 3c11ac4f 3c11f2d9     ...<.e.<O..<...<
24025694:	3c123986 3c128055 3c12c746 3c130e59     .9.<U..<F..<Y..<
240256a4:	3c13558f 3c139ce8 3c13e463 3c142c00     .U.<...<c..<.,.<
240256b4:	3c1473c1 3c14bba4 3c1503aa 3c154bd2     .s.<...<...<.K.<
240256c4:	3c15941e 3c15dc8d 3c16251f 3c166dd3     ...<...<.%.<.m.<
240256d4:	3c16b6ac 3c16ffa7 3c1748c6 3c179208     ...<...<.H.<...<
240256e4:	3c17db6e 3c1824f7 3c186ea4 3c18b874     n..<.$.<.n.<t..<
240256f4:	3c190268 3c194c80 3c1996bc 3c19e11c     h..<.L.<...<...<
24025704:	3c1a2ba0 3c1a7648 3c1ac114 3c1b0c05     .+.<Hv.<...<...<
24025714:	3c1b5719 3c1ba252 3c1bedb0 3c1c3932     .W.<R..<...<29.<
24025724:	3c1c84d8 3c1cd0a4 3c1d1c93 3c1d68a8     ...<...<...<.h.<
24025734:	3c1db4e2 3c1e0140 3c1e4dc3 3c1e9a6c     ...<@..<.M.<l..<
24025744:	3c1ee739 3c1f342c 3c1f8144 3c1fce82     9..<,4.<D..<...<
24025754:	3c201be4 3c20696d 3c20b71b 3c2104ee     .. <mi <.. <..!<
24025764:	3c2152e7 3c21a106 3c21ef4b 3c223db5     .R!<..!<K.!<.="<
24025774:	3c228c46 3c22dafd 3c2329d9 3c2378dc     F."<.."<.)#<.x#<
24025784:	3c23c806 3c241755 3c2466cb 3c24b668     ..#<U.$<.f$<h.$<
24025794:	3c25062b 3c255615 3c25a625 3c25f65c     +.%<.V%<%.%<\.%<
240257a4:	3c2646ba 3c26973f 3c26e7eb 3c2738be     .F&<?.&<..&<.8'<
240257b4:	3c2789b8 3c27dad9 3c282c22 3c287d92     ..'<..'<",(<.}(<
240257c4:	3c28cf29 3c2920e8 3c2972cf 3c29c4dd     ).(<. )<.r)<..)<
240257d4:	3c2a1713 3c2a6971 3c2abbf7 3c2b0ea4     ..*<qi*<..*<..+<
240257e4:	3c2b617a 3c2bb478 3c2c079e 3c2c5aec     za+<x.+<..,<.Z,<
240257f4:	3c2cae63 3c2d0202 3c2d55c9 3c2da9b9     c.,<..-<.U-<..-<
24025804:	3c2dfdd2 3c2e5214 3c2ea67e 3c2efb11     ..-<.R.<~..<...<
24025814:	3c2f4fcd 3c2fa4b3 3c2ff9c1 3c304ef8     .O/<../<../<.N0<
24025824:	3c30a459 3c30f9e3 3c314f97 3c31a574     Y.0<..0<.O1<t.1<
24025834:	3c31fb7b 3c3251ab 3c32a805 3c32fe89     {.1<.Q2<..2<..2<
24025844:	3c335537 3c33ac0e 3c340310 3c345a3c     7U3<..3<..4<<Z4<
24025854:	3c34b192 3c350913 3c3560be 3c35b893     ..4<..5<.`5<..5<
24025864:	3c361093 3c3668bd 3c36c113 3c371993     ..6<.h6<..6<..7<
24025874:	3c37723e 3c37cb13 3c382414 3c387d40     >r7<..7<.$8<@}8<
24025884:	3c38d697 3c39301a 3c3989c7 3c39e3a0     ..8<.09<..9<..9<
24025894:	3c3a3da5 3c3a97d5 3c3af231 3c3b4cb9     .=:<..:<1.:<.L;<
240258a4:	3c3ba76d 3c3c024c 3c3c5d58 3c3cb88f     m.;<L.<<X]<<..<<
240258b4:	3c3d13f3 3c3d6f83 3c3dcb40 3c3e2729     ..=<.o=<@.=<)'><
240258c4:	3c3e833e 3c3edf80 3c3f3bef 3c3f988a     >.><..><.;?<..?<
240258d4:	3c3ff552 3c405247 3c40af6a 3c410cb9     R.?<GR@<j.@<..A<
240258e4:	3c416a36 3c41c7df 3c4225b7 3c4283bb     6jA<..A<.%B<..B<
240258f4:	3c42e1ed 3c43404d 3c439edb 3c43fd96     ..B<M@C<..C<..C<
24025904:	3c445c7f 3c44bb96 3c451adc 3c457a4f     .\D<..D<..E<OzE<
24025914:	3c45d9f1 3c4639c0 3c4699bf 3c46f9ec     ..E<.9F<..F<..F<
24025924:	3c475a47 3c47bad1 3c481b8a 3c487c72     GZG<..G<..H<r|H<
24025934:	3c48dd88 3c493ece 3c49a043 3c4a01e7     ..H<.>I<C.I<..J<
24025944:	3c4a63ba 3c4ac5bd 3c4b27ef 3c4b8a50     .cJ<..J<.'K<P.K<
24025954:	3c4bece2 3c4c4fa3 3c4cb294 3c4d15b4     ..K<.OL<..L<..M<
24025964:	3c4d7905 3c4ddc86 3c4e4037 3c4ea419     .yM<..M<7@N<..N<
24025974:	3c4f082b 3c4f6c6d 3c4fd0e0 3c503583     +.O<mlO<..O<.5P<
24025984:	3c509a58 3c50ff5d 3c516493 3c51c9fa     X.P<].P<.dQ<..Q<
24025994:	3c522f92 3c52955b 3c52fb56 3c536182     ./R<[.R<V.R<.aS<
240259a4:	3c53c7e0 3c542e6f 3c54952f 3c54fc22     ..S<o.T</.T<".T<
240259b4:	3c556347 3c55ca9d 3c563225 3c5699e0     GcU<..U<%2V<..V<
240259c4:	3c5701cd 3c5769ec 3c57d23e 3c583ac2     ..W<.iW<>.W<.:X<
240259d4:	3c58a379 3c590c62 3c59757f 3c59dece     y.X<b.Y<.uY<..Y<
240259e4:	3c5a4850 3c5ab206 3c5b1bee 3c5b860a     PHZ<..Z<..[<..[<
240259f4:	3c5bf059 3c5c5adc 3c5cc592 3c5d307c     Y.[<.Z\<..\<|0]<
24025a04:	3c5d9b9a 3c5e06ec 3c5e7272 3c5ede2b     ..]<..^<rr^<+.^<
24025a14:	3c5f4a19 3c5fb63c 3c602292 3c608f1d     .J_<<._<."`<..`<
24025a24:	3c60fbdd 3c6168d2 3c61d5fb 3c624359     ..`<.ha<..a<YCb<
24025a34:	3c62b0ec 3c631eb4 3c638cb1 3c63fae4     ..b<..c<..c<..c<
24025a44:	3c64694c 3c64d7e9 3c6546bc 3c65b5c5     Lid<..d<.Fe<..e<
24025a54:	3c662503 3c669477 3c670422 3c677402     .%f<w.f<".g<.tg<
24025a64:	3c67e419 3c685466 3c68c4e9 3c6935a3     ..g<fTh<..h<.5i<
24025a74:	3c69a693 3c6a17ba 3c6a8918 3c6afaad     ..i<..j<..j<..j<
24025a84:	3c6b6c79 3c6bde7c 3c6c50b6 3c6cc328     ylk<|.k<.Pl<(.l<
24025a94:	3c6d35d1 3c6da8b1 3c6e1bca 3c6e8f1a     .5m<..m<..n<..n<
24025aa4:	3c6f02a1 3c6f7661 3c6fea59 3c705e89     ..o<avo<Y.o<.^p<
24025ab4:	3c70d2f1 3c714792 3c71bc6b 3c72317d     ..p<.Gq<k.q<}1r<
24025ac4:	3c72a6c8 3c731c4b 3c739207 3c7407fd     ..r<K.s<..s<..t<
24025ad4:	3c747e2b 3c74f493 3c756b34 3c75e20e     +~t<..t<4ku<..u<
24025ae4:	3c765922 3c76d070 3c7747f8 3c77bfb9     "Yv<p.v<.Gw<..w<
24025af4:	3c7837b5 3c78afea 3c79285a 3c79a104     .7x<..x<Z(y<..y<
24025b04:	3c7a19e9 3c7a9308 3c7b0c62 3c7b85f7     ..z<..z<b.{<..{<
24025b14:	3c7bffc6 3c7c79d1 3c7cf417 3c7d6e98     ..{<.y|<..|<.n}<
24025b24:	3c7de954 3c7e644c 3c7edf7f 3c7f5aee     T.}<Ld~<..~<.Z.<
24025b34:	3c7fd699 3c802940 3c806751 3c80a581     ...<@).<Qg.<...<
24025b44:	3c80e3ce 3c81223a 3c8160c4 3c819f6c     ...<:".<.`.<l..<
24025b54:	3c81de33 3c821d18 3c825c1b 3c829b3e     3..<...<.\.<>..<
24025b64:	3c82da7e 3c8319dd 3c83595b 3c8398f8     ~..<...<[Y.<...<
24025b74:	3c83d8b4 3c84188e 3c845888 3c8498a0     ...<...<.X.<...<
24025b84:	3c84d8d7 3c85192e 3c8559a4 3c859a39     ...<...<.Y.<9..<
24025b94:	3c85daed 3c861bc0 3c865cb3 3c869dc6     ...<...<.\.<...<
24025ba4:	3c86def8 3c872049 3c8761ba 3c87a34b     ...<I .<.a.<K..<
24025bb4:	3c87e4fc 3c8826cc 3c8868bd 3c88aacd     ...<.&.<.h.<...<
24025bc4:	3c88ecfe 3c892f4e 3c8971be 3c89b44f     ...<N/.<.q.<O..<
24025bd4:	3c89f700 3c8a39d1 3c8a7cc3 3c8abfd5     ...<.9.<.|.<...<
24025be4:	3c8b0308 3c8b465b 3c8b89cf 3c8bcd63     ...<[F.<...<c..<
24025bf4:	3c8c1118 3c8c54ee 3c8c98e5 3c8cdcfd     ...<.T.<...<...<
24025c04:	3c8d2136 3c8d658f 3c8daa0a 3c8deea7     6!.<.e.<...<...<
24025c14:	3c8e3364 3c8e7843 3c8ebd43 3c8f0264     d3.<Cx.<C..<d..<
24025c24:	3c8f47a7 3c8f8d0c 3c8fd292 3c901839     .G.<...<...<9..<
24025c34:	3c905e03 3c90a3ee 3c90e9fc 3c91302b     .^.<...<...<+0.<
24025c44:	3c91767c 3c91bcef 3c920385 3c924a3c     |v.<...<...<<J.<
24025c54:	3c929116 3c92d813 3c931f31 3c936672     ...<...<1..<rf.<
24025c64:	3c93add6 3c93f55c 3c943d05 3c9484d0     ...<\..<.=.<...<
24025c74:	3c94ccbf 3c9514d0 3c955d04 3c95a55b     ...<...<.].<[..<
24025c84:	3c95edd5 3c963673 3c967f33 3c96c817     ...<s6.<3..<...<
24025c94:	3c97111e 3c975a48 3c97a396 3c97ed07     ...<HZ.<...<...<
24025ca4:	3c98369c 3c988055 3c98ca31 3c991431     .6.<U..<1..<1..<
24025cb4:	3c995e55 3c99a89d 3c99f309 3c9a3d99     U^.<...<...<.=.<
24025cc4:	3c9a884d 3c9ad326 3c9b1e22 3c9b6943     M..<&..<"..<Ci.<
24025cd4:	3c9bb488 3c9bfff2 3c9c4b81 3c9c9734     ...<...<.K.<4..<
24025ce4:	3c9ce30b 3c9d2f08 3c9d7b29 3c9dc76f     ...<./.<){.<o..<
24025cf4:	3c9e13da 3c9e606a 3c9ead1f 3c9ef9f9     ...<j`.<...<...<
24025d04:	3c9f46f9 3c9f941e 3c9fe168 3ca02ed8     .F.<...<h..<...<
24025d14:	3ca07c6d 3ca0ca28 3ca11809 3ca1660f     m|.<(..<...<.f.<
24025d24:	3ca1b43b 3ca2028d 3ca25105 3ca29fa3     ;..<...<.Q.<...<
24025d34:	3ca2ee67 3ca33d51 3ca38c61 3ca3db98     g..<Q=.<a..<...<
24025d44:	3ca42af5 3ca47a79 3ca4ca23 3ca519f4     .*.<yz.<#..<...<
24025d54:	3ca569eb 3ca5ba09 3ca60a4e 3ca65aba     .i.<...<N..<.Z.<
24025d64:	3ca6ab4d 3ca6fc07 3ca74ce8 3ca79df0     M..<...<.L.<...<
24025d74:	3ca7ef20 3ca84077 3ca891f5 3ca8e39b      ..<w@.<...<...<
24025d84:	3ca93568 3ca9875d 3ca9d97a 3caa2bbe     h5.<]..<z..<.+.<
24025d94:	3caa7e2b 3caad0bf 3cab237b 3cab7660     +~.<...<{#.<`v.<
24025da4:	3cabc96c 3cac1ca1 3cac6ffe 3cacc384     l..<...<.o.<...<
24025db4:	3cad1732 3cad6b08 3cadbf08 3cae1330     2..<.k.<...<0..<
24025dc4:	3cae6780 3caebbfa 3caf109d 3caf6568     .g.<...<...<he.<
24025dd4:	3cafba5d 3cb00f7b 3cb064c2 3cb0ba32     ]..<{..<.d.<2..<
24025de4:	3cb10fcc 3cb1658f 3cb1bb7c 3cb21193     ...<.e.<|..<...<
24025df4:	3cb267d3 3cb2be3d 3cb314d1 3cb36b8f     .g.<=..<...<.k.<
24025e04:	3cb3c277 3cb41989 3cb470c5 3cb4c82c     w..<...<.p.<,..<
24025e14:	3cb51fbc 3cb57778 3cb5cf5e 3cb6276e     ...<xw.<^..<n'.<
24025e24:	3cb67fa9 3cb6d80f 3cb730a0 3cb7895c     ...<...<.0.<\..<
24025e34:	3cb7e242 3cb83b54 3cb89491 3cb8edf9     B..<T;.<...<...<
24025e44:	3cb9478d 3cb9a14c 3cb9fb37 3cba554d     .G.<L..<7..<MU.<
24025e54:	3cbaaf8e 3cbb09fc 3cbb6495 3cbbbf5a     ...<...<.d.<Z..<
24025e64:	3cbc1a4c 3cbc7569 3cbcd0b2 3cbd2c28     L..<iu.<...<(,.<
24025e74:	3cbd87ca 3cbde399 3cbe3f94 3cbe9bbb     ...<...<.?.<...<
24025e84:	3cbef80f 3cbf5490 3cbfb13e 3cc00e19     ...<.T.<>..<...<
24025e94:	3cc06b21 3cc0c856 3cc125b8 3cc18347     !k.<V..<.%.<G..<
24025ea4:	3cc1e104 3cc23eee 3cc29d06 3cc2fb4b     ...<.>.<...<K..<
24025eb4:	3cc359be 3cc3b85e 3cc4172d 3cc4762a     .Y.<^..<-..<*v.<
24025ec4:	3cc4d554 3cc534ad 3cc59434 3cc5f3e9     T..<.4.<4..<...<
24025ed4:	3cc653cd 3cc6b3df 3cc71420 3cc7748f     .S.<...< ..<.t.<
24025ee4:	3cc7d52d 3cc835fa 3cc896f6 3cc8f821     -..<.5.<...<!..<
24025ef4:	3cc9597b 3cc9bb05 3cca1cbd 3cca7ea5     {Y.<...<...<.~.<
24025f04:	3ccae0bc 3ccb4303 3ccba57a 3ccc0820     ...<.C.<z..< ..<
24025f14:	3ccc6af6 3ccccdfc 3ccd3132 3ccd9499     .j.<...<21.<...<
24025f24:	3ccdf82f 3cce5bf6 3ccebfed 3ccf2414     /..<.[.<...<.$.<
24025f34:	3ccf886c 3ccfecf5 3cd051ae 3cd0b699     l..<...<.Q.<...<
24025f44:	3cd11bb4 3cd18100 3cd1e67d 3cd24c2c     ...<...<}..<,L.<
24025f54:	3cd2b20c 3cd3181d 3cd37e60 3cd3e4d4     ...<...<`~.<...<
24025f64:	3cd44b7a 3cd4b252 3cd5195b 3cd58097     zK.<R..<[..<...<
24025f74:	3cd5e804 3cd64fa4 3cd6b776 3cd71f7b     ...<.O.<v..<{..<
24025f84:	3cd787b1 3cd7f01b 3cd858b7 3cd8c185     ...<...<.X.<...<
24025f94:	3cd92a87 3cd993bb 3cd9fd23 3cda66bd     .*.<...<#..<.f.<
24025fa4:	3cdad08b 3cdb3a8c 3cdba4c1 3cdc0f29     ...<.:.<...<)..<
24025fb4:	3cdc79c4 3cdce493 3cdd4f96 3cddbacd     .y.<...<.O.<...<
24025fc4:	3cde2638 3cde91d7 3cdefdab 3cdf69b2     8&.<...<...<.i.<
24025fd4:	3cdfd5ee 3ce0425e 3ce0af03 3ce11bdd     ...<^B.<...<...<
24025fe4:	3ce188eb 3ce1f62f 3ce263a7 3ce2d154     ...</..<.c.<T..<
24025ff4:	3ce33f37 3ce3ad4f 3ce41b9c 3ce48a1f     7?.<O..<...<...<
24026004:	3ce4f8d7 3ce567c5 3ce5d6e9 3ce64643     ...<.g.<...<CF.<
24026014:	3ce6b5d3 3ce72599 3ce79595 3ce805c7     ...<.%.<...<...<
24026024:	3ce87630 3ce8e6cf 3ce957a5 3ce9c8b2     0v.<...<.W.<...<
24026034:	3cea39f5 3ceaab70 3ceb1d21 3ceb8f0a     .9.<p..<!..<...<
24026044:	3cec012a 3cec7381 3cece60f 3ced58d6     *..<.s.<...<.X.<
24026054:	3cedcbd4 3cee3f09 3ceeb277 3cef261c     ...<.?.<w..<.&.<
24026064:	3cef99fa 3cf00e10 3cf0825e 3cf0f6e4     ...<...<^..<...<
24026074:	3cf16ba4 3cf1e09b 3cf255cc 3cf2cb35     .k.<...<.U.<5..<
24026084:	3cf340d7 3cf3b6b3 3cf42cc7 3cf4a315     .@.<...<.,.<...<
24026094:	3cf5199c 3cf5905c 3cf60757 3cf67e8b     ...<\..<W..<.~.<
240260a4:	3cf6f5f8 3cf76da0 3cf7e582 3cf85d9e     ...<.m.<...<.].<
240260b4:	3cf8d5f4 3cf94e85 3cf9c750 3cfa4055     ...<.N.<P..<U@.<
240260c4:	3cfab996 3cfb3311 3cfbacc7 3cfc26b8     ...<.3.<...<.&.<
240260d4:	3cfca0e4 3cfd1b4c 3cfd95ef 3cfe10cd     ...<L..<...<...<
240260e4:	3cfe8be7 3cff073d 3cff82cf 3cfffe9c     ...<=..<...<...<
240260f4:	3d003d53 3d007b76 3d00b9b7 3d00f816     S=.=v{.=...=...=
24026104:	3d013694 3d017530 3d01b3ea 3d01f2c2     .6.=0u.=...=...=
24026114:	3d0231ba 3d0270cf 3d02b004 3d02ef57     .1.=.p.=...=W..=
24026124:	3d032ec8 3d036e59 3d03ae08 3d03edd6     ...=Yn.=...=...=
24026134:	3d042dc3 3d046dd0 3d04adfb 3d04ee45     .-.=.m.=...=E..=
24026144:	3d052eaf 3d056f38 3d05afe0 3d05f0a8     ...=8o.=...=...=
24026154:	3d06318f 3d067295 3d06b3bb 3d06f501     .1.=.r.=...=...=
24026164:	3d073666 3d0777eb 3d07b990 3d07fb55     f6.=.w.=...=U..=
24026174:	3d083d39 3d087f3e 3d08c163 3d0903a7     9=.=>..=c..=...=
24026184:	3d09460c 3d098891 3d09cb37 3d0a0dfd     .F.=...=7..=...=
24026194:	3d0a50e3 3d0a93e9 3d0ad711 3d0b1a58     .P.=...=...=X..=
240261a4:	3d0b5dc1 3d0ba14a 3d0be4f4 3d0c28be     .].=J..=...=.(.=
240261b4:	3d0c6caa 3d0cb0b7 3d0cf4e4 3d0d3933     .l.=...=...=39.=
240261c4:	3d0d7da3 3d0dc234 3d0e06e6 3d0e4bba     .}.=4..=...=.K.=
240261d4:	3d0e90af 3d0ed5c6 3d0f1afe 3d0f6058     ...=...=...=X`.=
240261e4:	3d0fa5d3 3d0feb70 3d10312f 3d107710     ...=p..=/1.=.w.=
240261f4:	3d10bd13 3d110337 3d11497e 3d118fe7     ...=7..=~I.=...=
24026204:	3d11d672 3d121d1f 3d1263ef 3d12aae1     r..=...=.c.=...=
24026214:	3d12f1f5 3d13392c 3d138085 3d13c802     ...=,9.=...=...=
24026224:	3d140fa0 3d145762 3d149f46 3d14e74e     ...=bW.=F..=N..=
24026234:	3d152f78 3d1577c5 3d15c036 3d1608c9     x/.=.w.=6..=...=
24026244:	3d165180 3d169a5a 3d16e358 3d172c79     .Q.=Z..=X..=y,.=
24026254:	3d1775bd 3d17bf25 3d1808b1 3d185260     .u.=%..=...=`R.=
24026264:	3d189c34 3d18e62b 3d193046 3d197a84     4..=+..=F0.=.z.=
24026274:	3d19c4e7 3d1a0f6e 3d1a5a1a 3d1aa4e9     ...=n..=.Z.=...=
24026284:	3d1aefdd 3d1b3af5 3d1b8632 3d1bd193     ...=.:.=2..=...=
24026294:	3d1c1d19 3d1c68c4 3d1cb493 3d1d0087     ...=.h.=...=...=
240262a4:	3d1d4ca0 3d1d98de 3d1de541 3d1e31c9     .L.=...=A..=.1.=
240262b4:	3d1e7e76 3d1ecb49 3d1f1841 3d1f655e     v~.=I..=A..=^e.=
240262c4:	3d1fb2a0 3d200009 3d204d96 3d209b4a     ...=.. =.M =J. =
240262d4:	3d20e923 3d213722 3d218547 3d21d392     #. ="7!=G.!=..!=
240262e4:	3d222202 3d227099 3d22bf56 3d230e3a     .""=.p"=V."=:.#=
240262f4:	3d235d43 3d23ac74 3d23fbca 3d244b47     C]#=t.#=..#=GK$=
24026304:	3d249aeb 3d24eab5 3d253aa6 3d258abe     ..$=..$=.:%=..%=
24026314:	3d25dafd 3d262b63 3d267bf0 3d26cca4     ..%=c+&=.{&=..&=
24026324:	3d271d7f 3d276e82 3d27bfac 3d2810fd     ..'=.n'=..'=..(=
24026334:	3d286276 3d28b416 3d2905de 3d2957ce     vb(=..(=..)=.W)=
24026344:	3d29a9e6 3d29fc25 3d2a4e8d 3d2aa11c     ..)=%.)=.N*=..*=
24026354:	3d2af3d4 3d2b46b4 3d2b99bc 3d2becec     ..*=.F+=..+=..+=
24026364:	3d2c4045 3d2c93c7 3d2ce771 3d2d3b43     E@,=..,=q.,=C;-=
24026374:	3d2d8f3f 3d2de363 3d2e37b0 3d2e8c26     ?.-=c.-=.7.=&..=
24026384:	3d2ee0c5 3d2f358d 3d2f8a7e 3d2fdf99     ...=.5/=~./=../=
24026394:	3d3034dd 3d308a4b 3d30dfe1 3d3135a2     .40=K.0=..0=.51=
240263a4:	3d318b8c 3d31e1a0 3d3237de 3d328e46     ..1=..1=.72=F.2=
240263b4:	3d32e4d8 3d333b94 3d33927a 3d33e98a     ..2=.;3=z.3=..3=
240263c4:	3d3440c4 3d349829 3d34efb9 3d354773     .@4=).4=..4=sG5=
240263d4:	3d359f58 3d35f767 3d364fa1 3d36a806     X.5=g.5=.O6=..6=
240263e4:	3d370096 3d375951 3d37b238 3d380b49     ..7=QY7=8.7=I.8=
240263f4:	3d386486 3d38bdee 3d391782 3d397141     .d8=..8=..9=Aq9=
24026404:	3d39cb2c 3d3a2542 3d3a7f84 3d3ad9f3     ,.9=B%:=..:=..:=
24026414:	3d3b348d 3d3b8f53 3d3bea46 3d3c4564     .4;=S.;=F.;=dE<=
24026424:	3d3ca0af 3d3cfc26 3d3d57ca 3d3db39a     ..<=&.<=.W==..==
24026434:	3d3e0f97 3d3e6bc1 3d3ec818 3d3f249b     ..>=.k>=..>=.$?=
24026444:	3d3f814c 3d3fde29 3d403b34 3d40986c     L.?=).?=4;@=l.@=
24026454:	3d40f5d1 3d415364 3d41b124 3d420f12     ..@=dSA=$.A=..B=
24026464:	3d426d2d 3d42cb77 3d4329ee 3d438893     -mB=w.B=.)C=..C=
24026474:	3d43e766 3d444667 3d44a597 3d4504f4     f.C=gFD=..D=..E=
24026484:	3d456481 3d45c43b 3d462424 3d46843c     .dE=;.E=$$F=<.F=
24026494:	3d46e483 3d4744f8 3d47a59d 3d480670     ..F=.DG=..G=p.H=
240264a4:	3d486773 3d48c8a4 3d492a05 3d498b96     sgH=..H=.*I=..I=
240264b4:	3d49ed56 3d4a4f45 3d4ab164 3d4b13b3     V.I=EOJ=d.J=..K=
240264c4:	3d4b7632 3d4bd8e0 3d4c3bbf 3d4c9ecd     2vK=..K=.;L=..L=
240264d4:	3d4d020c 3d4d657b 3d4dc91b 3d4e2ceb     ..M={eM=..M=.,N=
240264e4:	3d4e90ec 3d4ef51d 3d4f597f 3d4fbe12     ..N=..N=.YO=..O=
240264f4:	3d5022d6 3d5087cb 3d50ecf1 3d515248     ."P=..P=..P=HRQ=
24026504:	3d51b7d1 3d521d8b 3d528377 3d52e994     ..Q=..R=w.R=..R=
24026514:	3d534fe3 3d53b663 3d541d16 3d5483fb     .OS=c.S=..T=..T=
24026524:	3d54eb11 3d55525a 3d55b9d5 3d562183     ..T=ZRU=..U=.!V=
24026534:	3d568963 3d56f175 3d5759bb 3d57c233     c.V=u.V=.YW=3.W=
24026544:	3d582ade 3d5893bb 3d58fccc 3d596610     .*X=..X=..X=.fY=
24026554:	3d59cf88 3d5a3932 3d5aa311 3d5b0d22     ..Y=29Z=..Z=".[=
24026564:	3d5b7768 3d5be1e1 3d5c4c8e 3d5cb76f     hw[=..[=.L\=o.\=
24026574:	3d5d2284 3d5d8dcd 3d5df94a 3d5e64fc     ."]=..]=J.]=.d^=
24026584:	3d5ed0e2 3d5f3cfd 3d5fa94c 3d6015d0     ..^=.<_=L._=..`=
24026594:	3d608289 3d60ef77 3d615c9a 3d61c9f3     ..`=w.`=.\a=..a=
240265a4:	3d623780 3d62a543 3d63133b 3d638169     .7b=C.b=;.c=i.c=
240265b4:	3d63efcd 3d645e66 3d64cd35 3d653c3a     ..c=f^d=5.d=:<e=
240265c4:	3d65ab76 3d661ae7 3d668a8f 3d66fa6d     v.e=..f=..f=m.f=
240265d4:	3d676a82 3d67dacd 3d684b50 3d68bc09     .jg=..g=PKh=..h=
240265e4:	3d692cf8 3d699e1f 3d6a0f7d 3d6a8113     .,i=..i=}.j=..j=
240265f4:	3d6af2df 3d6b64e3 3d6bd71f 3d6c4992     ..j=.dk=..k=.Il=
24026604:	3d6cbc3e 3d6d2f21 3d6da23c 3d6e158f     >.l=!/m=<.m=..n=
24026614:	3d6e891a 3d6efcde 3d6f70da 3d6fe50f     ..n=..n=.po=..o=
24026624:	3d70597c 3d70ce22 3d714301 3d71b819     |Yp=".p=.Cq=..q=
24026634:	3d722d6a 3d72a2f5 3d7318b8 3d738eb5     j-r=..r=..s=..s=
24026644:	3d7404ec 3d747b5c 3d74f206 3d7568ea     ..t=\{t=..t=.hu=
24026654:	3d75e008 3d76575f 3d76cef2 3d7746be     ..u=_Wv=..v=.Fw=
24026664:	3d77bec5 3d783706 3d78af82 3d792839     ..w=.7x=..x=9(y=
24026674:	3d79a12b 3d7a1a58 3d7a93bf 3d7b0d62     +.y=X.z=..z=b.{=
24026684:	3d7b8741 3d7c015b 3d7c7bb0 3d7cf641     A.{=[.|=.{|=A.|=
24026694:	3d7d710e 3d7dec17 3d7e675c 3d7ee2dd     .q}=..}=\g~=..~=
240266a4:	3d7f5e9a 3d7fda94 3d802b65 3d80699e     .^.=...=e+.=.i.=
240266b4:	3d80a7f6 3d80e66c 3d812501 3d8163b4     ...=l..=.%.=.c.=
240266c4:	3d81a286 3d81e176 3d822086 3d825fb4     ...=v..=. .=._.=
240266d4:	3d829f00 3d82de6c 3d831df7 3d835da0     ...=l..=...=.].=
240266e4:	3d839d69 3d83dd51 3d841d58 3d845d7f     i..=Q..=X..=.].=
240266f4:	3d849dc4 3d84de29 3d851eae 3d855f52     ...=)..=...=R_.=
24026704:	3d85a015 3d85e0f9 3d8621fc 3d86631e     ...=...=.!.=.c.=
24026714:	3d86a461 3d86e5c3 3d872745 3d8768e8     a..=...=E'.=.h.=
24026724:	3d87aaaa 3d87ec8c 3d882e8f 3d8870b2     ...=...=...=.p.=
24026734:	3d88b2f5 3d88f559 3d8937dd 3d897a81     ...=Y..=.7.=.z.=
24026744:	3d89bd46 3d8a002c 3d8a4332 3d8a8659     F..=,..=2C.=Y..=
24026754:	3d8ac9a1 3d8b0d0a 3d8b5094 3d8b943f     ...=...=.P.=?..=
24026764:	3d8bd80a 3d8c1bf7 3d8c6005 3d8ca435     ...=...=.`.=5..=
24026774:	3d8ce886 3d8d2cf8 3d8d718b 3d8db640     ...=.,.=.q.=@..=
24026784:	3d8dfb17 3d8e400f 3d8e852a 3d8eca65     ...=.@.=*..=e..=
24026794:	3d8f0fc3 3d8f5543 3d8f9ae4 3d8fe0a8     ...=CU.=...=...=
240267a4:	3d90268e 3d906c96 3d90b2c0 3d90f90c     .&.=.l.=...=...=
240267b4:	3d913f7b 3d91860d 3d91ccc0 3d921397     {?.=...=...=...=
240267c4:	3d925a90 3d92a1ac 3d92e8ea 3d93304c     .Z.=...=...=L0.=
240267d4:	3d9377d0 3d93bf77 3d940742 3d944f2f     .w.=w..=B..=/O.=
240267e4:	3d949740 3d94df74 3d9527cb 3d957046     @..=t..=.'.=Fp.=
240267f4:	3d95b8e4 3d9601a6 3d964a8b 3d969394     ...=...=.J.=...=
24026804:	3d96dcc1 3d972612 3d976f86 3d97b91f     ...=.&.=.o.=...=
24026814:	3d9802db 3d984cbc 3d9896c0 3d98e0e9     ...=.L.=...=...=
24026824:	3d992b36 3d9975a8 3d99c03e 3d9a0af9     6+.=.u.=>..=...=
24026834:	3d9a55d8 3d9aa0dc 3d9aec04 3d9b3752     .U.=...=...=R7.=
24026844:	3d9b82c4 3d9bce5b 3d9c1a18 3d9c65f9     ...=[..=...=.e.=
24026854:	3d9cb200 3d9cfe2b 3d9d4a7c 3d9d96f3     ...=+..=|J.=...=
24026864:	3d9de38f 3d9e3050 3d9e7d38 3d9eca44     ...=P0.=8}.=D..=
24026874:	3d9f1777 3d9f64cf 3d9fb24d 3d9ffff2     w..=.d.=M..=...=
24026884:	3da04dbc 3da09bac 3da0e9c3 3da13800     .M.=...=...=.8.=
24026894:	3da18663 3da1d4ed 3da2239d 3da27274     c..=...=.#.=tr.=
240268a4:	3da2c171 3da31096 3da35fe1 3da3af52     q..=...=._.=R..=
240268b4:	3da3feeb 3da44eab 3da49e92 3da4eea0     ...=.N.=...=...=
240268c4:	3da53ed6 3da58f32 3da5dfb7 3da63062     .>.=2..=...=b0.=
240268d4:	3da68136 3da6d230 3da72353 3da7749e     6..=0..=S#.=.t.=
240268e4:	3da7c610 3da817aa 3da8696d 3da8bb57     ...=...=mi.=W..=
240268f4:	3da90d6a 3da95fa5 3da9b208 3daa0494     j..=._.=...=...=
24026904:	3daa5748 3daaaa25 3daafd2a 3dab5059     HW.=%..=*..=YP.=
24026914:	3daba3b0 3dabf730 3dac4ad9 3dac9eab     ...=0..=.J.=...=
24026924:	3dacf2a7 3dad46cb 3dad9b19 3dadef90     ...=.F.=...=...=
24026934:	3dae4431 3dae98fc 3daeedf0 3daf430d     1D.=...=...=.C.=
24026944:	3daf9855 3dafedc6 3db04362 3db09927     U..=...=bC.='..=
24026954:	3db0ef17 3db14531 3db19b75 3db1f1e4     ...=1E.=u..=...=
24026964:	3db2487d 3db29f41 3db2f62f 3db34d48     }H.=A..=/..=HM.=
24026974:	3db3a48c 3db3fbfb 3db45394 3db4ab59     ...=...=.S.=Y..=
24026984:	3db50349 3db55b65 3db5b3ab 3db60c1d     I..=e[.=...=...=
24026994:	3db664bb 3db6bd84 3db71678 3db76f99     .d.=...=x..=.o.=
240269a4:	3db7c8e5 3db8225e 3db87c02 3db8d5d2     ...=^".=.|.=...=
240269b4:	3db92fcf 3db989f8 3db9e44d 3dba3ecf     ./.=...=M..=.>.=
240269c4:	3dba997d 3dbaf458 3dbb4f60 3dbbaa94     }..=X..=`O.=...=
240269d4:	3dbc05f6 3dbc6184 3dbcbd40 3dbd1928     ...=.a.=@..=(..=
240269e4:	3dbd753e 3dbdd181 3dbe2df2 3dbe8a90     >u.=...=.-.=...=
240269f4:	3dbee75c 3dbf4456 3dbfa17d 3dbffed2     \..=VD.=}..=...=
24026a04:	3dc05c55 3dc0ba07 3dc117e6 3dc175f4     U\.=...=...=.u.=
24026a14:	3dc1d430 3dc2329a 3dc29134 3dc2effb     0..=.2.=4..=...=
24026a24:	3dc34ef2 3dc3ae17 3dc40d6b 3dc46cee     .N.=...=k..=.l.=
24026a34:	3dc4cca1 3dc52c82 3dc58c93 3dc5ecd3     ...=.,.=...=...=
24026a44:	3dc64d42 3dc6ade2 3dc70eb0 3dc76faf     BM.=...=...=.o.=
24026a54:	3dc7d0dd 3dc8323c 3dc893ca 3dc8f589     ...=<2.=...=...=
24026a64:	3dc95778 3dc9b997 3dca1be6 3dca7e66     xW.=...=...=f~.=
24026a74:	3dcae117 3dcb43f9 3dcba70b 3dcc0a4e     ...=.C.=...=N..=
24026a84:	3dcc6dc2 3dccd168 3dcd353e 3dcd9946     .m.=h..=>5.=F..=
24026a94:	3dcdfd7f 3dce61ea 3dcec687 3dcf2b55     ...=.a.=...=U+.=
24026aa4:	3dcf9055 3dcff586 3dd05aea 3dd0c080     U..=...=.Z.=...=
24026ab4:	3dd12648 3dd18c43 3dd1f270 3dd258cf     H&.=C..=p..=.X.=
24026ac4:	3dd2bf61 3dd32626 3dd38d1d 3dd3f448     a..=&&.=...=H..=
24026ad4:	3dd45ba5 3dd4c336 3dd52af9 3dd592f1     .[.=6..=.*.=...=
24026ae4:	3dd5fb1b 3dd66379 3dd6cc0b 3dd734d0     ...=yc.=...=.4.=
24026af4:	3dd79dca 3dd806f7 3dd87058 3dd8d9ee     ...=...=Xp.=...=
24026b04:	3dd943b8 3dd9adb6 3dda17e9 3dda8250     .C.=...=...=P..=
24026b14:	3ddaecec 3ddb57bc 3ddbc2c2 3ddc2dfd     ...=.W.=...=.-.=
24026b24:	3ddc996d 3ddd0511 3ddd70ec 3ddddcfc     m..=...=.p.=...=
24026b34:	3dde4941 3ddeb5bc 3ddf226d 3ddf8f53     AI.=...=m".=S..=
24026b44:	3ddffc70 3de069c2 3de0d74b 3de1450b     p..=.i.=K..=.E.=
24026b54:	3de1b300 3de2212c 3de28f8f 3de2fe29     ...=,!.=...=)..=
24026b64:	3de36cf9 3de3dc01 3de44b3f 3de4bab5     .l.=...=?K.=...=
24026b74:	3de52a62 3de59a46 3de60a62 3de67ab6     b*.=F..=b..=.z.=
24026b84:	3de6eb41 3de75c04 3de7cd00 3de83e33     A..=.\.=...=3>.=
24026b94:	3de8af9f 3de92142 3de9931f 3dea0534     ...=B!.=...=4..=
24026ba4:	3dea7781 3deaea08 3deb5cc7 3debcfbf     .w.=...=.\.=...=
24026bb4:	3dec42f1 3decb65c 3ded2a00 3ded9ddd     .B.=\..=.*.=...=
24026bc4:	3dee11f4 3dee8645 3deefad0 3def6f95     ...=E..=...=.o.=
24026bd4:	3defe494 3df059cd 3df0cf40 3df144ee     ...=.Y.=@..=.D.=
24026be4:	3df1bad6 3df230f9 3df2a757 3df31df0     ...=.0.=W..=...=
24026bf4:	3df394c3 3df40bd2 3df4831d 3df4faa2     ...=...=...=...=
24026c04:	3df57263 3df5ea60 3df66299 3df6db0d     cr.=`..=.b.=...=
24026c14:	3df753bd 3df7ccaa 3df845d3 3df8bf38     .S.=...=.E.=8..=
24026c24:	3df938da 3df9b2b8 3dfa2cd3 3dfaa72b     .8.=...=.,.=+..=
24026c34:	3dfb21c0 3dfb9c93 3dfc17a2 3dfc92ef     .!.=...=...=...=
24026c44:	3dfd0e79 3dfd8a41 3dfe0647 3dfe828a     y..=A..=G..=...=
24026c54:	3dfeff0c 3dff7bcc 3dfff8ca 3e003b03     ...=.{.=...=.;.>
24026c64:	3e0079c1 3e00b89e 3e00f79a 3e0136b6     .y.>...>...>.6.>
24026c74:	3e0175f1 3e01b54c 3e01f4c6 3e023460     .u.>L..>...>`4.>
24026c84:	3e02741a 3e02b3f4 3e02f3ee 3e033408     .t.>...>...>.4.>
24026c94:	3e037441 3e03b49b 3e03f515 3e0435b0     At.>...>...>.5.>
24026ca4:	3e04766a 3e04b745 3e04f841 3e05395d     jv.>E..>A..>]9.>
24026cb4:	3e057a9a 3e05bbf7 3e05fd75 3e063f14     .z.>...>u..>.?.>
24026cc4:	3e0680d3 3e06c2b4 3e0704b6 3e0746d8     ...>...>...>.F.>
24026cd4:	3e07891c 3e07cb81 3e080e07 3e0850af     ...>...>...>.P.>
24026ce4:	3e089378 3e08d663 3e09196f 3e095c9c     x..>c..>o..>.\.>
24026cf4:	3e099fec 3e09e35d 3e0a26f0 3e0a6aa5     ...>]..>.&.>.j.>
24026d04:	3e0aae7c 3e0af275 3e0b3690 3e0b7acd     |..>u..>.6.>.z.>
24026d14:	3e0bbf2c 3e0c03ae 3e0c4852 3e0c8d19     ,..>...>RH.>...>
24026d24:	3e0cd202 3e0d170e 3e0d5c3d 3e0da18e     ...>...>=\.>...>
24026d34:	3e0de702 3e0e2c9a 3e0e7254 3e0eb831     ...>.,.>Tr.>1..>
24026d44:	3e0efe31 3e0f4455 3e0f8a9b 3e0fd106     1..>UD.>...>...>
24026d54:	3e101793 3e105e44 3e10a519 3e10ec11     ...>D^.>...>...>
24026d64:	3e11332d 3e117a6d 3e11c1d1 3e120959     -3.>mz.>...>Y..>
24026d74:	3e125104 3e1298d4 3e12e0c8 3e1328e1     .Q.>...>...>.(.>
24026d84:	3e13711d 3e13b97f 3e140204 3e144aae     .q.>...>...>.J.>
24026d94:	3e14937d 3e14dc71 3e152589 3e156ec6     }..>q..>.%.>.n.>
24026da4:	3e15b828 3e1601b0 3e164b5c 3e16952e     (..>...>\K.>...>
24026db4:	3e16df25 3e172941 3e177382 3e17bdea     %..>A).>.s.>...>
24026dc4:	3e180876 3e185329 3e189e01 3e18e8ff     v..>)S.>...>...>
24026dd4:	3e193423 3e197f6d 3e19cadd 3e1a1673     #4.>m..>...>s..>
24026de4:	3e1a6230 3e1aae13 3e1afa1c 3e1b464c     0b.>...>...>LF.>
24026df4:	3e1b92a2 3e1bdf1f 3e1c2bc3 3e1c788d     ...>...>.+.>.x.>
24026e04:	3e1cc57e 3e1d1297 3e1d5fd6 3e1dad3d     ~..>...>._.>=..>
24026e14:	3e1dfacb 3e1e4880 3e1e965d 3e1ee461     ...>.H.>]..>a..>
24026e24:	3e1f328d 3e1f80e0 3e1fcf5b 3e201dfe     .2.>...>[..>.. >
24026e34:	3e206cc9 3e20bbbc 3e210ad7 3e215a1a     .l >.. >..!>.Z!>
24026e44:	3e21a986 3e21f919 3e2248d6 3e2298bb     ..!>..!>.H">..">
24026e54:	3e22e8c8 3e2338fe 3e23895d 3e23d9e5     ..">.8#>].#>..#>
24026e64:	3e242a96 3e247b70 3e24cc73 3e251d9f     .*$>p{$>s.$>..%>
24026e74:	3e256ef5 3e25c074 3e26121c 3e2663ee     .n%>t.%>..&>.c&>
24026e84:	3e26b5ea 3e270810 3e275a5f 3e27acd9     ..&>..'>_Z'>..'>
24026e94:	3e27ff7c 3e28524a 3e28a542 3e28f864     |.'>JR(>B.(>d.(>
24026ea4:	3e294bb1 3e299f28 3e29f2ca 3e2a4696     .K)>(.)>..)>.F*>
24026eb4:	3e2a9a8e 3e2aeeb0 3e2b42fd 3e2b9776     ..*>..*>.B+>v.+>
24026ec4:	3e2bec19 3e2c40e8 3e2c95e2 3e2ceb08     ..+>.@,>..,>..,>
24026ed4:	3e2d4059 3e2d95d6 3e2deb7e 3e2e4153     Y@->..->~.->SA.>
24026ee4:	3e2e9753 3e2eed7f 3e2f43d8 3e2f9a5d     S..>...>.C/>]./>
24026ef4:	3e2ff10e 3e3047ec 3e309ef6 3e30f62c     ../>.G0>..0>,.0>
24026f04:	3e314d90 3e31a520 3e31fcdd 3e3254c8     .M1> .1>..1>.T2>
24026f14:	3e32acdf 3e330524 3e335d96 3e33b635     ..2>$.3>.]3>5.3>
24026f24:	3e340f02 3e3467fc 3e34c125 3e351a7b     ..4>.g4>%.4>{.5>
24026f34:	3e3573ff 3e35cdb1 3e362791 3e3681a0     .s5>..5>.'6>..6>
24026f44:	3e36dbdd 3e373648 3e3790e2 3e37ebaa     ..6>H67>..7>..7>
24026f54:	3e3846a1 3e38a1c8 3e38fd1d 3e3958a1     .F8>..8>..8>.X9>
24026f64:	3e39b454 3e3a1037 3e3a6c49 3e3ac88b     T.9>7.:>Il:>..:>
24026f74:	3e3b24fc 3e3b819d 3e3bde6e 3e3c3b6f     .$;>..;>n.;>o;<>
24026f84:	3e3c989f 3e3cf600 3e3d5391 3e3db153     ..<>..<>.S=>S.=>
24026f94:	3e3e0f45 3e3e6d68 3e3ecbbb 3e3f2a3f     E.>>hm>>..>>?*?>
24026fa4:	3e3f88f4 3e3fe7da 3e4046f2 3e40a63a     ..?>..?>.F@>:.@>
24026fb4:	3e4105b4 3e41655f 3e41c53c 3e42254b     ..A>_eA><.A>K%B>
24026fc4:	3e42858b 3e42e5fe 3e4346a2 3e43a779     ..B>..B>.FC>y.C>
24026fd4:	3e440882 3e4469bd 3e44cb2b 3e452ccb     ..D>.iD>+.D>.,E>
24026fe4:	3e458e9e 3e45f0a4 3e4652dd 3e46b54a     ..E>..E>.RF>J.F>
24026ff4:	3e4717e9 3e477abb 3e47ddc1 3e4840fb     ..G>.zG>..G>.@H>
24027004:	3e48a468 3e490809 3e496bde 3e49cfe8     h.H>..I>.kI>..I>
24027014:	3e4a3425 3e4a9896 3e4afd3c 3e4b6216     %4J>..J><.J>.bK>
24027024:	3e4bc726 3e4c2c69 3e4c91e2 3e4cf790     &.K>i,L>..L>..L>
24027034:	3e4d5d73 3e4dc38b 3e4e29d8 3e4e905b     s]M>..M>.)N>[.N>
24027044:	3e4ef714 3e4f5e02 3e4fc526 3e502c80     ..N>.^O>&.O>.,P>
24027054:	3e509411 3e50fbd7 3e5163d4 3e51cc08     ..P>..P>.cQ>..Q>
24027064:	3e523472 3e529d13 3e5305eb 3e536efa     r4R>..R>..S>.nS>
24027074:	3e53d840 3e5441bd 3e54ab72 3e55155e     @.S>.AT>r.T>^.U>
24027084:	3e557f82 3e55e9de 3e565471 3e56bf3d     ..U>..U>qTV>=.V>
24027094:	3e572a41 3e57957d 3e5800f2 3e586c9f     A*W>}.W>..X>.lX>
240270a4:	3e58d885 3e5944a4 3e59b0fc 3e5a1d8d     ..X>.DY>..Y>..Z>
240270b4:	3e5a8a57 3e5af75b 3e5b6498 3e5bd20f     W.Z>[.Z>.d[>..[>
240270c4:	3e5c3fc0 3e5cadab 3e5d1bd0 3e5d8a2f     .?\>..\>..]>/.]>
240270d4:	3e5df8c8 3e5e679c 3e5ed6ab 3e5f45f4     ..]>.g^>..^>.E_>
240270e4:	3e5fb579 3e602538 3e609533 3e610569     y._>8%`>3.`>i.a>
240270f4:	3e6175da 3e61e688 3e625771 3e62c895     .ua>..a>qWb>..b>
24027104:	3e6339f6 3e63ab94 3e641d6d 3e648f83     .9c>..c>m.d>..d>
24027114:	3e6501d6 3e657466 3e65e732 3e665a3c     ..e>fte>2.e><Zf>
24027124:	3e66cd83 3e674107 3e67b4c9 3e6828c8     ..f>.Ag>..g>.(h>
24027134:	3e689d06 3e691181 3e69863b 3e69fb33     ..h>..i>;.i>3.i>
24027144:	3e6a7069 3e6ae5de 3e6b5b92 3e6bd184     ipj>..j>.[k>..k>
24027154:	3e6c47b6 3e6cbe27 3e6d34d7 3e6dabc7     .Gl>'.l>.4m>..m>
24027164:	3e6e22f7 3e6e9a66 3e6f1215 3e6f8a05     ."n>f.n>..o>..o>
24027174:	3e700235 3e707aa5 3e70f356 3e716c48     5.p>.zp>V.p>Hlq>
24027184:	3e71e57b 3e725eef 3e72d8a4 3e73529b     {.q>.^r>..r>.Rs>
24027194:	3e73ccd3 3e74474d 3e74c209 3e753d07     ..s>MGt>..t>.=u>
240271a4:	3e75b847 3e7633ca 3e76af8f 3e772b98     G.u>.3v>..v>.+w>
240271b4:	3e77a7e3 3e782471 3e78a142 3e791e57     ..w>q$x>B.x>W.y>
240271c4:	3e799bb0 3e7a194c 3e7a972c 3e7b1550     ..y>L.z>,.z>P.{>
240271d4:	3e7b93b9 3e7c1266 3e7c9158 3e7d108e     ..{>f.|>X.|>..}>
240271e4:	3e7d900a 3e7e0fcb 3e7e8fd0 3e7f101c     ..}>..~>..~>...>
240271f4:	3e7f90ad 3e8008c2 3e804951 3e808a02     ...>...>QI.>...>
24027204:	3e80cad7 3e810bcf 3e814ceb 3e818e2a     ...>...>.L.>*..>
24027214:	3e81cf8c 3e821113 3e8252bd 3e82948a     ...>...>.R.>...>
24027224:	3e82d67c 3e831892 3e835acc 3e839d2a     |..>...>.Z.>*..>
24027234:	3e83dfac 3e842253 3e84651e 3e84a80e     ...>S".>.e.>...>
24027244:	3e84eb22 3e852e5b 3e8571b9 3e85b53d     "..>[..>.q.>=..>
24027254:	3e85f8e5 3e863cb2 3e8680a4 3e86c4bc     ...>.<.>...>...>
24027264:	3e8708fa 3e874d5c 3e8791e5 3e87d693     ...>\M.>...>...>
24027274:	3e881b67 3e886061 3e88a581 3e88eac7     g..>a`.>...>...>
24027284:	3e893034 3e8975c7 3e89bb80 3e8a0160     40.>.u.>...>`..>
24027294:	3e8a4766 3e8a8d93 3e8ad3e7 3e8b1a62     fG.>...>...>b..>
240272a4:	3e8b6104 3e8ba7cd 3e8beebd 3e8c35d5     .a.>...>...>.5.>
240272b4:	3e8c7d14 3e8cc47b 3e8d0c0a 3e8d53c0     .}.>{..>...>.S.>
240272c4:	3e8d9b9e 3e8de3a4 3e8e2bd2 3e8e7429     ...>...>.+.>)t.>
240272d4:	3e8ebca8 3e8f054f 3e8f4e1f 3e8f9717     ...>O..>.N.>...>
240272e4:	3e8fe038 3e902982 3e9072f5 3e90bc91     8..>.).>.r.>...>
240272f4:	3e910657 3e915045 3e919a5d 3e91e49f     W..>EP.>]..>...>
24027304:	3e922f0a 3e92799f 3e92c45e 3e930f47     ./.>.y.>^..>G..>
24027314:	3e935a5a 3e93a597 3e93f0fe 3e943c90     ZZ.>...>...>.<.>
24027324:	3e94884d 3e94d434 3e952046 3e956c83     M..>4..>F .>.l.>
24027334:	3e95b8eb 3e96057e 3e96523d 3e969f27     ...>~..>=R.>'..>
24027344:	3e96ec3c 3e97397d 3e9786ea 3e97d483     <..>}9.>...>...>
24027354:	3e982247 3e987038 3e98be55 3e990c9e     G".>8p.>U..>...>
24027364:	3e995b14 3e99a9b7 3e99f886 3e9a4782     .[.>...>...>.G.>
24027374:	3e9a96ab 3e9ae602 3e9b3585 3e9b8536     ...>...>.5.>6..>
24027384:	3e9bd514 3e9c2521 3e9c755a 3e9cc5c2     ...>!%.>Zu.>...>
24027394:	3e9d1658 3e9d671c 3e9db80e 3e9e092e     X..>.g.>...>...>
240273a4:	3e9e5a7e 3e9eabfb 3e9efda8 3e9f4f84     ~Z.>...>...>.O.>
240273b4:	3e9fa18e 3e9ff3c8 3ea04632 3ea098ca     ...>...>2F.>...>
240273c4:	3ea0eb93 3ea13e8b 3ea191b3 3ea1e50b     ...>.>.>...>...>
240273d4:	3ea23893 3ea28c4c 3ea2e035 3ea3344f     .8.>L..>5..>O4.>
240273e4:	3ea38899 3ea3dd14 3ea431c1 3ea4869e     ...>...>.1.>...>
240273f4:	3ea4dbad 3ea530ed 3ea5865f 3ea5dc03     ...>.0.>_..>...>
24027404:	3ea631d8 3ea687e0 3ea6de1a 3ea73486     .1.>...>...>.4.>
24027414:	3ea78b24 3ea7e1f5 3ea838f9 3ea89030     $..>...>.8.>0..>
24027424:	3ea8e79a 3ea93f37 3ea99708 3ea9ef0c     ...>7?.>...>...>
24027434:	3eaa4744 3eaa9fb0 3eaaf850 3eab5123     DG.>...>P..>#Q.>
24027444:	3eabaa2c 3eac0368 3eac5cda 3eacb680     ,..>h..>.\.>...>
24027454:	3ead105b 3ead6a6b 3eadc4b0 3eae1f2b     [..>kj.>...>+..>
24027464:	3eae79db 3eaed4c2 3eaf2fde 3eaf8b30     .y.>...>./.>0..>
24027474:	3eafe6b8 3eb04277 3eb09e6d 3eb0fa99     ...>wB.>m..>...>
24027484:	3eb156fc 3eb1b396 3eb21067 3eb26d70     .V.>...>g..>pm.>
24027494:	3eb2cab1 3eb32829 3eb385d9 3eb3e3c1     ...>)(.>...>...>
240274a4:	3eb441e2 3eb4a03b 3eb4fecc 3eb55d97     .A.>;..>...>.].>
240274b4:	3eb5bc9a 3eb61bd6 3eb67b4c 3eb6dafc     ...>...>L{.>...>
240274c4:	3eb73ae5 3eb79b08 3eb7fb65 3eb85bfc     .:.>...>e..>.[.>
240274d4:	3eb8bcce 3eb91dda 3eb97f21 3eb9e0a3     ...>...>!..>...>
240274e4:	3eba4260 3ebaa459 3ebb068d 3ebb68fd     `B.>Y..>...>.h.>
240274f4:	3ebbcba9 3ebc2e91 3ebc91b5 3ebcf516     ...>...>...>...>
24027504:	3ebd58b3 3ebdbc8d 3ebe20a5 3ebe84f9     .X.>...>. .>...>
24027514:	3ebee98b 3ebf4e5b 3ebfb369 3ec018b5     ...>[N.>i..>...>
24027524:	3ec07e3f 3ec0e407 3ec14a0e 3ec1b055     ?~.>...>.J.>U..>
24027534:	3ec216da 3ec27d9e 3ec2e4a2 3ec34be6     ...>.}.>...>.K.>
24027544:	3ec3b369 3ec41b2d 3ec48331 3ec4eb76     i..>-..>1..>v..>
24027554:	3ec553fb 3ec5bcc2 3ec625c9 3ec68f12     .S.>...>.%.>...>
24027564:	3ec6f89d 3ec76269 3ec7cc78 3ec836c8     ...>ib.>x..>.6.>
24027574:	3ec8a15c 3ec90c32 3ec9774b 3ec9e2a7     \..>2..>Kw.>...>
24027584:	3eca4e46 3ecaba2a 3ecb2651 3ecb92bc     FN.>*..>Q&.>...>
24027594:	3ecbff6b 3ecc6c5f 3eccd998 3ecd4716     k..>_l.>...>.G.>
240275a4:	3ecdb4d9 3ece22e1 3ece9130 3eceffc4     ...>.".>0..>...>
240275b4:	3ecf6e9e 3ecfddbf 3ed04d27 3ed0bcd5     .n.>...>'M.>...>
240275c4:	3ed12ccb 3ed19d08 3ed20d8c 3ed27e59     .,.>...>...>Y~.>
240275d4:	3ed2ef6e 3ed360cb 3ed3d271 3ed4445f     n..>.`.>q..>_D.>
240275e4:	3ed4b697 3ed52919 3ed59be4 3ed60ef9     ...>.).>...>...>
240275f4:	3ed68258 3ed6f601 3ed769f6 3ed7de35     X..>...>.i.>5..>
24027604:	3ed852c0 3ed8c796 3ed93cb7 3ed9b225     .R.>...>.<.>%..>
24027614:	3eda27e0 3eda9de7 3edb143a 3edb8adb     .'.>...>:..>...>
24027624:	3edc01c9 3edc7905 3edcf08f 3edd6868     ...>.y.>...>hh.>
24027634:	3edde08e 3ede5904 3eded1c9 3edf4add     ...>.Y.>...>.J.>
24027644:	3edfc441 3ee03df4 3ee0b7f8 3ee1324d     A..>.=.>...>M2.>
24027654:	3ee1acf2 3ee227e9 3ee2a331 3ee31ecb     ...>.'.>1..>...>
24027664:	3ee39ab7 3ee416f5 3ee49386 3ee51069     ...>...>...>i..>
24027674:	3ee58da1 3ee60b2b 3ee6890a 3ee7073c     ...>+..>...><..>
24027684:	3ee785c4 3ee804a0 3ee883d1 3ee90358     ...>...>...>X..>
24027694:	3ee98334 3eea0367 3eea83f0 3eeb04cf     4..>g..>...>...>
240276a4:	3eeb8606 3eec0795 3eec897b 3eed0bb9     ...>...>{..>...>
240276b4:	3eed8e4f 3eee113f 3eee9487 3eef1829     O..>?..>...>)..>
240276c4:	3eef9c24 3ef0207a 3ef0a52a 3ef12a35     $..>z .>*..>5*.>
240276d4:	3ef1af9c 3ef2355d 3ef2bb7b 3ef341f5     ...>]5.>{..>.A.>
240276e4:	3ef3c8cb 3ef44ffe 3ef4d78f 3ef55f7e     ...>.O.>...>~_.>
240276f4:	3ef5e7ca 3ef67075 3ef6f97f 3ef782e7     ...>up.>...>...>
24027704:	3ef80cb0 3ef896d8 3ef92161 3ef9ac4a     ...>...>a!.>J..>
24027714:	3efa3794 3efac340 3efb4f4e 3efbdbbe     .7.>@..>NO.>...>
24027724:	3efc6890 3efcf5c6 3efd835f 3efe115b     .h.>...>_..>[..>
24027734:	3efe9fbc 3eff2e82 3effbdad 3f00269e     ...>...>...>.&.?
24027744:	3f006e99 3f00b6c8 3f00ff29 3f0147be     .n.?...?)..?.G.?
24027754:	3f019087 3f01d984 3f0222b5 3f026c1a     ...?...?.".?.l.?
24027764:	3f02b5b4 3f02ff83 3f034987 3f0393c0     ...?...?.I.?...?
24027774:	3f03de2f 3f0428d3 3f0473ae 3f04bebe     /..?.(.?.s.?...?
24027784:	3f050a05 3f055583 3f05a137 3f05ed23     ...?.U.?7..?#..?
24027794:	3f063946 3f0685a0 3f06d232 3f071efd     F9.?...?2..?...?
240277a4:	3f076bff 3f07b93a 3f0806ae 3f08545b     .k.?:..?...?[T.?
240277b4:	3f08a241 3f08f061 3f093eba 3f098d4d     A..?a..?.>.?M..?
240277c4:	3f09dc1b 3f0a2b23 3f0a7a65 3f0ac9e3     ...?#+.?ez.?...?
240277d4:	3f0b199c 3f0b6991 3f0bb9c1 3f0c0a2d     ...?.i.?...?-..?
240277e4:	3f0c5ad6 3f0cabbb 3f0cfcdd 3f0d4e3c     .Z.?...?...?<N.?
240277f4:	3f0d9fd9 3f0df1b3 3f0e43cb 3f0e9621     ...?...?.C.?!..?
24027804:	3f0ee8b6 3f0f3b89 3f0f8e9c 3f0fe1ee     ...?.;.?...?...?
24027814:	3f10357f 3f108950 3f10dd62 3f1131b4     .5.?P..?b..?.1.?
24027824:	3f118646 3f11db1a 3f12302f 3f128586     F..?...?/0.?...?
24027834:	3f12db1f 3f1330fa 3f138717 3f13dd78     ...?.0.?...?x..?
24027844:	3f14341b 3f148b02 3f14e22d 3f15399c     .4.?...?-..?.9.?
24027854:	3f15914f 3f15e948 3f164185 3f169a07     O..?H..?.A.?...?
24027864:	3f16f2d0 3f174bde 3f17a533 3f17fece     ...?.K.?3..?...?
24027874:	3f1858b0 3f18b2da 3f190d4c 3f196805     .X.?...?L..?.h.?
24027884:	3f19c307 3f1a1e52 3f1a79e6 3f1ad5c3     ...?R..?.y.?...?
24027894:	3f1b31ea 3f1b8e5b 3f1beb17 3f1c481d     .1.?[..?...?.H.?
240278a4:	3f1ca56f 3f1d030d 3f1d60f6 3f1dbf2c     o..?...?.`.?,..?
240278b4:	3f1e1dae 3f1e7c7e 3f1edb9b 3f1f3b06     ...?~|.?...?.;.?
240278c4:	3f1f9abf 3f1ffac6 3f205b1d 3f20bbc3     ...?...?.[ ?.. ?
240278d4:	3f211cb9 3f217dff 3f21df96 3f22417e     ..!?.}!?..!?~A"?
240278e4:	3f22a3b7 3f230642 3f23691f 3f23cc4f     .."?B.#?.i#?O.#?
240278f4:	3f242fd2 3f2493a8 3f24f7d3 3f255c51     ./$?..$?..$?Q\%?
24027904:	3f25c125 3f26264d 3f268bcc 3f26f1a0     %.%?M&&?..&?..&?
24027914:	3f2757cb 3f27be4d 3f282526 3f288c57     .W'?M.'?&%(?W.(?
24027924:	3f28f3e1 3f295bc3 3f29c3ff 3f2a2c94     ..(?.[)?..)?.,*?
24027934:	3f2a9584 3f2afece 3f2b6873 3f2bd274     ..*?..*?sh+?t.+?
24027944:	3f2c3cd2 3f2ca78b 3f2d12a2 3f2d7e17     .<,?..,?..-?.~-?
24027954:	3f2de9e9 3f2e561b 3f2ec2ab 3f2f2f9b     ..-?.V.?...?.//?
24027964:	3f2f9ceb 3f300a9c 3f3078ae 3f30e722     ../?..0?.x0?".0?
24027974:	3f3155f8 3f31c530 3f3234cc 3f32a4cc     .U1?0.1?.42?..2?
24027984:	3f331531 3f3385fa 3f33f729 3f3468be     1.3?..3?).3?.h4?

24027994 <__leaf_table_fir16XHigh>:
24027994:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
240279a4:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
240279b4:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
240279c4:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
240279d4:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
240279e4:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
240279f4:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
24027a04:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
24027a14:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
24027a24:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
24027a34:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
24027a44:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
24027a54:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
24027a64:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
24027a74:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
24027a84:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
24027a94:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
24027aa4:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
24027ab4:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
24027ac4:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
24027ad4:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
24027ae4:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
24027af4:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
24027b04:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
24027b14:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
24027b24:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
24027b34:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
24027b44:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
24027b54:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
24027b64:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
24027b74:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
24027b84:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
24027b94:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
24027ba4:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
24027bb4:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
24027bc4:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
24027bd4:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
24027be4:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
24027bf4:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
24027c04:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
24027c14:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
24027c24:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
24027c34:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
24027c44:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
24027c54:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
24027c64:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
24027c74:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
24027c84:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
24027c94:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
24027ca4:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
24027cb4:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
24027cc4:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
24027cd4:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
24027ce4:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
24027cf4:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
24027d04:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
24027d14:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
24027d24:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
24027d34:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
24027d44:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
24027d54:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
24027d64:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
24027d74:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
24027d84:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
24027d94:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
24027da4:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
24027db4:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
24027dc4:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
24027dd4:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
24027de4:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
24027df4:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
24027e04:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
24027e14:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
24027e24:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
24027e34:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
24027e44:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
24027e54:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
24027e64:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
24027e74:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
24027e84:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
24027e94:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
24027ea4:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
24027eb4:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
24027ec4:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
24027ed4:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
24027ee4:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
24027ef4:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
24027f04:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
24027f14:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
24027f24:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
24027f34:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
24027f44:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
24027f54:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
24027f64:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
24027f74:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
24027f84:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
24027f94:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
24027fa4:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
24027fb4:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
24027fc4:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
24027fd4:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
24027fe4:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
24027ff4:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
24028004:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
24028014:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
24028024:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
24028034:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
24028044:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
24028054:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
24028064:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
24028074:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
24028084:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
24028094:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
240280a4:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
240280b4:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
240280c4:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
240280d4:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
240280e4:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
240280f4:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
24028104:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
24028114:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
24028124:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
24028134:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
24028144:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
24028154:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
24028164:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
24028174:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
24028184:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

24028194 <__leaf_table_fir16XLow>:
24028194:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
240281a4:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
240281b4:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
240281c4:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
240281d4:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
240281e4:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
240281f4:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
24028204:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
24028214:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
24028224:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
24028234:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
24028244:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
24028254:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
24028264:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
24028274:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
24028284:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
24028294:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
240282a4:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
240282b4:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
240282c4:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
240282d4:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
240282e4:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
240282f4:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
24028304:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
24028314:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
24028324:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
24028334:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
24028344:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
24028354:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
24028364:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
24028374:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
24028384:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

24028394 <__leaf_table_fir2XHigh>:
24028394:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
240283a4:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
240283b4:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
240283c4:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
240283d4:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
240283e4:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
240283f4:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
24028404:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
24028414:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
24028424:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
24028434:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
24028444:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
24028454:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
24028464:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
24028474:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
24028484:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
24028494:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
240284a4:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
240284b4:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
240284c4:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
240284d4:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
240284e4:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
240284f4:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
24028504:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
24028514:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
24028524:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
24028534:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
24028544:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
24028554:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
24028564:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
24028574:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
24028584:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

24028594 <__leaf_table_fir2XLow>:
24028594:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
240285a4:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
240285b4:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
240285c4:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
240285d4:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
240285e4:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
240285f4:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
24028604:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

24028614 <__leaf_table_fir32XHigh>:
24028614:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
24028624:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
24028634:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
24028644:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
24028654:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
24028664:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
24028674:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
24028684:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
24028694:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
240286a4:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
240286b4:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
240286c4:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
240286d4:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
240286e4:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
240286f4:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
24028704:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
24028714:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
24028724:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
24028734:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
24028744:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
24028754:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
24028764:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
24028774:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
24028784:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
24028794:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
240287a4:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
240287b4:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
240287c4:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
240287d4:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
240287e4:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
240287f4:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
24028804:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
24028814:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
24028824:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
24028834:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
24028844:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
24028854:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
24028864:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
24028874:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
24028884:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
24028894:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
240288a4:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
240288b4:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
240288c4:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
240288d4:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
240288e4:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
240288f4:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
24028904:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
24028914:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
24028924:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
24028934:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
24028944:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
24028954:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
24028964:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
24028974:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
24028984:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
24028994:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
240289a4:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
240289b4:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
240289c4:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
240289d4:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
240289e4:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
240289f4:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
24028a04:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
24028a14:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
24028a24:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
24028a34:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
24028a44:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
24028a54:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
24028a64:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
24028a74:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
24028a84:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
24028a94:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
24028aa4:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
24028ab4:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
24028ac4:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
24028ad4:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
24028ae4:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
24028af4:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
24028b04:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
24028b14:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
24028b24:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
24028b34:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
24028b44:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
24028b54:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
24028b64:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
24028b74:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
24028b84:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
24028b94:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
24028ba4:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
24028bb4:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
24028bc4:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
24028bd4:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
24028be4:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
24028bf4:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
24028c04:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
24028c14:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
24028c24:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
24028c34:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
24028c44:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
24028c54:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
24028c64:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
24028c74:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
24028c84:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
24028c94:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
24028ca4:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
24028cb4:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
24028cc4:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
24028cd4:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
24028ce4:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
24028cf4:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
24028d04:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
24028d14:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
24028d24:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
24028d34:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
24028d44:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
24028d54:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
24028d64:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
24028d74:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
24028d84:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
24028d94:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
24028da4:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
24028db4:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
24028dc4:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
24028dd4:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
24028de4:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
24028df4:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
24028e04:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

24028e14 <__leaf_table_fir32XLow>:
24028e14:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
24028e24:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
24028e34:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
24028e44:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
24028e54:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
24028e64:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
24028e74:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
24028e84:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
24028e94:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
24028ea4:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
24028eb4:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
24028ec4:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
24028ed4:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
24028ee4:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
24028ef4:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
24028f04:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
24028f14:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
24028f24:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
24028f34:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
24028f44:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
24028f54:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
24028f64:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
24028f74:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
24028f84:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
24028f94:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
24028fa4:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
24028fb4:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
24028fc4:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
24028fd4:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
24028fe4:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
24028ff4:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
24029004:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
24029014:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
24029024:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
24029034:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
24029044:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
24029054:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
24029064:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
24029074:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
24029084:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
24029094:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
240290a4:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
240290b4:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
240290c4:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
240290d4:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
240290e4:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
240290f4:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
24029104:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
24029114:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
24029124:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
24029134:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
24029144:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
24029154:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
24029164:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
24029174:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
24029184:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
24029194:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
240291a4:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
240291b4:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
240291c4:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
240291d4:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
240291e4:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
240291f4:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
24029204:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

24029214 <__leaf_table_fir4XHigh>:
24029214:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
24029224:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
24029234:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
24029244:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
24029254:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
24029264:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
24029274:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
24029284:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
24029294:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
240292a4:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
240292b4:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
240292c4:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
240292d4:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
240292e4:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
240292f4:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
24029304:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
24029314:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
24029324:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
24029334:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
24029344:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
24029354:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
24029364:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
24029374:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
24029384:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
24029394:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
240293a4:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
240293b4:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
240293c4:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
240293d4:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
240293e4:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
240293f4:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
24029404:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
24029414:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
24029424:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
24029434:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
24029444:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
24029454:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
24029464:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
24029474:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
24029484:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
24029494:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
240294a4:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
240294b4:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
240294c4:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
240294d4:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
240294e4:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
240294f4:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
24029504:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
24029514:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
24029524:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
24029534:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
24029544:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
24029554:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
24029564:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
24029574:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
24029584:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
24029594:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
240295a4:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
240295b4:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
240295c4:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
240295d4:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
240295e4:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
240295f4:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
24029604:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

24029614 <__leaf_table_fir4XLow>:
24029614:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
24029624:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
24029634:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
24029644:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
24029654:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
24029664:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
24029674:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
24029684:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
24029694:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
240296a4:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
240296b4:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
240296c4:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
240296d4:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
240296e4:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
240296f4:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
24029704:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

24029714 <__leaf_table_fir64XHigh>:
24029714:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
24029724:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
24029734:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
24029744:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
24029754:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
24029764:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
24029774:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
24029784:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
24029794:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
240297a4:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
240297b4:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
240297c4:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
240297d4:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
240297e4:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
240297f4:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
24029804:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
24029814:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
24029824:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
24029834:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
24029844:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
24029854:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
24029864:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
24029874:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
24029884:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
24029894:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
240298a4:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
240298b4:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
240298c4:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
240298d4:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
240298e4:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
240298f4:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
24029904:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
24029914:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
24029924:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
24029934:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
24029944:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
24029954:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
24029964:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
24029974:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
24029984:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
24029994:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
240299a4:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
240299b4:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
240299c4:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
240299d4:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
240299e4:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
240299f4:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
24029a04:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
24029a14:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
24029a24:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
24029a34:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
24029a44:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
24029a54:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
24029a64:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
24029a74:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
24029a84:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
24029a94:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
24029aa4:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
24029ab4:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
24029ac4:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
24029ad4:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
24029ae4:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
24029af4:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
24029b04:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
24029b14:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
24029b24:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
24029b34:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
24029b44:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
24029b54:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
24029b64:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
24029b74:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
24029b84:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
24029b94:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
24029ba4:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
24029bb4:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
24029bc4:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
24029bd4:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
24029be4:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
24029bf4:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
24029c04:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
24029c14:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
24029c24:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
24029c34:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
24029c44:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
24029c54:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
24029c64:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
24029c74:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
24029c84:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
24029c94:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
24029ca4:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
24029cb4:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
24029cc4:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
24029cd4:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
24029ce4:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
24029cf4:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
24029d04:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
24029d14:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
24029d24:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
24029d34:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
24029d44:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
24029d54:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
24029d64:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
24029d74:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
24029d84:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
24029d94:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
24029da4:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
24029db4:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
24029dc4:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
24029dd4:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
24029de4:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
24029df4:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
24029e04:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
24029e14:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
24029e24:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
24029e34:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
24029e44:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
24029e54:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
24029e64:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
24029e74:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
24029e84:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
24029e94:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
24029ea4:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
24029eb4:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
24029ec4:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
24029ed4:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
24029ee4:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
24029ef4:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
24029f04:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
24029f14:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
24029f24:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
24029f34:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
24029f44:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
24029f54:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
24029f64:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
24029f74:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
24029f84:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
24029f94:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
24029fa4:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
24029fb4:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
24029fc4:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
24029fd4:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
24029fe4:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
24029ff4:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
2402a004:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
2402a014:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
2402a024:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
2402a034:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
2402a044:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
2402a054:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
2402a064:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
2402a074:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
2402a084:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
2402a094:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
2402a0a4:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
2402a0b4:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
2402a0c4:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
2402a0d4:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
2402a0e4:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
2402a0f4:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
2402a104:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
2402a114:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
2402a124:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
2402a134:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
2402a144:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
2402a154:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
2402a164:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
2402a174:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
2402a184:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
2402a194:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
2402a1a4:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
2402a1b4:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
2402a1c4:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
2402a1d4:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
2402a1e4:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
2402a1f4:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
2402a204:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
2402a214:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
2402a224:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
2402a234:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
2402a244:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
2402a254:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
2402a264:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
2402a274:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
2402a284:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
2402a294:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
2402a2a4:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
2402a2b4:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
2402a2c4:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
2402a2d4:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
2402a2e4:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
2402a2f4:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
2402a304:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
2402a314:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
2402a324:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
2402a334:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
2402a344:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
2402a354:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
2402a364:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
2402a374:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
2402a384:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
2402a394:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
2402a3a4:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
2402a3b4:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
2402a3c4:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
2402a3d4:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
2402a3e4:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
2402a3f4:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
2402a404:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
2402a414:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
2402a424:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
2402a434:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
2402a444:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
2402a454:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
2402a464:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
2402a474:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
2402a484:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
2402a494:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
2402a4a4:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
2402a4b4:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
2402a4c4:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
2402a4d4:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
2402a4e4:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
2402a4f4:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
2402a504:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
2402a514:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
2402a524:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
2402a534:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
2402a544:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
2402a554:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
2402a564:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
2402a574:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
2402a584:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
2402a594:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
2402a5a4:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
2402a5b4:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
2402a5c4:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
2402a5d4:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
2402a5e4:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
2402a5f4:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
2402a604:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
2402a614:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
2402a624:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
2402a634:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
2402a644:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
2402a654:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
2402a664:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
2402a674:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
2402a684:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
2402a694:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
2402a6a4:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
2402a6b4:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
2402a6c4:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
2402a6d4:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
2402a6e4:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
2402a6f4:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
2402a704:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

2402a714 <__leaf_table_fir64XLow>:
2402a714:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
2402a724:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
2402a734:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
2402a744:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
2402a754:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
2402a764:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
2402a774:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
2402a784:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
2402a794:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
2402a7a4:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
2402a7b4:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
2402a7c4:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
2402a7d4:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
2402a7e4:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
2402a7f4:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
2402a804:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
2402a814:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
2402a824:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
2402a834:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
2402a844:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
2402a854:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
2402a864:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
2402a874:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
2402a884:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
2402a894:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
2402a8a4:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
2402a8b4:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
2402a8c4:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
2402a8d4:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
2402a8e4:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
2402a8f4:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
2402a904:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
2402a914:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
2402a924:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
2402a934:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
2402a944:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
2402a954:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
2402a964:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
2402a974:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
2402a984:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
2402a994:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
2402a9a4:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
2402a9b4:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
2402a9c4:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
2402a9d4:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
2402a9e4:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
2402a9f4:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
2402aa04:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
2402aa14:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
2402aa24:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
2402aa34:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
2402aa44:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
2402aa54:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
2402aa64:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
2402aa74:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
2402aa84:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
2402aa94:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
2402aaa4:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
2402aab4:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
2402aac4:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
2402aad4:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
2402aae4:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
2402aaf4:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
2402ab04:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

2402ab14 <__leaf_table_fir8XHigh>:
2402ab14:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
2402ab24:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
2402ab34:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
2402ab44:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
2402ab54:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
2402ab64:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
2402ab74:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
2402ab84:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
2402ab94:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
2402aba4:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
2402abb4:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
2402abc4:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
2402abd4:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
2402abe4:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
2402abf4:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
2402ac04:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
2402ac14:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
2402ac24:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
2402ac34:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
2402ac44:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
2402ac54:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
2402ac64:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
2402ac74:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
2402ac84:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
2402ac94:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
2402aca4:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
2402acb4:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
2402acc4:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
2402acd4:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
2402ace4:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
2402acf4:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
2402ad04:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
2402ad14:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
2402ad24:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
2402ad34:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
2402ad44:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
2402ad54:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
2402ad64:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
2402ad74:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
2402ad84:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
2402ad94:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
2402ada4:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
2402adb4:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
2402adc4:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
2402add4:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
2402ade4:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
2402adf4:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
2402ae04:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
2402ae14:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
2402ae24:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
2402ae34:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
2402ae44:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
2402ae54:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
2402ae64:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
2402ae74:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
2402ae84:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
2402ae94:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
2402aea4:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
2402aeb4:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
2402aec4:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
2402aed4:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
2402aee4:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
2402aef4:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
2402af04:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

2402af14 <__leaf_table_fir8XLow>:
2402af14:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
2402af24:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
2402af34:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
2402af44:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
2402af54:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
2402af64:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
2402af74:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
2402af84:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
2402af94:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
2402afa4:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
2402afb4:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
2402afc4:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
2402afd4:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
2402afe4:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
2402aff4:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
2402b004:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

2402b014 <__leaf_table_sinewave>:
2402b014:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2402b024:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2402b034:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2402b044:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2402b054:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2402b064:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2402b074:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
2402b084:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
2402b094:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
2402b0a4:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
2402b0b4:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
2402b0c4:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
2402b0d4:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2402b0e4:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2402b0f4:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2402b104:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2402b114:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2402b124:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2402b134:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2402b144:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2402b154:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2402b164:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2402b174:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
2402b184:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
2402b194:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
2402b1a4:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
2402b1b4:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
2402b1c4:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
2402b1d4:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2402b1e4:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2402b1f4:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2402b204:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2402b214:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2402b224:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2402b234:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2402b244:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2402b254:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2402b264:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2402b274:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
2402b284:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
2402b294:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
2402b2a4:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
2402b2b4:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
2402b2c4:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
2402b2d4:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2402b2e4:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2402b2f4:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2402b304:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2402b314:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2402b324:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2402b334:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2402b344:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2402b354:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2402b364:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2402b374:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
2402b384:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
2402b394:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
2402b3a4:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
2402b3b4:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
2402b3c4:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
2402b3d4:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2402b3e4:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2402b3f4:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2402b404:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2402b414:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2402b424:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2402b434:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2402b444:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2402b454:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2402b464:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2402b474:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
2402b484:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2402b494:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2402b4a4:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2402b4b4:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2402b4c4:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2402b4d4:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2402b4e4:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2402b4f4:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2402b504:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2402b514:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2402b524:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2402b534:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2402b544:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2402b554:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2402b564:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2402b574:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
2402b584:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2402b594:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2402b5a4:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2402b5b4:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2402b5c4:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2402b5d4:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2402b5e4:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2402b5f4:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2402b604:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2402b614:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2402b624:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2402b634:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2402b644:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2402b654:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2402b664:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2402b674:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
2402b684:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2402b694:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2402b6a4:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2402b6b4:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2402b6c4:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2402b6d4:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2402b6e4:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2402b6f4:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2402b704:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2402b714:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2402b724:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2402b734:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2402b744:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2402b754:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2402b764:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2402b774:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
2402b784:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2402b794:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2402b7a4:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2402b7b4:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2402b7c4:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2402b7d4:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2402b7e4:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2402b7f4:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2402b804:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2402b814:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2402b824:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2402b834:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2402b844:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2402b854:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2402b864:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2402b874:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
2402b884:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2402b894:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2402b8a4:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2402b8b4:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2402b8c4:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2402b8d4:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2402b8e4:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2402b8f4:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2402b904:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2402b914:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2402b924:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
2402b934:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
2402b944:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
2402b954:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
2402b964:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
2402b974:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
2402b984:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2402b994:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2402b9a4:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2402b9b4:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2402b9c4:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2402b9d4:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2402b9e4:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2402b9f4:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2402ba04:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2402ba14:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2402ba24:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
2402ba34:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
2402ba44:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
2402ba54:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
2402ba64:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
2402ba74:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
2402ba84:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2402ba94:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2402baa4:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2402bab4:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2402bac4:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2402bad4:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2402bae4:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2402baf4:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2402bb04:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2402bb14:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2402bb24:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
2402bb34:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
2402bb44:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
2402bb54:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
2402bb64:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
2402bb74:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
2402bb84:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2402bb94:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2402bba4:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2402bbb4:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2402bbc4:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2402bbd4:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2402bbe4:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2402bbf4:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2402bc04:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2402bc14:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2402bc24:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
2402bc34:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
2402bc44:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
2402bc54:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
2402bc64:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
2402bc74:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
2402bc84:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2402bc94:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2402bca4:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2402bcb4:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2402bcc4:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2402bcd4:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2402bce4:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2402bcf4:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2402bd04:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2402bd14:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2402bd24:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
2402bd34:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
2402bd44:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
2402bd54:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
2402bd64:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
2402bd74:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
2402bd84:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2402bd94:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2402bda4:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2402bdb4:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2402bdc4:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2402bdd4:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2402bde4:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2402bdf4:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2402be04:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2402be14:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2402be24:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
2402be34:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
2402be44:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
2402be54:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
2402be64:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
2402be74:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
2402be84:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
2402be94:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
2402bea4:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
2402beb4:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
2402bec4:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
2402bed4:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2402bee4:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2402bef4:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2402bf04:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2402bf14:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2402bf24:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2402bf34:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2402bf44:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2402bf54:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2402bf64:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2402bf74:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
2402bf84:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
2402bf94:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
2402bfa4:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
2402bfb4:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
2402bfc4:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
2402bfd4:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2402bfe4:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2402bff4:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2402c004:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2402c014:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2402c024:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2402c034:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2402c044:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2402c054:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2402c064:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2402c074:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
2402c084:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
2402c094:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
2402c0a4:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
2402c0b4:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
2402c0c4:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
2402c0d4:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2402c0e4:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2402c0f4:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2402c104:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2402c114:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2402c124:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2402c134:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2402c144:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2402c154:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2402c164:	be827fa2 be84039b be858794 be870b8d     ................
2402c174:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
2402c184:	be8e9b7c be901b86 be919f80 be931f8a     |...............
2402c194:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
2402c1a4:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
2402c1b4:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
2402c1c4:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
2402c1d4:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2402c1e4:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2402c1f4:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2402c204:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2402c214:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2402c224:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2402c234:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2402c244:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2402c254:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2402c264:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2402c274:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
2402c284:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
2402c294:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
2402c2a4:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
2402c2b4:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
2402c2c4:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
2402c2d4:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2402c2e4:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2402c2f4:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2402c304:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2402c314:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2402c324:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2402c334:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2402c344:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2402c354:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2402c364:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2402c374:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
2402c384:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
2402c394:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
2402c3a4:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
2402c3b4:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
2402c3c4:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
2402c3d4:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2402c3e4:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2402c3f4:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2402c404:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2402c414:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2402c424:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2402c434:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2402c444:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2402c454:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2402c464:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2402c474:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
2402c484:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2402c494:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2402c4a4:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2402c4b4:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2402c4c4:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2402c4d4:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2402c4e4:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2402c4f4:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2402c504:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2402c514:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2402c524:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2402c534:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2402c544:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2402c554:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2402c564:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2402c574:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
2402c584:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2402c594:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2402c5a4:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2402c5b4:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2402c5c4:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2402c5d4:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2402c5e4:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2402c5f4:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2402c604:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2402c614:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2402c624:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2402c634:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2402c644:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2402c654:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2402c664:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2402c674:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
2402c684:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2402c694:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2402c6a4:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2402c6b4:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2402c6c4:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2402c6d4:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2402c6e4:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2402c6f4:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2402c704:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2402c714:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2402c724:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2402c734:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2402c744:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2402c754:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2402c764:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2402c774:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
2402c784:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2402c794:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2402c7a4:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2402c7b4:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2402c7c4:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2402c7d4:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2402c7e4:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2402c7f4:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2402c804:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2402c814:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2402c824:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2402c834:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2402c844:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2402c854:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2402c864:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2402c874:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
2402c884:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2402c894:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2402c8a4:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2402c8b4:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2402c8c4:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2402c8d4:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2402c8e4:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2402c8f4:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2402c904:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2402c914:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2402c924:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
2402c934:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
2402c944:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
2402c954:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
2402c964:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
2402c974:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
2402c984:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2402c994:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2402c9a4:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2402c9b4:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2402c9c4:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2402c9d4:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2402c9e4:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2402c9f4:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2402ca04:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2402ca14:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2402ca24:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
2402ca34:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
2402ca44:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
2402ca54:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
2402ca64:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
2402ca74:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
2402ca84:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2402ca94:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2402caa4:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2402cab4:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2402cac4:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2402cad4:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2402cae4:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2402caf4:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2402cb04:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2402cb14:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2402cb24:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2402cb34:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2402cb44:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2402cb54:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2402cb64:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2402cb74:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2402cb84:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2402cb94:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2402cba4:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2402cbb4:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2402cbc4:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2402cbd4:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2402cbe4:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2402cbf4:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2402cc04:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2402cc14:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2402cc24:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2402cc34:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2402cc44:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2402cc54:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2402cc64:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2402cc74:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2402cc84:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2402cc94:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2402cca4:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2402ccb4:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2402ccc4:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2402ccd4:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2402cce4:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2402ccf4:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2402cd04:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2402cd14:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2402cd24:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2402cd34:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2402cd44:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2402cd54:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2402cd64:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2402cd74:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2402cd84:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2402cd94:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2402cda4:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2402cdb4:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2402cdc4:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2402cdd4:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2402cde4:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2402cdf4:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2402ce04:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2402ce14:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2402ce24:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2402ce34:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2402ce44:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2402ce54:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2402ce64:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2402ce74:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2402ce84:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2402ce94:	be949f95 be931f8a be919f80 be901b86     ................
2402cea4:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2402ceb4:	be888f86 be870b8d be858794 be84039b     ................
2402cec4:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2402ced4:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2402cee4:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2402cef4:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2402cf04:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2402cf14:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2402cf24:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2402cf34:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2402cf44:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2402cf54:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2402cf64:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2402cf74:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2402cf84:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2402cf94:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2402cfa4:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2402cfb4:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2402cfc4:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2402cfd4:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2402cfe4:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2402cff4:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2402d004:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2402d014 <__leaf_tablesize_firNumTaps>:
2402d014:	00000020 00000040 00000040 00000080      ...@...@.......
2402d024:	00000100 00000100 00000080 00000100     ................
2402d034:	00000100 00000200 00000200 00000400     ................
	...
2402d094:	33323130 37363534 62613938 66656463     0123456789abcdef
2402d0a4:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
2402d0b4:	7a797877 00000000 00000000              wxyz........

2402d0c0 <__exp2f_data>:
2402d0c0:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402d0d0:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402d0e0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402d0f0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402d100:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402d110:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402d120:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402d130:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402d140:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402d150:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402d160:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402d170:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402d180:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402d190:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402d1a0:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402d1b0:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402d1c0:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402d1d0:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402d1e0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402d1f0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402d200:	ff0c52d6 3f962e42                       .R..B..?

2402d208 <__logf_data>:
2402d208:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402d218:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402d228:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402d238:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402d248:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402d258:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402d268:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402d278:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402d288:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402d298:	00000000 3ff00000 00000000 00000000     .......?........
2402d2a8:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402d2b8:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402d2c8:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402d2d8:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402d2e8:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402d2f8:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402d308:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402d318:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402d328 <__exp_data>:
2402d328:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402d338:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402d348:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402d358:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402d368:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402d378:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402d388:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402d3a4:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402d3b4:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402d3c4:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402d3d4:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402d3e4:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402d3f4:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402d404:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402d414:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402d424:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402d434:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402d444:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402d454:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402d464:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402d474:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402d484:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402d494:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402d4a4:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402d4b4:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402d4c4:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402d4d4:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402d4e4:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402d4f4:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402d504:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402d514:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402d524:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402d534:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402d544:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402d554:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402d564:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402d574:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402d584:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402d594:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402d5a4:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402d5b4:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402d5c4:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402d5d4:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402d5e4:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402d5f4:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402d604:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402d614:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402d624:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402d634:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402d644:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402d654:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402d664:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402d674:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402d684:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402d694:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402d6a4:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402d6b4:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402d6c4:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402d6d4:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402d6e4:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402d6f4:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402d704:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402d714:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402d724:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402d734:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402d744:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402d754:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402d764:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402d774:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402d784:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402d794:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402d7a4:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402d7b4:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402d7c4:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402d7d4:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402d7e4:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402d7f4:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402d804:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402d814:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402d824:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402d834:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402d844:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402d854:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402d864:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402d874:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402d884:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402d894:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402d8a4:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402d8b4:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402d8c4:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402d8d4:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402d8e4:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402d8f4:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402d904:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402d914:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402d924:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402d934:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402d944:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402d954:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402d964:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402d974:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402d984:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402d994:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402d9a4:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402d9b4:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402d9c4:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402d9d4:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402d9e4:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402d9f4:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402da04:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402da14:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402da24:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402da34:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402da44:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402da54:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402da64:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402da74:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402da84:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402da94:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402daa4:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402dab4:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402dac4:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402dad4:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402dae4:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402daf4:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402db04:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402db14:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402db24:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402db34:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402db44:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402db54:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402db64:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402db74:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402db84:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402db94:	3feff3c2                                ...?

2402db98 <__log2f_data>:
2402db98:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402dba8:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402dbb8:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402dbc8:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402dbd8:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402dbe8:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402dbf8:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402dc08:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402dc18:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402dc28:	00000000 3ff00000 00000000 00000000     .......?........
2402dc38:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402dc48:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402dc58:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402dc68:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402dc78:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402dc88:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402dc98:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
2402dca8:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

2402dcb8 <npio2_hw>:
2402dcb8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402dcc8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402dcd8:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402dce8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402dcf8:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402dd08:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402dd18:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402dd28:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402dd38 <two_over_pi>:
2402dd38:	000000a2 000000f9 00000083 0000006e     ............n...
2402dd48:	0000004e 00000044 00000015 00000029     N...D.......)...
2402dd58:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402dd68:	000000f5 00000034 000000dd 000000c0     ....4...........
2402dd78:	000000db 00000062 00000095 00000099     ....b...........
2402dd88:	0000003c 00000043 00000090 00000041     <...C.......A...
2402dd98:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402dda8:	000000de 000000bb 000000c5 00000061     ............a...
2402ddb8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402ddc8:	00000042 0000004d 000000d2 000000e0     B...M...........
2402ddd8:	00000006 00000049 0000002e 000000ea     ....I...........
2402dde8:	00000009 000000d1 00000092 0000001c     ................
2402ddf8:	000000fe 0000001d 000000eb 0000001c     ................
2402de08:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402de18:	000000e8 00000082 00000035 000000f5     ........5.......
2402de28:	0000002e 000000bb 00000044 00000084     ........D.......
2402de38:	000000e9 0000009c 00000070 00000026     ........p...&...
2402de48:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402de58:	00000039 00000091 000000d6 00000039     9...........9...
2402de68:	00000083 00000053 00000039 000000f4     ....S...9.......
2402de78:	0000009c 00000084 0000005f 0000008b     ........_.......
2402de88:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402de98:	0000001f 000000f8 00000097 000000ff     ................
2402dea8:	000000de 00000005 00000098 0000000f     ................
2402deb8:	000000ef 0000002f 00000011 0000008b     ..../...........
2402dec8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402ded8:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402dee8:	00000027 000000cb 00000009 000000b7     '...............
2402def8:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402df08:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402df18:	00000075 00000027 000000ba 000000c7     u...'...........
2402df28:	000000eb 000000e5 000000f1 0000007b     ............{...
2402df38:	0000003d 00000007 00000039 000000f7     =.......9.......
2402df48:	0000008a 00000052 00000092 000000ea     ....R...........
2402df58:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402df68:	0000001f 0000008d 0000005d 00000008     ........].......
2402df78:	00000056 00000003 00000030 00000046     V.......0...F...
2402df88:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402df98:	000000f0 000000cf 000000bc 00000020     ............ ...
2402dfa8:	0000009a 000000f4 00000036 0000001d     ........6.......
2402dfb8:	000000a9 000000e3 00000091 00000061     ............a...
2402dfc8:	0000005e 000000e6 0000001b 00000008     ^...............
2402dfd8:	00000065 00000099 00000085 0000005f     e..........._...
2402dfe8:	00000014 000000a0 00000068 00000040     ........h...@...
2402dff8:	0000008d 000000ff 000000d8 00000080     ................
2402e008:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402e018:	00000006 00000006 00000015 00000056     ............V...
2402e028:	000000ca 00000073 000000a8 000000c9     ....s...........
2402e038:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402e048:	0000008c 0000006b                       ....k...

2402e050 <npio2_hw>:
2402e050:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402e060:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402e070:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402e080:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402e090:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402e0a0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402e0b0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402e0c0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402e0d0 <two_over_pi>:
2402e0d0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402e0e0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402e0f0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402e100:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402e110:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402e120:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402e130:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402e140:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402e150:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402e160:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402e170:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402e180:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402e190:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402e1a0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402e1b0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402e1c0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402e1d0:	0060e27b 00c08c6b                       {.`.k...

2402e1d8 <__powf_log2_data>:
2402e1d8:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402e1e8:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402e1f8:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402e208:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402e218:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402e228:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402e238:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402e248:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402e258:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402e268:	00000000 3ff00000 00000000 00000000     .......?........
2402e278:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402e288:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402e298:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402e2a8:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402e2b8:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402e2c8:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402e2d8:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402e2e8:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402e2f8:	652ab82b 3ff71547                       +.*eG..?

2402e300 <PIo2>:
2402e300:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402e310:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402e320:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402e330:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402e340 <init_jk>:
2402e340:	00000002 00000003 00000004 00000006     ................

2402e350 <PIo2>:
2402e350:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402e360:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402e370:	1fc40000 1bc60000 17440000              ..........D.

2402e37c <init_jk>:
2402e37c:	00000004 00000007 00000009              ............

2402e388 <_init>:
2402e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402e38a:	bf00      	nop
2402e38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402e38e:	bc08      	pop	{r3}
2402e390:	469e      	mov	lr, r3
2402e392:	4770      	bx	lr

2402e394 <_fini>:
2402e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402e396:	bf00      	nop
2402e398:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402e39a:	bc08      	pop	{r3}
2402e39c:	469e      	mov	lr, r3
2402e39e:	4770      	bx	lr

2402e3a0 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402e3a0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3a4 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402e3a4:	00001aa1 	.word	0x00001aa1

2402e3a8 <__audioInitString3_veneer>:
2402e3a8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3ac <__audioInitString3_veneer+0x4>
2402e3ac:	00008281 	.word	0x00008281

2402e3b0 <__HAL_SAI_TxCpltCallback_veneer>:
2402e3b0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3b4 <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402e3b4:	000017e1 	.word	0x000017e1

2402e3b8 <__randomNumber_veneer>:
2402e3b8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3bc <__randomNumber_veneer+0x4>
2402e3bc:	00002061 	.word	0x00002061

2402e3c0 <__audioInitVocal_veneer>:
2402e3c0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3c4 <__audioInitVocal_veneer+0x4>
2402e3c4:	0000cb01 	.word	0x0000cb01

2402e3c8 <__audioInitAdditive_veneer>:
2402e3c8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3cc <__audioInitAdditive_veneer+0x4>
2402e3cc:	00000401 	.word	0x00000401

2402e3d0 <__HAL_I2C_ErrorCallback_veneer>:
2402e3d0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3d4 <__HAL_I2C_ErrorCallback_veneer+0x4>
2402e3d4:	000066a1 	.word	0x000066a1

2402e3d8 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402e3d8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3dc <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402e3dc:	000066e1 	.word	0x000066e1

2402e3e0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402e3e0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3e4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402e3e4:	00006a41 	.word	0x00006a41

2402e3e8 <__audioFreeString1_veneer>:
2402e3e8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3ec <__audioFreeString1_veneer+0x4>
2402e3ec:	00006ee1 	.word	0x00006ee1

2402e3f0 <__parsePreset_veneer>:
2402e3f0:	f85f f000 	ldr.w	pc, [pc]	; 2402e3f4 <__parsePreset_veneer+0x4>
2402e3f4:	000020a1 	.word	0x000020a1

2402e3f8 <__HAL_SAI_ErrorCallback_veneer>:
2402e3f8:	f85f f000 	ldr.w	pc, [pc]	; 2402e3fc <__HAL_SAI_ErrorCallback_veneer+0x4>
2402e3fc:	00001d41 	.word	0x00001d41

2402e400 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402e400:	f85f f000 	ldr.w	pc, [pc]	; 2402e404 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402e404:	00006641 	.word	0x00006641

2402e408 <__audioFreeString2_veneer>:
2402e408:	f85f f000 	ldr.w	pc, [pc]	; 2402e40c <__audioFreeString2_veneer+0x4>
2402e40c:	00007781 	.word	0x00007781

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
     400:	f648 0389 	movw	r3, #34953	; 0x8889
     404:	f241 02d4 	movw	r2, #4308	; 0x10d4
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
     408:	f241 1c58 	movw	ip, #4440	; 0x1158
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     40c:	f240 01c0 	movw	r1, #192	; 0xc0
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
     410:	f6c3 5388 	movt	r3, #15752	; 0x3d88
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     414:	f2c2 0200 	movt	r2, #8192	; 0x2000
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
     418:	f240 1008 	movw	r0, #264	; 0x108
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     41c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     420:	f2c2 0100 	movt	r1, #8192	; 0x2000
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
     424:	f2c2 0000 	movt	r0, #8192	; 0x2000
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
     42c:	f241 1760 	movw	r7, #4448	; 0x1160
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     430:	f101 053c 	add.w	r5, r1, #60	; 0x3c
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     434:	4606      	mov	r6, r0
     436:	460c      	mov	r4, r1
     438:	f2c2 0700 	movt	r7, #8192	; 0x2000
     43c:	ed2d 8b10 	vpush	{d8-d15}
     440:	6013      	str	r3, [r2, #0]
     442:	f240 33fc 	movw	r3, #1020	; 0x3fc
     446:	b085      	sub	sp, #20
     448:	ed9c 4a00 	vldr	s8, [ip]
     44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
     450:	eddc 4a01 	vldr	s9, [ip, #4]
        p->curr = pickupOut;
     454:	edd7 2a00 	vldr	s5, [r7]
}
     458:	ed97 3a01 	vldr	s6, [r7, #4]
     45c:	461a      	mov	r2, r3
     45e:	edd7 3a02 	vldr	s7, [r7, #8]
    return tanhf(y3*f->r);
     462:	ed97 5a03 	vldr	s10, [r7, #12]
    Lfloat output = 1.0f;
     466:	edd7 5a04 	vldr	s11, [r7, #16]
        tempy3denom = 0.000001f;
     46a:	ed97 6a05 	vldr	s12, [r7, #20]
     46e:	edd7 6a06 	vldr	s13, [r7, #24]
     472:	ed97 7a07 	vldr	s14, [r7, #28]
     476:	edd7 7a08 	vldr	s15, [r7, #32]
                                    count = -1;
                            }
                            else if (period < 32) // Search minimum if the resolution is low
                            {
                                // Search upwards for the minimum autocorrelation count
                                for (int d = start + 1; d < mid; ++d)
     47a:	ecf2 9a01 	vldmia	r2!, {s19}
                            int mid = p->_bacf->_mid_array * CHAR_BIT * sizeof(unsigned int);
     47e:	ecf4 aa01 	vldmia	r4!, {s21}
                                for (int d = start + 1; d < mid; ++d)
     482:	ecb6 aa01 	vldmia	r6!, {s20}
     486:	ee72 2aa9 	vadd.f32	s5, s5, s19
     48a:	ed92 9a11 	vldr	s18, [r2, #68]	; 0x44
     48e:	42a5      	cmp	r5, r4
     490:	edd2 8a23 	vldr	s17, [r2, #140]	; 0x8c
     494:	ee34 4a2a 	vadd.f32	s8, s8, s21
     498:	ed92 8a35 	vldr	s16, [r2, #212]	; 0xd4
                                {
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     49c:	ee74 4a8a 	vadd.f32	s9, s9, s20
     4a0:	ed92 0a47 	vldr	s0, [r2, #284]	; 0x11c
                                for (int d = start + 1; d < mid; ++d)
     4a4:	ee33 3a09 	vadd.f32	s6, s6, s18
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     4a8:	edd2 0a59 	vldr	s1, [r2, #356]	; 0x164
                                    if (c > count)
     4ac:	ee73 3aa8 	vadd.f32	s7, s7, s17
     4b0:	ed92 1a6b 	vldr	s2, [r2, #428]	; 0x1ac
     4b4:	ee35 5a08 	vadd.f32	s10, s10, s16
                                        break;
                                    count = c;
                                    period = d;
                                }
                                // Search downwards for the minimum autocorrelation count
                                for (int d = start - 1; d > p->_min_period; --d)
     4b8:	edd2 1a7d 	vldr	s3, [r2, #500]	; 0x1f4
     4bc:	ee75 5a80 	vadd.f32	s11, s11, s0
     4c0:	ed92 2a8f 	vldr	s4, [r2, #572]	; 0x23c
     4c4:	ee36 6a20 	vadd.f32	s12, s12, s1
     4c8:	ee76 6a81 	vadd.f32	s13, s13, s2
     4cc:	ee37 7a21 	vadd.f32	s14, s14, s3
     4d0:	ee77 7a82 	vadd.f32	s15, s15, s4
     4d4:	d1d1      	bne.n	47a <audioInitAdditive+0x7a>
     4d6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
                                {
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     4da:	edc7 2a00 	vstr	s5, [r7]
     4de:	f241 02a0 	movw	r2, #4256	; 0x10a0
                                    if (c > count)
                                        break;
                                    count = c;
     4e2:	ed8c 4a00 	vstr	s8, [ip]
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     4e6:	edcc 4a01 	vstr	s9, [ip, #4]
                                    if (c > count)
     4ea:	ee8a aaa2 	vdiv.f32	s20, s21, s5
     4ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
     4f2:	ed87 3a01 	vstr	s6, [r7, #4]
        p->_fundamental.periodicity = -1.0f;
     4f6:	edc7 3a02 	vstr	s7, [r7, #8]
     4fa:	ed87 5a03 	vstr	s10, [r7, #12]
     4fe:	edc7 5a04 	vstr	s11, [r7, #16]
}
     502:	eeca 9a83 	vdiv.f32	s19, s21, s6
     506:	ed87 6a05 	vstr	s12, [r7, #20]
                                if (tBACF_getCorrelation(&p->_bacf, period / 2.0f) == 0)
     50a:	edc7 6a06 	vstr	s13, [r7, #24]
     50e:	ed87 7a07 	vstr	s14, [r7, #28]
     512:	edc7 7a08 	vstr	s15, [r7, #32]
     516:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
     51a:	eeca 8a85 	vdiv.f32	s17, s21, s10
     51e:	ed82 aa00 	vstr	s20, [r2]
     522:	ee8a 8aa5 	vdiv.f32	s16, s21, s11
     526:	edc2 9a01 	vstr	s19, [r2, #4]
     52a:	ee8a 0a86 	vdiv.f32	s0, s21, s12
     52e:	ed82 9a02 	vstr	s18, [r2, #8]
                            if (count == -1)
                            {
                                shouldBreak = 1;
                                break; // Return early if we have false correlation
                            }
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     532:	eeca 0aa6 	vdiv.f32	s1, s21, s13
                        int period = tZeroCrossingInfo_period(&curr, &next);
     536:	edc2 8a03 	vstr	s17, [r2, #12]
     53a:	ee8a 1a87 	vdiv.f32	s2, s21, s14
     53e:	ed82 8a04 	vstr	s16, [r2, #16]
     542:	eeca 1aa7 	vdiv.f32	s3, s21, s15
     546:	ed82 0a05 	vstr	s0, [r2, #20]
     54a:	ee8a 2a84 	vdiv.f32	s4, s21, s8
     54e:	edc2 0a06 	vstr	s1, [r2, #24]
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     552:	eeca 2aa4 	vdiv.f32	s5, s21, s9
     556:	ed82 1a07 	vstr	s2, [r2, #28]
        if (info._periodicity > collector->_fundamental._periodicity &&
     55a:	edc2 1a08 	vstr	s3, [r2, #32]
     55e:	f241 0298 	movw	r2, #4248	; 0x1098
     562:	f2c2 0200 	movt	r2, #8192	; 0x2000
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     566:	ed82 2a00 	vstr	s4, [r2]
     56a:	edc2 2a01 	vstr	s5, [r2, #4]
     56e:	edd3 7a00 	vldr	s15, [r3]
     572:	ed91 3a00 	vldr	s6, [r1]
        if (info._periodicity > collector->_fundamental._periodicity &&
     576:	ee67 7a8a 	vmul.f32	s15, s15, s20
     57a:	edd0 3a00 	vldr	s7, [r0]
            Lfloat periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     57e:	ee22 3a03 	vmul.f32	s6, s4, s6
     582:	ee62 3aa3 	vmul.f32	s7, s5, s7
            if (periodicity_diff <= collector->_harmonic_threshold)
     586:	ece3 7a01 	vstmia	r3!, {s15}
     58a:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
                collector->_fundamental._i1 = info._i1;
     58e:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
            if (periodicity_diff <= collector->_harmonic_threshold)
     592:	ed93 5a35 	vldr	s10, [r3, #212]	; 0xd4
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     596:	ee24 4a29 	vmul.f32	s8, s8, s19
                collector->_fundamental._i2 = info._i2;
     59a:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
                            if (count == 0)
     59e:	ee64 4a89 	vmul.f32	s9, s9, s18
     5a2:	ed93 6a59 	vldr	s12, [r3, #356]	; 0x164
    unsigned int trailing_edge = 0;
     5a6:	ee25 5a28 	vmul.f32	s10, s10, s17
                            if ((collect._fundamental._period == -1.0f) && count == 0)
     5aa:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
     5ae:	ee65 5a88 	vmul.f32	s11, s11, s16
     5b2:	ed93 7a7d 	vldr	s14, [r3, #500]	; 0x1f4
     5b6:	ee26 6a00 	vmul.f32	s12, s12, s0
                                for (int d = start - 1; d > p->_min_period; --d)
     5ba:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
                            int count = tBACF_getCorrelation(&p->_bacf, period);
     5be:	ee66 6aa0 	vmul.f32	s13, s13, s1
                                for (int d = start + 1; d < mid; ++d)
     5c2:	ee27 7a01 	vmul.f32	s14, s14, s2
                            if ((collect._fundamental._period == -1.0f) && count == 0)
     5c6:	eca1 3a01 	vstmia	r1!, {s6}
     5ca:	ee67 7aa1 	vmul.f32	s15, s15, s3
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     5ce:	428d      	cmp	r5, r1
            if (periodicity_diff <= collector->_harmonic_threshold)
     5d0:	ece0 3a01 	vstmia	r0!, {s7}
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5d4:	ed83 4a11 	vstr	s8, [r3, #68]	; 0x44
     5d8:	edc3 4a23 	vstr	s9, [r3, #140]	; 0x8c
    __HAL_DMA_ENABLE(hdma);
     5dc:	ed83 5a35 	vstr	s10, [r3, #212]	; 0xd4
     5e0:	edc3 5a47 	vstr	s11, [r3, #284]	; 0x11c
     5e4:	ed83 6a59 	vstr	s12, [r3, #356]	; 0x164
     5e8:	edc3 6a6b 	vstr	s13, [r3, #428]	; 0x1ac
     5ec:	ed83 7a7d 	vstr	s14, [r3, #500]	; 0x1f4
     5f0:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
     5f4:	d1bb      	bne.n	56e <audioInitAdditive+0x16e>
     5f6:	f240 33d8 	movw	r3, #984	; 0x3d8
     5fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     5fe:	f240 0230 	movw	r2, #48	; 0x30
     602:	f240 0478 	movw	r4, #120	; 0x78
     606:	f2c2 0300 	movt	r3, #8192	; 0x2000
     60a:	f640 77a8 	movw	r7, #4008	; 0xfa8
     60e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     612:	f2c2 0400 	movt	r4, #8192	; 0x2000
     616:	ed93 9a01 	vldr	s18, [r3, #4]
     61a:	f640 766c 	movw	r6, #3948	; 0xf6c
     61e:	edd3 8a04 	vldr	s17, [r3, #16]
     622:	f640 75e4 	movw	r5, #4068	; 0xfe4
     626:	ed93 8a07 	vldr	s16, [r3, #28]
     62a:	f640 409c 	movw	r0, #3228	; 0xc9c
     62e:	edd3 aa00 	vldr	s21, [r3]
     632:	f640 3134 	movw	r1, #2868	; 0xb34
     636:	ed93 6a02 	vldr	s12, [r3, #8]
     63a:	f2c2 0700 	movt	r7, #8192	; 0x2000
     63e:	ed93 aa03 	vldr	s20, [r3, #12]
     642:	ee79 4a6a 	vsub.f32	s9, s18, s21
     646:	edd3 6a05 	vldr	s13, [r3, #20]
     64a:	ee36 6a49 	vsub.f32	s12, s12, s18
     64e:	edd3 9a06 	vldr	s19, [r3, #24]
     652:	ee38 5aca 	vsub.f32	s10, s17, s20
     656:	ed93 7a08 	vldr	s14, [r3, #32]
     65a:	ee76 6ae8 	vsub.f32	s13, s13, s17
     65e:	ee78 5a69 	vsub.f32	s11, s16, s19
     662:	f64a 13fa 	movw	r3, #43514	; 0xa9fa
     666:	ee37 7a48 	vsub.f32	s14, s14, s16
     66a:	9203      	str	r2, [sp, #12]
     66c:	eec7 daa4 	vdiv.f32	s27, s15, s9
     670:	f6c3 3384 	movt	r3, #15236	; 0x3b84
     674:	f640 6204 	movw	r2, #3588	; 0xe04
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     678:	f2c2 0600 	movt	r6, #8192	; 0x2000
    return HAL_ERROR;
     67c:	ee00 3a10 	vmov	s0, r3
}
     680:	2300      	movs	r3, #0
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     682:	f2c2 0500 	movt	r5, #8192	; 0x2000
     686:	f2c2 0000 	movt	r0, #8192	; 0x2000
     68a:	f2c4 23f6 	movt	r3, #17142	; 0x42f6
}
     68e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    __HAL_DMA_ENABLE(hdma);
     692:	ee87 da86 	vdiv.f32	s26, s15, s12
     696:	f2c2 0200 	movt	r2, #8192	; 0x2000
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     69a:	ee00 3a90 	vmov	s1, r3
     69e:	f240 1350 	movw	r3, #336	; 0x150
     6a2:	f104 083c 	add.w	r8, r4, #60	; 0x3c
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     6a6:	f8dd c00c 	ldr.w	ip, [sp, #12]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6ae:	eec7 ca85 	vdiv.f32	s25, s15, s10
     6b2:	ee87 caa6 	vdiv.f32	s24, s15, s13
     6b6:	eec7 baa5 	vdiv.f32	s23, s15, s11
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     6ba:	ee87 ba87 	vdiv.f32	s22, s15, s14
     6be:	edd3 4a12 	vldr	s9, [r3, #72]	; 0x48
     6c2:	3304      	adds	r3, #4
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     6c4:	ed53 2a01 	vldr	s5, [r3, #-4]
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     6c8:	ecbc 2a01 	vldmia	ip!, {s4}
     6cc:	ecb4 6a01 	vldmia	r4!, {s12}
     6d0:	ee87 4aa4 	vdiv.f32	s8, s15, s9
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     6d4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
     6d8:	ed93 5a47 	vldr	s10, [r3, #284]	; 0x11c
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6dc:	45a0      	cmp	r8, r4
     6de:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
     6e6:	edd3 1a7d 	vldr	s3, [r3, #500]	; 0x1f4
     6ea:	eec7 ea82 	vdiv.f32	s29, s15, s4
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	edd3 5a6b 	vldr	s11, [r3, #428]	; 0x1ac
     6f2:	ed93 3a8f 	vldr	s6, [r3, #572]	; 0x23c
     6f6:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     6fa:	eec7 4a85 	vdiv.f32	s9, s15, s10
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     6fe:	eec7 faa3 	vdiv.f32	s31, s15, s7
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     702:	ee87 5aa1 	vdiv.f32	s10, s15, s3
     706:	eec7 3aa5 	vdiv.f32	s7, s15, s11
     70a:	eec7 5a86 	vdiv.f32	s11, s15, s12
     70e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     712:	eec7 6a87 	vdiv.f32	s13, s15, s14
     716:	ee87 7a83 	vdiv.f32	s14, s15, s6
     71a:	ee74 1a42 	vsub.f32	s3, s8, s4
  return status;
     71e:	ee35 3a63 	vsub.f32	s6, s10, s7
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     722:	ee74 2aef 	vsub.f32	s5, s9, s31
     726:	ee61 1aad 	vmul.f32	s3, s3, s27
	i = lrintf(r - 0.5f);
     72a:	ee75 5aee 	vsub.f32	s11, s11, s29
                p += 1.0f;
     72e:	ee36 6a44 	vsub.f32	s12, s12, s8
                x = 0.5f - (p - b) * invB1;
     732:	ee2a 1aa1 	vmul.f32	s2, s21, s3
	i = lrintf(r - 0.5f);
     736:	ece0 1a01 	vstmia	r0!, {s3}
                x = 0.5f - (p - b) * invB1;
     73a:	ee76 6ae4 	vsub.f32	s13, s13, s9
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     73e:	ee65 5a80 	vmul.f32	s11, s11, s0
                x = 0.5f - (p - b) * invB1;
     742:	ee26 6a0d 	vmul.f32	s12, s12, s26
	i = lrintf(r - 0.5f);
     746:	eca1 1a01 	vstmia	r1!, {s2}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     74a:	ee32 2a41 	vsub.f32	s4, s4, s2
	r -= (Lfloat)i;
     74e:	ee37 7a45 	vsub.f32	s14, s14, s10
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     752:	ece7 5a01 	vstmia	r7!, {s11}
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     756:	ee62 2aac 	vmul.f32	s5, s5, s25
	r -= (Lfloat)i;
     75a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     75e:	ee66 6a8c 	vmul.f32	s13, s13, s24
	r -= (Lfloat)i;
     762:	eca2 2a01 	vstmia	r2!, {s4}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     766:	ee27 7a0b 	vmul.f32	s14, s14, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     76a:	ee23 3a2b 	vmul.f32	s6, s6, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
     76e:	edc0 2a1d 	vstr	s5, [r0, #116]	; 0x74
     772:	ee25 faa0 	vmul.f32	s30, s11, s1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     776:	edc0 6a2c 	vstr	s13, [r0, #176]	; 0xb0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     77a:	ee29 ea06 	vmul.f32	s28, s18, s12
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     77e:	ed80 7a4a 	vstr	s14, [r0, #296]	; 0x128
     782:	ee2a 1a22 	vmul.f32	s2, s20, s5
            x = 0.5f - (p_at_reset - b) * invB1;
     786:	ed80 3a3b 	vstr	s6, [r0, #236]	; 0xec
                if (p_at_reset >= 1.0f) {
     78a:	ee68 1aa6 	vmul.f32	s3, s17, s13
            x = 0.5f - (p_at_reset - b) * invB1;
     78e:	eca6 fa01 	vstmia	r6!, {s30}
     792:	ee29 2a83 	vmul.f32	s4, s19, s6
                if (p_at_reset >= 1.0f) {
     796:	ed81 ea0e 	vstr	s28, [r1, #56]	; 0x38
            x = 0.5f - (p_at_reset - b) * invB1;
     79a:	ee28 6a07 	vmul.f32	s12, s16, s14
                if (p_at_reset >= 1.0f) {
     79e:	ed81 1a1d 	vstr	s2, [r1, #116]	; 0x74
     7a2:	ee7e eacf 	vsub.f32	s29, s29, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     7a6:	edc1 1a2c 	vstr	s3, [r1, #176]	; 0xb0
     7aa:	ee34 4a4e 	vsub.f32	s8, s8, s28
     7ae:	ed81 2a3b 	vstr	s4, [r1, #236]	; 0xec
     7b2:	ee7f 5ac1 	vsub.f32	s11, s31, s2
	i = lrintf(r - 0.5f);
     7b6:	ed81 6a4a 	vstr	s12, [r1, #296]	; 0x128
     7ba:	ee74 4ae1 	vsub.f32	s9, s9, s3
     7be:	ece5 ea01 	vstmia	r5!, {s29}
	r -= (Lfloat)i;
     7c2:	ee73 3ac2 	vsub.f32	s7, s7, s4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7c6:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
	c->BLEPindices[c->mostRecentBLEP] = i;
     7ca:	ee35 5a46 	vsub.f32	s10, s10, s12
	r -= (Lfloat)i;
     7ce:	edc2 5a1d 	vstr	s11, [r2, #116]	; 0x74
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7d2:	edc2 4a2c 	vstr	s9, [r2, #176]	; 0xb0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7d6:	edc2 3a3b 	vstr	s7, [r2, #236]	; 0xec
	r -= (Lfloat)i;
     7da:	ed82 5a4a 	vstr	s10, [r2, #296]	; 0x128
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7de:	f47f af6e 	bne.w	6be <audioInitAdditive+0x2be>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7e2:	f640 23b4 	movw	r3, #2740	; 0xab4
	c->BLEPindices[c->mostRecentBLEP] = i;
     7e6:	2200      	movs	r2, #0
     7e8:	f640 2b3c 	movw	fp, #2620	; 0xa3c
     7ec:	f241 1750 	movw	r7, #4432	; 0x1150
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7f4:	f245 2a8c 	movw	sl, #21132	; 0x528c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     7f8:	f241 18b0 	movw	r8, #4528	; 0x11b0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7fc:	f2c2 0b00 	movt	fp, #8192	; 0x2000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     800:	9301      	str	r3, [sp, #4]
     802:	4613      	mov	r3, r2
     804:	f2c2 0700 	movt	r7, #8192	; 0x2000
     808:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     80c:	f2c4 3316 	movt	r3, #17174	; 0x4316
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     810:	ee08 2a10 	vmov	s16, r2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     814:	f2c2 0800 	movt	r8, #8192	; 0x2000
            if (p >= b) {
     818:	9202      	str	r2, [sp, #8]
     81a:	ee09 3a90 	vmov	s19, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     81e:	4613      	mov	r3, r2
     820:	f2c4 437a 	movt	r3, #17530	; 0x447a
            if (p >= b) {
     824:	ee09 3a10 	vmov	s18, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     828:	f241 236f 	movw	r3, #4719	; 0x126f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     82c:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	c->BLEPindices[c->mostRecentBLEP] = i;
     830:	ee08 3a90 	vmov	s17, r3
     834:	9b03      	ldr	r3, [sp, #12]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     836:	f103 093c 	add.w	r9, r3, #60	; 0x3c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     83a:	9e01      	ldr	r6, [sp, #4]
     83c:	465c      	mov	r4, fp
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     83e:	9d03      	ldr	r5, [sp, #12]
     840:	4620      	mov	r0, r4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     842:	4651      	mov	r1, sl
     844:	f00c feac 	bl	d5a0 <__tCycle_init_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     848:	ecf5 0a01 	vldmia	r5!, {s1}
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     84c:	eef0 1a69 	vmov.f32	s3, s19
     850:	4653      	mov	r3, sl
     852:	eeb0 1a48 	vmov.f32	s2, s16
     856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
            if (p >= b) {
     85a:	4630      	mov	r0, r6
            x = -0.5f + p * invB;
     85c:	ee60 0a89 	vmul.f32	s1, s1, s18
            k = 0;
     860:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
            x = -0.5f + p * invB;
     864:	4641      	mov	r1, r8
     866:	f00c fe37 	bl	d4d8 <__tADSRT_init_veneer>
                p -= 1.0f;
     86a:	eef0 0a68 	vmov.f32	s1, s17
     86e:	eeb0 0a48 	vmov.f32	s0, s16
                x = -0.5f + p * invB;
     872:	4651      	mov	r1, sl
	_tMBSineTri* c = *osc;
     874:	4638      	mov	r0, r7
     876:	3404      	adds	r4, #4
     878:	f00c fe6e 	bl	d558 <__tExpSmooth_init_veneer>
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
     87c:	eeb0 0a48 	vmov.f32	s0, s16
     880:	4638      	mov	r0, r7
                x = -0.5f + p * invB;
     882:	3604      	adds	r6, #4
     884:	f00c fcd8 	bl	d238 <__tExpSmooth_setDest_veneer>
	scale *= w;
     888:	45a9      	cmp	r9, r5
	i = lrintf(r - 0.5f);
     88a:	d1d9      	bne.n	840 <audioInitAdditive+0x440>
     88c:	9b02      	ldr	r3, [sp, #8]
     88e:	f10b 0b3c 	add.w	fp, fp, #60	; 0x3c
	r -= (Lfloat)i;
     892:	9a01      	ldr	r2, [sp, #4]
     894:	3704      	adds	r7, #4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     896:	330f      	adds	r3, #15
     898:	323c      	adds	r2, #60	; 0x3c
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     89a:	2b1e      	cmp	r3, #30
     89c:	9302      	str	r3, [sp, #8]
	r -= (Lfloat)i;
     89e:	9201      	str	r2, [sp, #4]
     8a0:	d1cb      	bne.n	83a <audioInitAdditive+0x43a>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8a2:	b005      	add	sp, #20
                x = -0.5f + p * invB;
     8a4:	ecbd 8b10 	vpop	{d8-d15}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	r -= (Lfloat)i;
     8ac:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8b0:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8b4:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     8b8:	f3af 8000 	nop.w
     8bc:	f3af 8000 	nop.w

000008c0 <audioFreeAdditive>:
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8c0:	4770      	bx	lr
     8c2:	bf00      	nop
     8c4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8c8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     8cc:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     8d0:	f3af 8000 	nop.w
     8d4:	f3af 8000 	nop.w
     8d8:	f3af 8000 	nop.w
     8dc:	f3af 8000 	nop.w

000008e0 <audioSwitchToAdditive>:
}
     8e0:	2300      	movs	r3, #0
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     8e2:	f245 20ec 	movw	r0, #21228	; 0x52ec
	_tMBSineTri* c = *osc;
     8e6:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
	i = lrintf(r - 0.5f);
     8ea:	f2c4 43dc 	movt	r3, #17628	; 0x44dc
                x = 0.5f - (p - b) * invB1;
     8ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = lrintf(r - 0.5f);
     8f6:	ee00 3a10 	vmov	s0, r3
     8fa:	f245 2438 	movw	r4, #21048	; 0x5238
                x = 0.5f - (p - b) * invB1;
     8fe:	f240 0700 	movw	r7, #0
	i = lrintf(r - 0.5f);
     902:	f248 6674 	movw	r6, #34420	; 0x8674
	r -= (Lfloat)i;
     906:	f244 284c 	movw	r8, #16972	; 0x424c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     90a:	f245 19d4 	movw	r9, #20948	; 0x51d4
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     90e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     912:	f2c2 0700 	movt	r7, #8192	; 0x2000
	r -= (Lfloat)i;
     916:	f2c2 0601 	movt	r6, #8193	; 0x2001
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     91a:	f2c2 0801 	movt	r8, #8193	; 0x2001
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     91e:	2500      	movs	r5, #0
     920:	f2c2 0900 	movt	r9, #8192	; 0x2000
	r -= (Lfloat)i;
     924:	f04f 0a01 	mov.w	sl, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     928:	ed2d 8b02 	vpush	{d8}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     92c:	f00c fcec 	bl	d308 <__tVZFilter_setFrequencyAndResonance_veneer>
	c->BLEPindices[c->mostRecentBLEP] = i;
     930:	2300      	movs	r3, #0
     932:	f245 20f0 	movw	r0, #21232	; 0x52f0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     936:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     93a:	f2c4 2374 	movt	r3, #17012	; 0x4274
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     93e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     942:	ee00 3a10 	vmov	s0, r3
     946:	f00c fcdf 	bl	d308 <__tVZFilter_setFrequencyAndResonance_veneer>
            x = -0.5f + p_at_reset * invB;
     94a:	f241 236f 	movw	r3, #4719	; 0x126f
    sinPhase += inc_amount;
     94e:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    p += inc_amount;
     952:	ee08 3a10 	vmov	s16, r3
            x = -0.5f + p_at_reset * invB;
     956:	4620      	mov	r0, r4
            else if (sw < 0)
     958:	eeb0 0a48 	vmov.f32	s0, s16
     95c:	f00c feb4 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     960:	f8d8 3000 	ldr.w	r3, [r8]
     964:	4620      	mov	r0, r4
     966:	2b3d      	cmp	r3, #61	; 0x3d
     968:	d026      	beq.n	9b8 <audioSwitchToAdditive+0xd8>
     96a:	ecb6 0a01 	vldmia	r6!, {s0}
     96e:	3404      	adds	r4, #4
                    p_at_reset -= 1.0f;
     970:	f00c fcba 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
                    x = -0.5f + p_at_reset * invB;
     974:	f809 a005 	strb.w	sl, [r9, r5]
                    p_at_reset -= 1.0f;
     978:	3501      	adds	r5, #1
     97a:	3704      	adds	r7, #4
	i = lrintf(r - 0.5f);
     97c:	2d0c      	cmp	r5, #12
     97e:	d1ea      	bne.n	956 <audioSwitchToAdditive+0x76>
                    x = -0.5f + p_at_reset * invB;
     980:	f240 6694 	movw	r6, #1684	; 0x694
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     984:	f2c2 0600 	movt	r6, #8192	; 0x2000
                    x = -0.5f + p_at_reset * invB;
     988:	7833      	ldrb	r3, [r6, #0]
     98a:	b18b      	cbz	r3, 9b0 <audioSwitchToAdditive+0xd0>
	i = lrintf(r - 0.5f);
     98c:	2300      	movs	r3, #0
     98e:	f245 14bc 	movw	r4, #20924	; 0x51bc
     992:	461d      	mov	r5, r3
	r -= (Lfloat)i;
     994:	f2c2 0400 	movt	r4, #8192	; 0x2000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     998:	ee08 3a10 	vmov	s16, r3
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     99c:	4620      	mov	r0, r4
     99e:	eeb0 0a48 	vmov.f32	s0, s16
	r -= (Lfloat)i;
     9a2:	f00c fe09 	bl	d5b8 <__tADSRT_setSustain_veneer>
	i = lrintf(r - 0.5f);
     9a6:	3501      	adds	r5, #1
     9a8:	7833      	ldrb	r3, [r6, #0]
	r -= (Lfloat)i;
     9aa:	3404      	adds	r4, #4
     9ac:	42ab      	cmp	r3, r5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9ae:	dcf5      	bgt.n	99c <audioSwitchToAdditive+0xbc>
     9b0:	ecbd 8b02 	vpop	{d8}
	i = lrintf(r - 0.5f);
     9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9b8:	ecb7 0a01 	vldmia	r7!, {s0}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9bc:	3404      	adds	r4, #4
	c->BLEPindices[c->mostRecentBLEP] = i;
     9be:	f00c fc93 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
     9c2:	f809 a005 	strb.w	sl, [r9, r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9c6:	3501      	adds	r5, #1
     9c8:	3604      	adds	r6, #4
     9ca:	2d0c      	cmp	r5, #12
     9cc:	d1c3      	bne.n	956 <audioSwitchToAdditive+0x76>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     9ce:	e7d7      	b.n	980 <audioSwitchToAdditive+0xa0>
     9d0:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     9d4:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     9d8:	f3af 8000 	nop.w
     9dc:	f3af 8000 	nop.w

000009e0 <audioTickAdditive>:
     9e0:	f245 13e8 	movw	r3, #20968	; 0x51e8
	i = lrintf(r - 0.5f);
     9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	r -= (Lfloat)i;
     9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
	c->BLEPindices[c->mostRecentBLEP] = i;
     9ec:	f245 2438 	movw	r4, #21048	; 0x5238
     9f0:	ed2d 8b10 	vpush	{d8-d15}
	r -= (Lfloat)i;
     9f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
     9f8:	b08f      	sub	sp, #60	; 0x3c
     9fa:	461d      	mov	r5, r3
     9fc:	f103 0630 	add.w	r6, r3, #48	; 0x30
                x = -0.5f + p * invB;
     a00:	9307      	str	r3, [sp, #28]
     a02:	4620      	mov	r0, r4
     a04:	3404      	adds	r4, #4
     a06:	f00c fc63 	bl	d2d0 <__tExpSmooth_tick_veneer>
	_tMBSineTri* c = *osc;
     a0a:	eca5 0a01 	vstmia	r5!, {s0}
     a0e:	42b5      	cmp	r5, r6
     a10:	d1f7      	bne.n	a02 <audioTickAdditive+0x22>
                k = 0;
     a12:	f240 6494 	movw	r4, #1684	; 0x694
                x = -0.5f + p * invB;
     a16:	f245 20e4 	movw	r0, #21220	; 0x52e4
     a1a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     a1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     a22:	9408      	str	r4, [sp, #32]
     a24:	f00c fe64 	bl	d6f0 <__tNoise_tick_veneer>
	r -= (Lfloat)i;
     a28:	f245 20ec 	movw	r0, #21228	; 0x52ec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
	scale *= w;
     a30:	f00c fc86 	bl	d340 <__tVZFilter_tickEfficient_veneer>
	r -= (Lfloat)i;
     a34:	f245 20e4 	movw	r0, #21220	; 0x52e4
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     a38:	eeb0 ca40 	vmov.f32	s24, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a40:	f00c fe56 	bl	d6f0 <__tNoise_tick_veneer>
	scale *= w;
     a44:	f245 20f0 	movw	r0, #21232	; 0x52f0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a48:	f2c2 0000 	movt	r0, #8192	; 0x2000
	r -= (Lfloat)i;
     a4c:	f00c fc78 	bl	d340 <__tVZFilter_tickEfficient_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a50:	f244 2058 	movw	r0, #16984	; 0x4258
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a54:	9b07      	ldr	r3, [sp, #28]
	c->BLEPindices[c->mostRecentBLEP] = i;
     a56:	eef0 8a40 	vmov.f32	s17, s0
     a5a:	f2c2 0001 	movt	r0, #8193	; 0x2001
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a5e:	ed93 8a00 	vldr	s16, [r3]
     a62:	edd3 aa04 	vldr	s21, [r3, #16]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     a66:	ed93 aa01 	vldr	s20, [r3, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a6a:	f00c fc31 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     a6e:	7823      	ldrb	r3, [r4, #0]
     a70:	eef0 ba40 	vmov.f32	s23, s0
     a74:	2b00      	cmp	r3, #0
     a76:	f000 814e 	beq.w	d16 <audioTickAdditive+0x336>
     a7a:	f241 1250 	movw	r2, #4432	; 0x1150
        	p = (1.0f - eof_offset) + 0.25f;
     a7e:	f649 139a 	movw	r3, #39322	; 0x999a
        	sinPhase = (1.0f - eof_offset);
     a82:	ee28 8a08 	vmul.f32	s16, s16, s16
        	p = (1.0f - eof_offset) + 0.25f;
     a86:	f244 2124 	movw	r1, #16932	; 0x4224
        if (!k) {
     a8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     a8e:	f6c3 6399 	movt	r3, #16025	; 0x3e99
                if (p_at_reset < 0.0f) {
     a92:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     a96:	f244 1ad4 	movw	sl, #16852	; 0x41d4
     a9a:	9205      	str	r2, [sp, #20]
            x = -0.5f + p_at_reset * invB;
     a9c:	f244 221c 	movw	r2, #16924	; 0x421c
     aa0:	ee07 3a90 	vmov	s15, r3
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     aa4:	f245 13bc 	movw	r3, #20924	; 0x51bc
     aa8:	f2c2 0201 	movt	r2, #8193	; 0x2001
            x = -0.5f + p_at_reset * invB;
     aac:	ee28 8a08 	vmul.f32	s16, s16, s16
     ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ab4:	ee3c ca28 	vadd.f32	s24, s24, s17
	r = MINBLEP_PHASES * phase * inv_w;
     ab8:	920d      	str	r2, [sp, #52]	; 0x34
     aba:	f640 22b4 	movw	r2, #2740	; 0xab4
	i = lrintf(r - 0.5f);
     abe:	9304      	str	r3, [sp, #16]
     ac0:	2300      	movs	r3, #0
     ac2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ac6:	ee28 9a27 	vmul.f32	s18, s16, s15
     aca:	ee0d 3a90 	vmov	s27, r3
	r -= (Lfloat)i;
     ace:	ee08 3a10 	vmov	s16, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ad2:	920c      	str	r2, [sp, #48]	; 0x30
	c->BLEPindices[c->mostRecentBLEP] = i;
     ad4:	f640 223c 	movw	r2, #2620	; 0xa3c
	r -= (Lfloat)i;
     ad8:	f24d 730a 	movw	r3, #55050	; 0xd70a
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     adc:	f241 0bcc 	movw	fp, #4300	; 0x10cc
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ae0:	f2c2 0200 	movt	r2, #8192	; 0x2000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ae4:	f241 07c4 	movw	r7, #4292	; 0x10c4
	r -= (Lfloat)i;
     ae8:	f6c3 4323 	movt	r3, #15395	; 0x3c23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     aec:	ee39 baea 	vsub.f32	s22, s19, s21
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     af0:	920a      	str	r2, [sp, #40]	; 0x28
	c->BLEPindices[c->mostRecentBLEP] = i;
     af2:	f241 0220 	movw	r2, #4128	; 0x1020
     af6:	ee0d 3a10 	vmov	s26, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     afa:	f24b 7317 	movw	r3, #46871	; 0xb717
     afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b02:	ee3c ca0c 	vadd.f32	s24, s24, s24
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b06:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b0a:	ee79 9aca 	vsub.f32	s19, s19, s20
     b0e:	9209      	str	r2, [sp, #36]	; 0x24
     b10:	f241 02d8 	movw	r2, #4312	; 0x10d8
     b14:	f2c2 0101 	movt	r1, #8193	; 0x2001
     b18:	ee0c 3a90 	vmov	s25, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	scale *= w;
     b20:	2300      	movs	r3, #0
     b22:	f2c2 0a01 	movt	sl, #8193	; 0x2001
            if (p < b) {
     b26:	f2c2 0b00 	movt	fp, #8192	; 0x2000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b2a:	920b      	str	r2, [sp, #44]	; 0x2c
     b2c:	f241 02d4 	movw	r2, #4308	; 0x10d4
            if (p < b) {
     b30:	f2c2 0700 	movt	r7, #8192	; 0x2000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b34:	9106      	str	r1, [sp, #24]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b36:	f2c2 0200 	movt	r2, #8192	; 0x2000
	c->BLEPindices[c->mostRecentBLEP] = i;
     b3a:	9302      	str	r3, [sp, #8]
     b3c:	9303      	str	r3, [sp, #12]
     b3e:	9201      	str	r2, [sp, #4]
     b40:	9d05      	ldr	r5, [sp, #20]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b42:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b46:	4628      	mov	r0, r5
     b48:	f00c fbc2 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b4c:	9c07      	ldr	r4, [sp, #28]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b4e:	eef0 ea40 	vmov.f32	s29, s0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b52:	4628      	mov	r0, r5
     b54:	edd4 7a06 	vldr	s15, [r4, #24]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b58:	eeb0 0a6c 	vmov.f32	s0, s25
     b5c:	ed94 fa05 	vldr	s30, [r4, #20]
     b60:	ee78 7ae7 	vsub.f32	s15, s17, s15
     b64:	ee67 7aa7 	vmul.f32	s15, s15, s15
            if (p < b) {
     b68:	ee67 7aa7 	vmul.f32	s15, s15, s15
            x = 0.5f - (p - b) * invB1;
     b6c:	eea7 0a8d 	vfma.f32	s0, s15, s26
     b70:	f00c fdaa 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
     b74:	9b06      	ldr	r3, [sp, #24]
     b76:	9a03      	ldr	r2, [sp, #12]
     b78:	ecb3 ea01 	vldmia	r3!, {s28}
     b7c:	9804      	ldr	r0, [sp, #16]
     b7e:	9306      	str	r3, [sp, #24]
     b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     b82:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     b86:	edd2 7a00 	vldr	s15, [r2]
                    p_at_reset -= 1.0f;
     b8a:	eeef 7a2e 	vfma.f32	s15, s30, s29
     b8e:	ee3e ea27 	vadd.f32	s28, s28, s15
	i = lrintf(r - 0.5f);
     b92:	f00c fc01 	bl	d398 <__tADSRT_tick_veneer>
     b96:	edd4 7a02 	vldr	s15, [r4, #8]
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b9a:	eeb0 7a40 	vmov.f32	s14, s0
     b9e:	ee6c 7a27 	vmul.f32	s15, s24, s15
	r = MINBLEP_PHASES * phase * inv_w;
     ba2:	eeb0 0a4e 	vmov.f32	s0, s28
	i = lrintf(r - 0.5f);
     ba6:	eea7 8a27 	vfma.f32	s16, s14, s15
	scale *= w;
     baa:	f00c fcf5 	bl	d598 <__mtofTableLookup_veneer>
	i = lrintf(r - 0.5f);
     bae:	ecf7 7a01 	vldmia	r7!, {s15}
     bb2:	ecaa 0a01 	vstmia	sl!, {s0}
	r -= (Lfloat)i;
     bb6:	eef4 7aec 	vcmpe.f32	s15, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bba:	eceb 8a01 	vstmia	fp!, {s17}
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (Lfloat)i;
     bc2:	dd03      	ble.n	bcc <audioTickAdditive+0x1ec>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bc4:	ee88 7aa7 	vdiv.f32	s14, s17, s15
                if (!k && p_at_reset >= b) {
     bc8:	ed0b 7a01 	vstr	s14, [fp, #-4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bcc:	9b02      	ldr	r3, [sp, #8]
	r -= (Lfloat)i;
     bce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
                if (!k && p_at_reset >= b) {
     bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     bd4:	2400      	movs	r4, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bd6:	ed47 da01 	vstr	s27, [r7, #-4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bda:	18d6      	adds	r6, r2, r3
     bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	c->BLEPindices[c->mostRecentBLEP] = i;
     bde:	18d5      	adds	r5, r2, r3
     be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     be2:	eb02 0903 	add.w	r9, r2, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     be8:	eb02 0803 	add.w	r8, r2, r3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     bec:	ee0e 4a10 	vmov	s28, r4
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     bf0:	4630      	mov	r0, r6
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bf2:	3401      	adds	r4, #1
     bf4:	f00c fbd0 	bl	d398 <__tADSRT_tick_veneer>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     bf8:	eeb8 eace 	vcvt.f32.s32	s28, s28
     bfc:	ed1a 7a01 	vldr	s14, [sl, #-4]
     c00:	eeb0 fa40 	vmov.f32	s30, s0
     c04:	ee07 4a90 	vmov	s15, r4
                if (!k && p_at_reset >= b) {
     c08:	eeb0 0a68 	vmov.f32	s0, s17
                    x = 0.5f - (p_at_reset - b) * invB1;
     c0c:	4628      	mov	r0, r5
	_tMBSineTri* c = *osc;
     c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i = lrintf(r - 0.5f);
     c12:	3604      	adds	r6, #4
                    x = 0.5f - (p_at_reset - b) * invB1;
     c14:	eef0 fa4b 	vmov.f32	s31, s22
     c18:	eeae 0a09 	vfma.f32	s0, s28, s18
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
                    x = 0.5f - (p_at_reset - b) * invB1;
     c20:	ee27 0a80 	vmul.f32	s0, s15, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c24:	f00c fb68 	bl	d2f8 <__tCycle_setFreq_veneer>
	i = lrintf(r - 0.5f);
     c28:	9b01      	ldr	r3, [sp, #4]
     c2a:	ed57 7a01 	vldr	s15, [r7, #-4]
     c2e:	4628      	mov	r0, r5
	r -= (Lfloat)i;
     c30:	edd3 6a00 	vldr	s13, [r3]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c34:	3504      	adds	r5, #4
     c36:	ecb9 7a01 	vldmia	r9!, {s14}
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c3a:	ee2e ea26 	vmul.f32	s28, s28, s13
	r -= (Lfloat)i;
     c3e:	ecf8 6a01 	vldmia	r8!, {s13}
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c42:	eeea faa6 	vfma.f32	s31, s21, s13
                    x = 0.5f - (p_at_reset - b) * invB1;
     c46:	ee78 eace 	vsub.f32	s29, s17, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c4a:	ee6e eaa9 	vmul.f32	s29, s29, s19
	r -= (Lfloat)i;
     c4e:	eeea ea0e 	vfma.f32	s29, s20, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c52:	eee7 7a2e 	vfma.f32	s15, s14, s29
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c56:	ed47 7a01 	vstr	s15, [r7, #-4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     c5a:	f00c fb41 	bl	d2e0 <__tCycle_tick_veneer>
     c5e:	ee20 0a0f 	vmul.f32	s0, s0, s30
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c62:	ed5b 7a01 	vldr	s15, [fp, #-4]
     c66:	2c0f      	cmp	r4, #15
     c68:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c6c:	ee67 7aaf 	vmul.f32	s15, s15, s31
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     c70:	eeae 8aa7 	vfma.f32	s16, s29, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     c74:	d1ba      	bne.n	bec <audioTickAdditive+0x20c>
     c76:	9a05      	ldr	r2, [sp, #20]
     c78:	9b03      	ldr	r3, [sp, #12]
     c7a:	3204      	adds	r2, #4
     c7c:	3301      	adds	r3, #1
     c7e:	9205      	str	r2, [sp, #20]
        if (sw > 0)
     c80:	9a04      	ldr	r2, [sp, #16]
     c82:	9303      	str	r3, [sp, #12]
     c84:	3204      	adds	r2, #4
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c86:	9204      	str	r2, [sp, #16]
     c88:	9a02      	ldr	r2, [sp, #8]
     c8a:	323c      	adds	r2, #60	; 0x3c
     c8c:	9202      	str	r2, [sp, #8]
	i = lrintf(r - 0.5f);
     c8e:	9a08      	ldr	r2, [sp, #32]
     c90:	7812      	ldrb	r2, [r2, #0]
     c92:	429a      	cmp	r2, r3
     c94:	f73f af54 	bgt.w	b40 <audioTickAdditive+0x160>
     c98:	f64a 400b 	movw	r0, #44043	; 0xac0b
	r = MINBLEP_PHASES * phase * inv_w;
     c9c:	f244 2313 	movw	r3, #16915	; 0x4213
	i = lrintf(r - 0.5f);
     ca0:	ee2b 5aab 	vmul.f32	s10, s23, s23
     ca4:	f24a 2185 	movw	r1, #41605	; 0xa285
     ca8:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
	r -= (Lfloat)i;
     cac:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     cb0:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     cb4:	f64b 620a 	movw	r2, #48650	; 0xbe0a
	r -= (Lfloat)i;
     cb8:	ee07 0a10 	vmov	s14, r0
                if (p_at_reset >= 1.0f) {
     cbc:	ee07 3a90 	vmov	s15, r3
     cc0:	ee6b 5a85 	vmul.f32	s11, s23, s10
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     cc4:	ee06 1a10 	vmov	s12, r1
	r -= (Lfloat)i;
     cc8:	eeeb 7a87 	vfma.f32	s15, s23, s14
                if (p_at_reset >= 1.0f) {
     ccc:	f2c4 0222 	movt	r2, #16418	; 0x4022
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     cd0:	f246 3313 	movw	r3, #25363	; 0x6313
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cd4:	ee06 2a90 	vmov	s13, r2
	c->BLEPindices[c->mostRecentBLEP] = i;
     cd8:	f2c4 0351 	movt	r3, #16465	; 0x4051
     cdc:	ee07 3a10 	vmov	s14, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ce0:	eee5 7a86 	vfma.f32	s15, s11, s12
     ce4:	ee2b 7a87 	vmul.f32	s14, s23, s14
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ce8:	eee5 7a66 	vfms.f32	s15, s10, s13
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     cec:	eee5 7ac7 	vfms.f32	s15, s11, s14
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cf0:	f240 638c 	movw	r3, #1676	; 0x68c
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     cf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cfc:	ed93 0a00 	vldr	s0, [r3]
     d00:	ee20 0a07 	vmul.f32	s0, s0, s14
                if (p_at_reset >= 1.0f) {
     d04:	ee20 0a08 	vmul.f32	s0, s0, s16
                    x = 0.5f - (p_at_reset - b) * invB1;
     d08:	ee20 0a27 	vmul.f32	s0, s0, s15
     d0c:	b00f      	add	sp, #60	; 0x3c
     d0e:	ecbd 8b10 	vpop	{d8-d15}
     d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d16:	f64a 400b 	movw	r0, #44043	; 0xac0b
     d1a:	f244 2313 	movw	r3, #16915	; 0x4213
            x = 0.5f - (p_at_reset - b) * invB1;
     d1e:	ee20 5a00 	vmul.f32	s10, s0, s0
                if (p_at_reset < b) {
     d22:	f24a 2185 	movw	r1, #41605	; 0xa285
            x = 0.5f - (p_at_reset - b) * invB1;
     d26:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
                if (p_at_reset < b) {
     d2a:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
            x = 0.5f - (p_at_reset - b) * invB1;
     d2e:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
                if (p_at_reset < b) {
     d32:	f64b 620a 	movw	r2, #48650	; 0xbe0a
                if (p_at_reset < 0.0f) {
     d36:	ee07 0a10 	vmov	s14, r0
     d3a:	ee07 3a90 	vmov	s15, r3
     d3e:	ee60 5a05 	vmul.f32	s11, s0, s10
        else if (sw < 0)
     d42:	ee06 1a10 	vmov	s12, r1
     d46:	eee0 7a07 	vfma.f32	s15, s0, s14
	i = lrintf(r - 0.5f);
     d4a:	f2c4 0222 	movt	r2, #16418	; 0x4022
     d4e:	f246 3313 	movw	r3, #25363	; 0x6313
     d52:	2100      	movs	r1, #0
     d54:	ee07 2a10 	vmov	s14, r2
     d58:	f2c4 0351 	movt	r3, #16465	; 0x4051
     d5c:	ee08 1a10 	vmov	s16, r1
	r -= (Lfloat)i;
     d60:	ee06 3a90 	vmov	s13, r3
	c->BLEPindices[c->mostRecentBLEP] = i;
     d64:	eee5 7a86 	vfma.f32	s15, s11, s12
	r -= (Lfloat)i;
     d68:	ee60 ba26 	vmul.f32	s23, s0, s13
     d6c:	eee5 7a47 	vfms.f32	s15, s10, s14
     d70:	eee5 7aeb 	vfms.f32	s15, s11, s23
                x = -0.5f + p * invB;
     d74:	e7bc      	b.n	cf0 <audioTickAdditive+0x310>
                k = 0;
     d76:	bf00      	nop
                p -= 1.0f;
     d78:	f3af 8000 	nop.w
     d7c:	f3af 8000 	nop.w

00000d80 <audioFrameAdditive>:
                x = -0.5f + p * invB;
     d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	_tMBSineTri* c = *osc;
     d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d88:	f2ce 0300 	movt	r3, #57344	; 0xe000
}
     d8c:	f245 7771 	movw	r7, #22385	; 0x5771
	i = lrintf(r - 0.5f);
     d90:	f240 6b94 	movw	fp, #1684	; 0x694
                x = -0.5f + p * invB;
     d94:	f2c2 0700 	movt	r7, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     d98:	ed2d 8b10 	vpush	{d8-d15}
     d9c:	b091      	sub	sp, #68	; 0x44
     d9e:	900a      	str	r0, [sp, #40]	; 0x28
	r -= (Lfloat)i;
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	9309      	str	r3, [sp, #36]	; 0x24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     da4:	783b      	ldrb	r3, [r7, #0]
     da6:	2b00      	cmp	r3, #0
	scale *= w;
     da8:	f040 80fc 	bne.w	fa4 <audioFrameAdditive+0x224>
	r -= (Lfloat)i;
     dac:	f245 23e8 	movw	r3, #21224	; 0x52e8
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     db0:	f2c2 0b00 	movt	fp, #8192	; 0x2000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     db8:	9304      	str	r3, [sp, #16]
	scale *= w;
     dba:	f89b 3000 	ldrb.w	r3, [fp]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     dbe:	2b00      	cmp	r3, #0
     dc0:	f000 8127 	beq.w	1012 <audioFrameAdditive+0x292>
	r -= (Lfloat)i;
     dc4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     dc8:	f640 342c 	movw	r4, #2860	; 0xb2c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     dcc:	f241 05d8 	movw	r5, #4312	; 0x10d8
	c->BLEPindices[c->mostRecentBLEP] = i;
     dd0:	f245 19e8 	movw	r9, #20968	; 0x51e8
     dd4:	f6c3 63cc 	movt	r3, #16076	; 0x3ecc
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     dd8:	f2c2 0400 	movt	r4, #8192	; 0x2000
     ddc:	f2c2 0500 	movt	r5, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     de0:	f2c2 0900 	movt	r9, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     de4:	ee09 3a10 	vmov	s18, r3
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     de8:	f64c 43cd 	movw	r3, #52429	; 0xcccd
     dec:	2600      	movs	r6, #0
     dee:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
     df2:	ee08 3a90 	vmov	s17, r3
}
     df6:	f640 73db 	movw	r3, #4059	; 0xfdb
     dfa:	f2c4 0349 	movt	r3, #16457	; 0x4049
                    p_at_reset += 1.0f;
     dfe:	ee08 3a10 	vmov	s16, r3
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     e02:	eeb0 0a68 	vmov.f32	s0, s17
                    p_at_reset += 1.0f;
     e06:	edd9 7a03 	vldr	s15, [r9, #12]
	r = MINBLEP_PHASES * phase * inv_w;
     e0a:	46a8      	mov	r8, r5
     e0c:	2700      	movs	r7, #0
     e0e:	eea7 0a89 	vfma.f32	s0, s15, s18
     e12:	eca4 0a01 	vstmia	r4!, {s0}
	i = lrintf(r - 0.5f);
     e16:	e001      	b.n	e1c <audioFrameAdditive+0x9c>
     e18:	ed14 0a01 	vldr	s0, [r4, #-4]
     e1c:	3701      	adds	r7, #1
     e1e:	ee07 7a90 	vmov	s15, r7
     e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e26:	ee67 7a88 	vmul.f32	s15, s15, s16
     e2a:	ee27 0a80 	vmul.f32	s0, s15, s0
	r -= (Lfloat)i;
     e2e:	f00c fb23 	bl	d478 <__arm_sin_f32_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e32:	2f0f      	cmp	r7, #15
     e34:	eca8 0a01 	vstmia	r8!, {s0}
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e38:	d1ee      	bne.n	e18 <audioFrameAdditive+0x98>
	r -= (Lfloat)i;
     e3a:	3601      	adds	r6, #1
     e3c:	f89b 3000 	ldrb.w	r3, [fp]
                if (k && p_at_reset < b) {
     e40:	353c      	adds	r5, #60	; 0x3c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e42:	42b3      	cmp	r3, r6
                if (k && p_at_reset < b) {
     e44:	dcdd      	bgt.n	e02 <audioFrameAdditive+0x82>
     e46:	9a04      	ldr	r2, [sp, #16]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e48:	6812      	ldr	r2, [r2, #0]
     e4a:	2a00      	cmp	r2, #0
	r -= (Lfloat)i;
     e4c:	d06b      	beq.n	f26 <audioFrameAdditive+0x1a6>
     e4e:	2b00      	cmp	r3, #0
                if (k && p_at_reset < b) {
     e50:	d066      	beq.n	f20 <audioFrameAdditive+0x1a0>
     e52:	2280      	movs	r2, #128	; 0x80
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e54:	f245 3a58 	movw	sl, #21336	; 0x5358
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e58:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	c->BLEPindices[c->mostRecentBLEP] = i;
     e5c:	f2c3 7280 	movt	r2, #14208	; 0x3780
     e60:	f2c2 0a00 	movt	sl, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e64:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
     e68:	ee0d 2a90 	vmov	s27, r2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     e6c:	2200      	movs	r2, #0
     e6e:	f2c4 2248 	movt	r2, #16968	; 0x4248
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     e72:	ee0d 2a10 	vmov	s26, r2
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     e76:	2200      	movs	r2, #0
     e78:	f2c4 42fa 	movt	r2, #17658	; 0x44fa
     e7c:	ee08 2a90 	vmov	s17, r2
     e80:	f245 12bc 	movw	r2, #20924	; 0x51bc
                if (k && p_at_reset < b) {
     e84:	f2c2 0200 	movt	r2, #8192	; 0x2000
                    x = -0.5f + p_at_reset * invB;
     e88:	9200      	str	r2, [sp, #0]
     e8a:	f640 22b4 	movw	r2, #2740	; 0xab4
     e8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e92:	9205      	str	r2, [sp, #20]
     e94:	f241 0220 	movw	r2, #4128	; 0x1020
     e98:	f2c2 0200 	movt	r2, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     e9c:	9203      	str	r2, [sp, #12]
     e9e:	f244 2224 	movw	r2, #16932	; 0x4224
     ea2:	f2c2 0201 	movt	r2, #8193	; 0x2001
	r -= (Lfloat)i;
     ea6:	9202      	str	r2, [sp, #8]
     ea8:	f244 12d4 	movw	r2, #16852	; 0x41d4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     eac:	f2c2 0201 	movt	r2, #8193	; 0x2001
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     eb0:	9201      	str	r2, [sp, #4]
	r -= (Lfloat)i;
     eb2:	f244 2204 	movw	r2, #16900	; 0x4204
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     eb6:	f2c2 0201 	movt	r2, #8193	; 0x2001
	r -= (Lfloat)i;
     eba:	9207      	str	r2, [sp, #28]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ebc:	2200      	movs	r2, #0
     ebe:	ee0b 2a90 	vmov	s23, r2
     ec2:	4615      	mov	r5, r2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ec4:	f83a 4015 	ldrh.w	r4, [sl, r5, lsl #1]
	c->BLEPindices[c->mostRecentBLEP] = i;
     ec8:	b2a4      	uxth	r4, r4
     eca:	b934      	cbnz	r4, eda <audioFrameAdditive+0x15a>
     ecc:	9a07      	ldr	r2, [sp, #28]
     ece:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ed2:	b292      	uxth	r2, r2
     ed4:	2a00      	cmp	r2, #0
     ed6:	f040 80bc 	bne.w	1052 <audioFrameAdditive+0x2d2>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     eda:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ede:	b292      	uxth	r2, r2
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     ee0:	b132      	cbz	r2, ef0 <audioFrameAdditive+0x170>
     ee2:	9a07      	ldr	r2, [sp, #28]
     ee4:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
     ee8:	b292      	uxth	r2, r2
     eea:	2a00      	cmp	r2, #0
     eec:	f000 80a2 	beq.w	1034 <audioFrameAdditive+0x2b4>
        else if (sw < 0)
     ef0:	9c05      	ldr	r4, [sp, #20]
     ef2:	343c      	adds	r4, #60	; 0x3c
	r = MINBLEP_PHASES * phase * inv_w;
     ef4:	9a00      	ldr	r2, [sp, #0]
     ef6:	9405      	str	r4, [sp, #20]
	i = lrintf(r - 0.5f);
     ef8:	3204      	adds	r2, #4
     efa:	9200      	str	r2, [sp, #0]
     efc:	9a03      	ldr	r2, [sp, #12]
     efe:	323c      	adds	r2, #60	; 0x3c
     f00:	9203      	str	r2, [sp, #12]
     f02:	9a02      	ldr	r2, [sp, #8]
     f04:	3204      	adds	r2, #4
     f06:	9202      	str	r2, [sp, #8]
     f08:	9a01      	ldr	r2, [sp, #4]
     f0a:	3204      	adds	r2, #4
     f0c:	9201      	str	r2, [sp, #4]
     f0e:	9a07      	ldr	r2, [sp, #28]
     f10:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
	r -= (Lfloat)i;
     f14:	b292      	uxth	r2, r2
     f16:	f82a 2015 	strh.w	r2, [sl, r5, lsl #1]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     f1a:	3501      	adds	r5, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     f1c:	42ab      	cmp	r3, r5
     f1e:	dcd1      	bgt.n	ec4 <audioFrameAdditive+0x144>
	r -= (Lfloat)i;
     f20:	2300      	movs	r3, #0
     f22:	9a04      	ldr	r2, [sp, #16]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     f24:	6013      	str	r3, [r2, #0]
                if (p_at_reset < 0.0f) {
     f26:	f240 0400 	movw	r4, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     f2c:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
	r -= (Lfloat)i;
     f30:	f2c3 0400 	movt	r4, #12288	; 0x3000
	scale *= w;
     f34:	ee08 3a10 	vmov	s16, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     f38:	f504 7500 	add.w	r5, r4, #512	; 0x200
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f3c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
     f40:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                if (p_at_reset < 0.0f) {
     f44:	f7ff fd4c 	bl	9e0 <audioTickAdditive>
	scale *= w;
     f48:	ee20 0a08 	vmul.f32	s0, s0, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
     f4c:	3408      	adds	r4, #8
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
     f52:	42ac      	cmp	r4, r5
     f54:	ee17 3a90 	vmov	r3, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     f58:	e944 3302 	strd	r3, r3, [r4, #-8]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     f5c:	d1f2      	bne.n	f44 <audioFrameAdditive+0x1c4>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f62:	f240 6084 	movw	r0, #1668	; 0x684
     f66:	f244 2140 	movw	r1, #16960	; 0x4240
     f6a:	f245 12cc 	movw	r2, #20940	; 0x51cc
                if (p_at_reset < 0.0f) {
     f6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
                    x = -0.5f + p_at_reset * invB;
     f72:	f2ce 0300 	movt	r3, #57344	; 0xe000
        else if (sw < 0)
     f76:	f2c2 0101 	movt	r1, #8193	; 0x2001
     f7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     f7e:	685b      	ldr	r3, [r3, #4]
     f80:	ed90 7a00 	vldr	s14, [r0]
                    x = -0.5f + p_at_reset * invB;
     f84:	9809      	ldr	r0, [sp, #36]	; 0x24
	i = lrintf(r - 0.5f);
     f86:	1a1b      	subs	r3, r3, r0
     f88:	ee07 3a90 	vmov	s15, r3
     f8c:	600b      	str	r3, [r1, #0]
	r -= (Lfloat)i;
     f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
     f92:	ee67 7a87 	vmul.f32	s15, s15, s14
     f96:	edc2 7a00 	vstr	s15, [r2]
	r -= (Lfloat)i;
     f9a:	b011      	add	sp, #68	; 0x44
     f9c:	ecbd 8b10 	vpop	{d8-d15}
                    x = -0.5f + p_at_reset * invB;
     fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	r -= (Lfloat)i;
     fa4:	f2c2 0b00 	movt	fp, #8192	; 0x2000
     fa8:	f89b 3000 	ldrb.w	r3, [fp]
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     fac:	2b00      	cmp	r3, #0
     fae:	d038      	beq.n	1022 <audioFrameAdditive+0x2a2>
     fb0:	f245 16bc 	movw	r6, #20924	; 0x51bc
     fb4:	2500      	movs	r5, #0
     fb6:	f245 3a58 	movw	sl, #21336	; 0x5358
     fba:	f640 24f0 	movw	r4, #2800	; 0xaf0
                    x = 0.5f - (p_at_reset - b) * invB1;
     fbe:	f2c2 0600 	movt	r6, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     fc2:	46a8      	mov	r8, r5
                    x = 0.5f - (p_at_reset - b) * invB1;
     fc4:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     fc8:	f2c2 0400 	movt	r4, #8192	; 0x2000
	i = lrintf(r - 0.5f);
     fcc:	f1a4 093c 	sub.w	r9, r4, #60	; 0x3c
                    x = 0.5f - (p_at_reset - b) * invB1;
     fd0:	4648      	mov	r0, r9
     fd2:	f109 0904 	add.w	r9, r9, #4
     fd6:	f00c fbe3 	bl	d7a0 <__tADSRT_clear_veneer>
	i = lrintf(r - 0.5f);
     fda:	454c      	cmp	r4, r9
     fdc:	d1f8      	bne.n	fd0 <audioFrameAdditive+0x250>
     fde:	4630      	mov	r0, r6
                    x = 0.5f - (p_at_reset - b) * invB1;
     fe0:	343c      	adds	r4, #60	; 0x3c
     fe2:	f00c fbdd 	bl	d7a0 <__tADSRT_clear_veneer>
	i = lrintf(r - 0.5f);
     fe6:	f89b 3000 	ldrb.w	r3, [fp]
	r -= (Lfloat)i;
     fea:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fee:	3501      	adds	r5, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     ff0:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ff4:	3604      	adds	r6, #4
     ff6:	42ab      	cmp	r3, r5
	r -= (Lfloat)i;
     ff8:	dce8      	bgt.n	fcc <audioFrameAdditive+0x24c>
     ffa:	703a      	strb	r2, [r7, #0]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ffc:	f245 22e8 	movw	r2, #21224	; 0x52e8
    1000:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1004:	4611      	mov	r1, r2
	i = lrintf(r - 0.5f);
    1006:	9204      	str	r2, [sp, #16]
    1008:	2201      	movs	r2, #1
	r -= (Lfloat)i;
    100a:	600a      	str	r2, [r1, #0]
    100c:	2b00      	cmp	r3, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    100e:	f47f aed9 	bne.w	dc4 <audioFrameAdditive+0x44>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    1012:	9b04      	ldr	r3, [sp, #16]
    1014:	681b      	ldr	r3, [r3, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
    1016:	2b00      	cmp	r3, #0
    1018:	d085      	beq.n	f26 <audioFrameAdditive+0x1a6>
	i = lrintf(r - 0.5f);
    101a:	2300      	movs	r3, #0
    101c:	9a04      	ldr	r2, [sp, #16]
	c->BLEPindices[c->mostRecentBLEP] = i;
    101e:	6013      	str	r3, [r2, #0]
    1020:	e781      	b.n	f26 <audioFrameAdditive+0x1a6>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    1022:	f245 22e8 	movw	r2, #21224	; 0x52e8
    1026:	703b      	strb	r3, [r7, #0]
    1028:	2301      	movs	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    102a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    102e:	9204      	str	r2, [sp, #16]
    1030:	6013      	str	r3, [r2, #0]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    1032:	e7ee      	b.n	1012 <audioFrameAdditive+0x292>
    1034:	9e05      	ldr	r6, [sp, #20]
    1036:	f106 043c 	add.w	r4, r6, #60	; 0x3c
    103a:	4630      	mov	r0, r6
    103c:	3604      	adds	r6, #4
    103e:	f00c f9cf 	bl	d3e0 <__tADSRT_off_veneer>
	i = lrintf(r - 0.5f);
    1042:	42b4      	cmp	r4, r6
	r -= (Lfloat)i;
    1044:	d1f9      	bne.n	103a <audioFrameAdditive+0x2ba>
    1046:	9800      	ldr	r0, [sp, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
    1048:	f00c f9ca 	bl	d3e0 <__tADSRT_off_veneer>
    104c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    104e:	781b      	ldrb	r3, [r3, #0]
	r -= (Lfloat)i;
    1050:	e750      	b.n	ef4 <audioFrameAdditive+0x174>
    1052:	9b07      	ldr	r3, [sp, #28]
    1054:	f241 1050 	movw	r0, #4432	; 0x1150
    1058:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    105c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    sinPhase += inc_amount;
    1060:	b29b      	uxth	r3, r3
    1062:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    p += inc_amount;
    1066:	ee0c 3a10 	vmov	s24, r3
    106a:	eeb8 cacc 	vcvt.f32.s32	s24, s24
                x = 0.5f - (p - b) * invB1;
    106e:	ee2c ca2d 	vmul.f32	s24, s24, s27
    1072:	eeb0 0a4c 	vmov.f32	s0, s24
    1076:	f00c f8cb 	bl	d210 <__tExpSmooth_setVal_veneer>
    107a:	f245 23f4 	movw	r3, #21236	; 0x52f4
    107e:	9e02      	ldr	r6, [sp, #8]
    1080:	eeb0 0a4d 	vmov.f32	s0, s26
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1088:	9f00      	ldr	r7, [sp, #0]
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	4638      	mov	r0, r7
	i = lrintf(r - 0.5f);
    108e:	6033      	str	r3, [r6, #0]
    1090:	f00c fab2 	bl	d5f8 <__tADSRT_setDecay_veneer>
    1094:	eeb0 0a4c 	vmov.f32	s0, s24
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
				stringOctave[i] = octave;
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);

				tADSRT_setDecay(&fenvelopes[i], 50.0f);
				tADSRT_on(&fenvelopes[i], amplitz);
    1098:	4638      	mov	r0, r7
    109a:	f00c fa15 	bl	d4c8 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    109e:	f244 231c 	movw	r3, #16924	; 0x421c
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
    10a2:	00aa      	lsls	r2, r5, #2
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    10a4:	edd6 7a00 	vldr	s15, [r6]
    10a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    10ac:	4413      	add	r3, r2
    10ae:	ed93 0a00 	vldr	s0, [r3]
    10b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    10b6:	f00c fa6f 	bl	d598 <__mtofTableLookup_veneer>
				float d1;
				float d2;
				float thisGain;
				int thisString = i + firstString;
				float stringFade;
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
    10ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    10c0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    10c4:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    10c8:	9b01      	ldr	r3, [sp, #4]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
    10ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    10ce:	ee77 6a66 	vsub.f32	s13, s14, s13
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    10d2:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
    10d6:	f245 13c4 	movw	r3, #20932	; 0x51c4
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
    10da:	eee6 7a86 	vfma.f32	s15, s13, s12
				int thisString = i + firstString;
    10de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	442b      	add	r3, r5
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
    10e6:	ee20 fa27 	vmul.f32	s30, s0, s15
				float height2 = 0.0f;
				float height1 = 0.0f;
				if (thisString < 6)
    10ea:	2b05      	cmp	r3, #5
				{
					stringFade = (float)thisString * 0.2f;
    10ec:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
    10f0:	930c      	str	r3, [sp, #48]	; 0x30
					stringFade = (float)thisString * 0.2f;
    10f2:	eef8 fae7 	vcvt.f32.s32	s31, s15
				if (thisString < 6)
    10f6:	f340 8162 	ble.w	13be <audioFrameAdditive+0x63e>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
				}
				else
				{
					stringFade = (float)(thisString - 6.0f) * 0.2f;
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    10fa:	f240 3bd8 	movw	fp, #984	; 0x3d8
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    10fe:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    1102:	f64c 43cd 	movw	r3, #52429	; 0xcccd
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1106:	f2c2 0b00 	movt	fp, #8192	; 0x2000
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    110a:	ee7f fae7 	vsub.f32	s31, s31, s15
    110e:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1112:	eddb 6a03 	vldr	s13, [fp, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    1116:	eddb 7a05 	vldr	s15, [fp, #20]
    111a:	ee3f 6a66 	vsub.f32	s12, s30, s13
    111e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1122:	eec6 6a27 	vdiv.f32	s13, s12, s15
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1126:	ee07 3a90 	vmov	s15, r3
    112a:	ee6f faa7 	vmul.f32	s31, s31, s15
    112e:	ee36 9aa6 	vadd.f32	s18, s13, s13
    if (val < min)
    1132:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    1136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    113a:	f100 822f 	bmi.w	159c <audioFrameAdditive+0x81c>
    else if (val > max)
    113e:	f64b 0352 	movw	r3, #47186	; 0xb852
    1142:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
    1146:	ee07 3a90 	vmov	s15, r3
    114a:	eef4 6ae7 	vcmpe.f32	s13, s15
    114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1152:	f300 820a 	bgt.w	156a <audioFrameAdditive+0x7ea>
				}
				float oneMinusStringFade = 1.0f - stringFade;
				//float fakedFreq = stringFrequencies[i];
				//float height2 = LEAF_clip(0.0f,(barInMIDI[0] *  0.083333333333333f) + stringOctave[i] + (knobScaled[2] * 2.0f), 1.99f);
				//float height1 = height2;
				int height1Int = floor(height1);
    1156:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    115a:	febb 7b47 	vrintm.f64	d7, d7
    115e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
				float height1Float = height1 - height1Int;
    1162:	eef8 cae7 	vcvt.f32.s32	s25, s15
				int height1Int = floor(height1);
    1166:	ee17 4a90 	vmov	r4, s15
				float height2Float = height2 - height2Int;
				for (int j = 0; j < NUM_OVERTONES; j++)
				{
					if (thisString < 6)
					{
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    116a:	1c63      	adds	r3, r4, #1
				float height1Float = height1 - height1Int;
    116c:	ee79 aa6c 	vsub.f32	s21, s18, s25
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1170:	ed9b 7a00 	vldr	s14, [fp]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    1174:	eddb 7a02 	vldr	s15, [fp, #8]
    1178:	ee7f 6a47 	vsub.f32	s13, s30, s14
    117c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    1184:	ee77 9a07 	vadd.f32	s19, s14, s14
    if (val < min)
    1188:	eef5 9ac0 	vcmpe.f32	s19, #0.0
    118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1190:	f100 81d1 	bmi.w	1536 <audioFrameAdditive+0x7b6>
    else if (val > max)
    1194:	f64b 0252 	movw	r2, #47186	; 0xb852
    1198:	f6c3 727e 	movt	r2, #16254	; 0x3f7e
    119c:	ee07 2a90 	vmov	s15, r2
    11a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    11a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11a8:	f300 815d 	bgt.w	1466 <audioFrameAdditive+0x6e6>
				int height1Int = floor(height1);
    11ac:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    11b0:	febb 7b47 	vrintm.f64	d7, d7
    11b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    11b8:	ee17 0a90 	vmov	r0, s15
				float height1Float = height1 - height1Int;
    11bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11c0:	1c42      	adds	r2, r0, #1
				float height1Float = height1 - height1Int;
    11c2:	ee39 bae7 	vsub.f32	s22, s19, s15
				float oneMinusStringFade = 1.0f - stringFade;
    11c6:	f240 31fc 	movw	r1, #1020	; 0x3fc
    11ca:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    11ce:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    11d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
    11d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    11da:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    11de:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11e2:	ee77 7aae 	vadd.f32	s15, s15, s29
    11e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11ea:	ee7c caae 	vadd.f32	s25, s25, s29
    11ee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    11f2:	f640 6604 	movw	r6, #3588	; 0xe04
    11f6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    11fa:	32d8      	adds	r2, #216	; 0xd8
    11fc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    1200:	f640 489c 	movw	r8, #3228	; 0xc9c
    1204:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    1208:	f244 4750 	movw	r7, #17488	; 0x4450
    120c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
				float oneMinusStringFade = 1.0f - stringFade;
    1210:	9803      	ldr	r0, [sp, #12]
    1212:	950e      	str	r5, [sp, #56]	; 0x38
    1214:	ee3e aaef 	vsub.f32	s20, s29, s31
    1218:	9006      	str	r0, [sp, #24]
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    121a:	ee37 eae9 	vsub.f32	s28, s15, s19
				float oneMinusStringFade = 1.0f - stringFade;
    121e:	4648      	mov	r0, r9
    1220:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1224:	ee7c cac9 	vsub.f32	s25, s25, s18
    1228:	34d8      	adds	r4, #216	; 0xd8
    122a:	f2c2 0600 	movt	r6, #8192	; 0x2000
    122e:	f2c2 0800 	movt	r8, #8192	; 0x2000
    1232:	f2c2 0701 	movt	r7, #8193	; 0x2001
				float oneMinusStringFade = 1.0f - stringFade;
    1236:	461d      	mov	r5, r3
    1238:	4691      	mov	r9, r2
    123a:	468a      	mov	sl, r1
    123c:	e07a      	b.n	1334 <audioFrameAdditive+0x5b4>
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    123e:	ed95 8a00 	vldr	s16, [r5]
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);


						if (height2 < 1.0f)
    1242:	eeb4 9aee 	vcmpe.f32	s18, s29
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1246:	ed94 7a36 	vldr	s14, [r4, #216]	; 0xd8
    124a:	ee2a 8a88 	vmul.f32	s16, s21, s16
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    124e:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    1252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1256:	ee6b 7a27 	vmul.f32	s15, s22, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    125a:	eea7 8a2c 	vfma.f32	s16, s14, s25
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    125e:	ed9a 7a36 	vldr	s14, [sl, #216]	; 0xd8
    1262:	eee7 7a0e 	vfma.f32	s15, s14, s28
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    1266:	ee2a 8a08 	vmul.f32	s16, s20, s16
    126a:	eeaf 8aa7 	vfma.f32	s16, s31, s15
						if (height2 < 1.0f)
    126e:	f100 8147 	bmi.w	1500 <audioFrameAdditive+0x780>
						{
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
						}
						else
						{
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    1272:	eddb 7a07 	vldr	s15, [fp, #28]
    1276:	edd8 6a4b 	vldr	s13, [r8, #300]	; 0x12c
    if (val < min)
    127a:	eef4 7acf 	vcmpe.f32	s15, s30
    127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1282:	dc03      	bgt.n	128c <audioFrameAdditive+0x50c>
    else if (val > max)
    1284:	eddb 7a08 	vldr	s15, [fp, #32]
    1288:	fecf 7a67 	vminnm.f32	s15, s30, s15
    128c:	ed96 7a4b 	vldr	s14, [r6, #300]	; 0x12c
    1290:	eea6 7aa7 	vfma.f32	s14, s13, s15
    1294:	eece 7a87 	vdiv.f32	s15, s29, s14
						}

						if (height1 < 1.0f)
    1298:	eef4 9aee 	vcmpe.f32	s19, s29
    129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12a0:	f100 811a 	bmi.w	14d8 <audioFrameAdditive+0x758>
						{
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
						}
						else
						{
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    12a4:	ed9b 7a04 	vldr	s14, [fp, #16]
    12a8:	ed98 6a2d 	vldr	s12, [r8, #180]	; 0xb4
    if (val < min)
    12ac:	eeb4 7acf 	vcmpe.f32	s14, s30
    12b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12b4:	dc03      	bgt.n	12be <audioFrameAdditive+0x53e>
    else if (val > max)
    12b6:	ed9b 7a05 	vldr	s14, [fp, #20]
    12ba:	fe8f 7a47 	vminnm.f32	s14, s30, s14
    12be:	edd6 6a2d 	vldr	s13, [r6, #180]	; 0xb4
    12c2:	eee6 6a07 	vfma.f32	s13, s12, s14
    12c6:	ee8e 7aa6 	vdiv.f32	s14, s29, s13
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
						}

						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
					}
					thisDecay *= 2000.0f * knobScaled[10];
    12ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				for (int j = 0; j < NUM_OVERTONES; j++)
    12cc:	3604      	adds	r6, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    12ce:	9008      	str	r0, [sp, #32]
				for (int j = 0; j < NUM_OVERTONES; j++)
    12d0:	f108 0804 	add.w	r8, r8, #4
					thisDecay *= 2000.0f * knobScaled[10];
    12d4:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
				for (int j = 0; j < NUM_OVERTONES; j++)
    12d8:	f10a 0a04 	add.w	sl, sl, #4
    12dc:	f109 0904 	add.w	r9, r9, #4
    12e0:	3404      	adds	r4, #4
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    12e2:	ee67 7a8a 	vmul.f32	s15, s15, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    12e6:	3504      	adds	r5, #4
					thisDecay *= 2000.0f * knobScaled[10];
    12e8:	ee20 0a28 	vmul.f32	s0, s0, s17
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    12ec:	eee7 7a2f 	vfma.f32	s15, s14, s31
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    12f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    12f4:	f00c f980 	bl	d5f8 <__tADSRT_setDecay_veneer>
					currentRandom++;
    12f8:	f897 c000 	ldrb.w	ip, [r7]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    12fc:	9808      	ldr	r0, [sp, #32]
    12fe:	ee28 0a0c 	vmul.f32	s0, s16, s24
					currentRandom++;
    1302:	f10c 0c01 	add.w	ip, ip, #1
    1306:	f887 c000 	strb.w	ip, [r7]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    130a:	f00c f8dd 	bl	d4c8 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
    130e:	9b06      	ldr	r3, [sp, #24]
					currentRandom++;
    1310:	f897 c000 	ldrb.w	ip, [r7]
					finalGains[i][j] = thisGain;
    1314:	eca3 8a01 	vstmia	r3!, {s16}
    1318:	9306      	str	r3, [sp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    131a:	f640 6340 	movw	r3, #3648	; 0xe40
    131e:	9808      	ldr	r0, [sp, #32]
					currentRandom++;
    1320:	f10c 0c01 	add.w	ip, ip, #1
				for (int j = 0; j < NUM_OVERTONES; j++)
    1324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1328:	3004      	adds	r0, #4
					currentRandom++;
    132a:	f887 c000 	strb.w	ip, [r7]
				for (int j = 0; j < NUM_OVERTONES; j++)
    132e:	42b3      	cmp	r3, r6
    1330:	f000 80fa 	beq.w	1528 <audioFrameAdditive+0x7a8>
					if (thisString < 6)
    1334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1336:	2b05      	cmp	r3, #5
    1338:	dd81      	ble.n	123e <audioFrameAdditive+0x4be>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    133a:	edd5 7a00 	vldr	s15, [r5]
						if (height2 < 1.0f)
    133e:	eeb4 9aee 	vcmpe.f32	s18, s29
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1342:	ed94 8a00 	vldr	s16, [r4]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1346:	ed99 7a00 	vldr	s14, [r9]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    134a:	eea7 8aaa 	vfma.f32	s16, s15, s21
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    134e:	edda 7a00 	vldr	s15, [sl]
						if (height2 < 1.0f)
    1352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1356:	eee7 7a0b 	vfma.f32	s15, s14, s22
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    135a:	ee2a 8a08 	vmul.f32	s16, s20, s16
    135e:	eeaf 8aa7 	vfma.f32	s16, s31, s15
						if (height2 < 1.0f)
    1362:	f100 80a5 	bmi.w	14b0 <audioFrameAdditive+0x730>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1366:	eddb 7a04 	vldr	s15, [fp, #16]
    136a:	edd8 6a2d 	vldr	s13, [r8, #180]	; 0xb4
    if (val < min)
    136e:	eef4 7acf 	vcmpe.f32	s15, s30
    1372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1376:	dc03      	bgt.n	1380 <audioFrameAdditive+0x600>
    else if (val > max)
    1378:	eddb 7a05 	vldr	s15, [fp, #20]
    137c:	fecf 7a67 	vminnm.f32	s15, s30, s15
    1380:	ed96 7a2d 	vldr	s14, [r6, #180]	; 0xb4
    1384:	eea6 7aa7 	vfma.f32	s14, s13, s15
    1388:	eece 7a87 	vdiv.f32	s15, s29, s14
						if (height1 < 1.0f)
    138c:	eef4 9aee 	vcmpe.f32	s19, s29
    1390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1394:	d478      	bmi.n	1488 <audioFrameAdditive+0x708>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    1396:	ed9b 7a01 	vldr	s14, [fp, #4]
    139a:	ed98 6a0f 	vldr	s12, [r8, #60]	; 0x3c
    if (val < min)
    139e:	eeb4 7acf 	vcmpe.f32	s14, s30
    13a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13a6:	dc03      	bgt.n	13b0 <audioFrameAdditive+0x630>
    else if (val > max)
    13a8:	ed9b 7a02 	vldr	s14, [fp, #8]
    13ac:	fe8f 7a47 	vminnm.f32	s14, s30, s14
    13b0:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
    13b4:	eee6 6a07 	vfma.f32	s13, s12, s14
    13b8:	ee8e 7aa6 	vdiv.f32	s14, s29, s13
    13bc:	e785      	b.n	12ca <audioFrameAdditive+0x54a>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    13be:	f240 3bd8 	movw	fp, #984	; 0x3d8
					stringFade = (float)thisString * 0.2f;
    13c2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    13c6:	f2c2 0b00 	movt	fp, #8192	; 0x2000
					stringFade = (float)thisString * 0.2f;
    13ca:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    13ce:	eddb 6a06 	vldr	s13, [fp, #24]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    13d2:	eddb 7a08 	vldr	s15, [fp, #32]
    13d6:	ee3f 6a66 	vsub.f32	s12, s30, s13
    13da:	ee77 7ae6 	vsub.f32	s15, s15, s13
    13de:	eec6 6a27 	vdiv.f32	s13, s12, s15
					stringFade = (float)thisString * 0.2f;
    13e2:	ee07 3a90 	vmov	s15, r3
    13e6:	ee6f faa7 	vmul.f32	s31, s31, s15
    13ea:	ee36 9aa6 	vadd.f32	s18, s13, s13
    if (val < min)
    13ee:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    13f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13f6:	f100 80c9 	bmi.w	158c <audioFrameAdditive+0x80c>
    else if (val > max)
    13fa:	f64b 0352 	movw	r3, #47186	; 0xb852
    13fe:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
    1402:	ee07 3a90 	vmov	s15, r3
    1406:	eef4 6ae7 	vcmpe.f32	s13, s15
    140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    140e:	f300 809b 	bgt.w	1548 <audioFrameAdditive+0x7c8>
				int height2Int = floor(height2);
    1412:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
    1416:	febb 7b47 	vrintm.f64	d7, d7
    141a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
				float height2Float = height2 - height2Int;
    141e:	eef8 cae7 	vcvt.f32.s32	s25, s15
				int height2Int = floor(height2);
    1422:	ee17 4a90 	vmov	r4, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1426:	1c63      	adds	r3, r4, #1
				float height2Float = height2 - height2Int;
    1428:	ee79 aa6c 	vsub.f32	s21, s18, s25
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    142c:	ed9b 7a03 	vldr	s14, [fp, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    1430:	eddb 7a05 	vldr	s15, [fp, #20]
    1434:	ee3f 6a47 	vsub.f32	s12, s30, s14
    1438:	ee77 7ac7 	vsub.f32	s15, s15, s14
    143c:	eec6 6a27 	vdiv.f32	s13, s12, s15
    1440:	ee76 9aa6 	vadd.f32	s19, s13, s13
    if (val < min)
    1444:	eef5 9ac0 	vcmpe.f32	s19, #0.0
    1448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    144c:	d473      	bmi.n	1536 <audioFrameAdditive+0x7b6>
    else if (val > max)
    144e:	f64b 0252 	movw	r2, #47186	; 0xb852
    1452:	f6c3 727e 	movt	r2, #16254	; 0x3f7e
    1456:	ee07 2a90 	vmov	s15, r2
    145a:	eef4 6ae7 	vcmpe.f32	s13, s15
    145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1462:	f77f aea3 	ble.w	11ac <audioFrameAdditive+0x42c>
    1466:	f247 02a4 	movw	r2, #28836	; 0x70a4
    146a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    146e:	2001      	movs	r0, #1
    1470:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
    1474:	ee0b 2a10 	vmov	s22, r2
        return max;
    1478:	f64b 0252 	movw	r2, #47186	; 0xb852
    147c:	f6c3 72fe 	movt	r2, #16382	; 0x3ffe
    1480:	ee09 2a90 	vmov	s19, r2
    1484:	2202      	movs	r2, #2
    1486:	e69e      	b.n	11c6 <audioFrameAdditive+0x446>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    1488:	ed9b 7a00 	vldr	s14, [fp]
    148c:	ed98 6a00 	vldr	s12, [r8]
    if (val < min)
    1490:	eeb4 7acf 	vcmpe.f32	s14, s30
    1494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1498:	dc03      	bgt.n	14a2 <audioFrameAdditive+0x722>
    else if (val > max)
    149a:	ed9b 7a01 	vldr	s14, [fp, #4]
    149e:	fe8f 7a47 	vminnm.f32	s14, s30, s14
    14a2:	edd6 6a00 	vldr	s13, [r6]
    14a6:	eee6 6a07 	vfma.f32	s13, s12, s14
    14aa:	ee8e 7aa6 	vdiv.f32	s14, s29, s13
    14ae:	e70c      	b.n	12ca <audioFrameAdditive+0x54a>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    14b0:	eddb 7a03 	vldr	s15, [fp, #12]
    14b4:	edd8 6a1e 	vldr	s13, [r8, #120]	; 0x78
    if (val < min)
    14b8:	eef4 7acf 	vcmpe.f32	s15, s30
    14bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14c0:	dc03      	bgt.n	14ca <audioFrameAdditive+0x74a>
    else if (val > max)
    14c2:	eddb 7a04 	vldr	s15, [fp, #16]
    14c6:	fecf 7a67 	vminnm.f32	s15, s30, s15
    14ca:	ed96 7a1e 	vldr	s14, [r6, #120]	; 0x78
    14ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
    14d2:	eece 7a87 	vdiv.f32	s15, s29, s14
    14d6:	e759      	b.n	138c <audioFrameAdditive+0x60c>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    14d8:	ed9b 7a03 	vldr	s14, [fp, #12]
    14dc:	ed98 6a1e 	vldr	s12, [r8, #120]	; 0x78
    if (val < min)
    14e0:	eeb4 7acf 	vcmpe.f32	s14, s30
    14e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e8:	dc03      	bgt.n	14f2 <audioFrameAdditive+0x772>
    else if (val > max)
    14ea:	ed9b 7a04 	vldr	s14, [fp, #16]
    14ee:	fe8f 7a47 	vminnm.f32	s14, s30, s14
    14f2:	edd6 6a1e 	vldr	s13, [r6, #120]	; 0x78
    14f6:	eee6 6a07 	vfma.f32	s13, s12, s14
    14fa:	ee8e 7aa6 	vdiv.f32	s14, s29, s13
    14fe:	e6e4      	b.n	12ca <audioFrameAdditive+0x54a>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1500:	eddb 7a06 	vldr	s15, [fp, #24]
    1504:	edd8 6a3c 	vldr	s13, [r8, #240]	; 0xf0
    if (val < min)
    1508:	eef4 7acf 	vcmpe.f32	s15, s30
    150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1510:	dc03      	bgt.n	151a <audioFrameAdditive+0x79a>
    else if (val > max)
    1512:	eddb 7a07 	vldr	s15, [fp, #28]
    1516:	fecf 7a67 	vminnm.f32	s15, s30, s15
    151a:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    151e:	eea6 7aa7 	vfma.f32	s14, s13, s15
    1522:	eece 7a87 	vdiv.f32	s15, s29, s14
    1526:	e6b7      	b.n	1298 <audioFrameAdditive+0x518>
    1528:	9c05      	ldr	r4, [sp, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
    152a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    152c:	343c      	adds	r4, #60	; 0x3c
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	e9dd 5a0e 	ldrd	r5, sl, [sp, #56]	; 0x38
    1534:	e4de      	b.n	ef4 <audioFrameAdditive+0x174>
    1536:	eeb0 ba6b 	vmov.f32	s22, s23
    153a:	2201      	movs	r2, #1
    153c:	eef0 7a6b 	vmov.f32	s15, s23
    1540:	2000      	movs	r0, #0
        return min;
    1542:	eef0 9a6b 	vmov.f32	s19, s23
    1546:	e63e      	b.n	11c6 <audioFrameAdditive+0x446>
    1548:	f247 03a4 	movw	r3, #28836	; 0x70a4
    154c:	eef0 ca47 	vmov.f32	s25, s14
    1550:	2401      	movs	r4, #1
    1552:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
    1556:	ee0a 3a90 	vmov	s21, r3
        return max;
    155a:	f64b 0352 	movw	r3, #47186	; 0xb852
    155e:	f6c3 73fe 	movt	r3, #16382	; 0x3ffe
    1562:	ee09 3a10 	vmov	s18, r3
    1566:	2302      	movs	r3, #2
    1568:	e760      	b.n	142c <audioFrameAdditive+0x6ac>
    156a:	f247 03a4 	movw	r3, #28836	; 0x70a4
    156e:	eef0 ca47 	vmov.f32	s25, s14
    1572:	2401      	movs	r4, #1
    1574:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
    1578:	ee0a 3a90 	vmov	s21, r3
    157c:	f64b 0352 	movw	r3, #47186	; 0xb852
    1580:	f6c3 73fe 	movt	r3, #16382	; 0x3ffe
    1584:	ee09 3a10 	vmov	s18, r3
    1588:	2302      	movs	r3, #2
    158a:	e5f1      	b.n	1170 <audioFrameAdditive+0x3f0>
    158c:	eef0 aa6b 	vmov.f32	s21, s23
    1590:	2301      	movs	r3, #1
    1592:	eef0 ca6b 	vmov.f32	s25, s23
        return min;
    1596:	eeb0 9a6b 	vmov.f32	s18, s23
    159a:	e747      	b.n	142c <audioFrameAdditive+0x6ac>
    159c:	eef0 aa6b 	vmov.f32	s21, s23
    15a0:	2301      	movs	r3, #1
    15a2:	eef0 ca6b 	vmov.f32	s25, s23
    15a6:	eeb0 9a6b 	vmov.f32	s18, s23
    15aa:	e5e1      	b.n	1170 <audioFrameAdditive+0x3f0>
	...

000015c0 <audioFrameWaiting>:


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	uint32_t tempCountFrame = DWT->CYCCNT;
    15c0:	f240 0200 	movw	r2, #0
    15c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    15c8:	f2c3 0200 	movt	r2, #12288	; 0x3000
    15cc:	f2ce 0100 	movt	r1, #57344	; 0xe000
    15d0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
{
    15d4:	b410      	push	{r4}
	uint32_t tempCountFrame = DWT->CYCCNT;
    15d6:	684c      	ldr	r4, [r1, #4]
	//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    15d8:	0759      	lsls	r1, r3, #29
    15da:	d127      	bne.n	162c <audioFrameWaiting+0x6c>
    15dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
	{
		int iplusbuffer = buffer_offset + i;
		audioOutBuffer[iplusbuffer] = 0;
    15e0:	2000      	movs	r0, #0
    15e2:	2100      	movs	r1, #0
    15e4:	e8e3 0102 	strd	r0, r1, [r3], #8
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    15e8:	4293      	cmp	r3, r2
    15ea:	d1fb      	bne.n	15e4 <audioFrameWaiting+0x24>
		audioOutBuffer[iplusbuffer + 1] = 0;
	}
	timeFrame = DWT->CYCCNT - tempCountFrame;
    15ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    15f0:	f240 6084 	movw	r0, #1668	; 0x684
	timeFrame = DWT->CYCCNT - tempCountFrame;
    15f4:	f244 2140 	movw	r1, #16960	; 0x4240
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    15f8:	f245 12cc 	movw	r2, #20940	; 0x51cc
	timeFrame = DWT->CYCCNT - tempCountFrame;
    15fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1600:	f2c2 0000 	movt	r0, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1604:	f2c2 0101 	movt	r1, #8193	; 0x2001
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1608:	f2c2 0200 	movt	r2, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    160c:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    160e:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1612:	1b1b      	subs	r3, r3, r4
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1614:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1618:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    161e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1622:	edc2 7a00 	vstr	s15, [r2]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    1626:	f85d 4b04 	ldr.w	r4, [sp], #4
    162a:	4770      	bx	lr
    162c:	f502 7100 	add.w	r1, r2, #512	; 0x200
    1630:	ea4f 0c80 	mov.w	ip, r0, lsl #2
		audioOutBuffer[iplusbuffer] = 0;
    1634:	2200      	movs	r2, #0
    1636:	4461      	add	r1, ip
		audioOutBuffer[iplusbuffer + 1] = 0;
    1638:	e9c3 2200 	strd	r2, r2, [r3]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    163c:	3308      	adds	r3, #8
    163e:	428b      	cmp	r3, r1
    1640:	d1fa      	bne.n	1638 <audioFrameWaiting+0x78>
    1642:	e7d3      	b.n	15ec <audioFrameWaiting+0x2c>
    1644:	f3af 8000 	nop.w
    1648:	f3af 8000 	nop.w
    164c:	f3af 8000 	nop.w
    1650:	f3af 8000 	nop.w
    1654:	f3af 8000 	nop.w
    1658:	f3af 8000 	nop.w
    165c:	f3af 8000 	nop.w

00001660 <updateStateFromSPIMessage>:
{
    1660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1662:	f640 0300 	movw	r3, #2048	; 0x800
	uint32_t tempCountSPI = DWT->CYCCNT;
    1666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	octaveAction = (modeBit >> 6) & 1;
    166a:	f245 2cf8 	movw	ip, #21240	; 0x52f8
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    166e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1672:	f2c3 0300 	movt	r3, #12288	; 0x3000
	uint32_t tempCountSPI = DWT->CYCCNT;
    1676:	f2ce 0100 	movt	r1, #57344	; 0xe000
	octaveAction = (modeBit >> 6) & 1;
    167a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
	int modeBit = SPI_LEVERS_RX[24 + offset];
    167e:	181a      	adds	r2, r3, r0
	uint32_t tempCountSPI = DWT->CYCCNT;
    1680:	684c      	ldr	r4, [r1, #4]
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1682:	7e11      	ldrb	r1, [r2, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    1684:	7e55      	ldrb	r5, [r2, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1686:	f001 020f 	and.w	r2, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    168a:	f3c1 1680 	ubfx	r6, r1, #6, #1
	dualSlider = (modeBit >> 5) & 1;
    168e:	f3c1 1740 	ubfx	r7, r1, #5, #1
	edit = (modeBit >> 4) & 1;
    1692:	f3c1 1100 	ubfx	r1, r1, #4, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1696:	3a05      	subs	r2, #5
	octaveAction = (modeBit >> 6) & 1;
    1698:	f88c 6000 	strb.w	r6, [ip]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    169c:	ee07 2a90 	vmov	s15, r2
	voice = SPI_LEVERS_RX[25 + offset];
    16a0:	f244 224c 	movw	r2, #16972	; 0x424c
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    16a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	voice = SPI_LEVERS_RX[25 + offset];
    16a8:	f2c2 0201 	movt	r2, #8193	; 0x2001
    16ac:	6015      	str	r5, [r2, #0]
	dualSlider = (modeBit >> 5) & 1;
    16ae:	f245 15b4 	movw	r5, #20916	; 0x51b4
	if (octaveAction)
    16b2:	f89c 6000 	ldrb.w	r6, [ip]
	edit = (modeBit >> 4) & 1;
    16b6:	f245 12b8 	movw	r2, #20920	; 0x51b8
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    16ba:	f245 2cf4 	movw	ip, #21236	; 0x52f4
    16be:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    16c2:	f2c2 0500 	movt	r5, #8192	; 0x2000
	edit = (modeBit >> 4) & 1;
    16c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    16ca:	f2c2 0c00 	movt	ip, #8192	; 0x2000
	dualSlider = (modeBit >> 5) & 1;
    16ce:	602f      	str	r7, [r5, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    16d0:	edcc 7a00 	vstr	s15, [ip]
	edit = (modeBit >> 4) & 1;
    16d4:	6011      	str	r1, [r2, #0]
	if (octaveAction)
    16d6:	b17e      	cbz	r6, 16f8 <updateStateFromSPIMessage+0x98>
		for (int i = 0; i < numStringsThisBoard; i++)
    16d8:	f240 6294 	movw	r2, #1684	; 0x694
    16dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    16e0:	7811      	ldrb	r1, [r2, #0]
    16e2:	b149      	cbz	r1, 16f8 <updateStateFromSPIMessage+0x98>
			stringOctave[i] = octave;
    16e4:	f244 2224 	movw	r2, #16932	; 0x4224
		for (int i = 0; i < numStringsThisBoard; i++)
    16e8:	2901      	cmp	r1, #1
			stringOctave[i] = octave;
    16ea:	f2c2 0201 	movt	r2, #8193	; 0x2001
    16ee:	edc2 7a00 	vstr	s15, [r2]
    16f2:	bf18      	it	ne
    16f4:	edc2 7a01 	vstrne	s15, [r2, #4]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    16f8:	4418      	add	r0, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    16fa:	f640 0301 	movw	r3, #2049	; 0x801
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    16fe:	f244 2154 	movw	r1, #16980	; 0x4254
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1702:	f244 225c 	movw	r2, #16988	; 0x425c
	volumePedal = volumePedalInt * 0.0002442002442f;
    1706:	f6c3 1380 	movt	r3, #14720	; 0x3980
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    170a:	7e85      	ldrb	r5, [r0, #26]
    170c:	f2c2 0101 	movt	r1, #8193	; 0x2001
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1710:	f2c2 0201 	movt	r2, #8193	; 0x2001
	volumePedal = volumePedalInt * 0.0002442002442f;
    1714:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1718:	7ec3      	ldrb	r3, [r0, #27]
    171a:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    171e:	7f45      	ldrb	r5, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1720:	b29b      	uxth	r3, r3
    1722:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1724:	880b      	ldrh	r3, [r1, #0]
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1726:	7811      	ldrb	r1, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1728:	b29b      	uxth	r3, r3
    172a:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    172e:	7f03      	ldrb	r3, [r0, #28]
    1730:	b2c8      	uxtb	r0, r1
	volumePedal = volumePedalInt * 0.0002442002442f;
    1732:	f244 2150 	movw	r1, #16976	; 0x4250
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1736:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    173a:	f244 232c 	movw	r3, #16940	; 0x422c
	volumePedal = volumePedalInt * 0.0002442002442f;
    173e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    1742:	f2c2 0101 	movt	r1, #8193	; 0x2001
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1746:	f2c2 0301 	movt	r3, #8193	; 0x2001
    174a:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	volumePedal = volumePedalInt * 0.0002442002442f;
    174e:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1752:	7810      	ldrb	r0, [r2, #0]
    1754:	b2c0      	uxtb	r0, r0
	volumePedal = volumePedalInt * 0.0002442002442f;
    1756:	ed81 0a00 	vstr	s0, [r1]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    175a:	f244 2134 	movw	r1, #16948	; 0x4234
    175e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1762:	7810      	ldrb	r0, [r2, #0]
    1764:	f2c2 0101 	movt	r1, #8193	; 0x2001
    1768:	b2c0      	uxtb	r0, r0
    176a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    176e:	4285      	cmp	r5, r0
    1770:	d01f      	beq.n	17b2 <updateStateFromSPIMessage+0x152>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1772:	7810      	ldrb	r0, [r2, #0]
    1774:	7812      	ldrb	r2, [r2, #0]
    1776:	b2c0      	uxtb	r0, r0
    1778:	b2d2      	uxtb	r2, r2
    177a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    177e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1782:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
    1786:	ed93 7a00 	vldr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    178a:	edd3 7a01 	vldr	s15, [r3, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    178e:	ee06 2a90 	vmov	s13, r2
    1792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1796:	f241 1390 	movw	r3, #4496	; 0x1190
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    179e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    17a2:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    17a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    17aa:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    17ae:	edc3 7a01 	vstr	s15, [r3, #4]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    17b2:	f244 2058 	movw	r0, #16984	; 0x4258
    17b6:	f2c2 0001 	movt	r0, #8193	; 0x2001
    17ba:	f00b fd3d 	bl	d238 <__tExpSmooth_setDest_veneer>
	timeSPI = DWT->CYCCNT - tempCountSPI;
    17be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17c2:	f244 2344 	movw	r3, #16964	; 0x4244
    17c6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    17ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
    17ce:	6852      	ldr	r2, [r2, #4]
    17d0:	1b12      	subs	r2, r2, r4
    17d2:	601a      	str	r2, [r3, #0]
}
    17d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d6:	bf00      	nop
    17d8:	f3af 8000 	nop.w
    17dc:	f3af 8000 	nop.w

000017e0 <HAL_SAI_TxCpltCallback>:
{
    17e0:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    17e2:	f244 458c 	movw	r5, #17548	; 0x448c
    17e6:	f2c2 0501 	movt	r5, #8193	; 0x2001
    17ea:	782b      	ldrb	r3, [r5, #0]
    17ec:	b93b      	cbnz	r3, 17fe <HAL_SAI_TxCpltCallback+0x1e>
    17ee:	f245 334c 	movw	r3, #21324	; 0x534c
    17f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	f040 8095 	bne.w	1928 <HAL_SAI_TxCpltCallback+0x148>
	if (voice != prevVoice)
    17fe:	f244 244c 	movw	r4, #16972	; 0x424c
    1802:	f240 669c 	movw	r6, #1692	; 0x69c
    1806:	f2c2 0401 	movt	r4, #8193	; 0x2001
    180a:	f2c2 0600 	movt	r6, #8192	; 0x2000
    180e:	6822      	ldr	r2, [r4, #0]
    1810:	6833      	ldr	r3, [r6, #0]
    1812:	429a      	cmp	r2, r3
    1814:	f000 8090 	beq.w	1938 <HAL_SAI_TxCpltCallback+0x158>
		if (voice == 63)
    1818:	6823      	ldr	r3, [r4, #0]
    181a:	2b3f      	cmp	r3, #63	; 0x3f
    181c:	f000 80b3 	beq.w	1986 <HAL_SAI_TxCpltCallback+0x1a6>
		else if (voice == 62)
    1820:	6823      	ldr	r3, [r4, #0]
    1822:	2b3e      	cmp	r3, #62	; 0x3e
    1824:	f000 8093 	beq.w	194e <HAL_SAI_TxCpltCallback+0x16e>
		else if (voice == 61)
    1828:	6823      	ldr	r3, [r4, #0]
    182a:	2b3d      	cmp	r3, #61	; 0x3d
    182c:	f000 80c6 	beq.w	19bc <HAL_SAI_TxCpltCallback+0x1dc>
		else if (voice == 60)
    1830:	6823      	ldr	r3, [r4, #0]
    1832:	2b3c      	cmp	r3, #60	; 0x3c
    1834:	f000 80e3 	beq.w	19fe <HAL_SAI_TxCpltCallback+0x21e>
		else if (voice == 59)
    1838:	6823      	ldr	r3, [r4, #0]
    183a:	2b3b      	cmp	r3, #59	; 0x3b
    183c:	f000 8100 	beq.w	1a40 <HAL_SAI_TxCpltCallback+0x260>
			presetWaitingToLoad = 1;
    1840:	f24a 416c 	movw	r1, #42092	; 0xa46c
    1844:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    1846:	f24a 436a 	movw	r3, #42090	; 0xa46a
			audioFrameFunction = audioFrameWaiting;
    184a:	f241 128c 	movw	r2, #4492	; 0x118c
			presetWaitingToLoad = 1;
    184e:	f2c2 0101 	movt	r1, #8193	; 0x2001
			presetNumberToLoad = voice;
    1852:	f2c2 0301 	movt	r3, #8193	; 0x2001
			audioFrameFunction = audioFrameWaiting;
    1856:	f2c2 0200 	movt	r2, #8192	; 0x2000
			presetWaitingToLoad = 1;
    185a:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    185c:	6821      	ldr	r1, [r4, #0]
    185e:	b2c9      	uxtb	r1, r1
    1860:	7019      	strb	r1, [r3, #0]
			audioFrameFunction = audioFrameWaiting;
    1862:	f241 51c1 	movw	r1, #5569	; 0x15c1
			presetReady = 0;
    1866:	f245 334c 	movw	r3, #21324	; 0x534c
			audioFrameFunction = audioFrameWaiting;
    186a:	f2c0 0100 	movt	r1, #0
			presetReady = 0;
    186e:	f2c2 0300 	movt	r3, #8192	; 0x2000
			audioFrameFunction = audioFrameWaiting;
    1872:	6011      	str	r1, [r2, #0]
			presetReady = 0;
    1874:	2200      	movs	r2, #0
    1876:	601a      	str	r2, [r3, #0]
			if (prevVoice > 58)
    1878:	6833      	ldr	r3, [r6, #0]
    187a:	2b3a      	cmp	r3, #58	; 0x3a
    187c:	dc61      	bgt.n	1942 <HAL_SAI_TxCpltCallback+0x162>
			frameLoadOverCount = 0;
    187e:	2100      	movs	r1, #0
    1880:	f245 13c8 	movw	r3, #20936	; 0x51c8
    1884:	460a      	mov	r2, r1
    1886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    188a:	6019      	str	r1, [r3, #0]
			whichModel = 1;
    188c:	f64c 2371 	movw	r3, #51825	; 0xca71
    1890:	f240 0500 	movw	r5, #0
			audioOutBuffer[i] = 0;
    1894:	2000      	movs	r0, #0
    1896:	2100      	movs	r1, #0
			whichModel = 1;
    1898:	f2c2 0301 	movt	r3, #8193	; 0x2001
    189c:	f2c3 0500 	movt	r5, #12288	; 0x3000
    18a0:	701a      	strb	r2, [r3, #0]
    18a2:	462b      	mov	r3, r5
    18a4:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    18a8:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    18ac:	4293      	cmp	r3, r2
    18ae:	d1fb      	bne.n	18a8 <HAL_SAI_TxCpltCallback+0xc8>
	uint32_t tempCountClean = DWT->CYCCNT;
    18b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	prevVoice = voice;
    18b4:	6823      	ldr	r3, [r4, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    18b6:	f2ce 0100 	movt	r1, #57344	; 0xe000
	prevVoice = voice;
    18ba:	6033      	str	r3, [r6, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    18bc:	6848      	ldr	r0, [r1, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    18be:	f3bf 8f4f 	dsb	sy

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18c2:	f240 0220 	movw	r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18c6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18ca:	f2c3 0200 	movt	r2, #12288	; 0x3000
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18d2:	f102 0420 	add.w	r4, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18d6:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    18da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    18de:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18e2:	f102 0440 	add.w	r4, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18e6:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18ea:	f102 0460 	add.w	r4, r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18ee:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18f2:	f102 0480 	add.w	r4, r2, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18f6:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    18fa:	f102 04a0 	add.w	r4, r2, #160	; 0xa0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18fe:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1902:	f102 04c0 	add.w	r4, r2, #192	; 0xc0
    1906:	32e0      	adds	r2, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1908:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    190c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1914:	f3bf 8f6f 	isb	sy
	timeClean = DWT->CYCCNT - tempCountClean;
    1918:	f244 233c 	movw	r3, #16956	; 0x423c
    191c:	684a      	ldr	r2, [r1, #4]
    191e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    1922:	1a12      	subs	r2, r2, r0
    1924:	601a      	str	r2, [r3, #0]
}
    1926:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    1928:	f241 138c 	movw	r3, #4492	; 0x118c
    192c:	2080      	movs	r0, #128	; 0x80
    192e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	4798      	blx	r3
    1936:	e762      	b.n	17fe <HAL_SAI_TxCpltCallback+0x1e>
    1938:	f240 0500 	movw	r5, #0
    193c:	f2c3 0500 	movt	r5, #12288	; 0x3000
    1940:	e7b6      	b.n	18b0 <HAL_SAI_TxCpltCallback+0xd0>
				resetStringInputs = 1;
    1942:	f245 7371 	movw	r3, #22385	; 0x5771
    1946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    194a:	7018      	strb	r0, [r3, #0]
    194c:	e797      	b.n	187e <HAL_SAI_TxCpltCallback+0x9e>
			audioFrameFunction = audioFrameWaiting;
    194e:	f241 138c 	movw	r3, #4492	; 0x118c
    1952:	f241 52c1 	movw	r2, #5569	; 0x15c1
    1956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    195a:	f2c0 0200 	movt	r2, #0
    195e:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    1960:	f005 ff2e 	bl	77c0 <audioSwitchToString2>
			currentActivePreset = voice;
    1964:	6822      	ldr	r2, [r4, #0]
    1966:	f240 63a5 	movw	r3, #1701	; 0x6a5
    196a:	b2d2      	uxtb	r2, r2
    196c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1970:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    1972:	f245 7371 	movw	r3, #22385	; 0x5771
    1976:	2201      	movs	r2, #1
    1978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    197c:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    197e:	2300      	movs	r3, #0
    1980:	2202      	movs	r2, #2
    1982:	702b      	strb	r3, [r5, #0]
			whichModel = 2;
    1984:	e782      	b.n	188c <HAL_SAI_TxCpltCallback+0xac>
			audioFrameFunction = audioFrameWaiting;
    1986:	f241 138c 	movw	r3, #4492	; 0x118c
    198a:	f241 52c1 	movw	r2, #5569	; 0x15c1
    198e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1992:	f2c0 0200 	movt	r2, #0
    1996:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    1998:	f005 fad2 	bl	6f40 <audioSwitchToString1>
			currentActivePreset = voice;
    199c:	6822      	ldr	r2, [r4, #0]
    199e:	f240 63a5 	movw	r3, #1701	; 0x6a5
    19a2:	b2d2      	uxtb	r2, r2
    19a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19a8:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    19aa:	f245 7371 	movw	r3, #22385	; 0x5771
    19ae:	2201      	movs	r2, #1
    19b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19b4:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    19b6:	2300      	movs	r3, #0
    19b8:	702b      	strb	r3, [r5, #0]
			whichModel = 1;
    19ba:	e767      	b.n	188c <HAL_SAI_TxCpltCallback+0xac>
			audioFrameFunction = audioFrameAdditive;
    19bc:	f241 138c 	movw	r3, #4492	; 0x118c
    19c0:	f640 5281 	movw	r2, #3457	; 0xd81
    19c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19c8:	f2c0 0200 	movt	r2, #0
    19cc:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    19ce:	f7fe ff87 	bl	8e0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    19d2:	6822      	ldr	r2, [r4, #0]
    19d4:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    19d8:	2101      	movs	r1, #1
			diskBusy = 0;
    19da:	2000      	movs	r0, #0
			currentActivePreset = voice;
    19dc:	b2d2      	uxtb	r2, r2
    19de:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    19e2:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    19e4:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    19e6:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    19ea:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    19ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    19f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    19f6:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    19f8:	2203      	movs	r2, #3
    19fa:	7019      	strb	r1, [r3, #0]
			whichModel = 3;
    19fc:	e746      	b.n	188c <HAL_SAI_TxCpltCallback+0xac>
			audioFrameFunction = audioFrameVocal;
    19fe:	f241 138c 	movw	r3, #4492	; 0x118c
    1a02:	f64c 52a1 	movw	r2, #52641	; 0xcda1
    1a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a0a:	f2c0 0200 	movt	r2, #0
    1a0e:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    1a10:	f00b f8a6 	bl	cb60 <audioSwitchToVocal>
			currentActivePreset = voice;
    1a14:	6822      	ldr	r2, [r4, #0]
    1a16:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    1a1a:	2101      	movs	r1, #1
			diskBusy = 0;
    1a1c:	2000      	movs	r0, #0
			currentActivePreset = voice;
    1a1e:	b2d2      	uxtb	r2, r2
    1a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    1a24:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    1a26:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1a28:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    1a2c:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    1a30:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    1a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    1a38:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    1a3a:	2204      	movs	r2, #4
    1a3c:	7019      	strb	r1, [r3, #0]
			whichModel = 4;
    1a3e:	e725      	b.n	188c <HAL_SAI_TxCpltCallback+0xac>
			audioFrameFunction = audioFrameString3;
    1a40:	f241 138c 	movw	r3, #4492	; 0x118c
    1a44:	f248 6201 	movw	r2, #34305	; 0x8601
    1a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a4c:	f2c0 0200 	movt	r2, #0
    1a50:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    1a52:	f006 fc55 	bl	8300 <audioSwitchToString3>
			currentActivePreset = voice;
    1a56:	6822      	ldr	r2, [r4, #0]
    1a58:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    1a5c:	2101      	movs	r1, #1
			diskBusy = 0;
    1a5e:	2000      	movs	r0, #0
			currentActivePreset = voice;
    1a60:	b2d2      	uxtb	r2, r2
    1a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    1a66:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    1a68:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1a6a:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    1a6e:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    1a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    1a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    1a7a:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    1a7c:	2205      	movs	r2, #5
    1a7e:	7019      	strb	r1, [r3, #0]
			whichModel = 5;
    1a80:	e704      	b.n	188c <HAL_SAI_TxCpltCallback+0xac>
    1a82:	bf00      	nop
    1a84:	f3af 8000 	nop.w
    1a88:	f3af 8000 	nop.w
    1a8c:	f3af 8000 	nop.w
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <HAL_SAI_TxHalfCpltCallback>:
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1aa2:	f244 458c 	movw	r5, #17548	; 0x448c
    1aa6:	f2c2 0501 	movt	r5, #8193	; 0x2001
    1aaa:	7828      	ldrb	r0, [r5, #0]
    1aac:	b938      	cbnz	r0, 1abe <HAL_SAI_TxHalfCpltCallback+0x1e>
    1aae:	f245 334c 	movw	r3, #21324	; 0x534c
    1ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	f040 8089 	bne.w	1bd0 <HAL_SAI_TxHalfCpltCallback+0x130>
	if (voice != prevVoice)
    1abe:	f244 244c 	movw	r4, #16972	; 0x424c
    1ac2:	f240 669c 	movw	r6, #1692	; 0x69c
    1ac6:	f2c2 0401 	movt	r4, #8193	; 0x2001
    1aca:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1ace:	6822      	ldr	r2, [r4, #0]
    1ad0:	6833      	ldr	r3, [r6, #0]
    1ad2:	429a      	cmp	r2, r3
    1ad4:	f000 8083 	beq.w	1bde <HAL_SAI_TxHalfCpltCallback+0x13e>
		if (voice == 63)
    1ad8:	6823      	ldr	r3, [r4, #0]
    1ada:	2b3f      	cmp	r3, #63	; 0x3f
    1adc:	f000 80a6 	beq.w	1c2c <HAL_SAI_TxHalfCpltCallback+0x18c>
		else if (voice == 62)
    1ae0:	6823      	ldr	r3, [r4, #0]
    1ae2:	2b3e      	cmp	r3, #62	; 0x3e
    1ae4:	f000 8086 	beq.w	1bf4 <HAL_SAI_TxHalfCpltCallback+0x154>
		else if (voice == 61)
    1ae8:	6823      	ldr	r3, [r4, #0]
    1aea:	2b3d      	cmp	r3, #61	; 0x3d
    1aec:	f000 80b9 	beq.w	1c62 <HAL_SAI_TxHalfCpltCallback+0x1c2>
		else if (voice == 60)
    1af0:	6823      	ldr	r3, [r4, #0]
    1af2:	2b3c      	cmp	r3, #60	; 0x3c
    1af4:	f000 80d6 	beq.w	1ca4 <HAL_SAI_TxHalfCpltCallback+0x204>
		else if (voice == 59)
    1af8:	6823      	ldr	r3, [r4, #0]
    1afa:	2b3b      	cmp	r3, #59	; 0x3b
    1afc:	f000 80f3 	beq.w	1ce6 <HAL_SAI_TxHalfCpltCallback+0x246>
			presetWaitingToLoad = 1;
    1b00:	f24a 416c 	movw	r1, #42092	; 0xa46c
    1b04:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    1b06:	f24a 436a 	movw	r3, #42090	; 0xa46a
			audioFrameFunction = audioFrameWaiting;
    1b0a:	f241 128c 	movw	r2, #4492	; 0x118c
			presetWaitingToLoad = 1;
    1b0e:	f2c2 0101 	movt	r1, #8193	; 0x2001
			presetNumberToLoad = voice;
    1b12:	f2c2 0301 	movt	r3, #8193	; 0x2001
			audioFrameFunction = audioFrameWaiting;
    1b16:	f2c2 0200 	movt	r2, #8192	; 0x2000
			presetWaitingToLoad = 1;
    1b1a:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    1b1c:	6821      	ldr	r1, [r4, #0]
    1b1e:	b2c9      	uxtb	r1, r1
    1b20:	7019      	strb	r1, [r3, #0]
			audioFrameFunction = audioFrameWaiting;
    1b22:	f241 51c1 	movw	r1, #5569	; 0x15c1
			presetReady = 0;
    1b26:	f245 334c 	movw	r3, #21324	; 0x534c
			audioFrameFunction = audioFrameWaiting;
    1b2a:	f2c0 0100 	movt	r1, #0
			presetReady = 0;
    1b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
			audioFrameFunction = audioFrameWaiting;
    1b32:	6011      	str	r1, [r2, #0]
			presetReady = 0;
    1b34:	2200      	movs	r2, #0
    1b36:	601a      	str	r2, [r3, #0]
			if (prevVoice > 58)
    1b38:	6833      	ldr	r3, [r6, #0]
    1b3a:	2b3a      	cmp	r3, #58	; 0x3a
    1b3c:	dc54      	bgt.n	1be8 <HAL_SAI_TxHalfCpltCallback+0x148>
			frameLoadOverCount = 0;
    1b3e:	2100      	movs	r1, #0
    1b40:	f245 13c8 	movw	r3, #20936	; 0x51c8
    1b44:	460a      	mov	r2, r1
    1b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b4a:	6019      	str	r1, [r3, #0]
			whichModel = 1;
    1b4c:	f64c 2371 	movw	r3, #51825	; 0xca71
    1b50:	f240 0500 	movw	r5, #0
			audioOutBuffer[i] = 0;
    1b54:	2000      	movs	r0, #0
    1b56:	2100      	movs	r1, #0
			whichModel = 1;
    1b58:	f2c2 0301 	movt	r3, #8193	; 0x2001
    1b5c:	f2c3 0500 	movt	r5, #12288	; 0x3000
    1b60:	701a      	strb	r2, [r3, #0]
    1b62:	462b      	mov	r3, r5
    1b64:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    1b68:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    1b6c:	4293      	cmp	r3, r2
    1b6e:	d1fb      	bne.n	1b68 <HAL_SAI_TxHalfCpltCallback+0xc8>
	prevVoice = voice;
    1b70:	6823      	ldr	r3, [r4, #0]
    1b72:	6033      	str	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1b74:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1b78:	f240 0220 	movw	r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1b7c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1b80:	f2c3 0200 	movt	r2, #12288	; 0x3000
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1b84:	f2ce 0300 	movt	r3, #57344	; 0xe000
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1b88:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1b8c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1b90:	f102 0040 	add.w	r0, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1b94:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1b98:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1b9c:	f102 0160 	add.w	r1, r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1ba0:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1ba4:	f102 0480 	add.w	r4, r2, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1ba8:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1bac:	f102 00a0 	add.w	r0, r2, #160	; 0xa0
    1bb0:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
    1bb4:	32e0      	adds	r2, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1bb6:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    1bba:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    1bbe:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    1bc2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bca:	f3bf 8f6f 	isb	sy
}
    1bce:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(0);
    1bd0:	f241 138c 	movw	r3, #4492	; 0x118c
    1bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	4798      	blx	r3
    1bdc:	e76f      	b.n	1abe <HAL_SAI_TxHalfCpltCallback+0x1e>
    1bde:	f240 0500 	movw	r5, #0
    1be2:	f2c3 0500 	movt	r5, #12288	; 0x3000
    1be6:	e7c3      	b.n	1b70 <HAL_SAI_TxHalfCpltCallback+0xd0>
				resetStringInputs = 1;
    1be8:	f245 7371 	movw	r3, #22385	; 0x5771
    1bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1bf0:	7018      	strb	r0, [r3, #0]
    1bf2:	e7a4      	b.n	1b3e <HAL_SAI_TxHalfCpltCallback+0x9e>
			audioFrameFunction = audioFrameWaiting;
    1bf4:	f241 138c 	movw	r3, #4492	; 0x118c
    1bf8:	f241 52c1 	movw	r2, #5569	; 0x15c1
    1bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c00:	f2c0 0200 	movt	r2, #0
    1c04:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    1c06:	f005 fddb 	bl	77c0 <audioSwitchToString2>
			currentActivePreset = voice;
    1c0a:	6822      	ldr	r2, [r4, #0]
    1c0c:	f240 63a5 	movw	r3, #1701	; 0x6a5
    1c10:	b2d2      	uxtb	r2, r2
    1c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c16:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    1c18:	f245 7371 	movw	r3, #22385	; 0x5771
    1c1c:	2201      	movs	r2, #1
    1c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c22:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    1c24:	2300      	movs	r3, #0
    1c26:	2202      	movs	r2, #2
    1c28:	702b      	strb	r3, [r5, #0]
			whichModel = 2;
    1c2a:	e78f      	b.n	1b4c <HAL_SAI_TxHalfCpltCallback+0xac>
			audioFrameFunction = audioFrameWaiting;
    1c2c:	f241 138c 	movw	r3, #4492	; 0x118c
    1c30:	f241 52c1 	movw	r2, #5569	; 0x15c1
    1c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c38:	f2c0 0200 	movt	r2, #0
    1c3c:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    1c3e:	f005 f97f 	bl	6f40 <audioSwitchToString1>
			currentActivePreset = voice;
    1c42:	6822      	ldr	r2, [r4, #0]
    1c44:	f240 63a5 	movw	r3, #1701	; 0x6a5
    1c48:	b2d2      	uxtb	r2, r2
    1c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c4e:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    1c50:	f245 7371 	movw	r3, #22385	; 0x5771
    1c54:	2201      	movs	r2, #1
    1c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c5a:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    1c5c:	2300      	movs	r3, #0
    1c5e:	702b      	strb	r3, [r5, #0]
			whichModel = 1;
    1c60:	e774      	b.n	1b4c <HAL_SAI_TxHalfCpltCallback+0xac>
			audioFrameFunction = audioFrameAdditive;
    1c62:	f241 138c 	movw	r3, #4492	; 0x118c
    1c66:	f640 5281 	movw	r2, #3457	; 0xd81
    1c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c6e:	f2c0 0200 	movt	r2, #0
    1c72:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1c74:	f7fe fe34 	bl	8e0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    1c78:	6822      	ldr	r2, [r4, #0]
    1c7a:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    1c7e:	2101      	movs	r1, #1
			diskBusy = 0;
    1c80:	2000      	movs	r0, #0
			currentActivePreset = voice;
    1c82:	b2d2      	uxtb	r2, r2
    1c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    1c88:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    1c8a:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1c8c:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    1c90:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    1c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    1c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    1c9c:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    1c9e:	2203      	movs	r2, #3
    1ca0:	7019      	strb	r1, [r3, #0]
			whichModel = 3;
    1ca2:	e753      	b.n	1b4c <HAL_SAI_TxHalfCpltCallback+0xac>
			audioFrameFunction = audioFrameVocal;
    1ca4:	f241 138c 	movw	r3, #4492	; 0x118c
    1ca8:	f64c 52a1 	movw	r2, #52641	; 0xcda1
    1cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cb0:	f2c0 0200 	movt	r2, #0
    1cb4:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    1cb6:	f00a ff53 	bl	cb60 <audioSwitchToVocal>
			currentActivePreset = voice;
    1cba:	6822      	ldr	r2, [r4, #0]
    1cbc:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    1cc0:	2101      	movs	r1, #1
			diskBusy = 0;
    1cc2:	2000      	movs	r0, #0
			currentActivePreset = voice;
    1cc4:	b2d2      	uxtb	r2, r2
    1cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    1cca:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    1ccc:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1cce:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    1cd2:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    1cd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    1cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    1cde:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    1ce0:	2204      	movs	r2, #4
    1ce2:	7019      	strb	r1, [r3, #0]
			whichModel = 4;
    1ce4:	e732      	b.n	1b4c <HAL_SAI_TxHalfCpltCallback+0xac>
			audioFrameFunction = audioFrameString3;
    1ce6:	f241 138c 	movw	r3, #4492	; 0x118c
    1cea:	f248 6201 	movw	r2, #34305	; 0x8601
    1cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cf2:	f2c0 0200 	movt	r2, #0
    1cf6:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    1cf8:	f006 fb02 	bl	8300 <audioSwitchToString3>
			currentActivePreset = voice;
    1cfc:	6822      	ldr	r2, [r4, #0]
    1cfe:	f240 63a5 	movw	r3, #1701	; 0x6a5
			presetReady = 1;
    1d02:	2101      	movs	r1, #1
			diskBusy = 0;
    1d04:	2000      	movs	r0, #0
			currentActivePreset = voice;
    1d06:	b2d2      	uxtb	r2, r2
    1d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
			diskBusy = 0;
    1d0c:	7028      	strb	r0, [r5, #0]
			currentActivePreset = voice;
    1d0e:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1d10:	f245 324c 	movw	r2, #21324	; 0x534c
			resetStringInputs = 1;
    1d14:	f245 7371 	movw	r3, #22385	; 0x5771
			presetReady = 1;
    1d18:	f2c2 0200 	movt	r2, #8192	; 0x2000
			resetStringInputs = 1;
    1d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
			presetReady = 1;
    1d20:	6011      	str	r1, [r2, #0]
			resetStringInputs = 1;
    1d22:	2205      	movs	r2, #5
    1d24:	7019      	strb	r1, [r3, #0]
			whichModel = 5;
    1d26:	e711      	b.n	1b4c <HAL_SAI_TxHalfCpltCallback+0xac>
    1d28:	f3af 8000 	nop.w
    1d2c:	f3af 8000 	nop.w
    1d30:	f3af 8000 	nop.w
    1d34:	f3af 8000 	nop.w
    1d38:	f3af 8000 	nop.w
    1d3c:	f3af 8000 	nop.w

00001d40 <HAL_SAI_ErrorCallback>:
}
    1d40:	4770      	bx	lr
    1d42:	bf00      	nop
	...

00001d60 <scaleDefault>:
}
    1d60:	4770      	bx	lr
    1d62:	bf00      	nop
    1d64:	f3af 8000 	nop.w
    1d68:	f3af 8000 	nop.w
    1d6c:	f3af 8000 	nop.w
    1d70:	f3af 8000 	nop.w
    1d74:	f3af 8000 	nop.w
    1d78:	f3af 8000 	nop.w
    1d7c:	f3af 8000 	nop.w

00001d80 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1d80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1d84:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    1d88:	eee0 7a07 	vfma.f32	s15, s0, s14
    1d8c:	eeb0 0a67 	vmov.f32	s0, s15
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop
    1d94:	f3af 8000 	nop.w
    1d98:	f3af 8000 	nop.w
    1d9c:	f3af 8000 	nop.w

00001da0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1da0:	2200      	movs	r2, #0
    1da2:	4613      	mov	r3, r2
    1da4:	f2c4 3248 	movt	r2, #17224	; 0x4348
    1da8:	f2cc 23c8 	movt	r3, #49864	; 0xc2c8
    1dac:	ee07 2a10 	vmov	s14, r2
    1db0:	ee07 3a90 	vmov	s15, r3
}
    1db4:	eee0 7a07 	vfma.f32	s15, s0, s14
    1db8:	eeb0 0a67 	vmov.f32	s0, s15
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop

00001dc0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1dc0:	2200      	movs	r2, #0
    1dc2:	4613      	mov	r3, r2
    1dc4:	f2c4 527a 	movt	r2, #17786	; 0x457a
    1dc8:	f2cc 43fa 	movt	r3, #50426	; 0xc4fa
    1dcc:	ee07 2a10 	vmov	s14, r2
    1dd0:	ee07 3a90 	vmov	s15, r3
}
    1dd4:	eee0 7a07 	vfma.f32	s15, s0, s14
    1dd8:	eeb0 0a67 	vmov.f32	s0, s15
    1ddc:	4770      	bx	lr
    1dde:	bf00      	nop

00001de0 <scaleTranspose>:
	return (input * 96.0f) - 48.0f;
    1de0:	2200      	movs	r2, #0
    1de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1de6:	4613      	mov	r3, r2
    1de8:	4611      	mov	r1, r2
    1dea:	f2c4 22c0 	movt	r2, #17088	; 0x42c0
    1dee:	fec0 7a67 	vminnm.f32	s15, s0, s15
    1df2:	f2cc 2340 	movt	r3, #49728	; 0xc240
    1df6:	ee06 1a10 	vmov	s12, r1
    1dfa:	ee06 2a90 	vmov	s13, r2
    1dfe:	ee07 3a10 	vmov	s14, r3
    1e02:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
}
    1e06:	eea7 7aa6 	vfma.f32	s14, s15, s13
    1e0a:	eeb0 0a47 	vmov.f32	s0, s14
    1e0e:	4770      	bx	lr
    1e10:	f3af 8000 	nop.w
    1e14:	f3af 8000 	nop.w
    1e18:	f3af 8000 	nop.w
    1e1c:	f3af 8000 	nop.w

00001e20 <scalePitchBend>:
	return (input * 48.0f);
    1e20:	2300      	movs	r3, #0
    1e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1e26:	461a      	mov	r2, r3
    1e28:	f2c4 2340 	movt	r3, #16960	; 0x4240
    1e2c:	fe80 0a66 	vminnm.f32	s0, s0, s13
    1e30:	ee07 2a10 	vmov	s14, r2
    1e34:	ee07 3a90 	vmov	s15, r3
    1e38:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
}
    1e3c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e40:	4770      	bx	lr
    1e42:	bf00      	nop
    1e44:	f3af 8000 	nop.w
    1e48:	f3af 8000 	nop.w
    1e4c:	f3af 8000 	nop.w
    1e50:	f3af 8000 	nop.w
    1e54:	f3af 8000 	nop.w
    1e58:	f3af 8000 	nop.w
    1e5c:	f3af 8000 	nop.w

00001e60 <scaleFilterCutoff>:
	return (input * 127.0f);
    1e60:	2300      	movs	r3, #0
    1e62:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    1e66:	ee07 3a90 	vmov	s15, r3
}
    1e6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e6e:	4770      	bx	lr
    1e70:	f3af 8000 	nop.w
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <scaleFilterResonance>:
	input *= 2047.0f;
    1e80:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1e84:	2100      	movs	r1, #0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1e86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1e8a:	f64a 03cc 	movw	r3, #43212	; 0xa8cc
	input *= 2047.0f;
    1e8e:	f2c4 42ff 	movt	r2, #17663	; 0x44ff
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1e92:	ee05 1a90 	vmov	s11, r1
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1e96:	f2c2 0301 	movt	r3, #8193	; 0x2001
    1e9a:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
	input *= 2047.0f;
    1e9e:	ee06 2a90 	vmov	s13, r2
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ea2:	f64c 42cd 	movw	r2, #52429	; 0xcccd
	input *= 2047.0f;
    1ea6:	ee20 0a26 	vmul.f32	s0, s0, s13
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1eaa:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    1eae:	ee06 2a10 	vmov	s12, r2
	int inputInt = (int)input;
    1eb2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    1eb6:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1eba:	ee30 7a27 	vadd.f32	s14, s0, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ebe:	1c51      	adds	r1, r2, #1
	float inputFloat = (float)inputInt - input;
    1ec0:	ee05 2a10 	vmov	s10, r2
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ec4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ec8:	ee07 1a90 	vmov	s15, r1
	float inputFloat = (float)inputInt - input;
    1ecc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ed4:	ee37 7a45 	vsub.f32	s14, s14, s10
	float inputFloat = (float)inputInt - input;
    1ed8:	ee35 0a40 	vsub.f32	s0, s10, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1edc:	ed92 5a00 	vldr	s10, [r2]
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ee0:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    1ee4:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
    1ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1eec:	ee17 2a90 	vmov	r2, s15
    1ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1ef4:	edd3 7a00 	vldr	s15, [r3]
    1ef8:	ee20 0a27 	vmul.f32	s0, s0, s15
    1efc:	eea5 0a07 	vfma.f32	s0, s10, s14
    1f00:	fe80 0a64 	vminnm.f32	s0, s0, s9
}
    1f04:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
    1f08:	4770      	bx	lr
    1f0a:	bf00      	nop
    1f0c:	f3af 8000 	nop.w
    1f10:	f3af 8000 	nop.w
    1f14:	f3af 8000 	nop.w
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <scaleEnvTimes>:
	input *= 2047.0f;
    1f20:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f24:	2100      	movs	r1, #0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1f2a:	f244 43e4 	movw	r3, #17636	; 0x44e4
	input *= 2047.0f;
    1f2e:	f2c4 42ff 	movt	r2, #17663	; 0x44ff
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f32:	ee06 1a10 	vmov	s12, r1
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f36:	f2c2 0301 	movt	r3, #8193	; 0x2001
	input *= 2047.0f;
    1f3a:	ee06 2a90 	vmov	s13, r2
    1f3e:	ee20 0a26 	vmul.f32	s0, s0, s13
	int inputInt = (int)input;
    1f42:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    1f46:	ee17 2a10 	vmov	r2, s14
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f4a:	ee30 7a27 	vadd.f32	s14, s0, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f4e:	1c51      	adds	r1, r2, #1
	float inputFloat = (float)inputInt - input;
    1f50:	ee05 2a90 	vmov	s11, r2
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f54:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f58:	ee07 1a90 	vmov	s15, r1
	float inputFloat = (float)inputInt - input;
    1f5c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f64:	ee37 7a65 	vsub.f32	s14, s14, s11
	float inputFloat = (float)inputInt - input;
    1f68:	ee35 0ac0 	vsub.f32	s0, s11, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f6c:	edd2 5a00 	vldr	s11, [r2]
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1f70:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    1f74:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
    1f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1f7c:	ee17 2a90 	vmov	r2, s15
    1f80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f84:	edd3 7a00 	vldr	s15, [r3]
    1f88:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1f8c:	eea5 0a87 	vfma.f32	s0, s11, s14
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <scaleLFORates>:
	input *= 2047.0f;
    1fa0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1fa4:	2100      	movs	r1, #0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1faa:	f246 6340 	movw	r3, #26176	; 0x6640
	input *= 2047.0f;
    1fae:	f2c4 42ff 	movt	r2, #17663	; 0x44ff
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1fb2:	ee06 1a10 	vmov	s12, r1
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fb6:	f2c2 0301 	movt	r3, #8193	; 0x2001
	input *= 2047.0f;
    1fba:	ee06 2a90 	vmov	s13, r2
    1fbe:	ee20 0a26 	vmul.f32	s0, s0, s13
	int inputInt = (int)input;
    1fc2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    1fc6:	ee17 2a10 	vmov	r2, s14
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fca:	ee30 7a27 	vadd.f32	s14, s0, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1fce:	1c51      	adds	r1, r2, #1
	float inputFloat = (float)inputInt - input;
    1fd0:	ee05 2a90 	vmov	s11, r2
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fd4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1fd8:	ee07 1a90 	vmov	s15, r1
	float inputFloat = (float)inputInt - input;
    1fdc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fe4:	ee37 7a65 	vsub.f32	s14, s14, s11
	float inputFloat = (float)inputInt - input;
    1fe8:	ee35 0ac0 	vsub.f32	s0, s11, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1fec:	edd2 5a00 	vldr	s11, [r2]
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ff0:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    1ff4:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
    1ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1ffc:	ee17 2a90 	vmov	r2, s15
    2000:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2004:	edd3 7a00 	vldr	s15, [r3]
    2008:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    200c:	eea5 0a87 	vfma.f32	s0, s11, s14
    2010:	4770      	bx	lr
    2012:	bf00      	nop
    2014:	f3af 8000 	nop.w
    2018:	f3af 8000 	nop.w
    201c:	f3af 8000 	nop.w

00002020 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    2020:	2200      	movs	r2, #0
    2022:	4613      	mov	r3, r2
    2024:	f2c4 228c 	movt	r2, #17036	; 0x428c
    2028:	f2c4 2368 	movt	r3, #17000	; 0x4268
    202c:	ee07 2a10 	vmov	s14, r2
    2030:	ee07 3a90 	vmov	s15, r3
}
    2034:	eee0 7a07 	vfma.f32	s15, s0, s14
    2038:	eeb0 0a67 	vmov.f32	s0, s15
    203c:	4770      	bx	lr
    203e:	bf00      	nop

00002040 <blankFunction>:
}
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	f3af 8000 	nop.w
    2048:	f3af 8000 	nop.w
    204c:	f3af 8000 	nop.w
    2050:	f3af 8000 	nop.w
    2054:	f3af 8000 	nop.w
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <randomNumber>:
	return random_values[currentRandom++];
    2060:	f244 4250 	movw	r2, #17488	; 0x4450
    2064:	f24a 43c8 	movw	r3, #42184	; 0xa4c8
    2068:	f2c2 0201 	movt	r2, #8193	; 0x2001
    206c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2070:	7811      	ldrb	r1, [r2, #0]
    2072:	1c48      	adds	r0, r1, #1
    2074:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2078:	7010      	strb	r0, [r2, #0]
}
    207a:	ed93 0a00 	vldr	s0, [r3]
    207e:	4770      	bx	lr

00002080 <scaleTwo>:
}
    2080:	ee30 0a00 	vadd.f32	s0, s0, s0
    2084:	4770      	bx	lr
    2086:	bf00      	nop
    2088:	f3af 8000 	nop.w
    208c:	f3af 8000 	nop.w
    2090:	f3af 8000 	nop.w
    2094:	f3af 8000 	nop.w
    2098:	f3af 8000 	nop.w
    209c:	f3af 8000 	nop.w

000020a0 <parsePreset>:
	currentPresetSize = size;
    20a0:	f244 434c 	movw	r3, #17484	; 0x444c
{
    20a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	currentPresetSize = size;
    20a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    20ac:	4683      	mov	fp, r0
    20ae:	ed2d 8b02 	vpush	{d8}
    20b2:	b09b      	sub	sp, #108	; 0x6c
	currentPresetSize = size;
    20b4:	6018      	str	r0, [r3, #0]
{
    20b6:	9102      	str	r1, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    20b8:	b672      	cpsid	i
	 presetReady = 0;
    20ba:	f245 334c 	movw	r3, #21324	; 0x534c
    20be:	2400      	movs	r4, #0
		 audioOutBuffer[i] = 0;
    20c0:	f240 0000 	movw	r0, #0
    20c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	 presetReady = 0;
    20c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
		 audioOutBuffer[i] = 0;
    20cc:	4621      	mov	r1, r4
    20ce:	f2c3 0000 	movt	r0, #12288	; 0x3000
	if (buffer[bufferIndex] == 17)
    20d2:	f242 3980 	movw	r9, #9088	; 0x2380
	 presetReady = 0;
    20d6:	930a      	str	r3, [sp, #40]	; 0x28
    20d8:	601c      	str	r4, [r3, #0]
		 audioOutBuffer[i] = 0;
    20da:	f00b f88d 	bl	d1f8 <__memset_veneer>
	audioMasterLevel = 0.0f;
    20de:	f240 62a0 	movw	r2, #1696	; 0x6a0
	if (buffer[bufferIndex] == 17)
    20e2:	f2c3 0904 	movt	r9, #12292	; 0x3004
	delayAssignment = 255;
    20e6:	f240 63ac 	movw	r3, #1708	; 0x6ac
	chorusAssignment = 255;
    20ea:	21ff      	movs	r1, #255	; 0xff
	audioMasterLevel = 0.0f;
    20ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
	if (buffer[bufferIndex] == 17)
    20f0:	f899 7000 	ldrb.w	r7, [r9]
	delayAssignment = 255;
    20f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
	audioMasterLevel = 0.0f;
    20f8:	6014      	str	r4, [r2, #0]
	if (buffer[bufferIndex] == 17)
    20fa:	2f11      	cmp	r7, #17
	audioMasterLevel = 0.0f;
    20fc:	9203      	str	r2, [sp, #12]
	chorusAssignment = 255;
    20fe:	f240 62a4 	movw	r2, #1700	; 0x6a4
    2102:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2106:	7011      	strb	r1, [r2, #0]
	delayAssignment = 255;
    2108:	7019      	strb	r1, [r3, #0]
	if (buffer[bufferIndex] == 17)
    210a:	f000 850d 	beq.w	2b28 <parsePreset+0xa88>
	uint16_t bufferIndex = 0;
    210e:	4622      	mov	r2, r4
		if (buffer[bufferIndex + 1] == 18)
    2110:	f899 c001 	ldrb.w	ip, [r9, #1]
	uint16_t presetVersionNumber = 0;
    2114:	46a2      	mov	sl, r4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2116:	1c93      	adds	r3, r2, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2118:	9802      	ldr	r0, [sp, #8]
    211a:	f242 0600 	movw	r6, #8192	; 0x2000
		presetName[i] = buffer[bufferIndex];
    211e:	f24a 415c 	movw	r1, #42076	; 0xa45c
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2122:	f819 3003 	ldrb.w	r3, [r9, r3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2126:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
    212a:	f2c3 0604 	movt	r6, #12292	; 0x3004
		presetName[i] = buffer[bufferIndex];
    212e:	f2c2 0101 	movt	r1, #8193	; 0x2001
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2132:	9301      	str	r3, [sp, #4]
    2134:	1cd3      	adds	r3, r2, #3
		presetName[i] = buffer[bufferIndex];
    2136:	700f      	strb	r7, [r1, #0]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2138:	f819 5003 	ldrb.w	r5, [r9, r3]
    213c:	1d13      	adds	r3, r2, #4
    213e:	f819 3003 	ldrb.w	r3, [r9, r3]
    2142:	9504      	str	r5, [sp, #16]
    2144:	9305      	str	r3, [sp, #20]
    2146:	1d53      	adds	r3, r2, #5
    2148:	f819 5003 	ldrb.w	r5, [r9, r3]
    214c:	1d93      	adds	r3, r2, #6
    214e:	f819 e003 	ldrb.w	lr, [r9, r3]
    2152:	1dd3      	adds	r3, r2, #7
    2154:	9506      	str	r5, [sp, #24]
    2156:	f243 3580 	movw	r5, #13184	; 0x3380
    215a:	f8cd e01c 	str.w	lr, [sp, #28]
    215e:	f819 e003 	ldrb.w	lr, [r9, r3]
    2162:	f102 0308 	add.w	r3, r2, #8
    2166:	f2c3 0504 	movt	r5, #12292	; 0x3004
    216a:	f8cd e020 	str.w	lr, [sp, #32]
    216e:	f819 e003 	ldrb.w	lr, [r9, r3]
    2172:	f102 0309 	add.w	r3, r2, #9
    2176:	f819 8003 	ldrb.w	r8, [r9, r3]
    217a:	f102 030a 	add.w	r3, r2, #10
    217e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    2182:	f819 e003 	ldrb.w	lr, [r9, r3]
    2186:	23c8      	movs	r3, #200	; 0xc8
    2188:	fb00 f303 	mul.w	r3, r0, r3
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    218c:	eb06 0044 	add.w	r0, r6, r4, lsl #1
    2190:	0064      	lsls	r4, r4, #1
    2192:	5537      	strb	r7, [r6, r4]
		presetName[i] = buffer[bufferIndex];
    2194:	9c01      	ldr	r4, [sp, #4]
    2196:	f881 c001 	strb.w	ip, [r1, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    219a:	f880 c001 	strb.w	ip, [r0, #1]
		presetName[i] = buffer[bufferIndex];
    219e:	708c      	strb	r4, [r1, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21a0:	7084      	strb	r4, [r0, #2]
		presetName[i] = buffer[bufferIndex];
    21a2:	9c04      	ldr	r4, [sp, #16]
    21a4:	70cc      	strb	r4, [r1, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21a6:	70c4      	strb	r4, [r0, #3]
		presetName[i] = buffer[bufferIndex];
    21a8:	9c05      	ldr	r4, [sp, #20]
    21aa:	710c      	strb	r4, [r1, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21ac:	7104      	strb	r4, [r0, #4]
		presetName[i] = buffer[bufferIndex];
    21ae:	9c06      	ldr	r4, [sp, #24]
    21b0:	714c      	strb	r4, [r1, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21b2:	7144      	strb	r4, [r0, #5]
		presetName[i] = buffer[bufferIndex];
    21b4:	9c07      	ldr	r4, [sp, #28]
    21b6:	718c      	strb	r4, [r1, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21b8:	7184      	strb	r4, [r0, #6]
		presetName[i] = buffer[bufferIndex];
    21ba:	9c08      	ldr	r4, [sp, #32]
    21bc:	71cc      	strb	r4, [r1, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21be:	71c4      	strb	r4, [r0, #7]
		presetName[i] = buffer[bufferIndex];
    21c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    21c2:	720c      	strb	r4, [r1, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21c4:	7204      	strb	r4, [r0, #8]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    21c6:	f102 040b 	add.w	r4, r2, #11
		presetName[i] = buffer[bufferIndex];
    21ca:	f881 8009 	strb.w	r8, [r1, #9]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    21ce:	f819 6004 	ldrb.w	r6, [r9, r4]
    21d2:	f102 040c 	add.w	r4, r2, #12
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21d6:	f880 8009 	strb.w	r8, [r0, #9]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    21da:	f819 4004 	ldrb.w	r4, [r9, r4]
		presetName[i] = buffer[bufferIndex];
    21de:	f881 e00a 	strb.w	lr, [r1, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21e2:	f880 e00a 	strb.w	lr, [r0, #10]
		presetName[i] = buffer[bufferIndex];
    21e6:	72ce      	strb	r6, [r1, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21e8:	72c6      	strb	r6, [r0, #11]
		presetName[i] = buffer[bufferIndex];
    21ea:	730c      	strb	r4, [r1, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21ec:	7304      	strb	r4, [r0, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    21ee:	f102 040d 	add.w	r4, r2, #13
    21f2:	f819 4004 	ldrb.w	r4, [r9, r4]
		presetName[i] = buffer[bufferIndex];
    21f6:	734c      	strb	r4, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    21f8:	f102 010e 	add.w	r1, r2, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    21fc:	7344      	strb	r4, [r0, #13]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    21fe:	f102 007e 	add.w	r0, r2, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2202:	f819 1001 	ldrb.w	r1, [r9, r1]
    2206:	54e9      	strb	r1, [r5, r3]
    2208:	f102 010f 	add.w	r1, r2, #15
    220c:	442b      	add	r3, r5
    220e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2212:	7059      	strb	r1, [r3, #1]
    2214:	f102 0110 	add.w	r1, r2, #16
    2218:	f819 1001 	ldrb.w	r1, [r9, r1]
    221c:	7099      	strb	r1, [r3, #2]
    221e:	f102 0111 	add.w	r1, r2, #17
    2222:	f819 1001 	ldrb.w	r1, [r9, r1]
    2226:	70d9      	strb	r1, [r3, #3]
    2228:	f102 0112 	add.w	r1, r2, #18
    222c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2230:	7119      	strb	r1, [r3, #4]
    2232:	f102 0113 	add.w	r1, r2, #19
    2236:	f819 1001 	ldrb.w	r1, [r9, r1]
    223a:	7159      	strb	r1, [r3, #5]
    223c:	f102 0114 	add.w	r1, r2, #20
    2240:	f819 1001 	ldrb.w	r1, [r9, r1]
    2244:	7199      	strb	r1, [r3, #6]
    2246:	f102 0115 	add.w	r1, r2, #21
    224a:	f819 1001 	ldrb.w	r1, [r9, r1]
    224e:	71d9      	strb	r1, [r3, #7]
    2250:	f102 0116 	add.w	r1, r2, #22
    2254:	f819 1001 	ldrb.w	r1, [r9, r1]
    2258:	7219      	strb	r1, [r3, #8]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    225a:	f102 0117 	add.w	r1, r2, #23
    225e:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2262:	7299      	strb	r1, [r3, #10]
    2264:	f102 0118 	add.w	r1, r2, #24
    2268:	f819 1001 	ldrb.w	r1, [r9, r1]
    226c:	72d9      	strb	r1, [r3, #11]
    226e:	f102 0119 	add.w	r1, r2, #25
    2272:	f819 1001 	ldrb.w	r1, [r9, r1]
    2276:	7319      	strb	r1, [r3, #12]
    2278:	f102 011a 	add.w	r1, r2, #26
    227c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2280:	7359      	strb	r1, [r3, #13]
    2282:	f102 011b 	add.w	r1, r2, #27
    2286:	f819 1001 	ldrb.w	r1, [r9, r1]
    228a:	7399      	strb	r1, [r3, #14]
    228c:	f102 011c 	add.w	r1, r2, #28
    2290:	f819 1001 	ldrb.w	r1, [r9, r1]
    2294:	73d9      	strb	r1, [r3, #15]
    2296:	f102 011d 	add.w	r1, r2, #29
    229a:	f819 1001 	ldrb.w	r1, [r9, r1]
    229e:	7419      	strb	r1, [r3, #16]
    22a0:	f102 011e 	add.w	r1, r2, #30
    22a4:	f819 1001 	ldrb.w	r1, [r9, r1]
    22a8:	7459      	strb	r1, [r3, #17]
    22aa:	f102 011f 	add.w	r1, r2, #31
    22ae:	f819 1001 	ldrb.w	r1, [r9, r1]
    22b2:	7499      	strb	r1, [r3, #18]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22b4:	f102 0120 	add.w	r1, r2, #32
    22b8:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    22bc:	7519      	strb	r1, [r3, #20]
    22be:	f102 0121 	add.w	r1, r2, #33	; 0x21
    22c2:	f819 1001 	ldrb.w	r1, [r9, r1]
    22c6:	7559      	strb	r1, [r3, #21]
    22c8:	f102 0122 	add.w	r1, r2, #34	; 0x22
    22cc:	f819 1001 	ldrb.w	r1, [r9, r1]
    22d0:	7599      	strb	r1, [r3, #22]
    22d2:	f102 0123 	add.w	r1, r2, #35	; 0x23
    22d6:	f819 1001 	ldrb.w	r1, [r9, r1]
    22da:	75d9      	strb	r1, [r3, #23]
    22dc:	f102 0124 	add.w	r1, r2, #36	; 0x24
    22e0:	f819 1001 	ldrb.w	r1, [r9, r1]
    22e4:	7619      	strb	r1, [r3, #24]
    22e6:	f102 0125 	add.w	r1, r2, #37	; 0x25
    22ea:	f819 1001 	ldrb.w	r1, [r9, r1]
    22ee:	7659      	strb	r1, [r3, #25]
    22f0:	f102 0126 	add.w	r1, r2, #38	; 0x26
    22f4:	f819 1001 	ldrb.w	r1, [r9, r1]
    22f8:	7699      	strb	r1, [r3, #26]
    22fa:	f102 0127 	add.w	r1, r2, #39	; 0x27
    22fe:	f819 1001 	ldrb.w	r1, [r9, r1]
    2302:	76d9      	strb	r1, [r3, #27]
    2304:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2308:	f819 1001 	ldrb.w	r1, [r9, r1]
    230c:	7719      	strb	r1, [r3, #28]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    230e:	f102 0129 	add.w	r1, r2, #41	; 0x29
    2312:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2316:	7799      	strb	r1, [r3, #30]
    2318:	f102 012a 	add.w	r1, r2, #42	; 0x2a
    231c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2320:	77d9      	strb	r1, [r3, #31]
    2322:	f102 012b 	add.w	r1, r2, #43	; 0x2b
    2326:	f819 1001 	ldrb.w	r1, [r9, r1]
    232a:	f883 1020 	strb.w	r1, [r3, #32]
    232e:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    2332:	f819 1001 	ldrb.w	r1, [r9, r1]
    2336:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    233a:	f102 012d 	add.w	r1, r2, #45	; 0x2d
    233e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2342:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    2346:	f102 012e 	add.w	r1, r2, #46	; 0x2e
    234a:	f819 1001 	ldrb.w	r1, [r9, r1]
    234e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
    2352:	f102 012f 	add.w	r1, r2, #47	; 0x2f
    2356:	f819 1001 	ldrb.w	r1, [r9, r1]
    235a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    235e:	f102 0130 	add.w	r1, r2, #48	; 0x30
    2362:	f819 1001 	ldrb.w	r1, [r9, r1]
    2366:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    236a:	f102 0131 	add.w	r1, r2, #49	; 0x31
    236e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2372:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2376:	f102 0132 	add.w	r1, r2, #50	; 0x32
    237a:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    237e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    2382:	f102 0133 	add.w	r1, r2, #51	; 0x33
    2386:	f819 1001 	ldrb.w	r1, [r9, r1]
    238a:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
    238e:	f102 0134 	add.w	r1, r2, #52	; 0x34
    2392:	f819 1001 	ldrb.w	r1, [r9, r1]
    2396:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    239a:	f102 0135 	add.w	r1, r2, #53	; 0x35
    239e:	f819 1001 	ldrb.w	r1, [r9, r1]
    23a2:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    23a6:	f102 0136 	add.w	r1, r2, #54	; 0x36
    23aa:	f819 1001 	ldrb.w	r1, [r9, r1]
    23ae:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
    23b2:	f102 0137 	add.w	r1, r2, #55	; 0x37
    23b6:	f819 1001 	ldrb.w	r1, [r9, r1]
    23ba:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
    23be:	f102 0138 	add.w	r1, r2, #56	; 0x38
    23c2:	f819 1001 	ldrb.w	r1, [r9, r1]
    23c6:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    23ca:	f102 0139 	add.w	r1, r2, #57	; 0x39
    23ce:	f819 1001 	ldrb.w	r1, [r9, r1]
    23d2:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    23d6:	f102 013a 	add.w	r1, r2, #58	; 0x3a
    23da:	f819 1001 	ldrb.w	r1, [r9, r1]
    23de:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    23e2:	f102 013b 	add.w	r1, r2, #59	; 0x3b
    23e6:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    23ea:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
    23ee:	f102 013c 	add.w	r1, r2, #60	; 0x3c
    23f2:	f819 1001 	ldrb.w	r1, [r9, r1]
    23f6:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
    23fa:	f102 013d 	add.w	r1, r2, #61	; 0x3d
    23fe:	f819 1001 	ldrb.w	r1, [r9, r1]
    2402:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
    2406:	f102 013e 	add.w	r1, r2, #62	; 0x3e
    240a:	f819 1001 	ldrb.w	r1, [r9, r1]
    240e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    2412:	f102 013f 	add.w	r1, r2, #63	; 0x3f
    2416:	f819 1001 	ldrb.w	r1, [r9, r1]
    241a:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
    241e:	f102 0140 	add.w	r1, r2, #64	; 0x40
    2422:	f819 1001 	ldrb.w	r1, [r9, r1]
    2426:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
    242a:	f102 0141 	add.w	r1, r2, #65	; 0x41
    242e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2432:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
    2436:	f102 0142 	add.w	r1, r2, #66	; 0x42
    243a:	f819 1001 	ldrb.w	r1, [r9, r1]
    243e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
    2442:	f102 0143 	add.w	r1, r2, #67	; 0x43
    2446:	f819 1001 	ldrb.w	r1, [r9, r1]
    244a:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    244e:	f102 0144 	add.w	r1, r2, #68	; 0x44
    2452:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2456:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    245a:	f102 0145 	add.w	r1, r2, #69	; 0x45
    245e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2462:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    2466:	f102 0146 	add.w	r1, r2, #70	; 0x46
    246a:	f819 1001 	ldrb.w	r1, [r9, r1]
    246e:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
    2472:	f102 0147 	add.w	r1, r2, #71	; 0x47
    2476:	f819 1001 	ldrb.w	r1, [r9, r1]
    247a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    247e:	f102 0148 	add.w	r1, r2, #72	; 0x48
    2482:	f819 1001 	ldrb.w	r1, [r9, r1]
    2486:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    248a:	f102 0149 	add.w	r1, r2, #73	; 0x49
    248e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2492:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    2496:	f102 014a 	add.w	r1, r2, #74	; 0x4a
    249a:	f819 1001 	ldrb.w	r1, [r9, r1]
    249e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    24a2:	f102 014b 	add.w	r1, r2, #75	; 0x4b
    24a6:	f819 1001 	ldrb.w	r1, [r9, r1]
    24aa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
    24ae:	f102 014c 	add.w	r1, r2, #76	; 0x4c
    24b2:	f819 1001 	ldrb.w	r1, [r9, r1]
    24b6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    24ba:	f102 014d 	add.w	r1, r2, #77	; 0x4d
    24be:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    24c2:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
    24c6:	f102 014e 	add.w	r1, r2, #78	; 0x4e
    24ca:	f819 1001 	ldrb.w	r1, [r9, r1]
    24ce:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
    24d2:	f102 014f 	add.w	r1, r2, #79	; 0x4f
    24d6:	f819 1001 	ldrb.w	r1, [r9, r1]
    24da:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
    24de:	f102 0150 	add.w	r1, r2, #80	; 0x50
    24e2:	f819 1001 	ldrb.w	r1, [r9, r1]
    24e6:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
    24ea:	f102 0151 	add.w	r1, r2, #81	; 0x51
    24ee:	f819 1001 	ldrb.w	r1, [r9, r1]
    24f2:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
    24f6:	f102 0152 	add.w	r1, r2, #82	; 0x52
    24fa:	f819 1001 	ldrb.w	r1, [r9, r1]
    24fe:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
    2502:	f102 0153 	add.w	r1, r2, #83	; 0x53
    2506:	f819 1001 	ldrb.w	r1, [r9, r1]
    250a:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
    250e:	f102 0154 	add.w	r1, r2, #84	; 0x54
    2512:	f819 1001 	ldrb.w	r1, [r9, r1]
    2516:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
    251a:	f102 0155 	add.w	r1, r2, #85	; 0x55
    251e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2522:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2526:	f102 0156 	add.w	r1, r2, #86	; 0x56
    252a:	f819 1001 	ldrb.w	r1, [r9, r1]
    252e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    2532:	f102 0157 	add.w	r1, r2, #87	; 0x57
    2536:	f819 1001 	ldrb.w	r1, [r9, r1]
    253a:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
    253e:	f102 0158 	add.w	r1, r2, #88	; 0x58
    2542:	f819 1001 	ldrb.w	r1, [r9, r1]
    2546:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
    254a:	f102 0159 	add.w	r1, r2, #89	; 0x59
    254e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2552:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
    2556:	f102 015a 	add.w	r1, r2, #90	; 0x5a
    255a:	f819 1001 	ldrb.w	r1, [r9, r1]
    255e:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    2562:	f102 015b 	add.w	r1, r2, #91	; 0x5b
    2566:	f819 1001 	ldrb.w	r1, [r9, r1]
    256a:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
    256e:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    2572:	f819 1001 	ldrb.w	r1, [r9, r1]
    2576:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
    257a:	f102 015d 	add.w	r1, r2, #93	; 0x5d
    257e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2582:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
    2586:	f102 015e 	add.w	r1, r2, #94	; 0x5e
    258a:	f819 1001 	ldrb.w	r1, [r9, r1]
    258e:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
    2592:	f102 015f 	add.w	r1, r2, #95	; 0x5f
    2596:	f819 1001 	ldrb.w	r1, [r9, r1]
    259a:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
    259e:	f102 0160 	add.w	r1, r2, #96	; 0x60
    25a2:	f819 1001 	ldrb.w	r1, [r9, r1]
    25a6:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
    25aa:	f102 0161 	add.w	r1, r2, #97	; 0x61
    25ae:	f819 1001 	ldrb.w	r1, [r9, r1]
    25b2:	f883 105b 	strb.w	r1, [r3, #91]	; 0x5b
    25b6:	f102 0162 	add.w	r1, r2, #98	; 0x62
    25ba:	f819 1001 	ldrb.w	r1, [r9, r1]
    25be:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
    25c2:	f102 0163 	add.w	r1, r2, #99	; 0x63
    25c6:	f819 1001 	ldrb.w	r1, [r9, r1]
    25ca:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    25ce:	f102 0164 	add.w	r1, r2, #100	; 0x64
    25d2:	f819 1001 	ldrb.w	r1, [r9, r1]
    25d6:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
    25da:	f102 0165 	add.w	r1, r2, #101	; 0x65
    25de:	f819 1001 	ldrb.w	r1, [r9, r1]
    25e2:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
    25e6:	f102 0166 	add.w	r1, r2, #102	; 0x66
    25ea:	f819 1001 	ldrb.w	r1, [r9, r1]
    25ee:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
    25f2:	f102 0167 	add.w	r1, r2, #103	; 0x67
    25f6:	f819 1001 	ldrb.w	r1, [r9, r1]
    25fa:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
    25fe:	f102 0168 	add.w	r1, r2, #104	; 0x68
    2602:	f819 1001 	ldrb.w	r1, [r9, r1]
    2606:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
    260a:	f102 0169 	add.w	r1, r2, #105	; 0x69
    260e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2612:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
    2616:	f102 016a 	add.w	r1, r2, #106	; 0x6a
    261a:	f819 1001 	ldrb.w	r1, [r9, r1]
    261e:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
    2622:	f102 016b 	add.w	r1, r2, #107	; 0x6b
    2626:	f819 1001 	ldrb.w	r1, [r9, r1]
    262a:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
    262e:	f102 016c 	add.w	r1, r2, #108	; 0x6c
    2632:	f819 1001 	ldrb.w	r1, [r9, r1]
    2636:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
    263a:	f102 016d 	add.w	r1, r2, #109	; 0x6d
    263e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2642:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
    2646:	f102 016e 	add.w	r1, r2, #110	; 0x6e
    264a:	f819 1001 	ldrb.w	r1, [r9, r1]
    264e:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    2652:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2656:	f819 1001 	ldrb.w	r1, [r9, r1]
    265a:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
    265e:	f102 0170 	add.w	r1, r2, #112	; 0x70
    2662:	f819 1001 	ldrb.w	r1, [r9, r1]
    2666:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    266a:	f102 0171 	add.w	r1, r2, #113	; 0x71
    266e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2672:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
    2676:	f102 0172 	add.w	r1, r2, #114	; 0x72
    267a:	f819 1001 	ldrb.w	r1, [r9, r1]
    267e:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    2682:	f102 0173 	add.w	r1, r2, #115	; 0x73
    2686:	f819 1001 	ldrb.w	r1, [r9, r1]
    268a:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    268e:	f102 0174 	add.w	r1, r2, #116	; 0x74
    2692:	f819 1001 	ldrb.w	r1, [r9, r1]
    2696:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
    269a:	f102 0175 	add.w	r1, r2, #117	; 0x75
    269e:	f819 1001 	ldrb.w	r1, [r9, r1]
    26a2:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
    26a6:	f102 0176 	add.w	r1, r2, #118	; 0x76
    26aa:	f819 1001 	ldrb.w	r1, [r9, r1]
    26ae:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
    26b2:	f102 0177 	add.w	r1, r2, #119	; 0x77
    26b6:	f819 1001 	ldrb.w	r1, [r9, r1]
    26ba:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
    26be:	f102 0178 	add.w	r1, r2, #120	; 0x78
    26c2:	f819 1001 	ldrb.w	r1, [r9, r1]
    26c6:	f883 1072 	strb.w	r1, [r3, #114]	; 0x72
    26ca:	f102 0179 	add.w	r1, r2, #121	; 0x79
    26ce:	f819 1001 	ldrb.w	r1, [r9, r1]
    26d2:	f883 1073 	strb.w	r1, [r3, #115]	; 0x73
    26d6:	f102 017a 	add.w	r1, r2, #122	; 0x7a
    26da:	f819 1001 	ldrb.w	r1, [r9, r1]
    26de:	f883 1074 	strb.w	r1, [r3, #116]	; 0x74
    26e2:	f102 017b 	add.w	r1, r2, #123	; 0x7b
    26e6:	f819 1001 	ldrb.w	r1, [r9, r1]
    26ea:	f883 1075 	strb.w	r1, [r3, #117]	; 0x75
    26ee:	f102 017c 	add.w	r1, r2, #124	; 0x7c
    26f2:	f819 1001 	ldrb.w	r1, [r9, r1]
    26f6:	f883 1076 	strb.w	r1, [r3, #118]	; 0x76
    26fa:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    26fe:	f819 1001 	ldrb.w	r1, [r9, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2702:	f242 3980 	movw	r9, #9088	; 0x2380
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2706:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    270a:	f2c3 0904 	movt	r9, #12292	; 0x3004
			macroNamesArray[presetNumber][j+12][k] = 32;
    270e:	2120      	movs	r1, #32
    2710:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
    2714:	f883 1079 	strb.w	r1, [r3, #121]	; 0x79
    2718:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
    271c:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
    2720:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
    2724:	f883 107d 	strb.w	r1, [r3, #125]	; 0x7d
    2728:	f883 107e 	strb.w	r1, [r3, #126]	; 0x7e
    272c:	f883 107f 	strb.w	r1, [r3, #127]	; 0x7f
    2730:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
    2734:	f883 1082 	strb.w	r1, [r3, #130]	; 0x82
    2738:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
    273c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
    2740:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
    2744:	f883 1086 	strb.w	r1, [r3, #134]	; 0x86
    2748:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
    274c:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
    2750:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    2754:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
    2758:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
    275c:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
    2760:	f883 108e 	strb.w	r1, [r3, #142]	; 0x8e
    2764:	f883 108f 	strb.w	r1, [r3, #143]	; 0x8f
    2768:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
    276c:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
    2770:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
    2774:	f883 1093 	strb.w	r1, [r3, #147]	; 0x93
    2778:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
    277c:	f883 1096 	strb.w	r1, [r3, #150]	; 0x96
    2780:	f883 1097 	strb.w	r1, [r3, #151]	; 0x97
    2784:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    2788:	f883 1099 	strb.w	r1, [r3, #153]	; 0x99
    278c:	f883 109a 	strb.w	r1, [r3, #154]	; 0x9a
    2790:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
    2794:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
    2798:	f883 109d 	strb.w	r1, [r3, #157]	; 0x9d
    279c:	f883 109e 	strb.w	r1, [r3, #158]	; 0x9e
    27a0:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    27a4:	f883 10a1 	strb.w	r1, [r3, #161]	; 0xa1
    27a8:	f883 10a2 	strb.w	r1, [r3, #162]	; 0xa2
    27ac:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
    27b0:	f883 10a4 	strb.w	r1, [r3, #164]	; 0xa4
    27b4:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
    27b8:	f883 10a6 	strb.w	r1, [r3, #166]	; 0xa6
    27bc:	f883 10a7 	strb.w	r1, [r3, #167]	; 0xa7
    27c0:	f883 10a8 	strb.w	r1, [r3, #168]	; 0xa8
    27c4:	f883 10aa 	strb.w	r1, [r3, #170]	; 0xaa
    27c8:	f883 10ab 	strb.w	r1, [r3, #171]	; 0xab
    27cc:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
    27d0:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
    27d4:	f883 10ae 	strb.w	r1, [r3, #174]	; 0xae
    27d8:	f883 10af 	strb.w	r1, [r3, #175]	; 0xaf
    27dc:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
    27e0:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
    27e4:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
    27e8:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
    27ec:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
    27f0:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
    27f4:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
    27f8:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
    27fc:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
    2800:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
    2804:	f883 10bb 	strb.w	r1, [r3, #187]	; 0xbb
    2808:	f883 10bc 	strb.w	r1, [r3, #188]	; 0xbc
    280c:	f883 10be 	strb.w	r1, [r3, #190]	; 0xbe
    2810:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
    2814:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    2818:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
    281c:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
    2820:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
    2824:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
    2828:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
    282c:	f883 10c6 	strb.w	r1, [r3, #198]	; 0xc6
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2830:	eb09 0300 	add.w	r3, r9, r0
    2834:	f819 1000 	ldrb.w	r1, [r9, r0]
    2838:	785b      	ldrb	r3, [r3, #1]
    283a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    283e:	b29b      	uxth	r3, r3
	if (paramCount > size)
    2840:	455b      	cmp	r3, fp
    2842:	dc0c      	bgt.n	285e <parsePreset+0x7be>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2844:	eb00 0143 	add.w	r1, r0, r3, lsl #1
	if (paramEndCheck != 0xefef)
    2848:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    284c:	005c      	lsls	r4, r3, #1
    284e:	4449      	add	r1, r9
    2850:	788e      	ldrb	r6, [r1, #2]
    2852:	78c8      	ldrb	r0, [r1, #3]
    2854:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    2858:	b280      	uxth	r0, r0
    285a:	42a8      	cmp	r0, r5
    285c:	d010      	beq.n	2880 <parsePreset+0x7e0>
		presetWaitingToParse = 0;
    285e:	f24a 4370 	movw	r3, #42096	; 0xa470
		audioMasterLevel = 1.0f;
    2862:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		presetWaitingToParse = 0;
    2866:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    2868:	9903      	ldr	r1, [sp, #12]
		presetWaitingToParse = 0;
    286a:	f2c2 0301 	movt	r3, #8193	; 0x2001
		audioMasterLevel = 1.0f;
    286e:	edc1 7a00 	vstr	s15, [r1]
		presetWaitingToParse = 0;
    2872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2874:	b662      	cpsie	i
}
    2876:	b01b      	add	sp, #108	; 0x6c
    2878:	ecbd 8b02 	vpop	{d8}
    287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2880:	7908      	ldrb	r0, [r1, #4]
    2882:	7949      	ldrb	r1, [r1, #5]
    2884:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    2888:	b288      	uxth	r0, r1
    288a:	9008      	str	r0, [sp, #32]
	if (presetVersionNumber == 0)
    288c:	f1ba 0f00 	cmp.w	sl, #0
    2890:	f000 8159 	beq.w	2b46 <parsePreset+0xaa6>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    2894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2898:	f102 0184 	add.w	r1, r2, #132	; 0x84
    289c:	4418      	add	r0, r3
    289e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    28a2:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    28a4:	4559      	cmp	r1, fp
    28a6:	dcda      	bgt.n	285e <parsePreset+0x7be>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    28a8:	eb09 0501 	add.w	r5, r9, r1
    28ac:	f819 0001 	ldrb.w	r0, [r9, r1]
    28b0:	7869      	ldrb	r1, [r5, #1]
    28b2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    28b6:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    28ba:	b289      	uxth	r1, r1
    28bc:	4281      	cmp	r1, r0
    28be:	d1ce      	bne.n	285e <parsePreset+0x7be>
	bufferIndex = bufferIndex + 2;
    28c0:	f102 0780 	add.w	r7, r2, #128	; 0x80
    28c4:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    28c6:	2b00      	cmp	r3, #0
    28c8:	f001 8399 	beq.w	3ffe <parsePreset+0x1f5e>
    28cc:	f249 301c 	movw	r0, #37660	; 0x931c
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    28d0:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    28d4:	4427      	add	r7, r4
    28d6:	f2c2 0001 	movt	r0, #8193	; 0x2001
    28da:	f2c3 717f 	movt	r1, #14207	; 0x377f
    28de:	b2bf      	uxth	r7, r7
    28e0:	ee07 1a10 	vmov	s14, r1
	for (int i = 0; i < paramCount; i++)
    28e4:	4683      	mov	fp, r0
    28e6:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    28e8:	eb09 0105 	add.w	r1, r9, r5
    28ec:	f819 6005 	ldrb.w	r6, [r9, r5]
		bufferIndex += 2;
    28f0:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    28f2:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    28f4:	7849      	ldrb	r1, [r1, #1]
		bufferIndex += 2;
    28f6:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    28f8:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    28fc:	42bd      	cmp	r5, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    28fe:	ee07 1a90 	vmov	s15, r1
    2902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2906:	ee67 7a87 	vmul.f32	s15, s15, s14
    290a:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    290e:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    2912:	d1e9      	bne.n	28e8 <parsePreset+0x848>
    2914:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
    2918:	f249 311c 	movw	r1, #37660	; 0x931c
    291c:	f242 0641 	movw	r6, #8257	; 0x2041
    2920:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    2924:	f2c2 0101 	movt	r1, #8193	; 0x2001
    2928:	f2c0 0600 	movt	r6, #0
		params[i].setParam = &blankFunction;
    292c:	614e      	str	r6, [r1, #20]
	for (int i = 0; i < paramCount; i++)
    292e:	311c      	adds	r1, #28
    2930:	42a1      	cmp	r1, r4
    2932:	d1fb      	bne.n	292c <parsePreset+0x88c>
    2934:	f641 5161 	movw	r1, #7521	; 0x1d61
    2938:	f2c0 0100 	movt	r1, #0
		params[i].scaleFunc = &scaleDefault;
    293c:	6101      	str	r1, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    293e:	301c      	adds	r0, #28
    2940:	42a0      	cmp	r0, r4
    2942:	d1fb      	bne.n	293c <parsePreset+0x89c>
		bufferIndex += 2;
    2944:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    2948:	3280      	adds	r2, #128	; 0x80
    294a:	b295      	uxth	r5, r2
	for (int i = paramCount; i < NUM_PARAMS; i++)
    294c:	2b9c      	cmp	r3, #156	; 0x9c
    294e:	f001 8350 	beq.w	3ff2 <parsePreset+0x1f52>
    2952:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2956:	f242 0641 	movw	r6, #8257	; 0x2041
    295a:	f641 5161 	movw	r1, #7521	; 0x1d61
    295e:	f24a 442c 	movw	r4, #42028	; 0xa42c
    2962:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
    2966:	f2c0 0600 	movt	r6, #0
    296a:	f2c0 0100 	movt	r1, #0
			params[i].zeroToOneVal[v] = 0.0f;
    296e:	2200      	movs	r2, #0
    2970:	f2c2 0401 	movt	r4, #8193	; 0x2001
    2974:	601a      	str	r2, [r3, #0]
    2976:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
    2978:	e9c3 1604 	strd	r1, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    297c:	331c      	adds	r3, #28
    297e:	42a3      	cmp	r3, r4
    2980:	d1f8      	bne.n	2974 <parsePreset+0x8d4>
	params[Transpose].scaleFunc = &scaleTranspose;
    2982:	f641 53e1 	movw	r3, #7649	; 0x1de1
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2986:	f24a 311c 	movw	r1, #41756	; 0xa31c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    298a:	f641 6681 	movw	r6, #7809	; 0x1e81
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    298e:	f242 0221 	movw	r2, #8225	; 0x2021
	params[Transpose].scaleFunc = &scaleTranspose;
    2992:	f2c0 0300 	movt	r3, #0
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2996:	f2c2 0101 	movt	r1, #8193	; 0x2001
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    299a:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    299e:	f2c0 0600 	movt	r6, #0
	params[Transpose].scaleFunc = &scaleTranspose;
    29a2:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    29a6:	f641 6321 	movw	r3, #7713	; 0x1e21
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    29aa:	f2c0 0200 	movt	r2, #0
    29ae:	f6a1 181c 	subw	r8, r1, #2332	; 0x91c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    29b2:	f2c0 0300 	movt	r3, #0
	for (int i = 0; i < NUM_EFFECT; i++)
    29b6:	2700      	movs	r7, #0
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    29b8:	f8cb 6ae4 	str.w	r6, [fp, #2788]	; 0xae4
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    29bc:	f8cb 31ec 	str.w	r3, [fp, #492]	; 0x1ec
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    29c0:	f641 5381 	movw	r3, #7553	; 0x1d81
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    29c4:	f8cb 6b8c 	str.w	r6, [fp, #2956]	; 0xb8c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    29c8:	f2c0 0300 	movt	r3, #0
    29cc:	f8cb 32cc 	str.w	r3, [fp, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    29d0:	f8cb 3358 	str.w	r3, [fp, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    29d4:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    29d8:	f8cb 34c4 	str.w	r3, [fp, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    29dc:	f8cb 35a4 	str.w	r3, [fp, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    29e0:	f8cb 3630 	str.w	r3, [fp, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    29e4:	f641 53a1 	movw	r3, #7585	; 0x1da1
    29e8:	f2c0 0300 	movt	r3, #0
    29ec:	f8cb 32e8 	str.w	r3, [fp, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    29f0:	f8cb 3454 	str.w	r3, [fp, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    29f4:	f8cb 35c0 	str.w	r3, [fp, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    29f8:	f641 53c1 	movw	r3, #7617	; 0x1dc1
    29fc:	f2c0 0300 	movt	r3, #0
    2a00:	f8cb 3304 	str.w	r3, [fp, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    2a04:	f8cb 3470 	str.w	r3, [fp, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2a08:	f8cb 35dc 	str.w	r3, [fp, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2a0c:	f641 6361 	movw	r3, #7777	; 0x1e61
    2a10:	f2c0 0300 	movt	r3, #0
    2a14:	f8cb 3aac 	str.w	r3, [fp, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2a18:	f8cb 3b54 	str.w	r3, [fp, #2900]	; 0xb54
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2a1c:	f641 7321 	movw	r3, #7969	; 0x1f21
    2a20:	f2c0 0300 	movt	r3, #0
    2a24:	f8cb 3be0 	str.w	r3, [fp, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2a28:	f8cb 3bfc 	str.w	r3, [fp, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    2a2c:	f8cb 3c34 	str.w	r3, [fp, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    2a30:	f8cb 3c88 	str.w	r3, [fp, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2a34:	f8cb 3ca4 	str.w	r3, [fp, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2a38:	f8cb 3cdc 	str.w	r3, [fp, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    2a3c:	f8cb 3d30 	str.w	r3, [fp, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    2a40:	f8cb 3d4c 	str.w	r3, [fp, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    2a44:	f8cb 3d84 	str.w	r3, [fp, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2a48:	f8cb 3dd8 	str.w	r3, [fp, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    2a4c:	f8cb 3df4 	str.w	r3, [fp, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    2a50:	f8cb 3e2c 	str.w	r3, [fp, #3628]	; 0xe2c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2a54:	f641 73a1 	movw	r3, #8097	; 0x1fa1
    2a58:	f2c0 0300 	movt	r3, #0
    2a5c:	f8cb 3e80 	str.w	r3, [fp, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    2a60:	f8cb 3f0c 	str.w	r3, [fp, #3852]	; 0xf0c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    2a64:	f8cb 3f98 	str.w	r3, [fp, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2a68:	624b      	str	r3, [r1, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2a6a:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2a6e:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    2a72:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2a74:	ee67 7a87 	vmul.f32	s15, s15, s14
    2a78:	fef8 7a67 	vrinta.f32	s15, s15
    2a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2a80:	edcd 7a01 	vstr	s15, [sp, #4]
    2a84:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    2a88:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2a8a:	bf88      	it	hi
    2a8c:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2a90:	f00a fd72 	bl	d578 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2a94:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    2a98:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    2a9e:	fef8 7a67 	vrinta.f32	s15, s15
    2aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2aa6:	edcd 7a01 	vstr	s15, [sp, #4]
    2aaa:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    2aae:	280d      	cmp	r0, #13
    2ab0:	d951      	bls.n	2b56 <parsePreset+0xab6>
	for (int i = 0; i < NUM_EFFECT; i++)
    2ab2:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2ab4:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2ab8:	f00a fd5e 	bl	d578 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2abc:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    2ac0:	2f04      	cmp	r7, #4
    2ac2:	d1d4      	bne.n	2a6e <parsePreset+0x9ce>
    2ac4:	f249 371c 	movw	r7, #37660	; 0x931c
    2ac8:	f2c2 0701 	movt	r7, #8193	; 0x2001
    2acc:	46bb      	mov	fp, r7
    2ace:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2ad0:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2ad2:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2ad4:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    2ad8:	4798      	blx	r3
    2ada:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    2ade:	42a6      	cmp	r6, r4
    2ae0:	d1f6      	bne.n	2ad0 <parsePreset+0xa30>
    2ae2:	f249 361c 	movw	r6, #37660	; 0x931c
    2ae6:	f2c2 0601 	movt	r6, #8193	; 0x2001
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2aea:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2aec:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2aee:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    2af2:	4798      	blx	r3
    2af4:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2af8:	42a6      	cmp	r6, r4
    2afa:	d1f6      	bne.n	2aea <parsePreset+0xa4a>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2afc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2b00:	eddb 7af7 	vldr	s15, [fp, #988]	; 0x3dc
    2b04:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b08:	fef8 7a67 	vrinta.f32	s15, s15
    2b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2b10:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    2b14:	2b05      	cmp	r3, #5
    2b16:	d842      	bhi.n	2b9e <parsePreset+0xafe>
    2b18:	e8df f013 	tbh	[pc, r3, lsl #1]
    2b1c:	00380a2a 	.word	0x00380a2a
    2b20:	0a140a1f 	.word	0x0a140a1f
    2b24:	09fe0a09 	.word	0x09fe0a09
		if (buffer[bufferIndex + 1] == 18)
    2b28:	f899 c001 	ldrb.w	ip, [r9, #1]
    2b2c:	f1bc 0f12 	cmp.w	ip, #18
    2b30:	d01a      	beq.n	2b68 <parsePreset+0xac8>
	uint16_t bufferIndex = 0;
    2b32:	4622      	mov	r2, r4
	uint16_t presetVersionNumber = 0;
    2b34:	46a2      	mov	sl, r4
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    2b36:	f1bc 0f13 	cmp.w	ip, #19
    2b3a:	f000 860b 	beq.w	3754 <parsePreset+0x16b4>
		presetName[i] = buffer[bufferIndex];
    2b3e:	f819 7004 	ldrb.w	r7, [r9, r4]
    2b42:	f7ff bae8 	b.w	2116 <parsePreset+0x76>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2b46:	f102 0184 	add.w	r1, r2, #132	; 0x84
    2b4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2b4e:	4421      	add	r1, r4
    2b50:	4401      	add	r1, r0
    2b52:	b289      	uxth	r1, r1
    2b54:	e6a6      	b.n	28a4 <parsePreset+0x804>
			setEffectsFunctions(effectType, i);
    2b56:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    2b58:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2b5a:	f00a fd0d 	bl	d578 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2b5e:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    2b62:	2f04      	cmp	r7, #4
    2b64:	d183      	bne.n	2a6e <parsePreset+0x9ce>
    2b66:	e7ad      	b.n	2ac4 <parsePreset+0xa24>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    2b68:	f899 2002 	ldrb.w	r2, [r9, #2]
    2b6c:	f899 3003 	ldrb.w	r3, [r9, #3]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2b70:	f899 c005 	ldrb.w	ip, [r9, #5]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    2b74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2b78:	fa1f fa83 	uxth.w	sl, r3
			whichModel = 0; //this is a synth preset
    2b7c:	f64c 2371 	movw	r3, #51825	; 0xca71
    2b80:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2b84:	701c      	strb	r4, [r3, #0]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2b86:	2404      	movs	r4, #4
			bufferIndex = 4;
    2b88:	4622      	mov	r2, r4
    2b8a:	e7d4      	b.n	2b36 <parsePreset+0xa96>
			  shapeTick[i] = &sineTriTick;
    2b8c:	f64d 0344 	movw	r3, #55364	; 0xd844
    2b90:	f648 6281 	movw	r2, #36481	; 0x8e81
    2b94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    2b98:	f2c0 0200 	movt	r2, #0
    2b9c:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2b9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2ba2:	ed9b 7aaa 	vldr	s14, [fp, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2ba6:	f649 0164 	movw	r1, #39012	; 0x9864
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2bae:	f2c2 0101 	movt	r1, #8193	; 0x2001
    2bb2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2bb6:	edd1 7a00 	vldr	s15, [r1]
    2bba:	f24d 61a0 	movw	r1, #54944	; 0xd6a0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bc2:	f2c2 0101 	movt	r1, #8193	; 0x2001
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    2bca:	bfd4      	ite	le
    2bcc:	2200      	movle	r2, #0
			oscsEnabled[i] = 1;
    2bce:	2201      	movgt	r2, #1
    2bd0:	910d      	str	r1, [sp, #52]	; 0x34
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2bd2:	fef8 7a67 	vrinta.f32	s15, s15
    2bd6:	700a      	strb	r2, [r1, #0]
    2bd8:	f249 3110 	movw	r1, #37648	; 0x9310
    2bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			enabledCount++;
    2be0:	4613      	mov	r3, r2
    2be2:	f2c2 0101 	movt	r1, #8193	; 0x2001
    2be6:	600a      	str	r2, [r1, #0]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2be8:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    2bec:	2a05      	cmp	r2, #5
    2bee:	d810      	bhi.n	2c12 <parsePreset+0xb72>
    2bf0:	e8df f012 	tbh	[pc, r2, lsl #1]
    2bf4:	00060987 	.word	0x00060987
    2bf8:	0971097c 	.word	0x0971097c
    2bfc:	095b0966 	.word	0x095b0966
			  shapeTick[i] = &sineTriTick;
    2c00:	f64d 0244 	movw	r2, #55364	; 0xd844
    2c04:	f648 6081 	movw	r0, #36481	; 0x8e81
    2c08:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2c0c:	f2c0 0000 	movt	r0, #0
    2c10:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2c12:	f249 7230 	movw	r2, #38704	; 0x9730
    2c16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2c1a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2c1e:	ed92 7a00 	vldr	s14, [r2]
    2c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c2a:	f341 80fc 	ble.w	3e26 <parsePreset+0x1d86>
			enabledCount++;
    2c2e:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2c30:	2201      	movs	r2, #1
			enabledCount++;
    2c32:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2c34:	4610      	mov	r0, r2
    2c36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2c38:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2c3c:	6048      	str	r0, [r1, #4]
    2c3e:	7062      	strb	r2, [r4, #1]
    2c40:	f649 12d0 	movw	r2, #39376	; 0x99d0
    2c44:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2c48:	edd2 7a00 	vldr	s15, [r2]
    2c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2c50:	fef8 7a67 	vrinta.f32	s15, s15
    2c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2c58:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    2c5c:	2a05      	cmp	r2, #5
    2c5e:	d810      	bhi.n	2c82 <parsePreset+0xbe2>
    2c60:	e8df f012 	tbh	[pc, r2, lsl #1]
    2c64:	090d0918 	.word	0x090d0918
    2c68:	08f70902 	.word	0x08f70902
    2c6c:	08ec0006 	.word	0x08ec0006
			  shapeTick[i] = &sineTick;
    2c70:	f64d 0244 	movw	r2, #55364	; 0xd844
    2c74:	f648 7081 	movw	r0, #36737	; 0x8f81
    2c78:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2c7c:	f2c0 0000 	movt	r0, #0
    2c80:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2c82:	f649 029c 	movw	r2, #39068	; 0x989c
    2c86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2c8a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    2c8e:	ed92 7a00 	vldr	s14, [r2]
    2c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c9a:	f341 80cb 	ble.w	3e34 <parsePreset+0x1d94>
			enabledCount++;
    2c9e:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2ca0:	2201      	movs	r2, #1
			enabledCount++;
    2ca2:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2ca4:	4610      	mov	r0, r2
    2ca6:	6088      	str	r0, [r1, #8]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2ca8:	f649 56a4 	movw	r6, #40356	; 0x9da4
    2cac:	990d      	ldr	r1, [sp, #52]	; 0x34
	if (params[Noise].realVal[0]  > 0.5f)
    2cae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2cb2:	f2c2 0601 	movt	r6, #8193	; 0x2001
	if (params[Noise].realVal[0]  > 0.5f)
    2cb6:	ed9b 6a80 	vldr	s12, [fp, #512]	; 0x200
    2cba:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2cbc:	f640 02d4 	movw	r2, #2260	; 0x8d4
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2cc0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
		setFilterTypes(filterType, i);
    2cc4:	2100      	movs	r1, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    2cc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
	if (params[Noise].realVal[0]  > 0.5f)
    2cca:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2cce:	edd6 7a00 	vldr	s15, [r6]
    2cd2:	f206 4444 	addw	r4, r6, #1092	; 0x444
	oscAmpMult = oscAmpMultArray[enabledCount];
    2cd6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2cda:	f640 03d0 	movw	r3, #2256	; 0x8d0
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
	oscAmpMult = oscAmpMultArray[enabledCount];
    2ce2:	6812      	ldr	r2, [r2, #0]
    2ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
	if (params[Noise].realVal[0]  > 0.5f)
    2ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    2cec:	601a      	str	r2, [r3, #0]
	if (params[Noise].realVal[0]  > 0.5f)
    2cee:	f24d 637c 	movw	r3, #54908	; 0xd67c
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2cf2:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2cfa:	f2c2 0301 	movt	r3, #8193	; 0x2001
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2cfe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2d02:	461a      	mov	r2, r3
    2d04:	9315      	str	r3, [sp, #84]	; 0x54
	if (params[Noise].realVal[0]  > 0.5f)
    2d06:	bfcc      	ite	gt
    2d08:	2301      	movgt	r3, #1
    2d0a:	2300      	movle	r3, #0
		setFilterTypes(filterType, i);
    2d0c:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    2d10:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    2d12:	f00a fce9 	bl	d6e8 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2d16:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    2d1a:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    2d1c:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2d1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2d22:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2d2a:	ee17 0a90 	vmov	r0, s15
    2d2e:	f00a fcdb 	bl	d6e8 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2d32:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    2d34:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    2d36:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2d38:	348c      	adds	r4, #140	; 0x8c
    2d3a:	edd3 7a00 	vldr	s15, [r3]
    2d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d42:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    2d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2d4a:	ee17 0a90 	vmov	r0, s15
    2d4e:	f00a fc47 	bl	d5e0 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    2d52:	2e04      	cmp	r6, #4
    2d54:	d1ed      	bne.n	2d32 <parsePreset+0xc92>
	params[NoiseTilt].setParam = &noiseSetTilt;
    2d56:	f64b 03c1 	movw	r3, #47297	; 0xb8c1
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2d5a:	f244 4290 	movw	r2, #17552	; 0x4490
	params[OutputTone].setParam = &setFinalLowpass;
    2d5e:	f24a 301c 	movw	r0, #41756	; 0xa31c
	params[Effect1Mix].setParam = &fxMixSet;
    2d62:	f24a 7181 	movw	r1, #42881	; 0xa781
	params[NoiseTilt].setParam = &noiseSetTilt;
    2d66:	f2c0 0300 	movt	r3, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2d6a:	f2c2 0201 	movt	r2, #8193	; 0x2001
	params[OutputTone].setParam = &setFinalLowpass;
    2d6e:	f2c2 0001 	movt	r0, #8193	; 0x2001
	params[Effect1Mix].setParam = &fxMixSet;
    2d72:	f2c0 0100 	movt	r1, #0
	params[NoiseTilt].setParam = &noiseSetTilt;
    2d76:	f8cb 3228 	str.w	r3, [fp, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2d7a:	f64b 1321 	movw	r3, #47393	; 0xb921
	params[Effect1Mix].setParam = &fxMixSet;
    2d7e:	f8cb 17a0 	str.w	r1, [fp, #1952]	; 0x7a0
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2d82:	f246 4ce4 	movw	ip, #25828	; 0x64e4
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2d86:	f2c0 0300 	movt	r3, #0
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2d8a:	f649 2621 	movw	r6, #39457	; 0x9a21
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2d8e:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2d92:	f649 2461 	movw	r4, #39521	; 0x9a61
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2d96:	f8cb 3260 	str.w	r3, [fp, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2d9a:	f64b 03e1 	movw	r3, #47329	; 0xb8e1
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2d9e:	f649 3e01 	movw	lr, #39681	; 0x9b01
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2da2:	f2c0 0600 	movt	r6, #0
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2da6:	f2c0 0300 	movt	r3, #0
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2daa:	f2c0 0400 	movt	r4, #0
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2dae:	f2c0 0e00 	movt	lr, #0
	for (int i = 0; i < NUM_PARAMS; i++)
    2db2:	f04f 0800 	mov.w	r8, #0
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2db6:	f8cb 3244 	str.w	r3, [fp, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2dba:	f649 3361 	movw	r3, #39777	; 0x9b61
    2dbe:	f2c0 0300 	movt	r3, #0
    2dc2:	f8cb 304c 	str.w	r3, [fp, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2dc6:	f649 3381 	movw	r3, #39809	; 0x9b81
    2dca:	f2c0 0300 	movt	r3, #0
    2dce:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    2dd2:	f649 33a1 	movw	r3, #39841	; 0x9ba1
    2dd6:	f2c0 0300 	movt	r3, #0
    2dda:	f8cb 31f0 	str.w	r3, [fp, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2dde:	f649 33c1 	movw	r3, #39873	; 0x9bc1
    2de2:	f2c0 0300 	movt	r3, #0
    2de6:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2dea:	f249 43c1 	movw	r3, #38081	; 0x94c1
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2dee:	6810      	ldr	r0, [r2, #0]
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2df0:	f2c0 0300 	movt	r3, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2df4:	f8cb 0714 	str.w	r0, [fp, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2df8:	6850      	ldr	r0, [r2, #4]
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2dfa:	f8cb 32d0 	str.w	r3, [fp, #720]	; 0x2d0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2dfe:	f8cb 0730 	str.w	r0, [fp, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2e02:	6890      	ldr	r0, [r2, #8]
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    2e04:	f8cb 343c 	str.w	r3, [fp, #1084]	; 0x43c
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2e08:	f8cb 074c 	str.w	r0, [fp, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2e0c:	68d0      	ldr	r0, [r2, #12]
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    2e0e:	f8cb 35a8 	str.w	r3, [fp, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2e12:	f249 5321 	movw	r3, #38177	; 0x9521
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2e16:	f8cb 0768 	str.w	r0, [fp, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    2e1a:	6910      	ldr	r0, [r2, #16]
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2e1c:	f2c0 0300 	movt	r3, #0
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    2e20:	f8cb 0784 	str.w	r0, [fp, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    2e24:	6950      	ldr	r0, [r2, #20]
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2e26:	f8cb 335c 	str.w	r3, [fp, #860]	; 0x35c
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    2e2a:	f8cb 07f4 	str.w	r0, [fp, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2e2e:	6990      	ldr	r0, [r2, #24]
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    2e30:	f8cb 34c8 	str.w	r3, [fp, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2e34:	f8cb 3634 	str.w	r3, [fp, #1588]	; 0x634
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2e38:	f24a 73a1 	movw	r3, #42913	; 0xa7a1
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2e3c:	f8cb 0810 	str.w	r0, [fp, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    2e40:	69d0      	ldr	r0, [r2, #28]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2e42:	f2c0 0300 	movt	r3, #0
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    2e46:	f8cb 082c 	str.w	r0, [fp, #2092]	; 0x82c
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    2e4a:	6a10      	ldr	r0, [r2, #32]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2e4c:	f8cb 37bc 	str.w	r3, [fp, #1980]	; 0x7bc
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    2e50:	f8cb 0848 	str.w	r0, [fp, #2120]	; 0x848
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2e54:	f649 20a1 	movw	r0, #39585	; 0x9aa1
	params[Effect2Mix].setParam = &fxMixSet;
    2e58:	f8cb 1880 	str.w	r1, [fp, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    2e5c:	f8cb 1960 	str.w	r1, [fp, #2400]	; 0x960
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2e60:	f2c0 0000 	movt	r0, #0
	params[Effect4Mix].setParam = &fxMixSet;
    2e64:	f8cb 1a40 	str.w	r1, [fp, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2e68:	6a51      	ldr	r1, [r2, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    2e6a:	f8cb 389c 	str.w	r3, [fp, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2e6e:	f8cb 1864 	str.w	r1, [fp, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2e72:	6a91      	ldr	r1, [r2, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2e74:	f8cb 397c 	str.w	r3, [fp, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2e78:	f8cb 18d4 	str.w	r1, [fp, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2e7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2e7e:	f8cb 3a5c 	str.w	r3, [fp, #2652]	; 0xa5c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2e82:	f248 6340 	movw	r3, #34368	; 0x8640
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2e86:	f8cb 18f0 	str.w	r1, [fp, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2e8a:	6b11      	ldr	r1, [r2, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2e8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2e90:	f8cb 190c 	str.w	r1, [fp, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2e94:	6b51      	ldr	r1, [r2, #52]	; 0x34
    2e96:	f8cb 1928 	str.w	r1, [fp, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    2e9a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    2e9c:	f8cb 1944 	str.w	r1, [fp, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2ea0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    2ea2:	f8cb 19b4 	str.w	r1, [fp, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    2ea6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    2ea8:	f8cb 19d0 	str.w	r1, [fp, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    2eac:	6c51      	ldr	r1, [r2, #68]	; 0x44
    2eae:	f8cb 19ec 	str.w	r1, [fp, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2eb2:	6c91      	ldr	r1, [r2, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2eb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2eb6:	f8cb 1a08 	str.w	r1, [fp, #2568]	; 0xa08
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2eba:	f649 21c1 	movw	r1, #39617	; 0x9ac1
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2ebe:	f8cb 2a24 	str.w	r2, [fp, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2ec2:	f8dc 2000 	ldr.w	r2, [ip]
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2ec6:	f2c0 0100 	movt	r1, #0
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2eca:	f8cb 2ae8 	str.w	r2, [fp, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2ece:	f8dc 2004 	ldr.w	r2, [ip, #4]
    2ed2:	f8cb 2acc 	str.w	r2, [fp, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2ed6:	f8dc 2008 	ldr.w	r2, [ip, #8]
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2eda:	f8cb 0c1c 	str.w	r0, [fp, #3100]	; 0xc1c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2ede:	f8cb 2b90 	str.w	r2, [fp, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2ee2:	f8dc 200c 	ldr.w	r2, [ip, #12]
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2ee6:	f8cb 0cc4 	str.w	r0, [fp, #3268]	; 0xcc4
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2eea:	f8cb 2b74 	str.w	r2, [fp, #2932]	; 0xb74
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2eee:	681a      	ldr	r2, [r3, #0]
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    2ef0:	f8cb 0d6c 	str.w	r0, [fp, #3436]	; 0xd6c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2ef4:	f8cb 2e84 	str.w	r2, [fp, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2ef8:	68da      	ldr	r2, [r3, #12]
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    2efa:	f8cb 0e14 	str.w	r0, [fp, #3604]	; 0xe14
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2efe:	f24a 301c 	movw	r0, #41756	; 0xa31c
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2f02:	f8cb 2f10 	str.w	r2, [fp, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2f06:	699a      	ldr	r2, [r3, #24]
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2f08:	f2c2 0001 	movt	r0, #8193	; 0x2001
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2f0c:	f8cb 6be4 	str.w	r6, [fp, #3044]	; 0xbe4
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2f10:	f8cb 2f9c 	str.w	r2, [fp, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2f16:	f8cb 4c00 	str.w	r4, [fp, #3072]	; 0xc00
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2f1a:	f8cb 1c38 	str.w	r1, [fp, #3128]	; 0xc38
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2f1e:	f8cb 6c8c 	str.w	r6, [fp, #3212]	; 0xc8c
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    2f22:	f8cb 4ca8 	str.w	r4, [fp, #3240]	; 0xca8
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    2f26:	f8cb 1ce0 	str.w	r1, [fp, #3296]	; 0xce0
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    2f2a:	f8cb 6d34 	str.w	r6, [fp, #3380]	; 0xd34
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2f2e:	f8cb 6ddc 	str.w	r6, [fp, #3548]	; 0xddc
			params[i].objectNumber = 1;
    2f32:	2601      	movs	r6, #1
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    2f34:	f8cb 4d50 	str.w	r4, [fp, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    2f38:	f8cb 4df8 	str.w	r4, [fp, #3576]	; 0xdf8
		params[i].objectNumber = 0;
    2f3c:	4644      	mov	r4, r8
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    2f3e:	f8cb 1d88 	str.w	r1, [fp, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    2f42:	f8cb 1e30 	str.w	r1, [fp, #3632]	; 0xe30
	params[OutputAmp].setParam = &setAmp;
    2f46:	f649 3141 	movw	r1, #39745	; 0x9b41
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2f4a:	f8cb ec54 	str.w	lr, [fp, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    2f4e:	f8cb ecfc 	str.w	lr, [fp, #3324]	; 0xcfc
	params[OutputAmp].setParam = &setAmp;
    2f52:	f2c0 0100 	movt	r1, #0
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    2f56:	f8cb eda4 	str.w	lr, [fp, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    2f5a:	f8cb ee4c 	str.w	lr, [fp, #3660]	; 0xe4c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2f5e:	6282      	str	r2, [r0, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2f60:	685a      	ldr	r2, [r3, #4]
	params[OutputAmp].setParam = &setAmp;
    2f62:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2f66:	f8cb 2ea0 	str.w	r2, [fp, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2f6a:	691a      	ldr	r2, [r3, #16]
    2f6c:	f8cb 2f2c 	str.w	r2, [fp, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2f70:	69da      	ldr	r2, [r3, #28]
    2f72:	f8cb 2fb8 	str.w	r2, [fp, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f78:	6442      	str	r2, [r0, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2f7a:	689a      	ldr	r2, [r3, #8]
    2f7c:	f8cb 2ebc 	str.w	r2, [fp, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2f80:	695a      	ldr	r2, [r3, #20]
    2f82:	f8cb 2f48 	str.w	r2, [fp, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2f86:	6a1a      	ldr	r2, [r3, #32]
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2f8a:	f8cb 2fd4 	str.w	r2, [fp, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2f8e:	6603      	str	r3, [r0, #96]	; 0x60
		if ((i >= Osc1) && (i < Osc2))
    2f90:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    2f94:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    2f96:	2b0c      	cmp	r3, #12
    2f98:	f240 82cd 	bls.w	3536 <parsePreset+0x1496>
		else if ((i >= Osc2) && (i < Osc3))
    2f9c:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2fa0:	2b72      	cmp	r3, #114	; 0x72
    2fa2:	f200 82c8 	bhi.w	3536 <parsePreset+0x1496>
    2fa6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2faa:	0073      	.short	0x0073
    2fac:	00730073 	.word	0x00730073
    2fb0:	00730073 	.word	0x00730073
    2fb4:	00730073 	.word	0x00730073
    2fb8:	00730073 	.word	0x00730073
    2fbc:	00730073 	.word	0x00730073
    2fc0:	00730073 	.word	0x00730073
    2fc4:	02c002c0 	.word	0x02c002c0
    2fc8:	02c002c0 	.word	0x02c002c0
    2fcc:	02c002c0 	.word	0x02c002c0
    2fd0:	02c002c0 	.word	0x02c002c0
    2fd4:	02c002c0 	.word	0x02c002c0
    2fd8:	02c002c0 	.word	0x02c002c0
    2fdc:	02c602c0 	.word	0x02c602c0
    2fe0:	02c602c6 	.word	0x02c602c6
    2fe4:	02c602c6 	.word	0x02c602c6
    2fe8:	02c602c6 	.word	0x02c602c6
    2fec:	007302c6 	.word	0x007302c6
    2ff0:	00730073 	.word	0x00730073
    2ff4:	00730073 	.word	0x00730073
    2ff8:	00730073 	.word	0x00730073
    2ffc:	02c00073 	.word	0x02c00073
    3000:	02c002c0 	.word	0x02c002c0
    3004:	02c002c0 	.word	0x02c002c0
    3008:	02c002c0 	.word	0x02c002c0
    300c:	02c302c0 	.word	0x02c302c0
    3010:	02c302c3 	.word	0x02c302c3
    3014:	02c302c3 	.word	0x02c302c3
    3018:	02c302c3 	.word	0x02c302c3
    301c:	02c602c3 	.word	0x02c602c3
    3020:	02c602c6 	.word	0x02c602c6
    3024:	02c602c6 	.word	0x02c602c6
    3028:	007302c6 	.word	0x007302c6
    302c:	00730073 	.word	0x00730073
    3030:	00730073 	.word	0x00730073
    3034:	00730073 	.word	0x00730073
    3038:	02c602c6 	.word	0x02c602c6
    303c:	02c602c6 	.word	0x02c602c6
    3040:	02c602c6 	.word	0x02c602c6
    3044:	00730073 	.word	0x00730073
    3048:	00730073 	.word	0x00730073
    304c:	00730073 	.word	0x00730073
    3050:	02c002c0 	.word	0x02c002c0
    3054:	02c002c0 	.word	0x02c002c0
    3058:	02c002c0 	.word	0x02c002c0
    305c:	02c302c3 	.word	0x02c302c3
    3060:	02c302c3 	.word	0x02c302c3
    3064:	02c302c3 	.word	0x02c302c3
    3068:	02c602c6 	.word	0x02c602c6
    306c:	02c602c6 	.word	0x02c602c6
    3070:	007302c6 	.word	0x007302c6
    3074:	00730073 	.word	0x00730073
    3078:	00730073 	.word	0x00730073
    307c:	02c002c0 	.word	0x02c002c0
    3080:	02c002c0 	.word	0x02c002c0
    3084:	02c302c0 	.word	0x02c302c0
    3088:	02c302c3 	.word	0x02c302c3
    308c:	02c302c3 	.word	0x02c302c3
			params[i].objectNumber = 1;
    3090:	2001      	movs	r0, #1
    3092:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    3094:	ed97 0a02 	vldr	s0, [r7, #8]
    3098:	2100      	movs	r1, #0
    309a:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    309c:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    30a0:	4798      	blx	r3
    30a2:	ed97 0a03 	vldr	s0, [r7, #12]
    30a6:	697b      	ldr	r3, [r7, #20]
    30a8:	2101      	movs	r1, #1
    30aa:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    30ac:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    30ae:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    30b0:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    30b4:	f47f af6c 	bne.w	2f90 <parsePreset+0xef0>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    30b8:	f24a 311c 	movw	r1, #41756	; 0xa31c
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30bc:	f44f 7301 	mov.w	r3, #516	; 0x204
    30c0:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    30c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    30c8:	f2c2 0101 	movt	r1, #8193	; 0x2001
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30cc:	eddb 6a02 	vldr	s13, [fp, #8]
    30d0:	f6c3 4301 	movt	r3, #15361	; 0x3c01
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    30d4:	ed91 7a38 	vldr	s14, [r1, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    30dc:	eeb4 7ac6 	vcmpe.f32	s14, s12
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30e0:	ee07 3a10 	vmov	s14, r3
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    30e4:	2300      	movs	r3, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30e6:	eec7 5a26 	vdiv.f32	s11, s14, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    30ea:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    30ee:	ee07 3a10 	vmov	s14, r3
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    30f2:	f249 3300 	movw	r3, #37632	; 0x9300
    30f6:	f2c2 0301 	movt	r3, #8193	; 0x2001
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    30fa:	ee67 7a87 	vmul.f32	s15, s15, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    30fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3102:	bfcc      	ite	gt
    3104:	2201      	movgt	r2, #1
    3106:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3108:	edc3 5a00 	vstr	s11, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    310c:	f249 3304 	movw	r3, #37636	; 0x9304
    3110:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3114:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    3118:	f246 630d 	movw	r3, #26125	; 0x660d
    311c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3120:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    3122:	f1ba 0f00 	cmp.w	sl, #0
    3126:	f000 8682 	beq.w	3e2e <parsePreset+0x1d8e>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    312a:	edd1 7a3f 	vldr	s15, [r1, #252]	; 0xfc
    312e:	eef4 7ac6 	vcmpe.f32	s15, s12
    3132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3136:	bfcc      	ite	gt
    3138:	2201      	movgt	r2, #1
    313a:	2200      	movle	r2, #0
    313c:	f24a 432c 	movw	r3, #42028	; 0xa42c
		lfoOn[i] = 0;
    3140:	f24d 4038 	movw	r0, #54328	; 0xd438
	bufferIndex += 2;
    3144:	3504      	adds	r5, #4
	numMappings = 0;
    3146:	2400      	movs	r4, #0
    3148:	f2c2 0301 	movt	r3, #8193	; 0x2001
		lfoOn[i] = 0;
    314c:	f2c2 0001 	movt	r0, #8193	; 0x2001
	numMappings = 0;
    3150:	f249 310c 	movw	r1, #37644	; 0x930c
		envOn[i] = 0;
    3154:	f24d 3634 	movw	r6, #54068	; 0xd334
    3158:	701a      	strb	r2, [r3, #0]
		knobFrozen[i] = 0;
    315a:	f245 13d4 	movw	r3, #20948	; 0x51d4
		knobTicked[i] = 0;
    315e:	f246 6210 	movw	r2, #26128	; 0x6610
	bufferIndex += 2;
    3162:	fa1f f885 	uxth.w	r8, r5
	numMappings = 0;
    3166:	f248 65c4 	movw	r5, #34500	; 0x86c4
		knobFrozen[i] = 0;
    316a:	f2c2 0300 	movt	r3, #8192	; 0x2000
		knobTicked[i] = 0;
    316e:	f2c2 0201 	movt	r2, #8193	; 0x2001
	numMappings = 0;
    3172:	f2c2 0101 	movt	r1, #8193	; 0x2001
		envOn[i] = 0;
    3176:	f2c2 0601 	movt	r6, #8193	; 0x2001
		lfoOn[i] = 0;
    317a:	9010      	str	r0, [sp, #64]	; 0x40
    317c:	6004      	str	r4, [r0, #0]
		pedalTicked[i] = 0;
    317e:	f24a 4030 	movw	r0, #42032	; 0xa430
    3182:	f2c2 0501 	movt	r5, #8193	; 0x2001
		knobFrozen[i] = 0;
    3186:	701c      	strb	r4, [r3, #0]
    3188:	9316      	str	r3, [sp, #88]	; 0x58
		pedalTicked[i] = 0;
    318a:	f2c2 0001 	movt	r0, #8193	; 0x2001
		knobFrozen[i] = 0;
    318e:	705c      	strb	r4, [r3, #1]
	numMappings = 0;
    3190:	9113      	str	r1, [sp, #76]	; 0x4c
		knobFrozen[i] = 0;
    3192:	709c      	strb	r4, [r3, #2]
		knobTicked[i] = 0;
    3194:	9214      	str	r2, [sp, #80]	; 0x50
		knobFrozen[i] = 0;
    3196:	70dc      	strb	r4, [r3, #3]
	numMappings = 0;
    3198:	700c      	strb	r4, [r1, #0]
		pedalTicked[i] = 0;
    319a:	4621      	mov	r1, r4
		knobFrozen[i] = 0;
    319c:	711c      	strb	r4, [r3, #4]
		knobTicked[i] = 0;
    319e:	6014      	str	r4, [r2, #0]
		knobFrozen[i] = 0;
    31a0:	715c      	strb	r4, [r3, #5]
		knobTicked[i] = 0;
    31a2:	6054      	str	r4, [r2, #4]
		knobFrozen[i] = 0;
    31a4:	719c      	strb	r4, [r3, #6]
		knobTicked[i] = 0;
    31a6:	6094      	str	r4, [r2, #8]
		knobFrozen[i] = 0;
    31a8:	71dc      	strb	r4, [r3, #7]
		knobTicked[i] = 0;
    31aa:	60d4      	str	r4, [r2, #12]
		knobFrozen[i] = 0;
    31ac:	721c      	strb	r4, [r3, #8]
		knobTicked[i] = 0;
    31ae:	6114      	str	r4, [r2, #16]
		knobFrozen[i] = 0;
    31b0:	725c      	strb	r4, [r3, #9]
		knobTicked[i] = 0;
    31b2:	6154      	str	r4, [r2, #20]
		knobFrozen[i] = 0;
    31b4:	729c      	strb	r4, [r3, #10]
		knobTicked[i] = 0;
    31b6:	6194      	str	r4, [r2, #24]
		knobFrozen[i] = 0;
    31b8:	72dc      	strb	r4, [r3, #11]
		envOn[i] = 0;
    31ba:	9611      	str	r6, [sp, #68]	; 0x44
    31bc:	6034      	str	r4, [r6, #0]
		knobTicked[i] = 0;
    31be:	e9c2 4407 	strd	r4, r4, [r2, #28]
    31c2:	e9c2 4409 	strd	r4, r4, [r2, #36]	; 0x24
    31c6:	62d4      	str	r4, [r2, #44]	; 0x2c
		pedalTicked[i] = 0;
    31c8:	2228      	movs	r2, #40	; 0x28
    31ca:	f00a f815 	bl	d1f8 <__memset_veneer>
    31ce:	462b      	mov	r3, r5
    31d0:	f505 6118 	add.w	r1, r5, #2432	; 0x980
		mappings[i].destNumber = 255;
    31d4:	22ff      	movs	r2, #255	; 0xff
    31d6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    31d8:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    31da:	f843 4c04 	str.w	r4, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    31de:	428b      	cmp	r3, r1
    31e0:	d1f9      	bne.n	31d6 <parsePreset+0x1136>
	for (int i = 0; i < mappingCount; i++)
    31e2:	9b08      	ldr	r3, [sp, #32]
    31e4:	2b00      	cmp	r3, #0
    31e6:	f000 827b 	beq.w	36e0 <parsePreset+0x1640>
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    31ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
			mappings[whichMapping].destNumber = destNumber;
    31ee:	4656      	mov	r6, sl
    31f0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    31f4:	46ca      	mov	sl, r9
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    31f6:	f2c3 73ff 	movt	r3, #14335	; 0x37ff
			mappings[whichMapping].destNumber = destNumber;
    31fa:	46c3      	mov	fp, r8
    31fc:	46a8      	mov	r8, r5
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    31fe:	ee08 3a10 	vmov	s16, r3
    3202:	f64d 0380 	movw	r3, #55424	; 0xd880
    3206:	f2c2 0301 	movt	r3, #8193	; 0x2001
    320a:	9301      	str	r3, [sp, #4]
    320c:	f245 2338 	movw	r3, #21048	; 0x5238
    3210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3214:	930c      	str	r3, [sp, #48]	; 0x30
			pedalTicked[source - PEDAL_SOURCE_OFFSET] = 1;
    3216:	f24a 4330 	movw	r3, #42032	; 0xa430
    321a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    321e:	9312      	str	r3, [sp, #72]	; 0x48
			for (int v = 0; v < numStringsThisBoard; v++)
    3220:	f240 6394 	movw	r3, #1684	; 0x694
    3224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3228:	9317      	str	r3, [sp, #92]	; 0x5c
	for (int i = 0; i < mappingCount; i++)
    322a:	2300      	movs	r3, #0
    322c:	9304      	str	r3, [sp, #16]
		uint8_t destNumber = buffer[bufferIndex+1];
    322e:	eb0a 030b 	add.w	r3, sl, fp
    3232:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    3234:	2e00      	cmp	r6, #0
    3236:	f000 8191 	beq.w	355c <parsePreset+0x14bc>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    323a:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    323c:	2300      	movs	r3, #0
    323e:	4642      	mov	r2, r8
    3240:	461f      	mov	r7, r3
    3242:	461c      	mov	r4, r3
    3244:	e003      	b.n	324e <parsePreset+0x11ae>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3246:	3301      	adds	r3, #1
    3248:	324c      	adds	r2, #76	; 0x4c
    324a:	2b20      	cmp	r3, #32
    324c:	d00c      	beq.n	3268 <parsePreset+0x11c8>
			if (mappings[j].destNumber == destNumber)
    324e:	7811      	ldrb	r1, [r2, #0]
    3250:	4281      	cmp	r1, r0
    3252:	d1f8      	bne.n	3246 <parsePreset+0x11a6>
				foundOne = 1;
    3254:	2701      	movs	r7, #1
    3256:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    3258:	2e00      	cmp	r6, #0
    325a:	d1f4      	bne.n	3246 <parsePreset+0x11a6>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    325c:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    325e:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3262:	324c      	adds	r2, #76	; 0x4c
    3264:	2b20      	cmp	r3, #32
    3266:	d1f2      	bne.n	324e <parsePreset+0x11ae>
		if (foundOne == 0)
    3268:	b99f      	cbnz	r7, 3292 <parsePreset+0x11f2>
			whichMapping = numMappings;
    326a:	9913      	ldr	r1, [sp, #76]	; 0x4c
			mappings[whichMapping].dest = &params[destNumber];
    326c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    3270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			if (presetVersionNumber == 0)
    3272:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    3274:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    3276:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    327a:	bf08      	it	eq
    327c:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    327e:	461c      	mov	r4, r3
			numMappings++;
    3280:	3301      	adds	r3, #1
    3282:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    3284:	234c      	movs	r3, #76	; 0x4c
    3286:	fb03 f304 	mul.w	r3, r3, r4
    328a:	f808 0003 	strb.w	r0, [r8, r3]
    328e:	4443      	add	r3, r8
			mappings[whichMapping].dest = &params[destNumber];
    3290:	605a      	str	r2, [r3, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3292:	224c      	movs	r2, #76	; 0x4c
		int source = buffer[bufferIndex];
    3294:	f81a 300b 	ldrb.w	r3, [sl, fp]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3298:	9f01      	ldr	r7, [sp, #4]
    329a:	1c69      	adds	r1, r5, #1
    329c:	fb02 f204 	mul.w	r2, r2, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    32a0:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    32a2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    32a6:	eb02 00c5 	add.w	r0, r2, r5, lsl #3
    32aa:	f107 0704 	add.w	r7, r7, #4
    32ae:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    32b2:	4440      	add	r0, r8
    32b4:	4442      	add	r2, r8
    32b6:	60c7      	str	r7, [r0, #12]
    32b8:	442a      	add	r2, r5
    32ba:	9f01      	ldr	r7, [sp, #4]
    32bc:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
    32c0:	f848 0001 	str.w	r0, [r8, r1]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    32c4:	bfd4      	ite	le
    32c6:	2100      	movle	r1, #0
    32c8:	2101      	movgt	r1, #1
    32ca:	b218      	sxth	r0, r3
    32cc:	f882 1020 	strb.w	r1, [r2, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    32d0:	f1a3 0218 	sub.w	r2, r3, #24
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    32d4:	00e9      	lsls	r1, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    32d6:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    32d8:	9105      	str	r1, [sp, #20]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    32da:	f200 8133 	bhi.w	3544 <parsePreset+0x14a4>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    32de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    32e0:	f04f 0101 	mov.w	r1, #1
    32e4:	441a      	add	r2, r3
    32e6:	f802 1c18 	strb.w	r1, [r2, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    32ea:	2b02      	cmp	r3, #2
    32ec:	d803      	bhi.n	32f6 <parsePreset+0x1256>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    32ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    32f0:	f04f 0101 	mov.w	r1, #1
    32f4:	54d1      	strb	r1, [r2, r3]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    32f6:	2b03      	cmp	r3, #3
    32f8:	f000 8132 	beq.w	3560 <parsePreset+0x14c0>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    32fc:	1f1f      	subs	r7, r3, #4
    32fe:	2f0b      	cmp	r7, #11
    3300:	f240 815a 	bls.w	35b8 <parsePreset+0x1518>
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    3304:	3b1c      	subs	r3, #28
    3306:	2b09      	cmp	r3, #9
    3308:	d803      	bhi.n	3312 <parsePreset+0x1272>
			pedalTicked[source - PEDAL_SOURCE_OFFSET] = 1;
    330a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    330c:	2101      	movs	r1, #1
    330e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		int scalar = buffer[bufferIndex+2];
    3312:	eb0a 030b 	add.w	r3, sl, fp
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		int scalar = buffer[bufferIndex+2];
    3318:	789f      	ldrb	r7, [r3, #2]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    331a:	f1a7 0904 	sub.w	r9, r7, #4
    331e:	b239      	sxth	r1, r7
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3320:	f1a7 0018 	sub.w	r0, r7, #24
			if (scalar == 0xff)
    3324:	2fff      	cmp	r7, #255	; 0xff
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3326:	fa5f f389 	uxtb.w	r3, r9
    332a:	910f      	str	r1, [sp, #60]	; 0x3c
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    332c:	9007      	str	r0, [sp, #28]
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    332e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3332:	930e      	str	r3, [sp, #56]	; 0x38
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3334:	f1a7 0314 	sub.w	r3, r7, #20
    3338:	9309      	str	r3, [sp, #36]	; 0x24
					uint8_t whichMacro = scalar - MACRO_SOURCE_OFFSET;
    333a:	fa5f f389 	uxtb.w	r3, r9
    333e:	9305      	str	r3, [sp, #20]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    3340:	f1a7 031c 	sub.w	r3, r7, #28
    3344:	9306      	str	r3, [sp, #24]
			if (scalar == 0xff)
    3346:	f000 8110 	beq.w	356a <parsePreset+0x14ca>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    334a:	234c      	movs	r3, #76	; 0x4c
    334c:	1d2a      	adds	r2, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    334e:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    3350:	fb03 f304 	mul.w	r3, r3, r4
    3354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3358:	9a01      	ldr	r2, [sp, #4]
    335a:	4443      	add	r3, r8
    335c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    3360:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3362:	f200 8113 	bhi.w	358c <parsePreset+0x14ec>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3366:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3368:	f04f 0201 	mov.w	r2, #1
    336c:	443b      	add	r3, r7
    336e:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3372:	2f02      	cmp	r7, #2
    3374:	d803      	bhi.n	337e <parsePreset+0x12de>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    3376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3378:	f04f 0201 	mov.w	r2, #1
    337c:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    337e:	2f03      	cmp	r7, #3
    3380:	f000 8149 	beq.w	3616 <parsePreset+0x1576>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    3384:	f1b9 0f0b 	cmp.w	r9, #11
    3388:	f240 817a 	bls.w	3680 <parsePreset+0x15e0>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    338c:	9b06      	ldr	r3, [sp, #24]
    338e:	2b09      	cmp	r3, #9
    3390:	d803      	bhi.n	339a <parsePreset+0x12fa>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    3392:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3394:	2101      	movs	r1, #1
    3396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    339a:	224c      	movs	r2, #76	; 0x4c
    339c:	00eb      	lsls	r3, r5, #3
    339e:	9901      	ldr	r1, [sp, #4]
    33a0:	fb02 3304 	mla	r3, r2, r4, r3
    33a4:	007a      	lsls	r2, r7, #1
    33a6:	3201      	adds	r2, #1
    33a8:	4443      	add	r3, r8
    33aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    33ae:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    33b0:	9b07      	ldr	r3, [sp, #28]
    33b2:	2b03      	cmp	r3, #3
    33b4:	f200 80f5 	bhi.w	35a2 <parsePreset+0x1502>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    33b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33ba:	f04f 0201 	mov.w	r2, #1
    33be:	443b      	add	r3, r7
    33c0:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    33c4:	2f02      	cmp	r7, #2
    33c6:	d803      	bhi.n	33d0 <parsePreset+0x1330>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    33c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33ca:	f04f 0201 	mov.w	r2, #1
    33ce:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    33d0:	2f03      	cmp	r7, #3
    33d2:	f000 8125 	beq.w	3620 <parsePreset+0x1580>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    33d6:	f1b9 0f0b 	cmp.w	r9, #11
    33da:	f240 8126 	bls.w	362a <parsePreset+0x158a>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    33de:	9b06      	ldr	r3, [sp, #24]
    33e0:	2b09      	cmp	r3, #9
    33e2:	d803      	bhi.n	33ec <parsePreset+0x134c>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    33e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    33e6:	2101      	movs	r1, #1
    33e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    33ec:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    33f0:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    33f2:	eb0a 020b 	add.w	r2, sl, fp
		mappings[whichMapping].amount[whichHook] = amountFloat;
    33f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    33fa:	fb01 8404 	mla	r4, r1, r4, r8
    33fe:	f04f 0101 	mov.w	r1, #1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3402:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    3404:	4425      	add	r5, r4
    3406:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
		mappings[whichMapping].amount[whichHook] = amountFloat;
    340a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    340e:	78d1      	ldrb	r1, [r2, #3]
    3410:	7912      	ldrb	r2, [r2, #4]
    3412:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3416:	b212      	sxth	r2, r2
    3418:	ee07 2a90 	vmov	s15, r2
    341c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3420:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3424:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    3428:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    342c:	3301      	adds	r3, #1
    342e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    3432:	2e00      	cmp	r6, #0
    3434:	f000 8081 	beq.w	353a <parsePreset+0x149a>
			bufferIndex += 6;
    3438:	f10b 0306 	add.w	r3, fp, #6
    343c:	fa1f fb83 	uxth.w	fp, r3
	for (int i = 0; i < mappingCount; i++)
    3440:	9b04      	ldr	r3, [sp, #16]
    3442:	9a08      	ldr	r2, [sp, #32]
    3444:	3301      	adds	r3, #1
    3446:	4293      	cmp	r3, r2
    3448:	9304      	str	r3, [sp, #16]
    344a:	f47f aef0 	bne.w	322e <parsePreset+0x118e>
	for (int i = 0; i < numMappings; i++)
    344e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3450:	781a      	ldrb	r2, [r3, #0]
    3452:	2a00      	cmp	r2, #0
    3454:	f000 8144 	beq.w	36e0 <parsePreset+0x1640>
			for (int v = 0; v < numStringsThisBoard; v++)
    3458:	f240 6894 	movw	r8, #1684	; 0x694
    345c:	f248 64cc 	movw	r4, #34508	; 0x86cc
	for (int i = 0; i < numMappings; i++)
    3460:	2700      	movs	r7, #0
    3462:	469a      	mov	sl, r3
			for (int v = 0; v < numStringsThisBoard; v++)
    3464:	f2c2 0800 	movt	r8, #8192	; 0x2000
    3468:	f2c2 0401 	movt	r4, #8193	; 0x2001
    346c:	e004      	b.n	3478 <parsePreset+0x13d8>
	for (int i = 0; i < numMappings; i++)
    346e:	3701      	adds	r7, #1
    3470:	344c      	adds	r4, #76	; 0x4c
    3472:	42ba      	cmp	r2, r7
    3474:	f340 8134 	ble.w	36e0 <parsePreset+0x1640>
		if (mappings[i].destNumber != 255)
    3478:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    347c:	2bff      	cmp	r3, #255	; 0xff
    347e:	d0f6      	beq.n	346e <parsePreset+0x13ce>
			for (int v = 0; v < numStringsThisBoard; v++)
    3480:	f898 3000 	ldrb.w	r3, [r8]
    3484:	2b00      	cmp	r3, #0
    3486:	d0f2      	beq.n	346e <parsePreset+0x13ce>
    3488:	4626      	mov	r6, r4
    348a:	2500      	movs	r5, #0
				float unsmoothedValue = 0.0f;
    348c:	2200      	movs	r2, #0
					if (mappings[i].hookActive[j])
    348e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    3492:	ee07 2a90 	vmov	s15, r2
					if (mappings[i].hookActive[j])
    3496:	b15b      	cbz	r3, 34b0 <parsePreset+0x1410>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    3498:	6832      	ldr	r2, [r6, #0]
    349a:	69f3      	ldr	r3, [r6, #28]
    349c:	edd2 7a00 	vldr	s15, [r2]
    34a0:	edd3 6a00 	vldr	s13, [r3]
    34a4:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    34a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    34ac:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    34b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    34b4:	b15b      	cbz	r3, 34ce <parsePreset+0x142e>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    34b6:	68b2      	ldr	r2, [r6, #8]
    34b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    34ba:	ed92 7a00 	vldr	s14, [r2]
    34be:	ed93 6a00 	vldr	s12, [r3]
    34c2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    34c6:	ee27 7a06 	vmul.f32	s14, s14, s12
    34ca:	eee7 7a26 	vfma.f32	s15, s14, s13
					if (mappings[i].hookActive[j])
    34ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    34d2:	b15b      	cbz	r3, 34ec <parsePreset+0x144c>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    34d4:	6932      	ldr	r2, [r6, #16]
    34d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    34d8:	ed92 7a00 	vldr	s14, [r2]
    34dc:	ed93 6a00 	vldr	s12, [r3]
    34e0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    34e4:	ee27 7a06 	vmul.f32	s14, s14, s12
    34e8:	eee7 7a26 	vfma.f32	s15, s14, s13
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    34ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    34f0:	3604      	adds	r6, #4
    34f2:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    34f6:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    34f8:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    34fc:	ee37 0a80 	vadd.f32	s0, s15, s0
    3500:	4798      	blx	r3
    3502:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    3506:	f854 3c04 	ldr.w	r3, [r4, #-4]
    350a:	4629      	mov	r1, r5
    350c:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    3510:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    3512:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    3514:	ed92 0a02 	vldr	s0, [r2, #8]
    3518:	695a      	ldr	r2, [r3, #20]
    351a:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    351c:	f898 3000 	ldrb.w	r3, [r8]
    3520:	42ab      	cmp	r3, r5
    3522:	dcb3      	bgt.n	348c <parsePreset+0x13ec>
	for (int i = 0; i < numMappings; i++)
    3524:	f89a 2000 	ldrb.w	r2, [sl]
    3528:	e7a1      	b.n	346e <parsePreset+0x13ce>
			params[i].objectNumber = 2;
    352a:	2002      	movs	r0, #2
    352c:	7638      	strb	r0, [r7, #24]
    352e:	e5b1      	b.n	3094 <parsePreset+0xff4>
			params[i].objectNumber = 3;
    3530:	2003      	movs	r0, #3
    3532:	7638      	strb	r0, [r7, #24]
    3534:	e5ae      	b.n	3094 <parsePreset+0xff4>
		if ((i >= Osc1) && (i < Osc2))
    3536:	2000      	movs	r0, #0
    3538:	e5ac      	b.n	3094 <parsePreset+0xff4>
			bufferIndex += 5;
    353a:	f10b 0305 	add.w	r3, fp, #5
    353e:	fa1f fb83 	uxth.w	fp, r3
    3542:	e77d      	b.n	3440 <parsePreset+0x13a0>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3544:	f1a3 0214 	sub.w	r2, r3, #20
    3548:	2a03      	cmp	r2, #3
    354a:	f63f aece 	bhi.w	32ea <parsePreset+0x124a>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    354e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3550:	f04f 0101 	mov.w	r1, #1
    3554:	441a      	add	r2, r3
    3556:	f802 1c14 	strb.w	r1, [r2, #-20]
    355a:	e6c6      	b.n	32ea <parsePreset+0x124a>
		uint8_t whichHook = 0;
    355c:	4635      	mov	r5, r6
    355e:	e66d      	b.n	323c <parsePreset+0x119c>
			noiseOn = 1;
    3560:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3562:	f04f 0201 	mov.w	r2, #1
    3566:	701a      	strb	r2, [r3, #0]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    3568:	e6d3      	b.n	3312 <parsePreset+0x1272>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    356a:	234c      	movs	r3, #76	; 0x4c
    356c:	1d2a      	adds	r2, r5, #4
    356e:	00e9      	lsls	r1, r5, #3
    3570:	fb03 f304 	mul.w	r3, r3, r4
    3574:	4419      	add	r1, r3
    3576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    357a:	f240 62a8 	movw	r2, #1704	; 0x6a8
    357e:	4441      	add	r1, r8
    3580:	4443      	add	r3, r8
    3582:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3586:	605a      	str	r2, [r3, #4]
    3588:	628a      	str	r2, [r1, #40]	; 0x28
    358a:	e72f      	b.n	33ec <parsePreset+0x134c>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    358c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    358e:	2b03      	cmp	r3, #3
    3590:	f63f aeef 	bhi.w	3372 <parsePreset+0x12d2>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3594:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3596:	f04f 0201 	mov.w	r2, #1
    359a:	443b      	add	r3, r7
    359c:	f803 2c14 	strb.w	r2, [r3, #-20]
    35a0:	e6e7      	b.n	3372 <parsePreset+0x12d2>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    35a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35a4:	2b03      	cmp	r3, #3
    35a6:	f63f af0d 	bhi.w	33c4 <parsePreset+0x1324>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    35aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35ac:	f04f 0201 	mov.w	r2, #1
    35b0:	443b      	add	r3, r7
    35b2:	f803 2c14 	strb.w	r2, [r3, #-20]
    35b6:	e705      	b.n	33c4 <parsePreset+0x1324>
			for (int v = 0; v < numStringsThisBoard; v++)
    35b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    35ba:	b2ff      	uxtb	r7, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    35bc:	781a      	ldrb	r2, [r3, #0]
    35be:	2a00      	cmp	r2, #0
    35c0:	f000 80c3 	beq.w	374a <parsePreset+0x16aa>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    35c4:	f107 0c03 	add.w	ip, r7, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	0092      	lsls	r2, r2, #2
    35cc:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    35d0:	f8cd c014 	str.w	ip, [sp, #20]
    35d4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    35d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35da:	ea4f 09cc 	mov.w	r9, ip, lsl #3
    35de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    35e2:	3108      	adds	r1, #8
    35e4:	f009 ff1c 	bl	d420 <__memcpy_veneer>
    35e8:	f8dd c014 	ldr.w	ip, [sp, #20]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    35ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    35ee:	eba9 030c 	sub.w	r3, r9, ip
    35f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35f6:	ed93 0a02 	vldr	s0, [r3, #8]
    35fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35fc:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    3600:	f009 fe72 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    3604:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3606:	f04f 0201 	mov.w	r2, #1
    360a:	55da      	strb	r2, [r3, r7]
			knobTicked[whichMacro] = 1;
    360c:	2201      	movs	r2, #1
    360e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3610:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    3614:	e67d      	b.n	3312 <parsePreset+0x1272>
					noiseOn = 1;
    3616:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3618:	f04f 0201 	mov.w	r2, #1
    361c:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    361e:	e6b5      	b.n	338c <parsePreset+0x12ec>
					noiseOn = 1;
    3620:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3622:	f04f 0201 	mov.w	r2, #1
    3626:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    3628:	e6d9      	b.n	33de <parsePreset+0x133e>
					for (int v = 0; v < numStringsThisBoard; v++)
    362a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    362c:	781a      	ldrb	r2, [r3, #0]
    362e:	2a00      	cmp	r2, #0
    3630:	f000 84d8 	beq.w	3fe4 <parsePreset+0x1f44>
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3634:	9b01      	ldr	r3, [sp, #4]
    3636:	0092      	lsls	r2, r2, #2
    3638:	990f      	ldr	r1, [sp, #60]	; 0x3c
    363a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    363e:	9b05      	ldr	r3, [sp, #20]
    3640:	f103 0903 	add.w	r9, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3646:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    364a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    364e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3652:	3108      	adds	r1, #8
    3654:	f009 fee4 	bl	d420 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    365a:	eba7 0309 	sub.w	r3, r7, r9
    365e:	980e      	ldr	r0, [sp, #56]	; 0x38
    3660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3664:	ed93 0a02 	vldr	s0, [r3, #8]
    3668:	f009 fe3e 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    366c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    366e:	9b05      	ldr	r3, [sp, #20]
    3670:	f04f 0101 	mov.w	r1, #1
    3674:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    3676:	2101      	movs	r1, #1
    3678:	9a14      	ldr	r2, [sp, #80]	; 0x50
    367a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    367e:	e6b5      	b.n	33ec <parsePreset+0x134c>
					for (int v = 0; v < numStringsThisBoard; v++)
    3680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3682:	781a      	ldrb	r2, [r3, #0]
    3684:	2a00      	cmp	r2, #0
    3686:	f000 84a5 	beq.w	3fd4 <parsePreset+0x1f34>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    368a:	9b05      	ldr	r3, [sp, #20]
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    368c:	0092      	lsls	r2, r2, #2
    368e:	9901      	ldr	r1, [sp, #4]
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3690:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3694:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3698:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    369c:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    36a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    36a4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    36a8:	3108      	adds	r1, #8
    36aa:	e9cd 3c18 	strd	r3, ip, [sp, #96]	; 0x60
    36ae:	f009 feb7 	bl	d420 <__memcpy_veneer>
    36b2:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    36b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    36b8:	980e      	ldr	r0, [sp, #56]	; 0x38
    36ba:	eba2 030c 	sub.w	r3, r2, ip
    36be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    36c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    36c4:	ed93 0a02 	vldr	s0, [r3, #8]
    36c8:	f009 fe0e 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    36cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    36ce:	9b05      	ldr	r3, [sp, #20]
    36d0:	f04f 0101 	mov.w	r1, #1
    36d4:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    36d6:	2101      	movs	r1, #1
    36d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    36da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    36de:	e65c      	b.n	339a <parsePreset+0x12fa>
	audioSwitchToSynth();
    36e0:	f009 fda6 	bl	d230 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    36e4:	f24a 4370 	movw	r3, #42096	; 0xa470
    36e8:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    36ea:	f89d 1008 	ldrb.w	r1, [sp, #8]
	presetWaitingToParse = 0;
    36ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
	oscToTick = NUM_OSC;
    36f2:	f640 02e4 	movw	r2, #2276	; 0x8e4
	audioMasterLevel = 1.0f;
    36f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	overSampled = 1;
    36fa:	2501      	movs	r5, #1
	presetWaitingToParse = 0;
    36fc:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    36fe:	f240 63a5 	movw	r3, #1701	; 0x6a5
	oscToTick = NUM_OSC;
    3702:	f2c2 0200 	movt	r2, #8192	; 0x2000
	changeOversampling(overSampled);
    3706:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    3708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    370c:	7019      	strb	r1, [r3, #0]
	oscToTick = NUM_OSC;
    370e:	2103      	movs	r1, #3
	overSampled = 1;
    3710:	f640 03e8 	movw	r3, #2280	; 0x8e8
	oscToTick = NUM_OSC;
    3714:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    3716:	f2c2 0300 	movt	r3, #8192	; 0x2000
	audioMasterLevel = 1.0f;
    371a:	9a03      	ldr	r2, [sp, #12]
	overSampled = 1;
    371c:	601d      	str	r5, [r3, #0]
	audioMasterLevel = 1.0f;
    371e:	edc2 7a00 	vstr	s15, [r2]
	changeOversampling(overSampled);
    3722:	f009 fe49 	bl	d3b8 <__changeOversampling_veneer>
    3726:	b662      	cpsie	i
	diskBusy = 0;
    3728:	f244 428c 	movw	r2, #17548	; 0x448c
	receivingI2C = 0;
    372c:	f64a 03c8 	movw	r3, #43208	; 0xa8c8
	presetReady = 1;
    3730:	990a      	ldr	r1, [sp, #40]	; 0x28
	diskBusy = 0;
    3732:	f2c2 0201 	movt	r2, #8193	; 0x2001
	receivingI2C = 0;
    3736:	f2c2 0301 	movt	r3, #8193	; 0x2001
	presetReady = 1;
    373a:	600d      	str	r5, [r1, #0]
	diskBusy = 0;
    373c:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    373e:	701c      	strb	r4, [r3, #0]
}
    3740:	b01b      	add	sp, #108	; 0x6c
    3742:	ecbd 8b02 	vpop	{d8}
    3746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    374a:	f107 0c03 	add.w	ip, r7, #3
    374e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
    3752:	e74b      	b.n	35ec <parsePreset+0x154c>
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3754:	9902      	ldr	r1, [sp, #8]
    3756:	f242 0500 	movw	r5, #8192	; 0x2000
				presetName[i] = buffer[bufferIndex];
    375a:	f24a 425c 	movw	r2, #42076	; 0xa45c
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    375e:	20c8      	movs	r0, #200	; 0xc8
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3760:	f2c3 0504 	movt	r5, #12292	; 0x3004
    3764:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
				presetName[i] = buffer[bufferIndex];
    3768:	f2c2 0201 	movt	r2, #8193	; 0x2001
    376c:	f899 6004 	ldrb.w	r6, [r9, #4]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3770:	fb01 f000 	mul.w	r0, r1, r0
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3774:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    3778:	005b      	lsls	r3, r3, #1
				presetName[i] = buffer[bufferIndex];
    377a:	7016      	strb	r6, [r2, #0]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    377c:	f243 3480 	movw	r4, #13184	; 0x3380
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3780:	54ee      	strb	r6, [r5, r3]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    3782:	f64c 2671 	movw	r6, #51825	; 0xca71
				presetName[i] = buffer[bufferIndex];
    3786:	f899 3005 	ldrb.w	r3, [r9, #5]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    378a:	f2c3 0404 	movt	r4, #12292	; 0x3004
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    378e:	f2c2 0601 	movt	r6, #8193	; 0x2001
				presetName[i] = buffer[bufferIndex];
    3792:	7053      	strb	r3, [r2, #1]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3794:	704b      	strb	r3, [r1, #1]
				presetName[i] = buffer[bufferIndex];
    3796:	f899 3006 	ldrb.w	r3, [r9, #6]
    379a:	7093      	strb	r3, [r2, #2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    379c:	708b      	strb	r3, [r1, #2]
				presetName[i] = buffer[bufferIndex];
    379e:	f899 3007 	ldrb.w	r3, [r9, #7]
    37a2:	70d3      	strb	r3, [r2, #3]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37a4:	70cb      	strb	r3, [r1, #3]
				presetName[i] = buffer[bufferIndex];
    37a6:	f899 3008 	ldrb.w	r3, [r9, #8]
    37aa:	7113      	strb	r3, [r2, #4]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37ac:	710b      	strb	r3, [r1, #4]
				presetName[i] = buffer[bufferIndex];
    37ae:	f899 3009 	ldrb.w	r3, [r9, #9]
    37b2:	7153      	strb	r3, [r2, #5]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37b4:	714b      	strb	r3, [r1, #5]
				presetName[i] = buffer[bufferIndex];
    37b6:	f899 300a 	ldrb.w	r3, [r9, #10]
    37ba:	7193      	strb	r3, [r2, #6]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37bc:	718b      	strb	r3, [r1, #6]
				presetName[i] = buffer[bufferIndex];
    37be:	f899 300b 	ldrb.w	r3, [r9, #11]
    37c2:	71d3      	strb	r3, [r2, #7]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37c4:	71cb      	strb	r3, [r1, #7]
				presetName[i] = buffer[bufferIndex];
    37c6:	f899 300c 	ldrb.w	r3, [r9, #12]
    37ca:	7213      	strb	r3, [r2, #8]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37cc:	720b      	strb	r3, [r1, #8]
				presetName[i] = buffer[bufferIndex];
    37ce:	f899 300d 	ldrb.w	r3, [r9, #13]
    37d2:	7253      	strb	r3, [r2, #9]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37d4:	724b      	strb	r3, [r1, #9]
				presetName[i] = buffer[bufferIndex];
    37d6:	f899 300e 	ldrb.w	r3, [r9, #14]
    37da:	7293      	strb	r3, [r2, #10]
    37dc:	f899 500f 	ldrb.w	r5, [r9, #15]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37e0:	728b      	strb	r3, [r1, #10]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    37e2:	1823      	adds	r3, r4, r0
				presetName[i] = buffer[bufferIndex];
    37e4:	72d5      	strb	r5, [r2, #11]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37e6:	72cd      	strb	r5, [r1, #11]
				presetName[i] = buffer[bufferIndex];
    37e8:	f899 5010 	ldrb.w	r5, [r9, #16]
    37ec:	7315      	strb	r5, [r2, #12]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37ee:	730d      	strb	r5, [r1, #12]
				presetName[i] = buffer[bufferIndex];
    37f0:	f899 5011 	ldrb.w	r5, [r9, #17]
    37f4:	7355      	strb	r5, [r2, #13]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    37f6:	f899 2015 	ldrb.w	r2, [r9, #21]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    37fa:	734d      	strb	r5, [r1, #13]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    37fc:	f248 6174 	movw	r1, #34420	; 0x8674
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3800:	5422      	strb	r2, [r4, r0]
    3802:	f899 2016 	ldrb.w	r2, [r9, #22]
    3806:	f2c2 0101 	movt	r1, #8193	; 0x2001
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    380a:	f899 5014 	ldrb.w	r5, [r9, #20]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    380e:	705a      	strb	r2, [r3, #1]
    3810:	f101 0450 	add.w	r4, r1, #80	; 0x50
    3814:	f899 2017 	ldrb.w	r2, [r9, #23]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    3818:	7035      	strb	r5, [r6, #0]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    381a:	709a      	strb	r2, [r3, #2]
    381c:	f899 2018 	ldrb.w	r2, [r9, #24]
    3820:	70da      	strb	r2, [r3, #3]
    3822:	f899 2019 	ldrb.w	r2, [r9, #25]
    3826:	711a      	strb	r2, [r3, #4]
    3828:	f899 201a 	ldrb.w	r2, [r9, #26]
    382c:	715a      	strb	r2, [r3, #5]
    382e:	f899 201b 	ldrb.w	r2, [r9, #27]
    3832:	719a      	strb	r2, [r3, #6]
    3834:	f899 201c 	ldrb.w	r2, [r9, #28]
    3838:	71da      	strb	r2, [r3, #7]
    383a:	f899 201d 	ldrb.w	r2, [r9, #29]
    383e:	721a      	strb	r2, [r3, #8]
    3840:	f899 201e 	ldrb.w	r2, [r9, #30]
    3844:	729a      	strb	r2, [r3, #10]
    3846:	f899 201f 	ldrb.w	r2, [r9, #31]
    384a:	72da      	strb	r2, [r3, #11]
    384c:	f899 2020 	ldrb.w	r2, [r9, #32]
    3850:	731a      	strb	r2, [r3, #12]
    3852:	f899 2021 	ldrb.w	r2, [r9, #33]	; 0x21
    3856:	735a      	strb	r2, [r3, #13]
    3858:	f899 2022 	ldrb.w	r2, [r9, #34]	; 0x22
    385c:	739a      	strb	r2, [r3, #14]
    385e:	f899 2023 	ldrb.w	r2, [r9, #35]	; 0x23
    3862:	73da      	strb	r2, [r3, #15]
    3864:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
    3868:	741a      	strb	r2, [r3, #16]
    386a:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
    386e:	745a      	strb	r2, [r3, #17]
    3870:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
    3874:	749a      	strb	r2, [r3, #18]
    3876:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
    387a:	751a      	strb	r2, [r3, #20]
    387c:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
    3880:	755a      	strb	r2, [r3, #21]
    3882:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
    3886:	759a      	strb	r2, [r3, #22]
    3888:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
    388c:	75da      	strb	r2, [r3, #23]
    388e:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
    3892:	761a      	strb	r2, [r3, #24]
    3894:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
    3898:	765a      	strb	r2, [r3, #25]
    389a:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
    389e:	769a      	strb	r2, [r3, #26]
    38a0:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
    38a4:	76da      	strb	r2, [r3, #27]
    38a6:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
    38aa:	771a      	strb	r2, [r3, #28]
    38ac:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
    38b0:	779a      	strb	r2, [r3, #30]
    38b2:	f899 2031 	ldrb.w	r2, [r9, #49]	; 0x31
    38b6:	77da      	strb	r2, [r3, #31]
    38b8:	f899 2032 	ldrb.w	r2, [r9, #50]	; 0x32
    38bc:	f883 2020 	strb.w	r2, [r3, #32]
    38c0:	f899 2033 	ldrb.w	r2, [r9, #51]	; 0x33
    38c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    38c8:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
    38cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    38d0:	f899 2035 	ldrb.w	r2, [r9, #53]	; 0x35
    38d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    38d8:	f899 2036 	ldrb.w	r2, [r9, #54]	; 0x36
    38dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    38e0:	f899 2037 	ldrb.w	r2, [r9, #55]	; 0x37
    38e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    38e8:	f899 2038 	ldrb.w	r2, [r9, #56]	; 0x38
    38ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    38f0:	f899 2039 	ldrb.w	r2, [r9, #57]	; 0x39
    38f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    38f8:	f899 203a 	ldrb.w	r2, [r9, #58]	; 0x3a
    38fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    3900:	f899 203b 	ldrb.w	r2, [r9, #59]	; 0x3b
    3904:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    3908:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
    390c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    3910:	f899 203d 	ldrb.w	r2, [r9, #61]	; 0x3d
    3914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    3918:	f899 203e 	ldrb.w	r2, [r9, #62]	; 0x3e
    391c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    3920:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
    3924:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3928:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
    392c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    3930:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
    3934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    3938:	f899 2042 	ldrb.w	r2, [r9, #66]	; 0x42
    393c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    3940:	f899 2043 	ldrb.w	r2, [r9, #67]	; 0x43
    3944:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    3948:	f899 2044 	ldrb.w	r2, [r9, #68]	; 0x44
    394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    3950:	f899 2045 	ldrb.w	r2, [r9, #69]	; 0x45
    3954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    3958:	f899 2046 	ldrb.w	r2, [r9, #70]	; 0x46
    395c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    3960:	f899 2047 	ldrb.w	r2, [r9, #71]	; 0x47
    3964:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    3968:	f899 2048 	ldrb.w	r2, [r9, #72]	; 0x48
    396c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    3970:	f899 2049 	ldrb.w	r2, [r9, #73]	; 0x49
    3974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    3978:	f899 204a 	ldrb.w	r2, [r9, #74]	; 0x4a
    397c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    3980:	f899 204b 	ldrb.w	r2, [r9, #75]	; 0x4b
    3984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    3988:	f899 204c 	ldrb.w	r2, [r9, #76]	; 0x4c
    398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    3990:	f899 204d 	ldrb.w	r2, [r9, #77]	; 0x4d
    3994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    3998:	f899 204e 	ldrb.w	r2, [r9, #78]	; 0x4e
    399c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    39a0:	f899 204f 	ldrb.w	r2, [r9, #79]	; 0x4f
    39a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    39a8:	f899 2050 	ldrb.w	r2, [r9, #80]	; 0x50
    39ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    39b0:	f899 2051 	ldrb.w	r2, [r9, #81]	; 0x51
    39b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    39b8:	f899 2052 	ldrb.w	r2, [r9, #82]	; 0x52
    39bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    39c0:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
    39c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    39c8:	f899 2054 	ldrb.w	r2, [r9, #84]	; 0x54
    39cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    39d0:	f899 2055 	ldrb.w	r2, [r9, #85]	; 0x55
    39d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    39d8:	f899 2056 	ldrb.w	r2, [r9, #86]	; 0x56
    39dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    39e0:	f899 2057 	ldrb.w	r2, [r9, #87]	; 0x57
    39e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    39e8:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
    39ec:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    39f0:	f899 2059 	ldrb.w	r2, [r9, #89]	; 0x59
    39f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    39f8:	f899 205a 	ldrb.w	r2, [r9, #90]	; 0x5a
    39fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    3a00:	f899 205b 	ldrb.w	r2, [r9, #91]	; 0x5b
    3a04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    3a08:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
    3a0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    3a10:	f899 205d 	ldrb.w	r2, [r9, #93]	; 0x5d
    3a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    3a18:	f899 205e 	ldrb.w	r2, [r9, #94]	; 0x5e
    3a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    3a20:	f899 205f 	ldrb.w	r2, [r9, #95]	; 0x5f
    3a24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    3a28:	f899 2060 	ldrb.w	r2, [r9, #96]	; 0x60
    3a2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    3a30:	f899 2061 	ldrb.w	r2, [r9, #97]	; 0x61
    3a34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    3a38:	f899 2062 	ldrb.w	r2, [r9, #98]	; 0x62
    3a3c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    3a40:	f899 2063 	ldrb.w	r2, [r9, #99]	; 0x63
    3a44:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    3a48:	f899 2064 	ldrb.w	r2, [r9, #100]	; 0x64
    3a4c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    3a50:	f899 2065 	ldrb.w	r2, [r9, #101]	; 0x65
    3a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    3a58:	f899 2066 	ldrb.w	r2, [r9, #102]	; 0x66
    3a5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    3a60:	f899 2067 	ldrb.w	r2, [r9, #103]	; 0x67
    3a64:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    3a68:	f899 2068 	ldrb.w	r2, [r9, #104]	; 0x68
    3a6c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    3a70:	f899 2069 	ldrb.w	r2, [r9, #105]	; 0x69
    3a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    3a78:	f899 206a 	ldrb.w	r2, [r9, #106]	; 0x6a
    3a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    3a80:	f899 206b 	ldrb.w	r2, [r9, #107]	; 0x6b
    3a84:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    3a88:	f899 206c 	ldrb.w	r2, [r9, #108]	; 0x6c
    3a8c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    3a90:	f899 206d 	ldrb.w	r2, [r9, #109]	; 0x6d
    3a94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    3a98:	f899 206e 	ldrb.w	r2, [r9, #110]	; 0x6e
    3a9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    3aa0:	f899 206f 	ldrb.w	r2, [r9, #111]	; 0x6f
    3aa4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    3aa8:	f899 2070 	ldrb.w	r2, [r9, #112]	; 0x70
    3aac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    3ab0:	f899 2071 	ldrb.w	r2, [r9, #113]	; 0x71
    3ab4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    3ab8:	f899 2072 	ldrb.w	r2, [r9, #114]	; 0x72
    3abc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    3ac0:	f899 2073 	ldrb.w	r2, [r9, #115]	; 0x73
    3ac4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    3ac8:	f899 2074 	ldrb.w	r2, [r9, #116]	; 0x74
    3acc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    3ad0:	f899 2075 	ldrb.w	r2, [r9, #117]	; 0x75
    3ad4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    3ad8:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
    3adc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    3ae0:	f899 2077 	ldrb.w	r2, [r9, #119]	; 0x77
    3ae4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    3ae8:	f899 2078 	ldrb.w	r2, [r9, #120]	; 0x78
    3aec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    3af0:	f899 2079 	ldrb.w	r2, [r9, #121]	; 0x79
    3af4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    3af8:	f899 207a 	ldrb.w	r2, [r9, #122]	; 0x7a
    3afc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    3b00:	f899 207b 	ldrb.w	r2, [r9, #123]	; 0x7b
    3b04:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
    3b08:	f899 207c 	ldrb.w	r2, [r9, #124]	; 0x7c
    3b0c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    3b10:	f899 207d 	ldrb.w	r2, [r9, #125]	; 0x7d
    3b14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    3b18:	f899 207e 	ldrb.w	r2, [r9, #126]	; 0x7e
    3b1c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    3b20:	f899 207f 	ldrb.w	r2, [r9, #127]	; 0x7f
    3b24:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    3b28:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
    3b2c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
    3b30:	f899 2081 	ldrb.w	r2, [r9, #129]	; 0x81
    3b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    3b38:	f899 2082 	ldrb.w	r2, [r9, #130]	; 0x82
    3b3c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    3b40:	f899 2083 	ldrb.w	r2, [r9, #131]	; 0x83
    3b44:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    3b48:	f899 2084 	ldrb.w	r2, [r9, #132]	; 0x84
    3b4c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    3b50:	f899 2085 	ldrb.w	r2, [r9, #133]	; 0x85
    3b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    3b58:	f899 2086 	ldrb.w	r2, [r9, #134]	; 0x86
    3b5c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    3b60:	f899 2087 	ldrb.w	r2, [r9, #135]	; 0x87
    3b64:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    3b68:	f899 2088 	ldrb.w	r2, [r9, #136]	; 0x88
    3b6c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    3b70:	f899 2089 	ldrb.w	r2, [r9, #137]	; 0x89
    3b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    3b78:	f899 208a 	ldrb.w	r2, [r9, #138]	; 0x8a
    3b7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    3b80:	f899 208b 	ldrb.w	r2, [r9, #139]	; 0x8b
    3b84:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    3b88:	f899 208c 	ldrb.w	r2, [r9, #140]	; 0x8c
    3b8c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    3b90:	f899 208d 	ldrb.w	r2, [r9, #141]	; 0x8d
    3b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    3b98:	f899 208e 	ldrb.w	r2, [r9, #142]	; 0x8e
    3b9c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    3ba0:	f899 208f 	ldrb.w	r2, [r9, #143]	; 0x8f
    3ba4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    3ba8:	f899 2090 	ldrb.w	r2, [r9, #144]	; 0x90
    3bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    3bb0:	f899 2091 	ldrb.w	r2, [r9, #145]	; 0x91
    3bb4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    3bb8:	f899 2092 	ldrb.w	r2, [r9, #146]	; 0x92
    3bbc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    3bc0:	f899 2093 	ldrb.w	r2, [r9, #147]	; 0x93
    3bc4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
    3bc8:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
    3bcc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    3bd0:	f899 2095 	ldrb.w	r2, [r9, #149]	; 0x95
    3bd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    3bd8:	f899 2096 	ldrb.w	r2, [r9, #150]	; 0x96
    3bdc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    3be0:	f899 2097 	ldrb.w	r2, [r9, #151]	; 0x97
    3be4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    3be8:	f899 2098 	ldrb.w	r2, [r9, #152]	; 0x98
    3bec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    3bf0:	f899 2099 	ldrb.w	r2, [r9, #153]	; 0x99
    3bf4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    3bf8:	f899 209a 	ldrb.w	r2, [r9, #154]	; 0x9a
    3bfc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
    3c00:	f899 209b 	ldrb.w	r2, [r9, #155]	; 0x9b
    3c04:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    3c08:	f899 209c 	ldrb.w	r2, [r9, #156]	; 0x9c
    3c0c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    3c10:	f899 209d 	ldrb.w	r2, [r9, #157]	; 0x9d
    3c14:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    3c18:	f899 209e 	ldrb.w	r2, [r9, #158]	; 0x9e
    3c1c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    3c20:	f899 209f 	ldrb.w	r2, [r9, #159]	; 0x9f
    3c24:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    3c28:	f899 20a0 	ldrb.w	r2, [r9, #160]	; 0xa0
    3c2c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    3c30:	f899 20a1 	ldrb.w	r2, [r9, #161]	; 0xa1
    3c34:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
    3c38:	f899 20a2 	ldrb.w	r2, [r9, #162]	; 0xa2
    3c3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    3c40:	f899 20a3 	ldrb.w	r2, [r9, #163]	; 0xa3
    3c44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    3c48:	f899 20a4 	ldrb.w	r2, [r9, #164]	; 0xa4
    3c4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    3c50:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
    3c54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
    3c58:	f899 20a6 	ldrb.w	r2, [r9, #166]	; 0xa6
    3c5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    3c60:	f899 20a7 	ldrb.w	r2, [r9, #167]	; 0xa7
    3c64:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    3c68:	f899 20a8 	ldrb.w	r2, [r9, #168]	; 0xa8
    3c6c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    3c70:	f899 20a9 	ldrb.w	r2, [r9, #169]	; 0xa9
    3c74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    3c78:	f899 20aa 	ldrb.w	r2, [r9, #170]	; 0xaa
    3c7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
    3c80:	f899 20ab 	ldrb.w	r2, [r9, #171]	; 0xab
    3c84:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    3c88:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
    3c8c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    3c90:	f899 20ad 	ldrb.w	r2, [r9, #173]	; 0xad
    3c94:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    3c98:	f899 20ae 	ldrb.w	r2, [r9, #174]	; 0xae
    3c9c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    3ca0:	f899 20af 	ldrb.w	r2, [r9, #175]	; 0xaf
    3ca4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3ca8:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    3cac:	f2c3 727f 	movt	r2, #14207	; 0x377f
    3cb0:	ee07 2a10 	vmov	s14, r2
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    3cb4:	f899 20b0 	ldrb.w	r2, [r9, #176]	; 0xb0
    3cb8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    3cbc:	f899 20b1 	ldrb.w	r2, [r9, #177]	; 0xb1
    3cc0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    3cc4:	f899 20b2 	ldrb.w	r2, [r9, #178]	; 0xb2
    3cc8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    3ccc:	f899 20b3 	ldrb.w	r2, [r9, #179]	; 0xb3
    3cd0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
    3cd4:	f899 20b4 	ldrb.w	r2, [r9, #180]	; 0xb4
    3cd8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    3cdc:	f899 20b5 	ldrb.w	r2, [r9, #181]	; 0xb5
    3ce0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    3ce4:	f899 20b6 	ldrb.w	r2, [r9, #182]	; 0xb6
    3ce8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    3cec:	f899 20b7 	ldrb.w	r2, [r9, #183]	; 0xb7
    3cf0:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    3cf4:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
    3cf8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    3cfc:	f899 20b9 	ldrb.w	r2, [r9, #185]	; 0xb9
    3d00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    3d04:	f899 20ba 	ldrb.w	r2, [r9, #186]	; 0xba
    3d08:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    3d0c:	f899 20bb 	ldrb.w	r2, [r9, #187]	; 0xbb
    3d10:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    3d14:	f899 20bc 	ldrb.w	r2, [r9, #188]	; 0xbc
    3d18:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    3d1c:	f899 20bd 	ldrb.w	r2, [r9, #189]	; 0xbd
    3d20:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    3d24:	f899 20be 	ldrb.w	r2, [r9, #190]	; 0xbe
    3d28:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
    3d2c:	f899 20bf 	ldrb.w	r2, [r9, #191]	; 0xbf
    3d30:	f899 00c0 	ldrb.w	r0, [r9, #192]	; 0xc0
    3d34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    3d38:	f242 3280 	movw	r2, #9088	; 0x2380
    3d3c:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
    3d40:	f899 00c1 	ldrb.w	r0, [r9, #193]	; 0xc1
    3d44:	f2c3 0204 	movt	r2, #12292	; 0x3004
    3d48:	f883 00ba 	strb.w	r0, [r3, #186]	; 0xba
    3d4c:	f899 00c2 	ldrb.w	r0, [r9, #194]	; 0xc2
    3d50:	f883 00bb 	strb.w	r0, [r3, #187]	; 0xbb
    3d54:	f899 00c3 	ldrb.w	r0, [r9, #195]	; 0xc3
    3d58:	f883 00bc 	strb.w	r0, [r3, #188]	; 0xbc
    3d5c:	f899 00c4 	ldrb.w	r0, [r9, #196]	; 0xc4
    3d60:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
    3d64:	f899 00c5 	ldrb.w	r0, [r9, #197]	; 0xc5
    3d68:	f883 00bf 	strb.w	r0, [r3, #191]	; 0xbf
    3d6c:	f899 00c6 	ldrb.w	r0, [r9, #198]	; 0xc6
    3d70:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
    3d74:	f899 00c7 	ldrb.w	r0, [r9, #199]	; 0xc7
    3d78:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
    3d7c:	f899 00c8 	ldrb.w	r0, [r9, #200]	; 0xc8
    3d80:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    3d84:	f899 00c9 	ldrb.w	r0, [r9, #201]	; 0xc9
    3d88:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
    3d8c:	f899 00ca 	ldrb.w	r0, [r9, #202]	; 0xca
    3d90:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
    3d94:	f899 00cb 	ldrb.w	r0, [r9, #203]	; 0xcb
    3d98:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
    3d9c:	f899 00cc 	ldrb.w	r0, [r9, #204]	; 0xcc
    3da0:	f883 00c6 	strb.w	r0, [r3, #198]	; 0xc6
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3da4:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
			for (int i = 0; i < 20; i++)
    3da8:	3202      	adds	r2, #2
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3daa:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    3dae:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    3db2:	ee07 3a90 	vmov	s15, r3
    3db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3dba:	ee67 7a87 	vmul.f32	s15, s15, s14
    3dbe:	ece1 7a01 	vstmia	r1!, {s15}
			for (int i = 0; i < 20; i++)
    3dc2:	428c      	cmp	r4, r1
    3dc4:	d1ee      	bne.n	3da4 <parsePreset+0x1d04>
			presetWaitingToParse = 0;
    3dc6:	f24a 4270 	movw	r2, #42096	; 0xa470
			currentActivePreset = presetNumber;
    3dca:	f240 63a5 	movw	r3, #1701	; 0x6a5
    3dce:	f89d 1008 	ldrb.w	r1, [sp, #8]
			presetWaitingToParse = 0;
    3dd2:	2000      	movs	r0, #0
    3dd4:	f2c2 0201 	movt	r2, #8193	; 0x2001
			currentActivePreset = presetNumber;
    3dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
			if (whichModel == 1)
    3ddc:	2d01      	cmp	r5, #1
			presetWaitingToParse = 0;
    3dde:	6010      	str	r0, [r2, #0]
			currentActivePreset = presetNumber;
    3de0:	7019      	strb	r1, [r3, #0]
			if (whichModel == 1)
    3de2:	d008      	beq.n	3df6 <parsePreset+0x1d56>
			else if (whichModel == 2)
    3de4:	3d02      	subs	r5, #2
    3de6:	2d03      	cmp	r5, #3
    3de8:	d807      	bhi.n	3dfa <parsePreset+0x1d5a>
    3dea:	e8df f015 	tbh	[pc, r5, lsl #1]
    3dee:	00f0      	.short	0x00f0
    3df0:	00d800e4 	.word	0x00d800e4
    3df4:	00cc      	.short	0x00cc
				audioSwitchToString1();
    3df6:	f003 f8a3 	bl	6f40 <audioSwitchToString1>
			audioMasterLevel = 1.0f;
    3dfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3dfe:	9b03      	ldr	r3, [sp, #12]
    3e00:	edc3 7a00 	vstr	s15, [r3]
    3e04:	b662      	cpsie	i
			diskBusy = 0;
    3e06:	f244 428c 	movw	r2, #17548	; 0x448c
			receivingI2C = 0;
    3e0a:	f64a 03c8 	movw	r3, #43208	; 0xa8c8
			diskBusy = 0;
    3e0e:	2100      	movs	r1, #0
			presetReady = 1;
    3e10:	2001      	movs	r0, #1
			diskBusy = 0;
    3e12:	f2c2 0201 	movt	r2, #8193	; 0x2001
			receivingI2C = 0;
    3e16:	f2c2 0301 	movt	r3, #8193	; 0x2001
			presetReady = 1;
    3e1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			diskBusy = 0;
    3e1c:	7011      	strb	r1, [r2, #0]
			presetReady = 1;
    3e1e:	6020      	str	r0, [r4, #0]
			receivingI2C = 0;
    3e20:	7019      	strb	r1, [r3, #0]
			return;
    3e22:	f7fe bd28 	b.w	2876 <parsePreset+0x7d6>
			oscOn[i] = 0;
    3e26:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    3e28:	4610      	mov	r0, r2
    3e2a:	f7fe bf04 	b.w	2c36 <parsePreset+0xb96>
		pedalControlsMaster = 1;
    3e2e:	2201      	movs	r2, #1
    3e30:	f7ff b984 	b.w	313c <parsePreset+0x109c>
			oscOn[i] = 0;
    3e34:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    3e36:	4610      	mov	r0, r2
    3e38:	f7fe bf35 	b.w	2ca6 <parsePreset+0xc06>
			  shapeTick[i] = &triTick;
    3e3c:	f64d 0244 	movw	r2, #55364	; 0xd844
    3e40:	f648 70c1 	movw	r0, #36801	; 0x8fc1
    3e44:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3e48:	f2c0 0000 	movt	r0, #0
    3e4c:	6090      	str	r0, [r2, #8]
			  break;
    3e4e:	f7fe bf18 	b.w	2c82 <parsePreset+0xbe2>
			  shapeTick[i] = &pulseTick;
    3e52:	f64d 0244 	movw	r2, #55364	; 0xd844
    3e56:	f648 7021 	movw	r0, #36641	; 0x8f21
    3e5a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3e5e:	f2c0 0000 	movt	r0, #0
    3e62:	6090      	str	r0, [r2, #8]
			  break;
    3e64:	f7fe bf0d 	b.w	2c82 <parsePreset+0xbe2>
			  shapeTick[i] = &sawTick;
    3e68:	f64d 0244 	movw	r2, #55364	; 0xd844
    3e6c:	f648 60e1 	movw	r0, #36577	; 0x8ee1
    3e70:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3e74:	f2c0 0000 	movt	r0, #0
    3e78:	6090      	str	r0, [r2, #8]
			  break;
    3e7a:	f7fe bf02 	b.w	2c82 <parsePreset+0xbe2>
			  shapeTick[i] = &sineTriTick;
    3e7e:	f64d 0244 	movw	r2, #55364	; 0xd844
    3e82:	f648 6081 	movw	r0, #36481	; 0x8e81
    3e86:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3e8a:	f2c0 0000 	movt	r0, #0
    3e8e:	6090      	str	r0, [r2, #8]
			  break;
    3e90:	f7fe bef7 	b.w	2c82 <parsePreset+0xbe2>
			  shapeTick[i] = &sawSquareTick;
    3e94:	f64d 0244 	movw	r2, #55364	; 0xd844
    3e98:	f648 6021 	movw	r0, #36385	; 0x8e21
    3e9c:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3ea0:	f2c0 0000 	movt	r0, #0
    3ea4:	6090      	str	r0, [r2, #8]
			  break;
    3ea6:	f7fe beec 	b.w	2c82 <parsePreset+0xbe2>
			  shapeTick[i] = &triTick;
    3eaa:	f64d 0244 	movw	r2, #55364	; 0xd844
    3eae:	f648 70c1 	movw	r0, #36801	; 0x8fc1
    3eb2:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3eb6:	f2c0 0000 	movt	r0, #0
    3eba:	6050      	str	r0, [r2, #4]
			  break;
    3ebc:	f7fe bea9 	b.w	2c12 <parsePreset+0xb72>
			  shapeTick[i] = &sineTick;
    3ec0:	f64d 0244 	movw	r2, #55364	; 0xd844
    3ec4:	f648 7081 	movw	r0, #36737	; 0x8f81
    3ec8:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3ecc:	f2c0 0000 	movt	r0, #0
    3ed0:	6050      	str	r0, [r2, #4]
			  break;
    3ed2:	f7fe be9e 	b.w	2c12 <parsePreset+0xb72>
			  shapeTick[i] = &pulseTick;
    3ed6:	f64d 0244 	movw	r2, #55364	; 0xd844
    3eda:	f648 7021 	movw	r0, #36641	; 0x8f21
    3ede:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3ee2:	f2c0 0000 	movt	r0, #0
    3ee6:	6050      	str	r0, [r2, #4]
			  break;
    3ee8:	f7fe be93 	b.w	2c12 <parsePreset+0xb72>
			  shapeTick[i] = &sawTick;
    3eec:	f64d 0244 	movw	r2, #55364	; 0xd844
    3ef0:	f648 60e1 	movw	r0, #36577	; 0x8ee1
    3ef4:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3ef8:	f2c0 0000 	movt	r0, #0
    3efc:	6050      	str	r0, [r2, #4]
			  break;
    3efe:	f7fe be88 	b.w	2c12 <parsePreset+0xb72>
			  shapeTick[i] = &sawSquareTick;
    3f02:	f64d 0244 	movw	r2, #55364	; 0xd844
    3f06:	f648 6021 	movw	r0, #36385	; 0x8e21
    3f0a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    3f0e:	f2c0 0000 	movt	r0, #0
    3f12:	6050      	str	r0, [r2, #4]
			  break;
    3f14:	f7fe be7d 	b.w	2c12 <parsePreset+0xb72>
			  shapeTick[i] = &triTick;
    3f18:	f64d 0344 	movw	r3, #55364	; 0xd844
    3f1c:	f648 72c1 	movw	r2, #36801	; 0x8fc1
    3f20:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3f24:	f2c0 0200 	movt	r2, #0
    3f28:	601a      	str	r2, [r3, #0]
			  break;
    3f2a:	f7fe be38 	b.w	2b9e <parsePreset+0xafe>
			  shapeTick[i] = &sineTick;
    3f2e:	f64d 0344 	movw	r3, #55364	; 0xd844
    3f32:	f648 7281 	movw	r2, #36737	; 0x8f81
    3f36:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3f3a:	f2c0 0200 	movt	r2, #0
    3f3e:	601a      	str	r2, [r3, #0]
			  break;
    3f40:	f7fe be2d 	b.w	2b9e <parsePreset+0xafe>
			  shapeTick[i] = &pulseTick;
    3f44:	f64d 0344 	movw	r3, #55364	; 0xd844
    3f48:	f648 7221 	movw	r2, #36641	; 0x8f21
    3f4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3f50:	f2c0 0200 	movt	r2, #0
    3f54:	601a      	str	r2, [r3, #0]
			  break;
    3f56:	f7fe be22 	b.w	2b9e <parsePreset+0xafe>
			  shapeTick[i] = &sawTick;
    3f5a:	f64d 0344 	movw	r3, #55364	; 0xd844
    3f5e:	f648 62e1 	movw	r2, #36577	; 0x8ee1
    3f62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3f66:	f2c0 0200 	movt	r2, #0
    3f6a:	601a      	str	r2, [r3, #0]
			  break;
    3f6c:	f7fe be17 	b.w	2b9e <parsePreset+0xafe>
			  shapeTick[i] = &sawSquareTick;
    3f70:	f64d 0344 	movw	r3, #55364	; 0xd844
    3f74:	f648 6221 	movw	r2, #36385	; 0x8e21
    3f78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    3f7c:	f2c0 0200 	movt	r2, #0
    3f80:	601a      	str	r2, [r3, #0]
			  break;
    3f82:	f7fe be0c 	b.w	2b9e <parsePreset+0xafe>
				audioFrameFunction = audioFrameString3;
    3f86:	f241 138c 	movw	r3, #4492	; 0x118c
    3f8a:	f248 6201 	movw	r2, #34305	; 0x8601
    3f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f92:	f2c0 0200 	movt	r2, #0
    3f96:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    3f98:	f004 f9b2 	bl	8300 <audioSwitchToString3>
    3f9c:	e72d      	b.n	3dfa <parsePreset+0x1d5a>
				audioFrameFunction = audioFrameVocal;
    3f9e:	f241 138c 	movw	r3, #4492	; 0x118c
    3fa2:	f64c 52a1 	movw	r2, #52641	; 0xcda1
    3fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3faa:	f2c0 0200 	movt	r2, #0
    3fae:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    3fb0:	f008 fdd6 	bl	cb60 <audioSwitchToVocal>
    3fb4:	e721      	b.n	3dfa <parsePreset+0x1d5a>
				audioFrameFunction = audioFrameAdditive;
    3fb6:	f241 138c 	movw	r3, #4492	; 0x118c
    3fba:	f640 5281 	movw	r2, #3457	; 0xd81
    3fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc2:	f2c0 0200 	movt	r2, #0
    3fc6:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    3fc8:	f7fc fc8a 	bl	8e0 <audioSwitchToAdditive>
    3fcc:	e715      	b.n	3dfa <parsePreset+0x1d5a>
				audioSwitchToString2();
    3fce:	f003 fbf7 	bl	77c0 <audioSwitchToString2>
    3fd2:	e712      	b.n	3dfa <parsePreset+0x1d5a>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3fd4:	9b05      	ldr	r3, [sp, #20]
    3fd6:	f103 0c03 	add.w	ip, r3, #3
    3fda:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    3fde:	9218      	str	r2, [sp, #96]	; 0x60
    3fe0:	f7ff bb69 	b.w	36b6 <parsePreset+0x1616>
    3fe4:	9b05      	ldr	r3, [sp, #20]
    3fe6:	f103 0903 	add.w	r9, r3, #3
    3fea:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    3fee:	f7ff bb33 	b.w	3658 <parsePreset+0x15b8>
    3ff2:	f24a 442c 	movw	r4, #42028	; 0xa42c
    3ff6:	f2c2 0401 	movt	r4, #8193	; 0x2001
    3ffa:	f7fe bcc2 	b.w	2982 <parsePreset+0x8e2>
    3ffe:	f249 3b1c 	movw	fp, #37660	; 0x931c
    4002:	f2c2 0b01 	movt	fp, #8193	; 0x2001
    4006:	f7fe bca1 	b.w	294c <parsePreset+0x8ac>
    400a:	bf00      	nop
    400c:	f3af 8000 	nop.w
    4010:	f3af 8000 	nop.w
    4014:	f3af 8000 	nop.w
    4018:	f3af 8000 	nop.w
    401c:	f3af 8000 	nop.w

00004020 <handleSPI>:
	if (foundBrainFirmware)
    4020:	f246 620c 	movw	r2, #26124	; 0x660c
	interruptChecker = 1;
    4024:	f246 610f 	movw	r1, #26127	; 0x660f
	if (foundBrainFirmware)
    4028:	f2c2 0201 	movt	r2, #8193	; 0x2001
	interruptChecker = 1;
    402c:	f2c2 0101 	movt	r1, #8193	; 0x2001
{
    4030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    4034:	2401      	movs	r4, #1
{
    4036:	4683      	mov	fp, r0
    4038:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    403c:	7813      	ldrb	r3, [r2, #0]
{
    403e:	b089      	sub	sp, #36	; 0x24
	interruptChecker = 1;
    4040:	700c      	strb	r4, [r1, #0]
	if (foundBrainFirmware)
    4042:	b393      	cbz	r3, 40aa <handleSPI+0x8a>
		if (brainFirmwareEndSignal)
    4044:	f244 4738 	movw	r7, #17464	; 0x4438
    4048:	f2c2 0701 	movt	r7, #8193	; 0x2001
    404c:	6839      	ldr	r1, [r7, #0]
    404e:	2900      	cmp	r1, #0
    4050:	d04c      	beq.n	40ec <handleSPI+0xcc>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    4052:	f640 0300 	movw	r3, #2048	; 0x800
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    4056:	f244 4140 	movw	r1, #17472	; 0x4440
			brainFirmwareSendInProgress = 0;
    405a:	f244 443c 	movw	r4, #17468	; 0x443c
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    405e:	f2c3 0300 	movt	r3, #12288	; 0x3000
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    4062:	f2c2 0101 	movt	r1, #8193	; 0x2001
			brainFirmwareSendInProgress = 0;
    4066:	f2c2 0401 	movt	r4, #8193	; 0x2001
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    406a:	4403      	add	r3, r0
    406c:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    406e:	6809      	ldr	r1, [r1, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    4070:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    4074:	2000      	movs	r0, #0
			brainFirmwareSendInProgress = 0;
    4076:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    4078:	0e0c      	lsrs	r4, r1, #24
			foundBrainFirmware = 0;
    407a:	7010      	strb	r0, [r2, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    407c:	0c0a      	lsrs	r2, r1, #16
			brainFirmwareEndSignal = 0;
    407e:	6038      	str	r0, [r7, #0]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    4080:	0a08      	lsrs	r0, r1, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    4082:	3900      	subs	r1, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    4084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    4088:	f04f 02fe 	mov.w	r2, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    408c:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    4090:	bf18      	it	ne
    4092:	2101      	movne	r1, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    4094:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    4098:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    409c:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
}
    40a0:	b009      	add	sp, #36	; 0x24
    40a2:	ecbd 8b02 	vpop	{d8}
    40a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    40aa:	f640 0400 	movw	r4, #2048	; 0x800
    40ae:	f2c3 0400 	movt	r4, #12288	; 0x3000
    40b2:	5c22      	ldrb	r2, [r4, r0]
    40b4:	2a01      	cmp	r2, #1
    40b6:	f000 80c0 	beq.w	423a <handleSPI+0x21a>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    40ba:	2a0e      	cmp	r2, #14
    40bc:	f200 828c 	bhi.w	45d8 <handleSPI+0x5b8>
    40c0:	2a01      	cmp	r2, #1
    40c2:	f240 8170 	bls.w	43a6 <handleSPI+0x386>
    40c6:	3a02      	subs	r2, #2
    40c8:	2a0c      	cmp	r2, #12
    40ca:	f200 816c 	bhi.w	43a6 <handleSPI+0x386>
    40ce:	e8df f012 	tbh	[pc, r2, lsl #1]
    40d2:	091a      	.short	0x091a
    40d4:	016a0967 	.word	0x016a0967
    40d8:	0b90016a 	.word	0x0b90016a
    40dc:	016a0ac5 	.word	0x016a0ac5
    40e0:	0b70016a 	.word	0x0b70016a
    40e4:	016a0904 	.word	0x016a0904
    40e8:	04a3033d 	.word	0x04a3033d
		else if (brainFirmwareSendInProgress)
    40ec:	f244 433c 	movw	r3, #17468	; 0x443c
    40f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    40f4:	681a      	ldr	r2, [r3, #0]
    40f6:	2a00      	cmp	r2, #0
    40f8:	f000 8298 	beq.w	462c <handleSPI+0x60c>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    40fc:	f640 0400 	movw	r4, #2048	; 0x800
    4100:	f24a 4358 	movw	r3, #42072	; 0xa458
    4104:	f244 4934 	movw	r9, #17460	; 0x4434
			for (int i = 0; i < 30; i++)
    4108:	468c      	mov	ip, r1
    410a:	f2c2 0301 	movt	r3, #8193	; 0x2001
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    410e:	f2c3 0400 	movt	r4, #12288	; 0x3000
    4112:	f2c2 0901 	movt	r9, #8193	; 0x2001
    4116:	f240 0100 	movw	r1, #0
    411a:	461a      	mov	r2, r3
    411c:	eb04 0a00 	add.w	sl, r4, r0
    4120:	9300      	str	r3, [sp, #0]
    4122:	23fb      	movs	r3, #251	; 0xfb
    4124:	8810      	ldrh	r0, [r2, #0]
    4126:	f2cc 11e0 	movt	r1, #49632	; 0xc1e0
    412a:	f8d9 2000 	ldr.w	r2, [r9]
    412e:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    4132:	e033      	b.n	419c <handleSPI+0x17c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4134:	2d3a      	cmp	r5, #58	; 0x3a
    4136:	f000 82ca 	beq.w	46ce <handleSPI+0x6ae>
    413a:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    413e:	f04f 0000 	mov.w	r0, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4142:	bf08      	it	eq
    4144:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4146:	188b      	adds	r3, r1, r2
    4148:	789b      	ldrb	r3, [r3, #2]
    414a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    414c:	bf08      	it	eq
    414e:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4150:	188b      	adds	r3, r1, r2
    4152:	78db      	ldrb	r3, [r3, #3]
    4154:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4156:	bf08      	it	eq
    4158:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    415a:	188b      	adds	r3, r1, r2
    415c:	791b      	ldrb	r3, [r3, #4]
    415e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4160:	bf08      	it	eq
    4162:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4164:	188b      	adds	r3, r1, r2
    4166:	795b      	ldrb	r3, [r3, #5]
    4168:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    416a:	bf08      	it	eq
    416c:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    416e:	188b      	adds	r3, r1, r2
    4170:	799b      	ldrb	r3, [r3, #6]
    4172:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4174:	bf08      	it	eq
    4176:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4178:	188b      	adds	r3, r1, r2
    417a:	79db      	ldrb	r3, [r3, #7]
    417c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    417e:	bf08      	it	eq
    4180:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4182:	188b      	adds	r3, r1, r2
    4184:	7a1b      	ldrb	r3, [r3, #8]
    4186:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4188:	bf08      	it	eq
    418a:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    418c:	188b      	adds	r3, r1, r2
    418e:	7a5b      	ldrb	r3, [r3, #9]
    4190:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4192:	bf08      	it	eq
    4194:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    4196:	f1bc 0f1e 	cmp.w	ip, #30
    419a:	d03b      	beq.n	4214 <handleSPI+0x1f4>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    419c:	5c8d      	ldrb	r5, [r1, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    419e:	1c56      	adds	r6, r2, #1
	if (('0' <= value) && (value <= '9'))
    41a0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    41a4:	f811 e006 	ldrb.w	lr, [r1, r6]
	if (('0' <= value) && (value <= '9'))
    41a8:	b2db      	uxtb	r3, r3
    41aa:	2b09      	cmp	r3, #9
    41ac:	f240 8270 	bls.w	4690 <handleSPI+0x670>
	if (('a' <= value) && (value <= 'f'))
    41b0:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
    41b4:	2b05      	cmp	r3, #5
    41b6:	f240 827e 	bls.w	46b6 <handleSPI+0x696>
	if (('A' <= value) && (value <= 'F'))
    41ba:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
    41be:	2b05      	cmp	r3, #5
    41c0:	f240 827f 	bls.w	46c2 <handleSPI+0x6a2>
    41c4:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    41c6:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    41ca:	fa5f f888 	uxtb.w	r8, r8
    41ce:	f1b8 0f09 	cmp.w	r8, #9
    41d2:	f240 8267 	bls.w	46a4 <handleSPI+0x684>
	if (('a' <= value) && (value <= 'f'))
    41d6:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    41da:	f1b8 0f05 	cmp.w	r8, #5
    41de:	f240 8264 	bls.w	46aa <handleSPI+0x68a>
	if (('A' <= value) && (value <= 'F'))
    41e2:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    41e6:	f1b8 0f05 	cmp.w	r8, #5
    41ea:	d804      	bhi.n	41f6 <handleSPI+0x1d6>
		return (uint8_t) (10 + value - 'A');
    41ec:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    41f0:	ea43 0308 	orr.w	r3, r3, r8
    41f4:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    41f6:	f5b0 7f93 	cmp.w	r0, #294	; 0x126
    41fa:	d29b      	bcs.n	4134 <handleSPI+0x114>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    41fc:	eb0a 050c 	add.w	r5, sl, ip
			for (int i = 0; i < 30; i++)
    4200:	f10c 0c01 	add.w	ip, ip, #1
				positionInRowLine++;
    4204:	3001      	adds	r0, #1
					brainFirmwareBufferIndex += 2;
    4206:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    4208:	f1bc 0f1e 	cmp.w	ip, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    420c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
				positionInRowLine++;
    4210:	b280      	uxth	r0, r0
			for (int i = 0; i < 30; i++)
    4212:	d1c3      	bne.n	419c <handleSPI+0x17c>
    4214:	9b00      	ldr	r3, [sp, #0]
			SPI_LEVERS_TX[offset+31] = 254;
    4216:	445c      	add	r4, fp
    4218:	f8c9 2000 	str.w	r2, [r9]
    421c:	8018      	strh	r0, [r3, #0]
    421e:	23fe      	movs	r3, #254	; 0xfe
    4220:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    4224:	f244 4340 	movw	r3, #17472	; 0x4440
    4228:	f2c2 0301 	movt	r3, #8193	; 0x2001
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	4293      	cmp	r3, r2
    4230:	f63f af36 	bhi.w	40a0 <handleSPI+0x80>
				brainFirmwareEndSignal = 1;
    4234:	2301      	movs	r3, #1
    4236:	603b      	str	r3, [r7, #0]
    4238:	e732      	b.n	40a0 <handleSPI+0x80>
			 for (int i = 0; i < numStringsThisBoard; i++)
    423a:	f240 6394 	movw	r3, #1684	; 0x694
    423e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4242:	7818      	ldrb	r0, [r3, #0]
    4244:	2800      	cmp	r0, #0
    4246:	f000 80a5 	beq.w	4394 <handleSPI+0x374>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    424a:	f245 12c4 	movw	r2, #20932	; 0x51c4
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    424e:	2180      	movs	r1, #128	; 0x80
			 uint8_t currentByte = offset+1;
    4250:	f10b 0301 	add.w	r3, fp, #1
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4254:	f2c2 0200 	movt	r2, #8192	; 0x2000
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    4258:	f6c3 3100 	movt	r1, #15104	; 0x3b00
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    425c:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    425e:	ee07 1a90 	vmov	s15, r1
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4262:	6811      	ldr	r1, [r2, #0]
    4264:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4268:	5cc9      	ldrb	r1, [r1, r3]
    426a:	0209      	lsls	r1, r1, #8
    426c:	ee07 1a10 	vmov	s14, r1
    4270:	6811      	ldr	r1, [r2, #0]
    4272:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4276:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    427a:	4419      	add	r1, r3
    427c:	7849      	ldrb	r1, [r1, #1]
    427e:	ee07 1a10 	vmov	s14, r1
    4282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    4286:	ee37 7a26 	vadd.f32	s14, s14, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    428a:	ee67 7a27 	vmul.f32	s15, s14, s15
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    428e:	eef5 7a40 	vcmp.f32	s15, #0.0
    4292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4296:	dd10      	ble.n	42ba <handleSPI+0x29a>
    4298:	f64f 7174 	movw	r1, #65396	; 0xff74
    429c:	f2c4 718b 	movt	r1, #18315	; 0x478b
    42a0:	ee06 1a90 	vmov	s13, r1
    42a4:	eeb4 7a66 	vcmp.f32	s14, s13
    42a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42ac:	d505      	bpl.n	42ba <handleSPI+0x29a>
					stringMIDIPitches[i] = myPitch;
    42ae:	f244 211c 	movw	r1, #16924	; 0x421c
    42b2:	f2c2 0101 	movt	r1, #8193	; 0x2001
    42b6:	edc1 7a00 	vstr	s15, [r1]
			 for (int i = 0; i < numStringsThisBoard; i++)
    42ba:	2801      	cmp	r0, #1
    42bc:	d06a      	beq.n	4394 <handleSPI+0x374>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    42be:	6811      	ldr	r1, [r2, #0]
    42c0:	3101      	adds	r1, #1
    42c2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    42c6:	5cc9      	ldrb	r1, [r1, r3]
    42c8:	0209      	lsls	r1, r1, #8
    42ca:	ee07 1a90 	vmov	s15, r1
    42ce:	6811      	ldr	r1, [r2, #0]
    42d0:	3101      	adds	r1, #1
    42d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    42d6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    42da:	4419      	add	r1, r3
    42dc:	7849      	ldrb	r1, [r1, #1]
    42de:	ee07 1a10 	vmov	s14, r1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    42e2:	2180      	movs	r1, #128	; 0x80
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    42e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    42e8:	f6c3 3100 	movt	r1, #15104	; 0x3b00
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    42ec:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    42f0:	ee07 1a10 	vmov	s14, r1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    42f4:	f64f 7174 	movw	r1, #65396	; 0xff74
    42f8:	f2c4 718b 	movt	r1, #18315	; 0x478b
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    42fc:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    4300:	ee06 1a90 	vmov	s13, r1
    4304:	eef4 7a66 	vcmp.f32	s15, s13
    4308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    430c:	d50a      	bpl.n	4324 <handleSPI+0x304>
    430e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    4312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4316:	dd05      	ble.n	4324 <handleSPI+0x304>
					stringMIDIPitches[i] = myPitch;
    4318:	f244 211c 	movw	r1, #16924	; 0x421c
    431c:	f2c2 0101 	movt	r1, #8193	; 0x2001
    4320:	ed81 7a01 	vstr	s14, [r1, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    4324:	2802      	cmp	r0, #2
    4326:	d035      	beq.n	4394 <handleSPI+0x374>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4328:	6811      	ldr	r1, [r2, #0]
    432a:	3102      	adds	r1, #2
    432c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4330:	5cc9      	ldrb	r1, [r1, r3]
    4332:	0209      	lsls	r1, r1, #8
    4334:	ee07 1a90 	vmov	s15, r1
    4338:	6811      	ldr	r1, [r2, #0]
    433a:	3102      	adds	r1, #2
    433c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4340:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4344:	4419      	add	r1, r3
    4346:	7849      	ldrb	r1, [r1, #1]
    4348:	ee07 1a10 	vmov	s14, r1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    434c:	2180      	movs	r1, #128	; 0x80
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    434e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    4352:	f6c3 3100 	movt	r1, #15104	; 0x3b00
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4356:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    435a:	ee07 1a10 	vmov	s14, r1
    435e:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    4362:	eeb5 7a40 	vcmp.f32	s14, #0.0
    4366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    436a:	dd10      	ble.n	438e <handleSPI+0x36e>
    436c:	f64f 7174 	movw	r1, #65396	; 0xff74
    4370:	f2c4 718b 	movt	r1, #18315	; 0x478b
    4374:	ee06 1a90 	vmov	s13, r1
    4378:	eef4 7a66 	vcmp.f32	s15, s13
    437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4380:	d505      	bpl.n	438e <handleSPI+0x36e>
					stringMIDIPitches[i] = myPitch;
    4382:	f244 211c 	movw	r1, #16924	; 0x421c
    4386:	f2c2 0101 	movt	r1, #8193	; 0x2001
    438a:	ed81 7a02 	vstr	s14, [r1, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    438e:	2803      	cmp	r0, #3
    4390:	f040 81a2 	bne.w	46d8 <handleSPI+0x6b8>
			 whichBar = 0;
    4394:	f244 235c 	movw	r3, #16988	; 0x425c
    4398:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    439a:	4658      	mov	r0, fp
			 whichBar = 0;
    439c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    43a0:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    43a2:	f7fd f95d 	bl	1660 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    43a6:	f244 4331 	movw	r3, #17457	; 0x4431
    43aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    43ae:	781b      	ldrb	r3, [r3, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	f47f ae75 	bne.w	40a0 <handleSPI+0x80>
    43b6:	f243 3080 	movw	r0, #13184	; 0x3380
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    43ba:	f10b 0201 	add.w	r2, fp, #1
    43be:	f2c3 0004 	movt	r0, #12292	; 0x3004
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    43c2:	eb04 030b 	add.w	r3, r4, fp
    43c6:	21fd      	movs	r1, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    43c8:	4422      	add	r2, r4
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    43ca:	f242 0400 	movw	r4, #8192	; 0x2000
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    43ce:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    43d2:	f64c 2172 	movw	r1, #51826	; 0xca72
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    43d6:	f2c3 0404 	movt	r4, #12292	; 0x3004
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    43da:	f64c 2770 	movw	r7, #51824	; 0xca70
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    43de:	f2c2 0101 	movt	r1, #8193	; 0x2001
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    43e2:	25c8      	movs	r5, #200	; 0xc8
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    43e4:	f2c2 0701 	movt	r7, #8193	; 0x2001
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    43e8:	f245 7c72 	movw	ip, #22386	; 0x5772
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    43ec:	780e      	ldrb	r6, [r1, #0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    43ee:	f2c2 0c00 	movt	ip, #8192	; 0x2000
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    43f2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    43f6:	780a      	ldrb	r2, [r1, #0]
    43f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    43fc:	0052      	lsls	r2, r2, #1
    43fe:	5ca2      	ldrb	r2, [r4, r2]
    4400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    4404:	780a      	ldrb	r2, [r1, #0]
    4406:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    440a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    440e:	7852      	ldrb	r2, [r2, #1]
    4410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    4414:	780a      	ldrb	r2, [r1, #0]
    4416:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    441a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    441e:	7892      	ldrb	r2, [r2, #2]
    4420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    4424:	780a      	ldrb	r2, [r1, #0]
    4426:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    442a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    442e:	78d2      	ldrb	r2, [r2, #3]
    4430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    4434:	780a      	ldrb	r2, [r1, #0]
    4436:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    443a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    443e:	7912      	ldrb	r2, [r2, #4]
    4440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    4444:	780a      	ldrb	r2, [r1, #0]
    4446:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    444a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    444e:	7952      	ldrb	r2, [r2, #5]
    4450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    4454:	780a      	ldrb	r2, [r1, #0]
    4456:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    445a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    445e:	7992      	ldrb	r2, [r2, #6]
    4460:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    4464:	780a      	ldrb	r2, [r1, #0]
    4466:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    446a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    446e:	79d2      	ldrb	r2, [r2, #7]
    4470:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    4474:	780a      	ldrb	r2, [r1, #0]
    4476:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    447a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    447e:	7a12      	ldrb	r2, [r2, #8]
    4480:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    4484:	780a      	ldrb	r2, [r1, #0]
    4486:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    448a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    448e:	7a52      	ldrb	r2, [r2, #9]
    4490:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    4494:	780a      	ldrb	r2, [r1, #0]
    4496:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    449a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    449e:	7a92      	ldrb	r2, [r2, #10]
    44a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    44a4:	780a      	ldrb	r2, [r1, #0]
    44a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    44aa:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    44ae:	7ad2      	ldrb	r2, [r2, #11]
    44b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    44b4:	780a      	ldrb	r2, [r1, #0]
    44b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    44ba:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    44be:	7b12      	ldrb	r2, [r2, #12]
    44c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    44c4:	780a      	ldrb	r2, [r1, #0]
    44c6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    44ca:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    44ce:	7b62      	ldrb	r2, [r4, #13]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    44d0:	780e      	ldrb	r6, [r1, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    44d2:	783c      	ldrb	r4, [r7, #0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    44d4:	fb05 f606 	mul.w	r6, r5, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    44d8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    44dc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    44e0:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
				whichMacroToSendName = (whichMacroToSendName + 1);
    44e4:	3401      	adds	r4, #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    44e6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
				whichMacroToSendName = (whichMacroToSendName + 1);
    44ea:	b2e4      	uxtb	r4, r4
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    44ec:	5d86      	ldrb	r6, [r0, r6]
    44ee:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    44f2:	780e      	ldrb	r6, [r1, #0]
    44f4:	fb05 f606 	mul.w	r6, r5, r6
    44f8:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    44fc:	4406      	add	r6, r0
    44fe:	7876      	ldrb	r6, [r6, #1]
    4500:	f883 6052 	strb.w	r6, [r3, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    4504:	780e      	ldrb	r6, [r1, #0]
    4506:	fb05 f606 	mul.w	r6, r5, r6
    450a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    450e:	4406      	add	r6, r0
    4510:	78b6      	ldrb	r6, [r6, #2]
    4512:	f883 6053 	strb.w	r6, [r3, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    4516:	780e      	ldrb	r6, [r1, #0]
    4518:	fb05 f606 	mul.w	r6, r5, r6
    451c:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    4520:	4406      	add	r6, r0
    4522:	78f6      	ldrb	r6, [r6, #3]
    4524:	f883 6054 	strb.w	r6, [r3, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    4528:	780e      	ldrb	r6, [r1, #0]
    452a:	fb05 f606 	mul.w	r6, r5, r6
    452e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    4532:	4406      	add	r6, r0
    4534:	7936      	ldrb	r6, [r6, #4]
    4536:	f883 6055 	strb.w	r6, [r3, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    453a:	780e      	ldrb	r6, [r1, #0]
    453c:	fb05 f606 	mul.w	r6, r5, r6
    4540:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    4544:	4406      	add	r6, r0
    4546:	7976      	ldrb	r6, [r6, #5]
    4548:	f883 6056 	strb.w	r6, [r3, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    454c:	780e      	ldrb	r6, [r1, #0]
    454e:	fb05 f606 	mul.w	r6, r5, r6
    4552:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    4556:	4406      	add	r6, r0
    4558:	79b6      	ldrb	r6, [r6, #6]
    455a:	f883 6057 	strb.w	r6, [r3, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    455e:	780e      	ldrb	r6, [r1, #0]
    4560:	fb05 f606 	mul.w	r6, r5, r6
    4564:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    4568:	4406      	add	r6, r0
    456a:	79f6      	ldrb	r6, [r6, #7]
    456c:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    4570:	780e      	ldrb	r6, [r1, #0]
    4572:	fb05 f606 	mul.w	r6, r5, r6
    4576:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    457a:	4406      	add	r6, r0
    457c:	7a36      	ldrb	r6, [r6, #8]
    457e:	f883 6059 	strb.w	r6, [r3, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    4582:	780e      	ldrb	r6, [r1, #0]
    4584:	fb06 f505 	mul.w	r5, r6, r5
    4588:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    458c:	4410      	add	r0, r2
    458e:	7a42      	ldrb	r2, [r0, #9]
    4590:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    4594:	f8bc 2000 	ldrh.w	r2, [ip]
    4598:	b292      	uxth	r2, r2
    459a:	3a00      	subs	r2, #0
    459c:	bf18      	it	ne
    459e:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 20)
    45a0:	2c13      	cmp	r4, #19
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    45a2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    45a6:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    45aa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
				SPI_LEVERS_TX[offset+27] = 13;
    45ae:	f04f 020d 	mov.w	r2, #13
    45b2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    45b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    45ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
				if (whichMacroToSendName >= 20)
    45be:	d961      	bls.n	4684 <handleSPI+0x664>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    45c0:	780b      	ldrb	r3, [r1, #0]
					whichMacroToSendName = 0;
    45c2:	2200      	movs	r2, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    45c4:	3301      	adds	r3, #1
					whichMacroToSendName = 0;
    45c6:	703a      	strb	r2, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    45c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    45cc:	700b      	strb	r3, [r1, #0]
}
    45ce:	b009      	add	sp, #36	; 0x24
    45d0:	ecbd 8b02 	vpop	{d8}
    45d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45d8:	2afd      	cmp	r2, #253	; 0xfd
    45da:	f47f aee4 	bne.w	43a6 <handleSPI+0x386>
			if(writingState == ReceivingPreset)
    45de:	f64c 2273 	movw	r2, #51827	; 0xca73
    45e2:	f2c2 0201 	movt	r2, #8193	; 0x2001
    45e6:	7811      	ldrb	r1, [r2, #0]
    45e8:	2902      	cmp	r1, #2
    45ea:	f47f aedc 	bne.w	43a6 <handleSPI+0x386>
				 presetNumberToLoad = presetNumberToSave;
    45ee:	f24a 416b 	movw	r1, #42091	; 0xa46b
				 writingState = 0;
    45f2:	7013      	strb	r3, [r2, #0]
				 presetNumberToLoad = presetNumberToSave;
    45f4:	f24a 426a 	movw	r2, #42090	; 0xa46a
				 presetWaitingToParse = bufferPos;
    45f8:	f244 4348 	movw	r3, #17480	; 0x4448
				 presetNumberToLoad = presetNumberToSave;
    45fc:	f2c2 0101 	movt	r1, #8193	; 0x2001
				 presetWaitingToParse = bufferPos;
    4600:	f2c2 0301 	movt	r3, #8193	; 0x2001
				 presetNumberToLoad = presetNumberToSave;
    4604:	f2c2 0201 	movt	r2, #8193	; 0x2001
    4608:	7809      	ldrb	r1, [r1, #0]
    460a:	b2c9      	uxtb	r1, r1
    460c:	7011      	strb	r1, [r2, #0]
				 presetWaitingToParse = bufferPos;
    460e:	f24a 4270 	movw	r2, #42096	; 0xa470
    4612:	8819      	ldrh	r1, [r3, #0]
    4614:	f2c2 0201 	movt	r2, #8193	; 0x2001
    4618:	b289      	uxth	r1, r1
    461a:	6011      	str	r1, [r2, #0]
				 presetWaitingToWrite = bufferPos;
    461c:	f24a 4274 	movw	r2, #42100	; 0xa474
    4620:	881b      	ldrh	r3, [r3, #0]
    4622:	f2c2 0201 	movt	r2, #8193	; 0x2001
    4626:	b29b      	uxth	r3, r3
    4628:	6013      	str	r3, [r2, #0]
    462a:	e6bc      	b.n	43a6 <handleSPI+0x386>
			brainFirmwareSendInProgress = 1;
    462c:	601c      	str	r4, [r3, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    462e:	f640 0200 	movw	r2, #2048	; 0x800
    4632:	f244 4934 	movw	r9, #17460	; 0x4434
    4636:	f64f 73ff 	movw	r3, #65535	; 0xffff
    463a:	f2c3 0200 	movt	r2, #12288	; 0x3000
    463e:	20fc      	movs	r0, #252	; 0xfc
    4640:	f2cc 13df 	movt	r3, #49631	; 0xc1df
    4644:	f2c2 0901 	movt	r9, #8193	; 0x2001
    4648:	445a      	add	r2, fp
    464a:	f8d9 1000 	ldr.w	r1, [r9]
    464e:	1c5d      	adds	r5, r3, #1
    4650:	f103 0464 	add.w	r4, r3, #100	; 0x64
    4654:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    4658:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    465a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    465e:	283a      	cmp	r0, #58	; 0x3a
    4660:	d101      	bne.n	4666 <handleSPI+0x646>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    4662:	3202      	adds	r2, #2
    4664:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    4666:	42a3      	cmp	r3, r4
    4668:	d1f6      	bne.n	4658 <handleSPI+0x638>
			positionInRowLine = 0;
    466a:	f24a 4358 	movw	r3, #42072	; 0xa458
    466e:	2200      	movs	r2, #0
    4670:	f8c9 1000 	str.w	r1, [r9]
    4674:	f2c2 0301 	movt	r3, #8193	; 0x2001
    4678:	801a      	strh	r2, [r3, #0]
}
    467a:	b009      	add	sp, #36	; 0x24
    467c:	ecbd 8b02 	vpop	{d8}
    4680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    4684:	703c      	strb	r4, [r7, #0]
}
    4686:	b009      	add	sp, #36	; 0x24
    4688:	ecbd 8b02 	vpop	{d8}
    468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (('0' <= value) && (value <= '9'))
    4690:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    4694:	011b      	lsls	r3, r3, #4
	if (('0' <= value) && (value <= '9'))
    4696:	fa5f f888 	uxtb.w	r8, r8
    469a:	b2db      	uxtb	r3, r3
    469c:	f1b8 0f09 	cmp.w	r8, #9
    46a0:	f63f ad99 	bhi.w	41d6 <handleSPI+0x1b6>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    46a4:	ea48 0303 	orr.w	r3, r8, r3
    46a8:	e5a5      	b.n	41f6 <handleSPI+0x1d6>
		return (uint8_t) (10 + value - 'a');
    46aa:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    46ae:	ea43 0308 	orr.w	r3, r3, r8
    46b2:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    46b4:	e59f      	b.n	41f6 <handleSPI+0x1d6>
    46b6:	f1a5 0357 	sub.w	r3, r5, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    46ba:	011b      	lsls	r3, r3, #4
    46bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    46c0:	e581      	b.n	41c6 <handleSPI+0x1a6>
		return (uint8_t) (10 + value - 'A');
    46c2:	f1a5 0337 	sub.w	r3, r5, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    46c6:	011b      	lsls	r3, r3, #4
    46c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    46cc:	e57b      	b.n	41c6 <handleSPI+0x1a6>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    46ce:	188b      	adds	r3, r1, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    46d0:	4632      	mov	r2, r6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    46d2:	f893 e002 	ldrb.w	lr, [r3, #2]
    46d6:	e530      	b.n	413a <handleSPI+0x11a>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    46d8:	2180      	movs	r1, #128	; 0x80
					stringMIDIPitches[i] = myPitch;
    46da:	f244 261c 	movw	r6, #16924	; 0x421c
			 for (int i = 0; i < numStringsThisBoard; i++)
    46de:	2503      	movs	r5, #3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    46e0:	f6c3 3100 	movt	r1, #15104	; 0x3b00
					stringMIDIPitches[i] = myPitch;
    46e4:	f2c2 0601 	movt	r6, #8193	; 0x2001
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    46e8:	ee06 1a90 	vmov	s13, r1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    46ec:	f64f 7174 	movw	r1, #65396	; 0xff74
    46f0:	f2c4 718b 	movt	r1, #18315	; 0x478b
    46f4:	ee07 1a10 	vmov	s14, r1
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    46f8:	6811      	ldr	r1, [r2, #0]
					stringMIDIPitches[i] = myPitch;
    46fa:	eb06 0785 	add.w	r7, r6, r5, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    46fe:	4429      	add	r1, r5
    4700:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4704:	5cc9      	ldrb	r1, [r1, r3]
    4706:	0209      	lsls	r1, r1, #8
    4708:	ee07 1a90 	vmov	s15, r1
    470c:	6811      	ldr	r1, [r2, #0]
    470e:	4429      	add	r1, r5
    4710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4714:	3501      	adds	r5, #1
    4716:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    471a:	4419      	add	r1, r3
    471c:	7849      	ldrb	r1, [r1, #1]
    471e:	ee06 1a10 	vmov	s12, r1
    4722:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    4726:	ee77 7a86 	vadd.f32	s15, s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    472a:	ee27 6aa6 	vmul.f32	s12, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    472e:	eeb5 6a40 	vcmp.f32	s12, #0.0
    4732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4736:	dd06      	ble.n	4746 <handleSPI+0x726>
    4738:	eef4 7a47 	vcmp.f32	s15, s14
    473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4740:	d501      	bpl.n	4746 <handleSPI+0x726>
					stringMIDIPitches[i] = myPitch;
    4742:	ed87 6a00 	vstr	s12, [r7]
			 for (int i = 0; i < numStringsThisBoard; i++)
    4746:	42a8      	cmp	r0, r5
    4748:	dcd6      	bgt.n	46f8 <handleSPI+0x6d8>
    474a:	e623      	b.n	4394 <handleSPI+0x374>
				if (prevKnobByte[whichKnob] == 256)
    474c:	f24a 4578 	movw	r5, #42104	; 0xa478
			 uint8_t currentByte = offset+1;
    4750:	1c46      	adds	r6, r0, #1
				if (prevKnobByte[whichKnob] == 256)
    4752:	f2c2 0501 	movt	r5, #8193	; 0x2001
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4756:	b2f6      	uxtb	r6, r6
				if (prevKnobByte[whichKnob] == 256)
    4758:	6b2b      	ldr	r3, [r5, #48]	; 0x30
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    475a:	5da7      	ldrb	r7, [r4, r6]
				if (prevKnobByte[whichKnob] == 256)
    475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4760:	f001 814b 	beq.w	59fa <handleSPI+0x19da>
				else if (knobFrozen[whichKnob])
    4764:	f245 13d4 	movw	r3, #20948	; 0x51d4
    4768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    476c:	7b1a      	ldrb	r2, [r3, #12]
    476e:	2a00      	cmp	r2, #0
    4770:	f001 8304 	beq.w	5d7c <handleSPI+0x1d5c>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4774:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    4776:	3203      	adds	r2, #3
    4778:	4297      	cmp	r7, r2
    477a:	dc03      	bgt.n	4784 <handleSPI+0x764>
    477c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    477e:	3a03      	subs	r2, #3
    4780:	4297      	cmp	r7, r2
    4782:	da02      	bge.n	478a <handleSPI+0x76a>
						knobFrozen[whichKnob] = 0;
    4784:	2200      	movs	r2, #0
    4786:	731a      	strb	r2, [r3, #12]
						prevKnobByte[whichKnob] = newByte;
    4788:	632f      	str	r7, [r5, #48]	; 0x30
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    478a:	19a3      	adds	r3, r4, r6
    478c:	785f      	ldrb	r7, [r3, #1]
				if (prevKnobByte[whichKnob] == 256)
    478e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    4790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4794:	f001 812e 	beq.w	59f4 <handleSPI+0x19d4>
				else if (knobFrozen[whichKnob])
    4798:	f245 13d4 	movw	r3, #20948	; 0x51d4
    479c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a0:	7b5a      	ldrb	r2, [r3, #13]
    47a2:	2a00      	cmp	r2, #0
    47a4:	f001 82d5 	beq.w	5d52 <handleSPI+0x1d32>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    47a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    47aa:	3203      	adds	r2, #3
    47ac:	4297      	cmp	r7, r2
    47ae:	dc03      	bgt.n	47b8 <handleSPI+0x798>
    47b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    47b2:	3a03      	subs	r2, #3
    47b4:	4297      	cmp	r7, r2
    47b6:	da02      	bge.n	47be <handleSPI+0x79e>
						knobFrozen[whichKnob] = 0;
    47b8:	2200      	movs	r2, #0
    47ba:	735a      	strb	r2, [r3, #13]
						prevKnobByte[whichKnob] = newByte;
    47bc:	636f      	str	r7, [r5, #52]	; 0x34
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    47be:	19a3      	adds	r3, r4, r6
    47c0:	789f      	ldrb	r7, [r3, #2]
				if (prevKnobByte[whichKnob] == 256)
    47c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    47c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    47c8:	f001 8111 	beq.w	59ee <handleSPI+0x19ce>
				else if (knobFrozen[whichKnob])
    47cc:	f245 13d4 	movw	r3, #20948	; 0x51d4
    47d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d4:	7b9a      	ldrb	r2, [r3, #14]
    47d6:	2a00      	cmp	r2, #0
    47d8:	f001 8378 	beq.w	5ecc <handleSPI+0x1eac>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    47dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
    47de:	3203      	adds	r2, #3
    47e0:	4297      	cmp	r7, r2
    47e2:	dc03      	bgt.n	47ec <handleSPI+0x7cc>
    47e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
    47e6:	3a03      	subs	r2, #3
    47e8:	4297      	cmp	r7, r2
    47ea:	da02      	bge.n	47f2 <handleSPI+0x7d2>
						knobFrozen[whichKnob] = 0;
    47ec:	2200      	movs	r2, #0
    47ee:	739a      	strb	r2, [r3, #14]
						prevKnobByte[whichKnob] = newByte;
    47f0:	63af      	str	r7, [r5, #56]	; 0x38
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    47f2:	19a3      	adds	r3, r4, r6
    47f4:	78df      	ldrb	r7, [r3, #3]
				if (prevKnobByte[whichKnob] == 256)
    47f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    47f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    47fc:	f001 80f4 	beq.w	59e8 <handleSPI+0x19c8>
				else if (knobFrozen[whichKnob])
    4800:	f245 13d4 	movw	r3, #20948	; 0x51d4
    4804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4808:	7bda      	ldrb	r2, [r3, #15]
    480a:	2a00      	cmp	r2, #0
    480c:	f001 8349 	beq.w	5ea2 <handleSPI+0x1e82>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4810:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    4812:	3203      	adds	r2, #3
    4814:	4297      	cmp	r7, r2
    4816:	dc03      	bgt.n	4820 <handleSPI+0x800>
    4818:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    481a:	3a03      	subs	r2, #3
    481c:	4297      	cmp	r7, r2
    481e:	da02      	bge.n	4826 <handleSPI+0x806>
						knobFrozen[whichKnob] = 0;
    4820:	2200      	movs	r2, #0
    4822:	73da      	strb	r2, [r3, #15]
						prevKnobByte[whichKnob] = newByte;
    4824:	63ef      	str	r7, [r5, #60]	; 0x3c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4826:	19a3      	adds	r3, r4, r6
    4828:	791f      	ldrb	r7, [r3, #4]
				if (prevKnobByte[whichKnob] == 256)
    482a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    482c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4830:	f001 80c6 	beq.w	59c0 <handleSPI+0x19a0>
				else if (knobFrozen[whichKnob])
    4834:	f245 13d4 	movw	r3, #20948	; 0x51d4
    4838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483c:	7c1a      	ldrb	r2, [r3, #16]
    483e:	2a00      	cmp	r2, #0
    4840:	f001 8383 	beq.w	5f4a <handleSPI+0x1f2a>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4844:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    4846:	3203      	adds	r2, #3
    4848:	4297      	cmp	r7, r2
    484a:	dc03      	bgt.n	4854 <handleSPI+0x834>
    484c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    484e:	3a03      	subs	r2, #3
    4850:	4297      	cmp	r7, r2
    4852:	da02      	bge.n	485a <handleSPI+0x83a>
						knobFrozen[whichKnob] = 0;
    4854:	2200      	movs	r2, #0
    4856:	741a      	strb	r2, [r3, #16]
						prevKnobByte[whichKnob] = newByte;
    4858:	642f      	str	r7, [r5, #64]	; 0x40
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    485a:	19a3      	adds	r3, r4, r6
    485c:	795f      	ldrb	r7, [r3, #5]
				if (prevKnobByte[whichKnob] == 256)
    485e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    4860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4864:	f001 80a9 	beq.w	59ba <handleSPI+0x199a>
				else if (knobFrozen[whichKnob])
    4868:	f245 13d4 	movw	r3, #20948	; 0x51d4
    486c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4870:	7c5a      	ldrb	r2, [r3, #17]
    4872:	2a00      	cmp	r2, #0
    4874:	f001 83d2 	beq.w	601c <handleSPI+0x1ffc>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4878:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    487a:	3203      	adds	r2, #3
    487c:	4297      	cmp	r7, r2
    487e:	dc03      	bgt.n	4888 <handleSPI+0x868>
    4880:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    4882:	3a03      	subs	r2, #3
    4884:	4297      	cmp	r7, r2
    4886:	da02      	bge.n	488e <handleSPI+0x86e>
						knobFrozen[whichKnob] = 0;
    4888:	2200      	movs	r2, #0
    488a:	745a      	strb	r2, [r3, #17]
						prevKnobByte[whichKnob] = newByte;
    488c:	646f      	str	r7, [r5, #68]	; 0x44
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    488e:	19a3      	adds	r3, r4, r6
    4890:	799f      	ldrb	r7, [r3, #6]
				if (prevKnobByte[whichKnob] == 256)
    4892:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4898:	f001 808c 	beq.w	59b4 <handleSPI+0x1994>
				else if (knobFrozen[whichKnob])
    489c:	f245 13d4 	movw	r3, #20948	; 0x51d4
    48a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a4:	7c9a      	ldrb	r2, [r3, #18]
    48a6:	2a00      	cmp	r2, #0
    48a8:	f001 83a3 	beq.w	5ff2 <handleSPI+0x1fd2>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    48ac:	6caa      	ldr	r2, [r5, #72]	; 0x48
    48ae:	3203      	adds	r2, #3
    48b0:	4297      	cmp	r7, r2
    48b2:	dc03      	bgt.n	48bc <handleSPI+0x89c>
    48b4:	6caa      	ldr	r2, [r5, #72]	; 0x48
    48b6:	3a03      	subs	r2, #3
    48b8:	4297      	cmp	r7, r2
    48ba:	da02      	bge.n	48c2 <handleSPI+0x8a2>
						knobFrozen[whichKnob] = 0;
    48bc:	2200      	movs	r2, #0
    48be:	749a      	strb	r2, [r3, #18]
						prevKnobByte[whichKnob] = newByte;
    48c0:	64af      	str	r7, [r5, #72]	; 0x48
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    48c2:	19a3      	adds	r3, r4, r6
    48c4:	79df      	ldrb	r7, [r3, #7]
				if (prevKnobByte[whichKnob] == 256)
    48c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    48c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    48cc:	f001 805b 	beq.w	5986 <handleSPI+0x1966>
				else if (knobFrozen[whichKnob])
    48d0:	f245 13d4 	movw	r3, #20948	; 0x51d4
    48d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d8:	7cda      	ldrb	r2, [r3, #19]
    48da:	2a00      	cmp	r2, #0
    48dc:	f001 8041 	beq.w	5962 <handleSPI+0x1942>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    48e0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    48e2:	3203      	adds	r2, #3
    48e4:	42ba      	cmp	r2, r7
    48e6:	db03      	blt.n	48f0 <handleSPI+0x8d0>
    48e8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    48ea:	3a03      	subs	r2, #3
    48ec:	42ba      	cmp	r2, r7
    48ee:	dd02      	ble.n	48f6 <handleSPI+0x8d6>
						knobFrozen[whichKnob] = 0;
    48f0:	2200      	movs	r2, #0
    48f2:	74da      	strb	r2, [r3, #19]
						prevKnobByte[whichKnob] = newByte;
    48f4:	64ef      	str	r7, [r5, #76]	; 0x4c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    48f6:	19a3      	adds	r3, r4, r6
    48f8:	7a1f      	ldrb	r7, [r3, #8]
				if (prevKnobByte[whichKnob] == 256)
    48fa:	6a2b      	ldr	r3, [r5, #32]
    48fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4900:	f001 8069 	beq.w	59d6 <handleSPI+0x19b6>
				else if (knobFrozen[whichKnob])
    4904:	f245 13d4 	movw	r3, #20948	; 0x51d4
    4908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    490c:	7a1a      	ldrb	r2, [r3, #8]
    490e:	2a00      	cmp	r2, #0
    4910:	f001 829d 	beq.w	5e4e <handleSPI+0x1e2e>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4914:	6a2a      	ldr	r2, [r5, #32]
    4916:	3203      	adds	r2, #3
    4918:	4297      	cmp	r7, r2
    491a:	dc03      	bgt.n	4924 <handleSPI+0x904>
    491c:	6a2a      	ldr	r2, [r5, #32]
    491e:	3a03      	subs	r2, #3
    4920:	4297      	cmp	r7, r2
    4922:	da02      	bge.n	492a <handleSPI+0x90a>
						knobFrozen[whichKnob] = 0;
    4924:	2200      	movs	r2, #0
    4926:	721a      	strb	r2, [r3, #8]
						prevKnobByte[whichKnob] = newByte;
    4928:	622f      	str	r7, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    492a:	19a3      	adds	r3, r4, r6
    492c:	7a5f      	ldrb	r7, [r3, #9]
				if (prevKnobByte[whichKnob] == 256)
    492e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4934:	f001 804c 	beq.w	59d0 <handleSPI+0x19b0>
				else if (knobFrozen[whichKnob])
    4938:	f245 13d4 	movw	r3, #20948	; 0x51d4
    493c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4940:	7a5a      	ldrb	r2, [r3, #9]
    4942:	2a00      	cmp	r2, #0
    4944:	f001 8340 	beq.w	5fc8 <handleSPI+0x1fa8>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4948:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    494a:	3203      	adds	r2, #3
    494c:	4297      	cmp	r7, r2
    494e:	dc03      	bgt.n	4958 <handleSPI+0x938>
    4950:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4952:	3a03      	subs	r2, #3
    4954:	4297      	cmp	r7, r2
    4956:	da02      	bge.n	495e <handleSPI+0x93e>
						knobFrozen[whichKnob] = 0;
    4958:	2200      	movs	r2, #0
    495a:	725a      	strb	r2, [r3, #9]
						prevKnobByte[whichKnob] = newByte;
    495c:	626f      	str	r7, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    495e:	19a3      	adds	r3, r4, r6
    4960:	7a9f      	ldrb	r7, [r3, #10]
				if (prevKnobByte[whichKnob] == 256)
    4962:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4968:	f001 802f 	beq.w	59ca <handleSPI+0x19aa>
				else if (knobFrozen[whichKnob])
    496c:	f245 13d4 	movw	r3, #20948	; 0x51d4
    4970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4974:	7a9a      	ldrb	r2, [r3, #10]
    4976:	2a00      	cmp	r2, #0
    4978:	f001 8311 	beq.w	5f9e <handleSPI+0x1f7e>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    497c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    497e:	3203      	adds	r2, #3
    4980:	4297      	cmp	r7, r2
    4982:	dc03      	bgt.n	498c <handleSPI+0x96c>
    4984:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4986:	3a03      	subs	r2, #3
    4988:	4297      	cmp	r7, r2
    498a:	da02      	bge.n	4992 <handleSPI+0x972>
						knobFrozen[whichKnob] = 0;
    498c:	2200      	movs	r2, #0
    498e:	729a      	strb	r2, [r3, #10]
						prevKnobByte[whichKnob] = newByte;
    4990:	62af      	str	r7, [r5, #40]	; 0x28
				if (prevKnobByte[whichKnob] == 256)
    4992:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4994:	4426      	add	r6, r4
				if (prevKnobByte[whichKnob] == 256)
    4996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    499a:	7af6      	ldrb	r6, [r6, #11]
				if (prevKnobByte[whichKnob] == 256)
    499c:	f000 87de 	beq.w	595c <handleSPI+0x193c>
				else if (knobFrozen[whichKnob])
    49a0:	f245 13d4 	movw	r3, #20948	; 0x51d4
    49a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a8:	7ada      	ldrb	r2, [r3, #11]
    49aa:	2a00      	cmp	r2, #0
    49ac:	f000 87c4 	beq.w	5938 <handleSPI+0x1918>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    49b0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    49b2:	3203      	adds	r2, #3
    49b4:	42b2      	cmp	r2, r6
    49b6:	db03      	blt.n	49c0 <handleSPI+0x9a0>
    49b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    49ba:	3a03      	subs	r2, #3
    49bc:	42b2      	cmp	r2, r6
    49be:	dd02      	ble.n	49c6 <handleSPI+0x9a6>
						knobFrozen[whichKnob] = 0;
    49c0:	2200      	movs	r2, #0
    49c2:	72da      	strb	r2, [r3, #11]
						prevKnobByte[whichKnob] = newByte;
    49c4:	62ee      	str	r6, [r5, #44]	; 0x2c
			currentByte += 12;
    49c6:	f10b 060d 	add.w	r6, fp, #13
    49ca:	f245 3524 	movw	r5, #21284	; 0x5324
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    49ce:	f248 0381 	movw	r3, #32897	; 0x8081
    49d2:	b2f6      	uxtb	r6, r6
    49d4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    49d8:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    49dc:	3e01      	subs	r6, #1
    49de:	f105 0728 	add.w	r7, r5, #40	; 0x28
    49e2:	ee08 3a10 	vmov	s16, r3
    49e6:	4426      	add	r6, r4
    49e8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    49ec:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    49ee:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    49f0:	ee00 3a10 	vmov	s0, r3
    49f4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    49f8:	ee20 0a08 	vmul.f32	s0, s0, s16
    49fc:	f008 fc1c 	bl	d238 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    4a00:	42af      	cmp	r7, r5
    4a02:	d1f1      	bne.n	49e8 <handleSPI+0x9c8>
			whichBar = 1;
    4a04:	f244 235c 	movw	r3, #16988	; 0x425c
    4a08:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    4a0a:	4658      	mov	r0, fp
			whichBar = 1;
    4a0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    4a10:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    4a12:	f7fc fe25 	bl	1660 <updateStateFromSPIMessage>
    4a16:	e4c6      	b.n	43a6 <handleSPI+0x386>
			if (boardNumber == 0)
    4a18:	f244 4331 	movw	r3, #17457	; 0x4431
    4a1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    4a20:	781b      	ldrb	r3, [r3, #0]
    4a22:	2b00      	cmp	r3, #0
    4a24:	f47f ab3c 	bne.w	40a0 <handleSPI+0x80>
				uint_fast8_t  currentByte = offset+1;
    4a28:	1c42      	adds	r2, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    4a2a:	f24a 486b 	movw	r8, #42091	; 0xa46b
    4a2e:	5ca1      	ldrb	r1, [r4, r2]
    4a30:	f2c2 0801 	movt	r8, #8193	; 0x2001
    4a34:	f888 1000 	strb.w	r1, [r8]
				if (presetNumberToSave > 58)
    4a38:	f898 1000 	ldrb.w	r1, [r8]
    4a3c:	293a      	cmp	r1, #58	; 0x3a
    4a3e:	f63f ab2f 	bhi.w	40a0 <handleSPI+0x80>
				bufferPos = 0;
    4a42:	f244 4148 	movw	r1, #17480	; 0x4448
    4a46:	f640 0713 	movw	r7, #2067	; 0x813
    4a4a:	18a5      	adds	r5, r4, r2
    4a4c:	f2c2 0101 	movt	r1, #8193	; 0x2001
    4a50:	f2c3 0700 	movt	r7, #12288	; 0x3000
    4a54:	800b      	strh	r3, [r1, #0]
				for (int i = 0; i < 18; i++)
    4a56:	f242 3380 	movw	r3, #9088	; 0x2380
    4a5a:	4407      	add	r7, r0
    4a5c:	f2c3 0304 	movt	r3, #12292	; 0x3004
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    4a60:	8808      	ldrh	r0, [r1, #0]
    4a62:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    4a66:	b280      	uxth	r0, r0
				for (int i = 0; i < 18; i++)
    4a68:	42af      	cmp	r7, r5
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    4a6a:	541e      	strb	r6, [r3, r0]
    4a6c:	f100 0001 	add.w	r0, r0, #1
    4a70:	b280      	uxth	r0, r0
    4a72:	8008      	strh	r0, [r1, #0]
				for (int i = 0; i < 18; i++)
    4a74:	d1f4      	bne.n	4a60 <handleSPI+0xa40>
				if (whichModel != 0)
    4a76:	f64c 2071 	movw	r0, #51825	; 0xca71
    4a7a:	f2c2 0001 	movt	r0, #8193	; 0x2001
    4a7e:	7807      	ldrb	r7, [r0, #0]
    4a80:	2f00      	cmp	r7, #0
    4a82:	f001 83d4 	beq.w	622e <handleSPI+0x220e>
					bufferPos = 20;//first byte after name
    4a86:	2014      	movs	r0, #20
    4a88:	f240 65a5 	movw	r5, #1701	; 0x6a5
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    4a8c:	f04f 0c13 	mov.w	ip, #19
					for (int j = 0; j < 8; j++)
    4a90:	f04f 0e00 	mov.w	lr, #0
					bufferPos = 20;//first byte after name
    4a94:	8008      	strh	r0, [r1, #0]
    4a96:	f2c2 0500 	movt	r5, #8192	; 0x2000
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4a9a:	880e      	ldrh	r6, [r1, #0]
					bufferPos++;
    4a9c:	8808      	ldrh	r0, [r1, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4a9e:	b2b6      	uxth	r6, r6
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    4aa0:	f883 c001 	strb.w	ip, [r3, #1]
					bufferPos++;
    4aa4:	3001      	adds	r0, #1
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    4aa6:	559f      	strb	r7, [r3, r6]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4aa8:	26c8      	movs	r6, #200	; 0xc8
					bufferPos++;
    4aaa:	b280      	uxth	r0, r0
    4aac:	8008      	strh	r0, [r1, #0]
    4aae:	f243 3080 	movw	r0, #13184	; 0x3380
    4ab2:	f2c3 0004 	movt	r0, #12292	; 0x3004
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4ab6:	f895 c000 	ldrb.w	ip, [r5]
    4aba:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    4abe:	f8b1 9000 	ldrh.w	r9, [r1]
					for (int j = 0; j < 8; j++)
    4ac2:	f10e 0e01 	add.w	lr, lr, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4ac6:	fb06 fc0c 	mul.w	ip, r6, ip
					for (int j = 0; j < 8; j++)
    4aca:	f1be 0f08 	cmp.w	lr, #8
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4ace:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4ad2:	f810 a00c 	ldrb.w	sl, [r0, ip]
    4ad6:	fa1f fc89 	uxth.w	ip, r9
    4ada:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4ade:	f8b1 c000 	ldrh.w	ip, [r1]
    4ae2:	f10c 0c01 	add.w	ip, ip, #1
    4ae6:	fa1f fc8c 	uxth.w	ip, ip
    4aea:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4aee:	f895 c000 	ldrb.w	ip, [r5]
    4af2:	f8b1 9000 	ldrh.w	r9, [r1]
    4af6:	fb06 fc0c 	mul.w	ip, r6, ip
    4afa:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4afe:	4484      	add	ip, r0
    4b00:	f89c a001 	ldrb.w	sl, [ip, #1]
    4b04:	fa1f fc89 	uxth.w	ip, r9
    4b08:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4b0c:	f8b1 c000 	ldrh.w	ip, [r1]
    4b10:	f10c 0c01 	add.w	ip, ip, #1
    4b14:	fa1f fc8c 	uxth.w	ip, ip
    4b18:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4b1c:	f895 c000 	ldrb.w	ip, [r5]
    4b20:	f8b1 9000 	ldrh.w	r9, [r1]
    4b24:	fb06 fc0c 	mul.w	ip, r6, ip
    4b28:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4b2c:	4484      	add	ip, r0
    4b2e:	f89c a002 	ldrb.w	sl, [ip, #2]
    4b32:	fa1f fc89 	uxth.w	ip, r9
    4b36:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4b3a:	f8b1 c000 	ldrh.w	ip, [r1]
    4b3e:	f10c 0c01 	add.w	ip, ip, #1
    4b42:	fa1f fc8c 	uxth.w	ip, ip
    4b46:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4b4a:	f895 c000 	ldrb.w	ip, [r5]
    4b4e:	f8b1 9000 	ldrh.w	r9, [r1]
    4b52:	fb06 fc0c 	mul.w	ip, r6, ip
    4b56:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4b5a:	4484      	add	ip, r0
    4b5c:	f89c a003 	ldrb.w	sl, [ip, #3]
    4b60:	fa1f fc89 	uxth.w	ip, r9
    4b64:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4b68:	f8b1 c000 	ldrh.w	ip, [r1]
    4b6c:	f10c 0c01 	add.w	ip, ip, #1
    4b70:	fa1f fc8c 	uxth.w	ip, ip
    4b74:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4b78:	f895 c000 	ldrb.w	ip, [r5]
    4b7c:	f8b1 9000 	ldrh.w	r9, [r1]
    4b80:	fb06 fc0c 	mul.w	ip, r6, ip
    4b84:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4b88:	4484      	add	ip, r0
    4b8a:	f89c a004 	ldrb.w	sl, [ip, #4]
    4b8e:	fa1f fc89 	uxth.w	ip, r9
    4b92:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4b96:	f8b1 c000 	ldrh.w	ip, [r1]
    4b9a:	f10c 0c01 	add.w	ip, ip, #1
    4b9e:	fa1f fc8c 	uxth.w	ip, ip
    4ba2:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4ba6:	f895 c000 	ldrb.w	ip, [r5]
    4baa:	f8b1 9000 	ldrh.w	r9, [r1]
    4bae:	fb06 fc0c 	mul.w	ip, r6, ip
    4bb2:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4bb6:	4484      	add	ip, r0
    4bb8:	f89c a005 	ldrb.w	sl, [ip, #5]
    4bbc:	fa1f fc89 	uxth.w	ip, r9
    4bc0:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4bc4:	f8b1 c000 	ldrh.w	ip, [r1]
    4bc8:	f10c 0c01 	add.w	ip, ip, #1
    4bcc:	fa1f fc8c 	uxth.w	ip, ip
    4bd0:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4bd4:	f895 c000 	ldrb.w	ip, [r5]
    4bd8:	f8b1 9000 	ldrh.w	r9, [r1]
    4bdc:	fb06 fc0c 	mul.w	ip, r6, ip
    4be0:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4be4:	4484      	add	ip, r0
    4be6:	f89c a006 	ldrb.w	sl, [ip, #6]
    4bea:	fa1f fc89 	uxth.w	ip, r9
    4bee:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4bf2:	f8b1 c000 	ldrh.w	ip, [r1]
    4bf6:	f10c 0c01 	add.w	ip, ip, #1
    4bfa:	fa1f fc8c 	uxth.w	ip, ip
    4bfe:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4c02:	f895 c000 	ldrb.w	ip, [r5]
    4c06:	f8b1 9000 	ldrh.w	r9, [r1]
    4c0a:	fb06 fc0c 	mul.w	ip, r6, ip
    4c0e:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    4c12:	4484      	add	ip, r0
    4c14:	f89c a007 	ldrb.w	sl, [ip, #7]
    4c18:	fa1f fc89 	uxth.w	ip, r9
    4c1c:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4c20:	f8b1 c000 	ldrh.w	ip, [r1]
    4c24:	f10c 0c01 	add.w	ip, ip, #1
    4c28:	fa1f fc8c 	uxth.w	ip, ip
    4c2c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4c30:	f895 c000 	ldrb.w	ip, [r5]
    4c34:	fb06 fc0c 	mul.w	ip, r6, ip
    4c38:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
    4c3c:	f8b1 c000 	ldrh.w	ip, [r1]
    4c40:	4407      	add	r7, r0
    4c42:	f897 9008 	ldrb.w	r9, [r7, #8]
    4c46:	fa1f f78c 	uxth.w	r7, ip
    4c4a:	f803 9007 	strb.w	r9, [r3, r7]
							bufferPos++;
    4c4e:	880f      	ldrh	r7, [r1, #0]
    4c50:	f107 0701 	add.w	r7, r7, #1
    4c54:	b2bf      	uxth	r7, r7
    4c56:	800f      	strh	r7, [r1, #0]
					for (int j = 0; j < 8; j++)
    4c58:	f47f af2d 	bne.w	4ab6 <handleSPI+0xa96>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c5c:	f895 c000 	ldrb.w	ip, [r5]
							bufferPos++;
    4c60:	f04f 0e0c 	mov.w	lr, #12
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c64:	880f      	ldrh	r7, [r1, #0]
    4c66:	fb06 0c0c 	mla	ip, r6, ip, r0
    4c6a:	b2bf      	uxth	r7, r7
    4c6c:	f89c c050 	ldrb.w	ip, [ip, #80]	; 0x50
    4c70:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4c74:	880f      	ldrh	r7, [r1, #0]
    4c76:	3701      	adds	r7, #1
    4c78:	b2bf      	uxth	r7, r7
    4c7a:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c7c:	f895 c000 	ldrb.w	ip, [r5]
    4c80:	880f      	ldrh	r7, [r1, #0]
    4c82:	fb06 0c0c 	mla	ip, r6, ip, r0
    4c86:	b2bf      	uxth	r7, r7
    4c88:	f89c c051 	ldrb.w	ip, [ip, #81]	; 0x51
    4c8c:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4c90:	880f      	ldrh	r7, [r1, #0]
    4c92:	3701      	adds	r7, #1
    4c94:	b2bf      	uxth	r7, r7
    4c96:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4c98:	f895 c000 	ldrb.w	ip, [r5]
    4c9c:	880f      	ldrh	r7, [r1, #0]
    4c9e:	fb06 0c0c 	mla	ip, r6, ip, r0
    4ca2:	b2bf      	uxth	r7, r7
    4ca4:	f89c c052 	ldrb.w	ip, [ip, #82]	; 0x52
    4ca8:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4cac:	880f      	ldrh	r7, [r1, #0]
    4cae:	3701      	adds	r7, #1
    4cb0:	b2bf      	uxth	r7, r7
    4cb2:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4cb4:	f895 c000 	ldrb.w	ip, [r5]
    4cb8:	880f      	ldrh	r7, [r1, #0]
    4cba:	fb06 0c0c 	mla	ip, r6, ip, r0
    4cbe:	b2bf      	uxth	r7, r7
    4cc0:	f89c c053 	ldrb.w	ip, [ip, #83]	; 0x53
    4cc4:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4cc8:	880f      	ldrh	r7, [r1, #0]
    4cca:	3701      	adds	r7, #1
    4ccc:	b2bf      	uxth	r7, r7
    4cce:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4cd0:	f895 c000 	ldrb.w	ip, [r5]
    4cd4:	880f      	ldrh	r7, [r1, #0]
    4cd6:	fb06 0c0c 	mla	ip, r6, ip, r0
    4cda:	b2bf      	uxth	r7, r7
    4cdc:	f89c c054 	ldrb.w	ip, [ip, #84]	; 0x54
    4ce0:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4ce4:	880f      	ldrh	r7, [r1, #0]
    4ce6:	3701      	adds	r7, #1
    4ce8:	b2bf      	uxth	r7, r7
    4cea:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4cec:	f895 c000 	ldrb.w	ip, [r5]
    4cf0:	880f      	ldrh	r7, [r1, #0]
    4cf2:	fb06 0c0c 	mla	ip, r6, ip, r0
    4cf6:	b2bf      	uxth	r7, r7
    4cf8:	f89c c055 	ldrb.w	ip, [ip, #85]	; 0x55
    4cfc:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d00:	880f      	ldrh	r7, [r1, #0]
    4d02:	3701      	adds	r7, #1
    4d04:	b2bf      	uxth	r7, r7
    4d06:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d08:	f895 c000 	ldrb.w	ip, [r5]
    4d0c:	880f      	ldrh	r7, [r1, #0]
    4d0e:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d12:	b2bf      	uxth	r7, r7
    4d14:	f89c c056 	ldrb.w	ip, [ip, #86]	; 0x56
    4d18:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d1c:	880f      	ldrh	r7, [r1, #0]
    4d1e:	3701      	adds	r7, #1
    4d20:	b2bf      	uxth	r7, r7
    4d22:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d24:	f895 c000 	ldrb.w	ip, [r5]
    4d28:	880f      	ldrh	r7, [r1, #0]
    4d2a:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d2e:	b2bf      	uxth	r7, r7
    4d30:	f89c c057 	ldrb.w	ip, [ip, #87]	; 0x57
    4d34:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d38:	880f      	ldrh	r7, [r1, #0]
    4d3a:	3701      	adds	r7, #1
    4d3c:	b2bf      	uxth	r7, r7
    4d3e:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d40:	f895 c000 	ldrb.w	ip, [r5]
    4d44:	880f      	ldrh	r7, [r1, #0]
    4d46:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d4a:	b2bf      	uxth	r7, r7
    4d4c:	f89c c058 	ldrb.w	ip, [ip, #88]	; 0x58
    4d50:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d54:	880f      	ldrh	r7, [r1, #0]
    4d56:	3701      	adds	r7, #1
    4d58:	b2bf      	uxth	r7, r7
    4d5a:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d5c:	f895 c000 	ldrb.w	ip, [r5]
    4d60:	880f      	ldrh	r7, [r1, #0]
    4d62:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d66:	b2bf      	uxth	r7, r7
    4d68:	f89c c059 	ldrb.w	ip, [ip, #89]	; 0x59
    4d6c:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d70:	880f      	ldrh	r7, [r1, #0]
    4d72:	3701      	adds	r7, #1
    4d74:	b2bf      	uxth	r7, r7
    4d76:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d78:	f895 c000 	ldrb.w	ip, [r5]
    4d7c:	880f      	ldrh	r7, [r1, #0]
    4d7e:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d82:	b2bf      	uxth	r7, r7
    4d84:	f89c c05a 	ldrb.w	ip, [ip, #90]	; 0x5a
    4d88:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4d8c:	880f      	ldrh	r7, [r1, #0]
    4d8e:	3701      	adds	r7, #1
    4d90:	b2bf      	uxth	r7, r7
    4d92:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4d94:	f895 c000 	ldrb.w	ip, [r5]
    4d98:	880f      	ldrh	r7, [r1, #0]
    4d9a:	fb06 0c0c 	mla	ip, r6, ip, r0
    4d9e:	b2bf      	uxth	r7, r7
    4da0:	f89c c05b 	ldrb.w	ip, [ip, #91]	; 0x5b
    4da4:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4da8:	880f      	ldrh	r7, [r1, #0]
    4daa:	3701      	adds	r7, #1
    4dac:	b2bf      	uxth	r7, r7
    4dae:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4db0:	f895 c000 	ldrb.w	ip, [r5]
    4db4:	880f      	ldrh	r7, [r1, #0]
    4db6:	fb06 0c0c 	mla	ip, r6, ip, r0
    4dba:	b2bf      	uxth	r7, r7
    4dbc:	f89c c05c 	ldrb.w	ip, [ip, #92]	; 0x5c
    4dc0:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4dc4:	880f      	ldrh	r7, [r1, #0]
    4dc6:	3701      	adds	r7, #1
    4dc8:	b2bf      	uxth	r7, r7
    4dca:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4dcc:	f895 c000 	ldrb.w	ip, [r5]
    4dd0:	880f      	ldrh	r7, [r1, #0]
    4dd2:	fb06 0c0c 	mla	ip, r6, ip, r0
    4dd6:	b2bf      	uxth	r7, r7
    4dd8:	f89c c05d 	ldrb.w	ip, [ip, #93]	; 0x5d
    4ddc:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4de0:	880f      	ldrh	r7, [r1, #0]
    4de2:	3701      	adds	r7, #1
    4de4:	b2bf      	uxth	r7, r7
    4de6:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4de8:	f895 c000 	ldrb.w	ip, [r5]
    4dec:	880f      	ldrh	r7, [r1, #0]
    4dee:	fb06 0c0c 	mla	ip, r6, ip, r0
    4df2:	b2bf      	uxth	r7, r7
    4df4:	f89c c05e 	ldrb.w	ip, [ip, #94]	; 0x5e
    4df8:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4dfc:	880f      	ldrh	r7, [r1, #0]
    4dfe:	3701      	adds	r7, #1
    4e00:	b2bf      	uxth	r7, r7
    4e02:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e04:	f895 c000 	ldrb.w	ip, [r5]
    4e08:	880f      	ldrh	r7, [r1, #0]
    4e0a:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e0e:	b2bf      	uxth	r7, r7
    4e10:	f89c c05f 	ldrb.w	ip, [ip, #95]	; 0x5f
    4e14:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4e18:	880f      	ldrh	r7, [r1, #0]
    4e1a:	3701      	adds	r7, #1
    4e1c:	b2bf      	uxth	r7, r7
    4e1e:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e20:	f895 c000 	ldrb.w	ip, [r5]
    4e24:	880f      	ldrh	r7, [r1, #0]
    4e26:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e2a:	b2bf      	uxth	r7, r7
    4e2c:	f89c c060 	ldrb.w	ip, [ip, #96]	; 0x60
    4e30:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4e34:	880f      	ldrh	r7, [r1, #0]
    4e36:	3701      	adds	r7, #1
    4e38:	b2bf      	uxth	r7, r7
    4e3a:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e3c:	f895 c000 	ldrb.w	ip, [r5]
    4e40:	880f      	ldrh	r7, [r1, #0]
    4e42:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e46:	b2bf      	uxth	r7, r7
    4e48:	f89c c061 	ldrb.w	ip, [ip, #97]	; 0x61
    4e4c:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4e50:	880f      	ldrh	r7, [r1, #0]
    4e52:	3701      	adds	r7, #1
    4e54:	b2bf      	uxth	r7, r7
    4e56:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e58:	f895 c000 	ldrb.w	ip, [r5]
    4e5c:	880f      	ldrh	r7, [r1, #0]
    4e5e:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e62:	b2bf      	uxth	r7, r7
    4e64:	f89c c062 	ldrb.w	ip, [ip, #98]	; 0x62
    4e68:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4e6c:	880f      	ldrh	r7, [r1, #0]
    4e6e:	3701      	adds	r7, #1
    4e70:	b2bf      	uxth	r7, r7
    4e72:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e74:	f895 c000 	ldrb.w	ip, [r5]
    4e78:	880f      	ldrh	r7, [r1, #0]
    4e7a:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e7e:	b2bf      	uxth	r7, r7
    4e80:	f89c c063 	ldrb.w	ip, [ip, #99]	; 0x63
    4e84:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4e88:	880f      	ldrh	r7, [r1, #0]
    4e8a:	3701      	adds	r7, #1
    4e8c:	b2bf      	uxth	r7, r7
    4e8e:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4e90:	f895 c000 	ldrb.w	ip, [r5]
    4e94:	880f      	ldrh	r7, [r1, #0]
    4e96:	fb06 0c0c 	mla	ip, r6, ip, r0
    4e9a:	b2bf      	uxth	r7, r7
    4e9c:	f89c c064 	ldrb.w	ip, [ip, #100]	; 0x64
    4ea0:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4ea4:	880f      	ldrh	r7, [r1, #0]
    4ea6:	3701      	adds	r7, #1
    4ea8:	b2bf      	uxth	r7, r7
    4eaa:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4eac:	f895 c000 	ldrb.w	ip, [r5]
    4eb0:	880f      	ldrh	r7, [r1, #0]
    4eb2:	fb06 0c0c 	mla	ip, r6, ip, r0
    4eb6:	b2bf      	uxth	r7, r7
    4eb8:	f89c c065 	ldrb.w	ip, [ip, #101]	; 0x65
    4ebc:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4ec0:	880f      	ldrh	r7, [r1, #0]
    4ec2:	3701      	adds	r7, #1
    4ec4:	b2bf      	uxth	r7, r7
    4ec6:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ec8:	f895 c000 	ldrb.w	ip, [r5]
    4ecc:	880f      	ldrh	r7, [r1, #0]
    4ece:	fb06 0c0c 	mla	ip, r6, ip, r0
    4ed2:	b2bf      	uxth	r7, r7
    4ed4:	f89c c066 	ldrb.w	ip, [ip, #102]	; 0x66
    4ed8:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4edc:	880f      	ldrh	r7, [r1, #0]
    4ede:	3701      	adds	r7, #1
    4ee0:	b2bf      	uxth	r7, r7
    4ee2:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ee4:	f895 c000 	ldrb.w	ip, [r5]
    4ee8:	880f      	ldrh	r7, [r1, #0]
    4eea:	fb06 0c0c 	mla	ip, r6, ip, r0
    4eee:	b2bf      	uxth	r7, r7
    4ef0:	f89c c067 	ldrb.w	ip, [ip, #103]	; 0x67
    4ef4:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4ef8:	880f      	ldrh	r7, [r1, #0]
    4efa:	3701      	adds	r7, #1
    4efc:	b2bf      	uxth	r7, r7
    4efe:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f00:	f895 c000 	ldrb.w	ip, [r5]
    4f04:	880f      	ldrh	r7, [r1, #0]
    4f06:	fb06 0c0c 	mla	ip, r6, ip, r0
    4f0a:	b2bf      	uxth	r7, r7
    4f0c:	f89c c068 	ldrb.w	ip, [ip, #104]	; 0x68
    4f10:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4f14:	880f      	ldrh	r7, [r1, #0]
    4f16:	3701      	adds	r7, #1
    4f18:	b2bf      	uxth	r7, r7
    4f1a:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f1c:	782f      	ldrb	r7, [r5, #0]
    4f1e:	fb06 0707 	mla	r7, r6, r7, r0
    4f22:	880e      	ldrh	r6, [r1, #0]
    4f24:	f897 7069 	ldrb.w	r7, [r7, #105]	; 0x69
    4f28:	b2b6      	uxth	r6, r6
    4f2a:	559f      	strb	r7, [r3, r6]
							bufferPos++;
    4f2c:	880e      	ldrh	r6, [r1, #0]
    4f2e:	3601      	adds	r6, #1
    4f30:	b2b6      	uxth	r6, r6
    4f32:	800e      	strh	r6, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f34:	26c8      	movs	r6, #200	; 0xc8
    4f36:	f895 c000 	ldrb.w	ip, [r5]
    4f3a:	880f      	ldrh	r7, [r1, #0]
    4f3c:	fb06 0c0c 	mla	ip, r6, ip, r0
    4f40:	b2bf      	uxth	r7, r7
    4f42:	f89c c06a 	ldrb.w	ip, [ip, #106]	; 0x6a
    4f46:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4f4a:	880f      	ldrh	r7, [r1, #0]
    4f4c:	3701      	adds	r7, #1
    4f4e:	b2bf      	uxth	r7, r7
    4f50:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f52:	f895 c000 	ldrb.w	ip, [r5]
    4f56:	880f      	ldrh	r7, [r1, #0]
    4f58:	fb06 0c0c 	mla	ip, r6, ip, r0
    4f5c:	b2bf      	uxth	r7, r7
    4f5e:	f89c c06b 	ldrb.w	ip, [ip, #107]	; 0x6b
    4f62:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4f66:	880f      	ldrh	r7, [r1, #0]
    4f68:	3701      	adds	r7, #1
    4f6a:	b2bf      	uxth	r7, r7
    4f6c:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f6e:	f895 c000 	ldrb.w	ip, [r5]
    4f72:	880f      	ldrh	r7, [r1, #0]
    4f74:	fb06 0c0c 	mla	ip, r6, ip, r0
    4f78:	b2bf      	uxth	r7, r7
    4f7a:	f89c c06c 	ldrb.w	ip, [ip, #108]	; 0x6c
    4f7e:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4f82:	880f      	ldrh	r7, [r1, #0]
    4f84:	3701      	adds	r7, #1
    4f86:	b2bf      	uxth	r7, r7
    4f88:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4f8a:	f895 c000 	ldrb.w	ip, [r5]
    4f8e:	880f      	ldrh	r7, [r1, #0]
    4f90:	fb06 0c0c 	mla	ip, r6, ip, r0
    4f94:	b2bf      	uxth	r7, r7
    4f96:	f89c c06d 	ldrb.w	ip, [ip, #109]	; 0x6d
    4f9a:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4f9e:	880f      	ldrh	r7, [r1, #0]
    4fa0:	3701      	adds	r7, #1
    4fa2:	b2bf      	uxth	r7, r7
    4fa4:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4fa6:	f895 c000 	ldrb.w	ip, [r5]
    4faa:	880f      	ldrh	r7, [r1, #0]
    4fac:	fb06 0c0c 	mla	ip, r6, ip, r0
    4fb0:	b2bf      	uxth	r7, r7
    4fb2:	f89c c06e 	ldrb.w	ip, [ip, #110]	; 0x6e
    4fb6:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4fba:	880f      	ldrh	r7, [r1, #0]
    4fbc:	3701      	adds	r7, #1
    4fbe:	b2bf      	uxth	r7, r7
    4fc0:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4fc2:	f895 c000 	ldrb.w	ip, [r5]
    4fc6:	880f      	ldrh	r7, [r1, #0]
    4fc8:	fb06 0c0c 	mla	ip, r6, ip, r0
    4fcc:	b2bf      	uxth	r7, r7
    4fce:	f89c c06f 	ldrb.w	ip, [ip, #111]	; 0x6f
    4fd2:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4fd6:	880f      	ldrh	r7, [r1, #0]
    4fd8:	3701      	adds	r7, #1
    4fda:	b2bf      	uxth	r7, r7
    4fdc:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4fde:	f895 c000 	ldrb.w	ip, [r5]
    4fe2:	880f      	ldrh	r7, [r1, #0]
    4fe4:	fb06 0c0c 	mla	ip, r6, ip, r0
    4fe8:	b2bf      	uxth	r7, r7
    4fea:	f89c c070 	ldrb.w	ip, [ip, #112]	; 0x70
    4fee:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    4ff2:	880f      	ldrh	r7, [r1, #0]
    4ff4:	3701      	adds	r7, #1
    4ff6:	b2bf      	uxth	r7, r7
    4ff8:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ffa:	f895 c000 	ldrb.w	ip, [r5]
    4ffe:	880f      	ldrh	r7, [r1, #0]
    5000:	fb06 0c0c 	mla	ip, r6, ip, r0
    5004:	b2bf      	uxth	r7, r7
    5006:	f89c c071 	ldrb.w	ip, [ip, #113]	; 0x71
    500a:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    500e:	880f      	ldrh	r7, [r1, #0]
    5010:	3701      	adds	r7, #1
    5012:	b2bf      	uxth	r7, r7
    5014:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    5016:	f895 c000 	ldrb.w	ip, [r5]
    501a:	880f      	ldrh	r7, [r1, #0]
    501c:	fb06 0c0c 	mla	ip, r6, ip, r0
    5020:	b2bf      	uxth	r7, r7
    5022:	f89c c072 	ldrb.w	ip, [ip, #114]	; 0x72
    5026:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    502a:	880f      	ldrh	r7, [r1, #0]
    502c:	3701      	adds	r7, #1
    502e:	b2bf      	uxth	r7, r7
    5030:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    5032:	f895 c000 	ldrb.w	ip, [r5]
    5036:	880f      	ldrh	r7, [r1, #0]
    5038:	fb06 0c0c 	mla	ip, r6, ip, r0
    503c:	b2bf      	uxth	r7, r7
    503e:	f89c c073 	ldrb.w	ip, [ip, #115]	; 0x73
    5042:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    5046:	880f      	ldrh	r7, [r1, #0]
    5048:	3701      	adds	r7, #1
    504a:	b2bf      	uxth	r7, r7
    504c:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    504e:	f895 c000 	ldrb.w	ip, [r5]
    5052:	880f      	ldrh	r7, [r1, #0]
    5054:	fb06 0c0c 	mla	ip, r6, ip, r0
    5058:	b2bf      	uxth	r7, r7
    505a:	f89c c074 	ldrb.w	ip, [ip, #116]	; 0x74
    505e:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    5062:	880f      	ldrh	r7, [r1, #0]
    5064:	3701      	adds	r7, #1
    5066:	b2bf      	uxth	r7, r7
    5068:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    506a:	f895 c000 	ldrb.w	ip, [r5]
    506e:	880f      	ldrh	r7, [r1, #0]
    5070:	fb06 0c0c 	mla	ip, r6, ip, r0
    5074:	b2bf      	uxth	r7, r7
    5076:	f89c c075 	ldrb.w	ip, [ip, #117]	; 0x75
    507a:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    507e:	880f      	ldrh	r7, [r1, #0]
    5080:	3701      	adds	r7, #1
    5082:	b2bf      	uxth	r7, r7
    5084:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    5086:	f895 c000 	ldrb.w	ip, [r5]
    508a:	880f      	ldrh	r7, [r1, #0]
    508c:	fb06 0c0c 	mla	ip, r6, ip, r0
    5090:	b2bf      	uxth	r7, r7
    5092:	f89c c076 	ldrb.w	ip, [ip, #118]	; 0x76
    5096:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    509a:	880f      	ldrh	r7, [r1, #0]
    509c:	3701      	adds	r7, #1
    509e:	b2bf      	uxth	r7, r7
    50a0:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    50a2:	f895 c000 	ldrb.w	ip, [r5]
    50a6:	880f      	ldrh	r7, [r1, #0]
    50a8:	fb06 0c0c 	mla	ip, r6, ip, r0
    50ac:	b2bf      	uxth	r7, r7
    50ae:	f89c c077 	ldrb.w	ip, [ip, #119]	; 0x77
    50b2:	f803 c007 	strb.w	ip, [r3, r7]
							bufferPos++;
    50b6:	880f      	ldrh	r7, [r1, #0]
    50b8:	3701      	adds	r7, #1
    50ba:	b2bf      	uxth	r7, r7
    50bc:	800f      	strh	r7, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    50be:	f895 c000 	ldrb.w	ip, [r5]
    50c2:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    50c6:	f8b1 9000 	ldrh.w	r9, [r1]
					for (int j = 0; j < 8; j++)
    50ca:	f10e 0e01 	add.w	lr, lr, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    50ce:	fb06 fc0c 	mul.w	ip, r6, ip
					for (int j = 0; j < 8; j++)
    50d2:	f1be 0f14 	cmp.w	lr, #20
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    50d6:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    50da:	f810 a00c 	ldrb.w	sl, [r0, ip]
    50de:	fa1f fc89 	uxth.w	ip, r9
    50e2:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    50e6:	f8b1 c000 	ldrh.w	ip, [r1]
    50ea:	f10c 0c01 	add.w	ip, ip, #1
    50ee:	fa1f fc8c 	uxth.w	ip, ip
    50f2:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    50f6:	f895 c000 	ldrb.w	ip, [r5]
    50fa:	f8b1 9000 	ldrh.w	r9, [r1]
    50fe:	fb06 fc0c 	mul.w	ip, r6, ip
    5102:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    5106:	4484      	add	ip, r0
    5108:	f89c a001 	ldrb.w	sl, [ip, #1]
    510c:	fa1f fc89 	uxth.w	ip, r9
    5110:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    5114:	f8b1 c000 	ldrh.w	ip, [r1]
    5118:	f10c 0c01 	add.w	ip, ip, #1
    511c:	fa1f fc8c 	uxth.w	ip, ip
    5120:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    5124:	f895 c000 	ldrb.w	ip, [r5]
    5128:	f8b1 9000 	ldrh.w	r9, [r1]
    512c:	fb06 fc0c 	mul.w	ip, r6, ip
    5130:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    5134:	4484      	add	ip, r0
    5136:	f89c a002 	ldrb.w	sl, [ip, #2]
    513a:	fa1f fc89 	uxth.w	ip, r9
    513e:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    5142:	f8b1 c000 	ldrh.w	ip, [r1]
    5146:	f10c 0c01 	add.w	ip, ip, #1
    514a:	fa1f fc8c 	uxth.w	ip, ip
    514e:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    5152:	f895 c000 	ldrb.w	ip, [r5]
    5156:	f8b1 9000 	ldrh.w	r9, [r1]
    515a:	fb06 fc0c 	mul.w	ip, r6, ip
    515e:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    5162:	4484      	add	ip, r0
    5164:	f89c a003 	ldrb.w	sl, [ip, #3]
    5168:	fa1f fc89 	uxth.w	ip, r9
    516c:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    5170:	f8b1 c000 	ldrh.w	ip, [r1]
    5174:	f10c 0c01 	add.w	ip, ip, #1
    5178:	fa1f fc8c 	uxth.w	ip, ip
    517c:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    5180:	f895 c000 	ldrb.w	ip, [r5]
    5184:	f8b1 9000 	ldrh.w	r9, [r1]
    5188:	fb06 fc0c 	mul.w	ip, r6, ip
    518c:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    5190:	4484      	add	ip, r0
    5192:	f89c a004 	ldrb.w	sl, [ip, #4]
    5196:	fa1f fc89 	uxth.w	ip, r9
    519a:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    519e:	f8b1 c000 	ldrh.w	ip, [r1]
    51a2:	f10c 0c01 	add.w	ip, ip, #1
    51a6:	fa1f fc8c 	uxth.w	ip, ip
    51aa:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    51ae:	f895 c000 	ldrb.w	ip, [r5]
    51b2:	f8b1 9000 	ldrh.w	r9, [r1]
    51b6:	fb06 fc0c 	mul.w	ip, r6, ip
    51ba:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    51be:	4484      	add	ip, r0
    51c0:	f89c a005 	ldrb.w	sl, [ip, #5]
    51c4:	fa1f fc89 	uxth.w	ip, r9
    51c8:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    51cc:	f8b1 c000 	ldrh.w	ip, [r1]
    51d0:	f10c 0c01 	add.w	ip, ip, #1
    51d4:	fa1f fc8c 	uxth.w	ip, ip
    51d8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    51dc:	f895 c000 	ldrb.w	ip, [r5]
    51e0:	f8b1 9000 	ldrh.w	r9, [r1]
    51e4:	fb06 fc0c 	mul.w	ip, r6, ip
    51e8:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    51ec:	4484      	add	ip, r0
    51ee:	f89c a006 	ldrb.w	sl, [ip, #6]
    51f2:	fa1f fc89 	uxth.w	ip, r9
    51f6:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    51fa:	f8b1 c000 	ldrh.w	ip, [r1]
    51fe:	f10c 0c01 	add.w	ip, ip, #1
    5202:	fa1f fc8c 	uxth.w	ip, ip
    5206:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    520a:	f895 c000 	ldrb.w	ip, [r5]
    520e:	f8b1 9000 	ldrh.w	r9, [r1]
    5212:	fb06 fc0c 	mul.w	ip, r6, ip
    5216:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
    521a:	4484      	add	ip, r0
    521c:	f89c a007 	ldrb.w	sl, [ip, #7]
    5220:	fa1f fc89 	uxth.w	ip, r9
    5224:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    5228:	f8b1 c000 	ldrh.w	ip, [r1]
    522c:	f10c 0c01 	add.w	ip, ip, #1
    5230:	fa1f fc8c 	uxth.w	ip, ip
    5234:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    5238:	f895 c000 	ldrb.w	ip, [r5]
    523c:	fb06 fc0c 	mul.w	ip, r6, ip
    5240:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
    5244:	f8b1 c000 	ldrh.w	ip, [r1]
    5248:	4407      	add	r7, r0
    524a:	f897 9008 	ldrb.w	r9, [r7, #8]
    524e:	fa1f f78c 	uxth.w	r7, ip
    5252:	f803 9007 	strb.w	r9, [r3, r7]
							bufferPos++;
    5256:	880f      	ldrh	r7, [r1, #0]
    5258:	f107 0701 	add.w	r7, r7, #1
    525c:	b2bf      	uxth	r7, r7
    525e:	800f      	strh	r7, [r1, #0]
					for (int j = 0; j < 8; j++)
    5260:	f47f af2d 	bne.w	50be <handleSPI+0x109e>
    5264:	f245 1ce8 	movw	ip, #20968	; 0x51e8
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5268:	f04f 458f 	mov.w	r5, #1199570944	; 0x47800000
    526c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    5270:	ee07 5a10 	vmov	s14, r5
    5274:	f10c 0e50 	add.w	lr, ip, #80	; 0x50
    5278:	ecfc 7a01 	vldmia	ip!, {s15}
						buffer[bufferPos] = integerVersion >> 8;
    527c:	880f      	ldrh	r7, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    527e:	ee67 7a87 	vmul.f32	s15, s15, s14
						buffer[bufferPos+1] = integerVersion & 255;
    5282:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    5284:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5286:	b2bf      	uxth	r7, r7
						buffer[bufferPos+1] = integerVersion & 255;
    5288:	fa13 f686 	uxtah	r6, r3, r6
					for (int i = 0; i < 20; i++)
    528c:	45e6      	cmp	lr, ip
						bufferPos = bufferPos + 2;
    528e:	f105 0502 	add.w	r5, r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    5296:	b2ad      	uxth	r5, r5
    5298:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    529a:	ee17 5a90 	vmov	r5, s15
						buffer[bufferPos] = integerVersion >> 8;
    529e:	f3c5 2907 	ubfx	r9, r5, #8, #8
    52a2:	f803 9007 	strb.w	r9, [r3, r7]
						buffer[bufferPos+1] = integerVersion & 255;
    52a6:	7075      	strb	r5, [r6, #1]
					for (int i = 0; i < 20; i++)
    52a8:	d1e6      	bne.n	5278 <handleSPI+0x1258>
					 presetNumberToLoad = presetNumberToSave;
    52aa:	f898 5000 	ldrb.w	r5, [r8]
    52ae:	f24a 436a 	movw	r3, #42090	; 0xa46a
    52b2:	b2ed      	uxtb	r5, r5
    52b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    52b8:	701d      	strb	r5, [r3, #0]
					 presetWaitingToParse = bufferPos;
    52ba:	f24a 4370 	movw	r3, #42096	; 0xa470
    52be:	880d      	ldrh	r5, [r1, #0]
    52c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    52c4:	b2ad      	uxth	r5, r5
    52c6:	601d      	str	r5, [r3, #0]
					 presetWaitingToWrite = bufferPos;
    52c8:	f24a 4374 	movw	r3, #42100	; 0xa474
    52cc:	8809      	ldrh	r1, [r1, #0]
    52ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
    52d2:	b289      	uxth	r1, r1
    52d4:	6019      	str	r1, [r3, #0]
    52d6:	f7ff b874 	b.w	43c2 <handleSPI+0x3a2>
			if (boardNumber == 0)
    52da:	f244 4331 	movw	r3, #17457	; 0x4431
    52de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    52e2:	781b      	ldrb	r3, [r3, #0]
    52e4:	2b00      	cmp	r3, #0
    52e6:	f47e aedb 	bne.w	40a0 <handleSPI+0x80>
				brainFirmwareUpdateRequested = 1;
    52ea:	f244 4344 	movw	r3, #17476	; 0x4444
    52ee:	2101      	movs	r1, #1
    52f0:	f243 3080 	movw	r0, #13184	; 0x3380
    52f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    52f8:	eb0b 0201 	add.w	r2, fp, r1
    52fc:	f2c3 0004 	movt	r0, #12292	; 0x3004
				brainFirmwareUpdateRequested = 1;
    5300:	6019      	str	r1, [r3, #0]
    5302:	f7ff b85e 	b.w	43c2 <handleSPI+0x3a2>
			 if (writingState != ReceivingPreset)
    5306:	f64c 2273 	movw	r2, #51827	; 0xca73
    530a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    530e:	7813      	ldrb	r3, [r2, #0]
    5310:	2b02      	cmp	r3, #2
    5312:	f000 8342 	beq.w	599a <handleSPI+0x197a>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    5316:	f240 0300 	movw	r3, #0
    531a:	2102      	movs	r1, #2
    531c:	f2c3 0300 	movt	r3, #12288	; 0x3000
    5320:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    5322:	0758      	lsls	r0, r3, #29
    5324:	f041 80eb 	bne.w	64fe <handleSPI+0x24de>
    5328:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    532c:	2000      	movs	r0, #0
    532e:	2100      	movs	r1, #0
    5330:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    5334:	4293      	cmp	r3, r2
    5336:	d1fb      	bne.n	5330 <handleSPI+0x1310>
				 diskBusy = 1;
    5338:	f244 418c 	movw	r1, #17548	; 0x448c
    533c:	2001      	movs	r0, #1
				 audioMasterLevel = 0.0f;
    533e:	f240 63a0 	movw	r3, #1696	; 0x6a0
    5342:	2200      	movs	r2, #0
				 diskBusy = 1;
    5344:	f2c2 0101 	movt	r1, #8193	; 0x2001
				 audioMasterLevel = 0.0f;
    5348:	f2c2 0300 	movt	r3, #8192	; 0x2000
				 diskBusy = 1;
    534c:	7008      	strb	r0, [r1, #0]
				 bufferPos = 0;
    534e:	f244 4148 	movw	r1, #17480	; 0x4448
				 audioMasterLevel = 0.0f;
    5352:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    5354:	f2c2 0101 	movt	r1, #8193	; 0x2001
    5358:	800a      	strh	r2, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    535a:	eb04 020b 	add.w	r2, r4, fp
    535e:	f24a 436b 	movw	r3, #42091	; 0xa46b
    5362:	f640 061b 	movw	r6, #2075	; 0x81b
    5366:	f2c2 0301 	movt	r3, #8193	; 0x2001
    536a:	7852      	ldrb	r2, [r2, #1]
    536c:	f2c3 0600 	movt	r6, #12288	; 0x3000
    5370:	701a      	strb	r2, [r3, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    5372:	f10b 0302 	add.w	r3, fp, #2
    5376:	b2db      	uxtb	r3, r3
    5378:	1e58      	subs	r0, r3, #1
    537a:	441e      	add	r6, r3
    537c:	f242 3380 	movw	r3, #9088	; 0x2380
    5380:	4420      	add	r0, r4
    5382:	f2c3 0304 	movt	r3, #12292	; 0x3004
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    5386:	880a      	ldrh	r2, [r1, #0]
    5388:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    538c:	b292      	uxth	r2, r2
			 for (int i = 0; i < 28; i++)
    538e:	4286      	cmp	r6, r0
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    5390:	549d      	strb	r5, [r3, r2]
    5392:	f102 0201 	add.w	r2, r2, #1
    5396:	b292      	uxth	r2, r2
    5398:	800a      	strh	r2, [r1, #0]
			 for (int i = 0; i < 28; i++)
    539a:	d1f4      	bne.n	5386 <handleSPI+0x1366>
    539c:	f7ff b803 	b.w	43a6 <handleSPI+0x386>
				if (prevKnobByte[i] == 256)
    53a0:	f24a 4578 	movw	r5, #42104	; 0xa478
			uint8_t currentByte = offset+1;
    53a4:	1c46      	adds	r6, r0, #1
				if (prevKnobByte[i] == 256)
    53a6:	f2c2 0501 	movt	r5, #8193	; 0x2001
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    53aa:	b2f6      	uxtb	r6, r6
				if (prevKnobByte[i] == 256)
    53ac:	682b      	ldr	r3, [r5, #0]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    53ae:	5da7      	ldrb	r7, [r4, r6]
				if (prevKnobByte[i] == 256)
    53b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    53b4:	f000 82fc 	beq.w	59b0 <handleSPI+0x1990>
				else if (knobFrozen[i])
    53b8:	f245 13d4 	movw	r3, #20948	; 0x51d4
    53bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c0:	781a      	ldrb	r2, [r3, #0]
    53c2:	2a00      	cmp	r2, #0
    53c4:	f000 8504 	beq.w	5dd0 <handleSPI+0x1db0>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    53c8:	682a      	ldr	r2, [r5, #0]
    53ca:	3203      	adds	r2, #3
    53cc:	42ba      	cmp	r2, r7
    53ce:	db03      	blt.n	53d8 <handleSPI+0x13b8>
    53d0:	682a      	ldr	r2, [r5, #0]
    53d2:	3a03      	subs	r2, #3
    53d4:	42ba      	cmp	r2, r7
    53d6:	dd02      	ble.n	53de <handleSPI+0x13be>
						knobFrozen[i] = 0;
    53d8:	2200      	movs	r2, #0
    53da:	701a      	strb	r2, [r3, #0]
						prevKnobByte[i] = newByte;
    53dc:	602f      	str	r7, [r5, #0]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    53de:	19a3      	adds	r3, r4, r6
    53e0:	785f      	ldrb	r7, [r3, #1]
				if (prevKnobByte[i] == 256)
    53e2:	686b      	ldr	r3, [r5, #4]
    53e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    53e8:	f000 82e0 	beq.w	59ac <handleSPI+0x198c>
				else if (knobFrozen[i])
    53ec:	f245 13d4 	movw	r3, #20948	; 0x51d4
    53f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f4:	785a      	ldrb	r2, [r3, #1]
    53f6:	2a00      	cmp	r2, #0
    53f8:	f000 84d5 	beq.w	5da6 <handleSPI+0x1d86>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    53fc:	686a      	ldr	r2, [r5, #4]
    53fe:	3203      	adds	r2, #3
    5400:	42ba      	cmp	r2, r7
    5402:	db03      	blt.n	540c <handleSPI+0x13ec>
    5404:	686a      	ldr	r2, [r5, #4]
    5406:	3a03      	subs	r2, #3
    5408:	4297      	cmp	r7, r2
    540a:	da02      	bge.n	5412 <handleSPI+0x13f2>
						knobFrozen[i] = 0;
    540c:	2200      	movs	r2, #0
    540e:	705a      	strb	r2, [r3, #1]
						prevKnobByte[i] = newByte;
    5410:	606f      	str	r7, [r5, #4]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5412:	19a3      	adds	r3, r4, r6
    5414:	789f      	ldrb	r7, [r3, #2]
				if (prevKnobByte[i] == 256)
    5416:	68ab      	ldr	r3, [r5, #8]
    5418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    541c:	f000 82c4 	beq.w	59a8 <handleSPI+0x1988>
				else if (knobFrozen[i])
    5420:	f245 13d4 	movw	r3, #20948	; 0x51d4
    5424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5428:	789a      	ldrb	r2, [r3, #2]
    542a:	2a00      	cmp	r2, #0
    542c:	f000 84fa 	beq.w	5e24 <handleSPI+0x1e04>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5430:	68aa      	ldr	r2, [r5, #8]
    5432:	3203      	adds	r2, #3
    5434:	42ba      	cmp	r2, r7
    5436:	db03      	blt.n	5440 <handleSPI+0x1420>
    5438:	68aa      	ldr	r2, [r5, #8]
    543a:	3a03      	subs	r2, #3
    543c:	42ba      	cmp	r2, r7
    543e:	dd02      	ble.n	5446 <handleSPI+0x1426>
						knobFrozen[i] = 0;
    5440:	2200      	movs	r2, #0
    5442:	709a      	strb	r2, [r3, #2]
						prevKnobByte[i] = newByte;
    5444:	60af      	str	r7, [r5, #8]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5446:	19a3      	adds	r3, r4, r6
    5448:	78df      	ldrb	r7, [r3, #3]
				if (prevKnobByte[i] == 256)
    544a:	68eb      	ldr	r3, [r5, #12]
    544c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5450:	f000 82a8 	beq.w	59a4 <handleSPI+0x1984>
				else if (knobFrozen[i])
    5454:	f245 13d4 	movw	r3, #20948	; 0x51d4
    5458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545c:	78da      	ldrb	r2, [r3, #3]
    545e:	2a00      	cmp	r2, #0
    5460:	f000 84cb 	beq.w	5dfa <handleSPI+0x1dda>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5464:	68ea      	ldr	r2, [r5, #12]
    5466:	3203      	adds	r2, #3
    5468:	4297      	cmp	r7, r2
    546a:	dc03      	bgt.n	5474 <handleSPI+0x1454>
    546c:	68ea      	ldr	r2, [r5, #12]
    546e:	3a03      	subs	r2, #3
    5470:	4297      	cmp	r7, r2
    5472:	da02      	bge.n	547a <handleSPI+0x145a>
						knobFrozen[i] = 0;
    5474:	2200      	movs	r2, #0
    5476:	70da      	strb	r2, [r3, #3]
						prevKnobByte[i] = newByte;
    5478:	60ef      	str	r7, [r5, #12]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    547a:	19a3      	adds	r3, r4, r6
    547c:	791f      	ldrb	r7, [r3, #4]
				if (prevKnobByte[i] == 256)
    547e:	692b      	ldr	r3, [r5, #16]
    5480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5484:	f000 8287 	beq.w	5996 <handleSPI+0x1976>
				else if (knobFrozen[i])
    5488:	f245 13d4 	movw	r3, #20948	; 0x51d4
    548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5490:	791a      	ldrb	r2, [r3, #4]
    5492:	2a00      	cmp	r2, #0
    5494:	f000 8448 	beq.w	5d28 <handleSPI+0x1d08>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5498:	692a      	ldr	r2, [r5, #16]
    549a:	3203      	adds	r2, #3
    549c:	4297      	cmp	r7, r2
    549e:	dc03      	bgt.n	54a8 <handleSPI+0x1488>
    54a0:	692a      	ldr	r2, [r5, #16]
    54a2:	3a03      	subs	r2, #3
    54a4:	4297      	cmp	r7, r2
    54a6:	da02      	bge.n	54ae <handleSPI+0x148e>
						knobFrozen[i] = 0;
    54a8:	2200      	movs	r2, #0
    54aa:	711a      	strb	r2, [r3, #4]
						prevKnobByte[i] = newByte;
    54ac:	612f      	str	r7, [r5, #16]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    54ae:	19a3      	adds	r3, r4, r6
    54b0:	795f      	ldrb	r7, [r3, #5]
				if (prevKnobByte[i] == 256)
    54b2:	696b      	ldr	r3, [r5, #20]
    54b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    54b8:	f000 826b 	beq.w	5992 <handleSPI+0x1972>
				else if (knobFrozen[i])
    54bc:	f245 13d4 	movw	r3, #20948	; 0x51d4
    54c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c4:	795a      	ldrb	r2, [r3, #5]
    54c6:	2a00      	cmp	r2, #0
    54c8:	f000 8419 	beq.w	5cfe <handleSPI+0x1cde>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    54cc:	696a      	ldr	r2, [r5, #20]
    54ce:	3203      	adds	r2, #3
    54d0:	4297      	cmp	r7, r2
    54d2:	dc03      	bgt.n	54dc <handleSPI+0x14bc>
    54d4:	696a      	ldr	r2, [r5, #20]
    54d6:	3a03      	subs	r2, #3
    54d8:	4297      	cmp	r7, r2
    54da:	da02      	bge.n	54e2 <handleSPI+0x14c2>
						knobFrozen[i] = 0;
    54dc:	2200      	movs	r2, #0
    54de:	715a      	strb	r2, [r3, #5]
						prevKnobByte[i] = newByte;
    54e0:	616f      	str	r7, [r5, #20]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    54e2:	19a3      	adds	r3, r4, r6
    54e4:	799f      	ldrb	r7, [r3, #6]
				if (prevKnobByte[i] == 256)
    54e6:	69ab      	ldr	r3, [r5, #24]
    54e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    54ec:	f000 826b 	beq.w	59c6 <handleSPI+0x19a6>
				else if (knobFrozen[i])
    54f0:	f245 13d4 	movw	r3, #20948	; 0x51d4
    54f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f8:	799a      	ldrb	r2, [r3, #6]
    54fa:	2a00      	cmp	r2, #0
    54fc:	f000 853a 	beq.w	5f74 <handleSPI+0x1f54>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5500:	69aa      	ldr	r2, [r5, #24]
    5502:	3203      	adds	r2, #3
    5504:	4297      	cmp	r7, r2
    5506:	dc03      	bgt.n	5510 <handleSPI+0x14f0>
    5508:	69aa      	ldr	r2, [r5, #24]
    550a:	3a03      	subs	r2, #3
    550c:	4297      	cmp	r7, r2
    550e:	da02      	bge.n	5516 <handleSPI+0x14f6>
						knobFrozen[i] = 0;
    5510:	2200      	movs	r2, #0
    5512:	719a      	strb	r2, [r3, #6]
						prevKnobByte[i] = newByte;
    5514:	61af      	str	r7, [r5, #24]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5516:	19a3      	adds	r3, r4, r6
    5518:	79df      	ldrb	r7, [r3, #7]
				if (prevKnobByte[i] == 256)
    551a:	69eb      	ldr	r3, [r5, #28]
    551c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5520:	f000 81f4 	beq.w	590c <handleSPI+0x18ec>
				else if (knobFrozen[i])
    5524:	f245 13d4 	movw	r3, #20948	; 0x51d4
    5528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552c:	79da      	ldrb	r2, [r3, #7]
    552e:	2a00      	cmp	r2, #0
    5530:	f000 81da 	beq.w	58e8 <handleSPI+0x18c8>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5534:	69ea      	ldr	r2, [r5, #28]
    5536:	3203      	adds	r2, #3
    5538:	42ba      	cmp	r2, r7
    553a:	db03      	blt.n	5544 <handleSPI+0x1524>
    553c:	69ea      	ldr	r2, [r5, #28]
    553e:	3a03      	subs	r2, #3
    5540:	42ba      	cmp	r2, r7
    5542:	dd02      	ble.n	554a <handleSPI+0x152a>
						knobFrozen[i] = 0;
    5544:	2200      	movs	r2, #0
    5546:	71da      	strb	r2, [r3, #7]
						prevKnobByte[i] = newByte;
    5548:	61ef      	str	r7, [r5, #28]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    554a:	19a3      	adds	r3, r4, r6
    554c:	7a1f      	ldrb	r7, [r3, #8]
				if (prevKnobByte[i] == 256)
    554e:	6a2b      	ldr	r3, [r5, #32]
    5550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5554:	f000 8246 	beq.w	59e4 <handleSPI+0x19c4>
				else if (knobFrozen[i])
    5558:	f245 13d4 	movw	r3, #20948	; 0x51d4
    555c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5560:	7a1a      	ldrb	r2, [r3, #8]
    5562:	2a00      	cmp	r2, #0
    5564:	f000 84dc 	beq.w	5f20 <handleSPI+0x1f00>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5568:	6a2a      	ldr	r2, [r5, #32]
    556a:	3203      	adds	r2, #3
    556c:	4297      	cmp	r7, r2
    556e:	dc03      	bgt.n	5578 <handleSPI+0x1558>
    5570:	6a2a      	ldr	r2, [r5, #32]
    5572:	3a03      	subs	r2, #3
    5574:	4297      	cmp	r7, r2
    5576:	da02      	bge.n	557e <handleSPI+0x155e>
						knobFrozen[i] = 0;
    5578:	2200      	movs	r2, #0
    557a:	721a      	strb	r2, [r3, #8]
						prevKnobByte[i] = newByte;
    557c:	622f      	str	r7, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    557e:	19a3      	adds	r3, r4, r6
    5580:	7a5f      	ldrb	r7, [r3, #9]
				if (prevKnobByte[i] == 256)
    5582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5588:	f000 822a 	beq.w	59e0 <handleSPI+0x19c0>
				else if (knobFrozen[i])
    558c:	f245 13d4 	movw	r3, #20948	; 0x51d4
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	7a5a      	ldrb	r2, [r3, #9]
    5596:	2a00      	cmp	r2, #0
    5598:	f000 84ad 	beq.w	5ef6 <handleSPI+0x1ed6>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    559c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    559e:	3203      	adds	r2, #3
    55a0:	4297      	cmp	r7, r2
    55a2:	dc03      	bgt.n	55ac <handleSPI+0x158c>
    55a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    55a6:	3a03      	subs	r2, #3
    55a8:	4297      	cmp	r7, r2
    55aa:	da02      	bge.n	55b2 <handleSPI+0x1592>
						knobFrozen[i] = 0;
    55ac:	2200      	movs	r2, #0
    55ae:	725a      	strb	r2, [r3, #9]
						prevKnobByte[i] = newByte;
    55b0:	626f      	str	r7, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    55b2:	19a3      	adds	r3, r4, r6
    55b4:	7a9f      	ldrb	r7, [r3, #10]
				if (prevKnobByte[i] == 256)
    55b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    55b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    55bc:	f000 820e 	beq.w	59dc <handleSPI+0x19bc>
				else if (knobFrozen[i])
    55c0:	f245 13d4 	movw	r3, #20948	; 0x51d4
    55c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c8:	7a9a      	ldrb	r2, [r3, #10]
    55ca:	2a00      	cmp	r2, #0
    55cc:	f000 8454 	beq.w	5e78 <handleSPI+0x1e58>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    55d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    55d2:	3203      	adds	r2, #3
    55d4:	42ba      	cmp	r2, r7
    55d6:	db03      	blt.n	55e0 <handleSPI+0x15c0>
    55d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    55da:	3a03      	subs	r2, #3
    55dc:	42ba      	cmp	r2, r7
    55de:	dd02      	ble.n	55e6 <handleSPI+0x15c6>
						knobFrozen[i] = 0;
    55e0:	2200      	movs	r2, #0
    55e2:	729a      	strb	r2, [r3, #10]
						prevKnobByte[i] = newByte;
    55e4:	62af      	str	r7, [r5, #40]	; 0x28
				if (prevKnobByte[i] == 256)
    55e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    55e8:	4426      	add	r6, r4
				if (prevKnobByte[i] == 256)
    55ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    55ee:	7af6      	ldrb	r6, [r6, #11]
				if (prevKnobByte[i] == 256)
    55f0:	f000 81a0 	beq.w	5934 <handleSPI+0x1914>
				else if (knobFrozen[i])
    55f4:	f245 13d4 	movw	r3, #20948	; 0x51d4
    55f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55fc:	7ada      	ldrb	r2, [r3, #11]
    55fe:	2a00      	cmp	r2, #0
    5600:	f000 8186 	beq.w	5910 <handleSPI+0x18f0>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5604:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5606:	3203      	adds	r2, #3
    5608:	42b2      	cmp	r2, r6
    560a:	db03      	blt.n	5614 <handleSPI+0x15f4>
    560c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    560e:	3a03      	subs	r2, #3
    5610:	42b2      	cmp	r2, r6
    5612:	dd02      	ble.n	561a <handleSPI+0x15fa>
						knobFrozen[i] = 0;
    5614:	2200      	movs	r2, #0
    5616:	72da      	strb	r2, [r3, #11]
						prevKnobByte[i] = newByte;
    5618:	62ee      	str	r6, [r5, #44]	; 0x2c
			currentByte += 12;
    561a:	f10b 060d 	add.w	r6, fp, #13
    561e:	f245 3524 	movw	r5, #21284	; 0x5324
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5622:	f248 0381 	movw	r3, #32897	; 0x8081
    5626:	b2f6      	uxtb	r6, r6
    5628:	f2c2 0500 	movt	r5, #8192	; 0x2000
    562c:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5630:	3e01      	subs	r6, #1
    5632:	f105 0728 	add.w	r7, r5, #40	; 0x28
    5636:	ee08 3a10 	vmov	s16, r3
    563a:	4426      	add	r6, r4
    563c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    5640:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    5642:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5644:	ee00 3a10 	vmov	s0, r3
    5648:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    564c:	ee20 0a08 	vmul.f32	s0, s0, s16
    5650:	f007 fdf2 	bl	d238 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    5654:	42af      	cmp	r7, r5
    5656:	d1f1      	bne.n	563c <handleSPI+0x161c>
    5658:	f7ff b9d4 	b.w	4a04 <handleSPI+0x9e4>
			if (presetReady)
    565c:	f245 324c 	movw	r2, #21324	; 0x534c
    5660:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5664:	6812      	ldr	r2, [r2, #0]
    5666:	2a00      	cmp	r2, #0
    5668:	f43e ae9d 	beq.w	43a6 <handleSPI+0x386>
				uint8_t currentByte = offset+1;
    566c:	1c45      	adds	r5, r0, #1
    566e:	f248 61c4 	movw	r1, #34500	; 0x86c4
				uint8_t foundOne = 0;
    5672:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    5676:	f04f 0920 	mov.w	r9, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    567a:	b2ed      	uxtb	r5, r5
    567c:	f2c2 0101 	movt	r1, #8193	; 0x2001
    5680:	5d62      	ldrb	r2, [r4, r5]
    5682:	4425      	add	r5, r4
    5684:	460e      	mov	r6, r1
    5686:	f895 c001 	ldrb.w	ip, [r5, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    568a:	7928      	ldrb	r0, [r5, #4]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    568c:	eb0c 2c02 	add.w	ip, ip, r2, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    5690:	796a      	ldrb	r2, [r5, #5]
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    5692:	f895 8003 	ldrb.w	r8, [r5, #3]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    5696:	eb02 2200 	add.w	r2, r2, r0, lsl #8
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    569a:	78a8      	ldrb	r0, [r5, #2]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    569c:	fa1f fc8c 	uxth.w	ip, ip
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    56a0:	4675      	mov	r5, lr
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    56a2:	b212      	sxth	r2, r2
					if (mappings[j].destNumber == destNumber)
    56a4:	7837      	ldrb	r7, [r6, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    56a6:	364c      	adds	r6, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    56a8:	4567      	cmp	r7, ip
    56aa:	d102      	bne.n	56b2 <handleSPI+0x1692>
						whichMapping = j;
    56ac:	b2eb      	uxtb	r3, r5
						foundOne = 1;
    56ae:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    56b2:	2fff      	cmp	r7, #255	; 0xff
    56b4:	d103      	bne.n	56be <handleSPI+0x169e>
    56b6:	45a9      	cmp	r9, r5
    56b8:	bfc8      	it	gt
    56ba:	fa5f f985 	uxtbgt.w	r9, r5
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    56be:	3501      	adds	r5, #1
    56c0:	2d20      	cmp	r5, #32
    56c2:	d1ef      	bne.n	56a4 <handleSPI+0x1684>
				if (foundOne == 0)
    56c4:	f1be 0f00 	cmp.w	lr, #0
    56c8:	d116      	bne.n	56f8 <handleSPI+0x16d8>
					mappings[whichMapping].destNumber = destNumber;
    56ca:	254c      	movs	r5, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    56cc:	f249 371c 	movw	r7, #37660	; 0x931c
					numMappings++;
    56d0:	f249 360c 	movw	r6, #37644	; 0x930c
					mappings[whichMapping].dest = &params[destNumber];
    56d4:	464b      	mov	r3, r9
					mappings[whichMapping].destNumber = destNumber;
    56d6:	fb05 f509 	mul.w	r5, r5, r9
					mappings[whichMapping].dest = &params[destNumber];
    56da:	f2c2 0701 	movt	r7, #8193	; 0x2001
					numMappings++;
    56de:	f2c2 0601 	movt	r6, #8193	; 0x2001
					mappings[whichMapping].destNumber = destNumber;
    56e2:	f801 c005 	strb.w	ip, [r1, r5]
					mappings[whichMapping].dest = &params[destNumber];
    56e6:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    56ea:	440d      	add	r5, r1
					mappings[whichMapping].dest = &params[destNumber];
    56ec:	eb07 078c 	add.w	r7, r7, ip, lsl #2
    56f0:	606f      	str	r7, [r5, #4]
					numMappings++;
    56f2:	7835      	ldrb	r5, [r6, #0]
    56f4:	3501      	adds	r5, #1
    56f6:	7035      	strb	r5, [r6, #0]
				if (mappingChangeType == SourceID)
    56f8:	f1b8 0f00 	cmp.w	r8, #0
    56fc:	f040 8180 	bne.w	5a00 <handleSPI+0x19e0>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5700:	254c      	movs	r5, #76	; 0x4c
    5702:	2701      	movs	r7, #1
					if (source == 255)
    5704:	2aff      	cmp	r2, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5706:	fb03 f505 	mul.w	r5, r3, r5
    570a:	eb01 0605 	add.w	r6, r1, r5
    570e:	eb06 0c00 	add.w	ip, r6, r0
    5712:	f88c 7020 	strb.w	r7, [ip, #32]
					if (source == 255)
    5716:	f000 872e 	beq.w	6576 <handleSPI+0x2556>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    571a:	f100 0904 	add.w	r9, r0, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    571e:	f64d 0680 	movw	r6, #55424	; 0xd880
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5722:	f240 6aa8 	movw	sl, #1704	; 0x6a8
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5726:	f100 0e01 	add.w	lr, r0, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    572a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    572e:	f2c2 0601 	movt	r6, #8193	; 0x2001
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5732:	f2c2 0a00 	movt	sl, #8192	; 0x2000
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5736:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    573a:	4489      	add	r9, r1
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    573c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
						if (source < MACRO_SOURCE_OFFSET) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5740:	2a03      	cmp	r2, #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    5742:	f88c 7048 	strb.w	r7, [ip, #72]	; 0x48
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5746:	f8c9 a004 	str.w	sl, [r9, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    574a:	eb06 09c2 	add.w	r9, r6, r2, lsl #3
    574e:	440d      	add	r5, r1
    5750:	f109 0604 	add.w	r6, r9, #4
    5754:	f841 900e 	str.w	r9, [r1, lr]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5758:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    575c:	60ee      	str	r6, [r5, #12]
						if (source < MACRO_SOURCE_OFFSET) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    575e:	f340 86d8 	ble.w	6512 <handleSPI+0x24f2>
						if ((source >= MACRO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET)))
    5762:	1f16      	subs	r6, r2, #4
    5764:	2e13      	cmp	r6, #19
    5766:	f200 86d6 	bhi.w	6516 <handleSPI+0x24f6>
							knobTicked[source-MACRO_SOURCE_OFFSET] = 1;
    576a:	f246 6510 	movw	r5, #26128	; 0x6610
    576e:	f2c2 0501 	movt	r5, #8193	; 0x2001
    5772:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5776:	f1a2 0514 	sub.w	r5, r2, #20
    577a:	2d03      	cmp	r5, #3
    577c:	d806      	bhi.n	578c <handleSPI+0x176c>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    577e:	f24d 3534 	movw	r5, #54068	; 0xd334
    5782:	f2c2 0501 	movt	r5, #8193	; 0x2001
    5786:	4415      	add	r5, r2
    5788:	f805 7c14 	strb.w	r7, [r5, #-20]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    578c:	2a03      	cmp	r2, #3
    578e:	d105      	bne.n	579c <handleSPI+0x177c>
							noiseOn = 1;
    5790:	f24d 627c 	movw	r2, #54908	; 0xd67c
    5794:	2501      	movs	r5, #1
    5796:	f2c2 0201 	movt	r2, #8193	; 0x2001
    579a:	7015      	strb	r5, [r2, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    579c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    57a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    57a4:	2200      	movs	r2, #0
    57a6:	4403      	add	r3, r0
    57a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    57ac:	63da      	str	r2, [r3, #60]	; 0x3c
    57ae:	f7fe bdfa 	b.w	43a6 <handleSPI+0x386>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    57b2:	1821      	adds	r1, r4, r0
    57b4:	f24d 730a 	movw	r3, #55050	; 0xd70a
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    57b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    57bc:	f240 628c 	movw	r2, #1676	; 0x68c
    57c0:	7849      	ldrb	r1, [r1, #1]
    57c2:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    57c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57ca:	ee07 1a90 	vmov	s15, r1
    57ce:	ee07 3a10 	vmov	s14, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    57d2:	f240 6390 	movw	r3, #1680	; 0x690
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    57d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    57da:	f2c2 0300 	movt	r3, #8192	; 0x2000
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    57de:	ee67 7a87 	vmul.f32	s15, s15, s14
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    57e2:	ee27 7aa6 	vmul.f32	s14, s15, s13
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    57e6:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    57ea:	ed83 7a00 	vstr	s14, [r3]
    57ee:	f7fe bdda 	b.w	43a6 <handleSPI+0x386>
			if (presetReady)
    57f2:	f245 334c 	movw	r3, #21324	; 0x534c
    57f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57fa:	681b      	ldr	r3, [r3, #0]
    57fc:	2b00      	cmp	r3, #0
    57fe:	f43e add2 	beq.w	43a6 <handleSPI+0x386>
				uint8_t currentByte = offset+1;
    5802:	1c42      	adds	r2, r0, #1
				currentByte = currentByte + 2;
    5804:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    5806:	f249 361c 	movw	r6, #37660	; 0x931c
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    580a:	b2d2      	uxtb	r2, r2
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    580c:	b2db      	uxtb	r3, r3
    580e:	f2c2 0601 	movt	r6, #8193	; 0x2001
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    5812:	18a1      	adds	r1, r4, r2
    5814:	5ca2      	ldrb	r2, [r4, r2]
    5816:	784d      	ldrb	r5, [r1, #1]
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    5818:	18e1      	adds	r1, r4, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    581a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    581e:	5ce2      	ldrb	r2, [r4, r3]
    5820:	784b      	ldrb	r3, [r1, #1]
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    5822:	b2ad      	uxth	r5, r5
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    5824:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5828:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    582c:	ee07 3a90 	vmov	s15, r3
    5830:	f64f 73f6 	movw	r3, #65526	; 0xfff6
    5834:	f2c3 737f 	movt	r3, #14207	; 0x377f
    5838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    583c:	ee07 3a10 	vmov	s14, r3
    5840:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5844:	ee67 7a87 	vmul.f32	s15, s15, s14
    5848:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    584c:	edc3 7a00 	vstr	s15, [r3]
    5850:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    5854:	f1a5 033f 	sub.w	r3, r5, #63	; 0x3f
    5858:	b299      	uxth	r1, r3
    585a:	2918      	cmp	r1, #24
    585c:	d805      	bhi.n	586a <handleSPI+0x184a>
    585e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
    5862:	40ca      	lsrs	r2, r1
    5864:	07d1      	lsls	r1, r2, #31
    5866:	f100 820d 	bmi.w	5c84 <handleSPI+0x1c64>
    586a:	eba8 0705 	sub.w	r7, r8, r5
			 for (int i = 0; i < numStringsThisBoard; i++)
    586e:	f04f 0a00 	mov.w	sl, #0
    5872:	eb06 0787 	add.w	r7, r6, r7, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    5876:	46b9      	mov	r9, r7
    5878:	ecb7 0a01 	vldmia	r7!, {s0}
    587c:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5880:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    5882:	4651      	mov	r1, sl
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    5884:	ed87 0a01 	vstr	s0, [r7, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    5888:	f8d9 3014 	ldr.w	r3, [r9, #20]
    588c:	f899 0018 	ldrb.w	r0, [r9, #24]
    5890:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5892:	f1ba 0f00 	cmp.w	sl, #0
    5896:	d079      	beq.n	598c <handleSPI+0x196c>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    5898:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    589c:	b299      	uxth	r1, r3
    589e:	291a      	cmp	r1, #26
    58a0:	d807      	bhi.n	58b2 <handleSPI+0x1892>
    58a2:	f242 0201 	movw	r2, #8193	; 0x2001
    58a6:	f2c0 4200 	movt	r2, #1024	; 0x400
    58aa:	40ca      	lsrs	r2, r1
    58ac:	07d2      	lsls	r2, r2, #31
    58ae:	f100 8459 	bmi.w	6164 <handleSPI+0x2144>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    58b2:	f1a5 0218 	sub.w	r2, r5, #24
    58b6:	b291      	uxth	r1, r2
    58b8:	291a      	cmp	r1, #26
    58ba:	f240 810f 	bls.w	5adc <handleSPI+0x1abc>
				if ((whichParam == Noise))
    58be:	2d12      	cmp	r5, #18
    58c0:	f040 83f4 	bne.w	60ac <handleSPI+0x208c>
					if (params[whichParam].realVal[0]  > 0.5f)
    58c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    58c8:	ed96 7a80 	vldr	s14, [r6, #512]	; 0x200
    58cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    58d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58d4:	f77e ad67 	ble.w	43a6 <handleSPI+0x386>
						noiseOn = 1;
    58d8:	f24d 637c 	movw	r3, #54908	; 0xd67c
    58dc:	2201      	movs	r2, #1
    58de:	f2c2 0301 	movt	r3, #8193	; 0x2001
    58e2:	701a      	strb	r2, [r3, #0]
    58e4:	f7fe bd5f 	b.w	43a6 <handleSPI+0x386>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    58e8:	f248 0381 	movw	r3, #32897	; 0x8081
    58ec:	ee07 7a90 	vmov	s15, r7
    58f0:	f245 2054 	movw	r0, #21076	; 0x5254
    58f4:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    58f8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    58fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5900:	ee07 3a90 	vmov	s15, r3
    5904:	ee20 0a27 	vmul.f32	s0, s0, s15
    5908:	f007 fc96 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    590c:	61ef      	str	r7, [r5, #28]
    590e:	e61c      	b.n	554a <handleSPI+0x152a>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5910:	f248 0381 	movw	r3, #32897	; 0x8081
    5914:	ee07 6a90 	vmov	s15, r6
    5918:	f245 2064 	movw	r0, #21092	; 0x5264
    591c:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5920:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5924:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5928:	ee07 3a90 	vmov	s15, r3
    592c:	ee20 0a27 	vmul.f32	s0, s0, s15
    5930:	f007 fc82 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5934:	62ee      	str	r6, [r5, #44]	; 0x2c
    5936:	e670      	b.n	561a <handleSPI+0x15fa>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5938:	f248 0381 	movw	r3, #32897	; 0x8081
    593c:	ee07 6a90 	vmov	s15, r6
    5940:	f245 2064 	movw	r0, #21092	; 0x5264
    5944:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5948:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    594c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5950:	ee07 3a90 	vmov	s15, r3
    5954:	ee20 0a27 	vmul.f32	s0, s0, s15
    5958:	f007 fc6e 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    595c:	62ee      	str	r6, [r5, #44]	; 0x2c
    595e:	f7ff b832 	b.w	49c6 <handleSPI+0x9a6>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5962:	f248 0381 	movw	r3, #32897	; 0x8081
    5966:	ee07 7a90 	vmov	s15, r7
    596a:	f245 2084 	movw	r0, #21124	; 0x5284
    596e:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5972:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5976:	f2c2 0000 	movt	r0, #8192	; 0x2000
    597a:	ee07 3a90 	vmov	s15, r3
    597e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5982:	f007 fc59 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5986:	64ef      	str	r7, [r5, #76]	; 0x4c
    5988:	f7fe bfb5 	b.w	48f6 <handleSPI+0x8d6>
    598c:	f04f 0a01 	mov.w	sl, #1
    5990:	e772      	b.n	5878 <handleSPI+0x1858>
					prevKnobByte[i] = newByte;
    5992:	616f      	str	r7, [r5, #20]
    5994:	e5a5      	b.n	54e2 <handleSPI+0x14c2>
    5996:	612f      	str	r7, [r5, #16]
    5998:	e589      	b.n	54ae <handleSPI+0x148e>
    599a:	f244 4148 	movw	r1, #17480	; 0x4448
    599e:	f2c2 0101 	movt	r1, #8193	; 0x2001
    59a2:	e4da      	b.n	535a <handleSPI+0x133a>
    59a4:	60ef      	str	r7, [r5, #12]
    59a6:	e568      	b.n	547a <handleSPI+0x145a>
    59a8:	60af      	str	r7, [r5, #8]
    59aa:	e54c      	b.n	5446 <handleSPI+0x1426>
    59ac:	606f      	str	r7, [r5, #4]
    59ae:	e530      	b.n	5412 <handleSPI+0x13f2>
    59b0:	602f      	str	r7, [r5, #0]
    59b2:	e514      	b.n	53de <handleSPI+0x13be>
					prevKnobByte[whichKnob] = newByte;
    59b4:	64af      	str	r7, [r5, #72]	; 0x48
    59b6:	f7fe bf84 	b.w	48c2 <handleSPI+0x8a2>
    59ba:	646f      	str	r7, [r5, #68]	; 0x44
    59bc:	f7fe bf67 	b.w	488e <handleSPI+0x86e>
    59c0:	642f      	str	r7, [r5, #64]	; 0x40
    59c2:	f7fe bf4a 	b.w	485a <handleSPI+0x83a>
					prevKnobByte[i] = newByte;
    59c6:	61af      	str	r7, [r5, #24]
    59c8:	e5a5      	b.n	5516 <handleSPI+0x14f6>
					prevKnobByte[whichKnob] = newByte;
    59ca:	62af      	str	r7, [r5, #40]	; 0x28
    59cc:	f7fe bfe1 	b.w	4992 <handleSPI+0x972>
    59d0:	626f      	str	r7, [r5, #36]	; 0x24
    59d2:	f7fe bfc4 	b.w	495e <handleSPI+0x93e>
    59d6:	622f      	str	r7, [r5, #32]
    59d8:	f7fe bfa7 	b.w	492a <handleSPI+0x90a>
					prevKnobByte[i] = newByte;
    59dc:	62af      	str	r7, [r5, #40]	; 0x28
    59de:	e602      	b.n	55e6 <handleSPI+0x15c6>
    59e0:	626f      	str	r7, [r5, #36]	; 0x24
    59e2:	e5e6      	b.n	55b2 <handleSPI+0x1592>
    59e4:	622f      	str	r7, [r5, #32]
    59e6:	e5ca      	b.n	557e <handleSPI+0x155e>
					prevKnobByte[whichKnob] = newByte;
    59e8:	63ef      	str	r7, [r5, #60]	; 0x3c
    59ea:	f7fe bf1c 	b.w	4826 <handleSPI+0x806>
    59ee:	63af      	str	r7, [r5, #56]	; 0x38
    59f0:	f7fe beff 	b.w	47f2 <handleSPI+0x7d2>
    59f4:	636f      	str	r7, [r5, #52]	; 0x34
    59f6:	f7fe bee2 	b.w	47be <handleSPI+0x79e>
    59fa:	632f      	str	r7, [r5, #48]	; 0x30
    59fc:	f7fe bec5 	b.w	478a <handleSPI+0x76a>
				else if (mappingChangeType == Amount)
    5a00:	f1b8 0f01 	cmp.w	r8, #1
    5a04:	f000 8595 	beq.w	6532 <handleSPI+0x2512>
				else if (mappingChangeType == ScalarID)
    5a08:	f1b8 0f02 	cmp.w	r8, #2
    5a0c:	f47e accb 	bne.w	43a6 <handleSPI+0x386>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5a10:	f24d 677c 	movw	r7, #54908	; 0xd67c
    5a14:	0055      	lsls	r5, r2, #1
						if (scalar == 0xff)
    5a16:	2aff      	cmp	r2, #255	; 0xff
							if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET)))
    5a18:	f1a2 0c04 	sub.w	ip, r2, #4
    5a1c:	f2c2 0701 	movt	r7, #8193	; 0x2001
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5a20:	f1a2 0918 	sub.w	r9, r2, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5a24:	f1a2 0814 	sub.w	r8, r2, #20
    5a28:	9500      	str	r5, [sp, #0]
    5a2a:	783e      	ldrb	r6, [r7, #0]
						if (scalar == 0xff)
    5a2c:	f000 85be 	beq.w	65ac <handleSPI+0x258c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5a30:	254c      	movs	r5, #76	; 0x4c
    5a32:	f100 0e04 	add.w	lr, r0, #4
							if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET)))
    5a36:	f1bc 0f13 	cmp.w	ip, #19
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5a3a:	fb03 f505 	mul.w	r5, r3, r5
    5a3e:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
    5a42:	f64d 0e80 	movw	lr, #55424	; 0xd880
    5a46:	f2c2 0e01 	movt	lr, #8193	; 0x2001
    5a4a:	440d      	add	r5, r1
    5a4c:	eb0e 0ac2 	add.w	sl, lr, r2, lsl #3
    5a50:	f8c5 a004 	str.w	sl, [r5, #4]
							if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET)))
    5a54:	f200 85bd 	bhi.w	65d2 <handleSPI+0x25b2>
								knobTicked[scalar-MACRO_SOURCE_OFFSET] = 1;
    5a58:	f246 6510 	movw	r5, #26128	; 0x6610
    5a5c:	f04f 0a01 	mov.w	sl, #1
    5a60:	f2c2 0501 	movt	r5, #8193	; 0x2001
    5a64:	f845 a02c 	str.w	sl, [r5, ip, lsl #2]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5a68:	f1b8 0f03 	cmp.w	r8, #3
    5a6c:	f240 85cd 	bls.w	660a <handleSPI+0x25ea>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5a70:	2a02      	cmp	r2, #2
    5a72:	d807      	bhi.n	5a84 <handleSPI+0x1a64>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    5a74:	f24d 65a0 	movw	r5, #54944	; 0xd6a0
    5a78:	f04f 0a01 	mov.w	sl, #1
    5a7c:	f2c2 0501 	movt	r5, #8193	; 0x2001
    5a80:	f805 a002 	strb.w	sl, [r5, r2]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5a84:	0055      	lsls	r5, r2, #1
								noiseOn = 1;
    5a86:	2a03      	cmp	r2, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5a88:	f105 0501 	add.w	r5, r5, #1
								noiseOn = 1;
    5a8c:	bf08      	it	eq
    5a8e:	2601      	moveq	r6, #1
							if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET)))
    5a90:	f1bc 0f13 	cmp.w	ip, #19
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5a94:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    5a98:	f04f 0e4c 	mov.w	lr, #76	; 0x4c
    5a9c:	fb0e f303 	mul.w	r3, lr, r3
    5aa0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5aa4:	440b      	add	r3, r1
    5aa6:	629d      	str	r5, [r3, #40]	; 0x28
							if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET)))
    5aa8:	f200 85a2 	bhi.w	65f0 <handleSPI+0x25d0>
								knobTicked[scalar-MACRO_SOURCE_OFFSET] = 1;
    5aac:	f246 6310 	movw	r3, #26128	; 0x6610
    5ab0:	2101      	movs	r1, #1
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5ab2:	f1b8 0f03 	cmp.w	r8, #3
								knobTicked[scalar-MACRO_SOURCE_OFFSET] = 1;
    5ab6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5aba:	f843 102c 	str.w	r1, [r3, ip, lsl #2]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5abe:	d807      	bhi.n	5ad0 <handleSPI+0x1ab0>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5ac0:	f24d 3334 	movw	r3, #54068	; 0xd334
    5ac4:	2101      	movs	r1, #1
    5ac6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5aca:	4413      	add	r3, r2
    5acc:	f803 1c14 	strb.w	r1, [r3, #-20]
								noiseOn = 1;
    5ad0:	2a03      	cmp	r2, #3
    5ad2:	bf08      	it	eq
    5ad4:	2601      	moveq	r6, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5ad6:	703e      	strb	r6, [r7, #0]
    5ad8:	f7fe bc65 	b.w	43a6 <handleSPI+0x386>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    5adc:	f64d 73fe 	movw	r3, #57342	; 0xdffe
    5ae0:	f6cf 33ff 	movt	r3, #64511	; 0xfbff
    5ae4:	410b      	asrs	r3, r1
    5ae6:	f013 0301 	ands.w	r3, r3, #1
    5aea:	d132      	bne.n	5b52 <handleSPI+0x1b32>
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    5aec:	f64e 414f 	movw	r1, #60495	; 0xec4f
					if (params[whichParam].realVal[0]  > 0.5f)
    5af0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    5af4:	f6c4 61c4 	movt	r1, #20164	; 0x4ec4
    5af8:	fb81 0102 	smull	r0, r1, r1, r2
    5afc:	17d2      	asrs	r2, r2, #31
    5afe:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    5b02:	eba8 0105 	sub.w	r1, r8, r5
    5b06:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5b0a:	ed91 7a02 	vldr	s14, [r1, #8]
    5b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b16:	dd05      	ble.n	5b24 <handleSPI+0x1b04>
						oscOn[whichOsc] = 1;
    5b18:	f24d 61a0 	movw	r1, #54944	; 0xd6a0
    5b1c:	2301      	movs	r3, #1
    5b1e:	f2c2 0101 	movt	r1, #8193	; 0x2001
    5b22:	548b      	strb	r3, [r1, r2]
    5b24:	f249 3110 	movw	r1, #37648	; 0x9310
    5b28:	f2c2 0101 	movt	r1, #8193	; 0x2001
    5b2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    5b30:	e9d1 3200 	ldrd	r3, r2, [r1]
    5b34:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    5b36:	688a      	ldr	r2, [r1, #8]
    5b38:	441a      	add	r2, r3
    5b3a:	f640 03d4 	movw	r3, #2260	; 0x8d4
    5b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5b46:	681a      	ldr	r2, [r3, #0]
    5b48:	f640 03d0 	movw	r3, #2256	; 0x8d0
    5b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b50:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    5b52:	2d87      	cmp	r5, #135	; 0x87
    5b54:	d005      	beq.n	5b62 <handleSPI+0x1b42>
    5b56:	2d8c      	cmp	r5, #140	; 0x8c
    5b58:	d003      	beq.n	5b62 <handleSPI+0x1b42>
    5b5a:	2d91      	cmp	r5, #145	; 0x91
    5b5c:	d001      	beq.n	5b62 <handleSPI+0x1b42>
    5b5e:	2d96      	cmp	r5, #150	; 0x96
    5b60:	d171      	bne.n	5c46 <handleSPI+0x1c26>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5b62:	eba8 0305 	sub.w	r3, r8, r5
    5b66:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5b6a:	f246 6267 	movw	r2, #26215	; 0x6667
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5b6e:	f04f 0900 	mov.w	r9, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5b72:	eb06 0383 	add.w	r3, r6, r3, lsl #2
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5b76:	f2c6 6266 	movt	r2, #26214	; 0x6666
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5b7a:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5b7e:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5b82:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5b86:	fb82 1203 	smull	r1, r2, r2, r3
    5b8a:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5b8c:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    5b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5b94:	ebc3 0762 	rsb	r7, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    5b98:	ee17 0a90 	vmov	r0, s15
    5b9c:	4639      	mov	r1, r7
    5b9e:	f007 fd1f 	bl	d5e0 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5ba2:	f248 6240 	movw	r2, #34368	; 0x8640
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    5ba6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    5baa:	9402      	str	r4, [sp, #8]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5bac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    5bb0:	f2c2 0201 	movt	r2, #8193	; 0x2001
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    5bb4:	f103 0884 	add.w	r8, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    5bb8:	f103 0185 	add.w	r1, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    5bbc:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5bbe:	462c      	mov	r4, r5
    5bc0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5bc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5bc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5bcc:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5bd0:	eb06 0083 	add.w	r0, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5bd4:	eb02 0187 	add.w	r1, r2, r7, lsl #2
    5bd8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
    5bdc:	ea4f 0388 	mov.w	r3, r8, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5be0:	9001      	str	r0, [sp, #4]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5be2:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    5be6:	f103 0740 	add.w	r7, r3, #64	; 0x40
    5bea:	f8c8 2014 	str.w	r2, [r8, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    5bee:	684a      	ldr	r2, [r1, #4]
    5bf0:	4437      	add	r7, r6
    5bf2:	f8ca 2014 	str.w	r2, [sl, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    5bf6:	688a      	ldr	r2, [r1, #8]
    5bf8:	f103 0124 	add.w	r1, r3, #36	; 0x24
    5bfc:	6142      	str	r2, [r0, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5bfe:	f103 0208 	add.w	r2, r3, #8
    5c02:	1873      	adds	r3, r6, r1
    5c04:	4432      	add	r2, r6
    5c06:	9300      	str	r3, [sp, #0]
    5c08:	4615      	mov	r5, r2
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    5c0a:	ecb5 0a01 	vldmia	r5!, {s0}
    5c0e:	4649      	mov	r1, r9
    5c10:	f898 0018 	ldrb.w	r0, [r8, #24]
    5c14:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5c18:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    5c1a:	9b00      	ldr	r3, [sp, #0]
    5c1c:	4649      	mov	r1, r9
    5c1e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    5c22:	ecb3 0a01 	vldmia	r3!, {s0}
    5c26:	9300      	str	r3, [sp, #0]
    5c28:	f8da 3014 	ldr.w	r3, [sl, #20]
    5c2c:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    5c2e:	9a01      	ldr	r2, [sp, #4]
    5c30:	ecb7 0a01 	vldmia	r7!, {s0}
    5c34:	4649      	mov	r1, r9
    5c36:	6953      	ldr	r3, [r2, #20]
    5c38:	7e10      	ldrb	r0, [r2, #24]
    5c3a:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5c3c:	f1b9 0f00 	cmp.w	r9, #0
    5c40:	d01d      	beq.n	5c7e <handleSPI+0x1c5e>
    5c42:	4625      	mov	r5, r4
    5c44:	9c02      	ldr	r4, [sp, #8]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    5c46:	2d01      	cmp	r5, #1
    5c48:	f240 81fd 	bls.w	6046 <handleSPI+0x2026>
				if (whichParam == FXOrder)
    5c4c:	2d9a      	cmp	r5, #154	; 0x9a
    5c4e:	f040 821d 	bne.w	608c <handleSPI+0x206c>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    5c52:	f24a 321c 	movw	r2, #41756	; 0xa31c
    5c56:	f246 630d 	movw	r3, #26125	; 0x660d
    5c5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5c5e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    5c62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    5c66:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c72:	bfcc      	ite	gt
    5c74:	2201      	movgt	r2, #1
    5c76:	2200      	movle	r2, #0
    5c78:	701a      	strb	r2, [r3, #0]
    5c7a:	f7fe bb94 	b.w	43a6 <handleSPI+0x386>
    5c7e:	f04f 0901 	mov.w	r9, #1
    5c82:	e7c2      	b.n	5c0a <handleSPI+0x1bea>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5c84:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    5c88:	1c6a      	adds	r2, r5, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    5c8a:	10df      	asrs	r7, r3, #3
					param *FXAlias = &params[whichParam + 1];
    5c8c:	ebc2 09c2 	rsb	r9, r2, r2, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5c90:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    5c94:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
    5c98:	eb06 0989 	add.w	r9, r6, r9, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5c9c:	fef8 7a67 	vrinta.f32	s15, s15
    5ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5ca4:	edcd 7a00 	vstr	s15, [sp]
    5ca8:	f89d 0000 	ldrb.w	r0, [sp]
					if (effectType > FXLowpass)
    5cac:	280d      	cmp	r0, #13
    5cae:	d905      	bls.n	5cbc <handleSPI+0x1c9c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    5cb0:	f641 6381 	movw	r3, #7809	; 0x1e81
    5cb4:	f2c0 0300 	movt	r3, #0
    5cb8:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    5cbc:	4639      	mov	r1, r7
    5cbe:	9200      	str	r2, [sp, #0]
    5cc0:	f007 fc5a 	bl	d578 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    5cc4:	9a00      	ldr	r2, [sp, #0]
    5cc6:	f244 4090 	movw	r0, #17552	; 0x4490
    5cca:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    5cce:	ebaa 0202 	sub.w	r2, sl, r2
    5cd2:	f2c2 0001 	movt	r0, #8193	; 0x2001
    5cd6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    5cda:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    5cde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5ce2:	6153      	str	r3, [r2, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    5ce4:	684b      	ldr	r3, [r1, #4]
    5ce6:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    5cea:	688b      	ldr	r3, [r1, #8]
    5cec:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    5cf0:	68cb      	ldr	r3, [r1, #12]
    5cf2:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    5cf6:	690b      	ldr	r3, [r1, #16]
    5cf8:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
    5cfc:	e5b5      	b.n	586a <handleSPI+0x184a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5cfe:	f248 0381 	movw	r3, #32897	; 0x8081
    5d02:	ee07 7a90 	vmov	s15, r7
    5d06:	f245 204c 	movw	r0, #21068	; 0x524c
    5d0a:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5d0e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5d12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5d16:	ee07 3a90 	vmov	s15, r3
    5d1a:	ee20 0a27 	vmul.f32	s0, s0, s15
    5d1e:	f007 fa8b 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5d22:	616f      	str	r7, [r5, #20]
    5d24:	f7ff bbdd 	b.w	54e2 <handleSPI+0x14c2>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5d28:	f248 0381 	movw	r3, #32897	; 0x8081
    5d2c:	ee07 7a90 	vmov	s15, r7
    5d30:	f245 2048 	movw	r0, #21064	; 0x5248
    5d34:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5d38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5d3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5d40:	ee07 3a90 	vmov	s15, r3
    5d44:	ee20 0a27 	vmul.f32	s0, s0, s15
    5d48:	f007 fa76 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5d4c:	612f      	str	r7, [r5, #16]
    5d4e:	f7ff bbae 	b.w	54ae <handleSPI+0x148e>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5d52:	f248 0381 	movw	r3, #32897	; 0x8081
    5d56:	ee07 7a90 	vmov	s15, r7
    5d5a:	f245 206c 	movw	r0, #21100	; 0x526c
    5d5e:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5d62:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5d6a:	ee07 3a90 	vmov	s15, r3
    5d6e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5d72:	f007 fa61 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5d76:	636f      	str	r7, [r5, #52]	; 0x34
    5d78:	f7fe bd21 	b.w	47be <handleSPI+0x79e>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5d7c:	f248 0381 	movw	r3, #32897	; 0x8081
    5d80:	ee07 7a90 	vmov	s15, r7
    5d84:	f245 2068 	movw	r0, #21096	; 0x5268
    5d88:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5d8c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5d90:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5d94:	ee07 3a90 	vmov	s15, r3
    5d98:	ee20 0a27 	vmul.f32	s0, s0, s15
    5d9c:	f007 fa4c 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5da0:	632f      	str	r7, [r5, #48]	; 0x30
    5da2:	f7fe bcf2 	b.w	478a <handleSPI+0x76a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5da6:	f248 0381 	movw	r3, #32897	; 0x8081
    5daa:	ee07 7a90 	vmov	s15, r7
    5dae:	f245 203c 	movw	r0, #21052	; 0x523c
    5db2:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5db6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5dba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5dbe:	ee07 3a90 	vmov	s15, r3
    5dc2:	ee20 0a27 	vmul.f32	s0, s0, s15
    5dc6:	f007 fa37 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5dca:	606f      	str	r7, [r5, #4]
    5dcc:	f7ff bb21 	b.w	5412 <handleSPI+0x13f2>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5dd0:	f248 0381 	movw	r3, #32897	; 0x8081
    5dd4:	ee07 7a90 	vmov	s15, r7
    5dd8:	f245 2038 	movw	r0, #21048	; 0x5238
    5ddc:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5de0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5de8:	ee07 3a90 	vmov	s15, r3
    5dec:	ee20 0a27 	vmul.f32	s0, s0, s15
    5df0:	f007 fa22 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5df4:	602f      	str	r7, [r5, #0]
    5df6:	f7ff baf2 	b.w	53de <handleSPI+0x13be>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5dfa:	f248 0381 	movw	r3, #32897	; 0x8081
    5dfe:	ee07 7a90 	vmov	s15, r7
    5e02:	f245 2044 	movw	r0, #21060	; 0x5244
    5e06:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5e0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5e0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5e12:	ee07 3a90 	vmov	s15, r3
    5e16:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e1a:	f007 fa0d 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5e1e:	60ef      	str	r7, [r5, #12]
    5e20:	f7ff bb2b 	b.w	547a <handleSPI+0x145a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5e24:	f248 0381 	movw	r3, #32897	; 0x8081
    5e28:	ee07 7a90 	vmov	s15, r7
    5e2c:	f245 2040 	movw	r0, #21056	; 0x5240
    5e30:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5e34:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5e3c:	ee07 3a90 	vmov	s15, r3
    5e40:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e44:	f007 f9f8 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5e48:	60af      	str	r7, [r5, #8]
    5e4a:	f7ff bafc 	b.w	5446 <handleSPI+0x1426>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5e4e:	f248 0381 	movw	r3, #32897	; 0x8081
    5e52:	ee07 7a90 	vmov	s15, r7
    5e56:	f245 2058 	movw	r0, #21080	; 0x5258
    5e5a:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5e5e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5e62:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5e66:	ee07 3a90 	vmov	s15, r3
    5e6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e6e:	f007 f9e3 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5e72:	622f      	str	r7, [r5, #32]
    5e74:	f7fe bd59 	b.w	492a <handleSPI+0x90a>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5e78:	f248 0381 	movw	r3, #32897	; 0x8081
    5e7c:	ee07 7a90 	vmov	s15, r7
    5e80:	f245 2060 	movw	r0, #21088	; 0x5260
    5e84:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5e88:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5e90:	ee07 3a90 	vmov	s15, r3
    5e94:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e98:	f007 f9ce 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5e9c:	62af      	str	r7, [r5, #40]	; 0x28
    5e9e:	f7ff bba2 	b.w	55e6 <handleSPI+0x15c6>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5ea2:	f248 0381 	movw	r3, #32897	; 0x8081
    5ea6:	ee07 7a90 	vmov	s15, r7
    5eaa:	f245 2074 	movw	r0, #21108	; 0x5274
    5eae:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5eb2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5eb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5eba:	ee07 3a90 	vmov	s15, r3
    5ebe:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ec2:	f007 f9b9 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5ec6:	63ef      	str	r7, [r5, #60]	; 0x3c
    5ec8:	f7fe bcad 	b.w	4826 <handleSPI+0x806>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5ecc:	f248 0381 	movw	r3, #32897	; 0x8081
    5ed0:	ee07 7a90 	vmov	s15, r7
    5ed4:	f245 2070 	movw	r0, #21104	; 0x5270
    5ed8:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5edc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5ee4:	ee07 3a90 	vmov	s15, r3
    5ee8:	ee20 0a27 	vmul.f32	s0, s0, s15
    5eec:	f007 f9a4 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5ef0:	63af      	str	r7, [r5, #56]	; 0x38
    5ef2:	f7fe bc7e 	b.w	47f2 <handleSPI+0x7d2>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5ef6:	f248 0381 	movw	r3, #32897	; 0x8081
    5efa:	ee07 7a90 	vmov	s15, r7
    5efe:	f245 205c 	movw	r0, #21084	; 0x525c
    5f02:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5f06:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5f0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5f0e:	ee07 3a90 	vmov	s15, r3
    5f12:	ee20 0a27 	vmul.f32	s0, s0, s15
    5f16:	f007 f98f 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5f1a:	626f      	str	r7, [r5, #36]	; 0x24
    5f1c:	f7ff bb49 	b.w	55b2 <handleSPI+0x1592>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5f20:	f248 0381 	movw	r3, #32897	; 0x8081
    5f24:	ee07 7a90 	vmov	s15, r7
    5f28:	f245 2058 	movw	r0, #21080	; 0x5258
    5f2c:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5f30:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5f38:	ee07 3a90 	vmov	s15, r3
    5f3c:	ee20 0a27 	vmul.f32	s0, s0, s15
    5f40:	f007 f97a 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5f44:	622f      	str	r7, [r5, #32]
    5f46:	f7ff bb1a 	b.w	557e <handleSPI+0x155e>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5f4a:	f248 0381 	movw	r3, #32897	; 0x8081
    5f4e:	ee07 7a90 	vmov	s15, r7
    5f52:	f245 2078 	movw	r0, #21112	; 0x5278
    5f56:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5f5a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5f5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5f62:	ee07 3a90 	vmov	s15, r3
    5f66:	ee20 0a27 	vmul.f32	s0, s0, s15
    5f6a:	f007 f965 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5f6e:	642f      	str	r7, [r5, #64]	; 0x40
    5f70:	f7fe bc73 	b.w	485a <handleSPI+0x83a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5f74:	f248 0381 	movw	r3, #32897	; 0x8081
    5f78:	ee07 7a90 	vmov	s15, r7
    5f7c:	f245 2050 	movw	r0, #21072	; 0x5250
    5f80:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5f84:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5f88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5f8c:	ee07 3a90 	vmov	s15, r3
    5f90:	ee20 0a27 	vmul.f32	s0, s0, s15
    5f94:	f007 f950 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5f98:	61af      	str	r7, [r5, #24]
    5f9a:	f7ff babc 	b.w	5516 <handleSPI+0x14f6>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5f9e:	f248 0381 	movw	r3, #32897	; 0x8081
    5fa2:	ee07 7a90 	vmov	s15, r7
    5fa6:	f245 2060 	movw	r0, #21088	; 0x5260
    5faa:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5fae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5fb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5fb6:	ee07 3a90 	vmov	s15, r3
    5fba:	ee20 0a27 	vmul.f32	s0, s0, s15
    5fbe:	f007 f93b 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5fc2:	62af      	str	r7, [r5, #40]	; 0x28
    5fc4:	f7fe bce5 	b.w	4992 <handleSPI+0x972>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5fc8:	f248 0381 	movw	r3, #32897	; 0x8081
    5fcc:	ee07 7a90 	vmov	s15, r7
    5fd0:	f245 205c 	movw	r0, #21084	; 0x525c
    5fd4:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    5fd8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5fdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5fe0:	ee07 3a90 	vmov	s15, r3
    5fe4:	ee20 0a27 	vmul.f32	s0, s0, s15
    5fe8:	f007 f926 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5fec:	626f      	str	r7, [r5, #36]	; 0x24
    5fee:	f7fe bcb6 	b.w	495e <handleSPI+0x93e>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5ff2:	f248 0381 	movw	r3, #32897	; 0x8081
    5ff6:	ee07 7a90 	vmov	s15, r7
    5ffa:	f245 2080 	movw	r0, #21120	; 0x5280
    5ffe:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    6002:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    6006:	f2c2 0000 	movt	r0, #8192	; 0x2000
    600a:	ee07 3a90 	vmov	s15, r3
    600e:	ee20 0a27 	vmul.f32	s0, s0, s15
    6012:	f007 f911 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    6016:	64af      	str	r7, [r5, #72]	; 0x48
    6018:	f7fe bc53 	b.w	48c2 <handleSPI+0x8a2>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    601c:	f248 0381 	movw	r3, #32897	; 0x8081
    6020:	ee07 7a90 	vmov	s15, r7
    6024:	f245 207c 	movw	r0, #21116	; 0x527c
    6028:	f6c3 3380 	movt	r3, #15232	; 0x3b80
    602c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    6030:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6034:	ee07 3a90 	vmov	s15, r3
    6038:	ee20 0a27 	vmul.f32	s0, s0, s15
    603c:	f007 f8fc 	bl	d238 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    6040:	646f      	str	r7, [r5, #68]	; 0x44
    6042:	f7fe bc24 	b.w	488e <handleSPI+0x86e>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6046:	f44f 7201 	mov.w	r2, #516	; 0x204
    604a:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    604e:	ed96 6a02 	vldr	s12, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6052:	2300      	movs	r3, #0
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6054:	f6c3 4201 	movt	r2, #15361	; 0x3c01
    6058:	f249 3100 	movw	r1, #37632	; 0x9300
    605c:	ee36 6a67 	vsub.f32	s12, s12, s15
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6060:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6064:	ee06 2a90 	vmov	s13, r2
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6068:	f249 3204 	movw	r2, #37636	; 0x9304
    606c:	ee07 3a10 	vmov	s14, r3
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6070:	f2c2 0101 	movt	r1, #8193	; 0x2001
    6074:	eec6 5a86 	vdiv.f32	s11, s13, s12
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6078:	f2c2 0201 	movt	r2, #8193	; 0x2001
    607c:	ee67 7a87 	vmul.f32	s15, s15, s14
    6080:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6084:	edc1 5a00 	vstr	s11, [r1]
				if (whichParam == PedalControlsMaster)
    6088:	f7fe b98d 	b.w	43a6 <handleSPI+0x386>
    608c:	2d9b      	cmp	r5, #155	; 0x9b
    608e:	f47e a98a 	bne.w	43a6 <handleSPI+0x386>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    6092:	f24a 321c 	movw	r2, #41756	; 0xa31c
    6096:	f24a 432c 	movw	r3, #42028	; 0xa42c
    609a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    609e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    60a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    60a6:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    60aa:	e5de      	b.n	5c6a <handleSPI+0x1c4a>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    60ac:	2d60      	cmp	r5, #96	; 0x60
    60ae:	d002      	beq.n	60b6 <handleSPI+0x2096>
    60b0:	2d66      	cmp	r5, #102	; 0x66
    60b2:	f47f ad4e 	bne.w	5b52 <handleSPI+0x1b32>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    60b6:	eba8 0305 	sub.w	r3, r8, r5
    60ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    60be:	f1a5 0260 	sub.w	r2, r5, #96	; 0x60
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    60c2:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    60c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    60ca:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    60ce:	f64a 23ab 	movw	r3, #43691	; 0xaaab
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    60d2:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    60d6:	f6c2 23aa 	movt	r3, #10922	; 0x2aaa
    60da:	fb83 1302 	smull	r1, r3, r3, r2
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    60de:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    60e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    60e6:	eba3 71e2 	sub.w	r1, r3, r2, asr #31
					setFilterTypes(filterType, whichFilter);
    60ea:	ee17 0a90 	vmov	r0, s15
    60ee:	f007 fafb 	bl	d6e8 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    60f2:	f246 42e4 	movw	r2, #25828	; 0x64e4
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    60f6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    60fa:	f2c2 0201 	movt	r2, #8193	; 0x2001
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    60fe:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    6100:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6104:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    6108:	f103 0763 	add.w	r7, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    610c:	3362      	adds	r3, #98	; 0x62
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    610e:	6840      	ldr	r0, [r0, #4]
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6110:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    6114:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6118:	00ba      	lsls	r2, r7, #2
    611a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    611e:	f102 0a08 	add.w	sl, r2, #8
    6122:	3a14      	subs	r2, #20
    6124:	6179      	str	r1, [r7, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    6126:	eb06 0183 	add.w	r1, r6, r3, lsl #2
    612a:	009b      	lsls	r3, r3, #2
    612c:	44b2      	add	sl, r6
    612e:	6148      	str	r0, [r1, #20]
    6130:	9301      	str	r3, [sp, #4]
    6132:	18b3      	adds	r3, r6, r2
    6134:	9300      	str	r3, [sp, #0]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    6136:	ecba 0a01 	vldmia	sl!, {s0}
    613a:	4649      	mov	r1, r9
    613c:	7e38      	ldrb	r0, [r7, #24]
    613e:	697b      	ldr	r3, [r7, #20]
    6140:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    6142:	9b01      	ldr	r3, [sp, #4]
    6144:	4649      	mov	r1, r9
    6146:	18f2      	adds	r2, r6, r3
    6148:	9b00      	ldr	r3, [sp, #0]
    614a:	ecb3 0a01 	vldmia	r3!, {s0}
    614e:	7e10      	ldrb	r0, [r2, #24]
    6150:	9300      	str	r3, [sp, #0]
    6152:	6953      	ldr	r3, [r2, #20]
    6154:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6156:	f1b9 0f00 	cmp.w	r9, #0
    615a:	f47f acfa 	bne.w	5b52 <handleSPI+0x1b32>
    615e:	f04f 0901 	mov.w	r9, #1
    6162:	e7e8      	b.n	6136 <handleSPI+0x2116>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6164:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6168:	edd9 7a02 	vldr	s15, [r9, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    616c:	f64e 424f 	movw	r2, #60495	; 0xec4f
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6170:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6174:	f6c4 62c4 	movt	r2, #20164	; 0x4ec4
    6178:	fb82 1203 	smull	r1, r2, r2, r3
    617c:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    617e:	fef8 7a67 	vrinta.f32	s15, s15
    6182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6186:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    618a:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    618e:	2a05      	cmp	r2, #5
    6190:	f63f ab8f 	bhi.w	58b2 <handleSPI+0x1892>
    6194:	e8df f002 	tbb	[pc, r2]
    6198:	1b27333f 	.word	0x1b27333f
    619c:	030f      	.short	0x030f
			  shapeTick[i] = &triTick;
    619e:	f64d 0244 	movw	r2, #55364	; 0xd844
    61a2:	f648 71c1 	movw	r1, #36801	; 0x8fc1
    61a6:	f2c2 0201 	movt	r2, #8193	; 0x2001
    61aa:	f2c0 0100 	movt	r1, #0
    61ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    61b2:	f7ff bb7e 	b.w	58b2 <handleSPI+0x1892>
			  shapeTick[i] = &sineTick;
    61b6:	f64d 0244 	movw	r2, #55364	; 0xd844
    61ba:	f648 7181 	movw	r1, #36737	; 0x8f81
    61be:	f2c2 0201 	movt	r2, #8193	; 0x2001
    61c2:	f2c0 0100 	movt	r1, #0
    61c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    61ca:	f7ff bb72 	b.w	58b2 <handleSPI+0x1892>
			  shapeTick[i] = &pulseTick;
    61ce:	f64d 0244 	movw	r2, #55364	; 0xd844
    61d2:	f648 7121 	movw	r1, #36641	; 0x8f21
    61d6:	f2c2 0201 	movt	r2, #8193	; 0x2001
    61da:	f2c0 0100 	movt	r1, #0
    61de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    61e2:	f7ff bb66 	b.w	58b2 <handleSPI+0x1892>
			  shapeTick[i] = &sawTick;
    61e6:	f64d 0244 	movw	r2, #55364	; 0xd844
    61ea:	f648 61e1 	movw	r1, #36577	; 0x8ee1
    61ee:	f2c2 0201 	movt	r2, #8193	; 0x2001
    61f2:	f2c0 0100 	movt	r1, #0
    61f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    61fa:	f7ff bb5a 	b.w	58b2 <handleSPI+0x1892>
			  shapeTick[i] = &sineTriTick;
    61fe:	f64d 0244 	movw	r2, #55364	; 0xd844
    6202:	f648 6181 	movw	r1, #36481	; 0x8e81
    6206:	f2c2 0201 	movt	r2, #8193	; 0x2001
    620a:	f2c0 0100 	movt	r1, #0
    620e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6212:	f7ff bb4e 	b.w	58b2 <handleSPI+0x1892>
			  shapeTick[i] = &sawSquareTick;
    6216:	f64d 0244 	movw	r2, #55364	; 0xd844
    621a:	f648 6121 	movw	r1, #36385	; 0x8e21
    621e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    6222:	f2c0 0100 	movt	r1, #0
    6226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    622a:	f7ff bb42 	b.w	58b2 <handleSPI+0x1892>
					bufferPos = 138;//first byte after name
    622e:	208a      	movs	r0, #138	; 0x8a
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6230:	f04f 458f 	mov.w	r5, #1199570944	; 0x47800000
					bufferPos = 138;//first byte after name
    6234:	8008      	strh	r0, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6236:	ee07 5a90 	vmov	s15, r5
						buffer[bufferPos] = integerVersion >> 8;
    623a:	f8b1 9000 	ldrh.w	r9, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    623e:	f8b1 e000 	ldrh.w	lr, [r1]
						bufferPos = bufferPos + 2;
    6242:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6244:	fa1f f989 	uxth.w	r9, r9
						buffer[bufferPos+1] = integerVersion & 255;
    6248:	fa13 fe8e 	uxtah	lr, r3, lr
						bufferPos = bufferPos + 2;
    624c:	3002      	adds	r0, #2
    624e:	b280      	uxth	r0, r0
    6250:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6252:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    6256:	880f      	ldrh	r7, [r1, #0]
						bufferPos = bufferPos + 2;
    6258:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    625a:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    625e:	fa13 f787 	uxtah	r7, r3, r7
						bufferPos = bufferPos + 2;
    6262:	3002      	adds	r0, #2
    6264:	b280      	uxth	r0, r0
    6266:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6268:	880e      	ldrh	r6, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    626a:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    626c:	b2b6      	uxth	r6, r6
						buffer[bufferPos+1] = integerVersion & 255;
    626e:	fa13 f080 	uxtah	r0, r3, r0
    6272:	9004      	str	r0, [sp, #16]
						bufferPos = bufferPos + 2;
    6274:	8808      	ldrh	r0, [r1, #0]
    6276:	3002      	adds	r0, #2
    6278:	b280      	uxth	r0, r0
    627a:	8008      	strh	r0, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    627c:	f245 10e8 	movw	r0, #20968	; 0x51e8
						buffer[bufferPos] = integerVersion >> 8;
    6280:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6282:	f2c2 0000 	movt	r0, #8192	; 0x2000
						buffer[bufferPos] = integerVersion >> 8;
    6286:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6288:	ed90 5a00 	vldr	s10, [r0]
    628c:	edd0 5a01 	vldr	s11, [r0, #4]
    6290:	ee25 5a27 	vmul.f32	s10, s10, s15
    6294:	ed90 6a02 	vldr	s12, [r0, #8]
    6298:	edd0 6a03 	vldr	s13, [r0, #12]
    629c:	ee65 5aa7 	vmul.f32	s11, s11, s15
    62a0:	ed90 7a04 	vldr	s14, [r0, #16]
    62a4:	ee26 6a27 	vmul.f32	s12, s12, s15
						buffer[bufferPos] = integerVersion >> 8;
    62a8:	9501      	str	r5, [sp, #4]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62aa:	eebc 5ac5 	vcvt.u32.f32	s10, s10
						buffer[bufferPos+1] = integerVersion & 255;
    62ae:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    62b4:	ee27 7a27 	vmul.f32	s14, s14, s15
    62b8:	9000      	str	r0, [sp, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    62ba:	fa13 f085 	uxtah	r0, r3, r5
						bufferPos = bufferPos + 2;
    62be:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62c0:	ee15 aa10 	vmov	sl, s10
    62c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
						bufferPos = bufferPos + 2;
    62c8:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62ca:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    62ce:	eefc 6ae6 	vcvt.u32.f32	s13, s13
						buffer[bufferPos] = integerVersion >> 8;
    62d2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						bufferPos = bufferPos + 2;
    62da:	b2ad      	uxth	r5, r5
						buffer[bufferPos+1] = integerVersion & 255;
    62dc:	9006      	str	r0, [sp, #24]
						buffer[bufferPos] = integerVersion >> 8;
    62de:	ee15 0a10 	vmov	r0, s10
						bufferPos = bufferPos + 2;
    62e2:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    62e4:	f803 a009 	strb.w	sl, [r3, r9]
    62e8:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62ea:	edcd 5a02 	vstr	s11, [sp, #8]
    62ee:	ed8d 6a03 	vstr	s12, [sp, #12]
						buffer[bufferPos] = integerVersion >> 8;
    62f2:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    62f4:	edcd 6a05 	vstr	s13, [sp, #20]
    62f8:	ed8d 7a07 	vstr	s14, [sp, #28]
						buffer[bufferPos+1] = integerVersion & 255;
    62fc:	f88e 0001 	strb.w	r0, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    6300:	ee15 0a90 	vmov	r0, s11
    6304:	f3c0 2e07 	ubfx	lr, r0, #8, #8
    6308:	f803 e00c 	strb.w	lr, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    630c:	7078      	strb	r0, [r7, #1]
						buffer[bufferPos] = integerVersion >> 8;
    630e:	ee16 0a10 	vmov	r0, s12
    6312:	f3c0 2707 	ubfx	r7, r0, #8, #8
    6316:	559f      	strb	r7, [r3, r6]
						buffer[bufferPos+1] = integerVersion & 255;
    6318:	9e04      	ldr	r6, [sp, #16]
						buffer[bufferPos] = integerVersion >> 8;
    631a:	9f01      	ldr	r7, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    631c:	7070      	strb	r0, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    631e:	ee16 0a90 	vmov	r0, s13
    6322:	f3c0 2607 	ubfx	r6, r0, #8, #8
    6326:	55de      	strb	r6, [r3, r7]
						buffer[bufferPos+1] = integerVersion & 255;
    6328:	9e06      	ldr	r6, [sp, #24]
    632a:	7070      	strb	r0, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    632c:	ee17 0a10 	vmov	r0, s14
    6330:	f3c0 2607 	ubfx	r6, r0, #8, #8
    6334:	555e      	strb	r6, [r3, r5]
						buffer[bufferPos+1] = integerVersion & 255;
    6336:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6338:	9e00      	ldr	r6, [sp, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    633a:	fa13 f585 	uxtah	r5, r3, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    633e:	edd6 5a05 	vldr	s11, [r6, #20]
						buffer[bufferPos+1] = integerVersion & 255;
    6342:	7068      	strb	r0, [r5, #1]
						bufferPos = bufferPos + 2;
    6344:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6346:	ee65 5aa7 	vmul.f32	s11, s11, s15
    634a:	ed96 6a06 	vldr	s12, [r6, #24]
						bufferPos = bufferPos + 2;
    634e:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6350:	edd6 6a07 	vldr	s13, [r6, #28]
    6354:	ed96 7a08 	vldr	s14, [r6, #32]
    6358:	eefc 5ae5 	vcvt.u32.f32	s11, s11
						bufferPos = bufferPos + 2;
    635c:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    635e:	ee26 6a27 	vmul.f32	s12, s12, s15
    6362:	ee66 6aa7 	vmul.f32	s13, s13, s15
						bufferPos = bufferPos + 2;
    6366:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6368:	ee15 aa90 	vmov	sl, s11
						buffer[bufferPos] = integerVersion >> 8;
    636c:	f8b1 9000 	ldrh.w	r9, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6370:	eebc 6ac6 	vcvt.u32.f32	s12, s12
						buffer[bufferPos+1] = integerVersion & 255;
    6374:	f8b1 e000 	ldrh.w	lr, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    6378:	f3ca 2a07 	ubfx	sl, sl, #8, #8
						bufferPos = bufferPos + 2;
    637c:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    637e:	fa1f f989 	uxth.w	r9, r9
						buffer[bufferPos+1] = integerVersion & 255;
    6382:	fa13 fe8e 	uxtah	lr, r3, lr
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6386:	eefc 6ae6 	vcvt.u32.f32	s13, s13
						bufferPos = bufferPos + 2;
    638a:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    638c:	ee27 7a27 	vmul.f32	s14, s14, s15
						bufferPos = bufferPos + 2;
    6390:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6392:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						bufferPos = bufferPos + 2;
    6396:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6398:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    639c:	880f      	ldrh	r7, [r1, #0]
						bufferPos = bufferPos + 2;
    639e:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    63a0:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    63a4:	fa13 f787 	uxtah	r7, r3, r7
						bufferPos = bufferPos + 2;
    63a8:	3502      	adds	r5, #2
    63aa:	b2ad      	uxth	r5, r5
    63ac:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    63ae:	880e      	ldrh	r6, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    63b0:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    63b2:	b2b6      	uxth	r6, r6
						buffer[bufferPos+1] = integerVersion & 255;
    63b4:	fa13 f085 	uxtah	r0, r3, r5
						bufferPos = bufferPos + 2;
    63b8:	880d      	ldrh	r5, [r1, #0]
    63ba:	3502      	adds	r5, #2
						buffer[bufferPos+1] = integerVersion & 255;
    63bc:	9004      	str	r0, [sp, #16]
						bufferPos = bufferPos + 2;
    63be:	b2ad      	uxth	r5, r5
    63c0:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    63c2:	880d      	ldrh	r5, [r1, #0]
    63c4:	f803 a009 	strb.w	sl, [r3, r9]
    63c8:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    63ca:	ed8d 6a02 	vstr	s12, [sp, #8]
    63ce:	edcd 6a03 	vstr	s13, [sp, #12]
						buffer[bufferPos] = integerVersion >> 8;
    63d2:	9501      	str	r5, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    63d4:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    63d6:	ed8d 7a05 	vstr	s14, [sp, #20]
						buffer[bufferPos+1] = integerVersion & 255;
    63da:	fa13 f085 	uxtah	r0, r3, r5
						bufferPos = bufferPos + 2;
    63de:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    63e0:	9006      	str	r0, [sp, #24]
						buffer[bufferPos] = integerVersion >> 8;
    63e2:	ee15 0a90 	vmov	r0, s11
						bufferPos = bufferPos + 2;
    63e6:	3502      	adds	r5, #2
						buffer[bufferPos+1] = integerVersion & 255;
    63e8:	f88e 0001 	strb.w	r0, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    63ec:	ee16 0a10 	vmov	r0, s12
						bufferPos = bufferPos + 2;
    63f0:	b2ad      	uxth	r5, r5
						buffer[bufferPos] = integerVersion >> 8;
    63f2:	f3c0 2e07 	ubfx	lr, r0, #8, #8
						bufferPos = bufferPos + 2;
    63f6:	800d      	strh	r5, [r1, #0]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    63f8:	f244 454c 	movw	r5, #17484	; 0x444c
						buffer[bufferPos] = integerVersion >> 8;
    63fc:	f803 e00c 	strb.w	lr, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    6400:	7078      	strb	r0, [r7, #1]
						buffer[bufferPos] = integerVersion >> 8;
    6402:	ee16 0a90 	vmov	r0, s13
    6406:	f8b1 e000 	ldrh.w	lr, [r1]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    640a:	f2c2 0501 	movt	r5, #8193	; 0x2001
						buffer[bufferPos] = integerVersion >> 8;
    640e:	f3c0 2707 	ubfx	r7, r0, #8, #8
						buffer[bufferPos+1] = integerVersion & 255;
    6412:	f8b1 c000 	ldrh.w	ip, [r1]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    6416:	f8d5 a000 	ldr.w	sl, [r5]
						buffer[bufferPos] = integerVersion >> 8;
    641a:	fa1f fe8e 	uxth.w	lr, lr
    641e:	559f      	strb	r7, [r3, r6]
						buffer[bufferPos+1] = integerVersion & 255;
    6420:	fa13 fc8c 	uxtah	ip, r3, ip
    6424:	9e04      	ldr	r6, [sp, #16]
						buffer[bufferPos] = integerVersion >> 8;
    6426:	9f01      	ldr	r7, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    6428:	7070      	strb	r0, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    642a:	ee17 0a10 	vmov	r0, s14
    642e:	f3c0 2607 	ubfx	r6, r0, #8, #8
    6432:	55de      	strb	r6, [r3, r7]
						buffer[bufferPos+1] = integerVersion & 255;
    6434:	9e06      	ldr	r6, [sp, #24]
    6436:	7070      	strb	r0, [r6, #1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6438:	9800      	ldr	r0, [sp, #0]
    643a:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    643e:	ed90 6a09 	vldr	s12, [r0, #36]	; 0x24
    6442:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
						bufferPos = bufferPos + 2;
    6446:	8808      	ldrh	r0, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6448:	ee26 6a27 	vmul.f32	s12, s12, s15
    644c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						bufferPos = bufferPos + 2;
    6450:	3002      	adds	r0, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6452:	ee67 7a27 	vmul.f32	s15, s14, s15
    6456:	eebc 7ac6 	vcvt.u32.f32	s14, s12
						bufferPos = bufferPos + 2;
    645a:	b280      	uxth	r0, r0
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    645c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    6460:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6462:	880f      	ldrh	r7, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    6464:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    6466:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6468:	b2bf      	uxth	r7, r7
						buffer[bufferPos+1] = integerVersion & 255;
    646a:	fa13 f686 	uxtah	r6, r3, r6
						bufferPos = bufferPos + 2;
    646e:	3002      	adds	r0, #2
    6470:	b280      	uxth	r0, r0
    6472:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    6474:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    6476:	8808      	ldrh	r0, [r1, #0]
						bufferPos = bufferPos + 2;
    6478:	f8b1 9000 	ldrh.w	r9, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    647c:	b2ad      	uxth	r5, r5
						buffer[bufferPos+1] = integerVersion & 255;
    647e:	fa13 f080 	uxtah	r0, r3, r0
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6482:	edcd 7a01 	vstr	s15, [sp, #4]
						bufferPos = bufferPos + 2;
    6486:	f109 0902 	add.w	r9, r9, #2
    648a:	fa1f f989 	uxth.w	r9, r9
    648e:	f8a1 9000 	strh.w	r9, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    6492:	ee17 1a10 	vmov	r1, s14
					 presetNumberToLoad = presetNumberToSave;
    6496:	f898 9000 	ldrb.w	r9, [r8]
    649a:	f24a 486a 	movw	r8, #42090	; 0xa46a
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    649e:	eebc 7ae6 	vcvt.u32.f32	s14, s13
					 presetNumberToLoad = presetNumberToSave;
    64a2:	f2c2 0801 	movt	r8, #8193	; 0x2001
    64a6:	fa5f f989 	uxtb.w	r9, r9
    64aa:	f888 9000 	strb.w	r9, [r8]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    64ae:	f24a 4870 	movw	r8, #42096	; 0xa470
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    64b2:	ed8d 7a00 	vstr	s14, [sp]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    64b6:	f2c2 0801 	movt	r8, #8193	; 0x2001
    64ba:	f8c8 a000 	str.w	sl, [r8]
					 presetWaitingToWrite = currentPresetSize;
    64be:	f24a 4874 	movw	r8, #42100	; 0xa474
    64c2:	f2c2 0801 	movt	r8, #8193	; 0x2001
    64c6:	f8c8 a000 	str.w	sl, [r8]
						buffer[bufferPos] = integerVersion >> 8;
    64ca:	f3c1 2807 	ubfx	r8, r1, #8, #8
    64ce:	f803 800e 	strb.w	r8, [r3, lr]
						buffer[bufferPos+1] = integerVersion & 255;
    64d2:	f88c 1001 	strb.w	r1, [ip, #1]
						buffer[bufferPos] = integerVersion >> 8;
    64d6:	ee17 1a10 	vmov	r1, s14
    64da:	f3c1 2107 	ubfx	r1, r1, #8, #8
    64de:	55d9      	strb	r1, [r3, r7]
						buffer[bufferPos+1] = integerVersion & 255;
    64e0:	ee17 1a10 	vmov	r1, s14
    64e4:	7071      	strb	r1, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    64e6:	ee17 6a90 	vmov	r6, s15
    64ea:	f3c6 2107 	ubfx	r1, r6, #8, #8
    64ee:	5559      	strb	r1, [r3, r5]
						buffer[bufferPos+1] = integerVersion & 255;
    64f0:	7046      	strb	r6, [r0, #1]
					 presetWaitingToWrite = currentPresetSize;
    64f2:	f243 3080 	movw	r0, #13184	; 0x3380
    64f6:	f2c3 0004 	movt	r0, #12292	; 0x3004
    64fa:	f7fd bf62 	b.w	43c2 <handleSPI+0x3a2>
						audioOutBuffer[i] = 0;
    64fe:	2200      	movs	r2, #0
    6500:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    6504:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    6508:	3308      	adds	r3, #8
    650a:	4299      	cmp	r1, r3
    650c:	d1fa      	bne.n	6504 <handleSPI+0x24e4>
    650e:	f7fe bf13 	b.w	5338 <handleSPI+0x1318>
    6512:	f88c 8020 	strb.w	r8, [ip, #32]
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6516:	f1a2 0518 	sub.w	r5, r2, #24
    651a:	2d03      	cmp	r5, #3
    651c:	d820      	bhi.n	6560 <handleSPI+0x2540>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    651e:	f24d 4538 	movw	r5, #54328	; 0xd438
    6522:	2601      	movs	r6, #1
    6524:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6528:	4415      	add	r5, r2
    652a:	f805 6c18 	strb.w	r6, [r5, #-24]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    652e:	f7ff b92d 	b.w	578c <handleSPI+0x176c>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    6532:	ee07 2a90 	vmov	s15, r2
    6536:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    653a:	f2c3 72ff 	movt	r2, #14335	; 0x37ff
    653e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6542:	ee07 2a90 	vmov	s15, r2
    6546:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    654a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    654e:	ee67 7a27 	vmul.f32	s15, s14, s15
    6552:	4403      	add	r3, r0
    6554:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6558:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    655c:	f7fd bf23 	b.w	43a6 <handleSPI+0x386>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    6560:	2a02      	cmp	r2, #2
    6562:	f63f a913 	bhi.w	578c <handleSPI+0x176c>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    6566:	f24d 65a0 	movw	r5, #54944	; 0xd6a0
    656a:	2601      	movs	r6, #1
    656c:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6570:	54ae      	strb	r6, [r5, r2]
    6572:	f7ff b90b 	b.w	578c <handleSPI+0x176c>
							mappings[whichMapping].destNumber = 255;
    6576:	554a      	strb	r2, [r1, r5]
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6578:	4645      	mov	r5, r8
						mappings[whichMapping].hookActive[whichSlot] = 0;
    657a:	f88c 8048 	strb.w	r8, [ip, #72]	; 0x48
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    657e:	6873      	ldr	r3, [r6, #4]
    6580:	eb03 0785 	add.w	r7, r3, r5, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    6584:	691b      	ldr	r3, [r3, #16]
    6586:	ed97 0a00 	vldr	s0, [r7]
    658a:	4798      	blx	r3
    658c:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    6590:	6873      	ldr	r3, [r6, #4]
    6592:	4629      	mov	r1, r5
    6594:	eb03 0785 	add.w	r7, r3, r5, lsl #2
    6598:	695a      	ldr	r2, [r3, #20]
    659a:	7e18      	ldrb	r0, [r3, #24]
    659c:	ed97 0a02 	vldr	s0, [r7, #8]
    65a0:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    65a2:	2d00      	cmp	r5, #0
    65a4:	f47d aeff 	bne.w	43a6 <handleSPI+0x386>
    65a8:	2501      	movs	r5, #1
    65aa:	e7e8      	b.n	657e <handleSPI+0x255e>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    65ac:	224c      	movs	r2, #76	; 0x4c
    65ae:	703e      	strb	r6, [r7, #0]
    65b0:	fb02 f303 	mul.w	r3, r2, r3
    65b4:	1d02      	adds	r2, r0, #4
    65b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    65ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    65be:	f240 62a8 	movw	r2, #1704	; 0x6a8
    65c2:	4408      	add	r0, r1
    65c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    65c8:	440b      	add	r3, r1
    65ca:	6282      	str	r2, [r0, #40]	; 0x28
    65cc:	605a      	str	r2, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    65ce:	f7fd beea 	b.w	43a6 <handleSPI+0x386>
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    65d2:	f1b9 0f03 	cmp.w	r9, #3
    65d6:	f63f aa47 	bhi.w	5a68 <handleSPI+0x1a48>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    65da:	f24d 4538 	movw	r5, #54328	; 0xd438
    65de:	f04f 0a01 	mov.w	sl, #1
    65e2:	f2c2 0501 	movt	r5, #8193	; 0x2001
    65e6:	4415      	add	r5, r2
    65e8:	f805 ac18 	strb.w	sl, [r5, #-24]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    65ec:	f7ff ba4a 	b.w	5a84 <handleSPI+0x1a64>
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    65f0:	f1b9 0f03 	cmp.w	r9, #3
    65f4:	d814      	bhi.n	6620 <handleSPI+0x2600>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    65f6:	f24d 4338 	movw	r3, #54328	; 0xd438
    65fa:	2101      	movs	r1, #1
    65fc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6600:	4413      	add	r3, r2
    6602:	f803 1c18 	strb.w	r1, [r3, #-24]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6606:	f7ff ba63 	b.w	5ad0 <handleSPI+0x1ab0>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    660a:	f24d 3534 	movw	r5, #54068	; 0xd334
    660e:	f04f 0a01 	mov.w	sl, #1
    6612:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6616:	4415      	add	r5, r2
    6618:	f805 ac14 	strb.w	sl, [r5, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    661c:	f7ff ba32 	b.w	5a84 <handleSPI+0x1a64>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6620:	f1b8 0f03 	cmp.w	r8, #3
    6624:	f67f aa4c 	bls.w	5ac0 <handleSPI+0x1aa0>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    6628:	2a02      	cmp	r2, #2
    662a:	f63f aa51 	bhi.w	5ad0 <handleSPI+0x1ab0>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    662e:	f24d 63a0 	movw	r3, #54944	; 0xd6a0
    6632:	2101      	movs	r1, #1
    6634:	f2c2 0301 	movt	r3, #8193	; 0x2001
    6638:	5499      	strb	r1, [r3, r2]
    663a:	f7ff ba49 	b.w	5ad0 <handleSPI+0x1ab0>
    663e:	bf00      	nop

00006640 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    6640:	f24a 4370 	movw	r3, #42096	; 0xa470
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    6644:	f242 3180 	movw	r1, #9088	; 0x2380
    6648:	f244 3088 	movw	r0, #17288	; 0x4388
	presetWaitingToParse = 4096;
    664c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6650:	f2c2 0301 	movt	r3, #8193	; 0x2001
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    6654:	f2c3 0104 	movt	r1, #12292	; 0x3004
    6658:	f2c2 0001 	movt	r0, #8193	; 0x2001
	presetWaitingToParse = 4096;
    665c:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    665e:	f006 becf 	b.w	d400 <__HAL_I2C_Slave_Receive_IT_veneer>
    6662:	bf00      	nop
    6664:	f3af 8000 	nop.w
    6668:	f3af 8000 	nop.w
    666c:	f3af 8000 	nop.w
    6670:	f3af 8000 	nop.w
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    6680:	f246 630e 	movw	r3, #26126	; 0x660e
    6684:	2200      	movs	r2, #0
    6686:	f2c2 0301 	movt	r3, #8193	; 0x2001
    668a:	701a      	strb	r2, [r3, #0]
}
    668c:	4770      	bx	lr
    668e:	bf00      	nop
    6690:	f3af 8000 	nop.w
    6694:	f3af 8000 	nop.w
    6698:	f3af 8000 	nop.w
    669c:	f3af 8000 	nop.w

000066a0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    66a0:	f246 630e 	movw	r3, #26126	; 0x660e
	I2CErrors++;
    66a4:	f244 4230 	movw	r2, #17456	; 0x4430
	i2cSending = 0;
    66a8:	2000      	movs	r0, #0
	receivingI2C = 0;
    66aa:	f64a 01c8 	movw	r1, #43208	; 0xa8c8
	I2CErrors++;
    66ae:	f2c2 0201 	movt	r2, #8193	; 0x2001
	i2cSending = 0;
    66b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
	receivingI2C = 0;
    66b6:	f2c2 0101 	movt	r1, #8193	; 0x2001
	i2cSending = 0;
    66ba:	7018      	strb	r0, [r3, #0]
	I2CErrors++;
    66bc:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    66be:	7008      	strb	r0, [r1, #0]
	I2CErrors++;
    66c0:	3301      	adds	r3, #1
    66c2:	b2db      	uxtb	r3, r3
    66c4:	7013      	strb	r3, [r2, #0]
}
    66c6:	4770      	bx	lr
    66c8:	f3af 8000 	nop.w
    66cc:	f3af 8000 	nop.w
    66d0:	f3af 8000 	nop.w
    66d4:	f3af 8000 	nop.w
    66d8:	f3af 8000 	nop.w
    66dc:	f3af 8000 	nop.w

000066e0 <HAL_SPI_TxRxCpltCallback>:
{
    66e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi6)
    66e2:	f64c 74a8 	movw	r4, #53160	; 0xcfa8
	interrupted = 1;
    66e6:	f245 13d0 	movw	r3, #20944	; 0x51d0
    66ea:	2201      	movs	r2, #1
	if (hspi == &hspi6)
    66ec:	f2c2 0401 	movt	r4, #8193	; 0x2001
	interrupted = 1;
    66f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
	if (hspi == &hspi6)
    66f4:	4284      	cmp	r4, r0
	interrupted = 1;
    66f6:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    66f8:	d060      	beq.n	67bc <HAL_SPI_TxRxCpltCallback+0xdc>
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    66fa:	f640 0400 	movw	r4, #2048	; 0x800
    66fe:	f2c3 0400 	movt	r4, #12288	; 0x3000
  __ASM volatile ("dsb 0xF":::"memory");
    6702:	f3bf 8f4f 	dsb	sy
    6706:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    670a:	f104 0720 	add.w	r7, r4, #32
    670e:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6712:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6716:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    671a:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    671e:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    6722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6726:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    672a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    672e:	2bfe      	cmp	r3, #254	; 0xfe
    6730:	d104      	bne.n	673c <HAL_SPI_TxRxCpltCallback+0x5c>
    6732:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    6736:	2bfd      	cmp	r3, #253	; 0xfd
    6738:	f000 8174 	beq.w	6a24 <HAL_SPI_TxRxCpltCallback+0x344>
			HAL_SPI_Abort(&hspi1);
    673c:	f64c 7508 	movw	r5, #53000	; 0xcf08
    6740:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6744:	4628      	mov	r0, r5
    6746:	f006 fd4b 	bl	d1e0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    674a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    674e:	f6c5 0302 	movt	r3, #22530	; 0x5802
    6752:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6756:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    675a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    675e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    6766:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    676a:	f006 ff4d 	bl	d608 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    676e:	6829      	ldr	r1, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6770:	f640 0200 	movw	r2, #2048	; 0x800
    6774:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    6776:	680b      	ldr	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6778:	f2c3 0200 	movt	r2, #12288	; 0x3000
			__HAL_SPI_ENABLE(&hspi1);
    677c:	f043 0301 	orr.w	r3, r3, #1
    6780:	600b      	str	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6782:	2340      	movs	r3, #64	; 0x40
    6784:	18d1      	adds	r1, r2, r3
    6786:	f006 ff9b 	bl	d6c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    678a:	f249 320d 	movw	r2, #37645	; 0x930d
    678e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    6792:	7813      	ldrb	r3, [r2, #0]
    6794:	3301      	adds	r3, #1
    6796:	b2db      	uxtb	r3, r3
    6798:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    679a:	f3bf 8f4f 	dsb	sy
    679e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    67a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    67a6:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    67aa:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    67ae:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    67b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67b6:	f3bf 8f6f 	isb	sy
}
    67ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    67bc:	f240 0300 	movw	r3, #0
    67c0:	f6c3 0300 	movt	r3, #14336	; 0x3800
    67c4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    67c8:	2afe      	cmp	r2, #254	; 0xfe
    67ca:	f040 80e0 	bne.w	698e <HAL_SPI_TxRxCpltCallback+0x2ae>
    67ce:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    67d2:	2afd      	cmp	r2, #253	; 0xfd
    67d4:	f040 80db 	bne.w	698e <HAL_SPI_TxRxCpltCallback+0x2ae>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    67d8:	f240 6294 	movw	r2, #1684	; 0x694
    67dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    67e0:	7810      	ldrb	r0, [r2, #0]
    67e2:	2800      	cmp	r0, #0
    67e4:	f000 8122 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    67e8:	f245 12c4 	movw	r2, #20932	; 0x51c4
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    67ec:	2801      	cmp	r0, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    67ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    67f2:	6814      	ldr	r4, [r2, #0]
    67f4:	6811      	ldr	r1, [r2, #0]
    67f6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    67fa:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    67fe:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    6802:	f891 4062 	ldrb.w	r4, [r1, #98]	; 0x62
    6806:	f244 2104 	movw	r1, #16900	; 0x4204
    680a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    680e:	f2c2 0101 	movt	r1, #8193	; 0x2001
    6812:	b2a4      	uxth	r4, r4
    6814:	800c      	strh	r4, [r1, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6816:	f000 8109 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    681a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    681c:	2802      	cmp	r0, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    681e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6822:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    6826:	6814      	ldr	r4, [r2, #0]
    6828:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    682c:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    6830:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6834:	b2a4      	uxth	r4, r4
    6836:	804c      	strh	r4, [r1, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6838:	f000 80f8 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    683c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    683e:	2803      	cmp	r0, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6840:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6844:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    6848:	6814      	ldr	r4, [r2, #0]
    684a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    684e:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    6852:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6856:	b2a4      	uxth	r4, r4
    6858:	808c      	strh	r4, [r1, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    685a:	f000 80e7 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    685e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6860:	2804      	cmp	r0, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6862:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6866:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    686a:	6814      	ldr	r4, [r2, #0]
    686c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6870:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    6874:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6878:	b2a4      	uxth	r4, r4
    687a:	80cc      	strh	r4, [r1, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    687c:	f000 80d6 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6880:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6882:	2805      	cmp	r0, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6884:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6888:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    688c:	6814      	ldr	r4, [r2, #0]
    688e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6892:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    6896:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    689a:	b2a4      	uxth	r4, r4
    689c:	810c      	strh	r4, [r1, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    689e:	f000 80c5 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68a2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    68a4:	2806      	cmp	r0, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68aa:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    68ae:	6814      	ldr	r4, [r2, #0]
    68b0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68b4:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    68b8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    68bc:	b2a4      	uxth	r4, r4
    68be:	814c      	strh	r4, [r1, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    68c0:	f000 80b4 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68c4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    68c6:	2807      	cmp	r0, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68c8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68cc:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    68d0:	6814      	ldr	r4, [r2, #0]
    68d2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68d6:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    68da:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    68de:	b2a4      	uxth	r4, r4
    68e0:	818c      	strh	r4, [r1, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    68e2:	f000 80a3 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68e6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    68e8:	2808      	cmp	r0, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    68ea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68ee:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    68f2:	6814      	ldr	r4, [r2, #0]
    68f4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    68f8:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    68fc:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6900:	b2a4      	uxth	r4, r4
    6902:	81cc      	strh	r4, [r1, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6904:	f000 8092 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6908:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    690a:	2809      	cmp	r0, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    690c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6910:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    6914:	6814      	ldr	r4, [r2, #0]
    6916:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    691a:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    691e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6922:	b2a4      	uxth	r4, r4
    6924:	820c      	strh	r4, [r1, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6926:	f000 8081 	beq.w	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    692a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    692c:	280a      	cmp	r0, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    692e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6932:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    6936:	6814      	ldr	r4, [r2, #0]
    6938:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    693c:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    6940:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6944:	b2a4      	uxth	r4, r4
    6946:	824c      	strh	r4, [r1, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6948:	d070      	beq.n	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    694a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    694c:	280b      	cmp	r0, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    694e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6952:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    6956:	6814      	ldr	r4, [r2, #0]
    6958:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    695c:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    6960:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6964:	b2a4      	uxth	r4, r4
    6966:	828c      	strh	r4, [r1, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6968:	d060      	beq.n	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    696a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    696c:	280c      	cmp	r0, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    696e:	6815      	ldr	r5, [r2, #0]
    6970:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6974:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6978:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    697c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6980:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    6984:	b29b      	uxth	r3, r3
    6986:	82cb      	strh	r3, [r1, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6988:	d050      	beq.n	6a2c <HAL_SPI_TxRxCpltCallback+0x34c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    698a:	6813      	ldr	r3, [r2, #0]
    698c:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi6);
    698e:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
    6992:	f2c2 0001 	movt	r0, #8193	; 0x2001
    6996:	f006 fc23 	bl	d1e0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    699a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    699e:	f6c5 0302 	movt	r3, #22530	; 0x5802
    69a2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    69a6:	f042 0220 	orr.w	r2, r2, #32
    69aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    69ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    69b2:	f022 0220 	bic.w	r2, r2, #32
    69b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    69ba:	f006 fc05 	bl	d1c8 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    69be:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    69c0:	f240 0240 	movw	r2, #64	; 0x40
    69c4:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
			__HAL_SPI_ENABLE(&hspi6);
    69c8:	6821      	ldr	r1, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    69ca:	2340      	movs	r3, #64	; 0x40
    69cc:	f6c3 0200 	movt	r2, #14336	; 0x3800
    69d0:	f2c2 0001 	movt	r0, #8193	; 0x2001
			__HAL_SPI_ENABLE(&hspi6);
    69d4:	f041 0101 	orr.w	r1, r1, #1
    69d8:	6021      	str	r1, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    69da:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    69de:	f006 fe6f 	bl	d6c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    69e2:	f249 320d 	movw	r2, #37645	; 0x930d
    69e6:	f2c2 0201 	movt	r2, #8193	; 0x2001
    69ea:	7813      	ldrb	r3, [r2, #0]
    69ec:	3301      	adds	r3, #1
    69ee:	b2db      	uxtb	r3, r3
    69f0:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    69f2:	f240 0240 	movw	r2, #64	; 0x40
    69f6:	f6c3 0200 	movt	r2, #14336	; 0x3800
  __ASM volatile ("dsb 0xF":::"memory");
    69fa:	f3bf 8f4f 	dsb	sy
    69fe:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6a02:	f102 0020 	add.w	r0, r2, #32
    6a06:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6a0a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6a0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    6a12:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    6a16:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    6a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a1e:	f3bf 8f6f 	isb	sy
}
    6a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			handleSPI(LEVER_BUFFER_SIZE);
    6a24:	2020      	movs	r0, #32
    6a26:	f7fd fafb 	bl	4020 <handleSPI>
    6a2a:	e6b6      	b.n	679a <HAL_SPI_TxRxCpltCallback+0xba>
			newPluck = 1;
    6a2c:	f245 23e8 	movw	r3, #21224	; 0x52e8
    6a30:	2201      	movs	r2, #1
    6a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a36:	601a      	str	r2, [r3, #0]
    6a38:	e7db      	b.n	69f2 <HAL_SPI_TxRxCpltCallback+0x312>
    6a3a:	bf00      	nop
    6a3c:	f3af 8000 	nop.w

00006a40 <HAL_SPI_TxRxHalfCpltCallback>:
{
    6a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi6)
    6a42:	f64c 74a8 	movw	r4, #53160	; 0xcfa8
	interrupted = 1;
    6a46:	f245 13d0 	movw	r3, #20944	; 0x51d0
    6a4a:	2201      	movs	r2, #1
	if (hspi == &hspi6)
    6a4c:	f2c2 0401 	movt	r4, #8193	; 0x2001
	interrupted = 1;
    6a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
	if (hspi == &hspi6)
    6a54:	4284      	cmp	r4, r0
	interrupted = 1;
    6a56:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    6a58:	d05e      	beq.n	6b18 <HAL_SPI_TxRxHalfCpltCallback+0xd8>
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    6a5a:	f640 0400 	movw	r4, #2048	; 0x800
    6a5e:	f2c3 0400 	movt	r4, #12288	; 0x3000
  __ASM volatile ("dsb 0xF":::"memory");
    6a62:	f3bf 8f4f 	dsb	sy
    6a66:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6a6a:	f104 0720 	add.w	r7, r4, #32
    6a6e:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6a72:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6a76:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    6a7a:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    6a7e:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    6a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a86:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    6a8a:	7fa3      	ldrb	r3, [r4, #30]
    6a8c:	2bfe      	cmp	r3, #254	; 0xfe
    6a8e:	d103      	bne.n	6a98 <HAL_SPI_TxRxHalfCpltCallback+0x58>
    6a90:	7fe3      	ldrb	r3, [r4, #31]
    6a92:	2bfd      	cmp	r3, #253	; 0xfd
    6a94:	f000 8174 	beq.w	6d80 <HAL_SPI_TxRxHalfCpltCallback+0x340>
			HAL_SPI_Abort(&hspi1);
    6a98:	f64c 7508 	movw	r5, #53000	; 0xcf08
    6a9c:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6aa0:	4628      	mov	r0, r5
    6aa2:	f006 fb9d 	bl	d1e0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    6aa6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    6aaa:	f6c5 0302 	movt	r3, #22530	; 0x5802
    6aae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6ab6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    6aba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    6ac2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    6ac6:	f006 fd9f 	bl	d608 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    6aca:	6829      	ldr	r1, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6acc:	f640 0200 	movw	r2, #2048	; 0x800
    6ad0:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    6ad2:	680b      	ldr	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6ad4:	f2c3 0200 	movt	r2, #12288	; 0x3000
			__HAL_SPI_ENABLE(&hspi1);
    6ad8:	f043 0301 	orr.w	r3, r3, #1
    6adc:	600b      	str	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    6ade:	2340      	movs	r3, #64	; 0x40
    6ae0:	18d1      	adds	r1, r2, r3
    6ae2:	f006 fded 	bl	d6c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    6ae6:	f249 320d 	movw	r2, #37645	; 0x930d
    6aea:	f2c2 0201 	movt	r2, #8193	; 0x2001
    6aee:	7813      	ldrb	r3, [r2, #0]
    6af0:	3301      	adds	r3, #1
    6af2:	b2db      	uxtb	r3, r3
    6af4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    6af6:	f3bf 8f4f 	dsb	sy
    6afa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    6afe:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6b02:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    6b06:	f8c3 7270 	str.w	r7, [r3, #624]	; 0x270
    6b0a:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    6b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b12:	f3bf 8f6f 	isb	sy
}
    6b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    6b18:	f240 0300 	movw	r3, #0
    6b1c:	f6c3 0300 	movt	r3, #14336	; 0x3800
    6b20:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    6b24:	2afe      	cmp	r2, #254	; 0xfe
    6b26:	f040 80e0 	bne.w	6cea <HAL_SPI_TxRxHalfCpltCallback+0x2aa>
    6b2a:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    6b2e:	2afd      	cmp	r2, #253	; 0xfd
    6b30:	f040 80db 	bne.w	6cea <HAL_SPI_TxRxHalfCpltCallback+0x2aa>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b34:	f240 6294 	movw	r2, #1684	; 0x694
    6b38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b3c:	7810      	ldrb	r0, [r2, #0]
    6b3e:	2800      	cmp	r0, #0
    6b40:	f000 8122 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b44:	f245 12c4 	movw	r2, #20932	; 0x51c4
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b48:	2801      	cmp	r0, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6b4e:	6814      	ldr	r4, [r2, #0]
    6b50:	6811      	ldr	r1, [r2, #0]
    6b52:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6b56:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    6b5a:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    6b5e:	f891 4042 	ldrb.w	r4, [r1, #66]	; 0x42
    6b62:	f244 2104 	movw	r1, #16900	; 0x4204
    6b66:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6b6a:	f2c2 0101 	movt	r1, #8193	; 0x2001
    6b6e:	b2a4      	uxth	r4, r4
    6b70:	800c      	strh	r4, [r1, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b72:	f000 8109 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b76:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b78:	2802      	cmp	r0, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b7a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6b7e:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
    6b82:	6814      	ldr	r4, [r2, #0]
    6b84:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6b88:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    6b8c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6b90:	b2a4      	uxth	r4, r4
    6b92:	804c      	strh	r4, [r1, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b94:	f000 80f8 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b98:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6b9a:	2803      	cmp	r0, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6b9c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6ba0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    6ba4:	6814      	ldr	r4, [r2, #0]
    6ba6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6baa:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    6bae:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6bb2:	b2a4      	uxth	r4, r4
    6bb4:	808c      	strh	r4, [r1, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6bb6:	f000 80e7 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6bba:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6bbc:	2804      	cmp	r0, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6bbe:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6bc2:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
    6bc6:	6814      	ldr	r4, [r2, #0]
    6bc8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6bcc:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    6bd0:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6bd4:	b2a4      	uxth	r4, r4
    6bd6:	80cc      	strh	r4, [r1, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6bd8:	f000 80d6 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6bdc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6bde:	2805      	cmp	r0, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6be0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6be4:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
    6be8:	6814      	ldr	r4, [r2, #0]
    6bea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6bee:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    6bf2:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6bf6:	b2a4      	uxth	r4, r4
    6bf8:	810c      	strh	r4, [r1, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6bfa:	f000 80c5 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6bfe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c00:	2806      	cmp	r0, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c02:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c06:	f894 504b 	ldrb.w	r5, [r4, #75]	; 0x4b
    6c0a:	6814      	ldr	r4, [r2, #0]
    6c0c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c10:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    6c14:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6c18:	b2a4      	uxth	r4, r4
    6c1a:	814c      	strh	r4, [r1, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c1c:	f000 80b4 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c20:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c22:	2807      	cmp	r0, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c24:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c28:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
    6c2c:	6814      	ldr	r4, [r2, #0]
    6c2e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c32:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    6c36:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6c3a:	b2a4      	uxth	r4, r4
    6c3c:	818c      	strh	r4, [r1, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c3e:	f000 80a3 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c42:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c44:	2808      	cmp	r0, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c46:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c4a:	f894 504f 	ldrb.w	r5, [r4, #79]	; 0x4f
    6c4e:	6814      	ldr	r4, [r2, #0]
    6c50:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c54:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    6c58:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6c5c:	b2a4      	uxth	r4, r4
    6c5e:	81cc      	strh	r4, [r1, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c60:	f000 8092 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c64:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c66:	2809      	cmp	r0, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c68:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c6c:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
    6c70:	6814      	ldr	r4, [r2, #0]
    6c72:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c76:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    6c7a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6c7e:	b2a4      	uxth	r4, r4
    6c80:	820c      	strh	r4, [r1, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c82:	f000 8081 	beq.w	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c86:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6c88:	280a      	cmp	r0, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6c8a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c8e:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
    6c92:	6814      	ldr	r4, [r2, #0]
    6c94:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6c98:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    6c9c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6ca0:	b2a4      	uxth	r4, r4
    6ca2:	824c      	strh	r4, [r1, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6ca4:	d070      	beq.n	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6ca6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6ca8:	280b      	cmp	r0, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6caa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6cae:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    6cb2:	6814      	ldr	r4, [r2, #0]
    6cb4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6cb8:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    6cbc:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6cc0:	b2a4      	uxth	r4, r4
    6cc2:	828c      	strh	r4, [r1, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6cc4:	d060      	beq.n	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6cc6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6cc8:	280c      	cmp	r0, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6cca:	6815      	ldr	r5, [r2, #0]
    6ccc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6cd0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6cd4:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    6cd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    6cdc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    6ce0:	b29b      	uxth	r3, r3
    6ce2:	82cb      	strh	r3, [r1, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6ce4:	d050      	beq.n	6d88 <HAL_SPI_TxRxHalfCpltCallback+0x348>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6ce6:	6813      	ldr	r3, [r2, #0]
    6ce8:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi6);
    6cea:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
    6cee:	f2c2 0001 	movt	r0, #8193	; 0x2001
    6cf2:	f006 fa75 	bl	d1e0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    6cf6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    6cfa:	f6c5 0302 	movt	r3, #22530	; 0x5802
    6cfe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6d02:	f042 0220 	orr.w	r2, r2, #32
    6d06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    6d0a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6d0e:	f022 0220 	bic.w	r2, r2, #32
    6d12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    6d16:	f006 fa57 	bl	d1c8 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    6d1a:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6d1c:	f240 0240 	movw	r2, #64	; 0x40
    6d20:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
			__HAL_SPI_ENABLE(&hspi6);
    6d24:	6821      	ldr	r1, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6d26:	2340      	movs	r3, #64	; 0x40
    6d28:	f6c3 0200 	movt	r2, #14336	; 0x3800
    6d2c:	f2c2 0001 	movt	r0, #8193	; 0x2001
			__HAL_SPI_ENABLE(&hspi6);
    6d30:	f041 0101 	orr.w	r1, r1, #1
    6d34:	6021      	str	r1, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    6d36:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    6d3a:	f006 fcc1 	bl	d6c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    6d3e:	f249 320d 	movw	r2, #37645	; 0x930d
    6d42:	f2c2 0201 	movt	r2, #8193	; 0x2001
    6d46:	7813      	ldrb	r3, [r2, #0]
    6d48:	3301      	adds	r3, #1
    6d4a:	b2db      	uxtb	r3, r3
    6d4c:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    6d4e:	f240 0240 	movw	r2, #64	; 0x40
    6d52:	f6c3 0200 	movt	r2, #14336	; 0x3800
  __ASM volatile ("dsb 0xF":::"memory");
    6d56:	f3bf 8f4f 	dsb	sy
    6d5a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6d5e:	f102 0020 	add.w	r0, r2, #32
    6d62:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    6d66:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6d6a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    6d6e:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    6d72:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    6d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d7a:	f3bf 8f6f 	isb	sy
}
    6d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			handleSPI(0);
    6d80:	2000      	movs	r0, #0
    6d82:	f7fd f94d 	bl	4020 <handleSPI>
    6d86:	e6b6      	b.n	6af6 <HAL_SPI_TxRxHalfCpltCallback+0xb6>
			newPluck = 1;
    6d88:	f245 23e8 	movw	r3, #21224	; 0x52e8
    6d8c:	2201      	movs	r2, #1
    6d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d92:	601a      	str	r2, [r3, #0]
    6d94:	e7db      	b.n	6d4e <HAL_SPI_TxRxHalfCpltCallback+0x30e>
    6d96:	bf00      	nop
	...

00006da0 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    6da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (whichStringModelLoaded != String1Loaded)
    6da4:	f244 2a5d 	movw	sl, #16989	; 0x425d
    6da8:	f2c2 0a01 	movt	sl, #8193	; 0x2001
    6dac:	f89a 3000 	ldrb.w	r3, [sl]
    6db0:	2b01      	cmp	r3, #1
{
    6db2:	ed2d 8b06 	vpush	{d8-d10}
	if (whichStringModelLoaded != String1Loaded)
    6db6:	f000 8086 	beq.w	6ec6 <audioInitString1+0x126>
	{

		if (whichStringModelLoaded == String2Loaded)
    6dba:	2b02      	cmp	r3, #2
    6dbc:	f000 808a 	beq.w	6ed4 <audioInitString1+0x134>
		{
			audioFreeString2();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    6dc0:	2b04      	cmp	r3, #4
    6dc2:	f000 8084 	beq.w	6ece <audioInitString1+0x12e>
		{
			audioFreeSynth();
		}

		for (int v = 0; v < numStringsThisBoard; v++)
    6dc6:	f240 6994 	movw	r9, #1684	; 0x694
    6dca:	f2c2 0900 	movt	r9, #8192	; 0x2000
    6dce:	f899 3000 	ldrb.w	r3, [r9]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d074      	beq.n	6ec0 <audioInitString1+0x120>
		{

			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6dd6:	f24d 730a 	movw	r3, #55050	; 0xd70a
    6dda:	f24d 0444 	movw	r4, #53316	; 0xd044
    6dde:	f24d 0654 	movw	r6, #53332	; 0xd054
    6de2:	f24d 054c 	movw	r5, #53324	; 0xd04c
    6de6:	f6c3 4323 	movt	r3, #15395	; 0x3c23
													 0.01f, 0, &mediumPool);
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
			tPickupNonLinearity_init(&pu[v], &leaf);
    6dea:	f245 288c 	movw	r8, #21132	; 0x528c
    6dee:	f2c2 0401 	movt	r4, #8193	; 0x2001
    6df2:	f2c2 0601 	movt	r6, #8193	; 0x2001
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6df6:	ee08 3a10 	vmov	s16, r3
    6dfa:	f64f 7358 	movw	r3, #65368	; 0xff58
    6dfe:	f2c2 0501 	movt	r5, #8193	; 0x2001
			tPickupNonLinearity_init(&pu[v], &leaf);
    6e02:	f2c2 0800 	movt	r8, #8192	; 0x2000
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6e06:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
    6e0a:	ee0a 3a10 	vmov	s20, r3
    6e0e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
    6e12:	f2c4 6384 	movt	r3, #18052	; 0x4684
    6e16:	ee09 3a90 	vmov	s19, r3
    6e1a:	2300      	movs	r3, #0
    6e1c:	f2c4 335c 	movt	r3, #17244	; 0x435c
    6e20:	ee09 3a10 	vmov	s18, r3
    6e24:	2300      	movs	r3, #0
    6e26:	ee08 3a90 	vmov	s17, r3
		for (int v = 0; v < numStringsThisBoard; v++)
    6e2a:	461f      	mov	r7, r3
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6e2c:	f245 23e0 	movw	r3, #21216	; 0x52e0
    6e30:	eef0 2a48 	vmov.f32	s5, s16
    6e34:	eeb0 2a48 	vmov.f32	s4, s16
    6e38:	2200      	movs	r2, #0
    6e3a:	eef0 1a68 	vmov.f32	s3, s17
    6e3e:	2104      	movs	r1, #4
    6e40:	eeb0 1a4a 	vmov.f32	s2, s20
    6e44:	4620      	mov	r0, r4
    6e46:	eef0 0a69 	vmov.f32	s1, s19
    6e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4e:	eeb0 0a49 	vmov.f32	s0, s18
		for (int v = 0; v < numStringsThisBoard; v++)
    6e52:	3701      	adds	r7, #1
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6e54:	f006 fa64 	bl	d320 <__tSimpleLivingString3_initToPool_veneer>
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    6e58:	f24c 03f0 	movw	r3, #49392	; 0xc0f0
    6e5c:	4620      	mov	r0, r4
    6e5e:	f6c3 5340 	movt	r3, #15680	; 0x3d40
    6e62:	ee00 3a10 	vmov	s0, r3
    6e66:	f006 fc87 	bl	d778 <__tSimpleLivingString3_setTargetLev_veneer>
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    6e6a:	f245 33bf 	movw	r3, #21439	; 0x53bf
    6e6e:	4620      	mov	r0, r4
    6e70:	f6c3 43f7 	movt	r3, #15607	; 0x3cf7
    6e74:	ee00 3a10 	vmov	s0, r3
    6e78:	f006 fa26 	bl	d2c8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    6e7c:	eeb0 0a68 	vmov.f32	s0, s17
    6e80:	4620      	mov	r0, r4
    6e82:	f006 fb4d 	bl	d520 <__tSimpleLivingString3_setLevStrength_veneer>
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    6e86:	4620      	mov	r0, r4
    6e88:	2101      	movs	r1, #1
		for (int v = 0; v < numStringsThisBoard; v++)
    6e8a:	3404      	adds	r4, #4
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    6e8c:	f006 fa38 	bl	d300 <__tSimpleLivingString3_setLevMode_veneer>
			tPickupNonLinearity_init(&pu[v], &leaf);
    6e90:	4630      	mov	r0, r6
    6e92:	4641      	mov	r1, r8
		for (int v = 0; v < numStringsThisBoard; v++)
    6e94:	3604      	adds	r6, #4
			tPickupNonLinearity_init(&pu[v], &leaf);
    6e96:	f006 f9d7 	bl	d248 <__tPickupNonLinearity_init_veneer>
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    6e9a:	f649 139a 	movw	r3, #39322	; 0x999a
    6e9e:	4628      	mov	r0, r5
    6ea0:	4641      	mov	r1, r8
    6ea2:	f6c3 7319 	movt	r3, #16153	; 0x3f19
		for (int v = 0; v < numStringsThisBoard; v++)
    6ea6:	3504      	adds	r5, #4
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    6ea8:	ee00 3a90 	vmov	s1, r3
    6eac:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
    6eb0:	ee00 3a10 	vmov	s0, r3
    6eb4:	f006 fb50 	bl	d558 <__tExpSmooth_init_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6eb8:	f899 3000 	ldrb.w	r3, [r9]
    6ebc:	42bb      	cmp	r3, r7
    6ebe:	dcb5      	bgt.n	6e2c <audioInitString1+0x8c>
		}
		whichStringModelLoaded = String1Loaded;
    6ec0:	2301      	movs	r3, #1
    6ec2:	f88a 3000 	strb.w	r3, [sl]
	}

}
    6ec6:	ecbd 8b06 	vpop	{d8-d10}
    6eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			audioFreeSynth();
    6ece:	f006 fa23 	bl	d318 <__audioFreeSynth_veneer>
    6ed2:	e778      	b.n	6dc6 <audioInitString1+0x26>
			audioFreeString2();
    6ed4:	f000 fc54 	bl	7780 <audioFreeString2>
    6ed8:	e775      	b.n	6dc6 <audioInitString1+0x26>
    6eda:	bf00      	nop
    6edc:	f3af 8000 	nop.w

00006ee0 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    6ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    6ee4:	f240 6894 	movw	r8, #1684	; 0x694
    6ee8:	f2c2 0800 	movt	r8, #8192	; 0x2000
    6eec:	f898 3000 	ldrb.w	r3, [r8]
    6ef0:	b1f3      	cbz	r3, 6f30 <audioFreeString1+0x50>
    6ef2:	f24d 064c 	movw	r6, #53324	; 0xd04c
    6ef6:	f24d 0544 	movw	r5, #53316	; 0xd044
    6efa:	f24d 0454 	movw	r4, #53332	; 0xd054
    6efe:	2700      	movs	r7, #0
    6f00:	f2c2 0601 	movt	r6, #8193	; 0x2001
    6f04:	f2c2 0501 	movt	r5, #8193	; 0x2001
    6f08:	f2c2 0401 	movt	r4, #8193	; 0x2001
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    6f0c:	4630      	mov	r0, r6
	for (int v = 0; v < numStringsThisBoard; v++)
    6f0e:	3701      	adds	r7, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    6f10:	f006 fa4e 	bl	d3b0 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    6f14:	4628      	mov	r0, r5
    6f16:	f006 f95b 	bl	d1d0 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    6f1a:	4620      	mov	r0, r4
    6f1c:	f006 fb04 	bl	d528 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    6f20:	f898 3000 	ldrb.w	r3, [r8]
    6f24:	3604      	adds	r6, #4
    6f26:	3504      	adds	r5, #4
    6f28:	42bb      	cmp	r3, r7
    6f2a:	f104 0404 	add.w	r4, r4, #4
    6f2e:	dced      	bgt.n	6f0c <audioFreeString1+0x2c>
	}
}
    6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f34:	f3af 8000 	nop.w
    6f38:	f3af 8000 	nop.w
    6f3c:	f3af 8000 	nop.w

00006f40 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    6f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f44:	ed2d 8b02 	vpush	{d8}

	audioInitString1();
    6f48:	f7ff ff2a 	bl	6da0 <audioInitString1>
	//load string1 default params:
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6f4c:	f241 236f 	movw	r3, #4719	; 0x126f
    6f50:	f245 2438 	movw	r4, #21048	; 0x5238
    6f54:	f240 67b0 	movw	r7, #1712	; 0x6b0
    6f58:	f248 6674 	movw	r6, #34420	; 0x8674
    6f5c:	f244 284c 	movw	r8, #16972	; 0x424c
    6f60:	f245 19d4 	movw	r9, #20948	; 0x51d4
    6f64:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    6f68:	f2c2 0400 	movt	r4, #8192	; 0x2000
    6f6c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    6f70:	f2c2 0601 	movt	r6, #8193	; 0x2001
	for (int i = 0; i < 12; i++)
    6f74:	2500      	movs	r5, #0
    6f76:	f2c2 0801 	movt	r8, #8193	; 0x2001
    6f7a:	f2c2 0900 	movt	r9, #8192	; 0x2000
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6f7e:	ee08 3a10 	vmov	s16, r3
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    6f82:	f04f 0a01 	mov.w	sl, #1
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6f86:	4620      	mov	r0, r4
    6f88:	eeb0 0a48 	vmov.f32	s0, s16
    6f8c:	f006 fb9c 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    6f90:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6f94:	4620      	mov	r0, r4
		if (voice == 63)
    6f96:	2b3f      	cmp	r3, #63	; 0x3f
    6f98:	d029      	beq.n	6fee <audioSwitchToString1+0xae>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6f9a:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    6f9e:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6fa0:	f006 f9a2 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    6fa4:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 12; i++)
    6fa8:	3501      	adds	r5, #1
    6faa:	3704      	adds	r7, #4
    6fac:	2d0c      	cmp	r5, #12
    6fae:	d1ea      	bne.n	6f86 <audioSwitchToString1+0x46>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    6fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    6fb4:	f245 20f0 	movw	r0, #21232	; 0x52f0
    6fb8:	f2c4 5350 	movt	r3, #17744	; 0x4550
    6fbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6fc0:	ee00 3a10 	vmov	s0, r3
    6fc4:	f006 fb74 	bl	d6b0 <__tVZFilter_setFreq_veneer>
	audioFrameFunction = audioFrameString1;
    6fc8:	f241 128c 	movw	r2, #4492	; 0x118c
    6fcc:	f247 4101 	movw	r1, #29697	; 0x7401
	presetReady = 1;
    6fd0:	f245 334c 	movw	r3, #21324	; 0x534c
	audioFrameFunction = audioFrameString1;
    6fd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
	presetReady = 1;
    6fd8:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameString1;
    6fda:	f2c0 0100 	movt	r1, #0
	presetReady = 1;
    6fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
	audioFrameFunction = audioFrameString1;
    6fe2:	6011      	str	r1, [r2, #0]
	presetReady = 1;
    6fe4:	6018      	str	r0, [r3, #0]
}
    6fe6:	ecbd 8b02 	vpop	{d8}
    6fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    6fee:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    6ff2:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    6ff4:	f006 f978 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    6ff8:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 12; i++)
    6ffc:	3501      	adds	r5, #1
    6ffe:	3604      	adds	r6, #4
    7000:	2d0c      	cmp	r5, #12
    7002:	d1c0      	bne.n	6f86 <audioSwitchToString1+0x46>
    7004:	e7d4      	b.n	6fb0 <audioSwitchToString1+0x70>
    7006:	bf00      	nop
    7008:	f3af 8000 	nop.w
    700c:	f3af 8000 	nop.w
    7010:	f3af 8000 	nop.w
    7014:	f3af 8000 	nop.w
    7018:	f3af 8000 	nop.w
    701c:	f3af 8000 	nop.w

00007020 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    7020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    7024:	f240 6394 	movw	r3, #1684	; 0x694

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7028:	f244 2058 	movw	r0, #16984	; 0x4258
    702c:	f245 14e8 	movw	r4, #20968	; 0x51e8
    7030:	f245 2538 	movw	r5, #21048	; 0x5238
	float note[numStringsThisBoard];
    7034:	f2c2 0300 	movt	r3, #8192	; 0x2000
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7038:	f2c2 0001 	movt	r0, #8193	; 0x2001
    703c:	f2c2 0400 	movt	r4, #8192	; 0x2000
    7040:	f2c2 0500 	movt	r5, #8192	; 0x2000
{
    7044:	ed2d 8b0a 	vpush	{d8-d12}
    7048:	b08b      	sub	sp, #44	; 0x2c
    704a:	46a0      	mov	r8, r4
    704c:	f104 0930 	add.w	r9, r4, #48	; 0x30
    7050:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    7052:	60fb      	str	r3, [r7, #12]
    7054:	781b      	ldrb	r3, [r3, #0]
    7056:	009b      	lsls	r3, r3, #2
    7058:	3307      	adds	r3, #7
    705a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    705e:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7062:	f006 f935 	bl	d2d0 <__tExpSmooth_tick_veneer>
    7066:	eef0 9a40 	vmov.f32	s19, s0
	float note[numStringsThisBoard];
    706a:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    706c:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    706e:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    7070:	f006 f92e 	bl	d2d0 <__tExpSmooth_tick_veneer>
    7074:	eca8 0a01 	vstmia	r8!, {s0}
	for (int i = 0; i < 12; i++)
    7078:	45c8      	cmp	r8, r9
    707a:	d1f7      	bne.n	706c <audioTickString1+0x4c>
	}
	pluckPos = knobScaled[9];
    707c:	f240 6398 	movw	r3, #1688	; 0x698

	for (int i = 0; i < numStringsThisBoard; i++)
    7080:	68fa      	ldr	r2, [r7, #12]
	pluckPos = knobScaled[9];
    7082:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7084:	f2c2 0300 	movt	r3, #8192	; 0x2000
	for (int i = 0; i < numStringsThisBoard; i++)
    7088:	7812      	ldrb	r2, [r2, #0]
	pluckPos = knobScaled[9];
    708a:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    708c:	2a00      	cmp	r2, #0
    708e:	f000 817b 	beq.w	7388 <audioTickString1+0x368>
    7092:	f244 2324 	movw	r3, #16932	; 0x4224
    7096:	f241 1998 	movw	r9, #4504	; 0x1198
    709a:	f24d 0254 	movw	r2, #53332	; 0xd054
    709e:	f24d 0844 	movw	r8, #53316	; 0xd044
    70a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    70a6:	f2c2 0900 	movt	r9, #8192	; 0x2000
    70aa:	f241 1b90 	movw	fp, #4496	; 0x1190
    70ae:	f04f 0a00 	mov.w	sl, #0
    70b2:	61fb      	str	r3, [r7, #28]
	float temp = 0.0f;
    70b4:	2300      	movs	r3, #0
    70b6:	627e      	str	r6, [r7, #36]	; 0x24
    70b8:	f24d 064c 	movw	r6, #53324	; 0xd04c
    70bc:	ee09 3a10 	vmov	s18, r3
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    70c0:	ee0a 3a10 	vmov	s20, r3
    70c4:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    70c8:	f2c2 0201 	movt	r2, #8193	; 0x2001
	for (int i = 0; i < numStringsThisBoard; i++)
    70cc:	f8c7 9010 	str.w	r9, [r7, #16]
    70d0:	f2c2 0601 	movt	r6, #8193	; 0x2001
    70d4:	ee0a 3a90 	vmov	s21, r3
			note[i] = 64.0f;
		}

		//float finalFreq = mtof(note[i]);
		float dampFreq = 15778.3f;
		float decay = 0.1f;
    70d8:	f64c 43cd 	movw	r3, #52429	; 0xcccd
	for (int i = 0; i < numStringsThisBoard; i++)
    70dc:	46a1      	mov	r9, r4
    70de:	f2c2 0801 	movt	r8, #8193	; 0x2001
		float decay = 0.1f;
    70e2:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
    70e6:	f2c2 0b00 	movt	fp, #8192	; 0x2000
	for (int i = 0; i < numStringsThisBoard; i++)
    70ea:	4654      	mov	r4, sl
    70ec:	623a      	str	r2, [r7, #32]
		float decay = 0.1f;
    70ee:	ee0b 3a90 	vmov	s23, r3
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    70f2:	2300      	movs	r3, #0
    70f4:	f2c4 4348 	movt	r3, #17480	; 0x4448
    70f8:	ee0b 3a10 	vmov	s22, r3


inline Lfloat mtof(Lfloat f)
{
    if (f <= -1500.0f) return(0);
    else if (f > 1499.0f) return(mtof(1499.0f));
    70fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    7100:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
    7104:	ee08 3a90 	vmov	s17, r3
    7108:	f245 23dc 	movw	r3, #21212	; 0x52dc
    710c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7110:	61bb      	str	r3, [r7, #24]
    7112:	f244 231c 	movw	r3, #16924	; 0x421c
    7116:	f2c2 0301 	movt	r3, #8193	; 0x2001
    711a:	60bb      	str	r3, [r7, #8]
    711c:	f245 3350 	movw	r3, #21328	; 0x5350
    7120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7124:	617b      	str	r3, [r7, #20]
    7126:	f241 13a0 	movw	r3, #4512	; 0x11a0
    712a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    712e:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    7130:	69fb      	ldr	r3, [r7, #28]
    7132:	00a5      	lsls	r5, r4, #2
    7134:	ecf3 7a01 	vldmia	r3!, {s15}
    7138:	61fb      	str	r3, [r7, #28]
    713a:	68bb      	ldr	r3, [r7, #8]
    713c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
    7140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7142:	ed91 8a00 	vldr	s16, [r1]
    7146:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (note[i] < 0.0f)
    714a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    714e:	eca3 8a01 	vstmia	r3!, {s16}
    7152:	627b      	str	r3, [r7, #36]	; 0x24
		if (note[i] < 0.0f)
    7154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7158:	f100 8111 	bmi.w	737e <audioTickString1+0x35e>
    715c:	ed03 8a01 	vstr	s16, [r3, #-4]
		if (note[i] > 127.0f)
    7160:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    7164:	ed03 8a01 	vstr	s16, [r3, #-4]
		if (lsDecay[i])
    7168:	69bb      	ldr	r3, [r7, #24]
    716a:	f813 1b01 	ldrb.w	r1, [r3], #1
    716e:	61bb      	str	r3, [r7, #24]
    7170:	2900      	cmp	r1, #0
    7172:	f000 80ee 	beq.w	7352 <audioTickString1+0x332>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    7176:	eeb2 ca04 	vmov.f32	s24, #36	; 0x41200000  10.0
    717a:	edd9 7a0a 	vldr	s15, [r9, #40]	; 0x28
    717e:	eea7 ca8b 	vfma.f32	s24, s15, s22
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    7182:	4640      	mov	r0, r8
    7184:	ed99 0a08 	vldr	s0, [r9, #32]
    7188:	f006 f9ea 	bl	d560 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    718c:	4640      	mov	r0, r8
    718e:	eeb0 0a4c 	vmov.f32	s0, s24
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    7192:	46c2      	mov	sl, r8
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    7194:	f006 f82c 	bl	d1f0 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    7198:	f648 1133 	movw	r1, #35123	; 0x8933
    719c:	4640      	mov	r0, r8
    719e:	f2c4 6176 	movt	r1, #18038	; 0x4676
    71a2:	ee00 1a10 	vmov	s0, r1
    71a6:	f006 fa03 	bl	d5b0 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    71aa:	f648 1150 	movw	r1, #35152	; 0x8950
    71ae:	ed99 0a00 	vldr	s0, [r9]
    71b2:	4640      	mov	r0, r8
    71b4:	f6c3 5110 	movt	r1, #15632	; 0x3d10
    71b8:	ee07 1a90 	vmov	s15, r1
    71bc:	ee20 0a27 	vmul.f32	s0, s0, s15
    71c0:	f006 f9ae 	bl	d520 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    71c4:	f24c 218f 	movw	r1, #49807	; 0xc28f
    71c8:	ed99 7a05 	vldr	s14, [r9, #20]
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    71cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    71d0:	f6cb 41f5 	movt	r1, #48373	; 0xbcf5
		livStr[i]->rippleDelay = knobScaled[11];
    71d4:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    71d8:	ee07 1a90 	vmov	s15, r1
    if (f <= -1500.0f) return(0);
    71dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    71e0:	ee27 7a27 	vmul.f32	s14, s14, s15
    71e4:	f2cc 41bb 	movt	r1, #50363	; 0xc4bb
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    71e8:	ee77 7a26 	vadd.f32	s15, s14, s13
    71ec:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    71f0:	ee07 1a90 	vmov	s15, r1
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    71f4:	f858 1b04 	ldr.w	r1, [r8], #4
		livStr[i]->rippleDelay = knobScaled[11];
    71f8:	6688      	str	r0, [r1, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    71fa:	ed81 7a19 	vstr	s14, [r1, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    71fe:	ed81 6a1b 	vstr	s12, [r1, #108]	; 0x6c
inline Lfloat mtof(Lfloat f)
    7202:	e007      	b.n	7214 <audioTickString1+0x1f4>
    else if (f > 1499.0f) return(mtof(1499.0f));
    7204:	eeb4 8ae8 	vcmpe.f32	s16, s17
    7208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    720c:	f340 80a4 	ble.w	7358 <audioTickString1+0x338>
    7210:	eeb0 8a68 	vmov.f32	s16, s17
    if (f <= -1500.0f) return(0);
    7214:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    721c:	d8f2      	bhi.n	7204 <audioTickString1+0x1e4>
    721e:	eeb0 0a4a 	vmov.f32	s0, s20
    7222:	687b      	ldr	r3, [r7, #4]
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    7224:	4630      	mov	r0, r6
	for (int i = 0; i < numStringsThisBoard; i++)
    7226:	3401      	adds	r4, #1
    7228:	441d      	add	r5, r3
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    722a:	f006 f805 	bl	d238 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    722e:	4630      	mov	r0, r6
	for (int i = 0; i < numStringsThisBoard; i++)
    7230:	3604      	adds	r6, #4
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    7232:	f006 f84d 	bl	d2d0 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    7236:	4650      	mov	r0, sl
    7238:	f006 f876 	bl	d328 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    723c:	697b      	ldr	r3, [r7, #20]
    723e:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
    7242:	f64c 41cd 	movw	r1, #52429	; 0xcccd
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    7246:	ed93 7a00 	vldr	s14, [r3]
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    724a:	4628      	mov	r0, r5
		if (barDelta > 0.2f)
    724c:	f6c3 614c 	movt	r1, #15948	; 0x3e4c
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    7250:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7254:	eeb0 0ae7 	vabs.f32	s0, s15
		if (barDelta > 0.2f)
    7258:	ee07 1a90 	vmov	s15, r1
			barDelta = 0.0f; //to avoid noise on open string glitches
    725c:	eeb4 0a67 	vcmp.f32	s0, s15
    7260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7264:	fe3a 0a00 	vselgt.f32	s0, s20, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    7268:	f005 ffe6 	bl	d238 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    726c:	4628      	mov	r0, r5
    726e:	f006 f82f 	bl	d2d0 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    7272:	693d      	ldr	r5, [r7, #16]
    7274:	4628      	mov	r0, r5
    7276:	f005 ffa3 	bl	d1c0 <__tEnvelopeFollower_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    727a:	462a      	mov	r2, r5
		prevBarInMIDI[0] = barInMIDI[0];
    727c:	f8db 1000 	ldr.w	r1, [fp]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    7280:	f245 20e4 	movw	r0, #21220	; 0x52e4
		prevBarInMIDI[0] = barInMIDI[0];
    7284:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    7286:	3204      	adds	r2, #4
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    7288:	f2c2 0000 	movt	r0, #8192	; 0x2000
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    728c:	eeb0 8a40 	vmov.f32	s16, s0
		prevBarInMIDI[0] = barInMIDI[0];
    7290:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    7292:	613a      	str	r2, [r7, #16]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    7294:	f006 fa2c 	bl	d6f0 <__tNoise_tick_veneer>
    7298:	f245 20f0 	movw	r0, #21232	; 0x52f0
    729c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    72a0:	f006 f84e 	bl	d340 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    72a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    72a8:	edd9 7a01 	vldr	s15, [r9, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    72ac:	4650      	mov	r0, sl
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    72ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    72b2:	ee67 7a88 	vmul.f32	s15, s15, s16
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    72b6:	ee27 0a80 	vmul.f32	s0, s15, s0
    72ba:	f006 f8c9 	bl	d450 <__tSimpleLivingString3_tick_veneer>
    72be:	6a3d      	ldr	r5, [r7, #32]
    72c0:	4628      	mov	r0, r5
    72c2:	f005 fffd 	bl	d2c0 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    72c6:	462b      	mov	r3, r5
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    72c8:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    72cc:	3304      	adds	r3, #4
    72ce:	623b      	str	r3, [r7, #32]
    72d0:	68fb      	ldr	r3, [r7, #12]
    72d2:	7819      	ldrb	r1, [r3, #0]
    72d4:	42a1      	cmp	r1, r4
    72d6:	f73f af2b 	bgt.w	7130 <audioTickString1+0x110>
    72da:	f64a 400b 	movw	r0, #44043	; 0xac0b
    72de:	f244 2313 	movw	r3, #16915	; 0x4213
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);

	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    72e2:	ee29 5aa9 	vmul.f32	s10, s19, s19
    72e6:	f24a 2185 	movw	r1, #41605	; 0xa285
    72ea:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    72ee:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    72f2:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
    72f6:	f64b 620a 	movw	r2, #48650	; 0xbe0a
    72fa:	ee07 0a10 	vmov	s14, r0
    72fe:	ee07 3a90 	vmov	s15, r3
    7302:	ee69 5a85 	vmul.f32	s11, s19, s10
    7306:	ee06 1a10 	vmov	s12, r1
    730a:	eee9 7a87 	vfma.f32	s15, s19, s14
    730e:	f2c4 0222 	movt	r2, #16418	; 0x4022
    7312:	f246 3313 	movw	r3, #25363	; 0x6313
    7316:	ee06 2a90 	vmov	s13, r2
    731a:	f2c4 0351 	movt	r3, #16465	; 0x4051
    731e:	ee07 3a10 	vmov	s14, r3
    7322:	eee5 7a86 	vfma.f32	s15, s11, s12
    7326:	ee29 7a87 	vmul.f32	s14, s19, s14
    732a:	eee5 7a66 	vfms.f32	s15, s10, s13
    732e:	eee5 7ac7 	vfms.f32	s15, s11, s14


	//temp = input;
	temp *= outVol * masterVolFromBrain;
    7332:	f240 638c 	movw	r3, #1676	; 0x68c
    7336:	ee29 0a27 	vmul.f32	s0, s18, s15

	return temp;
}
    733a:	372c      	adds	r7, #44	; 0x2c
	temp *= outVol * masterVolFromBrain;
    733c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7340:	edd3 7a00 	vldr	s15, [r3]
    7344:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    7348:	46bd      	mov	sp, r7
    734a:	ecbd 8b0a 	vpop	{d8-d12}
    734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float decay = 0.1f;
    7352:	eeb0 ca6b 	vmov.f32	s24, s23
    7356:	e714      	b.n	7182 <audioTickString1+0x162>
    else return (8.17579891564f * expf(0.0577622650f * f));
    7358:	f649 0120 	movw	r1, #38944	; 0x9820
    735c:	f6c3 516c 	movt	r1, #15724	; 0x3d6c
    7360:	ee00 1a10 	vmov	s0, r1
    7364:	ee28 0a00 	vmul.f32	s0, s16, s0
    7368:	f005 ff9e 	bl	d2a8 <__expf_veneer>
    736c:	f24d 0113 	movw	r1, #53267	; 0xd013
    7370:	f2c4 1102 	movt	r1, #16642	; 0x4102
    7374:	ee07 1a90 	vmov	s15, r1
    7378:	ee20 0a27 	vmul.f32	s0, s0, s15
    737c:	e751      	b.n	7222 <audioTickString1+0x202>
			note[i] = 0.0f;
    737e:	eeb0 8a4a 	vmov.f32	s16, s20
    7382:	ed03 aa01 	vstr	s20, [r3, #-4]
		if (note[i] > 127.0f)
    7386:	e6ed      	b.n	7164 <audioTickString1+0x144>
    7388:	f64a 400b 	movw	r0, #44043	; 0xac0b
    738c:	f244 2313 	movw	r3, #16915	; 0x4213
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7390:	ee29 5aa9 	vmul.f32	s10, s19, s19
    7394:	f24a 2185 	movw	r1, #41605	; 0xa285
    7398:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    739c:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    73a0:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
    73a4:	f64b 620a 	movw	r2, #48650	; 0xbe0a
    73a8:	ee07 0a10 	vmov	s14, r0
    73ac:	ee07 3a90 	vmov	s15, r3
    73b0:	ee69 5a85 	vmul.f32	s11, s19, s10
    73b4:	ee06 1a10 	vmov	s12, r1
    73b8:	eee9 7a87 	vfma.f32	s15, s19, s14
    73bc:	f2c4 0222 	movt	r2, #16418	; 0x4022
    73c0:	f246 3313 	movw	r3, #25363	; 0x6313
	float temp = 0.0f;
    73c4:	2100      	movs	r1, #0
    73c6:	ee07 2a10 	vmov	s14, r2
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    73ca:	f2c4 0351 	movt	r3, #16465	; 0x4051
	float temp = 0.0f;
    73ce:	ee09 1a10 	vmov	s18, r1
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    73d2:	ee06 3a90 	vmov	s13, r3
    73d6:	eee5 7a86 	vfma.f32	s15, s11, s12
    73da:	ee69 9aa6 	vmul.f32	s19, s19, s13
    73de:	eee5 7a47 	vfms.f32	s15, s10, s14
    73e2:	eee5 7ae9 	vfms.f32	s15, s11, s19
    73e6:	e7a4      	b.n	7332 <audioTickString1+0x312>
    73e8:	f3af 8000 	nop.w
    73ec:	f3af 8000 	nop.w
    73f0:	f3af 8000 	nop.w
    73f4:	f3af 8000 	nop.w
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    7400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (resetStringInputs)
    7404:	f245 7371 	movw	r3, #22385	; 0x5771
	uint32_t tempCountFrame = DWT->CYCCNT;
    7408:	f2ce 0200 	movt	r2, #57344	; 0xe000
	if (resetStringInputs)
    740c:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    7410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7414:	ed2d 8b06 	vpush	{d8-d10}
	uint32_t tempCountFrame = DWT->CYCCNT;
    7418:	f8d2 b004 	ldr.w	fp, [r2, #4]
{
    741c:	b085      	sub	sp, #20
	if (resetStringInputs)
    741e:	781a      	ldrb	r2, [r3, #0]
{
    7420:	4606      	mov	r6, r0
	if (resetStringInputs)
    7422:	2a00      	cmp	r2, #0
    7424:	f040 80b1 	bne.w	758a <audioFrameString1+0x18a>
    7428:	f245 27e8 	movw	r7, #21224	; 0x52e8
    742c:	f2c2 0700 	movt	r7, #8192	; 0x2000
	if (newPluck)
    7430:	683b      	ldr	r3, [r7, #0]
    7432:	2b00      	cmp	r3, #0
    7434:	d06b      	beq.n	750e <audioFrameString1+0x10e>
		for (int i = 0; i < numStringsThisBoard; i++)
    7436:	f240 6194 	movw	r1, #1684	; 0x694
    743a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    743e:	f891 c000 	ldrb.w	ip, [r1]
    7442:	f1bc 0f00 	cmp.w	ip, #0
    7446:	d060      	beq.n	750a <audioFrameString1+0x10a>
    7448:	2300      	movs	r3, #0
    744a:	f244 2204 	movw	r2, #16900	; 0x4204
    744e:	2000      	movs	r0, #0
    7450:	f24d 0a4c 	movw	sl, #53324	; 0xd04c
    7454:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    7458:	f2c2 0201 	movt	r2, #8193	; 0x2001
    745c:	f24d 0944 	movw	r9, #53316	; 0xd044
    7460:	f245 28dc 	movw	r8, #21212	; 0x52dc
    7464:	ee09 3a10 	vmov	s18, r3
    if (f <= -1500.0f) return(0);
    7468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    746c:	f245 3558 	movw	r5, #21336	; 0x5358
    7470:	f8cd b000 	str.w	fp, [sp]
    7474:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
    7478:	468b      	mov	fp, r1
    747a:	f2c2 0a01 	movt	sl, #8193	; 0x2001
    747e:	4639      	mov	r1, r7
    7480:	ee08 3a90 	vmov	s17, r3
    else if (f > 1499.0f) return(mtof(1499.0f));
    7484:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    7488:	4617      	mov	r7, r2
    748a:	f2c2 0901 	movt	r9, #8193	; 0x2001
    748e:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
    7492:	4632      	mov	r2, r6
    7494:	f2c2 0800 	movt	r8, #8192	; 0x2000
    7498:	f2c2 0500 	movt	r5, #8192	; 0x2000
    749c:	ee08 3a10 	vmov	s16, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74a0:	2380      	movs	r3, #128	; 0x80
    74a2:	ee0a 0a10 	vmov	s20, r0
		for (int i = 0; i < numStringsThisBoard; i++)
    74a6:	4604      	mov	r4, r0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    74a8:	f2c3 7380 	movt	r3, #14208	; 0x3780
    74ac:	ee09 3a90 	vmov	s19, r3
    74b0:	f244 2324 	movw	r3, #16932	; 0x4224
    74b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
		for (int i = 0; i < numStringsThisBoard; i++)
    74b8:	461e      	mov	r6, r3
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    74ba:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    74be:	b280      	uxth	r0, r0
    74c0:	b920      	cbnz	r0, 74cc <audioFrameString1+0xcc>
    74c2:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    74c6:	b280      	uxth	r0, r0
    74c8:	2800      	cmp	r0, #0
    74ca:	d17c      	bne.n	75c6 <audioFrameString1+0x1c6>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    74cc:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    74d0:	b280      	uxth	r0, r0
    74d2:	b138      	cbz	r0, 74e4 <audioFrameString1+0xe4>
    74d4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    74d8:	b280      	uxth	r0, r0
    74da:	b918      	cbnz	r0, 74e4 <audioFrameString1+0xe4>
		for (int i = 0; i < numStringsThisBoard; i++)
    74dc:	f89b c000 	ldrb.w	ip, [fp]
				lsDecay[i] = 0;
    74e0:	f888 0000 	strb.w	r0, [r8]
			previousStringInputs[i] = stringInputs[i];
    74e4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    74e8:	f10a 0a04 	add.w	sl, sl, #4
    74ec:	f109 0904 	add.w	r9, r9, #4
    74f0:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    74f4:	b280      	uxth	r0, r0
		for (int i = 0; i < numStringsThisBoard; i++)
    74f6:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    74f8:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    74fc:	3401      	adds	r4, #1
    74fe:	45a4      	cmp	ip, r4
    7500:	dcdb      	bgt.n	74ba <audioFrameString1+0xba>
    7502:	f8dd b000 	ldr.w	fp, [sp]
    7506:	4616      	mov	r6, r2
    7508:	460f      	mov	r7, r1
		newPluck = 0;
    750a:	2300      	movs	r3, #0
    750c:	603b      	str	r3, [r7, #0]
    750e:	f240 0400 	movw	r4, #0
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    7512:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
    7516:	f2c3 0400 	movt	r4, #12288	; 0x3000
    751a:	ee08 3a10 	vmov	s16, r3
    751e:	f504 7500 	add.w	r5, r4, #512	; 0x200
    7522:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    7526:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    752a:	f7ff fd79 	bl	7020 <audioTickString1>
    752e:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7532:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    7534:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7538:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    753a:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    753e:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7542:	d1f2      	bne.n	752a <audioFrameString1+0x12a>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    7544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7548:	f240 6084 	movw	r0, #1668	; 0x684
	timeFrame = DWT->CYCCNT - tempCountFrame;
    754c:	f244 2140 	movw	r1, #16960	; 0x4240
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7550:	f245 12cc 	movw	r2, #20940	; 0x51cc
	timeFrame = DWT->CYCCNT - tempCountFrame;
    7554:	f2ce 0300 	movt	r3, #57344	; 0xe000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7558:	f2c2 0000 	movt	r0, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    755c:	f2c2 0101 	movt	r1, #8193	; 0x2001
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7560:	f2c2 0200 	movt	r2, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    7564:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7566:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    756a:	eba3 030b 	sub.w	r3, r3, fp
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    756e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    7572:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7574:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7578:	ee67 7a87 	vmul.f32	s15, s15, s14
    757c:	edc2 7a00 	vstr	s15, [r2]
}
    7580:	b005      	add	sp, #20
    7582:	ecbd 8b06 	vpop	{d8-d10}
    7586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    758a:	f240 6294 	movw	r2, #1684	; 0x694
    758e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7592:	7810      	ldrb	r0, [r2, #0]
    7594:	b170      	cbz	r0, 75b4 <audioFrameString1+0x1b4>
			lsDecay[i] = 0;
    7596:	f245 22dc 	movw	r2, #21212	; 0x52dc
			previousStringInputs[i] = 0;
    759a:	f245 3558 	movw	r5, #21336	; 0x5358
			lsDecay[i] = 0;
    759e:	2100      	movs	r1, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    75a0:	2801      	cmp	r0, #1
			lsDecay[i] = 0;
    75a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
			previousStringInputs[i] = 0;
    75a6:	f2c2 0500 	movt	r5, #8192	; 0x2000
			lsDecay[i] = 0;
    75aa:	7011      	strb	r1, [r2, #0]
			previousStringInputs[i] = 0;
    75ac:	8029      	strh	r1, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    75ae:	d001      	beq.n	75b4 <audioFrameString1+0x1b4>
			lsDecay[i] = 0;
    75b0:	7051      	strb	r1, [r2, #1]
			previousStringInputs[i] = 0;
    75b2:	8069      	strh	r1, [r5, #2]
		newPluck = 1;
    75b4:	f245 27e8 	movw	r7, #21224	; 0x52e8
		resetStringInputs = 0;
    75b8:	2200      	movs	r2, #0
		newPluck = 1;
    75ba:	f2c2 0700 	movt	r7, #8192	; 0x2000
		resetStringInputs = 0;
    75be:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    75c0:	2301      	movs	r3, #1
    75c2:	603b      	str	r3, [r7, #0]
    75c4:	e734      	b.n	7430 <audioFrameString1+0x30>
				float note = stringMIDIPitches[i] + stringOctave[i];
    75c6:	f244 201c 	movw	r0, #16924	; 0x421c
    75ca:	f2c2 0001 	movt	r0, #8193	; 0x2001
    75ce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    75d2:	edd0 7a00 	vldr	s15, [r0]
				stringOctave[i] = octave;
    75d6:	f245 20f4 	movw	r0, #21236	; 0x52f4
    75da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    75de:	ed90 7a00 	vldr	s14, [r0]
				float note = stringMIDIPitches[i] + stringOctave[i];
    75e2:	ee77 7a27 	vadd.f32	s15, s14, s15
				stringOctave[i] = octave;
    75e6:	ed86 7a00 	vstr	s14, [r6]
				if (note > 127.0f)
    75ea:	fec7 7a8a 	vmaxnm.f32	s15, s15, s20
    75ee:	fec7 7ac9 	vminnm.f32	s15, s15, s18
inline Lfloat mtof(Lfloat f)
    75f2:	e006      	b.n	7602 <audioFrameString1+0x202>
    else if (f > 1499.0f) return(mtof(1499.0f));
    75f4:	eef4 7ac8 	vcmpe.f32	s15, s16
    75f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    75fc:	dd52      	ble.n	76a4 <audioFrameString1+0x2a4>
    75fe:	eef0 7a48 	vmov.f32	s15, s16
    if (f <= -1500.0f) return(0);
    7602:	eef4 7ae8 	vcmpe.f32	s15, s17
    7606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    760a:	d8f3      	bhi.n	75f4 <audioFrameString1+0x1f4>
    760c:	eeb0 0a4a 	vmov.f32	s0, s20
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    7610:	4650      	mov	r0, sl
    7612:	e9cd 2102 	strd	r2, r1, [sp, #8]
    7616:	f005 fe67 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    761a:	4650      	mov	r0, sl
    761c:	f005 fe58 	bl	d2d0 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    7620:	4648      	mov	r0, r9
    7622:	f005 fe81 	bl	d328 <__tSimpleLivingString3_setFreq_veneer>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    7626:	f245 10e8 	movw	r0, #20968	; 0x51e8
    762a:	f244 4350 	movw	r3, #17488	; 0x4450
    762e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    7636:	f2c2 0301 	movt	r3, #8193	; 0x2001
    763a:	ed90 7a02 	vldr	s14, [r0, #8]
    763e:	f245 3070 	movw	r0, #21360	; 0x5370
    7642:	f893 c000 	ldrb.w	ip, [r3]
    7646:	f2c2 0000 	movt	r0, #8192	; 0x2000
    764a:	ee77 0ac7 	vsub.f32	s1, s15, s14
    764e:	9301      	str	r3, [sp, #4]
    7650:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    7654:	edd0 6a00 	vldr	s13, [r0]
    7658:	f240 6098 	movw	r0, #1688	; 0x698
    765c:	eee6 0a87 	vfma.f32	s1, s13, s14
    7660:	f2c2 0000 	movt	r0, #8192	; 0x2000
    7664:	ed90 7a00 	vldr	s14, [r0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7668:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    766c:	b280      	uxth	r0, r0
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    766e:	ee60 0a87 	vmul.f32	s1, s1, s14
    7672:	fec0 0ae7 	vminnm.f32	s1, s1, s15
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7676:	ee07 0a90 	vmov	s15, r0
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    767a:	fec0 0a8a 	vmaxnm.f32	s1, s1, s20
    767e:	4648      	mov	r0, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7680:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    7684:	ee20 0a29 	vmul.f32	s0, s0, s19
    7688:	f006 f886 	bl	d798 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    768c:	9b01      	ldr	r3, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    768e:	f89b c000 	ldrb.w	ip, [fp]
				currentRandom++;
    7692:	7818      	ldrb	r0, [r3, #0]
    7694:	3001      	adds	r0, #1
    7696:	7018      	strb	r0, [r3, #0]
				lsDecay[i] = 1;
    7698:	2001      	movs	r0, #1
			{
    769a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
				lsDecay[i] = 1;
    769e:	f888 0000 	strb.w	r0, [r8]
			{
    76a2:	e71f      	b.n	74e4 <audioFrameString1+0xe4>
    else return (8.17579891564f * expf(0.0577622650f * f));
    76a4:	f649 0020 	movw	r0, #38944	; 0x9820
    76a8:	f6c3 506c 	movt	r0, #15724	; 0x3d6c
    76ac:	ee00 0a10 	vmov	s0, r0
    76b0:	ee27 0a80 	vmul.f32	s0, s15, s0
    76b4:	e9cd 1201 	strd	r1, r2, [sp, #4]
    76b8:	f005 fdf6 	bl	d2a8 <__expf_veneer>
    76bc:	f24d 0013 	movw	r0, #53267	; 0xd013
    76c0:	f2c4 1002 	movt	r0, #16642	; 0x4102
    76c4:	ee07 0a90 	vmov	s15, r0
    76c8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    76cc:	ee20 0a27 	vmul.f32	s0, s0, s15
    76d0:	e79e      	b.n	7610 <audioFrameString1+0x210>
    76d2:	bf00      	nop
	...

000076e0 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    76e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != String2Loaded)
    76e4:	f244 285d 	movw	r8, #16989	; 0x425d
    76e8:	f2c2 0801 	movt	r8, #8193	; 0x2001
    76ec:	f898 3000 	ldrb.w	r3, [r8]
    76f0:	2b02      	cmp	r3, #2
    76f2:	d02e      	beq.n	7752 <audioInitString2+0x72>
	{
		if (whichStringModelLoaded == String1Loaded)
    76f4:	2b01      	cmp	r3, #1
    76f6:	d031      	beq.n	775c <audioInitString2+0x7c>
		{
			audioFreeString1();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    76f8:	2b04      	cmp	r3, #4
    76fa:	d02c      	beq.n	7756 <audioInitString2+0x76>
		{
			audioFreeSynth();
		}
		for (int v = 0; v < numStringsThisBoard; v++)
    76fc:	f240 6694 	movw	r6, #1684	; 0x694
    7700:	f2c2 0600 	movt	r6, #8192	; 0x2000
    7704:	7833      	ldrb	r3, [r6, #0]
    7706:	b30b      	cbz	r3, 774c <audioInitString2+0x6c>
    7708:	f24d 045c 	movw	r4, #53340	; 0xd05c
    770c:	f245 17c4 	movw	r7, #20932	; 0x51c4
		{
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    7710:	f245 29e0 	movw	r9, #21216	; 0x52e0
		for (int v = 0; v < numStringsThisBoard; v++)
    7714:	2500      	movs	r5, #0
    7716:	f2c2 0401 	movt	r4, #8193	; 0x2001
    771a:	f2c2 0700 	movt	r7, #8192	; 0x2000
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    771e:	f2c2 0900 	movt	r9, #8192	; 0x2000
    7722:	4620      	mov	r0, r4
    7724:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    7728:	464a      	mov	r2, r9
    772a:	2101      	movs	r1, #1
    772c:	f005 ffa8 	bl	d680 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    7730:	6839      	ldr	r1, [r7, #0]
    7732:	4620      	mov	r0, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    7734:	3404      	adds	r4, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    7736:	4429      	add	r1, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    7738:	3501      	adds	r5, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    773a:	2903      	cmp	r1, #3
    773c:	bfd4      	ite	le
    773e:	2100      	movle	r1, #0
    7740:	2101      	movgt	r1, #1
    7742:	f005 ff79 	bl	d638 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    7746:	7833      	ldrb	r3, [r6, #0]
    7748:	42ab      	cmp	r3, r5
    774a:	dcea      	bgt.n	7722 <audioInitString2+0x42>
		}

		whichStringModelLoaded = String2Loaded;
    774c:	2302      	movs	r3, #2
    774e:	f888 3000 	strb.w	r3, [r8]
	}
}
    7752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeSynth();
    7756:	f005 fddf 	bl	d318 <__audioFreeSynth_veneer>
    775a:	e7cf      	b.n	76fc <audioInitString2+0x1c>
			audioFreeString1();
    775c:	f7ff fbc0 	bl	6ee0 <audioFreeString1>
    7760:	e7cc      	b.n	76fc <audioInitString2+0x1c>
    7762:	bf00      	nop
    7764:	f3af 8000 	nop.w
    7768:	f3af 8000 	nop.w
    776c:	f3af 8000 	nop.w
    7770:	f3af 8000 	nop.w
    7774:	f3af 8000 	nop.w
    7778:	f3af 8000 	nop.w
    777c:	f3af 8000 	nop.w

00007780 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    7780:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    7782:	f240 6694 	movw	r6, #1684	; 0x694
    7786:	f2c2 0600 	movt	r6, #8192	; 0x2000
    778a:	7833      	ldrb	r3, [r6, #0]
    778c:	b163      	cbz	r3, 77a8 <audioFreeString2+0x28>
    778e:	f24d 045c 	movw	r4, #53340	; 0xd05c
    7792:	2500      	movs	r5, #0
    7794:	f2c2 0401 	movt	r4, #8193	; 0x2001
	{
		tTString_free(&strings[v]);
    7798:	4620      	mov	r0, r4
	for (int v = 0; v < numStringsThisBoard; v++)
    779a:	3501      	adds	r5, #1
		tTString_free(&strings[v]);
    779c:	f005 ff54 	bl	d648 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    77a0:	7833      	ldrb	r3, [r6, #0]
    77a2:	3404      	adds	r4, #4
    77a4:	42ab      	cmp	r3, r5
    77a6:	dcf7      	bgt.n	7798 <audioFreeString2+0x18>
	}
}
    77a8:	bd70      	pop	{r4, r5, r6, pc}
    77aa:	bf00      	nop
    77ac:	f3af 8000 	nop.w
    77b0:	f3af 8000 	nop.w
    77b4:	f3af 8000 	nop.w
    77b8:	f3af 8000 	nop.w
    77bc:	f3af 8000 	nop.w

000077c0 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    77c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (whichStringModelLoaded != String2Loaded)
    77c4:	f244 285d 	movw	r8, #16989	; 0x425d
    77c8:	f2c2 0801 	movt	r8, #8193	; 0x2001
{
    77cc:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != String2Loaded)
    77d0:	f898 3000 	ldrb.w	r3, [r8]
    77d4:	2b02      	cmp	r3, #2
    77d6:	d02f      	beq.n	7838 <audioSwitchToString2+0x78>
		if (whichStringModelLoaded == String1Loaded)
    77d8:	2b01      	cmp	r3, #1
    77da:	f000 8084 	beq.w	78e6 <audioSwitchToString2+0x126>
		else if (whichStringModelLoaded == SynthLoaded)
    77de:	2b04      	cmp	r3, #4
    77e0:	d07e      	beq.n	78e0 <audioSwitchToString2+0x120>
		for (int v = 0; v < numStringsThisBoard; v++)
    77e2:	f240 6694 	movw	r6, #1684	; 0x694
    77e6:	f2c2 0600 	movt	r6, #8192	; 0x2000
    77ea:	7833      	ldrb	r3, [r6, #0]
    77ec:	b30b      	cbz	r3, 7832 <audioSwitchToString2+0x72>
    77ee:	f24d 045c 	movw	r4, #53340	; 0xd05c
    77f2:	f245 17c4 	movw	r7, #20932	; 0x51c4
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    77f6:	f245 29e0 	movw	r9, #21216	; 0x52e0
		for (int v = 0; v < numStringsThisBoard; v++)
    77fa:	2500      	movs	r5, #0
    77fc:	f2c2 0401 	movt	r4, #8193	; 0x2001
    7800:	f2c2 0700 	movt	r7, #8192	; 0x2000
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    7804:	f2c2 0900 	movt	r9, #8192	; 0x2000
    7808:	4620      	mov	r0, r4
    780a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    780e:	464a      	mov	r2, r9
    7810:	2101      	movs	r1, #1
    7812:	f005 ff35 	bl	d680 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    7816:	6839      	ldr	r1, [r7, #0]
    7818:	4620      	mov	r0, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    781a:	3404      	adds	r4, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    781c:	4429      	add	r1, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    781e:	3501      	adds	r5, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    7820:	2903      	cmp	r1, #3
    7822:	bfd4      	ite	le
    7824:	2100      	movle	r1, #0
    7826:	2101      	movgt	r1, #1
    7828:	f005 ff06 	bl	d638 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    782c:	7833      	ldrb	r3, [r6, #0]
    782e:	429d      	cmp	r5, r3
    7830:	dbea      	blt.n	7808 <audioSwitchToString2+0x48>
		whichStringModelLoaded = String2Loaded;
    7832:	2302      	movs	r3, #2
    7834:	f888 3000 	strb.w	r3, [r8]
    7838:	f245 2438 	movw	r4, #21048	; 0x5238
	//load string2 default params:
	audioInitString2();
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    783c:	f241 236f 	movw	r3, #4719	; 0x126f
    7840:	f240 67e0 	movw	r7, #1760	; 0x6e0
    7844:	f248 6674 	movw	r6, #34420	; 0x8674
    7848:	f2c2 0400 	movt	r4, #8192	; 0x2000
    784c:	f244 284c 	movw	r8, #16972	; 0x424c
    7850:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    7854:	f245 19d4 	movw	r9, #20948	; 0x51d4
		for (int v = 0; v < numStringsThisBoard; v++)
    7858:	2500      	movs	r5, #0
    785a:	f2c2 0700 	movt	r7, #8192	; 0x2000
    785e:	f2c2 0601 	movt	r6, #8193	; 0x2001
    7862:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    7866:	f2c2 0801 	movt	r8, #8193	; 0x2001
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    786a:	ee08 3a10 	vmov	s16, r3
    786e:	f2c2 0900 	movt	r9, #8192	; 0x2000
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    7872:	f04f 0a01 	mov.w	sl, #1
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    7876:	4620      	mov	r0, r4
    7878:	eeb0 0a48 	vmov.f32	s0, s16
    787c:	f005 ff24 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    7880:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    7884:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    7886:	3404      	adds	r4, #4
		if (voice == 62)
    7888:	2b3e      	cmp	r3, #62	; 0x3e
    788a:	d01d      	beq.n	78c8 <audioSwitchToString2+0x108>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    788c:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 20; i++)
    7890:	3704      	adds	r7, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    7892:	f005 fd29 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    7896:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    7898:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 20; i++)
    789c:	f105 0501 	add.w	r5, r5, #1
    78a0:	d1e9      	bne.n	7876 <audioSwitchToString2+0xb6>
	}
	audioFrameFunction = audioFrameString2;
    78a2:	f241 128c 	movw	r2, #4492	; 0x118c
    78a6:	f248 01a1 	movw	r1, #32929	; 0x80a1
	presetReady = 1;
    78aa:	f245 334c 	movw	r3, #21324	; 0x534c
    78ae:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameString2;
    78b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    78b4:	f2c0 0100 	movt	r1, #0
	presetReady = 1;
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
	audioFrameFunction = audioFrameString2;
    78bc:	6011      	str	r1, [r2, #0]
	presetReady = 1;
    78be:	6018      	str	r0, [r3, #0]
}
    78c0:	ecbd 8b02 	vpop	{d8}
    78c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    78c8:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 20; i++)
    78cc:	3604      	adds	r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    78ce:	f005 fd0b 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    78d2:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    78d4:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 20; i++)
    78d8:	f105 0501 	add.w	r5, r5, #1
    78dc:	d1cb      	bne.n	7876 <audioSwitchToString2+0xb6>
    78de:	e7e0      	b.n	78a2 <audioSwitchToString2+0xe2>
			audioFreeSynth();
    78e0:	f005 fd1a 	bl	d318 <__audioFreeSynth_veneer>
    78e4:	e77d      	b.n	77e2 <audioSwitchToString2+0x22>
			audioFreeString1();
    78e6:	f7ff fafb 	bl	6ee0 <audioFreeString1>
    78ea:	e77a      	b.n	77e2 <audioSwitchToString2+0x22>
    78ec:	f3af 8000 	nop.w
    78f0:	f3af 8000 	nop.w
    78f4:	f3af 8000 	nop.w
    78f8:	f3af 8000 	nop.w
    78fc:	f3af 8000 	nop.w

00007900 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    7900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7904:	f244 2058 	movw	r0, #16984	; 0x4258
    7908:	f245 16e8 	movw	r6, #20968	; 0x51e8
    790c:	f245 2438 	movw	r4, #21048	; 0x5238
    7910:	f2c2 0600 	movt	r6, #8192	; 0x2000
    7914:	f2c2 0001 	movt	r0, #8193	; 0x2001
    7918:	f2c2 0400 	movt	r4, #8192	; 0x2000
    791c:	4635      	mov	r5, r6
    791e:	f106 0750 	add.w	r7, r6, #80	; 0x50
{
    7922:	ed2d 8b0c 	vpush	{d8-d13}
    7926:	b083      	sub	sp, #12
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7928:	f005 fcd2 	bl	d2d0 <__tExpSmooth_tick_veneer>
    792c:	eeb0 9a40 	vmov.f32	s18, s0

	for (int i = 0; i < 20; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    7930:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    7932:	3404      	adds	r4, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    7934:	f005 fccc 	bl	d2d0 <__tExpSmooth_tick_veneer>
    7938:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 20; i++)
    793c:	42af      	cmp	r7, r5
    793e:	d1f7      	bne.n	7930 <audioTickString2+0x30>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    7940:	f245 25e8 	movw	r5, #21224	; 0x52e8
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    7944:	f240 6894 	movw	r8, #1684	; 0x694
	if (newPluck)
    7948:	f2c2 0500 	movt	r5, #8192	; 0x2000
		for (int i = 0; i < numStringsThisBoard; i++)
    794c:	f2c2 0800 	movt	r8, #8192	; 0x2000
	if (newPluck)
    7950:	682b      	ldr	r3, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    7952:	f898 2000 	ldrb.w	r2, [r8]
	if (newPluck)
    7956:	2b00      	cmp	r3, #0
    7958:	d066      	beq.n	7a28 <audioTickString2+0x128>
		for (int i = 0; i < numStringsThisBoard; i++)
    795a:	2a00      	cmp	r2, #0
    795c:	f000 838d 	beq.w	807a <_Min_Stack_Size+0x7a>
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    7960:	2300      	movs	r3, #0
    7962:	f24d 0a5c 	movw	sl, #53340	; 0xd05c
    7966:	f245 3758 	movw	r7, #21336	; 0x5358
    796a:	f244 2904 	movw	r9, #16900	; 0x4204
    796e:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    7972:	f2c2 0a01 	movt	sl, #8193	; 0x2001
    7976:	f2c2 0700 	movt	r7, #8192	; 0x2000
    797a:	f2c2 0901 	movt	r9, #8193	; 0x2001
    797e:	ee08 3a90 	vmov	s17, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7982:	2380      	movs	r3, #128	; 0x80
    7984:	f2c3 7380 	movt	r3, #14208	; 0x3780
    7988:	ee08 3a10 	vmov	s16, r3
				float finalFreq = mtofTableLookup(theNote[i]);
    798c:	2300      	movs	r3, #0
    798e:	ee09 3a90 	vmov	s19, r3
		for (int i = 0; i < numStringsThisBoard; i++)
    7992:	461c      	mov	r4, r3
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    7994:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    7998:	b29b      	uxth	r3, r3
    799a:	2b00      	cmp	r3, #0
    799c:	f040 8354 	bne.w	8048 <_Min_Stack_Size+0x48>
    79a0:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    79a4:	b29b      	uxth	r3, r3
    79a6:	2b00      	cmp	r3, #0
    79a8:	f000 834e 	beq.w	8048 <_Min_Stack_Size+0x48>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79ac:	f244 231c 	movw	r3, #16924	; 0x421c
				stringOctave[i] = octave;
    79b0:	f245 22f4 	movw	r2, #21236	; 0x52f4
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
				stringOctave[i] = octave;
    79b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				stringOctave[i] = octave;
    79c0:	edd2 7a00 	vldr	s15, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    79c4:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79c8:	ed93 0a00 	vldr	s0, [r3]
				stringOctave[i] = octave;
    79cc:	f244 2324 	movw	r3, #16932	; 0x4224
				float amplitz = stringInputs[i] * 0.000015259021897f;
    79d0:	fa1f fb82 	uxth.w	fp, r2
				stringOctave[i] = octave;
    79d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79d8:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    79dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    79e0:	fe80 0a68 	vminnm.f32	s0, s0, s17
    79e4:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
				stringOctave[i] = octave;
    79e8:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    79ec:	f005 fdd4 	bl	d598 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    79f0:	4650      	mov	r0, sl
    79f2:	f005 fc61 	bl	d2b8 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    79f6:	ee07 ba90 	vmov	s15, fp
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    79fa:	ed96 0a02 	vldr	s0, [r6, #8]
    79fe:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7a00:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    7a04:	ee60 0a88 	vmul.f32	s1, s1, s16
    7a08:	f005 fca6 	bl	d358 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7a0c:	f898 2000 	ldrb.w	r2, [r8]
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
			{
				//note off
				tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    7a10:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7a14:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    7a18:	b29b      	uxth	r3, r3
    7a1a:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7a1e:	3401      	adds	r4, #1
    7a20:	42a2      	cmp	r2, r4
    7a22:	dcb7      	bgt.n	7994 <audioTickString2+0x94>
		}
		newPluck = 0;
    7a24:	2300      	movs	r3, #0
    7a26:	602b      	str	r3, [r5, #0]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    7a28:	2a00      	cmp	r2, #0
    7a2a:	f000 832f 	beq.w	808c <_Min_Stack_Size+0x8c>
    7a2e:	2300      	movs	r3, #0
    7a30:	f240 7b30 	movw	fp, #1840	; 0x730
    7a34:	f244 2924 	movw	r9, #16932	; 0x4224
    7a38:	f24d 0a5c 	movw	sl, #53340	; 0xd05c
    7a3c:	ee09 3a90 	vmov	s19, r3
    7a40:	ee0c 3a10 	vmov	s24, r3
    7a44:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    7a48:	f241 1490 	movw	r4, #4496	; 0x1190
    7a4c:	f24d 0764 	movw	r7, #53348	; 0xd064
    7a50:	f2c2 0b00 	movt	fp, #8192	; 0x2000
    7a54:	ee0b 3a90 	vmov	s23, r3
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    7a58:	2300      	movs	r3, #0
    7a5a:	f8cd 8004 	str.w	r8, [sp, #4]
    7a5e:	f2c2 0901 	movt	r9, #8193	; 0x2001
    7a62:	f2c4 23f6 	movt	r3, #17142	; 0x42f6
    7a66:	f2c2 0a01 	movt	sl, #8193	; 0x2001
    7a6a:	f2c2 0400 	movt	r4, #8192	; 0x2000
    7a6e:	f2c2 0701 	movt	r7, #8193	; 0x2001
    7a72:	ee0b 3a10 	vmov	s22, r3
    7a76:	f247 339c 	movw	r3, #29596	; 0x739c
    7a7a:	2500      	movs	r5, #0
    7a7c:	46d8      	mov	r8, fp
    7a7e:	f6c3 63ce 	movt	r3, #16078	; 0x3ece
    7a82:	ee0a 3a90 	vmov	s21, r3
    7a86:	2300      	movs	r3, #0
    7a88:	f2c4 238c 	movt	r3, #17036	; 0x428c
    7a8c:	ee0a 3a10 	vmov	s20, r3
			float thisString = (firstString + i);
			float thisStringProportion = thisString * invNumStrings;
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
			if (knobScaled[5] > 0.05f)
    7a90:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7a94:	f6c3 534c 	movt	r3, #15692	; 0x3d4c
    7a98:	ee0c 3a90 	vmov	s25, r3
    7a9c:	f244 231c 	movw	r3, #16924	; 0x421c
    7aa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    7aa4:	9300      	str	r3, [sp, #0]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7aa6:	9b00      	ldr	r3, [sp, #0]
    7aa8:	46a3      	mov	fp, r4
    7aaa:	ecf9 7a01 	vldmia	r9!, {s15}
    7aae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7ab2:	edd3 8a00 	vldr	s17, [r3]
    7ab6:	ee78 8aa7 	vadd.f32	s17, s17, s15
    7aba:	fec8 8aeb 	vminnm.f32	s17, s17, s23
    7abe:	fec8 8a8c 	vmaxnm.f32	s17, s17, s24
		float finalFreq = mtofTableLookup(theNote[i]);
    7ac2:	eeb0 0a68 	vmov.f32	s0, s17
    7ac6:	f005 fd67 	bl	d598 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    7aca:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    7ace:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    7ad2:	ee38 0ae7 	vsub.f32	s0, s17, s15
    7ad6:	f005 fd5f 	bl	d598 <__mtofTableLookup_veneer>
    7ada:	eef0 7a4a 	vmov.f32	s15, s20
    7ade:	ee30 7a4b 	vsub.f32	s14, s0, s22
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    7ae2:	4650      	mov	r0, sl
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    7ae4:	eeb0 8a40 	vmov.f32	s16, s0
    7ae8:	eee7 7a2a 	vfma.f32	s15, s14, s21
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    7aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    7af0:	ee17 1a90 	vmov	r1, s15
    7af4:	f005 fd64 	bl	d5c0 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    7af8:	6839      	ldr	r1, [r7, #0]
    7afa:	2900      	cmp	r1, #0
    7afc:	d15f      	bne.n	7bbe <audioTickString2+0x2be>
			float thisString = (firstString + i);
    7afe:	f245 13c4 	movw	r3, #20932	; 0x51c4
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    7b06:	ed96 5a0b 	vldr	s10, [r6, #44]	; 0x2c
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    7b0a:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
			float thisString = (firstString + i);
    7b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7b12:	edd6 5a0a 	vldr	s11, [r6, #40]	; 0x28
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    7b16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
			if (knobScaled[5] > 0.05f)
    7b1a:	ed96 7a05 	vldr	s14, [r6, #20]
			float thisString = (firstString + i);
    7b1e:	681b      	ldr	r3, [r3, #0]
			if (knobScaled[5] > 0.05f)
    7b20:	eeb4 7aec 	vcmpe.f32	s14, s25
			float thisString = (firstString + i);
    7b24:	442b      	add	r3, r5
    7b26:	ee07 3a90 	vmov	s15, r3
			float thisStringProportion = thisString * invNumStrings;
    7b2a:	f240 6388 	movw	r3, #1672	; 0x688
			if (knobScaled[5] > 0.05f)
    7b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			float thisStringProportion = thisString * invNumStrings;
    7b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
			float thisString = (firstString + i);
    7b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    7b3a:	edd3 4a00 	vldr	s9, [r3]
    7b3e:	ee67 7aa4 	vmul.f32	s15, s15, s9
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7b42:	ee76 6ae7 	vsub.f32	s13, s13, s15
    7b46:	ee67 7a85 	vmul.f32	s15, s15, s10
    7b4a:	eee5 7aa6 	vfma.f32	s15, s11, s13
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    7b4e:	eea7 0a86 	vfma.f32	s0, s15, s12
    7b52:	eef0 da40 	vmov.f32	s27, s0
			if (knobScaled[5] > 0.05f)
    7b56:	f340 825d 	ble.w	8014 <_Min_Stack_Size+0x14>
    7b5a:	f24b 5303 	movw	r3, #46339	; 0xb503
    7b5e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
			{
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    7b62:	eef0 0a4d 	vmov.f32	s1, s26
    7b66:	4650      	mov	r0, sl
    7b68:	f2cb 53d7 	movt	r3, #46551	; 0xb5d7
    7b6c:	ee78 8ae7 	vsub.f32	s17, s17, s15
    7b70:	ee06 3a90 	vmov	s13, r3
    7b74:	f24b 7317 	movw	r3, #46871	; 0xb717
    7b78:	f6c3 03d1 	movt	r3, #14545	; 0x38d1
    7b7c:	ee07 3a90 	vmov	s15, r3
    7b80:	f24d 730a 	movw	r3, #55050	; 0xd70a
    7b84:	eee8 7aa6 	vfma.f32	s15, s17, s13
    7b88:	f6c3 4323 	movt	r3, #15395	; 0x3c23
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    7b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    7b90:	ee07 3a90 	vmov	s15, r3
    7b94:	f64c 4377 	movw	r3, #52343	; 0xcc77
    7b98:	f2c3 232b 	movt	r3, #12843	; 0x322b
    7b9c:	fe87 7a67 	vminnm.f32	s14, s14, s15
    7ba0:	ee00 3a10 	vmov	s0, r3
    7ba4:	fe87 0a00 	vmaxnm.f32	s0, s14, s0
    7ba8:	f005 fdea 	bl	d780 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    7bac:	4650      	mov	r0, sl
    7bae:	2101      	movs	r1, #1
    7bb0:	f005 fcda 	bl	d568 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    7bb4:	eeb0 0a6d 	vmov.f32	s0, s27
    7bb8:	4650      	mov	r0, sl
    7bba:	f005 fd39 	bl	d630 <__tTString_setHarmonic_veneer>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    7bbe:	ed94 0a00 	vldr	s0, [r4]
    7bc2:	4650      	mov	r0, sl
    7bc4:	f005 fc34 	bl	d430 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    7bc8:	eeb0 0a48 	vmov.f32	s0, s16
    7bcc:	4650      	mov	r0, sl
    7bce:	f005 fc97 	bl	d500 <__tTString_setOpenStringFrequency_veneer>



		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    7bd2:	ed96 0a06 	vldr	s0, [r6, #24]
    7bd6:	4650      	mov	r0, sl
    7bd8:	f005 fcfe 	bl	d5d8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    7bdc:	ed96 0a07 	vldr	s0, [r6, #28]
    7be0:	4650      	mov	r0, sl
    7be2:	f005 fcb1 	bl	d548 <__tTString_setFeedbackReactionSpeed_veneer>

		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    7be6:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    7bea:	4650      	mov	r0, sl
    7bec:	f005 fb60 	bl	d2b0 <__tTString_setRippleDepth_veneer>





		tTString_setFreq(&strings[i], finalFreq);
    7bf0:	eeb0 0a4d 	vmov.f32	s0, s26
    7bf4:	4650      	mov	r0, sl
    7bf6:	f005 fb5f 	bl	d2b8 <__tTString_setFreq_veneer>



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    7bfa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    7bfe:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7c02:	ed96 5a01 	vldr	s10, [r6, #4]
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
    7c06:	f646 430b 	movw	r3, #27659	; 0x6c0b
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    7c0a:	edd6 6a00 	vldr	s13, [r6]
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    7c0e:	ed98 6a00 	vldr	s12, [r8]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    7c12:	eef0 5a67 	vmov.f32	s11, s15
    7c16:	f6c4 3307 	movt	r3, #19207	; 0x4b07
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7c1a:	eee5 7a07 	vfma.f32	s15, s10, s14
			if (stringParams[i][0][0] > openStringFreq)
    7c1e:	eeb4 8ac6 	vcmpe.f32	s16, s12
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    7c22:	eee6 5a87 	vfma.f32	s11, s13, s14
    7c26:	ee07 3a10 	vmov	s14, r3
    7c2a:	f24e 2350 	movw	r3, #57936	; 0xe250
			if (stringParams[i][0][0] > openStringFreq)
    7c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c32:	f6c4 637d 	movt	r3, #20093	; 0x4e7d
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7c36:	eef0 6a67 	vmov.f32	s13, s15
    7c3a:	ee05 3a10 	vmov	s10, r3
    7c3e:	ee07 3a90 	vmov	s15, r3
    7c42:	eea5 5a87 	vfma.f32	s10, s11, s14
    7c46:	eee6 7a87 	vfma.f32	s15, s13, s14
    return u.d;
    7c4a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    7c4e:	eefd 8ae7 	vcvt.s32.f32	s17, s15
			if (stringParams[i][0][0] > openStringFreq)
    7c52:	f100 81b1 	bmi.w	7fb8 <audioTickString2+0x6b8>
		float oneMinusAlpha = 1.0f;
    7c56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    7c5a:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
		float alpha = 0.0f;
    7c5e:	eeb0 6a4c 	vmov.f32	s12, s24
			if (stringParams[i][0][0] > openStringFreq)
    7c62:	eeb4 8ae7 	vcmpe.f32	s16, s15
				if (stringParams[i+1][0][0] < openStringFreq)
    7c66:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
			if (stringParams[i][0][0] > openStringFreq)
    7c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c6e:	f140 81a0 	bpl.w	7fb2 <audioTickString2+0x6b2>
				if (stringParams[i+1][0][0] < openStringFreq)
    7c72:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c7a:	f340 819a 	ble.w	7fb2 <audioTickString2+0x6b2>
    return ((value - istart) / (istop - istart));
    7c7e:	ee78 6a67 	vsub.f32	s13, s16, s15
				{
					which = i;
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
    7c82:	2002      	movs	r0, #2
    7c84:	ee77 7a67 	vsub.f32	s15, s14, s15
					which = i;
    7c88:	2101      	movs	r1, #1
					oneMinusAlpha = 1.0f - alpha;
    7c8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7c8e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    7c92:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7c96:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7c9a:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    7c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ca2:	d510      	bpl.n	7cc6 <audioTickString2+0x3c6>
				if (stringParams[i+1][0][0] < openStringFreq)
    7ca4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cac:	dd0b      	ble.n	7cc6 <audioTickString2+0x3c6>
    7cae:	ee78 6a47 	vsub.f32	s13, s16, s14
					oneMinusAlpha = 1.0f - alpha;
    7cb2:	2003      	movs	r0, #3
    7cb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
					which = i;
    7cb8:	2102      	movs	r1, #2
					oneMinusAlpha = 1.0f - alpha;
    7cba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7cbe:	ee86 6a87 	vdiv.f32	s12, s13, s14
    7cc2:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7cc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
				if (stringParams[i+1][0][0] < openStringFreq)
    7cca:	ed98 7a24 	vldr	s14, [r8, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    7cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cd2:	d510      	bpl.n	7cf6 <audioTickString2+0x3f6>
				if (stringParams[i+1][0][0] < openStringFreq)
    7cd4:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cdc:	dd0b      	ble.n	7cf6 <audioTickString2+0x3f6>
    7cde:	ee78 6a67 	vsub.f32	s13, s16, s15
					oneMinusAlpha = 1.0f - alpha;
    7ce2:	2004      	movs	r0, #4
    7ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
					which = i;
    7ce8:	2103      	movs	r1, #3
					oneMinusAlpha = 1.0f - alpha;
    7cea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7cee:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    7cf2:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7cf6:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7cfa:	edd8 7a2d 	vldr	s15, [r8, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    7cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d02:	d510      	bpl.n	7d26 <audioTickString2+0x426>
				if (stringParams[i+1][0][0] < openStringFreq)
    7d04:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d0c:	dd0b      	ble.n	7d26 <audioTickString2+0x426>
    7d0e:	ee78 6a47 	vsub.f32	s13, s16, s14
					oneMinusAlpha = 1.0f - alpha;
    7d12:	2005      	movs	r0, #5
    7d14:	ee37 7ac7 	vsub.f32	s14, s15, s14
					which = i;
    7d18:	2104      	movs	r1, #4
					oneMinusAlpha = 1.0f - alpha;
    7d1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7d1e:	ee86 6a87 	vdiv.f32	s12, s13, s14
    7d22:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7d26:	eeb4 8ae7 	vcmpe.f32	s16, s15
				if (stringParams[i+1][0][0] < openStringFreq)
    7d2a:	ed98 7a36 	vldr	s14, [r8, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    7d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d32:	d510      	bpl.n	7d56 <audioTickString2+0x456>
				if (stringParams[i+1][0][0] < openStringFreq)
    7d34:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d3c:	dd0b      	ble.n	7d56 <audioTickString2+0x456>
    7d3e:	ee78 6a67 	vsub.f32	s13, s16, s15
					oneMinusAlpha = 1.0f - alpha;
    7d42:	2006      	movs	r0, #6
    7d44:	ee77 7a67 	vsub.f32	s15, s14, s15
					which = i;
    7d48:	2105      	movs	r1, #5
					oneMinusAlpha = 1.0f - alpha;
    7d4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7d4e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    7d52:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7d56:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7d5a:	edd8 7a3f 	vldr	s15, [r8, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    7d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d62:	d510      	bpl.n	7d86 <audioTickString2+0x486>
				if (stringParams[i+1][0][0] < openStringFreq)
    7d64:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d6c:	dd0b      	ble.n	7d86 <audioTickString2+0x486>
    7d6e:	ee78 6a47 	vsub.f32	s13, s16, s14
					oneMinusAlpha = 1.0f - alpha;
    7d72:	2007      	movs	r0, #7
    7d74:	ee37 7ac7 	vsub.f32	s14, s15, s14
					which = i;
    7d78:	2106      	movs	r1, #6
					oneMinusAlpha = 1.0f - alpha;
    7d7a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7d7e:	ee86 6a87 	vdiv.f32	s12, s13, s14
    7d82:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7d86:	eeb4 8ae7 	vcmpe.f32	s16, s15
				if (stringParams[i+1][0][0] < openStringFreq)
    7d8a:	ed98 7a48 	vldr	s14, [r8, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    7d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d92:	d510      	bpl.n	7db6 <audioTickString2+0x4b6>
				if (stringParams[i+1][0][0] < openStringFreq)
    7d94:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d9c:	dd0b      	ble.n	7db6 <audioTickString2+0x4b6>
    7d9e:	ee78 6a67 	vsub.f32	s13, s16, s15
					oneMinusAlpha = 1.0f - alpha;
    7da2:	2008      	movs	r0, #8
    7da4:	ee77 7a67 	vsub.f32	s15, s14, s15
					which = i;
    7da8:	2107      	movs	r1, #7
					oneMinusAlpha = 1.0f - alpha;
    7daa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7dae:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    7db2:	ee75 5ac6 	vsub.f32	s11, s11, s12
			if (stringParams[i][0][0] > openStringFreq)
    7db6:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dbe:	d513      	bpl.n	7de8 <audioTickString2+0x4e8>
				if (stringParams[i+1][0][0] < openStringFreq)
    7dc0:	edd8 7a51 	vldr	s15, [r8, #324]	; 0x144
    7dc4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dcc:	f340 812d 	ble.w	802a <_Min_Stack_Size+0x2a>
    7dd0:	ee38 8a47 	vsub.f32	s16, s16, s14
					oneMinusAlpha = 1.0f - alpha;
    7dd4:	2009      	movs	r0, #9
    7dd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
					which = i;
    7dda:	2108      	movs	r1, #8
					oneMinusAlpha = 1.0f - alpha;
    7ddc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7de0:	ee88 6a27 	vdiv.f32	s12, s16, s15
    7de4:	ee75 5ac6 	vsub.f32	s11, s11, s12
					which = 9;
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    7de8:	f64a 23ab 	movw	r3, #43691	; 0xaaab
    7dec:	ed9b 7a00 	vldr	s14, [fp]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    7df4:	2909      	cmp	r1, #9
		float barHeight = barInMIDI[i] / 12.0f;
    7df6:	f6c3 53aa 	movt	r3, #15786	; 0x3daa
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7dfa:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    7dfe:	f104 0404 	add.w	r4, r4, #4
		float barHeight = barInMIDI[i] / 12.0f;
    7e02:	ee07 3a90 	vmov	s15, r3
    7e06:	ee27 7a27 	vmul.f32	s14, s14, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7e0a:	ee76 7ac7 	vsub.f32	s15, s13, s14
		uint32_t barHeightInt = (uint32_t)barHeight;
    7e0e:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    7e12:	ee16 ca90 	vmov	ip, s13
		float barHeightAlpha = barHeight - barHeightInt;
    7e16:	eef8 4a66 	vcvt.f32.u32	s9, s13
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7e1a:	f10c 0301 	add.w	r3, ip, #1
		float barHeightAlpha = barHeight - barHeightInt;
    7e1e:	ee77 6a64 	vsub.f32	s13, s14, s9
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7e22:	ee07 3a10 	vmov	s14, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7e26:	ee77 4aa4 	vadd.f32	s9, s15, s9
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7e2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7e2e:	fe87 7a44 	vminnm.f32	s14, s14, s8
    7e32:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    7e36:	ee17 3a90 	vmov	r3, s15
		if (which == 9)
    7e3a:	f000 80cf 	beq.w	7fdc <audioTickString2+0x6dc>
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e3e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
	for (int i = 0; i < numStringsThisBoard; i++)
    7e42:	3501      	adds	r5, #1
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e44:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    7e48:	0080      	lsls	r0, r0, #2
    7e4a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    7e4e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    7e52:	0089      	lsls	r1, r1, #2
    7e54:	4440      	add	r0, r8
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7e56:	edd0 3a02 	vldr	s7, [r0, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e5a:	ed90 4a01 	vldr	s8, [r0, #4]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e5e:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
    7e62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7e66:	ee66 3a23 	vmul.f32	s7, s12, s7
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e6a:	0080      	lsls	r0, r0, #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e6c:	ee26 4a04 	vmul.f32	s8, s12, s8
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7e74:	eb00 008c 	add.w	r0, r0, ip, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e78:	eb01 018c 	add.w	r1, r1, ip, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e7c:	4443      	add	r3, r8
    7e7e:	4440      	add	r0, r8
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e80:	4441      	add	r1, r8
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7e82:	edd3 2a02 	vldr	s5, [r3, #8]
    7e86:	ed90 7a02 	vldr	s14, [r0, #8]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7e8a:	edd1 7a02 	vldr	s15, [r1, #8]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7e8e:	ee26 7a07 	vmul.f32	s14, s12, s14
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e92:	ed93 3a01 	vldr	s6, [r3, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    7e96:	eee7 3aa5 	vfma.f32	s7, s15, s11
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7e9a:	edd0 7a01 	vldr	s15, [r0, #4]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7e9e:	ed91 2a01 	vldr	s4, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    7ea2:	eea2 7aa5 	vfma.f32	s14, s5, s11
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7ea6:	ee66 7a27 	vmul.f32	s15, s12, s15
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7eaa:	eea2 4a25 	vfma.f32	s8, s4, s11
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7eae:	eee3 7a25 	vfma.f32	s15, s6, s11
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    7eb2:	ee26 7a87 	vmul.f32	s14, s13, s14
    7eb6:	eea4 7aa3 	vfma.f32	s14, s9, s7
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    7eba:	ee26 8aa7 	vmul.f32	s16, s13, s15
    7ebe:	eea4 8a84 	vfma.f32	s16, s9, s8
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    7ec2:	ee27 0a05 	vmul.f32	s0, s14, s10
    7ec6:	4650      	mov	r0, sl
    7ec8:	f005 fb32 	bl	d530 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    7ecc:	4650      	mov	r0, sl
    7ece:	ee28 0a28 	vmul.f32	s0, s16, s17
    7ed2:	f005 fbe5 	bl	d6a0 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]) * 0.5f;
    7ed6:	4650      	mov	r0, sl
    7ed8:	f005 fa42 	bl	d360 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    7edc:	9b01      	ldr	r3, [sp, #4]
		temp += tTString_tick(&strings[i]) * 0.5f;
    7ede:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	for (int i = 0; i < numStringsThisBoard; i++)
    7ee2:	f10a 0a04 	add.w	sl, sl, #4
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	42ab      	cmp	r3, r5
		temp += tTString_tick(&strings[i]) * 0.5f;
    7eea:	eee0 9a27 	vfma.f32	s19, s0, s15
	for (int i = 0; i < numStringsThisBoard; i++)
    7eee:	f73f adda 	bgt.w	7aa6 <audioTickString2+0x1a6>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    7ef2:	f64a 400b 	movw	r0, #44043	; 0xac0b
    7ef6:	f244 2313 	movw	r3, #16915	; 0x4213
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7efa:	ee29 5a09 	vmul.f32	s10, s18, s18
    7efe:	f24a 2185 	movw	r1, #41605	; 0xa285
    7f02:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    7f06:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    7f0a:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
    7f0e:	f64b 620a 	movw	r2, #48650	; 0xbe0a
    7f12:	ee07 0a10 	vmov	s14, r0
    7f16:	ee07 3a90 	vmov	s15, r3
    7f1a:	ee65 5a09 	vmul.f32	s11, s10, s18
    7f1e:	ee06 1a10 	vmov	s12, r1
    7f22:	eee9 7a07 	vfma.f32	s15, s18, s14
    7f26:	f2c4 0222 	movt	r2, #16418	; 0x4022
    7f2a:	f246 3113 	movw	r1, #25363	; 0x6313

	temp *= outVol * masterVolFromBrain;
    7f2e:	f240 608c 	movw	r0, #1676	; 0x68c
    7f32:	ee07 2a10 	vmov	s14, r2
	thisFrameCount = (thisFrameCount + 1) & 63;
    7f36:	683b      	ldr	r3, [r7, #0]
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7f38:	f2c4 0151 	movt	r1, #16465	; 0x4051
	temp *= outVol * masterVolFromBrain;
    7f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
	thisFrameCount = (thisFrameCount + 1) & 63;
    7f40:	3301      	adds	r3, #1
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7f42:	ee06 1a90 	vmov	s13, r1
	temp *= outVol * masterVolFromBrain;
    7f46:	edd0 4a00 	vldr	s9, [r0]
    7f4a:	eee5 7a86 	vfma.f32	s15, s11, s12
	thisFrameCount = (thisFrameCount + 1) & 63;
    7f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7f52:	ee29 9a26 	vmul.f32	s18, s18, s13
	thisFrameCount = (thisFrameCount + 1) & 63;
    7f56:	603b      	str	r3, [r7, #0]
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7f58:	eee5 7a47 	vfms.f32	s15, s10, s14
    7f5c:	eee5 7ac9 	vfms.f32	s15, s11, s18
	temp *= outVol * masterVolFromBrain;
    7f60:	ee27 0aa4 	vmul.f32	s0, s15, s9
	temp = tanhf(temp);
    7f64:	ee20 0a29 	vmul.f32	s0, s0, s19
    7f68:	f005 fb32 	bl	d5d0 <__tanhf_veneer>
    if (val < min)
    7f6c:	f649 43bc 	movw	r3, #40124	; 0x9cbc
    7f70:	f6cb 7382 	movt	r3, #49026	; 0xbf82
    7f74:	ee07 3a90 	vmov	s15, r3
    7f78:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f80:	d474      	bmi.n	806c <_Min_Stack_Size+0x6c>
    else if (val > max)
    7f82:	f649 43bc 	movw	r3, #40124	; 0x9cbc
    7f86:	f6c3 7382 	movt	r3, #16258	; 0x3f82
    7f8a:	ee07 3a90 	vmov	s15, r3
    7f8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f96:	dc50      	bgt.n	803a <_Min_Stack_Size+0x3a>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7f98:	f24e 1348 	movw	r3, #57672	; 0xe148
    7f9c:	f6c3 737a 	movt	r3, #16250	; 0x3f7a
    7fa0:	ee07 3a90 	vmov	s15, r3
    7fa4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    7fa8:	b003      	add	sp, #12
    7faa:	ecbd 8b0c 	vpop	{d8-d13}
    7fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (stringParams[i+1][0][0] < openStringFreq)
    7fb2:	2001      	movs	r0, #1
    7fb4:	2100      	movs	r1, #0
    7fb6:	e66e      	b.n	7c96 <audioTickString2+0x396>
    7fb8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    7fbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7fc4:	dd34      	ble.n	8030 <_Min_Stack_Size+0x30>
    return ((value - istart) / (istop - istart));
    7fc6:	ee78 6a46 	vsub.f32	s13, s16, s12
    7fca:	ee37 7ac6 	vsub.f32	s14, s15, s12
					oneMinusAlpha = 1.0f - alpha;
    7fce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7fd2:	ee86 6a87 	vdiv.f32	s12, s13, s14
    7fd6:	ee75 5ac6 	vsub.f32	s11, s11, s12
    7fda:	e642      	b.n	7c62 <audioTickString2+0x362>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    7fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	for (int i = 0; i < numStringsThisBoard; i++)
    7fe0:	3501      	adds	r5, #1
			float freq1 = stringParams[9][barHeightInt][1];
    7fe2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    7fe6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    7fea:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    7fee:	ed93 0a53 	vldr	s0, [r3, #332]	; 0x14c
    7ff2:	ed9c 7a53 	vldr	s14, [ip, #332]	; 0x14c
    7ff6:	ee26 0a80 	vmul.f32	s0, s13, s0
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    7ffa:	ed93 8a52 	vldr	s16, [r3, #328]	; 0x148
    7ffe:	eddc 7a52 	vldr	s15, [ip, #328]	; 0x148
    8002:	ee26 8a88 	vmul.f32	s16, s13, s16
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    8006:	eea4 0a87 	vfma.f32	s0, s9, s14
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    800a:	eea4 8aa7 	vfma.f32	s16, s9, s15
		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    800e:	ee20 0a05 	vmul.f32	s0, s0, s10
    8012:	e758      	b.n	7ec6 <audioTickString2+0x5c6>
				tTString_setInharmonic(&strings[i], 0);
    8014:	4650      	mov	r0, sl
    8016:	f005 faa7 	bl	d568 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    801a:	eebc 0aed 	vcvt.u32.f32	s0, s27
    801e:	4650      	mov	r0, sl
    8020:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    8024:	f005 fb04 	bl	d630 <__tTString_setHarmonic_veneer>
    8028:	e5c9      	b.n	7bbe <audioTickString2+0x2be>
				if (stringParams[i+1][0][0] < openStringFreq)
    802a:	2009      	movs	r0, #9
					which = 9;
    802c:	4601      	mov	r1, r0
    802e:	e6db      	b.n	7de8 <audioTickString2+0x4e8>
		float oneMinusAlpha = 1.0f;
    8030:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    8034:	eeb0 6a4c 	vmov.f32	s12, s24
    8038:	e613      	b.n	7c62 <audioTickString2+0x362>
        return max;
    803a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
    803e:	b003      	add	sp, #12
    8040:	ecbd 8b0c 	vpop	{d8-d13}
    8044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8048:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    804c:	b29b      	uxth	r3, r3
    804e:	2b00      	cmp	r3, #0
    8050:	f43f acde 	beq.w	7a10 <audioTickString2+0x110>
    8054:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    8058:	b29b      	uxth	r3, r3
    805a:	2b00      	cmp	r3, #0
    805c:	f47f acd8 	bne.w	7a10 <audioTickString2+0x110>
				tTString_mute(&strings[i]);
    8060:	4650      	mov	r0, sl
    8062:	f005 fa2d 	bl	d4c0 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    8066:	f898 2000 	ldrb.w	r2, [r8]
    806a:	e4d1      	b.n	7a10 <audioTickString2+0x110>
        return min;
    806c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
    8070:	b003      	add	sp, #12
    8072:	ecbd 8b0c 	vpop	{d8-d13}
    8076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		newPluck = 0;
    807a:	2300      	movs	r3, #0
    807c:	f24d 0764 	movw	r7, #53348	; 0xd064
    8080:	602a      	str	r2, [r5, #0]
    8082:	ee09 3a90 	vmov	s19, r3
    8086:	f2c2 0701 	movt	r7, #8193	; 0x2001
    808a:	e732      	b.n	7ef2 <audioTickString2+0x5f2>
	for (int i = 0; i < numStringsThisBoard; i++)
    808c:	2300      	movs	r3, #0
    808e:	f24d 0764 	movw	r7, #53348	; 0xd064
    8092:	ee09 3a90 	vmov	s19, r3
    8096:	f2c2 0701 	movt	r7, #8193	; 0x2001
    809a:	e72a      	b.n	7ef2 <audioTickString2+0x5f2>
    809c:	f3af 8000 	nop.w

000080a0 <audioFrameString2>:
{
    80a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    80a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		if (resetStringInputs)
    80a8:	f245 7b71 	movw	fp, #22385	; 0x5771
			for (int i = 0; i < numStringsThisBoard; i++)
    80ac:	f240 6994 	movw	r9, #1684	; 0x694
{
    80b0:	4607      	mov	r7, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    80b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
		if (resetStringInputs)
    80b6:	f2c2 0b00 	movt	fp, #8192	; 0x2000
			for (int i = 0; i < numStringsThisBoard; i++)
    80ba:	f2c2 0900 	movt	r9, #8192	; 0x2000
{
    80be:	ed2d 8b04 	vpush	{d8-d9}
		uint32_t tempCountFrame = DWT->CYCCNT;
    80c2:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    80c4:	f89b 3000 	ldrb.w	r3, [fp]
    80c8:	2b00      	cmp	r3, #0
    80ca:	f040 80a4 	bne.w	8216 <audioFrameString2+0x176>
			for (int i = 0; i < numStringsThisBoard; i++)
    80ce:	f899 3000 	ldrb.w	r3, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    80d2:	2b00      	cmp	r3, #0
    80d4:	d063      	beq.n	819e <audioFrameString2+0xfe>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    80d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		for (int i = 0; i < numStringsThisBoard; i++)
    80da:	f04f 0800 	mov.w	r8, #0
    80de:	f24d 045c 	movw	r4, #53340	; 0xd05c
    80e2:	f245 15e8 	movw	r5, #20968	; 0x51e8
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    80e6:	f2c4 53bb 	movt	r3, #17851	; 0x45bb
    80ea:	f2c2 0401 	movt	r4, #8193	; 0x2001
    80ee:	f2c2 0500 	movt	r5, #8192	; 0x2000
    80f2:	ee08 3a10 	vmov	s16, r3
    80f6:	4643      	mov	r3, r8
    80f8:	f2c4 437a 	movt	r3, #17530	; 0x447a
    80fc:	ee09 3a10 	vmov	s18, r3
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    8100:	4643      	mov	r3, r8
    8102:	f2c4 2370 	movt	r3, #17008	; 0x4270
    8106:	ee08 3a90 	vmov	s17, r3
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    810a:	4620      	mov	r0, r4
    810c:	ed95 0a03 	vldr	s0, [r5, #12]
    8110:	f005 f9e6 	bl	d4e0 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    8114:	4620      	mov	r0, r4
    8116:	ed95 0a04 	vldr	s0, [r5, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    811a:	f108 0801 	add.w	r8, r8, #1
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    811e:	f005 fb1b 	bl	d758 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    8122:	eeb0 0a49 	vmov.f32	s0, s18
    8126:	edd5 7a08 	vldr	s15, [r5, #32]
    812a:	4620      	mov	r0, r4
    812c:	eea7 0a88 	vfma.f32	s0, s15, s16
    8130:	f005 fafa 	bl	d728 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    8134:	4620      	mov	r0, r4
    8136:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    813a:	f005 faa9 	bl	d690 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    813e:	4620      	mov	r0, r4
    8140:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    8144:	f005 f920 	bl	d388 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    8148:	4620      	mov	r0, r4
    814a:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    814e:	f005 f987 	bl	d460 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    8152:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8156:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    815a:	4620      	mov	r0, r4
    815c:	ee30 0a27 	vadd.f32	s0, s0, s15
    8160:	f005 f8ea 	bl	d338 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    8164:	eeb0 0a68 	vmov.f32	s0, s17
    8168:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    816c:	4620      	mov	r0, r4
    816e:	eea7 0a88 	vfma.f32	s0, s15, s16
    8172:	f005 fa75 	bl	d660 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    8176:	4620      	mov	r0, r4
    8178:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    817c:	f005 f9a8 	bl	d4d0 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    8180:	4620      	mov	r0, r4
    8182:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    8186:	f005 f9f3 	bl	d570 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    818a:	4620      	mov	r0, r4
    818c:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
		for (int i = 0; i < numStringsThisBoard; i++)
    8190:	3404      	adds	r4, #4
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    8192:	f005 f829 	bl	d1e8 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    8196:	f899 3000 	ldrb.w	r3, [r9]
    819a:	4543      	cmp	r3, r8
    819c:	dcb5      	bgt.n	810a <audioFrameString2+0x6a>
    819e:	f240 0400 	movw	r4, #0
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    81a2:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
    81a6:	f2c3 0400 	movt	r4, #12288	; 0x3000
    81aa:	ee08 3a10 	vmov	s16, r3
    81ae:	f504 7500 	add.w	r5, r4, #512	; 0x200
    81b2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    81b6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    81ba:	f7ff fba1 	bl	7900 <audioTickString2>
    81be:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    81c2:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    81c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    81c8:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    81ca:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    81ce:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    81d2:	d1f2      	bne.n	81ba <audioFrameString2+0x11a>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81d8:	f240 6084 	movw	r0, #1668	; 0x684
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81dc:	f244 2140 	movw	r1, #16960	; 0x4240
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81e0:	f245 12cc 	movw	r2, #20940	; 0x51cc
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81ec:	f2c2 0101 	movt	r1, #8193	; 0x2001
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81f4:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81f6:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    81fa:	1b9b      	subs	r3, r3, r6
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    81fc:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8200:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8202:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8206:	ee67 7a87 	vmul.f32	s15, s15, s14
    820a:	edc2 7a00 	vstr	s15, [r2]
}
    820e:	ecbd 8b04 	vpop	{d8-d9}
    8212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int i = 0; i < numStringsThisBoard; i++)
    8216:	f899 3000 	ldrb.w	r3, [r9]
    821a:	b1fb      	cbz	r3, 825c <audioFrameString2+0x1bc>
    821c:	f24d 055c 	movw	r5, #53340	; 0xd05c
    8220:	2400      	movs	r4, #0
    8222:	f245 3858 	movw	r8, #21336	; 0x5358
    8226:	f2c2 0501 	movt	r5, #8193	; 0x2001
				previousStringInputs[i] = 0;
    822a:	46a2      	mov	sl, r4
    822c:	f2c2 0800 	movt	r8, #8192	; 0x2000
				tTString_mute(&strings[i]);
    8230:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    8232:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    8234:	f005 f944 	bl	d4c0 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    8238:	f899 3000 	ldrb.w	r3, [r9]
				previousStringInputs[i] = 0;
    823c:	f828 a014 	strh.w	sl, [r8, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    8240:	3401      	adds	r4, #1
				previousStringInputs[i] = 0;
    8242:	f04f 0200 	mov.w	r2, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    8246:	42a3      	cmp	r3, r4
    8248:	dcf2      	bgt.n	8230 <audioFrameString2+0x190>
			resetStringInputs = 0;
    824a:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    824e:	f245 22e8 	movw	r2, #21224	; 0x52e8
    8252:	2101      	movs	r1, #1
    8254:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8258:	6011      	str	r1, [r2, #0]
    825a:	e73a      	b.n	80d2 <audioFrameString2+0x32>
    825c:	f245 22e8 	movw	r2, #21224	; 0x52e8
			resetStringInputs = 0;
    8260:	f88b 3000 	strb.w	r3, [fp]
			newPluck = 1;
    8264:	2301      	movs	r3, #1
    8266:	f2c2 0200 	movt	r2, #8192	; 0x2000
    826a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    826c:	e797      	b.n	819e <audioFrameString2+0xfe>
    826e:	bf00      	nop
	...

00008280 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    8280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    8282:	f240 6694 	movw	r6, #1684	; 0x694
    8286:	f2c2 0600 	movt	r6, #8192	; 0x2000
    828a:	7833      	ldrb	r3, [r6, #0]
    828c:	b193      	cbz	r3, 82b4 <audioInitString3+0x34>
    828e:	f24d 0490 	movw	r4, #53392	; 0xd090
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    8292:	f245 278c 	movw	r7, #21132	; 0x528c
	for (int v = 0; v < numStringsThisBoard; v++)
    8296:	2500      	movs	r5, #0
    8298:	f2c2 0401 	movt	r4, #8193	; 0x2001
		tStiffString_init(&stringsC[v], 70, &leaf);
    829c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    82a0:	4620      	mov	r0, r4
    82a2:	463a      	mov	r2, r7
    82a4:	2146      	movs	r1, #70	; 0x46
	for (int v = 0; v < numStringsThisBoard; v++)
    82a6:	3501      	adds	r5, #1
		tStiffString_init(&stringsC[v], 70, &leaf);
    82a8:	f005 f9aa 	bl	d600 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    82ac:	7833      	ldrb	r3, [r6, #0]
    82ae:	3404      	adds	r4, #4
    82b0:	42ab      	cmp	r3, r5
    82b2:	dcf5      	bgt.n	82a0 <audioInitString3+0x20>
	}
}
    82b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82b6:	bf00      	nop
    82b8:	f3af 8000 	nop.w
    82bc:	f3af 8000 	nop.w

000082c0 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    82c0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    82c2:	f240 6694 	movw	r6, #1684	; 0x694
    82c6:	f2c2 0600 	movt	r6, #8192	; 0x2000
    82ca:	7833      	ldrb	r3, [r6, #0]
    82cc:	b163      	cbz	r3, 82e8 <audioFreeString3+0x28>
    82ce:	f24d 0490 	movw	r4, #53392	; 0xd090
    82d2:	2500      	movs	r5, #0
    82d4:	f2c2 0401 	movt	r4, #8193	; 0x2001
	{
		tStiffString_free(&stringsC[v]);
    82d8:	4620      	mov	r0, r4
	for (int v = 0; v < numStringsThisBoard; v++)
    82da:	3501      	adds	r5, #1
		tStiffString_free(&stringsC[v]);
    82dc:	f005 f9b0 	bl	d640 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    82e0:	7833      	ldrb	r3, [r6, #0]
    82e2:	3404      	adds	r4, #4
    82e4:	42ab      	cmp	r3, r5
    82e6:	dcf7      	bgt.n	82d8 <audioFreeString3+0x18>
	}
}
    82e8:	bd70      	pop	{r4, r5, r6, pc}
    82ea:	bf00      	nop
    82ec:	f3af 8000 	nop.w
    82f0:	f3af 8000 	nop.w
    82f4:	f3af 8000 	nop.w
    82f8:	f3af 8000 	nop.w
    82fc:	f3af 8000 	nop.w

00008300 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    8300:	f241 236f 	movw	r3, #4719	; 0x126f
{
    8304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    8308:	f6c3 2383 	movt	r3, #14979	; 0x3a83
    830c:	f245 2438 	movw	r4, #21048	; 0x5238
    8310:	f640 0798 	movw	r7, #2200	; 0x898
    8314:	f248 6674 	movw	r6, #34420	; 0x8674
    8318:	f244 284c 	movw	r8, #16972	; 0x424c
    831c:	f245 19d4 	movw	r9, #20948	; 0x51d4
    8320:	f2c2 0400 	movt	r4, #8192	; 0x2000
    8324:	f2c2 0700 	movt	r7, #8192	; 0x2000
    8328:	f2c2 0601 	movt	r6, #8193	; 0x2001
	for (int i = 0; i < 12; i++)
    832c:	2500      	movs	r5, #0
    832e:	f2c2 0801 	movt	r8, #8193	; 0x2001
    8332:	f2c2 0900 	movt	r9, #8192	; 0x2000
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    8336:	f04f 0a01 	mov.w	sl, #1
{
    833a:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    833e:	ee08 3a10 	vmov	s16, r3
    8342:	4620      	mov	r0, r4
    8344:	eeb0 0a48 	vmov.f32	s0, s16
    8348:	f005 f9be 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    834c:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8350:	4620      	mov	r0, r4
		if (voice == 59)
    8352:	2b3b      	cmp	r3, #59	; 0x3b
    8354:	d00e      	beq.n	8374 <audioSwitchToString3+0x74>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8356:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    835a:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    835c:	f004 ffc4 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    8360:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 12; i++)
    8364:	3501      	adds	r5, #1
    8366:	3704      	adds	r7, #4
    8368:	2d0c      	cmp	r5, #12
    836a:	d1ea      	bne.n	8342 <audioSwitchToString3+0x42>
	}
}
    836c:	ecbd 8b02 	vpop	{d8}
    8370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    8374:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    8378:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    837a:	f004 ffb5 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    837e:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 12; i++)
    8382:	3501      	adds	r5, #1
    8384:	3604      	adds	r6, #4
    8386:	2d0c      	cmp	r5, #12
    8388:	d1db      	bne.n	8342 <audioSwitchToString3+0x42>
}
    838a:	ecbd 8b02 	vpop	{d8}
    838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8392:	bf00      	nop
    8394:	f3af 8000 	nop.w
    8398:	f3af 8000 	nop.w
    839c:	f3af 8000 	nop.w

000083a0 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    83a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    83a4:	f244 2058 	movw	r0, #16984	; 0x4258
    83a8:	f245 14e8 	movw	r4, #20968	; 0x51e8
    83ac:	f245 2538 	movw	r5, #21048	; 0x5238
    83b0:	f2c2 0001 	movt	r0, #8193	; 0x2001
    83b4:	f2c2 0400 	movt	r4, #8192	; 0x2000
    83b8:	f2c2 0500 	movt	r5, #8192	; 0x2000
    83bc:	f104 0630 	add.w	r6, r4, #48	; 0x30
{
    83c0:	ed2d 8b04 	vpush	{d8-d9}
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    83c4:	f004 ff84 	bl	d2d0 <__tExpSmooth_tick_veneer>
    83c8:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    83cc:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    83ce:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    83d0:	f004 ff7e 	bl	d2d0 <__tExpSmooth_tick_veneer>
    83d4:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    83d8:	42a6      	cmp	r6, r4
    83da:	d1f7      	bne.n	83cc <audioTickString3+0x2c>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    83dc:	f245 25e8 	movw	r5, #21224	; 0x52e8
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    83e0:	f240 6694 	movw	r6, #1684	; 0x694
	if (newPluck)
    83e4:	f2c2 0500 	movt	r5, #8192	; 0x2000
		for (int i = 0; i < numStringsThisBoard; i++)
    83e8:	f2c2 0600 	movt	r6, #8192	; 0x2000
	if (newPluck)
    83ec:	682b      	ldr	r3, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    83ee:	7832      	ldrb	r2, [r6, #0]
	if (newPluck)
    83f0:	2b00      	cmp	r3, #0
    83f2:	d062      	beq.n	84ba <audioTickString3+0x11a>
		for (int i = 0; i < numStringsThisBoard; i++)
    83f4:	2a00      	cmp	r2, #0
    83f6:	f000 80ee 	beq.w	85d6 <audioTickString3+0x236>
    83fa:	2400      	movs	r4, #0
    83fc:	f24d 0990 	movw	r9, #53392	; 0xd090
    8400:	f245 3758 	movw	r7, #21336	; 0x5358
    8404:	f244 2804 	movw	r8, #16900	; 0x4204
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    8408:	4623      	mov	r3, r4
    840a:	f2c2 0901 	movt	r9, #8193	; 0x2001
    840e:	f2c2 0700 	movt	r7, #8192	; 0x2000
    8412:	f2c2 0801 	movt	r8, #8193	; 0x2001
    8416:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    841a:	ee09 4a90 	vmov	s19, r4
    841e:	ee09 3a10 	vmov	s18, r3
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    8422:	2380      	movs	r3, #128	; 0x80
    8424:	f2c3 7380 	movt	r3, #14208	; 0x3780
    8428:	ee08 3a10 	vmov	s16, r3
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    842c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    8430:	b29b      	uxth	r3, r3
    8432:	2b00      	cmp	r3, #0
    8434:	f040 80b8 	bne.w	85a8 <audioTickString3+0x208>
    8438:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    843c:	b29b      	uxth	r3, r3
    843e:	2b00      	cmp	r3, #0
    8440:	f000 80b2 	beq.w	85a8 <audioTickString3+0x208>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    8444:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    8448:	fa1f fa83 	uxth.w	sl, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    844c:	f244 231c 	movw	r3, #16924	; 0x421c
    8450:	f2c2 0301 	movt	r3, #8193	; 0x2001
    8454:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8458:	ed93 0a00 	vldr	s0, [r3]
				stringOctave[i] = octave;
    845c:	f245 23f4 	movw	r3, #21236	; 0x52f4
    8460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8464:	edd3 7a00 	vldr	s15, [r3]
    8468:	f244 2324 	movw	r3, #16932	; 0x4224
    846c:	f2c2 0301 	movt	r3, #8193	; 0x2001
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    8470:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    8474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    8478:	fe80 0a49 	vminnm.f32	s0, s0, s18
    847c:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
				stringOctave[i] = octave;
    8480:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    8484:	f005 f888 	bl	d598 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    8488:	4648      	mov	r0, r9
    848a:	f004 ff81 	bl	d390 <__tStiffString_setFreq_veneer>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    848e:	ee07 aa90 	vmov	s15, sl
				tStiffString_pluck(&stringsC[i], str3Amp);
    8492:	4648      	mov	r0, r9
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    8494:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
				tStiffString_pluck(&stringsC[i], str3Amp);
    8498:	ee20 0a08 	vmul.f32	s0, s0, s16
    849c:	f005 f8d8 	bl	d650 <__tStiffString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    84a0:	7832      	ldrb	r2, [r6, #0]
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    84a2:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    84a6:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    84aa:	b29b      	uxth	r3, r3
    84ac:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    84b0:	3401      	adds	r4, #1
    84b2:	42a2      	cmp	r2, r4
    84b4:	dcba      	bgt.n	842c <audioTickString3+0x8c>
		}
		newPluck = 0;
    84b6:	2300      	movs	r3, #0
    84b8:	602b      	str	r3, [r5, #0]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    84ba:	2a00      	cmp	r2, #0
    84bc:	f000 8090 	beq.w	85e0 <audioTickString3+0x240>
    84c0:	2300      	movs	r3, #0
    84c2:	f24d 0490 	movw	r4, #53392	; 0xd090
	{

		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    84c6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	for (int i = 0; i < numStringsThisBoard; i++)
    84ca:	461d      	mov	r5, r3
    84cc:	f2c2 0401 	movt	r4, #8193	; 0x2001
    84d0:	ee08 3a10 	vmov	s16, r3
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    84d4:	4620      	mov	r0, r4
	for (int i = 0; i < numStringsThisBoard; i++)
    84d6:	3501      	adds	r5, #1
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    84d8:	f004 fec2 	bl	d260 <__tStiffString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    84dc:	7833      	ldrb	r3, [r6, #0]
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    84de:	eea0 8a09 	vfma.f32	s16, s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    84e2:	3404      	adds	r4, #4
    84e4:	42ab      	cmp	r3, r5
    84e6:	dcf5      	bgt.n	84d4 <audioTickString3+0x134>
	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    84e8:	f64a 400b 	movw	r0, #44043	; 0xac0b
    84ec:	f244 2313 	movw	r3, #16915	; 0x4213
    84f0:	ee28 5aa8 	vmul.f32	s10, s17, s17
    84f4:	f24a 2185 	movw	r1, #41605	; 0xa285
    84f8:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    84fc:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    8500:	f2c4 01ca 	movt	r1, #16586	; 0x40ca
    8504:	f64b 620a 	movw	r2, #48650	; 0xbe0a
    8508:	ee07 0a10 	vmov	s14, r0
    850c:	ee07 3a90 	vmov	s15, r3
    8510:	ee65 5a28 	vmul.f32	s11, s10, s17
    8514:	ee06 1a10 	vmov	s12, r1
    8518:	eee8 7a87 	vfma.f32	s15, s17, s14
    851c:	f2c4 0222 	movt	r2, #16418	; 0x4022
    8520:	f246 3313 	movw	r3, #25363	; 0x6313

	temp *= outVol * masterVolFromBrain;
    8524:	f240 618c 	movw	r1, #1676	; 0x68c
    8528:	ee07 2a10 	vmov	s14, r2
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    852c:	f2c4 0351 	movt	r3, #16465	; 0x4051
	temp *= outVol * masterVolFromBrain;
    8530:	f2c2 0100 	movt	r1, #8192	; 0x2000
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    8534:	ee06 3a90 	vmov	s13, r3
	temp *= outVol * masterVolFromBrain;
    8538:	edd1 4a00 	vldr	s9, [r1]
    853c:	eee5 7a86 	vfma.f32	s15, s11, s12
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    8540:	ee68 8aa6 	vmul.f32	s17, s17, s13
    8544:	eee5 7a47 	vfms.f32	s15, s10, s14
    8548:	eee5 7ae8 	vfms.f32	s15, s11, s17
	temp *= outVol * masterVolFromBrain;
    854c:	ee27 0aa4 	vmul.f32	s0, s15, s9
	temp = tanhf(temp);
    8550:	ee20 0a08 	vmul.f32	s0, s0, s16
    8554:	f005 f83c 	bl	d5d0 <__tanhf_veneer>
    if (val < min)
    8558:	f649 43bc 	movw	r3, #40124	; 0x9cbc
    855c:	f6cb 7382 	movt	r3, #49026	; 0xbf82
    8560:	ee07 3a90 	vmov	s15, r3
    8564:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    856c:	d42d      	bmi.n	85ca <audioTickString3+0x22a>
    else if (val > max)
    856e:	f649 43bc 	movw	r3, #40124	; 0x9cbc
    8572:	f6c3 7382 	movt	r3, #16258	; 0x3f82
    8576:	ee07 3a90 	vmov	s15, r3
    857a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8582:	dc0b      	bgt.n	859c <audioTickString3+0x1fc>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    8584:	f24e 1348 	movw	r3, #57672	; 0xe148
    8588:	f6c3 737a 	movt	r3, #16250	; 0x3f7a
}
    858c:	ecbd 8b04 	vpop	{d8-d9}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    8590:	ee07 3a90 	vmov	s15, r3
    8594:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    8598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    859c:	ecbd 8b04 	vpop	{d8-d9}
        return max;
    85a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    85a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    85a8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    85ac:	b29b      	uxth	r3, r3
    85ae:	2b00      	cmp	r3, #0
    85b0:	f43f af77 	beq.w	84a2 <audioTickString3+0x102>
    85b4:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    85b8:	b29b      	uxth	r3, r3
    85ba:	2b00      	cmp	r3, #0
    85bc:	f47f af71 	bne.w	84a2 <audioTickString3+0x102>
				tStiffString_mute(&stringsC[i]);
    85c0:	4648      	mov	r0, r9
    85c2:	f004 fe1d 	bl	d200 <__tStiffString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    85c6:	7832      	ldrb	r2, [r6, #0]
    85c8:	e76b      	b.n	84a2 <audioTickString3+0x102>
}
    85ca:	ecbd 8b04 	vpop	{d8-d9}
        return min;
    85ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    85d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		newPluck = 0;
    85d6:	2300      	movs	r3, #0
    85d8:	602a      	str	r2, [r5, #0]
    85da:	ee08 3a10 	vmov	s16, r3
    85de:	e783      	b.n	84e8 <audioTickString3+0x148>
	for (int i = 0; i < numStringsThisBoard; i++)
    85e0:	2300      	movs	r3, #0
    85e2:	ee08 3a10 	vmov	s16, r3
    85e6:	e77f      	b.n	84e8 <audioTickString3+0x148>
    85e8:	f3af 8000 	nop.w
    85ec:	f3af 8000 	nop.w
    85f0:	f3af 8000 	nop.w
    85f4:	f3af 8000 	nop.w
    85f8:	f3af 8000 	nop.w
    85fc:	f3af 8000 	nop.w

00008600 <audioFrameString3>:
		uint32_t tempCountFrame = DWT->CYCCNT;
    8600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		if (resetStringInputs)
    8604:	f245 7271 	movw	r2, #22385	; 0x5771
{
    8608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    860c:	f2ce 0300 	movt	r3, #57344	; 0xe000
		if (resetStringInputs)
    8610:	f2c2 0200 	movt	r2, #8192	; 0x2000
{
    8614:	ed2d 8b08 	vpush	{d8-d11}
    8618:	b08d      	sub	sp, #52	; 0x34
    861a:	9007      	str	r0, [sp, #28]
		uint32_t tempCountFrame = DWT->CYCCNT;
    861c:	685b      	ldr	r3, [r3, #4]
    861e:	9306      	str	r3, [sp, #24]
		if (resetStringInputs)
    8620:	7813      	ldrb	r3, [r2, #0]
    8622:	2b00      	cmp	r3, #0
    8624:	f040 81ad 	bne.w	8982 <audioFrameString3+0x382>
			for (int i = 0; i < numStringsThisBoard; i++)
    8628:	f240 6394 	movw	r3, #1684	; 0x694
    862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8630:	9303      	str	r3, [sp, #12]
    8632:	781b      	ldrb	r3, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    8634:	2b00      	cmp	r3, #0
    8636:	f000 815f 	beq.w	88f8 <audioFrameString3+0x2f8>
    863a:	2300      	movs	r3, #0
    863c:	2200      	movs	r2, #0
    863e:	f244 2b24 	movw	fp, #16932	; 0x4224
    8642:	f24d 0670 	movw	r6, #53360	; 0xd070
    8646:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    864a:	f24d 0778 	movw	r7, #53368	; 0xd078
    864e:	f24d 0968 	movw	r9, #53352	; 0xd068
    8652:	f24d 0588 	movw	r5, #53384	; 0xd088
    8656:	ee0a 3a90 	vmov	s21, r3
			float newStiffness = (knobScaled[0] * 100.0f);
    865a:	2300      	movs	r3, #0
    865c:	f24d 0880 	movw	r8, #53376	; 0xd080
    8660:	f245 1ae8 	movw	sl, #20968	; 0x51e8
    8664:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    8668:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    866c:	f2c2 0b01 	movt	fp, #8193	; 0x2001
    8670:	f2c2 0601 	movt	r6, #8193	; 0x2001
			float newStiffness = (knobScaled[0] * 100.0f);
    8674:	ee0a 3a10 	vmov	s20, r3
				float squishedStiffness = (newStiffness*0.01f) ;
    8678:	f24d 730a 	movw	r3, #55050	; 0xd70a
    867c:	f2c2 0701 	movt	r7, #8193	; 0x2001
    8680:	f2c2 0901 	movt	r9, #8193	; 0x2001
    8684:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    8688:	f2c2 0501 	movt	r5, #8193	; 0x2001
    868c:	f2c2 0801 	movt	r8, #8193	; 0x2001
    8690:	f2c2 0a00 	movt	sl, #8192	; 0x2000
    8694:	ee0b 3a10 	vmov	s22, r3
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    8698:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    869c:	ee09 2a90 	vmov	s19, r2
		for (int i = 0; i < numStringsThisBoard; i++)
    86a0:	4614      	mov	r4, r2
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    86a2:	f6c3 53cc 	movt	r3, #15820	; 0x3dcc
    86a6:	ee09 3a10 	vmov	s18, r3
    86aa:	f241 1390 	movw	r3, #4496	; 0x1190
    86ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b2:	9301      	str	r3, [sp, #4]
    86b4:	f244 231c 	movw	r3, #16924	; 0x421c
    86b8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86bc:	9304      	str	r3, [sp, #16]
    86be:	f24d 0390 	movw	r3, #53392	; 0xd090
    86c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    86c6:	9305      	str	r3, [sp, #20]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    86c8:	9b04      	ldr	r3, [sp, #16]
    86ca:	ecfb 7a01 	vldmia	fp!, {s15}
    86ce:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    86d2:	ed92 8a00 	vldr	s16, [r2]
    86d6:	ee38 8a27 	vadd.f32	s16, s16, s15
    86da:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    86de:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
			float finalFreq = mtofTableLookup(theNote[i]);
    86e2:	eeb0 0a48 	vmov.f32	s0, s16
    86e6:	f004 ff57 	bl	d598 <__mtofTableLookup_veneer>
    86ea:	9b05      	ldr	r3, [sp, #20]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    86ec:	00a0      	lsls	r0, r4, #2
			float finalFreq = mtofTableLookup(theNote[i]);
    86ee:	eef0 ba40 	vmov.f32	s23, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    86f2:	4418      	add	r0, r3
    86f4:	9002      	str	r0, [sp, #8]
    86f6:	f004 fe2b 	bl	d350 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    86fa:	9b01      	ldr	r3, [sp, #4]
    86fc:	ecb3 0a01 	vldmia	r3!, {s0}
    8700:	ee38 0a40 	vsub.f32	s0, s16, s0
    8704:	9301      	str	r3, [sp, #4]
    8706:	f004 ff47 	bl	d598 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    870a:	ee8b 6a80 	vdiv.f32	s12, s23, s0
			float newStiffness = (knobScaled[0] * 100.0f);
    870e:	ed9a 8a00 	vldr	s16, [sl]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    8712:	edd5 7a00 	vldr	s15, [r5]
    8716:	9802      	ldr	r0, [sp, #8]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    8718:	eec0 6a2b 	vdiv.f32	s13, s0, s23
			float newStiffness = (knobScaled[0] * 100.0f);
    871c:	ee28 8a0a 	vmul.f32	s16, s16, s20
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    8720:	ee37 7aa8 	vadd.f32	s14, s15, s17
    8724:	eeb4 7ac8 	vcmpe.f32	s14, s16
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    8728:	ed8d 6a08 	vstr	s12, [sp, #32]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    8730:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    8734:	d406      	bmi.n	8744 <audioFrameString3+0x144>
    8736:	ee77 7ae8 	vsub.f32	s15, s15, s17
    873a:	eef4 7ac8 	vcmpe.f32	s15, s16
    873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8742:	dd0b      	ble.n	875c <audioFrameString3+0x15c>
				float squishedStiffness = (newStiffness*0.01f) ;
    8744:	ee68 ba0b 	vmul.f32	s23, s16, s22
				if ( squishedStiffness != prevSquishedStiffness[i])
    8748:	edd8 7a00 	vldr	s15, [r8]
    874c:	eef4 7a6b 	vcmp.f32	s15, s23
    8750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8754:	f040 8159 	bne.w	8a0a <audioFrameString3+0x40a>
				prevStiffness[i] = newStiffness;
    8758:	ed85 8a00 	vstr	s16, [r5]
			float newpuPos = (knobScaled[10] * 200.0f);
    875c:	2200      	movs	r2, #0
    875e:	edda ba0a 	vldr	s23, [sl, #40]	; 0x28
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    8762:	ed96 7a00 	vldr	s14, [r6]
			float newpuPos = (knobScaled[10] * 200.0f);
    8766:	f2c4 3248 	movt	r2, #17224	; 0x4348
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    876a:	ee77 6a28 	vadd.f32	s13, s14, s17
			float newpuPos = (knobScaled[10] * 200.0f);
    876e:	ee07 2a90 	vmov	s15, r2
    8772:	ee6b baa7 	vmul.f32	s23, s23, s15
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    8776:	eef4 6aeb 	vcmpe.f32	s13, s23
    877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    877e:	d406      	bmi.n	878e <audioFrameString3+0x18e>
    8780:	ee37 7a68 	vsub.f32	s14, s14, s17
    8784:	eeb4 7aeb 	vcmpe.f32	s14, s23
    8788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    878c:	dd34      	ble.n	87f8 <audioFrameString3+0x1f8>
				float squishedPuPos = (newpuPos*0.005f) ;
    878e:	f24d 720a 	movw	r2, #55050	; 0xd70a
				if ( squishedPuPos != prevSquishedPuPos[i])
    8792:	edd7 7a00 	vldr	s15, [r7]
				float squishedPuPos = (newpuPos*0.005f) ;
    8796:	f6c3 32a3 	movt	r2, #15267	; 0x3ba3
    879a:	ee08 2a10 	vmov	s16, r2
    879e:	ee2b 8a88 	vmul.f32	s16, s23, s16
				if ( squishedPuPos != prevSquishedPuPos[i])
    87a2:	eef4 7a48 	vcmp.f32	s15, s16
    87a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87aa:	d023      	beq.n	87f4 <audioFrameString3+0x1f4>
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    87ac:	ee78 7ac8 	vsub.f32	s15, s17, s16
					if (ratioOfNoteToOpenString < pickupKnobVal)
    87b0:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    87b4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					finalPuPos[i] = squishedPuPos;
    87b8:	ed89 8a00 	vstr	s16, [r9]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    87bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
					if (ratioOfNoteToOpenString < pickupKnobVal)
    87c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    87c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87c8:	f100 8112 	bmi.w	89f0 <audioFrameString3+0x3f0>
					float pickupKnobVal2 = pickupKnobVal;
    87cc:	eef0 6a67 	vmov.f32	s13, s15
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    87d0:	ed9a 7a01 	vldr	s14, [sl, #4]
    87d4:	ed9d 6a08 	vldr	s12, [sp, #32]
    87d8:	ee38 0ac7 	vsub.f32	s0, s17, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    87dc:	9002      	str	r0, [sp, #8]
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    87de:	ee20 0a06 	vmul.f32	s0, s0, s12
    87e2:	ee20 0a26 	vmul.f32	s0, s0, s13
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    87e6:	eea7 0a27 	vfma.f32	s0, s14, s15
    87ea:	f004 fcf5 	bl	d1d8 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    87ee:	9802      	ldr	r0, [sp, #8]
    87f0:	ed87 8a00 	vstr	s16, [r7]
				prevPuPos[i] = newpuPos;
    87f4:	edc6 ba00 	vstr	s23, [r6]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    87f8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    87fc:	edda 6a0b 	vldr	s13, [sl, #44]	; 0x2c
    8800:	eeb0 7a49 	vmov.f32	s14, s18
			if (ratioOfNoteToOpenString < pluckKnobVal)
    8804:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    8808:	f6c3 62cc 	movt	r2, #16076	; 0x3ecc
    880c:	ee78 6ae6 	vsub.f32	s13, s17, s13
    8810:	ee07 2a90 	vmov	s15, r2
    8814:	eea6 7aa7 	vfma.f32	s14, s13, s15
			if (ratioOfNoteToOpenString < pluckKnobVal)
    8818:	eeb4 6ac7 	vcmpe.f32	s12, s14
    881c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8820:	f140 80ac 	bpl.w	897c <audioFrameString3+0x37c>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    8824:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
    8828:	ee77 7a67 	vsub.f32	s15, s14, s15
    882c:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    8830:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
    8834:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
    8838:	ee76 6ae7 	vsub.f32	s13, s13, s15
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    883c:	edda 7a02 	vldr	s15, [sl, #8]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    8840:	f246 6266 	movw	r2, #26214	; 0x6666
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    8844:	ed9d 6a08 	vldr	s12, [sp, #32]
    8848:	ee38 0ae7 	vsub.f32	s0, s17, s15
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    884c:	f6c3 7266 	movt	r2, #16230	; 0x3f66
    8850:	9002      	str	r0, [sp, #8]
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    8852:	ee20 0a06 	vmul.f32	s0, s0, s12
    8856:	ee20 0a26 	vmul.f32	s0, s0, s13
    885a:	eea7 0a87 	vfma.f32	s0, s15, s14
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    885e:	ee07 2a90 	vmov	s15, r2
    8862:	fe80 0a67 	vminnm.f32	s0, s0, s15
    8866:	fe80 0a09 	vmaxnm.f32	s0, s0, s18
    886a:	f004 fe01 	bl	d470 <__tStiffString_setPluckPosNoUpdate_veneer>
			if (mainDecay < 0.01f)
    886e:	f247 02a4 	movw	r2, #28836	; 0x70a4
			float mainDecay = (1.0f - knobScaled[8]);
    8872:	ed9a 7a08 	vldr	s14, [sl, #32]
			if (mainDecay < 0.01f)
    8876:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
			float dampKnob = (1.0f - knobScaled[9]);
    887a:	ed9a 8a09 	vldr	s16, [sl, #36]	; 0x24
			if (mainDecay < 0.01f)
    887e:	9802      	ldr	r0, [sp, #8]
    8880:	ee07 2a90 	vmov	s15, r2
			float dampKnob = (1.0f - knobScaled[9]);
    8884:	ee38 8ac8 	vsub.f32	s16, s17, s16
			if (mainDecay < 0.01f)
    8888:	eeb4 7ae7 	vcmpe.f32	s14, s15
    888c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8890:	dc71      	bgt.n	8976 <audioFrameString3+0x376>
			float mainDecay = (1.0f - knobScaled[8]);
    8892:	ee38 7ac7 	vsub.f32	s14, s17, s14
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    8896:	f241 226f 	movw	r2, #4719	; 0x126f
    889a:	f6c3 2283 	movt	r2, #14979	; 0x3a83
    889e:	ee27 0a07 	vmul.f32	s0, s14, s14
    88a2:	ee07 2a90 	vmov	s15, r2
    88a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    88aa:	ee20 0a07 	vmul.f32	s0, s0, s14
    88ae:	9002      	str	r0, [sp, #8]
    88b0:	f004 fe66 	bl	d580 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    88b4:	f241 226f 	movw	r2, #4719	; 0x126f
    88b8:	ee28 0a08 	vmul.f32	s0, s16, s16
    88bc:	9802      	ldr	r0, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    88be:	3401      	adds	r4, #1
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    88c0:	f6c3 1283 	movt	r2, #14723	; 0x3983
		for (int i = 0; i < numStringsThisBoard; i++)
    88c4:	3604      	adds	r6, #4
    88c6:	3704      	adds	r7, #4
    88c8:	f109 0904 	add.w	r9, r9, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    88cc:	ee07 2a90 	vmov	s15, r2
		for (int i = 0; i < numStringsThisBoard; i++)
    88d0:	3504      	adds	r5, #4
    88d2:	f108 0804 	add.w	r8, r8, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    88d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    88da:	ee20 0a08 	vmul.f32	s0, s0, s16
    88de:	f004 fde7 	bl	d4b0 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    88e2:	9802      	ldr	r0, [sp, #8]
    88e4:	f004 ff18 	bl	d718 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    88e8:	9802      	ldr	r0, [sp, #8]
    88ea:	f004 fd11 	bl	d310 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    88ee:	9b03      	ldr	r3, [sp, #12]
    88f0:	781a      	ldrb	r2, [r3, #0]
    88f2:	42a2      	cmp	r2, r4
    88f4:	f73f aee8 	bgt.w	86c8 <audioFrameString3+0xc8>
    88f8:	f240 0400 	movw	r4, #0
    88fc:	9a07      	ldr	r2, [sp, #28]
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    88fe:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
    8902:	f2c3 0400 	movt	r4, #12288	; 0x3000
    8906:	ee08 3a10 	vmov	s16, r3
    890a:	f504 7500 	add.w	r5, r4, #512	; 0x200
    890e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    8912:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    8916:	f7ff fd43 	bl	83a0 <audioTickString3>
    891a:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    891e:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    8920:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8924:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    8926:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    892a:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    892e:	d1f2      	bne.n	8916 <audioFrameString3+0x316>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8934:	f240 6084 	movw	r0, #1668	; 0x684
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8938:	f244 2140 	movw	r1, #16960	; 0x4240
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    893c:	f245 12cc 	movw	r2, #20940	; 0x51cc
    8940:	f2c2 0000 	movt	r0, #8192	; 0x2000
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8944:	f2ce 0300 	movt	r3, #57344	; 0xe000
    8948:	f2c2 0101 	movt	r1, #8193	; 0x2001
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    894c:	f2c2 0200 	movt	r2, #8192	; 0x2000
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8950:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8952:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    8956:	9806      	ldr	r0, [sp, #24]
    8958:	1a1b      	subs	r3, r3, r0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    895a:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    895e:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8960:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8964:	ee67 7a87 	vmul.f32	s15, s15, s14
    8968:	edc2 7a00 	vstr	s15, [r2]
}
    896c:	b00d      	add	sp, #52	; 0x34
    896e:	ecbd 8b08 	vpop	{d8-d11}
    8972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8976:	eeb0 0a69 	vmov.f32	s0, s19
    897a:	e798      	b.n	88ae <audioFrameString3+0x2ae>
			float pluckKnobVal2 = pluckKnobVal;
    897c:	eef0 6a47 	vmov.f32	s13, s14
    8980:	e75c      	b.n	883c <audioFrameString3+0x23c>
			for (int i = 0; i < numStringsThisBoard; i++)
    8982:	f240 6394 	movw	r3, #1684	; 0x694
    8986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898a:	9303      	str	r3, [sp, #12]
    898c:	781b      	ldrb	r3, [r3, #0]
    898e:	b333      	cbz	r3, 89de <audioFrameString3+0x3de>
				previousStringInputs[i] = 0;
    8990:	f245 3158 	movw	r1, #21336	; 0x5358
    8994:	2000      	movs	r0, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    8996:	2b01      	cmp	r3, #1
				previousStringInputs[i] = 0;
    8998:	f2c2 0100 	movt	r1, #8192	; 0x2000
    899c:	8008      	strh	r0, [r1, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    899e:	d01e      	beq.n	89de <audioFrameString3+0x3de>
    89a0:	2b02      	cmp	r3, #2
				previousStringInputs[i] = 0;
    89a2:	8048      	strh	r0, [r1, #2]
			for (int i = 0; i < numStringsThisBoard; i++)
    89a4:	d01b      	beq.n	89de <audioFrameString3+0x3de>
    89a6:	2b03      	cmp	r3, #3
				previousStringInputs[i] = 0;
    89a8:	8088      	strh	r0, [r1, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    89aa:	d018      	beq.n	89de <audioFrameString3+0x3de>
    89ac:	2b04      	cmp	r3, #4
				previousStringInputs[i] = 0;
    89ae:	80c8      	strh	r0, [r1, #6]
			for (int i = 0; i < numStringsThisBoard; i++)
    89b0:	d015      	beq.n	89de <audioFrameString3+0x3de>
    89b2:	2b05      	cmp	r3, #5
				previousStringInputs[i] = 0;
    89b4:	8108      	strh	r0, [r1, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    89b6:	d012      	beq.n	89de <audioFrameString3+0x3de>
    89b8:	2b06      	cmp	r3, #6
				previousStringInputs[i] = 0;
    89ba:	8148      	strh	r0, [r1, #10]
			for (int i = 0; i < numStringsThisBoard; i++)
    89bc:	d00f      	beq.n	89de <audioFrameString3+0x3de>
    89be:	2b07      	cmp	r3, #7
				previousStringInputs[i] = 0;
    89c0:	8188      	strh	r0, [r1, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    89c2:	d00c      	beq.n	89de <audioFrameString3+0x3de>
    89c4:	2b08      	cmp	r3, #8
				previousStringInputs[i] = 0;
    89c6:	81c8      	strh	r0, [r1, #14]
			for (int i = 0; i < numStringsThisBoard; i++)
    89c8:	d009      	beq.n	89de <audioFrameString3+0x3de>
    89ca:	2b09      	cmp	r3, #9
				previousStringInputs[i] = 0;
    89cc:	8208      	strh	r0, [r1, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    89ce:	d006      	beq.n	89de <audioFrameString3+0x3de>
    89d0:	2b0a      	cmp	r3, #10
				previousStringInputs[i] = 0;
    89d2:	8248      	strh	r0, [r1, #18]
			for (int i = 0; i < numStringsThisBoard; i++)
    89d4:	d003      	beq.n	89de <audioFrameString3+0x3de>
    89d6:	2b0b      	cmp	r3, #11
				previousStringInputs[i] = 0;
    89d8:	8288      	strh	r0, [r1, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    89da:	d000      	beq.n	89de <audioFrameString3+0x3de>
				previousStringInputs[i] = 0;
    89dc:	82c8      	strh	r0, [r1, #22]
			newPluck = 1;
    89de:	f245 21e8 	movw	r1, #21224	; 0x52e8
			resetStringInputs = 0;
    89e2:	2000      	movs	r0, #0
			newPluck = 1;
    89e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
			resetStringInputs = 0;
    89e8:	7010      	strb	r0, [r2, #0]
			newPluck = 1;
    89ea:	2201      	movs	r2, #1
    89ec:	600a      	str	r2, [r1, #0]
    89ee:	e621      	b.n	8634 <audioFrameString3+0x34>
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    89f0:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    89f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
    89f8:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    89fc:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
    8a00:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
    8a04:	ee76 6ac7 	vsub.f32	s13, s13, s14
    8a08:	e6e2      	b.n	87d0 <audioFrameString3+0x1d0>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    8a0a:	eeb0 0a6b 	vmov.f32	s0, s23
    8a0e:	9002      	str	r0, [sp, #8]
    8a10:	f004 fe96 	bl	d740 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    8a14:	9802      	ldr	r0, [sp, #8]
    8a16:	edc8 ba00 	vstr	s23, [r8]
    8a1a:	e69d      	b.n	8758 <audioFrameString3+0x158>
    8a1c:	0000      	movs	r0, r0
	...

00008a20 <oscillator_tick>:
{
    8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    8a24:	f24d 64a4 	movw	r4, #54948	; 0xd6a4
    8a28:	0082      	lsls	r2, r0, #2
    8a2a:	1c85      	adds	r5, r0, #2
    8a2c:	f04f 0b00 	mov.w	fp, #0
    8a30:	f2c2 0401 	movt	r4, #8193	; 0x2001
		oscOuts[1][i][string] = 0.0f;
    8a34:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    8a38:	f100 0904 	add.w	r9, r0, #4
		oscOuts[1][i][string] = 0.0f;
    8a3c:	1d87      	adds	r7, r0, #6
		oscOuts[0][i][string] = 0.0f;
    8a3e:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
{
    8a42:	4603      	mov	r3, r0
	for (int osc = 0; osc < oscToTick; osc++)
    8a44:	f640 06e4 	movw	r6, #2276	; 0x8e4
		oscOuts[1][i][string] = 0.0f;
    8a48:	300a      	adds	r0, #10
    8a4a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    8a4e:	f2c2 0600 	movt	r6, #8192	; 0x2000
{
    8a52:	ed2d 8b04 	vpush	{d8-d9}
    8a56:	b08b      	sub	sp, #44	; 0x2c
		oscOuts[0][i][string] = 0.0f;
    8a58:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    8a5c:	f8c7 b000 	str.w	fp, [r7]
		oscOuts[0][i][string] = 0.0f;
    8a60:	9201      	str	r2, [sp, #4]
    8a62:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    8a66:	9102      	str	r1, [sp, #8]
		oscOuts[0][i][string] = 0.0f;
    8a68:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    8a6c:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    8a70:	9003      	str	r0, [sp, #12]
    8a72:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    8a76:	eb04 0289 	add.w	r2, r4, r9, lsl #2
    8a7a:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    8a7e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    8a82:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    8a86:	7832      	ldrb	r2, [r6, #0]
    8a88:	b1b2      	cbz	r2, 8ab8 <oscillator_tick+0x98>
		if (oscOn[osc])
    8a8a:	f24d 68a0 	movw	r8, #54944	; 0xd6a0
    8a8e:	eeb0 8a40 	vmov.f32	s16, s0
    8a92:	f2c2 0801 	movt	r8, #8193	; 0x2001
    8a96:	f898 0000 	ldrb.w	r0, [r8]
    8a9a:	b990      	cbnz	r0, 8ac2 <oscillator_tick+0xa2>
	for (int osc = 0; osc < oscToTick; osc++)
    8a9c:	2a01      	cmp	r2, #1
    8a9e:	d90b      	bls.n	8ab8 <oscillator_tick+0x98>
		if (oscOn[osc])
    8aa0:	f898 1001 	ldrb.w	r1, [r8, #1]
    8aa4:	2900      	cmp	r1, #0
    8aa6:	f040 8088 	bne.w	8bba <oscillator_tick+0x19a>
	for (int osc = 0; osc < oscToTick; osc++)
    8aaa:	2a02      	cmp	r2, #2
    8aac:	d904      	bls.n	8ab8 <oscillator_tick+0x98>
		if (oscOn[osc])
    8aae:	f898 2002 	ldrb.w	r2, [r8, #2]
    8ab2:	2a00      	cmp	r2, #0
    8ab4:	f040 8117 	bne.w	8ce6 <oscillator_tick+0x2c6>
}
    8ab8:	b00b      	add	sp, #44	; 0x2c
    8aba:	ecbd 8b04 	vpop	{d8-d9}
    8abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    8ac2:	f249 321c 	movw	r2, #37660	; 0x931c
    8ac6:	00a9      	lsls	r1, r5, #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8ac8:	f24d 707c 	movw	r0, #55164	; 0xd77c
    8acc:	9307      	str	r3, [sp, #28]
			float freqOffset= oscParams[OscFreq].realVal[string];
    8ace:	f2c2 0201 	movt	r2, #8193	; 0x2001
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8ad2:	9b01      	ldr	r3, [sp, #4]
    8ad4:	f2c2 0001 	movt	r0, #8193	; 0x2001
			float freqOffset= oscParams[OscFreq].realVal[string];
    8ad8:	9204      	str	r2, [sp, #16]
    8ada:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8adc:	4418      	add	r0, r3
			float freqToSmooth = (note + (fine*0.01f));
    8ade:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
			float shape = oscParams[OscShape].realVal[string];
    8ae2:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8ae6:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    8aea:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    8aee:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float freqToSmooth = (note + (fine*0.01f));
    8af2:	f24d 720a 	movw	r2, #55050	; 0xd70a
			float shape = oscParams[OscShape].realVal[string];
    8af6:	edcd 0a06 	vstr	s1, [sp, #24]
			float freqToSmooth = (note + (fine*0.01f));
    8afa:	f6c3 4223 	movt	r2, #15395	; 0x3c23
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8afe:	9005      	str	r0, [sp, #20]
			float freqToSmooth = (note + (fine*0.01f));
    8b00:	ee07 2a90 	vmov	s15, r2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8b04:	eea7 0a27 	vfma.f32	s0, s14, s15
    8b08:	f004 fb96 	bl	d238 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8b0c:	9805      	ldr	r0, [sp, #20]
    8b0e:	f004 fbdf 	bl	d2d0 <__tExpSmooth_tick_veneer>
    8b12:	f24d 621c 	movw	r2, #54812	; 0xd61c
    8b16:	9b01      	ldr	r3, [sp, #4]
    8b18:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8b1c:	441a      	add	r2, r3
    8b1e:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8b22:	ee30 0a27 	vadd.f32	s0, s0, s15
    8b26:	f004 fd37 	bl	d598 <__mtofTableLookup_veneer>
    8b2a:	f24d 32b0 	movw	r2, #54192	; 0xd3b0
    8b2e:	9b01      	ldr	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8b30:	a809      	add	r0, sp, #36	; 0x24
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8b32:	f2c2 0201 	movt	r2, #8193	; 0x2001
			float sample = 0.0f;
    8b36:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8b3a:	eddd 0a06 	vldr	s1, [sp, #24]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8b3e:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8b40:	9b07      	ldr	r3, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8b42:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8b46:	f64d 0244 	movw	r2, #55364	; 0xd844
    8b4a:	9305      	str	r3, [sp, #20]
    8b4c:	eee0 9a27 	vfma.f32	s19, s0, s15
    8b50:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8b54:	f8d2 b000 	ldr.w	fp, [r2]
    8b58:	2200      	movs	r2, #0
    8b5a:	4611      	mov	r1, r2
    8b5c:	eeb0 0a69 	vmov.f32	s0, s19
    8b60:	47d8      	blx	fp
			sample *= amp;
    8b62:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8b66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sourceValues[osc][string] = sample;
    8b6a:	9901      	ldr	r1, [sp, #4]
			sample *= amp;
    8b6c:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8b74:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8b78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8b7c:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8b80:	f640 02d0 	movw	r2, #2256	; 0x8d0
    8b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8b88:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8b8c:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    8b90:	f64d 0280 	movw	r2, #55424	; 0xd880
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8b94:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    8b98:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8b9c:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8b9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8ba2:	ee68 8aa6 	vmul.f32	s17, s17, s13
			sourceValues[osc][string] = sample;
    8ba6:	ed82 7a00 	vstr	s14, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    8baa:	7832      	ldrb	r2, [r6, #0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8bac:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8bb0:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8bb4:	edc7 7a00 	vstr	s15, [r7]
    8bb8:	e770      	b.n	8a9c <oscillator_tick+0x7c>
			float freqOffset= oscParams[OscFreq].realVal[string];
    8bba:	f249 371c 	movw	r7, #37660	; 0x931c
			float freqToSmooth = (note + (fine*0.01f));
    8bbe:	f24d 720a 	movw	r2, #55050	; 0xd70a
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8bc2:	f24d 707c 	movw	r0, #55164	; 0xd77c
    8bc6:	eeb0 0a48 	vmov.f32	s0, s16
			float freqOffset= oscParams[OscFreq].realVal[string];
    8bca:	f2c2 0701 	movt	r7, #8193	; 0x2001
			float freqToSmooth = (note + (fine*0.01f));
    8bce:	f6c3 4223 	movt	r2, #15395	; 0x3c23
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8bd2:	f2c2 0001 	movt	r0, #8193	; 0x2001
    8bd6:	9305      	str	r3, [sp, #20]
			float freqToSmooth = (note + (fine*0.01f));
    8bd8:	ee07 2a90 	vmov	s15, r2
			float fine = oscParams[OscFine].realVal[string];
    8bdc:	f207 4244 	addw	r2, r7, #1092	; 0x444
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8be0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    8be4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8be8:	9001      	str	r0, [sp, #4]
			float freqOffset= oscParams[OscFreq].realVal[string];
    8bea:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float freqToSmooth = (note + (fine*0.01f));
    8bee:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    8bf2:	f507 628c 	add.w	r2, r7, #1120	; 0x460
    8bf6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8bfa:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8bfe:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    8c02:	f207 427c 	addw	r2, r7, #1148	; 0x47c
    8c06:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8c0a:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8c0e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
    8c12:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    8c16:	edcd 0a04 	vstr	s1, [sp, #16]
			float amp = oscParams[OscAmp].realVal[string];
    8c1a:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8c1e:	f207 525c 	addw	r2, r7, #1372	; 0x55c
    8c22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8c26:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8c2a:	f004 fb05 	bl	d238 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8c2e:	9801      	ldr	r0, [sp, #4]
    8c30:	f004 fb4e 	bl	d2d0 <__tExpSmooth_tick_veneer>
    8c34:	f24d 621c 	movw	r2, #54812	; 0xd61c
    8c38:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8c3c:	4452      	add	r2, sl
    8c3e:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8c42:	ee30 0a27 	vadd.f32	s0, s0, s15
    8c46:	f004 fca7 	bl	d598 <__mtofTableLookup_veneer>
    8c4a:	f24d 32b0 	movw	r2, #54192	; 0xd3b0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8c4e:	9b05      	ldr	r3, [sp, #20]
    8c50:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8c52:	f2c2 0201 	movt	r2, #8193	; 0x2001
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8c56:	a809      	add	r0, sp, #36	; 0x24
    8c58:	eddd 0a04 	vldr	s1, [sp, #16]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8c5c:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8c5e:	9301      	str	r3, [sp, #4]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8c60:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    8c64:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8c66:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    8c6a:	9209      	str	r2, [sp, #36]	; 0x24
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8c6c:	f64d 0244 	movw	r2, #55364	; 0xd844
    8c70:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8c74:	f8d2 b004 	ldr.w	fp, [r2, #4]
    8c78:	2200      	movs	r2, #0
    8c7a:	eeb0 0a69 	vmov.f32	s0, s19
    8c7e:	47d8      	blx	fp
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8c80:	f640 00d0 	movw	r0, #2256	; 0x8d0
			sample *= amp;
    8c84:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8c8c:	9b02      	ldr	r3, [sp, #8]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8c8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
			sample *= amp;
    8c92:	ee29 7a07 	vmul.f32	s14, s18, s14
	for (int osc = 0; osc < oscToTick; osc++)
    8c96:	7832      	ldrb	r2, [r6, #0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8c98:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8c9c:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8ca0:	9b01      	ldr	r3, [sp, #4]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8ca2:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8ca6:	ee67 6a26 	vmul.f32	s13, s14, s13
	for (int osc = 0; osc < oscToTick; osc++)
    8caa:	2a02      	cmp	r2, #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8cac:	f203 1005 	addw	r0, r3, #261	; 0x105
    8cb0:	eb07 0780 	add.w	r7, r7, r0, lsl #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8cb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8cb8:	ed97 6a00 	vldr	s12, [r7]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8cbc:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8cc0:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8cc4:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    8cc8:	f64d 0180 	movw	r1, #55424	; 0xd880
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8ccc:	ee68 8aa6 	vmul.f32	s17, s17, s13
			sourceValues[osc][string] = sample;
    8cd0:	f2c2 0101 	movt	r1, #8193	; 0x2001
    8cd4:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8cd6:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    8cd8:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8cdc:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    8ce0:	f63f aee5 	bhi.w	8aae <oscillator_tick+0x8e>
    8ce4:	e6e8      	b.n	8ab8 <oscillator_tick+0x98>
			float freqOffset= oscParams[OscFreq].realVal[string];
    8ce6:	f249 361c 	movw	r6, #37660	; 0x931c
			float freqToSmooth = (note + (fine*0.01f));
    8cea:	f24d 720a 	movw	r2, #55050	; 0xd70a
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8cee:	f24d 707c 	movw	r0, #55164	; 0xd77c
    8cf2:	eeb0 0a48 	vmov.f32	s0, s16
			float freqOffset= oscParams[OscFreq].realVal[string];
    8cf6:	f2c2 0601 	movt	r6, #8193	; 0x2001
			float freqToSmooth = (note + (fine*0.01f));
    8cfa:	f6c3 4223 	movt	r2, #15395	; 0x3c23
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8cfe:	f2c2 0001 	movt	r0, #8193	; 0x2001
    8d02:	9304      	str	r3, [sp, #16]
			float freqToSmooth = (note + (fine*0.01f));
    8d04:	ee07 2a90 	vmov	s15, r2
			float fine = oscParams[OscFine].realVal[string];
    8d08:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8d0c:	eb00 0089 	add.w	r0, r0, r9, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    8d10:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8d14:	9001      	str	r0, [sp, #4]
    8d16:	ea4f 0989 	mov.w	r9, r9, lsl #2
			float freqToSmooth = (note + (fine*0.01f));
    8d1a:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    8d1e:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    8d22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8d26:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8d2a:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    8d2e:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    8d32:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8d36:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8d3a:	f206 6204 	addw	r2, r6, #1540	; 0x604
    8d3e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    8d42:	edcd 0a02 	vstr	s1, [sp, #8]
			float amp = oscParams[OscAmp].realVal[string];
    8d46:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    8d4a:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    8d4e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8d52:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8d56:	f004 fa6f 	bl	d238 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    8d5a:	9801      	ldr	r0, [sp, #4]
    8d5c:	f004 fab8 	bl	d2d0 <__tExpSmooth_tick_veneer>
    8d60:	f24d 621c 	movw	r2, #54812	; 0xd61c
    8d64:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8d68:	444a      	add	r2, r9
    8d6a:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8d6e:	ee30 0a27 	vadd.f32	s0, s0, s15
    8d72:	f004 fc11 	bl	d598 <__mtofTableLookup_veneer>
    8d76:	f24d 32b0 	movw	r2, #54192	; 0xd3b0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8d7a:	9b04      	ldr	r3, [sp, #16]
    8d7c:	2102      	movs	r1, #2
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8d7e:	f2c2 0201 	movt	r2, #8193	; 0x2001
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8d82:	eddd 0a02 	vldr	s1, [sp, #8]
    8d86:	a809      	add	r0, sp, #36	; 0x24
    8d88:	9301      	str	r3, [sp, #4]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    8d8a:	444a      	add	r2, r9
    8d8c:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    8d90:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8d92:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    8d96:	9209      	str	r2, [sp, #36]	; 0x24
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    8d98:	f64d 0244 	movw	r2, #55364	; 0xd844
    8d9c:	f2c2 0201 	movt	r2, #8193	; 0x2001
    8da0:	6895      	ldr	r5, [r2, #8]
    8da2:	2200      	movs	r2, #0
    8da4:	eeb0 0a49 	vmov.f32	s0, s18
    8da8:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8daa:	9b01      	ldr	r3, [sp, #4]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8dac:	9a03      	ldr	r2, [sp, #12]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8dae:	eb04 0109 	add.w	r1, r4, r9
    8db2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= amp;
    8db6:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8dba:	eb04 0482 	add.w	r4, r4, r2, lsl #2
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8dbe:	f640 02d0 	movw	r2, #2256	; 0x8d0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8dc2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    8dc6:	f64d 0380 	movw	r3, #55424	; 0xd880
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8dca:	f2c2 0200 	movt	r2, #8192	; 0x2000
			sample *= amp;
    8dce:	ee28 7a07 	vmul.f32	s14, s16, s14
			sourceValues[osc][string] = sample;
    8dd2:	f2c2 0301 	movt	r3, #8193	; 0x2001
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8dd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8dda:	ed92 6a00 	vldr	s12, [r2]
			sourceValues[osc][string] = sample;
    8dde:	444b      	add	r3, r9
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8de0:	edd6 6a00 	vldr	s13, [r6]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8de4:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    8de8:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8dec:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8df0:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8df4:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8df8:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8e00:	edc1 8a00 	vstr	s17, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8e04:	edc4 7a00 	vstr	s15, [r4]
}
    8e08:	b00b      	add	sp, #44	; 0x2c
    8e0a:	ecbd 8b04 	vpop	{d8-d9}
    8e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e12:	bf00      	nop
    8e14:	f3af 8000 	nop.w
    8e18:	f3af 8000 	nop.w
    8e1c:	f3af 8000 	nop.w

00008e20 <sawSquareTick>:
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8e20:	f24d 72ec 	movw	r2, #55276	; 0xd7ec
    8e24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8e28:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8e2c:	b510      	push	{r4, lr}
    8e2e:	ed2d 8b02 	vpush	{d8}
    8e32:	eeb0 8a60 	vmov.f32	s16, s1
    8e36:	b082      	sub	sp, #8
    8e38:	4604      	mov	r4, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8e3a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    8e3e:	9001      	str	r0, [sp, #4]
    8e40:	f004 fb56 	bl	d4f0 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    8e44:	eeb0 0a48 	vmov.f32	s0, s16
    8e48:	9801      	ldr	r0, [sp, #4]
    8e4a:	f004 fc55 	bl	d6f8 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    8e4e:	9801      	ldr	r0, [sp, #4]
    8e50:	f004 fc1a 	bl	d688 <__tPBSawSquare_tick_veneer>
    8e54:	edd4 7a00 	vldr	s15, [r4]
    8e58:	ee37 0a80 	vadd.f32	s0, s15, s0
    8e5c:	ed84 0a00 	vstr	s0, [r4]
}
    8e60:	b002      	add	sp, #8
    8e62:	ecbd 8b02 	vpop	{d8}
    8e66:	bd10      	pop	{r4, pc}
    8e68:	f3af 8000 	nop.w
    8e6c:	f3af 8000 	nop.w
    8e70:	f3af 8000 	nop.w
    8e74:	f3af 8000 	nop.w
    8e78:	f3af 8000 	nop.w
    8e7c:	f3af 8000 	nop.w

00008e80 <sineTriTick>:
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    8e80:	f64d 0268 	movw	r2, #55400	; 0xd868
    8e84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8e88:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8e8c:	b510      	push	{r4, lr}
    8e8e:	ed2d 8b02 	vpush	{d8}
    8e92:	eeb0 8a60 	vmov.f32	s16, s1
    8e96:	b082      	sub	sp, #8
    8e98:	4604      	mov	r4, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    8e9a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    8e9e:	9001      	str	r0, [sp, #4]
    8ea0:	f004 f982 	bl	d1a8 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    8ea4:	eeb0 0a48 	vmov.f32	s0, s16
    8ea8:	9801      	ldr	r0, [sp, #4]
    8eaa:	f004 fab5 	bl	d418 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    8eae:	9801      	ldr	r0, [sp, #4]
    8eb0:	f004 fc5a 	bl	d768 <__tPBSineTriangle_tick_veneer>
    8eb4:	edd4 7a00 	vldr	s15, [r4]
    8eb8:	ee37 0a80 	vadd.f32	s0, s15, s0
    8ebc:	ed84 0a00 	vstr	s0, [r4]
}
    8ec0:	b002      	add	sp, #8
    8ec2:	ecbd 8b02 	vpop	{d8}
    8ec6:	bd10      	pop	{r4, pc}
    8ec8:	f3af 8000 	nop.w
    8ecc:	f3af 8000 	nop.w
    8ed0:	f3af 8000 	nop.w
    8ed4:	f3af 8000 	nop.w
    8ed8:	f3af 8000 	nop.w
    8edc:	f3af 8000 	nop.w

00008ee0 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    8ee0:	f24d 72d4 	movw	r2, #55252	; 0xd7d4
    8ee4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    8ee8:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8eec:	b510      	push	{r4, lr}
    8eee:	4604      	mov	r4, r0
    8ef0:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    8ef2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    8ef6:	9001      	str	r0, [sp, #4]
    8ef8:	f004 f9c2 	bl	d280 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    8efc:	9801      	ldr	r0, [sp, #4]
    8efe:	f004 fa7b 	bl	d3f8 <__tPBSaw_tick_veneer>
    8f02:	edd4 7a00 	vldr	s15, [r4]
    8f06:	ee37 0a80 	vadd.f32	s0, s15, s0
    8f0a:	ed84 0a00 	vstr	s0, [r4]
}
    8f0e:	b002      	add	sp, #8
    8f10:	bd10      	pop	{r4, pc}
    8f12:	bf00      	nop
    8f14:	f3af 8000 	nop.w
    8f18:	f3af 8000 	nop.w
    8f1c:	f3af 8000 	nop.w

00008f20 <pulseTick>:
    tPBPulse_setFreq(&pulse[v][string], freq);
    8f20:	f24d 72b8 	movw	r2, #55224	; 0xd7b8
    8f24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8f28:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8f2c:	b510      	push	{r4, lr}
    8f2e:	ed2d 8b02 	vpush	{d8}
    8f32:	eeb0 8a60 	vmov.f32	s16, s1
    8f36:	b082      	sub	sp, #8
    8f38:	4604      	mov	r4, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    8f3a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    8f3e:	9001      	str	r0, [sp, #4]
    8f40:	f004 fa16 	bl	d370 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    8f44:	eeb0 0a48 	vmov.f32	s0, s16
    8f48:	9801      	ldr	r0, [sp, #4]
    8f4a:	f004 f9fd 	bl	d348 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    8f4e:	9801      	ldr	r0, [sp, #4]
    8f50:	f004 fb1a 	bl	d588 <__tPBPulse_tick_veneer>
    8f54:	edd4 7a00 	vldr	s15, [r4]
    8f58:	ee37 0a80 	vadd.f32	s0, s15, s0
    8f5c:	ed84 0a00 	vstr	s0, [r4]
}
    8f60:	b002      	add	sp, #8
    8f62:	ecbd 8b02 	vpop	{d8}
    8f66:	bd10      	pop	{r4, pc}
    8f68:	f3af 8000 	nop.w
    8f6c:	f3af 8000 	nop.w
    8f70:	f3af 8000 	nop.w
    8f74:	f3af 8000 	nop.w
    8f78:	f3af 8000 	nop.w
    8f7c:	f3af 8000 	nop.w

00008f80 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    8f80:	f64d 0250 	movw	r2, #55376	; 0xd850
    8f84:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    8f88:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8f8c:	b510      	push	{r4, lr}
    8f8e:	4604      	mov	r4, r0
    8f90:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    8f92:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    8f96:	9001      	str	r0, [sp, #4]
    8f98:	f004 f9ae 	bl	d2f8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    8f9c:	9801      	ldr	r0, [sp, #4]
    8f9e:	f004 f99f 	bl	d2e0 <__tCycle_tick_veneer>
    8fa2:	edd4 7a00 	vldr	s15, [r4]
    8fa6:	ee37 0a80 	vadd.f32	s0, s15, s0
    8faa:	ed84 0a00 	vstr	s0, [r4]
}
    8fae:	b002      	add	sp, #8
    8fb0:	bd10      	pop	{r4, pc}
    8fb2:	bf00      	nop
    8fb4:	f3af 8000 	nop.w
    8fb8:	f3af 8000 	nop.w
    8fbc:	f3af 8000 	nop.w

00008fc0 <triTick>:
    tPBTriangle_setFreq(&tri[v][string], freq);
    8fc0:	f64d 12ec 	movw	r2, #55788	; 0xd9ec
    8fc4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8fc8:	f2c2 0201 	movt	r2, #8193	; 0x2001
{
    8fcc:	b510      	push	{r4, lr}
    8fce:	ed2d 8b02 	vpush	{d8}
    8fd2:	eeb0 8a60 	vmov.f32	s16, s1
    8fd6:	b082      	sub	sp, #8
    8fd8:	4604      	mov	r4, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    8fda:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    8fde:	9001      	str	r0, [sp, #4]
    8fe0:	f004 fb1a 	bl	d618 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    8fe4:	eeb0 0a48 	vmov.f32	s0, s16
    8fe8:	9801      	ldr	r0, [sp, #4]
    8fea:	f004 fa29 	bl	d440 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    8fee:	9801      	ldr	r0, [sp, #4]
    8ff0:	f004 fa52 	bl	d498 <__tPBTriangle_tick_veneer>
    8ff4:	edd4 7a00 	vldr	s15, [r4]
    8ff8:	ee37 0a80 	vadd.f32	s0, s15, s0
    8ffc:	ed84 0a00 	vstr	s0, [r4]
}
    9000:	b002      	add	sp, #8
    9002:	ecbd 8b02 	vpop	{d8}
    9006:	bd10      	pop	{r4, pc}
    9008:	f3af 8000 	nop.w
    900c:	f3af 8000 	nop.w
    9010:	f3af 8000 	nop.w
    9014:	f3af 8000 	nop.w
    9018:	f3af 8000 	nop.w
    901c:	f3af 8000 	nop.w

00009020 <userTick>:
}
    9020:	4770      	bx	lr
    9022:	bf00      	nop
    9024:	f3af 8000 	nop.w
    9028:	f3af 8000 	nop.w
    902c:	f3af 8000 	nop.w
    9030:	f3af 8000 	nop.w
    9034:	f3af 8000 	nop.w
    9038:	f3af 8000 	nop.w
    903c:	f3af 8000 	nop.w

00009040 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    9040:	f249 331c 	movw	r3, #37660	; 0x931c
    9044:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    9048:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    904c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9050:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    9054:	b570      	push	{r4, r5, r6, lr}
    9056:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    905a:	ed92 6a00 	vldr	s12, [r2]
{
    905e:	460c      	mov	r4, r1
    9060:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    9062:	eeb4 6ae7 	vcmpe.f32	s12, s15
    9066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    906a:	f240 8088 	bls.w	917e <filter_tick+0x13e>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    906e:	1c8a      	adds	r2, r1, #2
    9070:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    9074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	    cutoff[f]  = MIDIcutoff + (note  * keyFollow);
    9078:	ed91 7a00 	vldr	s14, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    907c:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    9080:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	    cutoff[f]  = MIDIcutoff + (note  * keyFollow);
    9084:	edd2 7a00 	vldr	s15, [r2]
    9088:	eee0 7a07 	vfma.f32	s15, s0, s14
		float enabled = filtParams[FilterEnabled].realVal[string];
    908c:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    9090:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    9094:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    9098:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    909c:	eeb4 9ae6 	vcmpe.f32	s18, s13
    90a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90a4:	d95c      	bls.n	9160 <filter_tick+0x120>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    90a6:	f649 62b4 	movw	r2, #40628	; 0x9eb4
    90aa:	1ca1      	adds	r1, r4, #2
	if (enabledFilt[0])
    90ac:	eeb4 6ae6 	vcmpe.f32	s12, s13
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    90b0:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    90b4:	f2c2 0201 	movt	r2, #8193	; 0x2001
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    90b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    90bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (enabledFilt[0])
    90c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    90c4:	edd3 8a00 	vldr	s17, [r3]
	    cutoff[f]  = MIDIcutoff + (note  * keyFollow);
    90c8:	edd1 5a00 	vldr	s11, [r1]
    90cc:	ed11 7a15 	vldr	s14, [r1, #-84]	; 0xffffffac
    90d0:	eea0 7a25 	vfma.f32	s14, s0, s11
    90d4:	eeb0 8a47 	vmov.f32	s16, s14
	if (enabledFilt[0])
    90d8:	dd22      	ble.n	9120 <filter_tick+0xe0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    90da:	f24d 3698 	movw	r6, #54168	; 0xd398
    90de:	eeb0 0a67 	vmov.f32	s0, s15
    90e2:	4622      	mov	r2, r4
    90e4:	2100      	movs	r1, #0
    90e6:	f2c2 0601 	movt	r6, #8193	; 0x2001
    90ea:	4628      	mov	r0, r5
    90ec:	6833      	ldr	r3, [r6, #0]
    90ee:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    90f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    90f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    90f8:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    90fc:	edd5 7a00 	vldr	s15, [r5]
    9100:	ee37 7a68 	vsub.f32	s14, s14, s17
	if (enabledFilt[1])
    9104:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    9108:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    910c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    9110:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    9114:	dc14      	bgt.n	9140 <filter_tick+0x100>
	return samples[1] + (samples[0] * sp);
    9116:	eea8 0aa7 	vfma.f32	s0, s17, s15
}
    911a:	ecbd 8b04 	vpop	{d8-d9}
    911e:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    9120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    9124:	edd5 7a01 	vldr	s15, [r5, #4]
    9128:	edd5 6a00 	vldr	s13, [r5]
    912c:	f24d 3698 	movw	r6, #54168	; 0xd398
	float sendToFilter2 = samples[0] * (1.0f - sp);
    9130:	ee37 7a68 	vsub.f32	s14, s14, s17
    9134:	f2c2 0601 	movt	r6, #8193	; 0x2001
	samples[1] += sendToFilter2;
    9138:	eee6 7a87 	vfma.f32	s15, s13, s14
    913c:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    9140:	eeb0 0a48 	vmov.f32	s0, s16
    9144:	6873      	ldr	r3, [r6, #4]
    9146:	4622      	mov	r2, r4
    9148:	2101      	movs	r1, #1
    914a:	1d28      	adds	r0, r5, #4
    914c:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    914e:	ed95 0a01 	vldr	s0, [r5, #4]
    9152:	edd5 7a00 	vldr	s15, [r5]
    9156:	eea8 0aa7 	vfma.f32	s0, s17, s15
}
    915a:	ecbd 8b04 	vpop	{d8-d9}
    915e:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    9160:	eeb4 6ae6 	vcmpe.f32	s12, s13
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    9164:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    9168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    9170:	edd3 8a00 	vldr	s17, [r3]
	if (enabledFilt[0])
    9174:	dd07      	ble.n	9186 <filter_tick+0x146>
	float cutoff[2] = {0.0f, 0.0f};
    9176:	2300      	movs	r3, #0
    9178:	ee08 3a10 	vmov	s16, r3
    917c:	e7ad      	b.n	90da <filter_tick+0x9a>
    917e:	2200      	movs	r2, #0
    9180:	ee07 2a90 	vmov	s15, r2
    9184:	e782      	b.n	908c <filter_tick+0x4c>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    9186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    918a:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    918e:	edd5 7a00 	vldr	s15, [r5]
    9192:	ee37 7a68 	vsub.f32	s14, s14, s17
	samples[1] += sendToFilter2;
    9196:	eea7 0a27 	vfma.f32	s0, s14, s15
    919a:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    919e:	eea8 0aa7 	vfma.f32	s0, s17, s15
}
    91a2:	ecbd 8b04 	vpop	{d8-d9}
    91a6:	bd70      	pop	{r4, r5, r6, pc}
    91a8:	f3af 8000 	nop.w
    91ac:	f3af 8000 	nop.w
    91b0:	f3af 8000 	nop.w
    91b4:	f3af 8000 	nop.w
    91b8:	f3af 8000 	nop.w
    91bc:	f3af 8000 	nop.w

000091c0 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    91c0:	f24d 530c 	movw	r3, #54540	; 0xd50c
    91c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    91c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    91cc:	b530      	push	{r4, r5, lr}
    91ce:	4604      	mov	r4, r0
    91d0:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    91d2:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    91d6:	0095      	lsls	r5, r2, #2
    91d8:	9001      	str	r0, [sp, #4]
    91da:	f004 f8cd 	bl	d378 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickLP(&lowpass[v][string], *sample);
    91de:	ed94 0a00 	vldr	s0, [r4]
    91e2:	9801      	ldr	r0, [sp, #4]
    91e4:	f004 f850 	bl	d288 <__tSVF_tickLP_veneer>
    *sample *= filterGain[v][string];
    91e8:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tSVF_tickLP(&lowpass[v][string], *sample);
    91ec:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    91f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    91f4:	442b      	add	r3, r5
    91f6:	edd3 7a00 	vldr	s15, [r3]
    91fa:	ee67 7a80 	vmul.f32	s15, s15, s0
    91fe:	edc4 7a00 	vstr	s15, [r4]
}
    9202:	b003      	add	sp, #12
    9204:	bd30      	pop	{r4, r5, pc}
    9206:	bf00      	nop
    9208:	f3af 8000 	nop.w
    920c:	f3af 8000 	nop.w
    9210:	f3af 8000 	nop.w
    9214:	f3af 8000 	nop.w
    9218:	f3af 8000 	nop.w
    921c:	f3af 8000 	nop.w

00009220 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    9220:	f24d 4308 	movw	r3, #54280	; 0xd408
    9224:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    9228:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    922c:	b530      	push	{r4, r5, lr}
    922e:	4604      	mov	r4, r0
    9230:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    9232:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    9236:	0095      	lsls	r5, r2, #2
    9238:	9001      	str	r0, [sp, #4]
    923a:	f004 f89d 	bl	d378 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickHP(&highpass[v][string], *sample);
    923e:	ed94 0a00 	vldr	s0, [r4]
    9242:	9801      	ldr	r0, [sp, #4]
    9244:	f004 faa4 	bl	d790 <__tSVF_tickHP_veneer>
    *sample *= filterGain[v][string];
    9248:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tSVF_tickHP(&highpass[v][string], *sample);
    924c:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    9250:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9254:	442b      	add	r3, r5
    9256:	edd3 7a00 	vldr	s15, [r3]
    925a:	ee67 7a80 	vmul.f32	s15, s15, s0
    925e:	edc4 7a00 	vstr	s15, [r4]
}
    9262:	b003      	add	sp, #12
    9264:	bd30      	pop	{r4, r5, pc}
    9266:	bf00      	nop
    9268:	f3af 8000 	nop.w
    926c:	f3af 8000 	nop.w
    9270:	f3af 8000 	nop.w
    9274:	f3af 8000 	nop.w
    9278:	f3af 8000 	nop.w
    927c:	f3af 8000 	nop.w

00009280 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    9280:	f24d 2334 	movw	r3, #53812	; 0xd234
    9284:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    9288:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    928c:	b530      	push	{r4, r5, lr}
    928e:	4604      	mov	r4, r0
    9290:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    9292:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    9296:	0095      	lsls	r5, r2, #2
    9298:	9001      	str	r0, [sp, #4]
    929a:	f004 f86d 	bl	d378 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickBP(&bandpass[v][string], *sample);
    929e:	ed94 0a00 	vldr	s0, [r4]
    92a2:	9801      	ldr	r0, [sp, #4]
    92a4:	f004 f980 	bl	d5a8 <__tSVF_tickBP_veneer>
    *sample *= filterGain[v][string];
    92a8:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tSVF_tickBP(&bandpass[v][string], *sample);
    92ac:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    92b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    92b4:	442b      	add	r3, r5
    92b6:	edd3 7a00 	vldr	s15, [r3]
    92ba:	ee67 7a80 	vmul.f32	s15, s15, s0
    92be:	edc4 7a00 	vstr	s15, [r4]
}
    92c2:	b003      	add	sp, #12
    92c4:	bd30      	pop	{r4, r5, pc}
    92c6:	bf00      	nop
    92c8:	f3af 8000 	nop.w
    92cc:	f3af 8000 	nop.w
    92d0:	f3af 8000 	nop.w
    92d4:	f3af 8000 	nop.w
    92d8:	f3af 8000 	nop.w
    92dc:	f3af 8000 	nop.w

000092e0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    92e0:	f24d 3314 	movw	r3, #54036	; 0xd314
    92e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    92e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    92ec:	b530      	push	{r4, r5, lr}
    92ee:	4604      	mov	r4, r0
    92f0:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    92f2:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    92f6:	0095      	lsls	r5, r2, #2
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	f004 f979 	bl	d5f0 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    92fe:	ed94 0a00 	vldr	s0, [r4]
    9302:	9801      	ldr	r0, [sp, #4]
    9304:	f004 f8f8 	bl	d4f8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    9308:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    930c:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    9310:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9314:	442b      	add	r3, r5
    9316:	edd3 7a00 	vldr	s15, [r3]
    931a:	ee67 7a80 	vmul.f32	s15, s15, s0
    931e:	edc4 7a00 	vstr	s15, [r4]
}
    9322:	b003      	add	sp, #12
    9324:	bd30      	pop	{r4, r5, pc}
    9326:	bf00      	nop
    9328:	f3af 8000 	nop.w
    932c:	f3af 8000 	nop.w
    9330:	f3af 8000 	nop.w
    9334:	f3af 8000 	nop.w
    9338:	f3af 8000 	nop.w
    933c:	f3af 8000 	nop.w

00009340 <VZpeakTick>:
	tVZFilterBell_setFreqFast(&VZfilterPeak[v][string], cutoff);
    9340:	f24d 2318 	movw	r3, #53784	; 0xd218
    9344:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9348:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    934c:	b510      	push	{r4, lr}
    934e:	4604      	mov	r4, r0
    9350:	b082      	sub	sp, #8
	tVZFilterBell_setFreqFast(&VZfilterPeak[v][string], cutoff);
    9352:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9356:	9001      	str	r0, [sp, #4]
    9358:	f004 f8fa 	bl	d550 <__tVZFilterBell_setFreqFast_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    935c:	9801      	ldr	r0, [sp, #4]
    935e:	ed94 0a00 	vldr	s0, [r4]
    9362:	f004 f9e9 	bl	d738 <__tVZFilterBell_tick_veneer>
    9366:	ed84 0a00 	vstr	s0, [r4]
}
    936a:	b002      	add	sp, #8
    936c:	bd10      	pop	{r4, pc}
    936e:	bf00      	nop
    9370:	f3af 8000 	nop.w
    9374:	f3af 8000 	nop.w
    9378:	f3af 8000 	nop.w
    937c:	f3af 8000 	nop.w

00009380 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    9380:	f24d 2308 	movw	r3, #53768	; 0xd208
    9384:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9388:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    938c:	b510      	push	{r4, lr}
    938e:	4604      	mov	r4, r0
    9390:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    9392:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9396:	9001      	str	r0, [sp, #4]
    9398:	f004 f846 	bl	d428 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    939c:	9801      	ldr	r0, [sp, #4]
    939e:	ed94 0a00 	vldr	s0, [r4]
    93a2:	f004 f8c9 	bl	d538 <__tVZFilterLS_tick_veneer>
    93a6:	ed84 0a00 	vstr	s0, [r4]
}
    93aa:	b002      	add	sp, #8
    93ac:	bd10      	pop	{r4, pc}
    93ae:	bf00      	nop
    93b0:	f3af 8000 	nop.w
    93b4:	f3af 8000 	nop.w
    93b8:	f3af 8000 	nop.w
    93bc:	f3af 8000 	nop.w

000093c0 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    93c0:	f24d 13f8 	movw	r3, #53752	; 0xd1f8
    93c4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    93c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    93cc:	b510      	push	{r4, lr}
    93ce:	4604      	mov	r4, r0
    93d0:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    93d2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    93d6:	9001      	str	r0, [sp, #4]
    93d8:	f004 f97a 	bl	d6d0 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    93dc:	9801      	ldr	r0, [sp, #4]
    93de:	ed94 0a00 	vldr	s0, [r4]
    93e2:	f003 ff11 	bl	d208 <__tVZFilterHS_tick_veneer>
    93e6:	ed84 0a00 	vstr	s0, [r4]
}
    93ea:	b002      	add	sp, #8
    93ec:	bd10      	pop	{r4, pc}
    93ee:	bf00      	nop
    93f0:	f3af 8000 	nop.w
    93f4:	f3af 8000 	nop.w
    93f8:	f3af 8000 	nop.w
    93fc:	f3af 8000 	nop.w

00009400 <VZbandrejectTick>:
	tVZFilterBR_setFreqFast(&VZfilterBR[v][string], cutoff);
    9400:	f24d 13e8 	movw	r3, #53736	; 0xd1e8
    9404:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    9408:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    940c:	b530      	push	{r4, r5, lr}
    940e:	4604      	mov	r4, r0
    9410:	b083      	sub	sp, #12
	tVZFilterBR_setFreqFast(&VZfilterBR[v][string], cutoff);
    9412:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    9416:	0095      	lsls	r5, r2, #2
    9418:	9001      	str	r0, [sp, #4]
    941a:	f003 ff11 	bl	d240 <__tVZFilterBR_setFreqFast_veneer>
	*sample = tVZFilterBR_tick(&VZfilterBR[v][string], *sample);
    941e:	ed94 0a00 	vldr	s0, [r4]
    9422:	9801      	ldr	r0, [sp, #4]
    9424:	f004 f82c 	bl	d480 <__tVZFilterBR_tick_veneer>
    *sample *= filterGain[v][string];
    9428:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tVZFilterBR_tick(&VZfilterBR[v][string], *sample);
    942c:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    9430:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9434:	442b      	add	r3, r5
    9436:	edd3 7a00 	vldr	s15, [r3]
    943a:	ee67 7a80 	vmul.f32	s15, s15, s0
    943e:	edc4 7a00 	vstr	s15, [r4]
}
    9442:	b003      	add	sp, #12
    9444:	bd30      	pop	{r4, r5, pc}
    9446:	bf00      	nop
    9448:	f3af 8000 	nop.w
    944c:	f3af 8000 	nop.w
    9450:	f3af 8000 	nop.w
    9454:	f3af 8000 	nop.w
    9458:	f3af 8000 	nop.w
    945c:	f3af 8000 	nop.w

00009460 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    9460:	f24d 13d8 	movw	r3, #53720	; 0xd1d8
    9464:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    9468:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    946c:	b530      	push	{r4, r5, lr}
    946e:	4604      	mov	r4, r0
    9470:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    9472:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    9476:	0095      	lsls	r5, r2, #2
    9478:	9001      	str	r0, [sp, #4]
    947a:	f003 fff5 	bl	d468 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    947e:	ed94 0a00 	vldr	s0, [r4]
    9482:	9801      	ldr	r0, [sp, #4]
    9484:	f003 fef8 	bl	d278 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    9488:	f24d 3388 	movw	r3, #54152	; 0xd388
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    948c:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    9490:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9494:	442b      	add	r3, r5
    9496:	edd3 7a00 	vldr	s15, [r3]
    949a:	ee67 7a80 	vmul.f32	s15, s15, s0
    949e:	edc4 7a00 	vstr	s15, [r4]
}
    94a2:	b003      	add	sp, #12
    94a4:	bd30      	pop	{r4, r5, pc}
    94a6:	bf00      	nop
    94a8:	f3af 8000 	nop.w
    94ac:	f3af 8000 	nop.w
    94b0:	f3af 8000 	nop.w
    94b4:	f3af 8000 	nop.w
    94b8:	f3af 8000 	nop.w
    94bc:	f3af 8000 	nop.w

000094c0 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    94c0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    94c4:	f249 321c 	movw	r2, #37660	; 0x931c
	pitch *= 24.0f;
    94c8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    94cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    94d0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    94d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    94d8:	0040      	lsls	r0, r0, #1
    94da:	3320      	adds	r3, #32
	pitch *= 24.0f;
    94dc:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    94e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    94e4:	440b      	add	r3, r1
    94e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    94ea:	ed92 7a02 	vldr	s14, [r2, #8]
    94ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
    94f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94f6:	dd01      	ble.n	94fc <setFreqMultPitch+0x3c>
		pitch = roundf(pitch);
    94f8:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    94fc:	f24d 631c 	movw	r3, #54812	; 0xd61c
    9500:	4401      	add	r1, r0
    9502:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9506:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    950a:	ed83 0a00 	vstr	s0, [r3]
}
    950e:	4770      	bx	lr
    9510:	f3af 8000 	nop.w
    9514:	f3af 8000 	nop.w
    9518:	f3af 8000 	nop.w
    951c:	f3af 8000 	nop.w

00009520 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    9520:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9524:	f249 321c 	movw	r2, #37660	; 0x931c
	harm *= 15.0f;
    9528:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    952c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9530:	f2c2 0201 	movt	r2, #8193	; 0x2001
    9534:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    9538:	0040      	lsls	r0, r0, #1
    953a:	3320      	adds	r3, #32
	harm *= 15.0f;
    953c:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    9540:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    9544:	440b      	add	r3, r1
    9546:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    954a:	ed92 7a02 	vldr	s14, [r2, #8]
    954e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9556:	dd01      	ble.n	955c <setFreqMultHarm+0x3c>
		harm = roundf(harm);
    9558:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    955c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    9560:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    9564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9568:	db0b      	blt.n	9582 <setFreqMultHarm+0x62>
		freqMult[osc][string] = (harm + 1);
    956a:	ee30 0a27 	vadd.f32	s0, s0, s15
    956e:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    9572:	4401      	add	r1, r0
    9574:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9578:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    957c:	ed83 0a00 	vstr	s0, [r3]
}
    9580:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    9582:	ee30 0a67 	vsub.f32	s0, s0, s15
    9586:	eeb0 7ac0 	vabs.f32	s14, s0
    958a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    958e:	e7ee      	b.n	956e <setFreqMultHarm+0x4e>
    9590:	f3af 8000 	nop.w
    9594:	f3af 8000 	nop.w
    9598:	f3af 8000 	nop.w
    959c:	f3af 8000 	nop.w

000095a0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    95a0:	f24d 530c 	movw	r3, #54540	; 0xd50c
    95a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    95a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    95b0:	f004 b852 	b.w	d658 <__tSVF_setQ_veneer>
    95b4:	f3af 8000 	nop.w
    95b8:	f3af 8000 	nop.w
    95bc:	f3af 8000 	nop.w

000095c0 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    95c0:	f24d 4308 	movw	r3, #54280	; 0xd408
    95c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    95c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    95d0:	f004 b842 	b.w	d658 <__tSVF_setQ_veneer>
    95d4:	f3af 8000 	nop.w
    95d8:	f3af 8000 	nop.w
    95dc:	f3af 8000 	nop.w

000095e0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    95e0:	f24d 2334 	movw	r3, #53812	; 0xd234
    95e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    95e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    95ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    95f0:	f004 b832 	b.w	d658 <__tSVF_setQ_veneer>
    95f4:	f3af 8000 	nop.w
    95f8:	f3af 8000 	nop.w
    95fc:	f3af 8000 	nop.w

00009600 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    9600:	f24d 3314 	movw	r3, #54036	; 0xd314
    9604:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9608:	f2c2 0301 	movt	r3, #8193	; 0x2001
    960c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9610:	f003 bf22 	b.w	d458 <__tDiodeFilter_setQ_veneer>
    9614:	f3af 8000 	nop.w
    9618:	f3af 8000 	nop.w
    961c:	f3af 8000 	nop.w

00009620 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q*20.0f);
    9620:	f24d 2318 	movw	r3, #53784	; 0xd218
    9624:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    9628:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    962c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9630:	ee20 0a27 	vmul.f32	s0, s0, s15
    9634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9638:	f003 bed6 	b.w	d3e8 <__tVZFilterBell_setBandwidth_veneer>
    963c:	f3af 8000 	nop.w

00009640 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    9640:	f24d 2308 	movw	r3, #53768	; 0xd208
    9644:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9648:	f2c2 0301 	movt	r3, #8193	; 0x2001
    964c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9650:	f003 be8a 	b.w	d368 <__tVZFilterLS_setResonance_veneer>
    9654:	f3af 8000 	nop.w
    9658:	f3af 8000 	nop.w
    965c:	f3af 8000 	nop.w

00009660 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    9660:	f24d 13f8 	movw	r3, #53752	; 0xd1f8
    9664:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9668:	f2c2 0301 	movt	r3, #8193	; 0x2001
    966c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9670:	f003 bfaa 	b.w	d5c8 <__tVZFilterHS_setResonance_veneer>
    9674:	f3af 8000 	nop.w
    9678:	f3af 8000 	nop.w
    967c:	f3af 8000 	nop.w

00009680 <VZbandrejectSetQ>:
	tVZFilterBR_setResonance(&VZfilterBR[v][string], q);
    9680:	f24d 13e8 	movw	r3, #53736	; 0xd1e8
    9684:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9688:	f2c2 0301 	movt	r3, #8193	; 0x2001
    968c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9690:	f003 bebe 	b.w	d410 <__tVZFilterBR_setResonance_veneer>
    9694:	f3af 8000 	nop.w
    9698:	f3af 8000 	nop.w
    969c:	f3af 8000 	nop.w

000096a0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    96a0:	f24d 13d8 	movw	r3, #53720	; 0xd1d8
    96a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    96a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    96b0:	f003 be3e 	b.w	d330 <__tLadderFilter_setQ_veneer>
    96b4:	f3af 8000 	nop.w
    96b8:	f3af 8000 	nop.w
    96bc:	f3af 8000 	nop.w

000096c0 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    96c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    96c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    96c8:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    96ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    96ce:	4605      	mov	r5, r0
    96d0:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    96d2:	eeb0 0a67 	vmov.f32	s0, s15
    96d6:	f003 ff07 	bl	d4e8 <__dbToATableLookup_veneer>
    96da:	f24d 3388 	movw	r3, #54152	; 0xd388
    96de:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    96e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    96e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    96ea:	ed83 0a00 	vstr	s0, [r3]
}
    96ee:	bd38      	pop	{r3, r4, r5, pc}
    96f0:	f3af 8000 	nop.w
    96f4:	f3af 8000 	nop.w
    96f8:	f3af 8000 	nop.w
    96fc:	f3af 8000 	nop.w

00009700 <highpassSetGain>:
    9700:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9704:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    9708:	b538      	push	{r3, r4, r5, lr}
    970a:	eee0 7a07 	vfma.f32	s15, s0, s14
    970e:	4605      	mov	r5, r0
    9710:	460c      	mov	r4, r1
    9712:	eeb0 0a67 	vmov.f32	s0, s15
    9716:	f003 fee7 	bl	d4e8 <__dbToATableLookup_veneer>
    971a:	f24d 3388 	movw	r3, #54152	; 0xd388
    971e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9722:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9726:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    972a:	ed83 0a00 	vstr	s0, [r3]
    972e:	bd38      	pop	{r3, r4, r5, pc}
    9730:	f3af 8000 	nop.w
    9734:	f3af 8000 	nop.w
    9738:	f3af 8000 	nop.w
    973c:	f3af 8000 	nop.w

00009740 <bandpassSetGain>:
    9740:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9744:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    9748:	b538      	push	{r3, r4, r5, lr}
    974a:	eee0 7a07 	vfma.f32	s15, s0, s14
    974e:	4605      	mov	r5, r0
    9750:	460c      	mov	r4, r1
    9752:	eeb0 0a67 	vmov.f32	s0, s15
    9756:	f003 fec7 	bl	d4e8 <__dbToATableLookup_veneer>
    975a:	f24d 3388 	movw	r3, #54152	; 0xd388
    975e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9762:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9766:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    976a:	ed83 0a00 	vstr	s0, [r3]
    976e:	bd38      	pop	{r3, r4, r5, pc}
    9770:	f3af 8000 	nop.w
    9774:	f3af 8000 	nop.w
    9778:	f3af 8000 	nop.w
    977c:	f3af 8000 	nop.w

00009780 <diodeLowpassSetGain>:
    9780:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9784:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    9788:	b538      	push	{r3, r4, r5, lr}
    978a:	eee0 7a07 	vfma.f32	s15, s0, s14
    978e:	4605      	mov	r5, r0
    9790:	460c      	mov	r4, r1
    9792:	eeb0 0a67 	vmov.f32	s0, s15
    9796:	f003 fea7 	bl	d4e8 <__dbToATableLookup_veneer>
    979a:	f24d 3388 	movw	r3, #54152	; 0xd388
    979e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    97a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    97aa:	ed83 0a00 	vstr	s0, [r3]
    97ae:	bd38      	pop	{r3, r4, r5, pc}
    97b0:	f3af 8000 	nop.w
    97b4:	f3af 8000 	nop.w
    97b8:	f3af 8000 	nop.w
    97bc:	f3af 8000 	nop.w

000097c0 <VZpeakSetGain>:
{
    97c0:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    97c2:	2300      	movs	r3, #0
    97c4:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    97c8:	4605      	mov	r5, r0
    97ca:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    97cc:	f2c4 2348 	movt	r3, #16968	; 0x4248
    97d0:	ee07 3a90 	vmov	s15, r3
    97d4:	eea0 7a27 	vfma.f32	s14, s0, s15
    97d8:	eeb0 0a47 	vmov.f32	s0, s14
    97dc:	f003 fe84 	bl	d4e8 <__dbToATableLookup_veneer>
    97e0:	f24d 2318 	movw	r3, #53784	; 0xd218
    97e4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    97e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    97ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    97f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    97f4:	f003 bcdc 	b.w	d1b0 <__tVZFilterBell_setGain_veneer>
    97f8:	f3af 8000 	nop.w
    97fc:	f3af 8000 	nop.w

00009800 <VZlowshelfSetGain>:
{
    9800:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    9802:	2300      	movs	r3, #0
    9804:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    9808:	4605      	mov	r5, r0
    980a:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    980c:	f2c4 2348 	movt	r3, #16968	; 0x4248
    9810:	ee07 3a90 	vmov	s15, r3
    9814:	eea0 7a27 	vfma.f32	s14, s0, s15
    9818:	eeb0 0a47 	vmov.f32	s0, s14
    981c:	f003 fe64 	bl	d4e8 <__dbToATableLookup_veneer>
    9820:	f24d 2308 	movw	r3, #53768	; 0xd208
    9824:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9828:	f2c2 0301 	movt	r3, #8193	; 0x2001
    982c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    9830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    9834:	f003 bf94 	b.w	d760 <__tVZFilterLS_setGain_veneer>
    9838:	f3af 8000 	nop.w
    983c:	f3af 8000 	nop.w

00009840 <VZhighshelfSetGain>:
{
    9840:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    9842:	2300      	movs	r3, #0
    9844:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    9848:	4605      	mov	r5, r0
    984a:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    984c:	f2c4 2348 	movt	r3, #16968	; 0x4248
    9850:	ee07 3a90 	vmov	s15, r3
    9854:	eea0 7a27 	vfma.f32	s14, s0, s15
    9858:	eeb0 0a47 	vmov.f32	s0, s14
    985c:	f003 fe44 	bl	d4e8 <__dbToATableLookup_veneer>
    9860:	f24d 13f8 	movw	r3, #53752	; 0xd1f8
    9864:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9868:	f2c2 0301 	movt	r3, #8193	; 0x2001
    986c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    9870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    9874:	f003 bcd0 	b.w	d218 <__tVZFilterHS_setGain_veneer>
    9878:	f3af 8000 	nop.w
    987c:	f3af 8000 	nop.w

00009880 <VZbandrejectSetGain>:
    9880:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9884:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    9888:	b538      	push	{r3, r4, r5, lr}
    988a:	eee0 7a07 	vfma.f32	s15, s0, s14
    988e:	4605      	mov	r5, r0
    9890:	460c      	mov	r4, r1
    9892:	eeb0 0a67 	vmov.f32	s0, s15
    9896:	f003 fe27 	bl	d4e8 <__dbToATableLookup_veneer>
    989a:	f24d 3388 	movw	r3, #54152	; 0xd388
    989e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    98a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    98aa:	ed83 0a00 	vstr	s0, [r3]
    98ae:	bd38      	pop	{r3, r4, r5, pc}
    98b0:	f3af 8000 	nop.w
    98b4:	f3af 8000 	nop.w
    98b8:	f3af 8000 	nop.w
    98bc:	f3af 8000 	nop.w

000098c0 <LadderLowpassSetGain>:
    98c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    98c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    98c8:	b538      	push	{r3, r4, r5, lr}
    98ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    98ce:	4605      	mov	r5, r0
    98d0:	460c      	mov	r4, r1
    98d2:	eeb0 0a67 	vmov.f32	s0, s15
    98d6:	f003 fe07 	bl	d4e8 <__dbToATableLookup_veneer>
    98da:	f24d 3388 	movw	r3, #54152	; 0xd388
    98de:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    98e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    98e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    98ea:	ed83 0a00 	vstr	s0, [r3]
    98ee:	bd38      	pop	{r3, r4, r5, pc}
    98f0:	f3af 8000 	nop.w
    98f4:	f3af 8000 	nop.w
    98f8:	f3af 8000 	nop.w
    98fc:	f3af 8000 	nop.w

00009900 <envelope_tick>:
{
    9900:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    9902:	f24d 3434 	movw	r4, #54068	; 0xd334
{
    9906:	4605      	mov	r5, r0
		if (envOn[v])
    9908:	f2c2 0401 	movt	r4, #8193	; 0x2001
    990c:	7823      	ldrb	r3, [r4, #0]
    990e:	bbe3      	cbnz	r3, 998a <envelope_tick+0x8a>
    9910:	7863      	ldrb	r3, [r4, #1]
    9912:	bb43      	cbnz	r3, 9966 <envelope_tick+0x66>
    9914:	78a3      	ldrb	r3, [r4, #2]
    9916:	b9a3      	cbnz	r3, 9942 <envelope_tick+0x42>
    9918:	78e3      	ldrb	r3, [r4, #3]
    991a:	b903      	cbnz	r3, 991e <envelope_tick+0x1e>
}
    991c:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    991e:	f24d 3338 	movw	r3, #54072	; 0xd338
    9922:	1da8      	adds	r0, r5, #6
    9924:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    992c:	f003 fcb4 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    9930:	f64d 0380 	movw	r3, #55424	; 0xd880
    9934:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9938:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    993c:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    9940:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    9942:	f24d 3338 	movw	r3, #54072	; 0xd338
    9946:	1d28      	adds	r0, r5, #4
    9948:	f2c2 0301 	movt	r3, #8193	; 0x2001
    994c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9950:	f003 fca2 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    9954:	f64d 0380 	movw	r3, #55424	; 0xd880
    9958:	f2c2 0301 	movt	r3, #8193	; 0x2001
    995c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9960:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    9964:	e7d8      	b.n	9918 <envelope_tick+0x18>
    9966:	f24d 3338 	movw	r3, #54072	; 0xd338
    996a:	1ca8      	adds	r0, r5, #2
    996c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9974:	f003 fc90 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    9978:	f64d 0380 	movw	r3, #55424	; 0xd880
    997c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9980:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9984:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    9988:	e7c4      	b.n	9914 <envelope_tick+0x14>
    998a:	f24d 3038 	movw	r0, #54072	; 0xd338
    998e:	f2c2 0001 	movt	r0, #8193	; 0x2001
    9992:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    9996:	f003 fc7f 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    999a:	f64d 0380 	movw	r3, #55424	; 0xd880
    999e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    99a2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    99a6:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    99aa:	e7b1      	b.n	9910 <envelope_tick+0x10>
    99ac:	f3af 8000 	nop.w
    99b0:	f3af 8000 	nop.w
    99b4:	f3af 8000 	nop.w
    99b8:	f3af 8000 	nop.w
    99bc:	f3af 8000 	nop.w

000099c0 <lfo_tick>:
{
    99c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99c4:	f24d 4738 	movw	r7, #54328	; 0xd438
    99c8:	f64d 0580 	movw	r5, #55424	; 0xd880
    99cc:	f24d 469c 	movw	r6, #54428	; 0xd49c
    99d0:	b082      	sub	sp, #8
    99d2:	f2c2 0701 	movt	r7, #8193	; 0x2001
    99d6:	f2c2 0501 	movt	r5, #8193	; 0x2001
    99da:	4680      	mov	r8, r0
    99dc:	f2c2 0601 	movt	r6, #8193	; 0x2001
    99e0:	f107 0a04 	add.w	sl, r7, #4
    99e4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
			float sample = 0.0f;
    99e8:	f04f 0900 	mov.w	r9, #0
{
    99ec:	463c      	mov	r4, r7
			float sample = 0.0f;
    99ee:	1be1      	subs	r1, r4, r7
		if (lfoOn[i])
    99f0:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    99f4:	4642      	mov	r2, r8
    99f6:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    99f8:	b133      	cbz	r3, 9a08 <lfo_tick+0x48>
			lfoShapeTick[i](&sample,i, string);
    99fa:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    99fc:	f8cd 9004 	str.w	r9, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    9a00:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    9a02:	9b01      	ldr	r3, [sp, #4]
    9a04:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    9a08:	4554      	cmp	r4, sl
    9a0a:	f106 0604 	add.w	r6, r6, #4
    9a0e:	f105 0508 	add.w	r5, r5, #8
    9a12:	d1ec      	bne.n	99ee <lfo_tick+0x2e>
}
    9a14:	b002      	add	sp, #8
    9a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a1a:	bf00      	nop
    9a1c:	f3af 8000 	nop.w

00009a20 <setEnvelopeAttack>:
	a = a + 0.001f;
    9a20:	f241 236f 	movw	r3, #4719	; 0x126f
	tADSRT_setAttack(&envs[v][string], a);
    9a24:	f24d 3238 	movw	r2, #54072	; 0xd338
    9a28:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	a = a + 0.001f;
    9a2c:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	tADSRT_setAttack(&envs[v][string], a);
    9a30:	f2c2 0201 	movt	r2, #8193	; 0x2001
	a = a + 0.001f;
    9a34:	ee07 3a90 	vmov	s15, r3
	tADSRT_setAttack(&envs[v][string], a);
    9a38:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    9a3c:	ee30 0a27 	vadd.f32	s0, s0, s15
    9a40:	f003 be66 	b.w	d710 <__tADSRT_setAttack_veneer>
    9a44:	f3af 8000 	nop.w
    9a48:	f3af 8000 	nop.w
    9a4c:	f3af 8000 	nop.w
    9a50:	f3af 8000 	nop.w
    9a54:	f3af 8000 	nop.w
    9a58:	f3af 8000 	nop.w
    9a5c:	f3af 8000 	nop.w

00009a60 <setEnvelopeDecay>:
	d = d + 0.001f;
    9a60:	f241 236f 	movw	r3, #4719	; 0x126f
	tADSRT_setDecay(&envs[v][string], d);
    9a64:	f24d 3238 	movw	r2, #54072	; 0xd338
    9a68:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	d = d + 0.001f;
    9a6c:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	tADSRT_setDecay(&envs[v][string], d);
    9a70:	f2c2 0201 	movt	r2, #8193	; 0x2001
	d = d + 0.001f;
    9a74:	ee07 3a90 	vmov	s15, r3
	tADSRT_setDecay(&envs[v][string], d);
    9a78:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    9a7c:	ee30 0a27 	vadd.f32	s0, s0, s15
    9a80:	f003 bdba 	b.w	d5f8 <__tADSRT_setDecay_veneer>
    9a84:	f3af 8000 	nop.w
    9a88:	f3af 8000 	nop.w
    9a8c:	f3af 8000 	nop.w
    9a90:	f3af 8000 	nop.w
    9a94:	f3af 8000 	nop.w
    9a98:	f3af 8000 	nop.w
    9a9c:	f3af 8000 	nop.w

00009aa0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    9aa0:	f24d 3338 	movw	r3, #54072	; 0xd338
    9aa4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9aa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9aac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9ab0:	f003 bd82 	b.w	d5b8 <__tADSRT_setSustain_veneer>
    9ab4:	f3af 8000 	nop.w
    9ab8:	f3af 8000 	nop.w
    9abc:	f3af 8000 	nop.w

00009ac0 <setEnvelopeRelease>:
	r = r + 0.001f;
    9ac0:	f241 236f 	movw	r3, #4719	; 0x126f
	tADSRT_setRelease(&envs[v][string], r);
    9ac4:	f24d 3238 	movw	r2, #54072	; 0xd338
    9ac8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	r = r + 0.001f;
    9acc:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	tADSRT_setRelease(&envs[v][string], r);
    9ad0:	f2c2 0201 	movt	r2, #8193	; 0x2001
	r = r + 0.001f;
    9ad4:	ee07 3a90 	vmov	s15, r3
	tADSRT_setRelease(&envs[v][string], r);
    9ad8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    9adc:	ee30 0a27 	vadd.f32	s0, s0, s15
    9ae0:	f003 bcb2 	b.w	d448 <__tADSRT_setRelease_veneer>
    9ae4:	f3af 8000 	nop.w
    9ae8:	f3af 8000 	nop.w
    9aec:	f3af 8000 	nop.w
    9af0:	f3af 8000 	nop.w
    9af4:	f3af 8000 	nop.w
    9af8:	f3af 8000 	nop.w
    9afc:	f3af 8000 	nop.w

00009b00 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    9b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9b04:	f24b 7217 	movw	r2, #46871	; 0xb717
    9b08:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
    9b0c:	f24d 3c38 	movw	ip, #54072	; 0xd338
    9b10:	f6c3 0251 	movt	r2, #14417	; 0x3851
    9b14:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9b18:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
    9b1c:	ee37 7ac0 	vsub.f32	s14, s15, s0
    9b20:	f2c2 0c01 	movt	ip, #8193	; 0x2001
    9b24:	ee07 2a90 	vmov	s15, r2
    9b28:	ee00 3a10 	vmov	s0, r3
    9b2c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    9b30:	eea7 0a27 	vfma.f32	s0, s14, s15
    9b34:	f003 bc48 	b.w	d3c8 <__tADSRT_setLeakFactor_veneer>
    9b38:	f3af 8000 	nop.w
    9b3c:	f3af 8000 	nop.w

00009b40 <setAmp>:
	amplitude[string] = amp;
    9b40:	f24d 2328 	movw	r3, #53800	; 0xd228
    9b44:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9b4c:	ed81 0a00 	vstr	s0, [r1]
}
    9b50:	4770      	bx	lr
    9b52:	bf00      	nop
    9b54:	f3af 8000 	nop.w
    9b58:	f3af 8000 	nop.w
    9b5c:	f3af 8000 	nop.w

00009b60 <setMaster>:
	finalMaster[string] = amp;
    9b60:	f24d 33a8 	movw	r3, #54184	; 0xd3a8
    9b64:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b68:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9b6c:	ed81 0a00 	vstr	s0, [r1]
}
    9b70:	4770      	bx	lr
    9b72:	bf00      	nop
    9b74:	f3af 8000 	nop.w
    9b78:	f3af 8000 	nop.w
    9b7c:	f3af 8000 	nop.w

00009b80 <setTranspose>:
	transpose = in;
    9b80:	f64d 13e8 	movw	r3, #55784	; 0xd9e8
    9b84:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9b88:	ed83 0a00 	vstr	s0, [r3]
}
    9b8c:	4770      	bx	lr
    9b8e:	bf00      	nop
    9b90:	f3af 8000 	nop.w
    9b94:	f3af 8000 	nop.w
    9b98:	f3af 8000 	nop.w
    9b9c:	f3af 8000 	nop.w

00009ba0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    9ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
    9ba4:	f640 02c8 	movw	r2, #2248	; 0x8c8
    9ba8:	f6c3 1300 	movt	r3, #14592	; 0x3900
    9bac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9bb0:	ee07 3a90 	vmov	s15, r3
    9bb4:	ee20 0a27 	vmul.f32	s0, s0, s15
    9bb8:	ed82 0a00 	vstr	s0, [r2]
}
    9bbc:	4770      	bx	lr
    9bbe:	bf00      	nop

00009bc0 <setFinalLowpass>:
	tSVF_LP_setFreqFast(&finalLowpass[string], in);
    9bc0:	f24d 30a0 	movw	r0, #54176	; 0xd3a0
    9bc4:	f2c2 0001 	movt	r0, #8193	; 0x2001
    9bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9bcc:	f003 bdbc 	b.w	d748 <__tSVF_LP_setFreqFast_veneer>
    9bd0:	f3af 8000 	nop.w
    9bd4:	f3af 8000 	nop.w
    9bd8:	f3af 8000 	nop.w
    9bdc:	f3af 8000 	nop.w

00009be0 <tickMappings>:
{
    9be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    9be4:	f249 390c 	movw	r9, #37644	; 0x930c
	interruptChecker = 0;
    9be8:	f246 630f 	movw	r3, #26127	; 0x660f
    9bec:	f04f 0b00 	mov.w	fp, #0
	for (int i = 0; i < numMappings; i++)
    9bf0:	f2c2 0901 	movt	r9, #8193	; 0x2001
	interruptChecker = 0;
    9bf4:	f2c2 0301 	movt	r3, #8193	; 0x2001
	for (int i = 0; i < numMappings; i++)
    9bf8:	f899 2000 	ldrb.w	r2, [r9]
{
    9bfc:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    9c00:	f883 b000 	strb.w	fp, [r3]
{
    9c04:	b083      	sub	sp, #12
	for (int i = 0; i < numMappings; i++)
    9c06:	2a00      	cmp	r2, #0
    9c08:	f000 8092 	beq.w	9d30 <tickMappings+0x150>
    9c0c:	f24d 531c 	movw	r3, #54556	; 0xd51c
			for (int v = 0; v < numStringsThisBoard; v++)
    9c10:	f240 6894 	movw	r8, #1684	; 0x694
    9c14:	f248 64cc 	movw	r4, #34508	; 0x86cc
    9c18:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9c1c:	f2c2 0800 	movt	r8, #8192	; 0x2000
    9c20:	f2c2 0401 	movt	r4, #8193	; 0x2001
    9c24:	9301      	str	r3, [sp, #4]
    9c26:	e004      	b.n	9c32 <tickMappings+0x52>
	for (int i = 0; i < numMappings; i++)
    9c28:	f10b 0b01 	add.w	fp, fp, #1
    9c2c:	344c      	adds	r4, #76	; 0x4c
    9c2e:	455a      	cmp	r2, fp
    9c30:	dd7e      	ble.n	9d30 <tickMappings+0x150>
		if (mappings[i].destNumber != 255)
    9c32:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    9c36:	2bff      	cmp	r3, #255	; 0xff
    9c38:	d0f6      	beq.n	9c28 <tickMappings+0x48>
			for (int v = 0; v < numStringsThisBoard; v++)
    9c3a:	f898 3000 	ldrb.w	r3, [r8]
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d0f2      	beq.n	9c28 <tickMappings+0x48>
    9c42:	9b01      	ldr	r3, [sp, #4]
    9c44:	4626      	mov	r6, r4
    9c46:	2500      	movs	r5, #0
    9c48:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    9c4c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    9c50:	2b00      	cmp	r3, #0
    9c52:	d072      	beq.n	9d3a <tickMappings+0x15a>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9c54:	69f3      	ldr	r3, [r6, #28]
    9c56:	6832      	ldr	r2, [r6, #0]
    9c58:	ed93 7a00 	vldr	s14, [r3]
				float unsmoothedValue = 0.0f;
    9c5c:	2300      	movs	r3, #0
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9c5e:	ed92 8a00 	vldr	s16, [r2]
    9c62:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    9c66:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    9c6a:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9c6c:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    9c70:	2900      	cmp	r1, #0
    9c72:	d06b      	beq.n	9d4c <tickMappings+0x16c>
							smoothedValue += sum;
    9c74:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    9c78:	ee08 3a10 	vmov	s16, r3
					if (mappings[i].hookActive[j])
    9c7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    9c80:	b183      	cbz	r3, 9ca4 <tickMappings+0xc4>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9c82:	68b2      	ldr	r2, [r6, #8]
    9c84:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9c86:	ed92 7a00 	vldr	s14, [r2]
    9c8a:	ed93 6a00 	vldr	s12, [r3]
    9c8e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    9c92:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    9c96:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9c98:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    9c9c:	2900      	cmp	r1, #0
    9c9e:	d158      	bne.n	9d52 <tickMappings+0x172>
							unsmoothedValue += sum;
    9ca0:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    9ca4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    9ca8:	b183      	cbz	r3, 9ccc <tickMappings+0xec>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9caa:	6932      	ldr	r2, [r6, #16]
    9cac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    9cae:	ed92 7a00 	vldr	s14, [r2]
    9cb2:	ed93 6a00 	vldr	s12, [r3]
    9cb6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    9cba:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    9cbe:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9cc0:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    9cc4:	2900      	cmp	r1, #0
    9cc6:	d13e      	bne.n	9d46 <tickMappings+0x166>
							unsmoothedValue += sum;
    9cc8:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    9ccc:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    9cd0:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    9cd2:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    9cd4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9cd8:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    9cdc:	ee37 0a80 	vadd.f32	s0, s15, s0
    9ce0:	f003 faaa 	bl	d238 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    9ce4:	4638      	mov	r0, r7
    9ce6:	f003 faf3 	bl	d2d0 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9cea:	f854 ac04 	ldr.w	sl, [r4, #-4]
    9cee:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    9cf2:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9cf4:	f8da 3010 	ldr.w	r3, [sl, #16]
    9cf8:	4798      	blx	r3
    9cfa:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    9cfc:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    9cfe:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9d00:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    9d04:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    9d08:	f854 0c04 	ldr.w	r0, [r4, #-4]
    9d0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9d10:	6942      	ldr	r2, [r0, #20]
    9d12:	7e00      	ldrb	r0, [r0, #24]
    9d14:	ed93 0a00 	vldr	s0, [r3]
    9d18:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    9d1a:	f898 3000 	ldrb.w	r3, [r8]
    9d1e:	42ab      	cmp	r3, r5
    9d20:	dc94      	bgt.n	9c4c <tickMappings+0x6c>
	for (int i = 0; i < numMappings; i++)
    9d22:	f899 2000 	ldrb.w	r2, [r9]
    9d26:	f10b 0b01 	add.w	fp, fp, #1
    9d2a:	344c      	adds	r4, #76	; 0x4c
    9d2c:	455a      	cmp	r2, fp
    9d2e:	dc80      	bgt.n	9c32 <tickMappings+0x52>
}
    9d30:	b003      	add	sp, #12
    9d32:	ecbd 8b02 	vpop	{d8}
    9d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    9d3a:	2300      	movs	r3, #0
    9d3c:	ee07 3a90 	vmov	s15, r3
				float unsmoothedValue = 0.0f;
    9d40:	ee08 3a10 	vmov	s16, r3
    9d44:	e79a      	b.n	9c7c <tickMappings+0x9c>
							smoothedValue += sum;
    9d46:	ee77 7a87 	vadd.f32	s15, s15, s14
    9d4a:	e7bf      	b.n	9ccc <tickMappings+0xec>
				float smoothedValue = 0.0f;
    9d4c:	ee07 3a90 	vmov	s15, r3
    9d50:	e794      	b.n	9c7c <tickMappings+0x9c>
							smoothedValue += sum;
    9d52:	ee77 7a87 	vadd.f32	s15, s15, s14
    9d56:	e7a5      	b.n	9ca4 <tickMappings+0xc4>
    9d58:	f3af 8000 	nop.w
    9d5c:	f3af 8000 	nop.w

00009d60 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    9d60:	f24d 437c 	movw	r3, #54396	; 0xd47c
    9d64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9d68:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9d6c:	b510      	push	{r4, lr}
    9d6e:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    9d70:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9d74:	f003 fab0 	bl	d2d8 <__tSawSquareLFO_tick_veneer>
    9d78:	ed84 0a00 	vstr	s0, [r4]
}
    9d7c:	bd10      	pop	{r4, pc}
    9d7e:	bf00      	nop

00009d80 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    9d80:	f24d 43cc 	movw	r3, #54476	; 0xd4cc
    9d84:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9d88:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9d8c:	b510      	push	{r4, lr}
    9d8e:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    9d90:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9d94:	f003 fb04 	bl	d3a0 <__tSineTriLFO_tick_veneer>
    9d98:	ed84 0a00 	vstr	s0, [r4]
}
    9d9c:	bd10      	pop	{r4, pc}
    9d9e:	bf00      	nop

00009da0 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    9da0:	f24d 43ac 	movw	r3, #54444	; 0xd4ac
    9da4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9da8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9dac:	b510      	push	{r4, lr}
    9dae:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    9db0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9db4:	f003 fa94 	bl	d2e0 <__tCycle_tick_veneer>
    9db8:	ed84 0a00 	vstr	s0, [r4]
}
    9dbc:	bd10      	pop	{r4, pc}
    9dbe:	bf00      	nop

00009dc0 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    9dc0:	f24d 43ec 	movw	r3, #54508	; 0xd4ec
    9dc4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9dc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9dcc:	b510      	push	{r4, lr}
    9dce:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    9dd0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9dd4:	f003 fb68 	bl	d4a8 <__tTriLFO_tick_veneer>
    9dd8:	ed84 0a00 	vstr	s0, [r4]
}
    9ddc:	bd10      	pop	{r4, pc}
    9dde:	bf00      	nop

00009de0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    9de0:	f24d 435c 	movw	r3, #54364	; 0xd45c
    9de4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9de8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9dec:	b510      	push	{r4, lr}
    9dee:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    9df0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9df4:	f003 fc18 	bl	d628 <__tIntPhasor_tick_veneer>
    9df8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    9dfc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    9e00:	eee0 7a07 	vfma.f32	s15, s0, s14
    9e04:	edc4 7a00 	vstr	s15, [r4]
}
    9e08:	bd10      	pop	{r4, pc}
    9e0a:	bf00      	nop
    9e0c:	f3af 8000 	nop.w
    9e10:	f3af 8000 	nop.w
    9e14:	f3af 8000 	nop.w
    9e18:	f3af 8000 	nop.w
    9e1c:	f3af 8000 	nop.w

00009e20 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    9e20:	f24d 433c 	movw	r3, #54332	; 0xd43c
    9e24:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9e28:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    9e2c:	b510      	push	{r4, lr}
    9e2e:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    9e30:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9e34:	f003 fac4 	bl	d3c0 <__tSquareLFO_tick_veneer>
    9e38:	ed84 0a00 	vstr	s0, [r4]
}
    9e3c:	bd10      	pop	{r4, pc}
    9e3e:	bf00      	nop

00009e40 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    9e40:	f24d 437c 	movw	r3, #54396	; 0xd47c
    9e44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9e48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9e50:	f003 bb1e 	b.w	d490 <__tSawSquareLFO_setFreq_veneer>
    9e54:	f3af 8000 	nop.w
    9e58:	f3af 8000 	nop.w
    9e5c:	f3af 8000 	nop.w

00009e60 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    9e60:	f24d 43cc 	movw	r3, #54476	; 0xd4cc
    9e64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9e68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9e70:	f003 bae2 	b.w	d438 <__tSineTriLFO_setFreq_veneer>
    9e74:	f3af 8000 	nop.w
    9e78:	f3af 8000 	nop.w
    9e7c:	f3af 8000 	nop.w

00009e80 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    9e80:	f24d 43ac 	movw	r3, #54444	; 0xd4ac
    9e84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9e88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9e8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9e90:	f003 ba32 	b.w	d2f8 <__tCycle_setFreq_veneer>
    9e94:	f3af 8000 	nop.w
    9e98:	f3af 8000 	nop.w
    9e9c:	f3af 8000 	nop.w

00009ea0 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    9ea0:	f24d 43ec 	movw	r3, #54508	; 0xd4ec
    9ea4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9ea8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9eb0:	f003 ba9e 	b.w	d3f0 <__tTriLFO_setFreq_veneer>
    9eb4:	f3af 8000 	nop.w
    9eb8:	f3af 8000 	nop.w
    9ebc:	f3af 8000 	nop.w

00009ec0 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    9ec0:	f24d 435c 	movw	r3, #54364	; 0xd45c
    9ec4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9ec8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9ed0:	f003 bb5e 	b.w	d590 <__tIntPhasor_setFreq_veneer>
    9ed4:	f3af 8000 	nop.w
    9ed8:	f3af 8000 	nop.w
    9edc:	f3af 8000 	nop.w

00009ee0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    9ee0:	f24d 433c 	movw	r3, #54332	; 0xd43c
    9ee4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9ee8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9ef0:	f003 bc06 	b.w	d700 <__tSquareLFO_setFreq_veneer>
    9ef4:	f3af 8000 	nop.w
    9ef8:	f3af 8000 	nop.w
    9efc:	f3af 8000 	nop.w

00009f00 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    9f00:	f24d 437c 	movw	r3, #54396	; 0xd47c
    9f04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9f08:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9f10:	f003 baba 	b.w	d488 <__tSawSquareLFO_setPhase_veneer>
    9f14:	f3af 8000 	nop.w
    9f18:	f3af 8000 	nop.w
    9f1c:	f3af 8000 	nop.w

00009f20 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    9f20:	f24d 43cc 	movw	r3, #54476	; 0xd4cc
    9f24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9f28:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9f30:	f003 bb9e 	b.w	d670 <__tSineTriLFO_setPhase_veneer>
    9f34:	f3af 8000 	nop.w
    9f38:	f3af 8000 	nop.w
    9f3c:	f3af 8000 	nop.w

00009f40 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    9f40:	f24d 43ac 	movw	r3, #54444	; 0xd4ac
    9f44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9f48:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9f50:	f003 ba5a 	b.w	d408 <__tCycle_setPhase_veneer>
    9f54:	f3af 8000 	nop.w
    9f58:	f3af 8000 	nop.w
    9f5c:	f3af 8000 	nop.w

00009f60 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    9f60:	f24d 43ec 	movw	r3, #54508	; 0xd4ec
    9f64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9f68:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9f70:	f003 bae6 	b.w	d540 <__tTriLFO_setPhase_veneer>
    9f74:	f3af 8000 	nop.w
    9f78:	f3af 8000 	nop.w
    9f7c:	f3af 8000 	nop.w

00009f80 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    9f80:	f24d 435c 	movw	r3, #54364	; 0xd45c
    9f84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9f88:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9f8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9f90:	f003 b986 	b.w	d2a0 <__tIntPhasor_setPhase_veneer>
    9f94:	f3af 8000 	nop.w
    9f98:	f3af 8000 	nop.w
    9f9c:	f3af 8000 	nop.w

00009fa0 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    9fa0:	f24d 433c 	movw	r3, #54332	; 0xd43c
    9fa4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9fa8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9fb0:	f003 bab2 	b.w	d518 <__tSquareLFO_setPhase_veneer>
    9fb4:	f3af 8000 	nop.w
    9fb8:	f3af 8000 	nop.w
    9fbc:	f3af 8000 	nop.w

00009fc0 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    9fc0:	f24d 437c 	movw	r3, #54396	; 0xd47c
    9fc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9fc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9fd0:	f003 bbbe 	b.w	d750 <__tSawSquareLFO_setShape_veneer>
    9fd4:	f3af 8000 	nop.w
    9fd8:	f3af 8000 	nop.w
    9fdc:	f3af 8000 	nop.w

00009fe0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    9fe0:	f24d 43cc 	movw	r3, #54476	; 0xd4cc
    9fe4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9fe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    9fec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9ff0:	f003 bb5a 	b.w	d6a8 <__tSineTriLFO_setShape_veneer>
    9ff4:	f3af 8000 	nop.w
    9ff8:	f3af 8000 	nop.w
    9ffc:	f3af 8000 	nop.w

0000a000 <lfoSineSetShape>:
}
    a000:	4770      	bx	lr
    a002:	bf00      	nop
    a004:	f3af 8000 	nop.w
    a008:	f3af 8000 	nop.w
    a00c:	f3af 8000 	nop.w
    a010:	f3af 8000 	nop.w
    a014:	f3af 8000 	nop.w
    a018:	f3af 8000 	nop.w
    a01c:	f3af 8000 	nop.w

0000a020 <lfoTriSetShape>:
    a020:	4770      	bx	lr
    a022:	bf00      	nop
    a024:	f3af 8000 	nop.w
    a028:	f3af 8000 	nop.w
    a02c:	f3af 8000 	nop.w
    a030:	f3af 8000 	nop.w
    a034:	f3af 8000 	nop.w
    a038:	f3af 8000 	nop.w
    a03c:	f3af 8000 	nop.w

0000a040 <lfoSawSetShape>:
    a040:	4770      	bx	lr
    a042:	bf00      	nop
    a044:	f3af 8000 	nop.w
    a048:	f3af 8000 	nop.w
    a04c:	f3af 8000 	nop.w
    a050:	f3af 8000 	nop.w
    a054:	f3af 8000 	nop.w
    a058:	f3af 8000 	nop.w
    a05c:	f3af 8000 	nop.w

0000a060 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    a060:	f24d 433c 	movw	r3, #54332	; 0xd43c
    a064:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a068:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a070:	f003 baba 	b.w	d5e8 <__tSquareLFO_setPulseWidth_veneer>
    a074:	f3af 8000 	nop.w
    a078:	f3af 8000 	nop.w
    a07c:	f3af 8000 	nop.w

0000a080 <param1Linear>:
	param1[v][string] = value;
    a080:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    a084:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a088:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a08c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a090:	ed83 0a00 	vstr	s0, [r3]
}
    a094:	4770      	bx	lr
    a096:	bf00      	nop
    a098:	f3af 8000 	nop.w
    a09c:	f3af 8000 	nop.w

0000a0a0 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    a0a0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    a0a4:	b538      	push	{r3, r4, r5, lr}
	param1[v][string] = dbToATableLookup(value * 24.0f);
    a0a6:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    a0aa:	4605      	mov	r5, r0
    a0ac:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    a0ae:	f003 fa1b 	bl	d4e8 <__dbToATableLookup_veneer>
    a0b2:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    a0b6:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a0ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a0c2:	ed83 0a00 	vstr	s0, [r3]
}
    a0c6:	bd38      	pop	{r3, r4, r5, pc}
    a0c8:	f3af 8000 	nop.w
    a0cc:	f3af 8000 	nop.w
    a0d0:	f3af 8000 	nop.w
    a0d4:	f3af 8000 	nop.w
    a0d8:	f3af 8000 	nop.w
    a0dc:	f3af 8000 	nop.w

0000a0e0 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    a0e0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    a0e4:	b538      	push	{r3, r4, r5, lr}
	param1[v][string] = dbToATableLookup(value * 12.0f);
    a0e6:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    a0ea:	4605      	mov	r5, r0
    a0ec:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    a0ee:	f003 f9fb 	bl	d4e8 <__dbToATableLookup_veneer>
    a0f2:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    a0f6:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a0fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a0fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a102:	ed83 0a00 	vstr	s0, [r3]
}
    a106:	bd38      	pop	{r3, r4, r5, pc}
    a108:	f3af 8000 	nop.w
    a10c:	f3af 8000 	nop.w
    a110:	f3af 8000 	nop.w
    a114:	f3af 8000 	nop.w
    a118:	f3af 8000 	nop.w
    a11c:	f3af 8000 	nop.w

0000a120 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    a120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a124:	f24d 4318 	movw	r3, #54296	; 0xd418
	param3[v][string] = value;
    a128:	f24d 721c 	movw	r2, #55068	; 0xd71c
	invCurFB[v][string] = (1.0f / (1.0f + value));
    a12c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a130:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a134:	ee70 6a27 	vadd.f32	s13, s0, s15
	param3[v][string] = value;
    a138:	f2c2 0201 	movt	r2, #8193	; 0x2001
	invCurFB[v][string] = (1.0f / (1.0f + value));
    a13c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    a140:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    a144:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    a148:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    a14c:	ed83 7a00 	vstr	s14, [r3]
}
    a150:	4770      	bx	lr
    a152:	bf00      	nop
    a154:	f3af 8000 	nop.w
    a158:	f3af 8000 	nop.w
    a15c:	f3af 8000 	nop.w

0000a160 <tiltParam1>:
	tTiltFilter_setTilt(&FXTilt[v][string], value*12.0f - 6.0f);
    a160:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    a164:	f24d 03b8 	movw	r3, #53432	; 0xd0b8
    a168:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
    a16c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a170:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a174:	eee0 7a07 	vfma.f32	s15, s0, s14
    a178:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a17c:	eeb0 0a67 	vmov.f32	s0, s15
    a180:	f003 b876 	b.w	d270 <__tTiltFilter_setTilt_veneer>
    a184:	f3af 8000 	nop.w
    a188:	f3af 8000 	nop.w
    a18c:	f3af 8000 	nop.w
    a190:	f3af 8000 	nop.w
    a194:	f3af 8000 	nop.w
    a198:	f3af 8000 	nop.w
    a19c:	f3af 8000 	nop.w

0000a1a0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    a1a0:	2200      	movs	r2, #0
    a1a2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    a1a6:	f64b 0324 	movw	r3, #47140	; 0xb824
    a1aa:	f2c4 229a 	movt	r2, #17050	; 0x429a
    a1ae:	f2c4 230f 	movt	r3, #16911	; 0x420f
    a1b2:	ee06 2a90 	vmov	s13, r2
    a1b6:	ee07 3a10 	vmov	s14, r3
    if (val < min)
    a1ba:	2300      	movs	r3, #0
    a1bc:	eee0 7a26 	vfma.f32	s15, s0, s13
    a1c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    a1c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1cc:	d41d      	bmi.n	a20a <tiltParam2+0x6a>
    else if (val > max)
    a1ce:	f643 524c 	movw	r2, #15692	; 0x3d4c
        return max;
    a1d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    else if (val > max)
    a1d6:	f6c3 7292 	movt	r2, #16274	; 0x3f92
        return max;
    a1da:	f2c4 537f 	movt	r3, #17791	; 0x457f
    else if (val > max)
    a1de:	ee06 2a90 	vmov	s13, r2
        return max;
    a1e2:	ee07 3a10 	vmov	s14, r3
    a1e6:	eeb4 0a66 	vcmp.f32	s0, s13
    a1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1ee:	fe77 7a27 	vselgt.f32	s15, s14, s15
	tVZFilterBell_setFreq(&bell1[v][string], value);
    a1f2:	f24d 2364 	movw	r3, #53860	; 0xd264
    a1f6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a1fa:	eeb0 0a67 	vmov.f32	s0, s15
    a1fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a202:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a206:	f003 b94b 	b.w	d4a0 <__tVZFilterBell_setFreq_veneer>
        return min;
    a20a:	ee07 3a90 	vmov	s15, r3
    a20e:	e7f0      	b.n	a1f2 <tiltParam2+0x52>
    a210:	f3af 8000 	nop.w
    a214:	f3af 8000 	nop.w
    a218:	f3af 8000 	nop.w
    a21c:	f3af 8000 	nop.w

0000a220 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    a220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    a224:	f24d 2364 	movw	r3, #53860	; 0xd264
    a228:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    a22c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a230:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a234:	ee30 0a07 	vadd.f32	s0, s0, s14
    a238:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a23c:	ee20 0a27 	vmul.f32	s0, s0, s15
    a240:	f003 b8d2 	b.w	d3e8 <__tVZFilterBell_setBandwidth_veneer>
    a244:	f3af 8000 	nop.w
    a248:	f3af 8000 	nop.w
    a24c:	f3af 8000 	nop.w
    a250:	f3af 8000 	nop.w
    a254:	f3af 8000 	nop.w
    a258:	f3af 8000 	nop.w
    a25c:	f3af 8000 	nop.w

0000a260 <tiltParam4>:
{
    a260:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    a262:	2300      	movs	r3, #0
    a264:	eebb 7a01 	vmov.f32	s14, #177	; 0xc1880000 -17.0
{
    a268:	4605      	mov	r5, r0
    a26a:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    a26c:	f2c4 2308 	movt	r3, #16904	; 0x4208
    a270:	ee07 3a90 	vmov	s15, r3
    a274:	eea0 7a27 	vfma.f32	s14, s0, s15
    a278:	eeb0 0a47 	vmov.f32	s0, s14
    a27c:	f003 f934 	bl	d4e8 <__dbToATableLookup_veneer>
    a280:	f24d 2364 	movw	r3, #53860	; 0xd264
    a284:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a288:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a28c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    a294:	f002 bf8c 	b.w	d1b0 <__tVZFilterBell_setGain_veneer>
    a298:	f3af 8000 	nop.w
    a29c:	f3af 8000 	nop.w

0000a2a0 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    a2a0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    a2a4:	f24d 2384 	movw	r3, #53892	; 0xd284
    a2a8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    a2b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    a2b8:	ed83 0a03 	vstr	s0, [r3, #12]
}
    a2bc:	4770      	bx	lr
    a2be:	bf00      	nop

0000a2c0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    a2c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a2c4:	f24d 2384 	movw	r3, #53892	; 0xd284
    a2c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    a2cc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a2d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a2d4:	eeb0 7a67 	vmov.f32	s14, s15
    a2d8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    a2dc:	eea0 7a26 	vfma.f32	s14, s0, s13
    a2e0:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    a2e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a2e8:	edd3 6a04 	vldr	s13, [r3, #16]
    a2ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    a2f0:	ed83 7a07 	vstr	s14, [r3, #28]
}
    a2f4:	4770      	bx	lr
    a2f6:	bf00      	nop
    a2f8:	f3af 8000 	nop.w
    a2fc:	f3af 8000 	nop.w

0000a300 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    a300:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    a304:	f24d 2384 	movw	r3, #53892	; 0xd284
    a308:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a30c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a310:	ee20 0a27 	vmul.f32	s0, s0, s15
    a314:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    a318:	ed83 0a06 	vstr	s0, [r3, #24]
}
    a31c:	4770      	bx	lr
    a31e:	bf00      	nop

0000a320 <compressorParam4>:
	value = (value +  0.001f);
    a320:	f241 236f 	movw	r3, #4719	; 0x126f
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a324:	f24d 2284 	movw	r2, #53892	; 0xd284
    a328:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    reinterpreter.i += (((((((((((3537*m) >> 16)
    a32c:	f640 51d1 	movw	r1, #3537	; 0xdd1
	value = (value +  0.001f);
    a330:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a334:	f2c2 0201 	movt	r2, #8193	; 0x2001
	value = (value +  0.001f);
    a338:	ee07 3a90 	vmov	s15, r3
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a33c:	f64a 233b 	movw	r3, #43579	; 0xaa3b
{
    a340:	b410      	push	{r4}
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a342:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
	value = (value +  0.001f);
    a346:	ee30 0a27 	vadd.f32	s0, s0, s15
    a34a:	f6cc 3338 	movt	r3, #52024	; 0xcb38
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    a34e:	f243 5264 	movw	r2, #13668	; 0x3564
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a352:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a356:	ee07 3a10 	vmov	s14, r3
    a35a:	ee20 0a27 	vmul.f32	s0, s0, s15
    a35e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    a362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    a366:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    a36a:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a36e:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
    a372:	fb00 f101 	mul.w	r1, r0, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    a376:	eb02 4221 	add.w	r2, r2, r1, asr #16
    a37a:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    a37e:	fb00 f202 	mul.w	r2, r0, r2
    a382:	eb01 41a2 	add.w	r1, r1, r2, asr #18
    a386:	f24c 52aa 	movw	r2, #50602	; 0xc5aa
    a38a:	fb00 f101 	mul.w	r1, r0, r1
    a38e:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
    a392:	eb02 32a1 	add.w	r2, r2, r1, asr #14
    a396:	fb00 f202 	mul.w	r2, r0, r2
    a39a:	eb03 23e2 	add.w	r3, r3, r2, asr #11
    a39e:	6063      	str	r3, [r4, #4]
}
    a3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3a4:	4770      	bx	lr
    a3a6:	bf00      	nop
    a3a8:	f3af 8000 	nop.w
    a3ac:	f3af 8000 	nop.w
    a3b0:	f3af 8000 	nop.w
    a3b4:	f3af 8000 	nop.w
    a3b8:	f3af 8000 	nop.w
    a3bc:	f3af 8000 	nop.w

0000a3c0 <compressorParam5>:
	value = (value + 0.001f);
    a3c0:	f241 236f 	movw	r3, #4719	; 0x126f
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a3c4:	f24d 2284 	movw	r2, #53892	; 0xd284
    a3c8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    reinterpreter.i += (((((((((((3537*m) >> 16)
    a3cc:	f640 51d1 	movw	r1, #3537	; 0xdd1
	value = (value + 0.001f);
    a3d0:	f6c3 2383 	movt	r3, #14979	; 0x3a83
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a3d4:	f2c2 0201 	movt	r2, #8193	; 0x2001
	value = (value + 0.001f);
    a3d8:	ee07 3a90 	vmov	s15, r3
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a3dc:	f64a 233b 	movw	r3, #43579	; 0xaa3b
{
    a3e0:	b410      	push	{r4}
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a3e2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
	value = (value + 0.001f);
    a3e6:	ee30 0a27 	vadd.f32	s0, s0, s15
    a3ea:	f6cc 3338 	movt	r3, #52024	; 0xcb38
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    a3ee:	f243 5264 	movw	r2, #13668	; 0x3564
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    a3f2:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a3f6:	ee07 3a10 	vmov	s14, r3
    a3fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    a3fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    a402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    a406:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    a40a:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    a40e:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
    a412:	fb00 f101 	mul.w	r1, r0, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    a416:	eb02 4221 	add.w	r2, r2, r1, asr #16
    a41a:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    a41e:	fb00 f202 	mul.w	r2, r0, r2
    a422:	eb01 41a2 	add.w	r1, r1, r2, asr #18
    a426:	f24c 52aa 	movw	r2, #50602	; 0xc5aa
    a42a:	fb00 f101 	mul.w	r1, r0, r1
    a42e:	f6cf 72fe 	movt	r2, #65534	; 0xfffe
    a432:	eb02 32a1 	add.w	r2, r2, r1, asr #14
    a436:	fb00 f202 	mul.w	r2, r0, r2
    a43a:	eb03 23e2 	add.w	r3, r3, r2, asr #11
    a43e:	60a3      	str	r3, [r4, #8]
}
    a440:	f85d 4b04 	ldr.w	r4, [sp], #4
    a444:	4770      	bx	lr
    a446:	bf00      	nop
    a448:	f3af 8000 	nop.w
    a44c:	f3af 8000 	nop.w
    a450:	f3af 8000 	nop.w
    a454:	f3af 8000 	nop.w
    a458:	f3af 8000 	nop.w
    a45c:	f3af 8000 	nop.w

0000a460 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    a460:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    a464:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    a468:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    a46c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a470:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a474:	eee0 7a07 	vfma.f32	s15, s0, s14
    a478:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a47c:	edc3 7a00 	vstr	s15, [r3]
}
    a480:	4770      	bx	lr
    a482:	bf00      	nop
    a484:	f3af 8000 	nop.w
    a488:	f3af 8000 	nop.w
    a48c:	f3af 8000 	nop.w
    a490:	f3af 8000 	nop.w
    a494:	f3af 8000 	nop.w
    a498:	f3af 8000 	nop.w
    a49c:	f3af 8000 	nop.w

0000a4a0 <param2Linear>:
	param2[v][string] = value;
    a4a0:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    a4a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a4a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a4b0:	ed83 0a00 	vstr	s0, [r3]
}
    a4b4:	4770      	bx	lr
    a4b6:	bf00      	nop
    a4b8:	f3af 8000 	nop.w
    a4bc:	f3af 8000 	nop.w

0000a4c0 <param3Linear>:
	param3[v][string] = value;
    a4c0:	f24d 731c 	movw	r3, #55068	; 0xd71c
    a4c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a4c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a4cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a4d0:	ed83 0a00 	vstr	s0, [r3]
}
    a4d4:	4770      	bx	lr
    a4d6:	bf00      	nop
    a4d8:	f3af 8000 	nop.w
    a4dc:	f3af 8000 	nop.w

0000a4e0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    a4e0:	f247 02a4 	movw	r2, #28836	; 0x70a4
    a4e4:	f24d 730a 	movw	r3, #55050	; 0xd70a
    a4e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    a4ec:	f64a 2caa 	movw	ip, #43690	; 0xaaaa
    a4f0:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
    a4f4:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    a4f8:	f6c3 6caa 	movt	ip, #16042	; 0x3eaa
    a4fc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a500:	ee07 2a10 	vmov	s14, r2
    a504:	ee07 3a90 	vmov	s15, r3
    a508:	eeb0 6a66 	vmov.f32	s12, s13
    a50c:	f24d 721c 	movw	r2, #55068	; 0xd71c
    a510:	eee0 7a07 	vfma.f32	s15, s0, s14
    a514:	ee07 ca10 	vmov	s14, ip
    a518:	f2c2 0201 	movt	r2, #8193	; 0x2001
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    a51c:	f64d 0324 	movw	r3, #55332	; 0xd824
	param3[v][string] = (value * .99f) + 0.01f;
    a520:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    a524:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a528:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a52c:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    a530:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    a534:	eea5 6a87 	vfma.f32	s12, s11, s14
    a538:	ee67 7a86 	vmul.f32	s15, s15, s12
    a53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    a540:	ed83 7a00 	vstr	s14, [r3]
}
    a544:	4770      	bx	lr
    a546:	bf00      	nop
    a548:	f3af 8000 	nop.w
    a54c:	f3af 8000 	nop.w
    a550:	f3af 8000 	nop.w
    a554:	f3af 8000 	nop.w
    a558:	f3af 8000 	nop.w
    a55c:	f3af 8000 	nop.w

0000a560 <param3Hard>:
{
    a560:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    a562:	f247 02a4 	movw	r2, #28836	; 0x70a4
    a566:	f24d 730a 	movw	r3, #55050	; 0xd70a
{
    a56a:	460d      	mov	r5, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    a56c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a570:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
    a574:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    a578:	0044      	lsls	r4, r0, #1
    a57a:	ee07 2a10 	vmov	s14, r2
    a57e:	ee07 3a90 	vmov	s15, r3
    a582:	f640 72db 	movw	r2, #4059	; 0xfdb
    a586:	f24d 731c 	movw	r3, #55068	; 0xd71c
    a58a:	eee0 7a07 	vfma.f32	s15, s0, s14
    a58e:	f6c3 72c9 	movt	r2, #16329	; 0x3fc9
    a592:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a596:	ee07 2a10 	vmov	s14, r2
    a59a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a59e:	ee27 0a87 	vmul.f32	s0, s15, s14
    a5a2:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    a5a6:	f002 ff67 	bl	d478 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    a5aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
    a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5b2:	d00d      	beq.n	a5d0 <param3Hard+0x70>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    a5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    a5b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    a5bc:	f64d 0304 	movw	r3, #55300	; 0xd804
    a5c0:	1961      	adds	r1, r4, r5
    a5c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a5c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a5ca:	edc3 7a00 	vstr	s15, [r3]
}
    a5ce:	bd38      	pop	{r3, r4, r5, pc}
    a5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a5d4:	f2c4 4379 	movt	r3, #17529	; 0x4479
    a5d8:	ee07 3a90 	vmov	s15, r3
    a5dc:	e7ee      	b.n	a5bc <param3Hard+0x5c>
    a5de:	bf00      	nop

0000a5e0 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    a5e0:	f247 02a4 	movw	r2, #28836	; 0x70a4
    a5e4:	f24d 730a 	movw	r3, #55050	; 0xd70a
    a5e8:	eb01 0c40 	add.w	ip, r1, r0, lsl #1
    a5ec:	f6c3 727d 	movt	r2, #16253	; 0x3f7d
    a5f0:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    a5f4:	0040      	lsls	r0, r0, #1
    a5f6:	ee07 2a10 	vmov	s14, r2
    a5fa:	ee07 3a90 	vmov	s15, r3
    a5fe:	f640 72db 	movw	r2, #4059	; 0xfdb
    a602:	f24d 731c 	movw	r3, #55068	; 0xd71c
    a606:	eee0 7a07 	vfma.f32	s15, s0, s14
    a60a:	f6c3 72c9 	movt	r2, #16329	; 0x3fc9
    a60e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a612:	ee07 2a10 	vmov	s14, r2
    a616:	f247 4233 	movw	r2, #29747	; 0x7433
    a61a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    a61e:	f24f 63e3 	movw	r3, #63203	; 0xf6e3
    a622:	f6c3 5294 	movt	r2, #15764	; 0x3d94
    a626:	ee67 7a87 	vmul.f32	s15, s15, s14
    a62a:	f6c3 73c8 	movt	r3, #16328	; 0x3fc8
    a62e:	ee06 2a90 	vmov	s13, r2
    return term1+term2+term3;
    a632:	f647 424c 	movw	r2, #31820	; 0x7c4c
    a636:	ee07 3a10 	vmov	s14, r3
    Lfloat term2 = x * x * x * -0.6425216143f;
    a63a:	ee27 6aa7 	vmul.f32	s12, s15, s15
    return term1+term2+term3;
    a63e:	f6cb 7224 	movt	r2, #48932	; 0xbf24
    a642:	ee67 6aa6 	vmul.f32	s13, s15, s13
    a646:	edcc 7a00 	vstr	s15, [ip]
    Lfloat term2 = x * x * x * -0.6425216143f;
    a64a:	ee26 6a27 	vmul.f32	s12, s12, s15
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    a64e:	eea6 7a26 	vfma.f32	s14, s12, s13
    return term1+term2+term3;
    a652:	ee06 2a90 	vmov	s13, r2
    a656:	ee67 7a87 	vmul.f32	s15, s15, s14
    a65a:	eee6 7a26 	vfma.f32	s15, s12, s13
    if (tempDiv == 0.0f)
    a65e:	eef5 7a40 	vcmp.f32	s15, #0.0
    a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a666:	d00d      	beq.n	a684 <param3Poly+0xa4>
    polyDivider[v][string] = 1.0f/tempDiv;
    a668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    a66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    a670:	f24d 7394 	movw	r3, #55188	; 0xd794
    a674:	4401      	add	r1, r0
    a676:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a67a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    a67e:	ed83 7a00 	vstr	s14, [r3]
}
    a682:	4770      	bx	lr
    a684:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a688:	f2c4 4379 	movt	r3, #17529	; 0x4479
    a68c:	ee07 3a10 	vmov	s14, r3
    a690:	e7ee      	b.n	a670 <param3Poly+0x90>
    a692:	bf00      	nop
    a694:	f3af 8000 	nop.w
    a698:	f3af 8000 	nop.w
    a69c:	f3af 8000 	nop.w

0000a6a0 <param4Linear>:
	param4[v][string] = value;
    a6a0:	f24d 733c 	movw	r3, #55100	; 0xd73c
    a6a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a6b0:	ed83 0a00 	vstr	s0, [r3]
}
    a6b4:	4770      	bx	lr
    a6b6:	bf00      	nop
    a6b8:	f3af 8000 	nop.w
    a6bc:	f3af 8000 	nop.w

0000a6c0 <param5Linear>:
	param5[v][string] = value;
    a6c0:	f24d 735c 	movw	r3, #55132	; 0xd75c
    a6c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a6d0:	ed83 0a00 	vstr	s0, [r3]
}
    a6d4:	4770      	bx	lr
    a6d6:	bf00      	nop
    a6d8:	f3af 8000 	nop.w
    a6dc:	f3af 8000 	nop.w

0000a6e0 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    a6e0:	f24d 2344 	movw	r3, #53828	; 0xd244
    a6e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a6ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6f0:	f002 bff6 	b.w	d6e0 <__tCrusher_setQuality_veneer>
    a6f4:	f3af 8000 	nop.w
    a6f8:	f3af 8000 	nop.w
    a6fc:	f3af 8000 	nop.w

0000a700 <param3BC>:
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    a700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a704:	f640 0ccc 	movw	ip, #2252	; 0x8cc
    a708:	f24d 730a 	movw	r3, #55050	; 0xd70a
	tCrusher_setSamplingRatio (&bc[v][string], value);
    a70c:	f24d 2244 	movw	r2, #53828	; 0xd244
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    a710:	f2c2 0c00 	movt	ip, #8192	; 0x2000
	tCrusher_setSamplingRatio (&bc[v][string], value);
    a714:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    a718:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    a71c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    a720:	ed9c 7a00 	vldr	s14, [ip]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    a724:	f2c2 0201 	movt	r2, #8193	; 0x2001
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    a728:	ee00 3a10 	vmov	s0, r3
	tCrusher_setSamplingRatio (&bc[v][string], value);
    a72c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    a730:	eea7 0a87 	vfma.f32	s0, s15, s14
    a734:	f002 be24 	b.w	d380 <__tCrusher_setSamplingRatio_veneer>
    a738:	f3af 8000 	nop.w
    a73c:	f3af 8000 	nop.w

0000a740 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    a740:	f24d 2344 	movw	r3, #53828	; 0xd244
    a744:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a748:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a74c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a750:	f002 bfee 	b.w	d730 <__tCrusher_setRound_veneer>
    a754:	f3af 8000 	nop.w
    a758:	f3af 8000 	nop.w
    a75c:	f3af 8000 	nop.w

0000a760 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    a760:	f24d 2344 	movw	r3, #53828	; 0xd244
    a764:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a768:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a76c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a770:	f002 bd8e 	b.w	d290 <__tCrusher_setOperation_veneer>
    a774:	f3af 8000 	nop.w
    a778:	f3af 8000 	nop.w
    a77c:	f3af 8000 	nop.w

0000a780 <fxMixSet>:
	fxMix[v][string] = value;
    a780:	f24d 33c8 	movw	r3, #54216	; 0xd3c8
    a784:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a788:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a78c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a790:	ed83 0a00 	vstr	s0, [r3]
}
    a794:	4770      	bx	lr
    a796:	bf00      	nop
    a798:	f3af 8000 	nop.w
    a79c:	f3af 8000 	nop.w

0000a7a0 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    a7a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    a7a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    a7a8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    a7aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a7ae:	4605      	mov	r5, r0
    a7b0:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    a7b2:	eeb0 0a67 	vmov.f32	s0, s15
    a7b6:	f002 fe97 	bl	d4e8 <__dbToATableLookup_veneer>
    a7ba:	f24d 33e8 	movw	r3, #54248	; 0xd3e8
    a7be:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a7c2:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a7c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a7ca:	ed83 0a00 	vstr	s0, [r3]
}
    a7ce:	bd38      	pop	{r3, r4, r5, pc}
    a7d0:	f3af 8000 	nop.w
    a7d4:	f3af 8000 	nop.w
    a7d8:	f3af 8000 	nop.w
    a7dc:	f3af 8000 	nop.w

0000a7e0 <wavefolderTick>:
{
    a7e0:	b538      	push	{r3, r4, r5, lr}
    float fbSample = wfState[v][string];
    a7e2:	f64d 2508 	movw	r5, #55816	; 0xda08
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a7e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a7ea:	f24d 64fc 	movw	r4, #55036	; 0xd6fc
    a7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    float fbSample = wfState[v][string];
    a7f2:	f2c2 0501 	movt	r5, #8193	; 0x2001
    a7f6:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a7fa:	f2c2 0401 	movt	r4, #8193	; 0x2001
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a7fe:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    float fbSample = wfState[v][string];
    a802:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a806:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    a80a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a80e:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a812:	f2c2 0201 	movt	r2, #8193	; 0x2001
    float curFB = param3[v][string];
    a816:	f24d 711c 	movw	r1, #55068	; 0xd71c
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a81a:	ee05 3a10 	vmov	s10, r3
    float fb = curFB * fbSample;
    a81e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a822:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float curFB = param3[v][string];
    a826:	f2c2 0101 	movt	r1, #8193	; 0x2001
    float fb = curFB * fbSample;
    a82a:	f6c3 73bf 	movt	r3, #16319	; 0x3fbf
    float curFB = param3[v][string];
    a82e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float fb = curFB * fbSample;
    a832:	ee05 3a90 	vmov	s11, r3
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a836:	f24d 735c 	movw	r3, #55132	; 0xd75c
{
    a83a:	ed2d 8b02 	vpush	{d8}
    a83e:	ed95 6a00 	vldr	s12, [r5]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a842:	f2c2 0301 	movt	r3, #8193	; 0x2001
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a846:	edd4 7a00 	vldr	s15, [r4]
    a84a:	0084      	lsls	r4, r0, #2
    a84c:	fe86 6a66 	vminnm.f32	s12, s12, s13
    a850:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    a854:	ee26 7a06 	vmul.f32	s14, s12, s12
    float fb = curFB * fbSample;
    a858:	ed91 4a00 	vldr	s8, [r1]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a85c:	ee30 0a27 	vadd.f32	s0, s0, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a860:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float fb = curFB * fbSample;
    a864:	ee24 4a25 	vmul.f32	s8, s8, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    a868:	ee67 7a05 	vmul.f32	s15, s14, s10
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a86c:	ed92 7a00 	vldr	s14, [r2]
    float curFF = param4[v][string];
    a870:	f24d 723c 	movw	r2, #55100	; 0xd73c
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a874:	edd3 8a00 	vldr	s17, [r3]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    a878:	ee20 0a07 	vmul.f32	s0, s0, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    a87c:	ee76 7ae7 	vsub.f32	s15, s13, s15
    float curFF = param4[v][string];
    a880:	f2c2 0201 	movt	r2, #8193	; 0x2001
    a884:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    a888:	fe80 7a66 	vminnm.f32	s14, s0, s13
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    a88c:	ee67 7a86 	vmul.f32	s15, s15, s12
    a890:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a894:	ee67 4a07 	vmul.f32	s9, s14, s14
    float curFF = param4[v][string];
    a898:	ed92 6a00 	vldr	s12, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a89c:	f640 72db 	movw	r2, #4059	; 0xfdb
    float fb = curFB * fbSample;
    a8a0:	ee67 7a84 	vmul.f32	s15, s15, s8
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a8a4:	ee24 5a85 	vmul.f32	s10, s9, s10
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8a8:	f2c4 02c9 	movt	r2, #16585	; 0x40c9
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    a8ac:	ee76 4ac6 	vsub.f32	s9, s13, s12
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8b0:	ee26 6a25 	vmul.f32	s12, s12, s11
    a8b4:	ee05 2a90 	vmov	s11, r2
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a8b8:	ee76 6ac5 	vsub.f32	s13, s13, s10
    a8bc:	eee4 7a80 	vfma.f32	s15, s9, s0
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8c0:	ee20 0a25 	vmul.f32	s0, s0, s11
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    a8c4:	ee66 6a87 	vmul.f32	s13, s13, s14
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8c8:	eee6 7a86 	vfma.f32	s15, s13, s12
    a8cc:	eeb0 8a67 	vmov.f32	s16, s15
    a8d0:	f002 fdd2 	bl	d478 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    a8d4:	f24d 4318 	movw	r3, #54296	; 0xd418
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a8d8:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8dc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    a8e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a8e4:	f2c2 0001 	movt	r0, #8193	; 0x2001
    sample = wfState[v][string] * invCurFB[v][string];
    a8e8:	4423      	add	r3, r4
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8ea:	eee8 7ac0 	vfms.f32	s15, s17, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a8ee:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    a8f0:	ed93 0a00 	vldr	s0, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    a8f4:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a8f8:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    a8fc:	ecbd 8b02 	vpop	{d8}
    a900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a904:	f002 bc58 	b.w	d1b8 <__tHighpass_tick_veneer>
    a908:	f3af 8000 	nop.w
    a90c:	f3af 8000 	nop.w
    a910:	f3af 8000 	nop.w
    a914:	f3af 8000 	nop.w
    a918:	f3af 8000 	nop.w
    a91c:	f3af 8000 	nop.w

0000a920 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    a920:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    a924:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    a928:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    a92c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a930:	f2c4 52b4 	movt	r2, #17844	; 0x45b4
    a934:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a938:	ee07 2a90 	vmov	s15, r2
    a93c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a940:	eea0 7a27 	vfma.f32	s14, s0, s15
    a944:	ed83 7a00 	vstr	s14, [r3]
}
    a948:	4770      	bx	lr
    a94a:	bf00      	nop
    a94c:	f3af 8000 	nop.w
    a950:	f3af 8000 	nop.w
    a954:	f3af 8000 	nop.w
    a958:	f3af 8000 	nop.w
    a95c:	f3af 8000 	nop.w

0000a960 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    a960:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    a964:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    a968:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a96c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
    a970:	f2c2 0301 	movt	r3, #8193	; 0x2001
    a974:	ee07 2a90 	vmov	s15, r2
    a978:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a97c:	ee20 0a27 	vmul.f32	s0, s0, s15
    a980:	ed83 0a00 	vstr	s0, [r3]
}
    a984:	4770      	bx	lr
    a986:	bf00      	nop
    a988:	f3af 8000 	nop.w
    a98c:	f3af 8000 	nop.w
    a990:	f3af 8000 	nop.w
    a994:	f3af 8000 	nop.w
    a998:	f3af 8000 	nop.w
    a99c:	f3af 8000 	nop.w

0000a9a0 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    a9a0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
    a9a4:	f24d 730a 	movw	r3, #55050	; 0xd70a
    a9a8:	f24d 6c34 	movw	ip, #54836	; 0xd634
    a9ac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a9b0:	f6c3 62cc 	movt	r2, #16076	; 0x3ecc
    a9b4:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    a9b8:	f2c2 0c01 	movt	ip, #8193	; 0x2001
    a9bc:	ee07 2a10 	vmov	s14, r2
    a9c0:	ee07 3a90 	vmov	s15, r3
    a9c4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    a9c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    a9cc:	eeb0 0a67 	vmov.f32	s0, s15
    a9d0:	f002 bc92 	b.w	d2f8 <__tCycle_setFreq_veneer>
    a9d4:	f3af 8000 	nop.w
    a9d8:	f3af 8000 	nop.w
    a9dc:	f3af 8000 	nop.w

0000a9e0 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    a9e0:	f648 6237 	movw	r2, #36407	; 0x8e37
    a9e4:	f643 1358 	movw	r3, #14680	; 0x3958
    a9e8:	f24d 6c54 	movw	ip, #54868	; 0xd654
    a9ec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a9f0:	f6c3 62e3 	movt	r2, #16099	; 0x3ee3
    a9f4:	f6c3 4334 	movt	r3, #15412	; 0x3c34
    a9f8:	f2c2 0c01 	movt	ip, #8193	; 0x2001
    a9fc:	ee07 2a10 	vmov	s14, r2
    aa00:	ee07 3a90 	vmov	s15, r3
    aa04:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    aa08:	eee0 7a07 	vfma.f32	s15, s0, s14
    aa0c:	eeb0 0a67 	vmov.f32	s0, s15
    aa10:	f002 bc72 	b.w	d2f8 <__tCycle_setFreq_veneer>
    aa14:	f3af 8000 	nop.w
    aa18:	f3af 8000 	nop.w
    aa1c:	f3af 8000 	nop.w

0000aa20 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[string], value * 30000.0f + 1.0f);
    aa20:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    aa24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    aa28:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
    aa2c:	f2c4 63ea 	movt	r3, #18154	; 0x46ea
    aa30:	f2c2 0001 	movt	r0, #8193	; 0x2001
    aa34:	ee07 3a90 	vmov	s15, r3
    aa38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    aa3c:	eea0 7a27 	vfma.f32	s14, s0, s15
    aa40:	eeb0 0a47 	vmov.f32	s0, s14
    aa44:	f002 bc54 	b.w	d2f0 <__tTapeDelay_setDelay_veneer>
    aa48:	f3af 8000 	nop.w
    aa4c:	f3af 8000 	nop.w
    aa50:	f3af 8000 	nop.w
    aa54:	f3af 8000 	nop.w
    aa58:	f3af 8000 	nop.w
    aa5c:	f3af 8000 	nop.w

0000aa60 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    aa60:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    if (val < min)
    aa64:	2200      	movs	r2, #0
    aa66:	f6c3 738c 	movt	r3, #16268	; 0x3f8c
    aa6a:	ee07 3a90 	vmov	s15, r3
    aa6e:	ee20 7a27 	vmul.f32	s14, s0, s15
    aa72:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    aa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa7a:	d412      	bmi.n	aaa2 <delayParam2+0x42>
    else if (val > max)
    aa7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        return max;
    aa80:	eeb4 0a66 	vcmp.f32	s0, s13
    aa84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa88:	fe37 7a87 	vselgt.f32	s14, s15, s14
    aa8c:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    aa90:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    aa94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aa98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    aa9c:	ed83 7a00 	vstr	s14, [r3]
}
    aaa0:	4770      	bx	lr
        return min;
    aaa2:	ee07 2a10 	vmov	s14, r2
    aaa6:	e7f1      	b.n	aa8c <delayParam2+0x2c>
    aaa8:	f3af 8000 	nop.w
    aaac:	f3af 8000 	nop.w
    aab0:	f3af 8000 	nop.w
    aab4:	f3af 8000 	nop.w
    aab8:	f3af 8000 	nop.w
    aabc:	f3af 8000 	nop.w

0000aac0 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    aac0:	2300      	movs	r3, #0
    aac2:	f24d 12b8 	movw	r2, #53688	; 0xd1b8
    aac6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    aaca:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    aace:	f2c2 0201 	movt	r2, #8193	; 0x2001
    aad2:	ee07 3a90 	vmov	s15, r3
    aad6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    aada:	ee20 0a27 	vmul.f32	s0, s0, s15
    aade:	f002 bc4b 	b.w	d378 <__tSVF_setFreqFast_veneer>
    aae2:	bf00      	nop
    aae4:	f3af 8000 	nop.w
    aae8:	f3af 8000 	nop.w
    aaec:	f3af 8000 	nop.w
    aaf0:	f3af 8000 	nop.w
    aaf4:	f3af 8000 	nop.w
    aaf8:	f3af 8000 	nop.w
    aafc:	f3af 8000 	nop.w

0000ab00 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    ab00:	2300      	movs	r3, #0
    ab02:	f24d 1298 	movw	r2, #53656	; 0xd198
    ab06:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ab0a:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    ab0e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    ab12:	ee07 3a90 	vmov	s15, r3
    ab16:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    ab1a:	ee20 0a27 	vmul.f32	s0, s0, s15
    ab1e:	f002 bc2b 	b.w	d378 <__tSVF_setFreqFast_veneer>
    ab22:	bf00      	nop
    ab24:	f3af 8000 	nop.w
    ab28:	f3af 8000 	nop.w
    ab2c:	f3af 8000 	nop.w
    ab30:	f3af 8000 	nop.w
    ab34:	f3af 8000 	nop.w
    ab38:	f3af 8000 	nop.w
    ab3c:	f3af 8000 	nop.w

0000ab40 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    ab40:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    ab44:	f24d 735c 	movw	r3, #55132	; 0xd75c
    ab48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ab4c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ab50:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab54:	eee0 7a07 	vfma.f32	s15, s0, s14
    ab58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ab5c:	edc3 7a00 	vstr	s15, [r3]
}
    ab60:	4770      	bx	lr
    ab62:	bf00      	nop
    ab64:	f3af 8000 	nop.w
    ab68:	f3af 8000 	nop.w
    ab6c:	f3af 8000 	nop.w
    ab70:	f3af 8000 	nop.w
    ab74:	f3af 8000 	nop.w
    ab78:	f3af 8000 	nop.w
    ab7c:	f3af 8000 	nop.w

0000ab80 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    ab80:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    ab84:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    ab88:	f24d 6034 	movw	r0, #54836	; 0xd634
    ab8c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ab90:	f2c2 0001 	movt	r0, #8193	; 0x2001
{
    ab94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    ab98:	eb03 0682 	add.w	r6, r3, r2, lsl #2
    ab9c:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    aba0:	f24d 28e4 	movw	r8, #53988	; 0xd2e4
    aba4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    aba8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    abac:	0097      	lsls	r7, r2, #2
    abae:	f2c2 0801 	movt	r8, #8193	; 0x2001
    abb2:	008c      	lsls	r4, r1, #2
    abb4:	eb03 0582 	add.w	r5, r3, r2, lsl #2
    abb8:	eb08 0881 	add.w	r8, r8, r1, lsl #2
{
    abbc:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    abc0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    abc4:	edd5 9a00 	vldr	s19, [r5]
{
    abc8:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    abcc:	ed96 9a00 	vldr	s18, [r6]
    abd0:	f002 fb86 	bl	d2e0 <__tCycle_tick_veneer>
    abd4:	f64f 53f4 	movw	r3, #65012	; 0xfdf4
    abd8:	eeb0 7a48 	vmov.f32	s14, s16
    abdc:	4640      	mov	r0, r8
    abde:	f6c3 7334 	movt	r3, #16180	; 0x3f34
    abe2:	eea9 7a80 	vfma.f32	s14, s19, s0
    abe6:	ee07 3a90 	vmov	s15, r3
    abea:	ee29 9a27 	vmul.f32	s18, s18, s15
    abee:	ee29 0a07 	vmul.f32	s0, s18, s14
    abf2:	f002 fd15 	bl	d620 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    abf6:	f24d 6054 	movw	r0, #54868	; 0xd654
    abfa:	f24d 23ec 	movw	r3, #53996	; 0xd2ec
    abfe:	edd5 9a00 	vldr	s19, [r5]
    ac02:	f2c2 0001 	movt	r0, #8193	; 0x2001
    ac06:	ed96 9a00 	vldr	s18, [r6]
    ac0a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ac0e:	4438      	add	r0, r7
    ac10:	441c      	add	r4, r3
    ac12:	f002 fb65 	bl	d2e0 <__tCycle_tick_veneer>
    ac16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    ac1a:	eea9 8ac0 	vfms.f32	s16, s19, s0
    ac1e:	4620      	mov	r0, r4
    ac20:	ee29 0a27 	vmul.f32	s0, s18, s15
    ac24:	ee20 0a08 	vmul.f32	s0, s0, s16
    ac28:	f002 fcfa 	bl	d620 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[string], sample) - sample;
    ac2c:	eeb0 0a68 	vmov.f32	s0, s17
    ac30:	4640      	mov	r0, r8
    ac32:	f002 fc69 	bl	d508 <__tLinearDelay_tick_veneer>
    ac36:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[string], sample) - sample;
    ac3a:	4620      	mov	r0, r4
    ac3c:	eeb0 0a68 	vmov.f32	s0, s17
    ac40:	f002 fc62 	bl	d508 <__tLinearDelay_tick_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    ac44:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    temp += tLinearDelay_tick(&delay2[string], sample) - sample;
    ac48:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    ac4c:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    ac50:	f2c2 0001 	movt	r0, #8193	; 0x2001
    ac54:	4438      	add	r0, r7
    ac56:	eea8 0ae7 	vfms.f32	s0, s17, s15
    ac5a:	f002 faad 	bl	d1b8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    ac5e:	eeb1 0a40 	vneg.f32	s0, s0
    ac62:	ecbd 8b04 	vpop	{d8-d9}
    ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac6a:	bf00      	nop
    ac6c:	f3af 8000 	nop.w
    ac70:	f3af 8000 	nop.w
    ac74:	f3af 8000 	nop.w
    ac78:	f3af 8000 	nop.w
    ac7c:	f3af 8000 	nop.w

0000ac80 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * (param1[v][string]+1.0f);
    ac80:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    ac84:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    sample = sample * (param1[v][string]+1.0f);
    ac88:	eb01 0c40 	add.w	ip, r1, r0, lsl #1
    ac8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    ac90:	f2c2 0201 	movt	r2, #8193	; 0x2001
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    ac94:	f2c2 0301 	movt	r3, #8193	; 0x2001
    sample = sample * (param1[v][string]+1.0f);
    ac98:	0040      	lsls	r0, r0, #1
    ac9a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    ac9e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    sample = sample * (param1[v][string]+1.0f);
    aca2:	edd2 7a00 	vldr	s15, [r2]
    if (val < min)
    aca6:	f240 42f3 	movw	r2, #1267	; 0x4f3
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    acaa:	edd3 6a00 	vldr	s13, [r3]
    acae:	f24d 731c 	movw	r3, #55068	; 0xd71c
    sample = sample * (param1[v][string]+1.0f);
    acb2:	ee37 7a86 	vadd.f32	s14, s15, s12
    acb6:	f6cb 72b5 	movt	r2, #49077	; 0xbfb5
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    acba:	ee67 7aa6 	vmul.f32	s15, s15, s13
    acbe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    acc2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    acc6:	eee7 7a00 	vfma.f32	s15, s14, s0
    acca:	ee07 2a10 	vmov	s14, r2
    acce:	ed93 0a00 	vldr	s0, [r3]
    acd2:	eef4 7ac7 	vcmpe.f32	s15, s14
    acd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acda:	d40a      	bmi.n	acf2 <shaperTick+0x72>
    else if (val > max)
    acdc:	f240 43f3 	movw	r3, #1267	; 0x4f3
    ace0:	f6c3 73b5 	movt	r3, #16309	; 0x3fb5
    ace4:	ee07 3a10 	vmov	s14, r3
    ace8:	eef4 7ac7 	vcmpe.f32	s15, s14
    acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acf0:	dd0b      	ble.n	ad0a <shaperTick+0x8a>
    acf2:	2300      	movs	r3, #0
    acf4:	ee00 3a10 	vmov	s0, r3
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    acf8:	f24d 23a4 	movw	r3, #53924	; 0xd2a4
    acfc:	4408      	add	r0, r1
    acfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ad02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ad06:	f002 ba57 	b.w	d1b8 <__tHighpass_tick_veneer>
    Lfloat fx = input * 2.0f;    // prescale
    ad0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    ad0e:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
    ad12:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    ad16:	f642 7205 	movw	r2, #12037	; 0x2f05
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    ad1a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    ad1e:	ee05 3a10 	vmov	s10, r3
    xc2 = xc*xc;
    ad22:	ee67 5aa7 	vmul.f32	s11, s15, s15
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
    ad26:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ad2a:	ee30 0a24 	vadd.f32	s0, s0, s9
    ad2e:	f6c3 7227 	movt	r2, #16167	; 0x3f27
    c = 0.5f*fx*(3.0f - (xc2));
    ad32:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
    ad36:	f6c3 534c 	movt	r3, #15692	; 0x3d4c
    c = 0.5f*fx*(3.0f - (xc2));
    ad3a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    ad3e:	ee65 4aa5 	vmul.f32	s9, s11, s11
    ad42:	ee66 6ae5 	vnmul.f32	s13, s13, s11
    c = 0.5f*fx*(3.0f - (xc2));
    ad46:	ee37 7a65 	vsub.f32	s14, s14, s11
    ad4a:	ee67 7a84 	vmul.f32	s15, s15, s8
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    ad4e:	eee4 6a85 	vfma.f32	s13, s9, s10
    ad52:	ee05 2a10 	vmov	s10, r2
    c = 0.5f*fx*(3.0f - (xc2));
    ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
    ad5a:	ee07 3a10 	vmov	s14, r3
    ad5e:	ee20 0a05 	vmul.f32	s0, s0, s10
    ad62:	eee5 7a87 	vfma.f32	s15, s11, s14
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    ad66:	ee36 7a86 	vadd.f32	s14, s13, s12
    ad6a:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
    ad6e:	ee20 0a27 	vmul.f32	s0, s0, s15
        return val;
    ad72:	e7c1      	b.n	acf8 <shaperTick+0x78>
    ad74:	f3af 8000 	nop.w
    ad78:	f3af 8000 	nop.w
    ad7c:	f3af 8000 	nop.w

0000ad80 <blankTick>:
}

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    ad80:	4770      	bx	lr
    ad82:	bf00      	nop
    ad84:	f3af 8000 	nop.w
    ad88:	f3af 8000 	nop.w
    ad8c:	f3af 8000 	nop.w
    ad90:	f3af 8000 	nop.w
    ad94:	f3af 8000 	nop.w
    ad98:	f3af 8000 	nop.w
    ad9c:	f3af 8000 	nop.w

0000ada0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tTiltFilter_tick(&FXTilt[v][string], sample);
    ada0:	f24d 03b8 	movw	r3, #53432	; 0xd0b8
    ada4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ada8:	f2c2 0301 	movt	r3, #8193	; 0x2001
{
    adac:	b510      	push	{r4, lr}
    adae:	0084      	lsls	r4, r0, #2
    sample = tTiltFilter_tick(&FXTilt[v][string], sample);
    adb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    adb4:	f002 fca8 	bl	d708 <__tTiltFilter_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    adb8:	f24d 2064 	movw	r0, #53860	; 0xd264
    adbc:	f2c2 0001 	movt	r0, #8193	; 0x2001
    adc0:	4420      	add	r0, r4
    return sample;
}
    adc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    adc6:	f002 bcb7 	b.w	d738 <__tVZFilterBell_tick_veneer>
    adca:	bf00      	nop
    adcc:	f3af 8000 	nop.w
    add0:	f3af 8000 	nop.w
    add4:	f3af 8000 	nop.w
    add8:	f3af 8000 	nop.w
    addc:	f3af 8000 	nop.w

0000ade0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    ade0:	b510      	push	{r4, lr}
    float gain = param1[v][string];
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    ade2:	f24d 64fc 	movw	r4, #55036	; 0xd6fc
    float gain = param1[v][string];
    ade6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    adea:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    adee:	f247 5286 	movw	r2, #30086	; 0x7586
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    adf2:	f2c2 0401 	movt	r4, #8193	; 0x2001
    float gain = param1[v][string];
    adf6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    adfa:	f6c3 4221 	movt	r2, #15393	; 0x3c21
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    adfe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float gain = param1[v][string];
    ae02:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    ae06:	f64d 1327 	movw	r3, #55591	; 0xd927
{
    ae0a:	ed2d 8b06 	vpush	{d8-d10}
    ae0e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    ae12:	edd4 7a00 	vldr	s15, [r4]
    ae16:	f6c3 6328 	movt	r3, #15912	; 0x3e28
    ae1a:	ee09 2a90 	vmov	s19, r2
    Lfloat den = InvSqrt(1.0f + a * a);
    ae1e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    i = 0x5f3759df - (i>>1); // gives initial guess y0
    ae22:	f645 14df 	movw	r4, #23007	; 0x59df
    ae26:	eea7 0a88 	vfma.f32	s0, s15, s16
    float gain = param1[v][string];
    ae2a:	edd0 7a00 	vldr	s15, [r0]
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    ae2e:	ee07 3a10 	vmov	s14, r3
    ae32:	ee08 3a90 	vmov	s17, r3
    ae36:	f6c5 7437 	movt	r4, #24375	; 0x5f37
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    ae3a:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    ae3e:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    ae42:	eef0 6a4a 	vmov.f32	s13, s20
    ae46:	f2c2 0001 	movt	r0, #8193	; 0x2001
    ae4a:	ee27 0a80 	vmul.f32	s0, s15, s0
    ae4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    ae52:	ee60 7a00 	vmul.f32	s15, s0, s0
    ae56:	eea7 7aa9 	vfma.f32	s14, s15, s19
    ae5a:	ee67 7a80 	vmul.f32	s15, s15, s0
    ae5e:	eea7 0a87 	vfma.f32	s0, s15, s14
    Lfloat den = InvSqrt(1.0f + a * a);
    ae62:	eef0 7a49 	vmov.f32	s15, s18
    ae66:	eee0 7a00 	vfma.f32	s15, s0, s0
    x = *(Lfloat*)&i; // convert bits back to float
    ae6a:	ee17 3a90 	vmov	r3, s15
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    ae6e:	ee27 7a88 	vmul.f32	s14, s15, s16
    x = *(Lfloat*)&i; // convert bits back to float
    ae72:	eba4 0363 	sub.w	r3, r4, r3, asr #1
    ae76:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    ae7a:	ee27 7a27 	vmul.f32	s14, s14, s15
    return a * den;
    ae7e:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    ae82:	eee7 6ac7 	vfms.f32	s13, s15, s14
    ae86:	ee20 0a26 	vmul.f32	s0, s0, s13
    ae8a:	f002 f995 	bl	d1b8 <__tHighpass_tick_veneer>
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    ae8e:	ee60 7a00 	vmul.f32	s15, s0, s0
    ae92:	eee7 8aa9 	vfma.f32	s17, s15, s19
    ae96:	ee67 7a80 	vmul.f32	s15, s15, s0
    ae9a:	eea7 0aa8 	vfma.f32	s0, s15, s17
    Lfloat den = InvSqrt(1.0f + a * a);
    ae9e:	eea0 9a00 	vfma.f32	s18, s0, s0
    x = *(Lfloat*)&i; // convert bits back to float
    aea2:	ee19 3a10 	vmov	r3, s18
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    aea6:	ee29 8a08 	vmul.f32	s16, s18, s16
    x = *(Lfloat*)&i; // convert bits back to float
    aeaa:	eba4 0363 	sub.w	r3, r4, r3, asr #1
    aeae:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    aeb2:	ee28 8a27 	vmul.f32	s16, s16, s15
    return a * den;
    aeb6:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    aeba:	eea7 aac8 	vfms.f32	s20, s15, s16
    //temp *= param4[v][string];
    temp = fast_tanh5(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    aebe:	ee20 0a0a 	vmul.f32	s0, s0, s20
    aec2:	ecbd 8b06 	vpop	{d8-d10}
    aec6:	bd10      	pop	{r4, pc}
    aec8:	f3af 8000 	nop.w
    aecc:	f3af 8000 	nop.w
    aed0:	f3af 8000 	nop.w
    aed4:	f3af 8000 	nop.w
    aed8:	f3af 8000 	nop.w
    aedc:	f3af 8000 	nop.w

0000aee0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    aee0:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    sample = sample + param2[v][string];
    aee4:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    sample = sample * param1[v][string];
    aee8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    aeec:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    aef0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    sample = sample + param2[v][string];
    aef4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    aef8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    {
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    aefc:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    sample = sample * param1[v][string];
    af00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    af04:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    sample = sample + param2[v][string];
    af08:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    af0c:	f2c2 0001 	movt	r0, #8193	; 0x2001
    sample = sample + param2[v][string];
    af10:	ed92 7a00 	vldr	s14, [r2]
    af14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
    af18:	edd3 7a00 	vldr	s15, [r3]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    af1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    af20:	f6c3 62aa 	movt	r2, #16042	; 0x3eaa
    sample = sample + param2[v][string];
    af24:	eee7 7a00 	vfma.f32	s15, s14, s0
    if (sample <= -1.0f)
    af28:	ee07 2a10 	vmov	s14, r2
    af2c:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    af30:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
    af34:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    af38:	eee6 6a07 	vfma.f32	s13, s12, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    af3c:	ee26 0aa7 	vmul.f32	s0, s13, s15
    af40:	f002 b93a 	b.w	d1b8 <__tHighpass_tick_veneer>
    af44:	f3af 8000 	nop.w
    af48:	f3af 8000 	nop.w
    af4c:	f3af 8000 	nop.w
    af50:	f3af 8000 	nop.w
    af54:	f3af 8000 	nop.w
    af58:	f3af 8000 	nop.w
    af5c:	f3af 8000 	nop.w

0000af60 <hardClipTick>:
    return sample;
}


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    af60:	b538      	push	{r3, r4, r5, lr}

    sample = sample * param1[v][string];
    sample = sample + param2[v][string];
    af62:	f24d 62fc 	movw	r2, #55036	; 0xd6fc
    sample = sample * param1[v][string];
    af66:	f24d 64dc 	movw	r4, #55004	; 0xd6dc
    af6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    af6e:	f24d 731c 	movw	r3, #55068	; 0xd71c
    sample = sample * param1[v][string];
    af72:	f2c2 0401 	movt	r4, #8193	; 0x2001
    sample = sample + param2[v][string];
    af76:	f2c2 0201 	movt	r2, #8193	; 0x2001
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    af7a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    af7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    af82:	eb04 0481 	add.w	r4, r4, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    af86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    af8a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    af8e:	ed94 6a00 	vldr	s12, [r4]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    af92:	eb03 0581 	add.w	r5, r3, r1, lsl #2
    sample = sample + param2[v][string];
    af96:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    af9a:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    af9c:	eee6 7a00 	vfma.f32	s15, s12, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    afa0:	ed95 0a00 	vldr	s0, [r5]
    afa4:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    afa8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    afac:	ee27 0a80 	vmul.f32	s0, s15, s0
    afb0:	f002 fa62 	bl	d478 <__arm_sin_f32_veneer>
    afb4:	f64d 0304 	movw	r3, #55300	; 0xd804
    afb8:	ed95 7a00 	vldr	s14, [r5]
    afbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    afc0:	191d      	adds	r5, r3, r4
    afc2:	edd5 7a00 	vldr	s15, [r5]
    afc6:	ee67 7a87 	vmul.f32	s15, s15, s14
    afca:	ee27 0a80 	vmul.f32	s0, s15, s0
    afce:	f002 fa53 	bl	d478 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    afd2:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
        sample = sample * shapeDividerH[v][string];
    afd6:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    afda:	f2c2 0001 	movt	r0, #8193	; 0x2001
    afde:	ee20 0a27 	vmul.f32	s0, s0, s15
    afe2:	4420      	add	r0, r4
    return sample;
}
    afe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    afe8:	f002 b8e6 	b.w	d1b8 <__tHighpass_tick_veneer>
    afec:	f3af 8000 	nop.w
    aff0:	f3af 8000 	nop.w
    aff4:	f3af 8000 	nop.w
    aff8:	f3af 8000 	nop.w
    affc:	f3af 8000 	nop.w

0000b000 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    b000:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    sample = sample + param2[v][string];
    b004:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    sample = sample * param1[v][string];
    b008:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b00c:	f24d 701c 	movw	r0, #55068	; 0xd71c
    sample = sample * param1[v][string];
    b010:	f2c2 0201 	movt	r2, #8193	; 0x2001
    sample = sample + param2[v][string];
    b014:	f2c2 0301 	movt	r3, #8193	; 0x2001
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b018:	f2c2 0001 	movt	r0, #8193	; 0x2001
    b01c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    b020:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b024:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    b028:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b02c:	f24d 7c94 	movw	ip, #55188	; 0xd794
    sample = sample + param2[v][string];
    b030:	ed92 7a00 	vldr	s14, [r2]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b034:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    b038:	edd3 7a00 	vldr	s15, [r3]
    b03c:	f247 4233 	movw	r2, #29747	; 0x7433
    b040:	f24f 63e3 	movw	r3, #63203	; 0xf6e3
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b044:	f2c2 0c01 	movt	ip, #8193	; 0x2001
    sample = sample + param2[v][string];
    b048:	eee7 7a00 	vfma.f32	s15, s14, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b04c:	ed90 7a00 	vldr	s14, [r0]
    b050:	f6c3 5294 	movt	r2, #15764	; 0x3d94
    b054:	f6c3 73c8 	movt	r3, #16328	; 0x3fc8
    b058:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
	sample = sample * polyDivider[v][string];


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    b05c:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    b060:	ee06 2a10 	vmov	s12, r2
    b064:	ee04 3a90 	vmov	s9, r3
    return term1+term2+term3;
    b068:	f647 424c 	movw	r2, #31820	; 0x7c4c
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b06c:	ed9c 0a00 	vldr	s0, [ip]
    b070:	ee06 3a90 	vmov	s13, r3
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    b074:	f2c2 0001 	movt	r0, #8193	; 0x2001
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b078:	fec7 7ac5 	vminnm.f32	s15, s15, s10
    b07c:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
    b080:	ee67 7a87 	vmul.f32	s15, s15, s14
    b084:	f6cb 7224 	movt	r2, #48932	; 0xbf24
    b088:	ee27 7a00 	vmul.f32	s14, s14, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    b08c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b090:	ee05 2a90 	vmov	s11, r2
    Lfloat term2 = x * x * x * -0.6425216143f;
    b094:	ee27 5aa7 	vmul.f32	s10, s15, s15
    b098:	ee27 4a86 	vmul.f32	s8, s15, s12
    b09c:	ee25 5a27 	vmul.f32	s10, s10, s15
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    b0a0:	eee5 4a04 	vfma.f32	s9, s10, s8
    return term1+term2+term3;
    b0a4:	ee67 7aa4 	vmul.f32	s15, s15, s9
    b0a8:	eee5 7a25 	vfma.f32	s15, s10, s11
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
    Lfloat term2 = x * x * x * -0.6425216143f;
    b0b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
    b0b4:	ee27 6a86 	vmul.f32	s12, s15, s12
    b0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    b0bc:	eee7 6a06 	vfma.f32	s13, s14, s12
    return term1+term2+term3;
    b0c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    b0c4:	eee7 7a25 	vfma.f32	s15, s14, s11
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    b0c8:	ee20 0a27 	vmul.f32	s0, s0, s15
    b0cc:	f002 b874 	b.w	d1b8 <__tHighpass_tick_veneer>
    b0d0:	f3af 8000 	nop.w
    b0d4:	f3af 8000 	nop.w
    b0d8:	f3af 8000 	nop.w
    b0dc:	f3af 8000 	nop.w

0000b0e0 <satTick>:
    return sample;
}
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    b0e0:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
    sample = sample * param1[v][string];
    b0e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    b0e8:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    b0ec:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    b0f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    sample = sample * param1[v][string];
    b0f4:	f2c2 0201 	movt	r2, #8193	; 0x2001
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    b0f8:	f2c2 0001 	movt	r0, #8193	; 0x2001
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    b0fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample * param1[v][string];
    b100:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    b104:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    b108:	b510      	push	{r4, lr}
    b10a:	ed2d 8b02 	vpush	{d8}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    b10e:	edd3 7a00 	vldr	s15, [r3]
    b112:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    b116:	edd2 6a00 	vldr	s13, [r2]
    b11a:	008c      	lsls	r4, r1, #2
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    b11c:	eeb0 7a67 	vmov.f32	s14, s15
    b120:	ee66 7aa7 	vmul.f32	s15, s13, s15
    b124:	eea6 7a80 	vfma.f32	s14, s13, s0
    b128:	eee6 7a80 	vfma.f32	s15, s13, s0
    b12c:	eeb0 0ac7 	vabs.f32	s0, s14
    b130:	ee30 0a08 	vadd.f32	s0, s0, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    b134:	ee87 0a80 	vdiv.f32	s0, s15, s0
    b138:	f002 f83e 	bl	d1b8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    b13c:	f24d 20c4 	movw	r0, #53956	; 0xd2c4
    b140:	f2c2 0001 	movt	r0, #8193	; 0x2001
    b144:	4420      	add	r0, r4
    b146:	f002 f837 	bl	d1b8 <__tHighpass_tick_veneer>
    b14a:	f247 5186 	movw	r1, #30086	; 0x7586
    b14e:	f64d 1227 	movw	r2, #55591	; 0xd927
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    b152:	ee60 6a00 	vmul.f32	s13, s0, s0
    b156:	f6c3 4121 	movt	r1, #15393	; 0x3c21
    i = 0x5f3759df - (i>>1); // gives initial guess y0
    b15a:	f645 13df 	movw	r3, #23007	; 0x59df
    b15e:	f6c3 6228 	movt	r2, #15912	; 0x3e28
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    b162:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    b166:	ee06 1a10 	vmov	s12, r1
    i = 0x5f3759df - (i>>1); // gives initial guess y0
    b16a:	f6c5 7337 	movt	r3, #24375	; 0x5f37
    b16e:	ee07 2a90 	vmov	s15, r2
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    b172:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
    b176:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    b17a:	ee60 6a26 	vmul.f32	s13, s0, s13
    b17e:	eea6 0aa7 	vfma.f32	s0, s13, s15
    Lfloat den = InvSqrt(1.0f + a * a);
    b182:	eea0 8a00 	vfma.f32	s16, s0, s0
    x = *(Lfloat*)&i; // convert bits back to float
    b186:	ee18 2a10 	vmov	r2, s16
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    b18a:	ee28 7a07 	vmul.f32	s14, s16, s14
    x = *(Lfloat*)&i; // convert bits back to float
    b18e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    b192:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    b196:	ee27 7a27 	vmul.f32	s14, s14, s15
    return a * den;
    b19a:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    b19e:	eee7 5ac7 	vfms.f32	s11, s15, s14
    temp = fast_tanh5(temp);
    return temp;
}
    b1a2:	ecbd 8b02 	vpop	{d8}
    b1a6:	ee20 0a25 	vmul.f32	s0, s0, s11
    b1aa:	bd10      	pop	{r4, pc}
    b1ac:	f3af 8000 	nop.w
    b1b0:	f3af 8000 	nop.w
    b1b4:	f3af 8000 	nop.w
    b1b8:	f3af 8000 	nop.w
    b1bc:	f3af 8000 	nop.w

0000b1c0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    b1c0:	f24d 63dc 	movw	r3, #55004	; 0xd6dc
    b1c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    return tCrusher_tick(&bc[v][string], sample);
    b1c8:	f24d 2244 	movw	r2, #53828	; 0xd244
    sample = sample * param1[v][string];
    b1cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
    return tCrusher_tick(&bc[v][string], sample);
    b1d0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    sample = sample * param1[v][string];
    b1d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    b1d8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    sample = sample * param1[v][string];
    b1dc:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    b1e0:	ee20 0a27 	vmul.f32	s0, s0, s15
    b1e4:	f002 b81c 	b.w	d220 <__tCrusher_tick_veneer>
    b1e8:	f3af 8000 	nop.w
    b1ec:	f3af 8000 	nop.w
    b1f0:	f3af 8000 	nop.w
    b1f4:	f3af 8000 	nop.w
    b1f8:	f3af 8000 	nop.w
    b1fc:	f3af 8000 	nop.w

0000b200 <compressorTick>:
}


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
    b200:	f24d 2384 	movw	r3, #53892	; 0xd284
    b204:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b208:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b20c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b210:	f002 b8e2 	b.w	d3d8 <__tCompressor_tickWithTableHardKnee_veneer>
    b214:	f3af 8000 	nop.w
    b218:	f3af 8000 	nop.w
    b21c:	f3af 8000 	nop.w

0000b220 <FXlowpassTick>:
	//return tCompressor_tick(&comp[v][string], sample);
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tickLP(&FXlowpass[v][string], sample);
    b220:	f24d 13b8 	movw	r3, #53688	; 0xd1b8
    b224:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b228:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b22c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b230:	f002 b82a 	b.w	d288 <__tSVF_tickLP_veneer>
    b234:	f3af 8000 	nop.w
    b238:	f3af 8000 	nop.w
    b23c:	f3af 8000 	nop.w

0000b240 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tickHP(&FXhighpass[v][string], sample);
    b240:	f24d 1398 	movw	r3, #53656	; 0xd198
    b244:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b248:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b24c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b250:	f002 ba9e 	b.w	d790 <__tSVF_tickHP_veneer>
    b254:	f3af 8000 	nop.w
    b258:	f3af 8000 	nop.w
    b25c:	f3af 8000 	nop.w

0000b260 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tickBP(&FXbandpass[v][string], sample);
    b260:	f24d 1358 	movw	r3, #53592	; 0xd158
    b264:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b268:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b26c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b270:	f002 b99a 	b.w	d5a8 <__tSVF_tickBP_veneer>
    b274:	f3af 8000 	nop.w
    b278:	f3af 8000 	nop.w
    b27c:	f3af 8000 	nop.w

0000b280 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tickEfficient(&FXdiodeFilters[v][string], sample);
    b280:	f24d 1378 	movw	r3, #53624	; 0xd178
    b284:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b288:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b28c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b290:	f002 b932 	b.w	d4f8 <__tDiodeFilter_tickEfficient_veneer>
    b294:	f3af 8000 	nop.w
    b298:	f3af 8000 	nop.w
    b29c:	f3af 8000 	nop.w

0000b2a0 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    b2a0:	f24d 1338 	movw	r3, #53560	; 0xd138
    b2a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b2a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b2b0:	f002 ba42 	b.w	d738 <__tVZFilterBell_tick_veneer>
    b2b4:	f3af 8000 	nop.w
    b2b8:	f3af 8000 	nop.w
    b2bc:	f3af 8000 	nop.w

0000b2c0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    b2c0:	f24d 1318 	movw	r3, #53528	; 0xd118
    b2c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b2c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b2d0:	f002 b932 	b.w	d538 <__tVZFilterLS_tick_veneer>
    b2d4:	f3af 8000 	nop.w
    b2d8:	f3af 8000 	nop.w
    b2dc:	f3af 8000 	nop.w

0000b2e0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    b2e0:	f24d 03f8 	movw	r3, #53496	; 0xd0f8
    b2e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b2e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b2ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b2f0:	f001 bf8a 	b.w	d208 <__tVZFilterHS_tick_veneer>
    b2f4:	f3af 8000 	nop.w
    b2f8:	f3af 8000 	nop.w
    b2fc:	f3af 8000 	nop.w

0000b300 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilterBR_tick(&FXVZfilterBR[v][string], sample);
    b300:	f24d 03d8 	movw	r3, #53464	; 0xd0d8
    b304:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b308:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b30c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b310:	f002 b8b6 	b.w	d480 <__tVZFilterBR_tick_veneer>
    b314:	f3af 8000 	nop.w
    b318:	f3af 8000 	nop.w
    b31c:	f3af 8000 	nop.w

0000b320 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    b320:	f24d 0398 	movw	r3, #53400	; 0xd098
    b324:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    b328:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b32c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b330:	f001 bfa2 	b.w	d278 <__tLadderFilter_tick_veneer>
    b334:	f3af 8000 	nop.w
    b338:	f3af 8000 	nop.w
    b33c:	f3af 8000 	nop.w

0000b340 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b340:	2200      	movs	r2, #0
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    b342:	f24d 1cb8 	movw	ip, #53688	; 0xd1b8
    b346:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b34a:	4613      	mov	r3, r2
    b34c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    b350:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b354:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b358:	ee07 2a10 	vmov	s14, r2
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    b35c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b360:	ee07 3a90 	vmov	s15, r3
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    b364:	eee0 7a07 	vfma.f32	s15, s0, s14
    b368:	eeb0 0a67 	vmov.f32	s0, s15
    b36c:	f002 b804 	b.w	d378 <__tSVF_setFreqFast_veneer>
    b370:	f3af 8000 	nop.w
    b374:	f3af 8000 	nop.w
    b378:	f3af 8000 	nop.w
    b37c:	f3af 8000 	nop.w

0000b380 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b380:	2200      	movs	r2, #0
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    b382:	f24d 1c98 	movw	ip, #53656	; 0xd198
    b386:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b38a:	4613      	mov	r3, r2
    b38c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    b390:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b394:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b398:	ee07 2a10 	vmov	s14, r2
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    b39c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b3a0:	ee07 3a90 	vmov	s15, r3
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    b3a4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b3a8:	eeb0 0a67 	vmov.f32	s0, s15
    b3ac:	f001 bfe4 	b.w	d378 <__tSVF_setFreqFast_veneer>
    b3b0:	f3af 8000 	nop.w
    b3b4:	f3af 8000 	nop.w
    b3b8:	f3af 8000 	nop.w
    b3bc:	f3af 8000 	nop.w

0000b3c0 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b3c0:	2200      	movs	r2, #0
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    b3c2:	f24d 1c58 	movw	ip, #53592	; 0xd158
    b3c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b3ca:	4613      	mov	r3, r2
    b3cc:	f2c4 229a 	movt	r2, #17050	; 0x429a
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    b3d0:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b3d4:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b3d8:	ee07 2a10 	vmov	s14, r2
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    b3dc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b3e0:	ee07 3a90 	vmov	s15, r3
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    b3e4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b3e8:	eeb0 0a67 	vmov.f32	s0, s15
    b3ec:	f001 bfc4 	b.w	d378 <__tSVF_setFreqFast_veneer>
    b3f0:	f3af 8000 	nop.w
    b3f4:	f3af 8000 	nop.w
    b3f8:	f3af 8000 	nop.w
    b3fc:	f3af 8000 	nop.w

0000b400 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b400:	2200      	movs	r2, #0
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    b402:	f24d 1c78 	movw	ip, #53624	; 0xd178
    b406:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b40a:	4613      	mov	r3, r2
    b40c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    b410:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b414:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b418:	ee07 2a10 	vmov	s14, r2
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    b41c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b420:	ee07 3a90 	vmov	s15, r3
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    b424:	eee0 7a07 	vfma.f32	s15, s0, s14
    b428:	eeb0 0a67 	vmov.f32	s0, s15
    b42c:	f002 b8e0 	b.w	d5f0 <__tDiodeFilter_setFreqFast_veneer>
    b430:	f3af 8000 	nop.w
    b434:	f3af 8000 	nop.w
    b438:	f3af 8000 	nop.w
    b43c:	f3af 8000 	nop.w

0000b440 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b440:	2200      	movs	r2, #0
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    b442:	f24d 1c38 	movw	ip, #53560	; 0xd138
    b446:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b44a:	4613      	mov	r3, r2
    b44c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    b450:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b454:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b458:	ee07 2a10 	vmov	s14, r2
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    b45c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b460:	ee07 3a90 	vmov	s15, r3
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    b464:	eee0 7a07 	vfma.f32	s15, s0, s14
    b468:	eeb0 0a67 	vmov.f32	s0, s15
    b46c:	f002 b818 	b.w	d4a0 <__tVZFilterBell_setFreq_veneer>
    b470:	f3af 8000 	nop.w
    b474:	f3af 8000 	nop.w
    b478:	f3af 8000 	nop.w
    b47c:	f3af 8000 	nop.w

0000b480 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b480:	2200      	movs	r2, #0
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    b482:	f24d 1c18 	movw	ip, #53528	; 0xd118
    b486:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b48a:	4613      	mov	r3, r2
    b48c:	f2c4 229a 	movt	r2, #17050	; 0x429a
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    b490:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b494:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b498:	ee07 2a10 	vmov	s14, r2
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    b49c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b4a0:	ee07 3a90 	vmov	s15, r3
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    b4a4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b4a8:	eeb0 0a67 	vmov.f32	s0, s15
    b4ac:	f001 bfbc 	b.w	d428 <__tVZFilterLS_setFreqFast_veneer>
    b4b0:	f3af 8000 	nop.w
    b4b4:	f3af 8000 	nop.w
    b4b8:	f3af 8000 	nop.w
    b4bc:	f3af 8000 	nop.w

0000b4c0 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b4c0:	2200      	movs	r2, #0
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    b4c2:	f24d 0cf8 	movw	ip, #53496	; 0xd0f8
    b4c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b4ca:	4613      	mov	r3, r2
    b4cc:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    b4d0:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b4d4:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b4d8:	ee07 2a10 	vmov	s14, r2
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    b4dc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b4e0:	ee07 3a90 	vmov	s15, r3
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    b4e4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b4e8:	eeb0 0a67 	vmov.f32	s0, s15
    b4ec:	f002 b8f0 	b.w	d6d0 <__tVZFilterHS_setFreqFast_veneer>
    b4f0:	f3af 8000 	nop.w
    b4f4:	f3af 8000 	nop.w
    b4f8:	f3af 8000 	nop.w
    b4fc:	f3af 8000 	nop.w

0000b500 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b500:	2200      	movs	r2, #0
	tVZFilterBR_setFreqFast(&FXVZfilterBR[v][string], value);
    b502:	f24d 0cd8 	movw	ip, #53464	; 0xd0d8
    b506:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b50a:	4613      	mov	r3, r2
    b50c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tVZFilterBR_setFreqFast(&FXVZfilterBR[v][string], value);
    b510:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b514:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b518:	ee07 2a10 	vmov	s14, r2
	tVZFilterBR_setFreqFast(&FXVZfilterBR[v][string], value);
    b51c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b520:	ee07 3a90 	vmov	s15, r3
	tVZFilterBR_setFreqFast(&FXVZfilterBR[v][string], value);
    b524:	eee0 7a07 	vfma.f32	s15, s0, s14
    b528:	eeb0 0a67 	vmov.f32	s0, s15
    b52c:	f001 be88 	b.w	d240 <__tVZFilterBR_setFreqFast_veneer>
    b530:	f3af 8000 	nop.w
    b534:	f3af 8000 	nop.w
    b538:	f3af 8000 	nop.w
    b53c:	f3af 8000 	nop.w

0000b540 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b540:	2200      	movs	r2, #0
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    b542:	f24d 0c98 	movw	ip, #53400	; 0xd098
    b546:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    b54a:	4613      	mov	r3, r2
    b54c:	f2c4 229a 	movt	r2, #17050	; 0x429a
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    b550:	f2c2 0c01 	movt	ip, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b554:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b558:	ee07 2a10 	vmov	s14, r2
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    b55c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
	value = (value * 77.0f) + 42.0f;
    b560:	ee07 3a90 	vmov	s15, r3
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    b564:	eee0 7a07 	vfma.f32	s15, s0, s14
    b568:	eeb0 0a67 	vmov.f32	s0, s15
    b56c:	f001 bf7c 	b.w	d468 <__tLadderFilter_setFreqFast_veneer>
    b570:	f3af 8000 	nop.w
    b574:	f3af 8000 	nop.w
    b578:	f3af 8000 	nop.w
    b57c:	f3af 8000 	nop.w

0000b580 <FXPeakParam2>:
}

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
    b580:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b582:	2300      	movs	r3, #0
    b584:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    b588:	4605      	mov	r5, r0
    b58a:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b58c:	f2c4 2348 	movt	r3, #16968	; 0x4248
    b590:	ee07 3a90 	vmov	s15, r3
    b594:	eea0 7a27 	vfma.f32	s14, s0, s15
    b598:	eeb0 0a47 	vmov.f32	s0, s14
    b59c:	f001 ffa4 	bl	d4e8 <__dbToATableLookup_veneer>
    b5a0:	f24d 1338 	movw	r3, #53560	; 0xd138
    b5a4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    b5a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    b5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b5b4:	f001 bdfc 	b.w	d1b0 <__tVZFilterBell_setGain_veneer>
    b5b8:	f3af 8000 	nop.w
    b5bc:	f3af 8000 	nop.w

0000b5c0 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
    b5c0:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b5c2:	2300      	movs	r3, #0
    b5c4:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    b5c8:	4605      	mov	r5, r0
    b5ca:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b5cc:	f2c4 2348 	movt	r3, #16968	; 0x4248
    b5d0:	ee07 3a90 	vmov	s15, r3
    b5d4:	eea0 7a27 	vfma.f32	s14, s0, s15
    b5d8:	eeb0 0a47 	vmov.f32	s0, s14
    b5dc:	f001 ff84 	bl	d4e8 <__dbToATableLookup_veneer>
    b5e0:	f24d 1318 	movw	r3, #53528	; 0xd118
    b5e4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    b5e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b5ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    b5f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b5f4:	f002 b8b4 	b.w	d760 <__tVZFilterLS_setGain_veneer>
    b5f8:	f3af 8000 	nop.w
    b5fc:	f3af 8000 	nop.w

0000b600 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
    b600:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b602:	2300      	movs	r3, #0
    b604:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    b608:	4605      	mov	r5, r0
    b60a:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b60c:	f2c4 2348 	movt	r3, #16968	; 0x4248
    b610:	ee07 3a90 	vmov	s15, r3
    b614:	eea0 7a27 	vfma.f32	s14, s0, s15
    b618:	eeb0 0a47 	vmov.f32	s0, s14
    b61c:	f001 ff64 	bl	d4e8 <__dbToATableLookup_veneer>
    b620:	f24d 03f8 	movw	r3, #53496	; 0xd0f8
    b624:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    b628:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b62c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    b630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b634:	f001 bdf0 	b.w	d218 <__tVZFilterHS_setGain_veneer>
    b638:	f3af 8000 	nop.w
    b63c:	f3af 8000 	nop.w

0000b640 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
    b640:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBR_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b642:	2300      	movs	r3, #0
    b644:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
{
    b648:	4605      	mov	r5, r0
    b64a:	460c      	mov	r4, r1
	tVZFilterBR_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b64c:	f2c4 2348 	movt	r3, #16968	; 0x4248
    b650:	ee07 3a90 	vmov	s15, r3
    b654:	eea0 7a27 	vfma.f32	s14, s0, s15
    b658:	eeb0 0a47 	vmov.f32	s0, s14
    b65c:	f001 ff44 	bl	d4e8 <__dbToATableLookup_veneer>
    b660:	f24d 03d8 	movw	r3, #53464	; 0xd0d8
    b664:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    b668:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b66c:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    b670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBR_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    b674:	f002 b830 	b.w	d6d8 <__tVZFilterBR_setGain_veneer>
    b678:	f3af 8000 	nop.w
    b67c:	f3af 8000 	nop.w

0000b680 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
    b680:	b538      	push	{r3, r4, r5, lr}
	tSVF_setQ(&FXlowpass[v][string], scaleFilterResonance(value));
    b682:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b686:	4605      	mov	r5, r0
    b688:	460c      	mov	r4, r1
	tSVF_setQ(&FXlowpass[v][string], scaleFilterResonance(value));
    b68a:	f7f6 fbf9 	bl	1e80 <scaleFilterResonance>
    b68e:	f24d 13b8 	movw	r3, #53688	; 0xd1b8
    b692:	ee07 0a90 	vmov	s15, r0
    b696:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b69a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b69e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b6a2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setQ(&FXlowpass[v][string], scaleFilterResonance(value));
    b6aa:	f001 bfd5 	b.w	d658 <__tSVF_setQ_veneer>
    b6ae:	bf00      	nop
    b6b0:	f3af 8000 	nop.w
    b6b4:	f3af 8000 	nop.w
    b6b8:	f3af 8000 	nop.w
    b6bc:	f3af 8000 	nop.w

0000b6c0 <FXHighpassParam3>:

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    b6c0:	b538      	push	{r3, r4, r5, lr}
    tSVF_setQ(&FXhighpass[v][string], scaleFilterResonance(value));
    b6c2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b6c6:	4605      	mov	r5, r0
    b6c8:	460c      	mov	r4, r1
    tSVF_setQ(&FXhighpass[v][string], scaleFilterResonance(value));
    b6ca:	f7f6 fbd9 	bl	1e80 <scaleFilterResonance>
    b6ce:	f24d 1398 	movw	r3, #53656	; 0xd198
    b6d2:	ee07 0a90 	vmov	s15, r0
    b6d6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b6da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b6de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b6e2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setQ(&FXhighpass[v][string], scaleFilterResonance(value));
    b6ea:	f001 bfb5 	b.w	d658 <__tSVF_setQ_veneer>
    b6ee:	bf00      	nop
    b6f0:	f3af 8000 	nop.w
    b6f4:	f3af 8000 	nop.w
    b6f8:	f3af 8000 	nop.w
    b6fc:	f3af 8000 	nop.w

0000b700 <FXBandpassParam3>:

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    b700:	b538      	push	{r3, r4, r5, lr}
    tSVF_setQ(&FXbandpass[v][string], scaleFilterResonance(value));
    b702:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b706:	4605      	mov	r5, r0
    b708:	460c      	mov	r4, r1
    tSVF_setQ(&FXbandpass[v][string], scaleFilterResonance(value));
    b70a:	f7f6 fbb9 	bl	1e80 <scaleFilterResonance>
    b70e:	f24d 1358 	movw	r3, #53592	; 0xd158
    b712:	ee07 0a90 	vmov	s15, r0
    b716:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b71a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b71e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b722:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setQ(&FXbandpass[v][string], scaleFilterResonance(value));
    b72a:	f001 bf95 	b.w	d658 <__tSVF_setQ_veneer>
    b72e:	bf00      	nop
    b730:	f3af 8000 	nop.w
    b734:	f3af 8000 	nop.w
    b738:	f3af 8000 	nop.w
    b73c:	f3af 8000 	nop.w

0000b740 <FXDiodeParam3>:

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
    b740:	b538      	push	{r3, r4, r5, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], scaleFilterResonance(value));
    b742:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b746:	4605      	mov	r5, r0
    b748:	460c      	mov	r4, r1
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], scaleFilterResonance(value));
    b74a:	f7f6 fb99 	bl	1e80 <scaleFilterResonance>
    b74e:	f24d 1378 	movw	r3, #53624	; 0xd178
    b752:	ee07 0a90 	vmov	s15, r0
    b756:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b75a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b75e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b762:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], scaleFilterResonance(value));
    b76a:	f001 be75 	b.w	d458 <__tDiodeFilter_setQ_veneer>
    b76e:	bf00      	nop
    b770:	f3af 8000 	nop.w
    b774:	f3af 8000 	nop.w
    b778:	f3af 8000 	nop.w
    b77c:	f3af 8000 	nop.w

0000b780 <FXPeakParam3>:


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
    b780:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], scaleFilterResonance(value));
    b782:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b786:	4605      	mov	r5, r0
    b788:	460c      	mov	r4, r1
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], scaleFilterResonance(value));
    b78a:	f7f6 fb79 	bl	1e80 <scaleFilterResonance>
    b78e:	f24d 1338 	movw	r3, #53560	; 0xd138
    b792:	ee07 0a90 	vmov	s15, r0
    b796:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b79a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b79e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b7a2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], scaleFilterResonance(value));
    b7aa:	f001 be1d 	b.w	d3e8 <__tVZFilterBell_setBandwidth_veneer>
    b7ae:	bf00      	nop
    b7b0:	f3af 8000 	nop.w
    b7b4:	f3af 8000 	nop.w
    b7b8:	f3af 8000 	nop.w
    b7bc:	f3af 8000 	nop.w

0000b7c0 <FXLowShelfParam3>:


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
    b7c0:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], scaleFilterResonance(value));
    b7c2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b7c6:	4605      	mov	r5, r0
    b7c8:	460c      	mov	r4, r1
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], scaleFilterResonance(value));
    b7ca:	f7f6 fb59 	bl	1e80 <scaleFilterResonance>
    b7ce:	f24d 1318 	movw	r3, #53528	; 0xd118
    b7d2:	ee07 0a90 	vmov	s15, r0
    b7d6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b7da:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b7de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b7e2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], scaleFilterResonance(value));
    b7ea:	f001 bdbd 	b.w	d368 <__tVZFilterLS_setResonance_veneer>
    b7ee:	bf00      	nop
    b7f0:	f3af 8000 	nop.w
    b7f4:	f3af 8000 	nop.w
    b7f8:	f3af 8000 	nop.w
    b7fc:	f3af 8000 	nop.w

0000b800 <FXHighShelfParam3>:


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
    b800:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], scaleFilterResonance(value));
    b802:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b806:	4605      	mov	r5, r0
    b808:	460c      	mov	r4, r1
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], scaleFilterResonance(value));
    b80a:	f7f6 fb39 	bl	1e80 <scaleFilterResonance>
    b80e:	f24d 03f8 	movw	r3, #53496	; 0xd0f8
    b812:	ee07 0a90 	vmov	s15, r0
    b816:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b81a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b81e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b822:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], scaleFilterResonance(value));
    b82a:	f001 becd 	b.w	d5c8 <__tVZFilterHS_setResonance_veneer>
    b82e:	bf00      	nop
    b830:	f3af 8000 	nop.w
    b834:	f3af 8000 	nop.w
    b838:	f3af 8000 	nop.w
    b83c:	f3af 8000 	nop.w

0000b840 <FXNotchParam3>:


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
    b840:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBR_setResonance(&FXVZfilterBR[v][string], scaleFilterResonance(value));
    b842:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b846:	4605      	mov	r5, r0
    b848:	460c      	mov	r4, r1
	tVZFilterBR_setResonance(&FXVZfilterBR[v][string], scaleFilterResonance(value));
    b84a:	f7f6 fb19 	bl	1e80 <scaleFilterResonance>
    b84e:	f24d 03d8 	movw	r3, #53464	; 0xd0d8
    b852:	ee07 0a90 	vmov	s15, r0
    b856:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b85a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b85e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b862:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBR_setResonance(&FXVZfilterBR[v][string], scaleFilterResonance(value));
    b86a:	f001 bdd1 	b.w	d410 <__tVZFilterBR_setResonance_veneer>
    b86e:	bf00      	nop
    b870:	f3af 8000 	nop.w
    b874:	f3af 8000 	nop.w
    b878:	f3af 8000 	nop.w
    b87c:	f3af 8000 	nop.w

0000b880 <FXLadderParam3>:


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
    b880:	b538      	push	{r3, r4, r5, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], scaleFilterResonance(value));
    b882:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
{
    b886:	4605      	mov	r5, r0
    b888:	460c      	mov	r4, r1
	tLadderFilter_setQ(&FXLadderfilter[v][string], scaleFilterResonance(value));
    b88a:	f7f6 faf9 	bl	1e80 <scaleFilterResonance>
    b88e:	f24d 0398 	movw	r3, #53400	; 0xd098
    b892:	ee07 0a90 	vmov	s15, r0
    b896:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    b89a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    b89e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    b8a2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
}
    b8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], scaleFilterResonance(value));
    b8aa:	f001 bd41 	b.w	d330 <__tLadderFilter_setQ_veneer>
    b8ae:	bf00      	nop
    b8b0:	f3af 8000 	nop.w
    b8b4:	f3af 8000 	nop.w
    b8b8:	f3af 8000 	nop.w
    b8bc:	f3af 8000 	nop.w

0000b8c0 <noiseSetTilt>:
/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
	//tTiltFilter_setTilt(&noiseTilt[string], dbToATableLookup(((value * 30.0f) - 15.0f)));
	tTiltFilter_setTilt(&noiseTilt[string], value*10.0f - 5.0f);
    b8c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    b8c4:	f24d 6090 	movw	r0, #54928	; 0xd690
    b8c8:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
    b8cc:	f2c2 0001 	movt	r0, #8193	; 0x2001
    b8d0:	eee0 7a07 	vfma.f32	s15, s0, s14
    b8d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b8d8:	eeb0 0a67 	vmov.f32	s0, s15
    b8dc:	f001 bcc8 	b.w	d270 <__tTiltFilter_setTilt_veneer>

0000b8e0 <noiseSetGain>:
}


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    b8e0:	2300      	movs	r3, #0
    b8e2:	eebb 7a01 	vmov.f32	s14, #177	; 0xc1880000 -17.0
    b8e6:	f2c4 2308 	movt	r3, #16904	; 0x4208
    b8ea:	ee07 3a90 	vmov	s15, r3
    b8ee:	eea0 7a27 	vfma.f32	s14, s0, s15
{
    b8f2:	b510      	push	{r4, lr}
    b8f4:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    b8f6:	eeb0 0a47 	vmov.f32	s0, s14
    b8fa:	f001 fdf5 	bl	d4e8 <__dbToATableLookup_veneer>
    b8fe:	f24d 6074 	movw	r0, #54900	; 0xd674
    b902:	f2c2 0001 	movt	r0, #8193	; 0x2001
    b906:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    b90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    b90e:	f001 bc4f 	b.w	d1b0 <__tVZFilterBell_setGain_veneer>
    b912:	bf00      	nop
    b914:	f3af 8000 	nop.w
    b918:	f3af 8000 	nop.w
    b91c:	f3af 8000 	nop.w

0000b920 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    b920:	2000      	movs	r0, #0
    x = 1.0f + (x * 0.00390625f);
    b922:	f649 0220 	movw	r2, #38944	; 0x9820
    b926:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    b92a:	4603      	mov	r3, r0
    b92c:	f2c4 209a 	movt	r0, #17050	; 0x429a
    b930:	f6c3 126c 	movt	r2, #14700	; 0x396c
    b934:	f2c4 2328 	movt	r3, #16936	; 0x4228
    b938:	ee06 0a10 	vmov	s12, r0
    b93c:	ee06 2a90 	vmov	s13, r2
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    b940:	f24d 6074 	movw	r0, #54900	; 0xd674
	value = (value * 77.0f) + 42.0f;
    b944:	ee07 3a10 	vmov	s14, r3
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

inline Lfloat faster_mtof(Lfloat f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
    b948:	f24d 0313 	movw	r3, #53267	; 0xd013
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    b94c:	f2c2 0001 	movt	r0, #8193	; 0x2001
	value = (value * 77.0f) + 42.0f;
    b950:	eea0 7a06 	vfma.f32	s14, s0, s12
    b954:	f2c4 1302 	movt	r3, #16642	; 0x4102
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    b958:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b95c:	ee00 3a10 	vmov	s0, r3
    x = 1.0f + (x * 0.00390625f);
    b960:	eee7 7a26 	vfma.f32	s15, s14, s13
    x *= x; x *= x; x *= x; x *= x;
    b964:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b968:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b96c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b970:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
    b974:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b978:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b97c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
    b980:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b984:	ee27 0a80 	vmul.f32	s0, s15, s0
    b988:	f001 bd8a 	b.w	d4a0 <__tVZFilterBell_setFreq_veneer>
    b98c:	f3af 8000 	nop.w
    b990:	f3af 8000 	nop.w
    b994:	f3af 8000 	nop.w
    b998:	f3af 8000 	nop.w
    b99c:	f3af 8000 	nop.w

0000b9a0 <noise_tick>:

}


void __ATTR_ITCMRAM noise_tick(int string)
{
    b9a0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9a2:	f24d 71d0 	movw	r1, #55248	; 0xd7d0
	float enabled = params[Noise].realVal[string];
    b9a6:	f249 331c 	movw	r3, #37660	; 0x931c
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9aa:	f24a 42c8 	movw	r2, #42184	; 0xa4c8
{
    b9ae:	4604      	mov	r4, r0
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9b0:	f2c2 0101 	movt	r1, #8193	; 0x2001
	float enabled = params[Noise].realVal[string];
    b9b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9b8:	f2c2 0201 	movt	r2, #8193	; 0x2001
    b9bc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
	float enabled = params[Noise].realVal[string];
    b9c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
{
    b9c8:	ed2d 8b04 	vpush	{d8-d9}
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9cc:	780d      	ldrb	r5, [r1, #0]
	float enabled = params[Noise].realVal[string];
    b9ce:	ed90 9a80 	vldr	s18, [r0, #512]	; 0x200
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9d2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
	float filterSend = params[NoiseFilterSend].realVal[string];
    b9d6:	ed90 8aa3 	vldr	s16, [r0, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
    b9da:	edd0 8a9c 	vldr	s17, [r0, #624]	; 0x270
	sample = tTiltFilter_tick(&noiseTilt[string], sample);
    b9de:	f24d 6090 	movw	r0, #54928	; 0xd690
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9e2:	ed92 7a00 	vldr	s14, [r2]
    b9e6:	3501      	adds	r5, #1
	sample = tTiltFilter_tick(&noiseTilt[string], sample);
    b9e8:	f2c2 0001 	movt	r0, #8193	; 0x2001
    b9ec:	eea7 0a27 	vfma.f32	s0, s14, s15
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    b9f0:	700d      	strb	r5, [r1, #0]
	sample = tTiltFilter_tick(&noiseTilt[string], sample);
    b9f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    b9f6:	f001 fe87 	bl	d708 <__tTiltFilter_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    b9fa:	f24d 6074 	movw	r0, #54900	; 0xd674
    b9fe:	00a5      	lsls	r5, r4, #2
    ba00:	f2c2 0001 	movt	r0, #8193	; 0x2001
    ba04:	4428      	add	r0, r5
    ba06:	f001 fe97 	bl	d738 <__tVZFilterBell_tick_veneer>
	amp = amp < 0.f ? 0.f : amp;
    ba0a:	2300      	movs	r3, #0
	if (!isfinite(sample))
	{
		nanChuckTest++;
		sample = 0.0f;
	}
	float normSample = (sample + 1.f) * 0.5f;
    ba0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    ba10:	f64d 0280 	movw	r2, #55424	; 0xd880
	amp = amp < 0.f ? 0.f : amp;
    ba14:	ee06 3a90 	vmov	s13, r3
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba18:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    ba1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba20:	f24d 6380 	movw	r3, #54912	; 0xd680
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    ba24:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    ba28:	fec8 8aa6 	vmaxnm.f32	s17, s17, s13
	sample = sample * amp;
    ba2c:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba30:	f2c2 0301 	movt	r3, #8193	; 0x2001
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    ba34:	f2c2 0201 	movt	r2, #8193	; 0x2001
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    ba38:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba3c:	441d      	add	r5, r3
	float normSample = (sample + 1.f) * 0.5f;
    ba3e:	ee70 7a27 	vadd.f32	s15, s0, s15
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    ba42:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba46:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    ba4a:	ee28 8a00 	vmul.f32	s16, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    ba4e:	ee67 7a86 	vmul.f32	s15, s15, s12
	noiseOuts[0][string] = sample * filterSend *  enabled;
    ba52:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    ba56:	ed85 8a02 	vstr	s16, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    ba5a:	edc2 7a06 	vstr	s15, [r2, #24]
}
    ba5e:	ecbd 8b04 	vpop	{d8-d9}
    ba62:	bd38      	pop	{r3, r4, r5, pc}
    ba64:	f3af 8000 	nop.w
    ba68:	f3af 8000 	nop.w
    ba6c:	f3af 8000 	nop.w
    ba70:	f3af 8000 	nop.w
    ba74:	f3af 8000 	nop.w
    ba78:	f3af 8000 	nop.w
    ba7c:	f3af 8000 	nop.w

0000ba80 <audioTickSynth>:
{
    ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    ba84:	f24d 2130 	movw	r1, #53808	; 0xd230
	uint32_t tempCountTick = DWT->CYCCNT;
    ba88:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    ba8c:	f64b 6277 	movw	r2, #48759	; 0xbe77
    ba90:	f241 236f 	movw	r3, #4719	; 0x126f
    ba94:	f2c2 0101 	movt	r1, #8193	; 0x2001
	uint32_t tempCountTick = DWT->CYCCNT;
    ba98:	f2ce 0500 	movt	r5, #57344	; 0xe000
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    ba9c:	f6c3 727f 	movt	r2, #16255	; 0x3f7f
    baa0:	f6c3 2383 	movt	r3, #14979	; 0x3a83
{
    baa4:	ed2d 8b08 	vpush	{d8-d11}
    baa8:	b0a9      	sub	sp, #164	; 0xa4
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    baaa:	ee07 2a10 	vmov	s14, r2
    baae:	ee07 3a90 	vmov	s15, r3
{
    bab2:	af00      	add	r7, sp, #0
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    bab4:	60b9      	str	r1, [r7, #8]
	uint32_t tempCountTick = DWT->CYCCNT;
    bab6:	6868      	ldr	r0, [r5, #4]
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    bab8:	edd1 6a00 	vldr	s13, [r1]
	uint32_t tempCountTick = DWT->CYCCNT;
    babc:	60f8      	str	r0, [r7, #12]
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    babe:	eee6 7a87 	vfma.f32	s15, s13, s14
    bac2:	edc1 7a00 	vstr	s15, [r1]
	uint32_t tempCountMap = DWT->CYCCNT;
    bac6:	686c      	ldr	r4, [r5, #4]
	tickMappings();
    bac8:	f7fe f88a 	bl	9be0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    bacc:	686a      	ldr	r2, [r5, #4]
    bace:	f64d 13c8 	movw	r3, #55752	; 0xd9c8
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    bad2:	f244 2058 	movw	r0, #16984	; 0x4258
	timeMap = DWT->CYCCNT - tempCountMap;
    bad6:	1b12      	subs	r2, r2, r4
		if (knobTicked[i])
    bad8:	f246 6410 	movw	r4, #26128	; 0x6610
	timeMap = DWT->CYCCNT - tempCountMap;
    badc:	f2c2 0301 	movt	r3, #8193	; 0x2001
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    bae0:	f2c2 0001 	movt	r0, #8193	; 0x2001
		if (knobTicked[i])
    bae4:	f2c2 0401 	movt	r4, #8193	; 0x2001
	timeMap = DWT->CYCCNT - tempCountMap;
    bae8:	601a      	str	r2, [r3, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    baea:	686d      	ldr	r5, [r5, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    baec:	f001 fbf0 	bl	d2d0 <__tExpSmooth_tick_veneer>
		if (knobTicked[i])
    baf0:	6823      	ldr	r3, [r4, #0]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    baf2:	eeb0 9a40 	vmov.f32	s18, s0
		if (knobTicked[i])
    baf6:	2b00      	cmp	r3, #0
    baf8:	f040 85e3 	bne.w	c6c2 <audioTickSynth+0xc42>
    bafc:	f240 6394 	movw	r3, #1684	; 0x694
    bb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    bb08:	6863      	ldr	r3, [r4, #4]
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	f040 85fd 	bne.w	c70a <audioTickSynth+0xc8a>
    bb10:	68a3      	ldr	r3, [r4, #8]
    bb12:	2b00      	cmp	r3, #0
    bb14:	f040 8372 	bne.w	c1fc <audioTickSynth+0x77c>
    bb18:	68e3      	ldr	r3, [r4, #12]
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	f040 838e 	bne.w	c23c <audioTickSynth+0x7bc>
    bb20:	6923      	ldr	r3, [r4, #16]
    bb22:	2b00      	cmp	r3, #0
    bb24:	f040 83aa 	bne.w	c27c <audioTickSynth+0x7fc>
    bb28:	6963      	ldr	r3, [r4, #20]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	f040 83c6 	bne.w	c2bc <audioTickSynth+0x83c>
    bb30:	69a3      	ldr	r3, [r4, #24]
    bb32:	2b00      	cmp	r3, #0
    bb34:	f040 83e2 	bne.w	c2fc <audioTickSynth+0x87c>
    bb38:	69e3      	ldr	r3, [r4, #28]
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	f040 83fe 	bne.w	c33c <audioTickSynth+0x8bc>
    bb40:	6a23      	ldr	r3, [r4, #32]
    bb42:	2b00      	cmp	r3, #0
    bb44:	f040 841a 	bne.w	c37c <audioTickSynth+0x8fc>
    bb48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	f040 8436 	bne.w	c3bc <audioTickSynth+0x93c>
    bb50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bb52:	2b00      	cmp	r3, #0
    bb54:	f040 8452 	bne.w	c3fc <audioTickSynth+0x97c>
    bb58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	f040 846e 	bne.w	c43c <audioTickSynth+0x9bc>
		if (pedalTicked[i])
    bb60:	f24a 4430 	movw	r4, #42032	; 0xa430
    bb64:	f2c2 0401 	movt	r4, #8193	; 0x2001
    bb68:	6823      	ldr	r3, [r4, #0]
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	f040 8485 	bne.w	c47a <audioTickSynth+0x9fa>
    bb70:	6863      	ldr	r3, [r4, #4]
    bb72:	2b00      	cmp	r3, #0
    bb74:	f040 84a1 	bne.w	c4ba <audioTickSynth+0xa3a>
    bb78:	68a3      	ldr	r3, [r4, #8]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	f040 84bd 	bne.w	c4fa <audioTickSynth+0xa7a>
    bb80:	68e3      	ldr	r3, [r4, #12]
    bb82:	2b00      	cmp	r3, #0
    bb84:	f040 84d9 	bne.w	c53a <audioTickSynth+0xaba>
    bb88:	6923      	ldr	r3, [r4, #16]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	f040 84f5 	bne.w	c57a <audioTickSynth+0xafa>
    bb90:	6963      	ldr	r3, [r4, #20]
    bb92:	2b00      	cmp	r3, #0
    bb94:	f040 8511 	bne.w	c5ba <audioTickSynth+0xb3a>
    bb98:	69a3      	ldr	r3, [r4, #24]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	f040 852d 	bne.w	c5fa <audioTickSynth+0xb7a>
    bba0:	69e3      	ldr	r3, [r4, #28]
    bba2:	2b00      	cmp	r3, #0
    bba4:	f040 8549 	bne.w	c63a <audioTickSynth+0xbba>
    bba8:	6a23      	ldr	r3, [r4, #32]
    bbaa:	2b00      	cmp	r3, #0
    bbac:	f040 8565 	bne.w	c67a <audioTickSynth+0xbfa>
    bbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	f040 85c7 	bne.w	c746 <audioTickSynth+0xcc6>
	for (int v = 0; v < numStringsThisBoard; v++)
    bbb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bbbc:	781a      	ldrb	r2, [r3, #0]
    bbbe:	2a00      	cmp	r2, #0
    bbc0:	f000 827c 	beq.w	c0bc <audioTickSynth+0x63c>
    bbc4:	f64d 0380 	movw	r3, #55424	; 0xd880
    bbc8:	f2c2 0301 	movt	r3, #8193	; 0x2001
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    bbcc:	f244 2150 	movw	r1, #16976	; 0x4250
	for (int v = 0; v < numStringsThisBoard; v++)
    bbd0:	2a01      	cmp	r2, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    bbd2:	f2c2 0101 	movt	r1, #8193	; 0x2001
    bbd6:	6809      	ldr	r1, [r1, #0]
    bbd8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    bbdc:	dd01      	ble.n	bbe2 <audioTickSynth+0x162>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    bbde:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	float note[numStringsThisBoard];
    bbe2:	0093      	lsls	r3, r2, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    bbe4:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	float note[numStringsThisBoard];
    bbe8:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    bbea:	f2ce 0a00 	movt	sl, #57344	; 0xe000
	float note[numStringsThisBoard];
    bbee:	f023 0307 	bic.w	r3, r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    bbf2:	f8da 2004 	ldr.w	r2, [sl, #4]
	float note[numStringsThisBoard];
    bbf6:	ebad 0d03 	sub.w	sp, sp, r3
    bbfa:	f24d 2328 	movw	r3, #53800	; 0xd228
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    bbfe:	1b52      	subs	r2, r2, r5
    bc00:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    bc08:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
    bc0c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc10:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    bc12:	f244 221c 	movw	r2, #16924	; 0x421c
    bc16:	f8da 3004 	ldr.w	r3, [sl, #4]
    bc1a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc1e:	613b      	str	r3, [r7, #16]
    bc20:	2300      	movs	r3, #0
    bc22:	643a      	str	r2, [r7, #64]	; 0x40
    bc24:	f244 2224 	movw	r2, #16932	; 0x4224
    bc28:	ee08 3a90 	vmov	s17, r3
    bc2c:	ee0a 3a90 	vmov	s21, r3
    bc30:	f2c2 0201 	movt	r2, #8193	; 0x2001
			float sample = 0.0f;
    bc34:	ee09 3a90 	vmov	s19, r3
    bc38:	f2c4 23fe 	movt	r3, #17150	; 0x42fe
    bc3c:	623a      	str	r2, [r7, #32]
    bc3e:	f64d 12e8 	movw	r2, #55784	; 0xd9e8
    bc42:	ee0a 3a10 	vmov	s20, r3
    bc46:	f24d 6380 	movw	r3, #54912	; 0xd680
    bc4a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc52:	61ba      	str	r2, [r7, #24]
    bc54:	f249 3204 	movw	r2, #37636	; 0x9304
    bc58:	67bb      	str	r3, [r7, #120]	; 0x78
    bc5a:	f24d 3338 	movw	r3, #54072	; 0xd338
    bc5e:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc62:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc66:	627a      	str	r2, [r7, #36]	; 0x24
    bc68:	f249 3200 	movw	r2, #37632	; 0x9300
    bc6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    bc70:	f24d 63a4 	movw	r3, #54948	; 0xd6a4
    bc74:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc78:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bc7c:	64ba      	str	r2, [r7, #72]	; 0x48
    bc7e:	f64d 12c0 	movw	r2, #55744	; 0xd9c0
    bc82:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t tempPerStringTick = DWT->CYCCNT;
    bc84:	2300      	movs	r3, #0
    bc86:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc8a:	469b      	mov	fp, r3
    bc8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    bc90:	633a      	str	r2, [r7, #48]	; 0x30
    bc92:	f24d 3234 	movw	r2, #54068	; 0xd334
    bc96:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bc9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    bc9e:	f64d 12b8 	movw	r2, #55736	; 0xd9b8
    bca2:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bca6:	62fa      	str	r2, [r7, #44]	; 0x2c
    bca8:	f64d 12c4 	movw	r2, #55748	; 0xd9c4
    bcac:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bcb0:	62ba      	str	r2, [r7, #40]	; 0x28
    bcb2:	f64d 12d4 	movw	r2, #55764	; 0xd9d4
    bcb6:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bcba:	667a      	str	r2, [r7, #100]	; 0x64
    bcbc:	f24d 627c 	movw	r2, #54908	; 0xd67c
    bcc0:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bcc4:	663a      	str	r2, [r7, #96]	; 0x60
    bcc6:	f64d 12cc 	movw	r2, #55756	; 0xd9cc
    bcca:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bcce:	65fa      	str	r2, [r7, #92]	; 0x5c
    bcd0:	f640 02e4 	movw	r2, #2276	; 0x8e4
    bcd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcd8:	647a      	str	r2, [r7, #68]	; 0x44
    bcda:	f64d 12bc 	movw	r2, #55740	; 0xd9bc
    bcde:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bce2:	65ba      	str	r2, [r7, #88]	; 0x58
    bce4:	f246 620d 	movw	r2, #26125	; 0x660d
    bce8:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bcec:	673a      	str	r2, [r7, #112]	; 0x70
    bcee:	f640 02e8 	movw	r2, #2280	; 0x8e8
    bcf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcf6:	657a      	str	r2, [r7, #84]	; 0x54
    bcf8:	f24d 32c8 	movw	r2, #54216	; 0xd3c8
    bcfc:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd00:	63fa      	str	r2, [r7, #60]	; 0x3c
    bd02:	f24d 32e8 	movw	r2, #54248	; 0xd3e8
    bd06:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd0a:	63ba      	str	r2, [r7, #56]	; 0x38
    bd0c:	f64d 12d0 	movw	r2, #55760	; 0xd9d0
    bd10:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd14:	653a      	str	r2, [r7, #80]	; 0x50
    bd16:	f24d 32a0 	movw	r2, #54176	; 0xd3a0
    bd1a:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd1e:	64fa      	str	r2, [r7, #76]	; 0x4c
    bd20:	f24d 32a8 	movw	r2, #54184	; 0xd3a8
    bd24:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd28:	61fa      	str	r2, [r7, #28]
    bd2a:	f240 6290 	movw	r2, #1680	; 0x690
    bd2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd32:	637a      	str	r2, [r7, #52]	; 0x34
					sample = effectTick[i](sample, i, v); //run the effect
    bd34:	f24d 3224 	movw	r2, #54052	; 0xd324
    bd38:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd3c:	617a      	str	r2, [r7, #20]
    bd3e:	f64d 1208 	movw	r2, #55560	; 0xd908
    bd42:	f2c2 0201 	movt	r2, #8193	; 0x2001
    bd46:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
    bd4a:	f8c7 d074 	str.w	sp, [r7, #116]	; 0x74
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    bd4e:	69bb      	ldr	r3, [r7, #24]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    bd50:	f8da 2004 	ldr.w	r2, [sl, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    bd54:	edd3 6a00 	vldr	s13, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    bd5a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    bd5e:	edd3 7a00 	vldr	s15, [r3]
    bd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd64:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    bd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bd6a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
    bd6e:	ed93 8a00 	vldr	s16, [r3]
    bd72:	6a3b      	ldr	r3, [r7, #32]
    bd74:	ee38 8a26 	vadd.f32	s16, s16, s13
    bd78:	440b      	add	r3, r1
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    bd7a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    bd7e:	edd3 6a00 	vldr	s13, [r3]
    bd82:	460e      	mov	r6, r1
    bd84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bd86:	ee38 8a26 	vadd.f32	s16, s16, s13
    bd8a:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    bd8e:	fe88 8a2a 	vmaxnm.f32	s16, s16, s21
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    bd92:	ee78 7a67 	vsub.f32	s15, s16, s15
    bd96:	eca3 8a01 	vstmia	r3!, {s16}
    bd9a:	677b      	str	r3, [r7, #116]	; 0x74
    bd9c:	ee67 7a87 	vmul.f32	s15, s15, s14
    bda0:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    bda4:	f8da 3004 	ldr.w	r3, [sl, #4]
    bda8:	1a9b      	subs	r3, r3, r2
    bdaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    bdac:	6013      	str	r3, [r2, #0]
    bdae:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    bdb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    bdb4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
    bdb8:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    bdba:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (envOn[v])
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	f040 81b2 	bne.w	c128 <audioTickSynth+0x6a8>
    bdc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    bdc8:	785b      	ldrb	r3, [r3, #1]
    bdca:	2b00      	cmp	r3, #0
    bdcc:	f040 81a1 	bne.w	c112 <audioTickSynth+0x692>
    bdd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    bdd4:	789b      	ldrb	r3, [r3, #2]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	f040 8190 	bne.w	c0fc <audioTickSynth+0x67c>
    bddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    bde0:	78db      	ldrb	r3, [r3, #3]
    bde2:	2b00      	cmp	r3, #0
    bde4:	f040 817f 	bne.w	c0e6 <audioTickSynth+0x666>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    bde8:	f8da 3004 	ldr.w	r3, [sl, #4]
    bdec:	f24d 4938 	movw	r9, #54328	; 0xd438
    bdf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bdf2:	f24d 459c 	movw	r5, #54428	; 0xd49c
    bdf6:	1b1b      	subs	r3, r3, r4
    bdf8:	f2c2 0901 	movt	r9, #8193	; 0x2001
    bdfc:	3e88      	subs	r6, #136	; 0x88
    bdfe:	f2c2 0501 	movt	r5, #8193	; 0x2001
    be02:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    be04:	464c      	mov	r4, r9
    be06:	f8da 8004 	ldr.w	r8, [sl, #4]
			float sample = 0.0f;
    be0a:	eba4 0109 	sub.w	r1, r4, r9
		if (lfoOn[i])
    be0e:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    be12:	465a      	mov	r2, fp
    be14:	f107 0098 	add.w	r0, r7, #152	; 0x98
		if (lfoOn[i])
    be18:	b13b      	cbz	r3, be2a <audioTickSynth+0x3aa>
			lfoShapeTick[i](&sample,i, string);
    be1a:	682b      	ldr	r3, [r5, #0]
			float sample = 0.0f;
    be1c:	edc7 9a26 	vstr	s19, [r7, #152]	; 0x98
			lfoShapeTick[i](&sample,i, string);
    be20:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    be22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    be26:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    be2a:	f24d 433c 	movw	r3, #54332	; 0xd43c
    be2e:	3504      	adds	r5, #4
    be30:	3608      	adds	r6, #8
    be32:	f2c2 0301 	movt	r3, #8193	; 0x2001
    be36:	429c      	cmp	r4, r3
    be38:	d1e7      	bne.n	be0a <audioTickSynth+0x38a>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    be3a:	f8da 3004 	ldr.w	r3, [sl, #4]
		oscillator_tick(note[v], v);
    be3e:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
		oscillator_tick(note[v], v);
    be44:	4658      	mov	r0, fp
		timeLFO = DWT->CYCCNT - tempCountLFO;
    be46:	eba3 0308 	sub.w	r3, r3, r8
    be4a:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    be4c:	f8da 4004 	ldr.w	r4, [sl, #4]
		oscillator_tick(note[v], v);
    be50:	f7fc fde6 	bl	8a20 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    be54:	f8da 3004 	ldr.w	r3, [sl, #4]
    be58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    be5a:	1b1b      	subs	r3, r3, r4
    be5c:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    be5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		uint32_t tempCountNoise = DWT->CYCCNT;
    be60:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (noiseOn)
    be64:	781b      	ldrb	r3, [r3, #0]
    be66:	2b00      	cmp	r3, #0
    be68:	f040 8139 	bne.w	c0de <audioTickSynth+0x65e>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    be6c:	f8da 3004 	ldr.w	r3, [sl, #4]
    be70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    be72:	1b1b      	subs	r3, r3, r4
    be74:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    be76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	2b00      	cmp	r3, #0
    be7c:	f000 81b8 	beq.w	c1f0 <audioTickSynth+0x770>
			filterSamps[0] += oscOuts[0][i][v];
    be80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
		for (int i = 0; i < oscToTick; i++)
    be82:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    be84:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    be88:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    be8c:	d011      	beq.n	beb2 <audioTickSynth+0x432>
			filterSamps[0] += oscOuts[0][i][v];
    be8e:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    be92:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    be94:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    be98:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    be9c:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    bea0:	d007      	beq.n	beb2 <audioTickSynth+0x432>
			filterSamps[0] += oscOuts[0][i][v];
    bea2:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    bea6:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    beaa:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    beae:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    beb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
		sample = filter_tick(&filterSamps[0], note[v], v);
    beb4:	eeb0 0a48 	vmov.f32	s0, s16
    beb8:	4659      	mov	r1, fp
    beba:	f107 0098 	add.w	r0, r7, #152	; 0x98
		filterSamps[0] += noiseOuts[0][v];
    bebe:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    bec2:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    bec6:	ee76 6a86 	vadd.f32	s13, s13, s12
    beca:	67bb      	str	r3, [r7, #120]	; 0x78
		filterSamps[1] += noiseOuts[1][v];
    becc:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    bed0:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
		filterSamps[1] += noiseOuts[1][v];
    bed4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		uint32_t tempCountFilt = DWT->CYCCNT;
    bed8:	f8da 4004 	ldr.w	r4, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    bedc:	f7fd f8b0 	bl	9040 <filter_tick>
		timeFilt = DWT->CYCCNT - tempCountFilt;
    bee0:	f8da 3004 	ldr.w	r3, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    bee4:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    bee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    beea:	1b1b      	subs	r3, r3, r4
    beec:	6013      	str	r3, [r2, #0]
		if (fxPre)
    beee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    bef0:	781b      	ldrb	r3, [r3, #0]
    bef2:	b12b      	cbz	r3, bf00 <audioTickSynth+0x480>
			sample *= amplitude[v];
    bef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    bef8:	edd3 7a00 	vldr	s15, [r3]
    befc:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
    bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    bf02:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
		if (overSampled)
    bf06:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    bf08:	f8da 3004 	ldr.w	r3, [sl, #4]
    bf0c:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (overSampled)
    bf0e:	2c00      	cmp	r4, #0
    bf10:	f040 8113 	bne.w	c13a <audioTickSynth+0x6ba>
    bf14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    bf16:	f244 48e0 	movw	r8, #17632	; 0x44e0
    bf1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    bf1e:	f2c2 0801 	movt	r8, #8193	; 0x2001
    bf22:	f8d7 9014 	ldr.w	r9, [r7, #20]
    bf26:	18d6      	adds	r6, r2, r3
    bf28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    bf2a:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    bf2c:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    bf30:	eeb0 0a48 	vmov.f32	s0, s16
    bf34:	4620      	mov	r0, r4
    bf36:	4659      	mov	r1, fp
				if (effectsActive[i])
    bf38:	b173      	cbz	r3, bf58 <audioTickSynth+0x4d8>
					sample = effectTick[i](sample, i, v); //run the effect
    bf3a:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
    bf3e:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    bf40:	ed96 7a00 	vldr	s14, [r6]
					sample *= fxPostGain[i][v];
    bf44:	edd5 6a00 	vldr	s13, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    bf48:	ee67 7a00 	vmul.f32	s15, s14, s0
    bf4c:	ee3b 7a47 	vsub.f32	s14, s22, s14
    bf50:	eee7 7a08 	vfma.f32	s15, s14, s16
					sample *= fxPostGain[i][v];
    bf54:	ee27 8aa6 	vmul.f32	s16, s15, s13
			for (int i = 0; i < NUM_EFFECT; i++)
    bf58:	3401      	adds	r4, #1
    bf5a:	3608      	adds	r6, #8
    bf5c:	3508      	adds	r5, #8
    bf5e:	2c04      	cmp	r4, #4
    bf60:	d1e4      	bne.n	bf2c <audioTickSynth+0x4ac>
		timeOS = DWT->CYCCNT - tempCountOS;
    bf62:	f8da 3004 	ldr.w	r3, [sl, #4]
    bf66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    bf68:	1a9b      	subs	r3, r3, r2
    bf6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    bf6c:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    bf6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	b92b      	cbnz	r3, bf80 <audioTickSynth+0x500>
			sample *= amplitude[v];
    bf74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    bf78:	edd3 7a00 	vldr	s15, [r3]
    bf7c:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    bf80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		sample = tSVF_LP_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    bf84:	eeb0 0a48 	vmov.f32	s0, s16
    bf88:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
	for (int v = 0; v < numStringsThisBoard; v++)
    bf8c:	f10b 0b01 	add.w	fp, fp, #1
    bf90:	3304      	adds	r3, #4
    bf92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    bf96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    bf9a:	3304      	adds	r3, #4
    bf9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    bfa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfa2:	3304      	adds	r3, #4
    bfa4:	67fb      	str	r3, [r7, #124]	; 0x7c
		sample = tSVF_LP_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bfa8:	1918      	adds	r0, r3, r4
    bfaa:	f001 fa85 	bl	d4b8 <__tSVF_LP_tick_veneer>
		masterSample += sample * finalMaster[v];
    bfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bfb0:	ed93 7a00 	vldr	s14, [r3]
    bfb4:	69fb      	ldr	r3, [r7, #28]
    bfb6:	4423      	add	r3, r4
    bfb8:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    bfbc:	1d23      	adds	r3, r4, #4
    bfbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		masterSample += sample * finalMaster[v];
    bfc2:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    bfc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bfca:	781b      	ldrb	r3, [r3, #0]
		masterSample += sample * finalMaster[v];
    bfcc:	eee0 8a27 	vfma.f32	s17, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    bfd0:	455b      	cmp	r3, fp
    bfd2:	f73f aebc 	bgt.w	bd4e <audioTickSynth+0x2ce>
	uint32_t tempVolumePoly = DWT->CYCCNT;
    bfd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    bfda:	f2ce 0300 	movt	r3, #57344	; 0xe000
    bfde:	685d      	ldr	r5, [r3, #4]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    bfe0:	685a      	ldr	r2, [r3, #4]
    bfe2:	693b      	ldr	r3, [r7, #16]
    bfe4:	1ad2      	subs	r2, r2, r3
	if (pedalControlsMaster)
    bfe6:	f24a 432c 	movw	r3, #42028	; 0xa42c
    bfea:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bfee:	7819      	ldrb	r1, [r3, #0]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    bff0:	f64d 13d8 	movw	r3, #55768	; 0xd9d8
    bff4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    bff8:	601a      	str	r2, [r3, #0]
	if (pedalControlsMaster)
    bffa:	b369      	cbz	r1, c058 <audioTickSynth+0x5d8>
    bffc:	f64a 410b 	movw	r1, #44043	; 0xac0b
    c000:	f244 2313 	movw	r3, #16915	; 0x4213
    c004:	f64b 620a 	movw	r2, #48650	; 0xbe0a
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    c008:	ee29 5a09 	vmul.f32	s10, s18, s18
    c00c:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    c010:	f6c3 61f1 	movt	r1, #16113	; 0x3ef1
    c014:	f2c4 0222 	movt	r2, #16418	; 0x4022
    c018:	ee07 1a10 	vmov	s14, r1
    c01c:	ee07 3a90 	vmov	s15, r3
    c020:	ee06 2a10 	vmov	s12, r2
    c024:	f24a 2285 	movw	r2, #41605	; 0xa285
    c028:	eee9 7a07 	vfma.f32	s15, s18, s14
    c02c:	f246 3313 	movw	r3, #25363	; 0x6313
    c030:	f2c4 02ca 	movt	r2, #16586	; 0x40ca
    c034:	ee65 5a09 	vmul.f32	s11, s10, s18
    c038:	f2c4 0351 	movt	r3, #16465	; 0x4051
    c03c:	ee06 2a90 	vmov	s13, r2
    c040:	ee07 3a10 	vmov	s14, r3
    c044:	eee5 7a46 	vfms.f32	s15, s10, s12
    c048:	ee29 7a07 	vmul.f32	s14, s18, s14
    c04c:	eee5 7aa6 	vfma.f32	s15, s11, s13
    c050:	eee5 7ac7 	vfms.f32	s15, s11, s14
		masterSample *= outVol;
    c054:	ee68 8aa7 	vmul.f32	s17, s17, s15
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    c058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c05c:	f64d 13e4 	movw	r3, #55780	; 0xd9e4
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c060:	f240 60a0 	movw	r0, #1696	; 0x6a0
	timeTick = DWT->CYCCNT - tempCountTick;
    c064:	f64d 12e0 	movw	r2, #55776	; 0xd9e0
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    c068:	f2ce 0100 	movt	r1, #57344	; 0xe000
    c06c:	f2c2 0301 	movt	r3, #8193	; 0x2001
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c070:	f2c2 0000 	movt	r0, #8192	; 0x2000
	timeTick = DWT->CYCCNT - tempCountTick;
    c074:	f2c2 0201 	movt	r2, #8193	; 0x2001
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    c078:	684c      	ldr	r4, [r1, #4]
    c07a:	1b64      	subs	r4, r4, r5
    c07c:	601c      	str	r4, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c07e:	f24e 1348 	movw	r3, #57672	; 0xe148
	timeTick = DWT->CYCCNT - tempCountTick;
    c082:	6849      	ldr	r1, [r1, #4]
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c084:	ed90 0a00 	vldr	s0, [r0]
    c088:	f6c3 737a 	movt	r3, #16250	; 0x3f7a
    c08c:	68b8      	ldr	r0, [r7, #8]
    c08e:	edd0 7a00 	vldr	s15, [r0]
	timeTick = DWT->CYCCNT - tempCountTick;
    c092:	68f8      	ldr	r0, [r7, #12]
}
    c094:	37a4      	adds	r7, #164	; 0xa4
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c096:	ee20 0a27 	vmul.f32	s0, s0, s15
    c09a:	ee07 3a90 	vmov	s15, r3
	timeTick = DWT->CYCCNT - tempCountTick;
    c09e:	1a09      	subs	r1, r1, r0
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c0a0:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    c0a4:	6011      	str	r1, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    c0a6:	ee20 0a28 	vmul.f32	s0, s0, s17
}
    c0aa:	46bd      	mov	sp, r7
    c0ac:	ecbd 8b08 	vpop	{d8-d11}
    c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pedalTicked[i])
    c0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	f040 8349 	bne.w	c74e <audioTickSynth+0xcce>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    c0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	float masterSample = 0.0f;
    c0c0:	2100      	movs	r1, #0
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    c0c2:	f64d 12dc 	movw	r2, #55772	; 0xd9dc
    c0c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
	float masterSample = 0.0f;
    c0ca:	ee08 1a90 	vmov	s17, r1
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    c0ce:	f2c2 0201 	movt	r2, #8193	; 0x2001
    c0d2:	6859      	ldr	r1, [r3, #4]
    c0d4:	1b49      	subs	r1, r1, r5
    c0d6:	6011      	str	r1, [r2, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    c0d8:	685b      	ldr	r3, [r3, #4]
    c0da:	613b      	str	r3, [r7, #16]
	for (int v = 0; v < numStringsThisBoard; v++)
    c0dc:	e77b      	b.n	bfd6 <audioTickSynth+0x556>
			noise_tick(v);
    c0de:	4658      	mov	r0, fp
    c0e0:	f7ff fc5e 	bl	b9a0 <noise_tick>
    c0e4:	e6c2      	b.n	be6c <audioTickSynth+0x3ec>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    c0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    c0ea:	f103 0018 	add.w	r0, r3, #24
    c0ee:	f001 f8d3 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    c0f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c0f6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    c0fa:	e675      	b.n	bde8 <audioTickSynth+0x368>
    c0fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    c100:	f103 0010 	add.w	r0, r3, #16
    c104:	f001 f8c8 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    c108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c10c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c110:	e664      	b.n	bddc <audioTickSynth+0x35c>
    c112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    c116:	f103 0008 	add.w	r0, r3, #8
    c11a:	f001 f8bd 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    c11e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c122:	ed83 0a07 	vstr	s0, [r3, #28]
    c126:	e653      	b.n	bdd0 <audioTickSynth+0x350>
    c128:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
    c12c:	f001 f8b4 	bl	d298 <__tADSRT_tickNoInterp_veneer>
    c130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c134:	ed83 0a05 	vstr	s0, [r3, #20]
    c138:	e644      	b.n	bdc4 <audioTickSynth+0x344>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    c13a:	f24d 6398 	movw	r3, #54936	; 0xd698
    c13e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    c142:	f244 48e0 	movw	r8, #17632	; 0x44e0
    c146:	f24d 61d4 	movw	r1, #54996	; 0xd6d4
    c14a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c14e:	eeb0 0a48 	vmov.f32	s0, s16
    c152:	f2c2 0801 	movt	r8, #8193	; 0x2001
    c156:	f2c2 0101 	movt	r1, #8193	; 0x2001
    c15a:	1898      	adds	r0, r3, r2
    c15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			for (int i = 0; i < 4; i++)
    c15e:	2400      	movs	r4, #0
    c160:	eb03 0902 	add.w	r9, r3, r2
    c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c166:	ee0b 0a90 	vmov	s23, r0
    c16a:	189e      	adds	r6, r3, r2
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    c16c:	f001 faa4 	bl	d6b8 <__tOversampler_upsample_veneer>
    c170:	4659      	mov	r1, fp
    c172:	f8c7 a004 	str.w	sl, [r7, #4]
    c176:	46b3      	mov	fp, r6
    c178:	46c2      	mov	sl, r8
    c17a:	f8d7 8014 	ldr.w	r8, [r7, #20]
				if (effectsActive[i])
    c17e:	f81a 3b01 	ldrb.w	r3, [sl], #1
    c182:	b9a3      	cbnz	r3, c1ae <audioTickSynth+0x72e>
			for (int i = 0; i < 4; i++)
    c184:	3401      	adds	r4, #1
    c186:	f109 0908 	add.w	r9, r9, #8
    c18a:	f10b 0b08 	add.w	fp, fp, #8
    c18e:	2c04      	cmp	r4, #4
    c190:	d1f5      	bne.n	c17e <audioTickSynth+0x6fe>
    c192:	468b      	mov	fp, r1
			sample = tOversampler_downsample(&os[v], oversamplerArray);
    c194:	f24d 61d4 	movw	r1, #54996	; 0xd6d4
    c198:	ee1b 0a90 	vmov	r0, s23
    c19c:	f8d7 a004 	ldr.w	sl, [r7, #4]
    c1a0:	f2c2 0101 	movt	r1, #8193	; 0x2001
    c1a4:	f001 f860 	bl	d268 <__tOversampler_downsample_veneer>
    c1a8:	eeb0 8a40 	vmov.f32	s16, s0
    c1ac:	e6d9      	b.n	bf62 <audioTickSynth+0x4e2>
    c1ae:	f24d 65d4 	movw	r5, #54996	; 0xd6d4
    c1b2:	f2c2 0501 	movt	r5, #8193	; 0x2001
    c1b6:	f105 0608 	add.w	r6, r5, #8
						float dry = oversamplerArray[j]; //store the dry value to mix later
    c1ba:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](dry, i, v); //run the effect
    c1be:	4620      	mov	r0, r4
    c1c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    c1c4:	eeb0 0a48 	vmov.f32	s0, s16
    c1c8:	66b9      	str	r1, [r7, #104]	; 0x68
    c1ca:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    c1cc:	edd9 7a00 	vldr	s15, [r9]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    c1d0:	ed9b 7a00 	vldr	s14, [fp]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    c1d4:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    c1d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    c1da:	ee7b 7a67 	vsub.f32	s15, s22, s15
    c1de:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    c1e2:	ee67 7a00 	vmul.f32	s15, s14, s0
    c1e6:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    c1ea:	42b5      	cmp	r5, r6
    c1ec:	d1e5      	bne.n	c1ba <audioTickSynth+0x73a>
    c1ee:	e7c9      	b.n	c184 <audioTickSynth+0x704>
		for (int i = 0; i < oscToTick; i++)
    c1f0:	2300      	movs	r3, #0
    c1f2:	ee07 3a90 	vmov	s15, r3
    c1f6:	ee06 3a10 	vmov	s12, r3
    c1fa:	e65a      	b.n	beb2 <audioTickSynth+0x432>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c1fc:	f245 2040 	movw	r0, #21056	; 0x5240
    c200:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c204:	f001 f864 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c208:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c210:	ed83 0a02 	vstr	s0, [r3, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    c214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c218:	781a      	ldrb	r2, [r3, #0]
    c21a:	2a00      	cmp	r2, #0
    c21c:	f43f ac7c 	beq.w	bb18 <audioTickSynth+0x98>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c220:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c224:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c226:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c22a:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
    c22e:	bf18      	it	ne
    c230:	ed83 0a0d 	vstrne	s0, [r3, #52]	; 0x34
		if (knobTicked[i])
    c234:	68e3      	ldr	r3, [r4, #12]
    c236:	2b00      	cmp	r3, #0
    c238:	f43f ac72 	beq.w	bb20 <audioTickSynth+0xa0>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c23c:	f245 2044 	movw	r0, #21060	; 0x5244
    c240:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c244:	f001 f844 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c248:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c250:	ed83 0a03 	vstr	s0, [r3, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    c254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c258:	781a      	ldrb	r2, [r3, #0]
    c25a:	2a00      	cmp	r2, #0
    c25c:	f43f ac60 	beq.w	bb20 <audioTickSynth+0xa0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c260:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c264:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c266:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c26a:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    c26e:	bf18      	it	ne
    c270:	ed83 0a0f 	vstrne	s0, [r3, #60]	; 0x3c
		if (knobTicked[i])
    c274:	6923      	ldr	r3, [r4, #16]
    c276:	2b00      	cmp	r3, #0
    c278:	f43f ac56 	beq.w	bb28 <audioTickSynth+0xa8>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c27c:	f245 2048 	movw	r0, #21064	; 0x5248
    c280:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c284:	f001 f824 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c288:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c290:	ed83 0a04 	vstr	s0, [r3, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    c294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c298:	781a      	ldrb	r2, [r3, #0]
    c29a:	2a00      	cmp	r2, #0
    c29c:	f43f ac44 	beq.w	bb28 <audioTickSynth+0xa8>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c2a0:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c2a4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c2a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2aa:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    c2ae:	bf18      	it	ne
    c2b0:	ed83 0a11 	vstrne	s0, [r3, #68]	; 0x44
		if (knobTicked[i])
    c2b4:	6963      	ldr	r3, [r4, #20]
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	f43f ac3a 	beq.w	bb30 <audioTickSynth+0xb0>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c2bc:	f245 204c 	movw	r0, #21068	; 0x524c
    c2c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c2c4:	f001 f804 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c2c8:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d0:	ed83 0a05 	vstr	s0, [r3, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    c2d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c2d8:	781a      	ldrb	r2, [r3, #0]
    c2da:	2a00      	cmp	r2, #0
    c2dc:	f43f ac28 	beq.w	bb30 <audioTickSynth+0xb0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c2e0:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c2e4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c2e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c2ea:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    c2ee:	bf18      	it	ne
    c2f0:	ed83 0a13 	vstrne	s0, [r3, #76]	; 0x4c
		if (knobTicked[i])
    c2f4:	69a3      	ldr	r3, [r4, #24]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	f43f ac1e 	beq.w	bb38 <audioTickSynth+0xb8>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c2fc:	f245 2050 	movw	r0, #21072	; 0x5250
    c300:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c304:	f000 ffe4 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c308:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c310:	ed83 0a06 	vstr	s0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    c314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c318:	781a      	ldrb	r2, [r3, #0]
    c31a:	2a00      	cmp	r2, #0
    c31c:	f43f ac0c 	beq.w	bb38 <audioTickSynth+0xb8>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c320:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c324:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c326:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c32a:	ed83 0a14 	vstr	s0, [r3, #80]	; 0x50
    c32e:	bf18      	it	ne
    c330:	ed83 0a15 	vstrne	s0, [r3, #84]	; 0x54
		if (knobTicked[i])
    c334:	69e3      	ldr	r3, [r4, #28]
    c336:	2b00      	cmp	r3, #0
    c338:	f43f ac02 	beq.w	bb40 <audioTickSynth+0xc0>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c33c:	f245 2054 	movw	r0, #21076	; 0x5254
    c340:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c344:	f000 ffc4 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c348:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c350:	ed83 0a07 	vstr	s0, [r3, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    c354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c358:	781a      	ldrb	r2, [r3, #0]
    c35a:	2a00      	cmp	r2, #0
    c35c:	f43f abf0 	beq.w	bb40 <audioTickSynth+0xc0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c360:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c364:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c366:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c36a:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
    c36e:	bf18      	it	ne
    c370:	ed83 0a17 	vstrne	s0, [r3, #92]	; 0x5c
		if (knobTicked[i])
    c374:	6a23      	ldr	r3, [r4, #32]
    c376:	2b00      	cmp	r3, #0
    c378:	f43f abe6 	beq.w	bb48 <audioTickSynth+0xc8>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c37c:	f245 2058 	movw	r0, #21080	; 0x5258
    c380:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c384:	f000 ffa4 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c388:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c390:	ed83 0a08 	vstr	s0, [r3, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    c394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c398:	781a      	ldrb	r2, [r3, #0]
    c39a:	2a00      	cmp	r2, #0
    c39c:	f43f abd4 	beq.w	bb48 <audioTickSynth+0xc8>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c3a0:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c3a4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c3a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3aa:	ed83 0a18 	vstr	s0, [r3, #96]	; 0x60
    c3ae:	bf18      	it	ne
    c3b0:	ed83 0a19 	vstrne	s0, [r3, #100]	; 0x64
		if (knobTicked[i])
    c3b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	f43f abca 	beq.w	bb50 <audioTickSynth+0xd0>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c3bc:	f245 205c 	movw	r0, #21084	; 0x525c
    c3c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3c4:	f000 ff84 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c3c8:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d0:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    c3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c3d8:	781a      	ldrb	r2, [r3, #0]
    c3da:	2a00      	cmp	r2, #0
    c3dc:	f43f abb8 	beq.w	bb50 <audioTickSynth+0xd0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c3e0:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c3e4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c3e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c3ea:	ed83 0a1a 	vstr	s0, [r3, #104]	; 0x68
    c3ee:	bf18      	it	ne
    c3f0:	ed83 0a1b 	vstrne	s0, [r3, #108]	; 0x6c
		if (knobTicked[i])
    c3f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c3f6:	2b00      	cmp	r3, #0
    c3f8:	f43f abae 	beq.w	bb58 <audioTickSynth+0xd8>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c3fc:	f245 2060 	movw	r0, #21088	; 0x5260
    c400:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c404:	f000 ff64 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c408:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c410:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
			for (int v = 0; v < numStringsThisBoard; v++)
    c414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c418:	781a      	ldrb	r2, [r3, #0]
    c41a:	2a00      	cmp	r2, #0
    c41c:	f43f ab9c 	beq.w	bb58 <audioTickSynth+0xd8>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c420:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c424:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c426:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c42a:	ed83 0a1c 	vstr	s0, [r3, #112]	; 0x70
    c42e:	bf18      	it	ne
    c430:	ed83 0a1d 	vstrne	s0, [r3, #116]	; 0x74
		if (knobTicked[i])
    c434:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c436:	2b00      	cmp	r3, #0
    c438:	f43f ab92 	beq.w	bb60 <audioTickSynth+0xe0>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c43c:	f245 2064 	movw	r0, #21092	; 0x5264
    c440:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c444:	f000 ff44 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c448:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c450:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    c454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c458:	781a      	ldrb	r2, [r3, #0]
    c45a:	2a00      	cmp	r2, #0
    c45c:	f43f ab80 	beq.w	bb60 <audioTickSynth+0xe0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c460:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c464:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c466:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c46a:	ed83 0a1e 	vstr	s0, [r3, #120]	; 0x78
			for (int v = 0; v < numStringsThisBoard; v++)
    c46e:	f43f ab77 	beq.w	bb60 <audioTickSynth+0xe0>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c472:	ed83 0a1f 	vstr	s0, [r3, #124]	; 0x7c
			for (int v = 0; v < numStringsThisBoard; v++)
    c476:	f7ff bb73 	b.w	bb60 <audioTickSynth+0xe0>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c47a:	f245 3024 	movw	r0, #21284	; 0x5324
    c47e:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c482:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c486:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c48a:	f000 ff21 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c48e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c492:	ed86 0a00 	vstr	s0, [r6]
			for (int v = 0; v < numStringsThisBoard; v++)
    c496:	781a      	ldrb	r2, [r3, #0]
    c498:	2a00      	cmp	r2, #0
    c49a:	f43f ab69 	beq.w	bb70 <audioTickSynth+0xf0>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c49e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c4a2:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c4a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4a8:	ed83 0a38 	vstr	s0, [r3, #224]	; 0xe0
    c4ac:	bf18      	it	ne
    c4ae:	ed83 0a39 	vstrne	s0, [r3, #228]	; 0xe4
		if (pedalTicked[i])
    c4b2:	6863      	ldr	r3, [r4, #4]
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	f43f ab5f 	beq.w	bb78 <audioTickSynth+0xf8>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c4ba:	f245 3028 	movw	r0, #21288	; 0x5328
    c4be:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c4c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c4c6:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c4ca:	f000 ff01 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c4ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c4d2:	ed86 0a01 	vstr	s0, [r6, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    c4d6:	781a      	ldrb	r2, [r3, #0]
    c4d8:	2a00      	cmp	r2, #0
    c4da:	f43f ab4d 	beq.w	bb78 <audioTickSynth+0xf8>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c4de:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c4e2:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c4e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c4e8:	ed83 0a3a 	vstr	s0, [r3, #232]	; 0xe8
    c4ec:	bf18      	it	ne
    c4ee:	ed83 0a3b 	vstrne	s0, [r3, #236]	; 0xec
		if (pedalTicked[i])
    c4f2:	68a3      	ldr	r3, [r4, #8]
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	f43f ab43 	beq.w	bb80 <audioTickSynth+0x100>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c4fa:	f245 302c 	movw	r0, #21292	; 0x532c
    c4fe:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c502:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c506:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c50a:	f000 fee1 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c50e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c512:	ed86 0a02 	vstr	s0, [r6, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    c516:	781a      	ldrb	r2, [r3, #0]
    c518:	2a00      	cmp	r2, #0
    c51a:	f43f ab31 	beq.w	bb80 <audioTickSynth+0x100>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c51e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c522:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c524:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c528:	ed83 0a3c 	vstr	s0, [r3, #240]	; 0xf0
    c52c:	bf18      	it	ne
    c52e:	ed83 0a3d 	vstrne	s0, [r3, #244]	; 0xf4
		if (pedalTicked[i])
    c532:	68e3      	ldr	r3, [r4, #12]
    c534:	2b00      	cmp	r3, #0
    c536:	f43f ab27 	beq.w	bb88 <audioTickSynth+0x108>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c53a:	f245 3030 	movw	r0, #21296	; 0x5330
    c53e:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c542:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c546:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c54a:	f000 fec1 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c54e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c552:	ed86 0a03 	vstr	s0, [r6, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    c556:	781a      	ldrb	r2, [r3, #0]
    c558:	2a00      	cmp	r2, #0
    c55a:	f43f ab15 	beq.w	bb88 <audioTickSynth+0x108>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c55e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c562:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c564:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c568:	ed83 0a3e 	vstr	s0, [r3, #248]	; 0xf8
    c56c:	bf18      	it	ne
    c56e:	ed83 0a3f 	vstrne	s0, [r3, #252]	; 0xfc
		if (pedalTicked[i])
    c572:	6923      	ldr	r3, [r4, #16]
    c574:	2b00      	cmp	r3, #0
    c576:	f43f ab0b 	beq.w	bb90 <audioTickSynth+0x110>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c57a:	f245 3034 	movw	r0, #21300	; 0x5334
    c57e:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c582:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c586:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c58a:	f000 fea1 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c58e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c592:	ed86 0a04 	vstr	s0, [r6, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    c596:	781a      	ldrb	r2, [r3, #0]
    c598:	2a00      	cmp	r2, #0
    c59a:	f43f aaf9 	beq.w	bb90 <audioTickSynth+0x110>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c59e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c5a2:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c5a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5a8:	ed83 0a40 	vstr	s0, [r3, #256]	; 0x100
    c5ac:	bf18      	it	ne
    c5ae:	ed83 0a41 	vstrne	s0, [r3, #260]	; 0x104
		if (pedalTicked[i])
    c5b2:	6963      	ldr	r3, [r4, #20]
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	f43f aaef 	beq.w	bb98 <audioTickSynth+0x118>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c5ba:	f245 3038 	movw	r0, #21304	; 0x5338
    c5be:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c5c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c5c6:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c5ca:	f000 fe81 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c5ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c5d2:	ed86 0a05 	vstr	s0, [r6, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    c5d6:	781a      	ldrb	r2, [r3, #0]
    c5d8:	2a00      	cmp	r2, #0
    c5da:	f43f aadd 	beq.w	bb98 <audioTickSynth+0x118>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c5de:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c5e2:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c5e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c5e8:	ed83 0a42 	vstr	s0, [r3, #264]	; 0x108
    c5ec:	bf18      	it	ne
    c5ee:	ed83 0a43 	vstrne	s0, [r3, #268]	; 0x10c
		if (pedalTicked[i])
    c5f2:	69a3      	ldr	r3, [r4, #24]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	f43f aad3 	beq.w	bba0 <audioTickSynth+0x120>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c5fa:	f245 303c 	movw	r0, #21308	; 0x533c
    c5fe:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c602:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c606:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c60a:	f000 fe61 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c60e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c612:	ed86 0a06 	vstr	s0, [r6, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    c616:	781a      	ldrb	r2, [r3, #0]
    c618:	2a00      	cmp	r2, #0
    c61a:	f43f aac1 	beq.w	bba0 <audioTickSynth+0x120>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c61e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c622:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c624:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c628:	ed83 0a44 	vstr	s0, [r3, #272]	; 0x110
    c62c:	bf18      	it	ne
    c62e:	ed83 0a45 	vstrne	s0, [r3, #276]	; 0x114
		if (pedalTicked[i])
    c632:	69e3      	ldr	r3, [r4, #28]
    c634:	2b00      	cmp	r3, #0
    c636:	f43f aab7 	beq.w	bba8 <audioTickSynth+0x128>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c63a:	f245 3040 	movw	r0, #21312	; 0x5340
    c63e:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c642:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c646:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c64a:	f000 fe41 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c652:	ed86 0a07 	vstr	s0, [r6, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    c656:	781a      	ldrb	r2, [r3, #0]
    c658:	2a00      	cmp	r2, #0
    c65a:	f43f aaa5 	beq.w	bba8 <audioTickSynth+0x128>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c65e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c662:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c664:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c668:	ed83 0a46 	vstr	s0, [r3, #280]	; 0x118
    c66c:	bf18      	it	ne
    c66e:	ed83 0a47 	vstrne	s0, [r3, #284]	; 0x11c
		if (pedalTicked[i])
    c672:	6a23      	ldr	r3, [r4, #32]
    c674:	2b00      	cmp	r3, #0
    c676:	f43f aa9b 	beq.w	bbb0 <audioTickSynth+0x130>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c67a:	f245 3044 	movw	r0, #21316	; 0x5344
    c67e:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c682:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c686:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c68a:	f000 fe21 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c68e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c692:	ed86 0a08 	vstr	s0, [r6, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    c696:	781a      	ldrb	r2, [r3, #0]
    c698:	2a00      	cmp	r2, #0
    c69a:	f43f ad0b 	beq.w	c0b4 <audioTickSynth+0x634>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c69e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c6a2:	2a01      	cmp	r2, #1
		if (pedalTicked[i])
    c6a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c6a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6aa:	ed83 0a48 	vstr	s0, [r3, #288]	; 0x120
    c6ae:	bf18      	it	ne
    c6b0:	ed83 0a49 	vstrne	s0, [r3, #292]	; 0x124
		if (pedalTicked[i])
    c6b4:	2a00      	cmp	r2, #0
    c6b6:	d14a      	bne.n	c74e <audioTickSynth+0xcce>
	for (int v = 0; v < numStringsThisBoard; v++)
    c6b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c6bc:	7812      	ldrb	r2, [r2, #0]
    c6be:	f7ff ba85 	b.w	bbcc <audioTickSynth+0x14c>
			for (int v = 0; v < numStringsThisBoard; v++)
    c6c2:	f240 6694 	movw	r6, #1684	; 0x694
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c6c6:	f245 2038 	movw	r0, #21048	; 0x5238
			for (int v = 0; v < numStringsThisBoard; v++)
    c6ca:	f2c2 0600 	movt	r6, #8192	; 0x2000
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c6ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
			for (int v = 0; v < numStringsThisBoard; v++)
    c6d2:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c6d6:	f000 fdfb 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c6da:	f245 13e8 	movw	r3, #20968	; 0x51e8
			for (int v = 0; v < numStringsThisBoard; v++)
    c6de:	7832      	ldrb	r2, [r6, #0]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e4:	ed83 0a00 	vstr	s0, [r3]
			for (int v = 0; v < numStringsThisBoard; v++)
    c6e8:	2a00      	cmp	r2, #0
    c6ea:	f43f aa0d 	beq.w	bb08 <audioTickSynth+0x88>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c6ee:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c6f2:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c6f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c6f8:	ed83 0a08 	vstr	s0, [r3, #32]
    c6fc:	bf18      	it	ne
    c6fe:	ed83 0a09 	vstrne	s0, [r3, #36]	; 0x24
		if (knobTicked[i])
    c702:	6863      	ldr	r3, [r4, #4]
    c704:	2b00      	cmp	r3, #0
    c706:	f43f aa03 	beq.w	bb10 <audioTickSynth+0x90>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    c70a:	f245 203c 	movw	r0, #21052	; 0x523c
    c70e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c712:	f000 fddd 	bl	d2d0 <__tExpSmooth_tick_veneer>
    c716:	f245 13e8 	movw	r3, #20968	; 0x51e8
    c71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71e:	ed83 0a01 	vstr	s0, [r3, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    c722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c726:	781a      	ldrb	r2, [r3, #0]
    c728:	2a00      	cmp	r2, #0
    c72a:	f43f a9f1 	beq.w	bb10 <audioTickSynth+0x90>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c72e:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c732:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    c734:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c738:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    c73c:	bf18      	it	ne
    c73e:	ed83 0a0b 	vstrne	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    c742:	f7ff b9e5 	b.w	bb10 <audioTickSynth+0x90>
    c746:	f245 26fc 	movw	r6, #21244	; 0x52fc
    c74a:	f2c2 0600 	movt	r6, #8192	; 0x2000
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c74e:	f245 3048 	movw	r0, #21320	; 0x5348
    c752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c756:	f000 fdbb 	bl	d2d0 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    c75a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    c75e:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    c762:	781a      	ldrb	r2, [r3, #0]
    c764:	2a00      	cmp	r2, #0
    c766:	f43f aca9 	beq.w	c0bc <audioTickSynth+0x63c>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c76a:	f64d 0380 	movw	r3, #55424	; 0xd880
			for (int v = 0; v < numStringsThisBoard; v++)
    c76e:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    c770:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c774:	ed83 0a4a 	vstr	s0, [r3, #296]	; 0x128
    c778:	bf18      	it	ne
    c77a:	ed83 0a4b 	vstrne	s0, [r3, #300]	; 0x12c
			for (int v = 0; v < numStringsThisBoard; v++)
    c77e:	e79b      	b.n	c6b8 <audioTickSynth+0xc38>

0000c780 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    c780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
    c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    c788:	f2ce 0300 	movt	r3, #57344	; 0xe000
	if (resetStringInputs)
    c78c:	f245 7871 	movw	r8, #22385	; 0x5771
{
    c790:	ed2d 8b04 	vpush	{d8-d9}
    c794:	b08b      	sub	sp, #44	; 0x2c
	if (resetStringInputs)
    c796:	f2c2 0800 	movt	r8, #8192	; 0x2000
{
    c79a:	9003      	str	r0, [sp, #12]
	uint32_t tempCountFrame = DWT->CYCCNT;
    c79c:	685b      	ldr	r3, [r3, #4]
    c79e:	9302      	str	r3, [sp, #8]
	if (resetStringInputs)
    c7a0:	f898 3000 	ldrb.w	r3, [r8]
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	f040 80c5 	bne.w	c934 <audioFrameSynth+0x1b4>
    c7aa:	f245 27e8 	movw	r7, #21224	; 0x52e8
    c7ae:	f2c2 0700 	movt	r7, #8192	; 0x2000
	if (newPluck)
    c7b2:	683b      	ldr	r3, [r7, #0]
    c7b4:	2b00      	cmp	r3, #0
    c7b6:	d05b      	beq.n	c870 <audioFrameSynth+0xf0>
		for (int i = 0; i < numStringsThisBoard; i++)
    c7b8:	f240 6694 	movw	r6, #1684	; 0x694
    c7bc:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c7c0:	7832      	ldrb	r2, [r6, #0]
    c7c2:	2a00      	cmp	r2, #0
    c7c4:	d052      	beq.n	c86c <audioFrameSynth+0xec>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c7c6:	2380      	movs	r3, #128	; 0x80
    c7c8:	f24a 11cc 	movw	r1, #41420	; 0xa1cc
    c7cc:	f24d 3838 	movw	r8, #54072	; 0xd338
    c7d0:	f244 2924 	movw	r9, #16932	; 0x4224
    c7d4:	f2c3 7380 	movt	r3, #14208	; 0x3780
    c7d8:	f245 3458 	movw	r4, #21336	; 0x5358
    c7dc:	f2c2 0101 	movt	r1, #8193	; 0x2001
    c7e0:	9606      	str	r6, [sp, #24]
    c7e2:	ee08 3a10 	vmov	s16, r3
    c7e6:	f24d 4338 	movw	r3, #54328	; 0xd438
    c7ea:	9704      	str	r7, [sp, #16]
    c7ec:	f2c2 0801 	movt	r8, #8193	; 0x2001
    c7f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c7f4:	f2c2 0901 	movt	r9, #8193	; 0x2001
    c7f8:	f2c2 0400 	movt	r4, #8192	; 0x2000
		for (int i = 0; i < numStringsThisBoard; i++)
    c7fc:	2500      	movs	r5, #0
    c7fe:	9307      	str	r3, [sp, #28]
    c800:	f244 2304 	movw	r3, #16900	; 0x4204
    c804:	460f      	mov	r7, r1
    c806:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c80a:	9301      	str	r3, [sp, #4]
					if (envOn[v])
    c80c:	f24d 3334 	movw	r3, #54068	; 0xd334
    c810:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c814:	9305      	str	r3, [sp, #20]
    c816:	f64d 1310 	movw	r3, #55568	; 0xd910
    c81a:	f2c2 0301 	movt	r3, #8193	; 0x2001
    c81e:	461e      	mov	r6, r3
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    c820:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    c824:	b29b      	uxth	r3, r3
    c826:	b933      	cbnz	r3, c836 <audioFrameSynth+0xb6>
    c828:	9b01      	ldr	r3, [sp, #4]
    c82a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    c82e:	b29b      	uxth	r3, r3
    c830:	2b00      	cmp	r3, #0
    c832:	f040 80b2 	bne.w	c99a <audioFrameSynth+0x21a>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    c836:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    c83a:	b29b      	uxth	r3, r3
    c83c:	b133      	cbz	r3, c84c <audioFrameSynth+0xcc>
    c83e:	9b01      	ldr	r3, [sp, #4]
    c840:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    c844:	b29b      	uxth	r3, r3
    c846:	2b00      	cmp	r3, #0
    c848:	f000 812a 	beq.w	caa0 <audioFrameSynth+0x320>
			previousStringInputs[i] = stringInputs[i];
    c84c:	9b01      	ldr	r3, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    c84e:	3604      	adds	r6, #4
    c850:	f108 0804 	add.w	r8, r8, #4
    c854:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    c856:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    c85a:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    c85e:	b29b      	uxth	r3, r3
    c860:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    c864:	3501      	adds	r5, #1
    c866:	42aa      	cmp	r2, r5
    c868:	dcda      	bgt.n	c820 <audioFrameSynth+0xa0>
    c86a:	9f04      	ldr	r7, [sp, #16]
		newPluck = 0;
    c86c:	2300      	movs	r3, #0
    c86e:	603b      	str	r3, [r7, #0]
    c870:	f240 0400 	movw	r4, #0
    c874:	9a03      	ldr	r2, [sp, #12]
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    c876:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
    c87a:	f2c3 0400 	movt	r4, #12288	; 0x3000
    c87e:	ee08 3a10 	vmov	s16, r3
    c882:	f504 7500 	add.w	r5, r4, #512	; 0x200
    c886:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    c88a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    c88e:	f7ff f8f7 	bl	ba80 <audioTickSynth>
    c892:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    c896:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    c898:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    c89c:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    c89e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    c8a2:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    c8a6:	d1f2      	bne.n	c88e <audioFrameSynth+0x10e>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (frameLoadPercentage > .99f)
    c8ac:	f247 03a4 	movw	r3, #28836	; 0x70a4
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8b0:	f240 6184 	movw	r1, #1668	; 0x684
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8b4:	f244 2040 	movw	r0, #16960	; 0x4240
	if (frameLoadPercentage > .99f)
    c8b8:	f6c3 737d 	movt	r3, #16253	; 0x3f7d
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8c4:	f2c2 0001 	movt	r0, #8193	; 0x2001
    c8c8:	6852      	ldr	r2, [r2, #4]
	if (frameLoadPercentage > .99f)
    c8ca:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8ce:	9b02      	ldr	r3, [sp, #8]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8d0:	edd1 6a00 	vldr	s13, [r1]
    c8d4:	f245 11cc 	movw	r1, #20940	; 0x51cc
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8d8:	1ad2      	subs	r2, r2, r3
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8da:	f2c2 0100 	movt	r1, #8192	; 0x2000
    c8de:	ee07 2a10 	vmov	s14, r2
	timeFrame = DWT->CYCCNT - tempCountFrame;
    c8e2:	6002      	str	r2, [r0, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c8e8:	ee27 7a26 	vmul.f32	s14, s14, s13
	if (frameLoadPercentage > .99f)
    c8ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    c8f0:	ed81 7a00 	vstr	s14, [r1]
	if (frameLoadPercentage > .99f)
    c8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8f8:	dd17      	ble.n	c92a <audioFrameSynth+0x1aa>
		frameLoadOverCount++;
    c8fa:	f245 12c8 	movw	r2, #20936	; 0x51c8
    c8fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c902:	6813      	ldr	r3, [r2, #0]
    c904:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    c906:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    c908:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    c90a:	d90e      	bls.n	c92a <audioFrameSynth+0x1aa>
			if (overSampled == 1)
    c90c:	f640 03e8 	movw	r3, #2280	; 0x8e8
    c910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c914:	681a      	ldr	r2, [r3, #0]
    c916:	2a01      	cmp	r2, #1
    c918:	d036      	beq.n	c988 <audioFrameSynth+0x208>
			else if (oscToTick > 0)
    c91a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    c91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c922:	781a      	ldrb	r2, [r3, #0]
    c924:	b10a      	cbz	r2, c92a <audioFrameSynth+0x1aa>
				oscToTick--;
    c926:	3a01      	subs	r2, #1
    c928:	701a      	strb	r2, [r3, #0]
}
    c92a:	b00b      	add	sp, #44	; 0x2c
    c92c:	ecbd 8b04 	vpop	{d8-d9}
    c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    c934:	f240 6694 	movw	r6, #1684	; 0x694
    c938:	f2c2 0600 	movt	r6, #8192	; 0x2000
    c93c:	7833      	ldrb	r3, [r6, #0]
    c93e:	b1cb      	cbz	r3, c974 <audioFrameSynth+0x1f4>
    c940:	f24d 3758 	movw	r7, #54104	; 0xd358
    c944:	2500      	movs	r5, #0
    c946:	f245 3458 	movw	r4, #21336	; 0x5358
    c94a:	f2c2 0701 	movt	r7, #8193	; 0x2001
				previousStringInputs[i] = 0;
    c94e:	46a9      	mov	r9, r5
    c950:	f2c2 0400 	movt	r4, #8192	; 0x2000
    c954:	f1a7 0a20 	sub.w	sl, r7, #32
				tADSRT_clear(&envs[v][i]);
    c958:	4650      	mov	r0, sl
			for (int v = 0; v < NUM_ENV; v++)
    c95a:	f10a 0a08 	add.w	sl, sl, #8
				tADSRT_clear(&envs[v][i]);
    c95e:	f000 ff1f 	bl	d7a0 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    c962:	f824 9015 	strh.w	r9, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    c966:	45ba      	cmp	sl, r7
    c968:	d1f6      	bne.n	c958 <audioFrameSynth+0x1d8>
		for (int i = 0; i < numStringsThisBoard; i++)
    c96a:	3501      	adds	r5, #1
    c96c:	7833      	ldrb	r3, [r6, #0]
    c96e:	3704      	adds	r7, #4
    c970:	42ab      	cmp	r3, r5
    c972:	dcef      	bgt.n	c954 <audioFrameSynth+0x1d4>
		resetStringInputs = 0;
    c974:	2300      	movs	r3, #0
		newPluck = 1;
    c976:	f245 27e8 	movw	r7, #21224	; 0x52e8
		resetStringInputs = 0;
    c97a:	f888 3000 	strb.w	r3, [r8]
		newPluck = 1;
    c97e:	f2c2 0700 	movt	r7, #8192	; 0x2000
    c982:	2301      	movs	r3, #1
    c984:	603b      	str	r3, [r7, #0]
    c986:	e714      	b.n	c7b2 <audioFrameSynth+0x32>
				overSampled = 0;
    c988:	2000      	movs	r0, #0
    c98a:	6018      	str	r0, [r3, #0]
}
    c98c:	b00b      	add	sp, #44	; 0x2c
    c98e:	ecbd 8b04 	vpop	{d8-d9}
    c992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    c996:	f000 bd0f 	b.w	d3b8 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c99a:	9b01      	ldr	r3, [sp, #4]
    c99c:	f24d 3a34 	movw	sl, #54068	; 0xd334
						voiceSounding = 1;
    c9a0:	f64d 2104 	movw	r1, #55812	; 0xda04
						if (useVelocity == 0) envVel = 1.f;
    c9a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c9a8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    c9ac:	f2c2 0a01 	movt	sl, #8193	; 0x2001
						voiceSounding = 1;
    c9b0:	f2c2 0101 	movt	r1, #8193	; 0x2001
				stringOctave[i] = octave;
    c9b4:	9508      	str	r5, [sp, #32]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c9b6:	b29b      	uxth	r3, r3
    c9b8:	f10a 0204 	add.w	r2, sl, #4
				stringOctave[i] = octave;
    c9bc:	4655      	mov	r5, sl
    c9be:	9409      	str	r4, [sp, #36]	; 0x24
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c9c0:	ee08 3a90 	vmov	s17, r3
				stringOctave[i] = octave;
    c9c4:	f245 23f4 	movw	r3, #21236	; 0x52f4
    c9c8:	46c3      	mov	fp, r8
    c9ca:	468a      	mov	sl, r1
    c9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c9d0:	eef8 8ae8 	vcvt.f32.s32	s17, s17
				stringOctave[i] = octave;
    c9d4:	681b      	ldr	r3, [r3, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    c9d6:	ee68 8a88 	vmul.f32	s17, s17, s16
				stringOctave[i] = octave;
    c9da:	f8c9 3000 	str.w	r3, [r9]
				for (int v = 0; v < NUM_ENV; v++)
    c9de:	f5a7 7313 	sub.w	r3, r7, #588	; 0x24c
				stringOctave[i] = octave;
    c9e2:	461c      	mov	r4, r3
					if (envOn[v])
    c9e4:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    c9e8:	4658      	mov	r0, fp
					if (envOn[v])
    c9ea:	b183      	cbz	r3, ca0e <audioFrameSynth+0x28e>
						if (useVelocity == 0) envVel = 1.f;
    c9ec:	edd4 7a00 	vldr	s15, [r4]
    c9f0:	eef5 7a40 	vcmp.f32	s15, #0.0
    c9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    c9f8:	fe09 0a28 	vseleq.f32	s0, s18, s17
    c9fc:	f000 fd64 	bl	d4c8 <__tADSRT_on_veneer>
						voiceSounding = 1;
    ca00:	2001      	movs	r0, #1
    ca02:	f24d 3238 	movw	r2, #54072	; 0xd338
    ca06:	f88a 0000 	strb.w	r0, [sl]
    ca0a:	f2c2 0201 	movt	r2, #8193	; 0x2001
				for (int v = 0; v < NUM_ENV; v++)
    ca0e:	42aa      	cmp	r2, r5
    ca10:	f10b 0b08 	add.w	fp, fp, #8
    ca14:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    ca18:	d1e4      	bne.n	c9e4 <audioFrameSynth+0x264>
    ca1a:	f24d 4a38 	movw	sl, #54328	; 0xd438
						if (noteOnSync > 0.5f)
    ca1e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    ca22:	46bb      	mov	fp, r7
    ca24:	f2c2 0a01 	movt	sl, #8193	; 0x2001
						if (noteOnSync > 0.5f)
    ca28:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
    ca2c:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
				for (int v = 0; v < NUM_ENV; v++)
    ca30:	4629      	mov	r1, r5
    ca32:	9408      	str	r4, [sp, #32]
    ca34:	009b      	lsls	r3, r3, #2
    ca36:	9c07      	ldr	r4, [sp, #28]
    ca38:	f103 020c 	add.w	r2, r3, #12
    ca3c:	4615      	mov	r5, r2
						if (noteOnSync > 0.5f)
    ca3e:	ebaa 0004 	sub.w	r0, sl, r4
					if (lfoOn[v])
    ca42:	f81a 3b01 	ldrb.w	r3, [sl], #1
    ca46:	b16b      	cbz	r3, ca64 <audioFrameSynth+0x2e4>
						if (noteOnSync > 0.5f)
    ca48:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
    ca4c:	eef4 7ac9 	vcmpe.f32	s15, s18
    ca50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca54:	dd06      	ble.n	ca64 <audioFrameSynth+0x2e4>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    ca56:	ed9b 0a00 	vldr	s0, [fp]
    ca5a:	f85b 3005 	ldr.w	r3, [fp, r5]
    ca5e:	9109      	str	r1, [sp, #36]	; 0x24
    ca60:	4798      	blx	r3
    ca62:	9909      	ldr	r1, [sp, #36]	; 0x24
				for (int v = 0; v < NUM_LFOS; v++)
    ca64:	f24d 433c 	movw	r3, #54332	; 0xd43c
    ca68:	f10b 0b8c 	add.w	fp, fp, #140	; 0x8c
    ca6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
    ca70:	4553      	cmp	r3, sl
    ca72:	d1e4      	bne.n	ca3e <audioFrameSynth+0x2be>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    ca74:	f24d 72d0 	movw	r2, #55248	; 0xd7d0
    ca78:	f24a 43c8 	movw	r3, #42184	; 0xa4c8
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    ca7c:	460d      	mov	r5, r1
    ca7e:	9c08      	ldr	r4, [sp, #32]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    ca80:	f2c2 0201 	movt	r2, #8193	; 0x2001
    ca84:	f2c2 0301 	movt	r3, #8193	; 0x2001
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    ca88:	edc6 8a00 	vstr	s17, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    ca8c:	7811      	ldrb	r1, [r2, #0]
    ca8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ca92:	3101      	adds	r1, #1
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	7011      	strb	r1, [r2, #0]
    ca98:	60b3      	str	r3, [r6, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    ca9a:	9b06      	ldr	r3, [sp, #24]
    ca9c:	781a      	ldrb	r2, [r3, #0]
			{
    ca9e:	e6d5      	b.n	c84c <audioFrameSynth+0xcc>
					if (envOn[v])
    caa0:	9b05      	ldr	r3, [sp, #20]
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	b95b      	cbnz	r3, cabe <audioFrameSynth+0x33e>
    caa6:	9b05      	ldr	r3, [sp, #20]
    caa8:	785b      	ldrb	r3, [r3, #1]
    caaa:	b9b3      	cbnz	r3, cada <audioFrameSynth+0x35a>
    caac:	9b05      	ldr	r3, [sp, #20]
    caae:	789b      	ldrb	r3, [r3, #2]
    cab0:	b973      	cbnz	r3, cad0 <audioFrameSynth+0x350>
    cab2:	9b05      	ldr	r3, [sp, #20]
    cab4:	78db      	ldrb	r3, [r3, #3]
    cab6:	b933      	cbnz	r3, cac6 <audioFrameSynth+0x346>
		for (int i = 0; i < numStringsThisBoard; i++)
    cab8:	9b06      	ldr	r3, [sp, #24]
    caba:	781a      	ldrb	r2, [r3, #0]
    cabc:	e6c6      	b.n	c84c <audioFrameSynth+0xcc>
						tADSRT_off(&envs[v][i]);
    cabe:	4640      	mov	r0, r8
    cac0:	f000 fc8e 	bl	d3e0 <__tADSRT_off_veneer>
    cac4:	e7ef      	b.n	caa6 <audioFrameSynth+0x326>
    cac6:	f108 0018 	add.w	r0, r8, #24
    caca:	f000 fc89 	bl	d3e0 <__tADSRT_off_veneer>
    cace:	e7f3      	b.n	cab8 <audioFrameSynth+0x338>
    cad0:	f108 0010 	add.w	r0, r8, #16
    cad4:	f000 fc84 	bl	d3e0 <__tADSRT_off_veneer>
    cad8:	e7eb      	b.n	cab2 <audioFrameSynth+0x332>
    cada:	f108 0008 	add.w	r0, r8, #8
    cade:	f000 fc7f 	bl	d3e0 <__tADSRT_off_veneer>
    cae2:	e7e3      	b.n	caac <audioFrameSynth+0x32c>
	...

0000cb00 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    cb00:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    cb02:	f245 258c 	movw	r5, #21132	; 0x528c
    cb06:	f64d 2428 	movw	r4, #55848	; 0xda28
    cb0a:	2241      	movs	r2, #65	; 0x41
    cb0c:	2116      	movs	r1, #22
    cb0e:	f2c2 0500 	movt	r5, #8192	; 0x2000
    cb12:	f2c2 0401 	movt	r4, #8193	; 0x2001
    cb16:	462b      	mov	r3, r5
    cb18:	4620      	mov	r0, r4
    cb1a:	f000 fdad 	bl	d678 <__tVoc_init_veneer>
    cb1e:	462b      	mov	r3, r5
    cb20:	1d20      	adds	r0, r4, #4
    cb22:	2241      	movs	r2, #65	; 0x41
    cb24:	2116      	movs	r1, #22
	}
}
    cb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    cb2a:	f000 bda5 	b.w	d678 <__tVoc_init_veneer>
    cb2e:	bf00      	nop
    cb30:	f3af 8000 	nop.w
    cb34:	f3af 8000 	nop.w
    cb38:	f3af 8000 	nop.w
    cb3c:	f3af 8000 	nop.w

0000cb40 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    cb40:	4770      	bx	lr
    cb42:	bf00      	nop
    cb44:	f3af 8000 	nop.w
    cb48:	f3af 8000 	nop.w
    cb4c:	f3af 8000 	nop.w
    cb50:	f3af 8000 	nop.w
    cb54:	f3af 8000 	nop.w
    cb58:	f3af 8000 	nop.w
    cb5c:	f3af 8000 	nop.w

0000cb60 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    cb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    cb64:	f24d 730a 	movw	r3, #55050	; 0xd70a
    cb68:	f245 2438 	movw	r4, #21048	; 0x5238
    cb6c:	f640 1604 	movw	r6, #2308	; 0x904
    cb70:	f248 6774 	movw	r7, #34420	; 0x8674
    cb74:	f244 284c 	movw	r8, #16972	; 0x424c
    cb78:	f245 19d4 	movw	r9, #20948	; 0x51d4
    cb7c:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    cb80:	f2c2 0400 	movt	r4, #8192	; 0x2000
    cb84:	f2c2 0600 	movt	r6, #8192	; 0x2000
    cb88:	f2c2 0701 	movt	r7, #8193	; 0x2001
	for (int i = 0; i < 12; i++)
    cb8c:	2500      	movs	r5, #0
    cb8e:	f2c2 0801 	movt	r8, #8193	; 0x2001
    cb92:	f2c2 0900 	movt	r9, #8192	; 0x2000
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
		knobFrozen[i] = 1;
    cb96:	f04f 0a01 	mov.w	sl, #1
{
    cb9a:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    cb9e:	ee08 3a10 	vmov	s16, r3
    cba2:	e00e      	b.n	cbc2 <audioSwitchToVocal+0x62>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    cba4:	ecb7 0a01 	vldmia	r7!, {s0}
    cba8:	f000 fb9e 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    cbac:	4620      	mov	r0, r4
    cbae:	ecb6 0a01 	vldmia	r6!, {s0}
    cbb2:	f000 fb99 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    cbb6:	f809 a005 	strb.w	sl, [r9, r5]
	for (int i = 0; i < 12; i++)
    cbba:	3501      	adds	r5, #1
    cbbc:	3404      	adds	r4, #4
    cbbe:	2d0c      	cmp	r5, #12
    cbc0:	d013      	beq.n	cbea <audioSwitchToVocal+0x8a>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    cbc2:	4620      	mov	r0, r4
    cbc4:	eeb0 0a48 	vmov.f32	s0, s16
    cbc8:	f000 fd7e 	bl	d6c8 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    cbcc:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    cbd0:	4620      	mov	r0, r4
		if (voice == 60)
    cbd2:	2b3c      	cmp	r3, #60	; 0x3c
    cbd4:	d1e6      	bne.n	cba4 <audioSwitchToVocal+0x44>
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    cbd6:	46b3      	mov	fp, r6
    cbd8:	ecb6 0a01 	vldmia	r6!, {s0}
    cbdc:	f000 fb84 	bl	d2e8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 12; i++)
    cbe0:	3704      	adds	r7, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    cbe2:	4620      	mov	r0, r4
    cbe4:	ed9b 0a00 	vldr	s0, [fp]
    cbe8:	e7e3      	b.n	cbb2 <audioSwitchToVocal+0x52>
	}
}
    cbea:	ecbd 8b02 	vpop	{d8}
    cbee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbf2:	bf00      	nop
    cbf4:	f3af 8000 	nop.w
    cbf8:	f3af 8000 	nop.w
    cbfc:	f3af 8000 	nop.w

0000cc00 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    cc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc04:	f245 14e8 	movw	r4, #20968	; 0x51e8
    cc08:	f245 2538 	movw	r5, #21048	; 0x5238
    cc0c:	f2c2 0400 	movt	r4, #8192	; 0x2000
    cc10:	f2c2 0500 	movt	r5, #8192	; 0x2000
    cc14:	f104 0630 	add.w	r6, r4, #48	; 0x30
    cc18:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    cc1c:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    cc1e:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    cc20:	f000 fb56 	bl	d2d0 <__tExpSmooth_tick_veneer>
    cc24:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    cc28:	42a6      	cmp	r6, r4
    cc2a:	d1f7      	bne.n	cc1c <audioTickVocal+0x1c>

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);



	for (int i = 0; i < numStringsThisBoard; i++)
    cc2c:	f240 6994 	movw	r9, #1684	; 0x694
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    cc30:	f244 2058 	movw	r0, #16984	; 0x4258
	for (int i = 0; i < numStringsThisBoard; i++)
    cc34:	f2c2 0900 	movt	r9, #8192	; 0x2000
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    cc38:	f2c2 0001 	movt	r0, #8193	; 0x2001
    cc3c:	f000 fb48 	bl	d2d0 <__tExpSmooth_tick_veneer>
    cc40:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    cc44:	f899 3000 	ldrb.w	r3, [r9]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d077      	beq.n	cd3c <audioTickVocal+0x13c>
    cc4c:	f64d 2428 	movw	r4, #55848	; 0xda28
    cc50:	f244 2824 	movw	r8, #16932	; 0x4224
    cc54:	f244 17d4 	movw	r7, #16852	; 0x41d4
    cc58:	2500      	movs	r5, #0
    cc5a:	f245 1bbc 	movw	fp, #20924	; 0x51bc
    cc5e:	f244 2a1c 	movw	sl, #16924	; 0x421c
    cc62:	f2c2 0401 	movt	r4, #8193	; 0x2001
    cc66:	f2c2 0801 	movt	r8, #8193	; 0x2001
    cc6a:	f2c2 0701 	movt	r7, #8193	; 0x2001
	float tempSamp = 0.0f;
    cc6e:	ee08 5a90 	vmov	s17, r5
    cc72:	f2c2 0b00 	movt	fp, #8192	; 0x2000
    cc76:	f2c2 0a01 	movt	sl, #8193	; 0x2001
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    cc7a:	4620      	mov	r0, r4
    cc7c:	00ae      	lsls	r6, r5, #2
    cc7e:	f000 fd0b 	bl	d698 <__tVoc_tick_veneer>
    cc82:	eeb0 9a40 	vmov.f32	s18, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    cc86:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    cc88:	eb0b 0085 	add.w	r0, fp, r5, lsl #2
    cc8c:	f000 fb04 	bl	d298 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    cc90:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    cc94:	eee9 8a00 	vfma.f32	s17, s18, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    cc98:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    cc9c:	3501      	adds	r5, #1
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    cc9e:	ee30 0a27 	vadd.f32	s0, s0, s15
    cca2:	f000 fc79 	bl	d598 <__mtofTableLookup_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    cca6:	4620      	mov	r0, r4
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    cca8:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    ccac:	f000 fcb0 	bl	d610 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    ccb0:	4620      	mov	r0, r4
    ccb2:	eeb0 0a48 	vmov.f32	s0, s16
    ccb6:	f000 fb8b 	bl	d3d0 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    ccba:	f899 3000 	ldrb.w	r3, [r9]
    ccbe:	3404      	adds	r4, #4
    ccc0:	42ab      	cmp	r3, r5
    ccc2:	dcda      	bgt.n	cc7a <audioTickVocal+0x7a>
    ccc4:	f64a 400b 	movw	r0, #44043	; 0xac0b
    ccc8:	f244 2313 	movw	r3, #16915	; 0x4213
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	//float outVol = 0.008315613f + 0.3774075f*volumeSmoothed - 1.785774f*volumeSmoothed*volumeSmoothed + 4.218241f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.8576009f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.9656285f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cccc:	ee28 5a08 	vmul.f32	s10, s16, s16
    ccd0:	f64b 610a 	movw	r1, #48650	; 0xbe0a
    ccd4:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    ccd8:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    ccdc:	f24a 2285 	movw	r2, #41605	; 0xa285
    cce0:	f2c4 0122 	movt	r1, #16418	; 0x4022
    cce4:	ee07 0a10 	vmov	s14, r0
    cce8:	ee07 3a90 	vmov	s15, r3
    ccec:	f2c4 02ca 	movt	r2, #16586	; 0x40ca
    ccf0:	f246 3313 	movw	r3, #25363	; 0x6313
    ccf4:	ee68 5a05 	vmul.f32	s11, s16, s10
    ccf8:	ee06 1a10 	vmov	s12, r1
    ccfc:	eee8 7a07 	vfma.f32	s15, s16, s14
    cd00:	f2c4 0351 	movt	r3, #16465	; 0x4051
    cd04:	ee07 2a10 	vmov	s14, r2

	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    cd08:	eee5 7a46 	vfms.f32	s15, s10, s12
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cd0c:	ee06 3a90 	vmov	s13, r3
	tempSamp *= masterVolFromBrain;
    cd10:	f240 638c 	movw	r3, #1676	; 0x68c
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cd14:	ee28 8a26 	vmul.f32	s16, s16, s13
	tempSamp *= masterVolFromBrain;
    cd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1c:	ed93 0a00 	vldr	s0, [r3]
    cd20:	eee5 7a87 	vfma.f32	s15, s11, s14
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cd24:	eee5 7ac8 	vfms.f32	s15, s11, s16
    cd28:	ee68 8aa7 	vmul.f32	s17, s17, s15
	return tanhf(tempSamp);
    cd2c:	ee28 0a80 	vmul.f32	s0, s17, s0
}
    cd30:	ecbd 8b04 	vpop	{d8-d9}
    cd34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return tanhf(tempSamp);
    cd38:	f000 bc4a 	b.w	d5d0 <__tanhf_veneer>
    cd3c:	f64a 400b 	movw	r0, #44043	; 0xac0b
    cd40:	f244 2313 	movw	r3, #16915	; 0x4213
    cd44:	f24a 2285 	movw	r2, #41605	; 0xa285
    cd48:	f64b 610a 	movw	r1, #48650	; 0xbe0a
    cd4c:	f6c3 33dc 	movt	r3, #15324	; 0x3bdc
    cd50:	f6c3 60f1 	movt	r0, #16113	; 0x3ef1
    cd54:	f2c4 02ca 	movt	r2, #16586	; 0x40ca
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cd58:	ee20 5a00 	vmul.f32	s10, s0, s0
    cd5c:	ee07 0a10 	vmov	s14, r0
    cd60:	ee07 3a90 	vmov	s15, r3
    cd64:	f2c4 0122 	movt	r1, #16418	; 0x4022
    cd68:	f246 3313 	movw	r3, #25363	; 0x6313
    cd6c:	eee0 7a07 	vfma.f32	s15, s0, s14
    cd70:	ee07 2a10 	vmov	s14, r2
	float tempSamp = 0.0f;
    cd74:	2200      	movs	r2, #0
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    cd76:	ee60 5a05 	vmul.f32	s11, s0, s10
    cd7a:	ee06 1a10 	vmov	s12, r1
    cd7e:	f2c4 0351 	movt	r3, #16465	; 0x4051
	float tempSamp = 0.0f;
    cd82:	ee08 2a90 	vmov	s17, r2
    cd86:	e7bf      	b.n	cd08 <audioTickVocal+0x108>
    cd88:	f3af 8000 	nop.w
    cd8c:	f3af 8000 	nop.w
    cd90:	f3af 8000 	nop.w
    cd94:	f3af 8000 	nop.w
    cd98:	f3af 8000 	nop.w
    cd9c:	f3af 8000 	nop.w

0000cda0 <audioFrameVocal>:
{
    cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    cda4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (resetStringInputs)
    cda8:	f245 7a71 	movw	sl, #22385	; 0x5771
{
    cdac:	4607      	mov	r7, r0
		for (int i = 0; i < numStringsThisBoard; i++)
    cdae:	f240 6894 	movw	r8, #1684	; 0x694
	uint32_t tempCountFrame = DWT->CYCCNT;
    cdb2:	f2ce 0300 	movt	r3, #57344	; 0xe000
	if (resetStringInputs)
    cdb6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
{
    cdba:	ed2d 8b08 	vpush	{d8-d11}
	uint32_t tempCountFrame = DWT->CYCCNT;
    cdbe:	685e      	ldr	r6, [r3, #4]
{
    cdc0:	b085      	sub	sp, #20
	if (resetStringInputs)
    cdc2:	f89a 3000 	ldrb.w	r3, [sl]
    cdc6:	2b00      	cmp	r3, #0
    cdc8:	f040 8104 	bne.w	cfd4 <audioFrameVocal+0x234>
	if (newPluck)
    cdcc:	f245 25e8 	movw	r5, #21224	; 0x52e8
		for (int i = 0; i < numStringsThisBoard; i++)
    cdd0:	f2c2 0800 	movt	r8, #8192	; 0x2000
    cdd4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    cdd8:	f898 3000 	ldrb.w	r3, [r8]
	if (newPluck)
    cddc:	682a      	ldr	r2, [r5, #0]
    cdde:	2a00      	cmp	r2, #0
    cde0:	f040 8121 	bne.w	d026 <audioFrameVocal+0x286>
	for (int i = 0; i < numStringsThisBoard; i++)
    cde4:	2b00      	cmp	r3, #0
    cde6:	f000 80b8 	beq.w	cf5a <audioFrameVocal+0x1ba>
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    cdea:	2300      	movs	r3, #0
    cdec:	f64d 2528 	movw	r5, #55848	; 0xda28
    cdf0:	f640 09fc 	movw	r9, #2300	; 0x8fc
    cdf4:	f640 0af4 	movw	sl, #2292	; 0x8f4
    cdf8:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
    cdfc:	f245 14e8 	movw	r4, #20968	; 0x51e8
		float doublecompute = knobScaled[1] > 0.5f;
    ce00:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    ce04:	f2c2 0501 	movt	r5, #8193	; 0x2001
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    ce08:	ee0a 3a90 	vmov	s21, r3
			int32_t squishedTract = (newTractLength*0.168f) ;
    ce0c:	f640 0331 	movw	r3, #2097	; 0x831
    ce10:	f2c2 0900 	movt	r9, #8192	; 0x2000
    ce14:	f2c2 0a00 	movt	sl, #8192	; 0x2000
    ce18:	f6c3 632c 	movt	r3, #15916	; 0x3e2c
    ce1c:	f2c2 0400 	movt	r4, #8192	; 0x2000
	for (int i = 0; i < numStringsThisBoard; i++)
    ce20:	f04f 0b00 	mov.w	fp, #0
			int32_t squishedTract = (newTractLength*0.168f) ;
    ce24:	ee0a 3a10 	vmov	s20, r3
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    ce28:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ce2c:	f6c3 63cc 	movt	r3, #16076	; 0x3ecc
    ce30:	ee09 3a90 	vmov	s19, r3
    ce34:	f24d 730a 	movw	r3, #55050	; 0xd70a
    ce38:	f6c3 4323 	movt	r3, #15395	; 0x3c23
    ce3c:	ee09 3a10 	vmov	s18, r3
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    ce40:	f24b 4339 	movw	r3, #46137	; 0xb439
    ce44:	f6c3 43c8 	movt	r3, #15560	; 0x3cc8
    ce48:	ee08 3a90 	vmov	s17, r3
	for (int i = 0; i < numStringsThisBoard; i++)
    ce4c:	e9cd 6701 	strd	r6, r7, [sp, #4]
		float doublecompute = knobScaled[1] > 0.5f;
    ce50:	edd4 7a01 	vldr	s15, [r4, #4]
    ce54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ce58:	f8d9 3000 	ldr.w	r3, [r9]
		float doublecompute = knobScaled[1] > 0.5f;
    ce5c:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
    ce60:	eef4 7acb 	vcmpe.f32	s15, s22
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    ce64:	ed94 8a00 	vldr	s16, [r4]
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ce68:	f103 020a 	add.w	r2, r3, #10
    ce6c:	3b0a      	subs	r3, #10
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    ce6e:	ee28 8a2a 	vmul.f32	s16, s16, s21
	for (int i = 0; i < numStringsThisBoard; i++)
    ce72:	f10b 0b01 	add.w	fp, fp, #1
		float doublecompute = knobScaled[1] > 0.5f;
    ce76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ce7a:	ee06 2a90 	vmov	s13, r2
    ce7e:	ee07 3a90 	vmov	s15, r3
    ce82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float doublecompute = knobScaled[1] > 0.5f;
    ce86:	fe37 7a06 	vselgt.f32	s14, s14, s12
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    ce8a:	ee28 8a07 	vmul.f32	s16, s16, s14
		float doublecompute = knobScaled[1] > 0.5f;
    ce8e:	bfcc      	ite	gt
    ce90:	2601      	movgt	r6, #1
    ce92:	2600      	movle	r6, #0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ce94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			int32_t squishedTract = (newTractLength*0.168f) ;
    ce98:	ee28 7a0a 	vmul.f32	s14, s16, s20
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ce9c:	eef4 6ac8 	vcmpe.f32	s13, s16
			int32_t squishedTract = (newTractLength*0.168f) ;
    cea0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    cea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			int32_t squishedTract = (newTractLength*0.168f) ;
    cea8:	ee17 7a10 	vmov	r7, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    ceac:	d404      	bmi.n	ceb8 <audioFrameVocal+0x118>
    ceae:	eef4 7ac8 	vcmpe.f32	s15, s16
    ceb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ceb6:	dd0d      	ble.n	ced4 <audioFrameVocal+0x134>
			if ( squishedTract != prevActualTractLength[i])
    ceb8:	f8da 3000 	ldr.w	r3, [sl]
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    cebc:	4628      	mov	r0, r5
    cebe:	1cb9      	adds	r1, r7, #2
			if ( squishedTract != prevActualTractLength[i])
    cec0:	42bb      	cmp	r3, r7
    cec2:	d003      	beq.n	cecc <audioFrameVocal+0x12c>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    cec4:	f000 f9b0 	bl	d228 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    cec8:	f8ca 7000 	str.w	r7, [sl]
			prevTractLength[i] = newTractLength;
    cecc:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    ced0:	ed89 8a00 	vstr	s16, [r9]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    ced4:	4631      	mov	r1, r6
    ced6:	4628      	mov	r0, r5
    ced8:	f000 fbc6 	bl	d668 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    cedc:	4628      	mov	r0, r5
    cede:	ed94 0a04 	vldr	s0, [r4, #16]
	for (int i = 0; i < numStringsThisBoard; i++)
    cee2:	f109 0904 	add.w	r9, r9, #4
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    cee6:	f000 fc4f 	bl	d788 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    ceea:	4628      	mov	r0, r5
    ceec:	ed94 0a05 	vldr	s0, [r4, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    cef0:	f10a 0a04 	add.w	sl, sl, #4
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    cef4:	f000 fa58 	bl	d3a8 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    cef8:	4628      	mov	r0, r5
    cefa:	ed94 0a06 	vldr	s0, [r4, #24]
    cefe:	f000 f9ab 	bl	d258 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    cf02:	4628      	mov	r0, r5
    cf04:	ed94 0a07 	vldr	s0, [r4, #28]
    cf08:	f000 fc0a 	bl	d720 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    cf0c:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    cf10:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    cf14:	4628      	mov	r0, r5
    cf16:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    cf1a:	ed94 0a08 	vldr	s0, [r4, #32]
    cf1e:	f000 fc27 	bl	d770 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    cf22:	eeb0 0a49 	vmov.f32	s0, s18
    cf26:	edd4 7a03 	vldr	s15, [r4, #12]
    cf2a:	4628      	mov	r0, r5
    cf2c:	eea7 0aa9 	vfma.f32	s0, s15, s19
    cf30:	f000 f98e 	bl	d250 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    cf34:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    cf38:	eeb0 0a68 	vmov.f32	s0, s17
    cf3c:	ed94 7a02 	vldr	s14, [r4, #8]
    cf40:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    cf42:	3504      	adds	r5, #4
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    cf44:	eea7 0a27 	vfma.f32	s0, s14, s15
    cf48:	f000 fae2 	bl	d510 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    cf4c:	f898 3000 	ldrb.w	r3, [r8]
    cf50:	455b      	cmp	r3, fp
    cf52:	f73f af7d 	bgt.w	ce50 <audioFrameVocal+0xb0>
    cf56:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
    cf5a:	f240 0400 	movw	r4, #0
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    cf5e:	f04f 4396 	mov.w	r3, #1258291200	; 0x4b000000
    cf62:	f2c3 0400 	movt	r4, #12288	; 0x3000
    cf66:	ee08 3a10 	vmov	s16, r3
    cf6a:	f504 7500 	add.w	r5, r4, #512	; 0x200
    cf6e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    cf72:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    cf76:	f7ff fe43 	bl	cc00 <audioTickVocal>
    cf7a:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    cf7e:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    cf80:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    cf84:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    cf86:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    cf8a:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    cf8e:	d1f2      	bne.n	cf76 <audioFrameVocal+0x1d6>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cf90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cf94:	f240 6084 	movw	r0, #1668	; 0x684
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cf98:	f244 2140 	movw	r1, #16960	; 0x4240
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cf9c:	f245 12cc 	movw	r2, #20940	; 0x51cc
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cfa0:	f2ce 0300 	movt	r3, #57344	; 0xe000
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cfa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cfa8:	f2c2 0101 	movt	r1, #8193	; 0x2001
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cfac:	f2c2 0200 	movt	r2, #8192	; 0x2000
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cfb0:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cfb2:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cfb6:	1b9b      	subs	r3, r3, r6
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cfb8:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    cfbc:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    cfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cfc2:	ee67 7a87 	vmul.f32	s15, s15, s14
    cfc6:	edc2 7a00 	vstr	s15, [r2]
}
    cfca:	b005      	add	sp, #20
    cfcc:	ecbd 8b08 	vpop	{d8-d11}
    cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    cfd4:	f2c2 0800 	movt	r8, #8192	; 0x2000
    cfd8:	f898 3000 	ldrb.w	r3, [r8]
    cfdc:	2b00      	cmp	r3, #0
    cfde:	d07a      	beq.n	d0d6 <audioFrameVocal+0x336>
    cfe0:	f245 15bc 	movw	r5, #20924	; 0x51bc
    cfe4:	2400      	movs	r4, #0
    cfe6:	f245 3b58 	movw	fp, #21336	; 0x5358
    cfea:	f2c2 0500 	movt	r5, #8192	; 0x2000
			previousStringInputs[i] = 0;
    cfee:	46a1      	mov	r9, r4
    cff0:	f2c2 0b00 	movt	fp, #8192	; 0x2000
			tADSRT_clear(&fenvelopes[i]);
    cff4:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    cff6:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    cff8:	f000 fbd2 	bl	d7a0 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    cffc:	f898 3000 	ldrb.w	r3, [r8]
			previousStringInputs[i] = 0;
    d000:	f82b 9014 	strh.w	r9, [fp, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    d004:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    d006:	f04f 0200 	mov.w	r2, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    d00a:	42a3      	cmp	r3, r4
    d00c:	dcf2      	bgt.n	cff4 <audioFrameVocal+0x254>
		newPluck = 1;
    d00e:	f245 25e8 	movw	r5, #21224	; 0x52e8
		resetStringInputs = 0;
    d012:	f88a 2000 	strb.w	r2, [sl]
		newPluck = 1;
    d016:	2201      	movs	r2, #1
    d018:	f2c2 0500 	movt	r5, #8192	; 0x2000
    d01c:	602a      	str	r2, [r5, #0]
	if (newPluck)
    d01e:	682a      	ldr	r2, [r5, #0]
    d020:	2a00      	cmp	r2, #0
    d022:	f43f aedf 	beq.w	cde4 <audioFrameVocal+0x44>
		for (int i = 0; i < numStringsThisBoard; i++)
    d026:	2b00      	cmp	r3, #0
    d028:	f000 80a5 	beq.w	d176 <audioFrameVocal+0x3d6>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d02c:	2280      	movs	r2, #128	; 0x80
    d02e:	f245 10bc 	movw	r0, #20924	; 0x51bc
    d032:	f244 2104 	movw	r1, #16900	; 0x4204
    d036:	f244 2a24 	movw	sl, #16932	; 0x4224
    d03a:	f2c3 7280 	movt	r2, #14208	; 0x3780
    d03e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d042:	f2c2 0101 	movt	r1, #8193	; 0x2001
    d046:	f245 3b58 	movw	fp, #21336	; 0x5358
    d04a:	ee09 2a10 	vmov	s18, r2
    if (f <= -1500.0f) return(0);
    d04e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d052:	f04f 0900 	mov.w	r9, #0
    d056:	f2c2 0a01 	movt	sl, #8193	; 0x2001
    d05a:	f2cc 42bb 	movt	r2, #50363	; 0xc4bb
    d05e:	f2c2 0b00 	movt	fp, #8192	; 0x2000
		for (int i = 0; i < numStringsThisBoard; i++)
    d062:	464c      	mov	r4, r9
    d064:	ee08 2a90 	vmov	s17, r2
    else if (f > 1499.0f) return(mtof(1499.0f));
    d068:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    d06c:	f2c4 42bb 	movt	r2, #17595	; 0x44bb
    d070:	ee08 2a10 	vmov	s16, r2
    d074:	f244 12d4 	movw	r2, #16852	; 0x41d4
    d078:	f2c2 0201 	movt	r2, #8193	; 0x2001
    d07c:	e9cd 6701 	strd	r6, r7, [sp, #4]
    d080:	460e      	mov	r6, r1
    d082:	4607      	mov	r7, r0
    d084:	4629      	mov	r1, r5
    d086:	4615      	mov	r5, r2
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    d088:	f83b c014 	ldrh.w	ip, [fp, r4, lsl #1]
    d08c:	fa1f f28c 	uxth.w	r2, ip
    d090:	b922      	cbnz	r2, d09c <audioFrameVocal+0x2fc>
    d092:	f836 c014 	ldrh.w	ip, [r6, r4, lsl #1]
    d096:	fa1f f28c 	uxth.w	r2, ip
    d09a:	bb82      	cbnz	r2, d0fe <audioFrameVocal+0x35e>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    d09c:	f83b c014 	ldrh.w	ip, [fp, r4, lsl #1]
    d0a0:	fa1f f28c 	uxth.w	r2, ip
    d0a4:	b122      	cbz	r2, d0b0 <audioFrameVocal+0x310>
    d0a6:	f836 c014 	ldrh.w	ip, [r6, r4, lsl #1]
    d0aa:	fa1f f28c 	uxth.w	r2, ip
    d0ae:	b1f2      	cbz	r2, d0ee <audioFrameVocal+0x34e>
			previousStringInputs[i] = stringInputs[i];
    d0b0:	f836 c014 	ldrh.w	ip, [r6, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    d0b4:	3504      	adds	r5, #4
    d0b6:	3704      	adds	r7, #4
    d0b8:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    d0bc:	fa1f fc8c 	uxth.w	ip, ip
    d0c0:	f82b c014 	strh.w	ip, [fp, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    d0c4:	3401      	adds	r4, #1
    d0c6:	42a3      	cmp	r3, r4
    d0c8:	dcde      	bgt.n	d088 <audioFrameVocal+0x2e8>
    d0ca:	460d      	mov	r5, r1
    d0cc:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
		newPluck = 0;
    d0d0:	2200      	movs	r2, #0
    d0d2:	602a      	str	r2, [r5, #0]
    d0d4:	e686      	b.n	cde4 <audioFrameVocal+0x44>
		newPluck = 1;
    d0d6:	f245 25e8 	movw	r5, #21224	; 0x52e8
    d0da:	2201      	movs	r2, #1
		resetStringInputs = 0;
    d0dc:	f88a 3000 	strb.w	r3, [sl]
		newPluck = 1;
    d0e0:	f2c2 0500 	movt	r5, #8192	; 0x2000
    d0e4:	602a      	str	r2, [r5, #0]
	if (newPluck)
    d0e6:	682a      	ldr	r2, [r5, #0]
    d0e8:	2a00      	cmp	r2, #0
    d0ea:	d1f1      	bne.n	d0d0 <audioFrameVocal+0x330>
    d0ec:	e735      	b.n	cf5a <audioFrameVocal+0x1ba>
				tADSRT_off(&fenvelopes[i]);
    d0ee:	4638      	mov	r0, r7
    d0f0:	9103      	str	r1, [sp, #12]
    d0f2:	f000 f975 	bl	d3e0 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    d0f6:	f898 3000 	ldrb.w	r3, [r8]
    d0fa:	9903      	ldr	r1, [sp, #12]
    d0fc:	e7d8      	b.n	d0b0 <audioFrameVocal+0x310>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d0fe:	f244 231c 	movw	r3, #16924	; 0x421c
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d102:	f836 c014 	ldrh.w	ip, [r6, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d106:	f2c2 0301 	movt	r3, #8193	; 0x2001
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d10a:	fa1f fc8c 	uxth.w	ip, ip
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d10e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d112:	ee07 ca10 	vmov	s14, ip
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d116:	edd3 7a00 	vldr	s15, [r3]
				stringOctave[i] = octave;
    d11a:	f245 23f4 	movw	r3, #21236	; 0x52f4
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d11e:	eef8 9ac7 	vcvt.f32.s32	s19, s14
				stringOctave[i] = octave;
    d122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d126:	ed93 7a00 	vldr	s14, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    d12a:	ee69 9a89 	vmul.f32	s19, s19, s18
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d12e:	ee77 7a27 	vadd.f32	s15, s14, s15
				stringOctave[i] = octave;
    d132:	ed8a 7a00 	vstr	s14, [sl]
    d136:	e006      	b.n	d146 <audioFrameVocal+0x3a6>
    d138:	eef4 7ac8 	vcmpe.f32	s15, s16
    d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d140:	dd1b      	ble.n	d17a <audioFrameVocal+0x3da>
    d142:	eef0 7a48 	vmov.f32	s15, s16
    if (f <= -1500.0f) return(0);
    d146:	eef4 7ae8 	vcmpe.f32	s15, s17
    d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d14e:	d8f3      	bhi.n	d138 <audioFrameVocal+0x398>
    d150:	ee07 9a90 	vmov	s15, r9
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    d154:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    d158:	4638      	mov	r0, r7
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    d15a:	edc5 7a00 	vstr	s15, [r5]
    d15e:	9103      	str	r1, [sp, #12]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    d160:	f000 fa2a 	bl	d5b8 <__tADSRT_setSustain_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
    d164:	eeb0 0a69 	vmov.f32	s0, s19
    d168:	4638      	mov	r0, r7
    d16a:	f000 f9ad 	bl	d4c8 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    d16e:	f898 3000 	ldrb.w	r3, [r8]
			{
    d172:	9903      	ldr	r1, [sp, #12]
    d174:	e79c      	b.n	d0b0 <audioFrameVocal+0x310>
		newPluck = 0;
    d176:	602b      	str	r3, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    d178:	e6ef      	b.n	cf5a <audioFrameVocal+0x1ba>
    else return (8.17579891564f * expf(0.0577622650f * f));
    d17a:	f649 0320 	movw	r3, #38944	; 0x9820
    d17e:	9103      	str	r1, [sp, #12]
    d180:	f6c3 536c 	movt	r3, #15724	; 0x3d6c
    d184:	ee00 3a10 	vmov	s0, r3
    d188:	ee27 0a80 	vmul.f32	s0, s15, s0
    d18c:	f000 f88c 	bl	d2a8 <__expf_veneer>
    d190:	f24d 0313 	movw	r3, #53267	; 0xd013
    d194:	9903      	ldr	r1, [sp, #12]
    d196:	f2c4 1302 	movt	r3, #16642	; 0x4102
    d19a:	ee07 3a90 	vmov	s15, r3
    d19e:	ee60 7a27 	vmul.f32	s15, s0, s15
    d1a2:	e7d7      	b.n	d154 <audioFrameVocal+0x3b4>
    d1a4:	0000      	movs	r0, r0
	...

0000d1a8 <__tPBSineTriangle_setFreq_veneer>:
    d1a8:	f85f f000 	ldr.w	pc, [pc]	; d1ac <__tPBSineTriangle_setFreq_veneer+0x4>
    d1ac:	24017809 	.word	0x24017809

0000d1b0 <__tVZFilterBell_setGain_veneer>:
    d1b0:	f85f f000 	ldr.w	pc, [pc]	; d1b4 <__tVZFilterBell_setGain_veneer+0x4>
    d1b4:	24015a4d 	.word	0x24015a4d

0000d1b8 <__tHighpass_tick_veneer>:
    d1b8:	f85f f000 	ldr.w	pc, [pc]	; d1bc <__tHighpass_tick_veneer+0x4>
    d1bc:	2401420d 	.word	0x2401420d

0000d1c0 <__tEnvelopeFollower_tick_veneer>:
    d1c0:	f85f f000 	ldr.w	pc, [pc]	; d1c4 <__tEnvelopeFollower_tick_veneer+0x4>
    d1c4:	24011c31 	.word	0x24011c31

0000d1c8 <__MX_SPI6_Init_veneer>:
    d1c8:	f85f f000 	ldr.w	pc, [pc]	; d1cc <__MX_SPI6_Init_veneer+0x4>
    d1cc:	24003f69 	.word	0x24003f69

0000d1d0 <__tSimpleLivingString3_free_veneer>:
    d1d0:	f85f f000 	ldr.w	pc, [pc]	; d1d4 <__tSimpleLivingString3_free_veneer+0x4>
    d1d4:	24018801 	.word	0x24018801

0000d1d8 <__tStiffString_setPickupPosNoUpdate_veneer>:
    d1d8:	f85f f000 	ldr.w	pc, [pc]	; d1dc <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    d1dc:	2401ab95 	.word	0x2401ab95

0000d1e0 <__HAL_SPI_Abort_veneer>:
    d1e0:	f85f f000 	ldr.w	pc, [pc]	; d1e4 <__HAL_SPI_Abort_veneer+0x4>
    d1e4:	2400cc8d 	.word	0x2400cc8d

0000d1e8 <__tTString_setPickupAmount_veneer>:
    d1e8:	f85f f000 	ldr.w	pc, [pc]	; d1ec <__tTString_setPickupAmount_veneer+0x4>
    d1ec:	24019f11 	.word	0x24019f11

0000d1f0 <__tSimpleLivingString3_setDecay_veneer>:
    d1f0:	f85f f000 	ldr.w	pc, [pc]	; d1f4 <__tSimpleLivingString3_setDecay_veneer+0x4>
    d1f4:	24018901 	.word	0x24018901

0000d1f8 <__memset_veneer>:
    d1f8:	f85f f000 	ldr.w	pc, [pc]	; d1fc <__memset_veneer+0x4>
    d1fc:	2401c671 	.word	0x2401c671

0000d200 <__tStiffString_mute_veneer>:
    d200:	f85f f000 	ldr.w	pc, [pc]	; d204 <__tStiffString_mute_veneer+0x4>
    d204:	2401aa39 	.word	0x2401aa39

0000d208 <__tVZFilterHS_tick_veneer>:
    d208:	f85f f000 	ldr.w	pc, [pc]	; d20c <__tVZFilterHS_tick_veneer+0x4>
    d20c:	240152ad 	.word	0x240152ad

0000d210 <__tExpSmooth_setVal_veneer>:
    d210:	f85f f000 	ldr.w	pc, [pc]	; d214 <__tExpSmooth_setVal_veneer+0x4>
    d214:	240132bd 	.word	0x240132bd

0000d218 <__tVZFilterHS_setGain_veneer>:
    d218:	f85f f000 	ldr.w	pc, [pc]	; d21c <__tVZFilterHS_setGain_veneer+0x4>
    d21c:	24015391 	.word	0x24015391

0000d220 <__tCrusher_tick_veneer>:
    d220:	f85f f000 	ldr.w	pc, [pc]	; d224 <__tCrusher_tick_veneer+0x4>
    d224:	24012731 	.word	0x24012731

0000d228 <__tVoc_set_tractLength_veneer>:
    d228:	f85f f000 	ldr.w	pc, [pc]	; d22c <__tVoc_set_tractLength_veneer+0x4>
    d22c:	2401c105 	.word	0x2401c105

0000d230 <__audioSwitchToSynth_veneer>:
    d230:	f85f f000 	ldr.w	pc, [pc]	; d234 <__audioSwitchToSynth_veneer+0x4>
    d234:	24004c91 	.word	0x24004c91

0000d238 <__tExpSmooth_setDest_veneer>:
    d238:	f85f f000 	ldr.w	pc, [pc]	; d23c <__tExpSmooth_setDest_veneer+0x4>
    d23c:	240132b5 	.word	0x240132b5

0000d240 <__tVZFilterBR_setFreqFast_veneer>:
    d240:	f85f f000 	ldr.w	pc, [pc]	; d244 <__tVZFilterBR_setFreqFast_veneer+0x4>
    d244:	24015ce1 	.word	0x24015ce1

0000d248 <__tPickupNonLinearity_init_veneer>:
    d248:	f85f f000 	ldr.w	pc, [pc]	; d24c <__tPickupNonLinearity_init_veneer+0x4>
    d24c:	24018499 	.word	0x24018499

0000d250 <__tVoc_set_velum_veneer>:
    d250:	f85f f000 	ldr.w	pc, [pc]	; d254 <__tVoc_set_velum_veneer+0x4>
    d254:	2401c119 	.word	0x2401c119

0000d258 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    d258:	f85f f000 	ldr.w	pc, [pc]	; d25c <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    d25c:	2401c13d 	.word	0x2401c13d

0000d260 <__tStiffString_tick_veneer>:
    d260:	f85f f000 	ldr.w	pc, [pc]	; d264 <__tStiffString_tick_veneer+0x4>
    d264:	2401a99d 	.word	0x2401a99d

0000d268 <__tOversampler_downsample_veneer>:
    d268:	f85f f000 	ldr.w	pc, [pc]	; d26c <__tOversampler_downsample_veneer+0x4>
    d26c:	2401263d 	.word	0x2401263d

0000d270 <__tTiltFilter_setTilt_veneer>:
    d270:	f85f f000 	ldr.w	pc, [pc]	; d274 <__tTiltFilter_setTilt_veneer+0x4>
    d274:	24016ba9 	.word	0x24016ba9

0000d278 <__tLadderFilter_tick_veneer>:
    d278:	f85f f000 	ldr.w	pc, [pc]	; d27c <__tLadderFilter_tick_veneer+0x4>
    d27c:	24016749 	.word	0x24016749

0000d280 <__tPBSaw_setFreq_veneer>:
    d280:	f85f f000 	ldr.w	pc, [pc]	; d284 <__tPBSaw_setFreq_veneer+0x4>
    d284:	24017aed 	.word	0x24017aed

0000d288 <__tSVF_tickLP_veneer>:
    d288:	f85f f000 	ldr.w	pc, [pc]	; d28c <__tSVF_tickLP_veneer+0x4>
    d28c:	24013da1 	.word	0x24013da1

0000d290 <__tCrusher_setOperation_veneer>:
    d290:	f85f f000 	ldr.w	pc, [pc]	; d294 <__tCrusher_setOperation_veneer+0x4>
    d294:	240127d9 	.word	0x240127d9

0000d298 <__tADSRT_tickNoInterp_veneer>:
    d298:	f85f f000 	ldr.w	pc, [pc]	; d29c <__tADSRT_tickNoInterp_veneer+0x4>
    d29c:	2401304d 	.word	0x2401304d

0000d2a0 <__tIntPhasor_setPhase_veneer>:
    d2a0:	f85f f000 	ldr.w	pc, [pc]	; d2a4 <__tIntPhasor_setPhase_veneer+0x4>
    d2a4:	24017e21 	.word	0x24017e21

0000d2a8 <__expf_veneer>:
    d2a8:	f85f f000 	ldr.w	pc, [pc]	; d2ac <__expf_veneer+0x4>
    d2ac:	2401c6f1 	.word	0x2401c6f1

0000d2b0 <__tTString_setRippleDepth_veneer>:
    d2b0:	f85f f000 	ldr.w	pc, [pc]	; d2b4 <__tTString_setRippleDepth_veneer+0x4>
    d2b4:	2401a039 	.word	0x2401a039

0000d2b8 <__tTString_setFreq_veneer>:
    d2b8:	f85f f000 	ldr.w	pc, [pc]	; d2bc <__tTString_setFreq_veneer+0x4>
    d2bc:	24019df1 	.word	0x24019df1

0000d2c0 <__tPickupNonLinearity_tick_veneer>:
    d2c0:	f85f f000 	ldr.w	pc, [pc]	; d2c4 <__tPickupNonLinearity_tick_veneer+0x4>
    d2c4:	240184b9 	.word	0x240184b9

0000d2c8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    d2c8:	f85f f000 	ldr.w	pc, [pc]	; d2cc <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    d2cc:	24018961 	.word	0x24018961

0000d2d0 <__tExpSmooth_tick_veneer>:
    d2d0:	f85f f000 	ldr.w	pc, [pc]	; d2d4 <__tExpSmooth_tick_veneer+0x4>
    d2d4:	240132d1 	.word	0x240132d1

0000d2d8 <__tSawSquareLFO_tick_veneer>:
    d2d8:	f85f f000 	ldr.w	pc, [pc]	; d2dc <__tSawSquareLFO_tick_veneer+0x4>
    d2dc:	24018101 	.word	0x24018101

0000d2e0 <__tCycle_tick_veneer>:
    d2e0:	f85f f000 	ldr.w	pc, [pc]	; d2e4 <__tCycle_tick_veneer+0x4>
    d2e4:	24017265 	.word	0x24017265

0000d2e8 <__tExpSmooth_setValAndDest_veneer>:
    d2e8:	f85f f000 	ldr.w	pc, [pc]	; d2ec <__tExpSmooth_setValAndDest_veneer+0x4>
    d2ec:	240132c5 	.word	0x240132c5

0000d2f0 <__tTapeDelay_setDelay_veneer>:
    d2f0:	f85f f000 	ldr.w	pc, [pc]	; d2f4 <__tTapeDelay_setDelay_veneer+0x4>
    d2f4:	24012481 	.word	0x24012481

0000d2f8 <__tCycle_setFreq_veneer>:
    d2f8:	f85f f000 	ldr.w	pc, [pc]	; d2fc <__tCycle_setFreq_veneer+0x4>
    d2fc:	240172b5 	.word	0x240172b5

0000d300 <__tSimpleLivingString3_setLevMode_veneer>:
    d300:	f85f f000 	ldr.w	pc, [pc]	; d304 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    d304:	24018971 	.word	0x24018971

0000d308 <__tVZFilter_setFrequencyAndResonance_veneer>:
    d308:	f85f f000 	ldr.w	pc, [pc]	; d30c <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    d30c:	24014a11 	.word	0x24014a11

0000d310 <__tStiffString_updateOutputWeights_veneer>:
    d310:	f85f f000 	ldr.w	pc, [pc]	; d314 <__tStiffString_updateOutputWeights_veneer+0x4>
    d314:	2401a8f5 	.word	0x2401a8f5

0000d318 <__audioFreeSynth_veneer>:
    d318:	f85f f000 	ldr.w	pc, [pc]	; d31c <__audioFreeSynth_veneer+0x4>
    d31c:	24004c4d 	.word	0x24004c4d

0000d320 <__tSimpleLivingString3_initToPool_veneer>:
    d320:	f85f f000 	ldr.w	pc, [pc]	; d324 <__tSimpleLivingString3_initToPool_veneer+0x4>
    d324:	2401852d 	.word	0x2401852d

0000d328 <__tSimpleLivingString3_setFreq_veneer>:
    d328:	f85f f000 	ldr.w	pc, [pc]	; d32c <__tSimpleLivingString3_setFreq_veneer+0x4>
    d32c:	24018841 	.word	0x24018841

0000d330 <__tLadderFilter_setQ_veneer>:
    d330:	f85f f000 	ldr.w	pc, [pc]	; d334 <__tLadderFilter_setQ_veneer+0x4>
    d334:	24016a7d 	.word	0x24016a7d

0000d338 <__tTString_setPickupFilterQ_veneer>:
    d338:	f85f f000 	ldr.w	pc, [pc]	; d33c <__tTString_setPickupFilterQ_veneer+0x4>
    d33c:	2401a589 	.word	0x2401a589

0000d340 <__tVZFilter_tickEfficient_veneer>:
    d340:	f85f f000 	ldr.w	pc, [pc]	; d344 <__tVZFilter_tickEfficient_veneer+0x4>
    d344:	24014255 	.word	0x24014255

0000d348 <__tPBPulse_setWidth_veneer>:
    d348:	f85f f000 	ldr.w	pc, [pc]	; d34c <__tPBPulse_setWidth_veneer+0x4>
    d34c:	240179c1 	.word	0x240179c1

0000d350 <__tStiffString_setFreqNoUpdate_veneer>:
    d350:	f85f f000 	ldr.w	pc, [pc]	; d354 <__tStiffString_setFreqNoUpdate_veneer+0x4>
    d354:	2401abe5 	.word	0x2401abe5

0000d358 <__tTString_pluck_veneer>:
    d358:	f85f f000 	ldr.w	pc, [pc]	; d35c <__tTString_pluck_veneer+0x4>
    d35c:	2401a1a9 	.word	0x2401a1a9

0000d360 <__tTString_tick_veneer>:
    d360:	f85f f000 	ldr.w	pc, [pc]	; d364 <__tTString_tick_veneer+0x4>
    d364:	24019435 	.word	0x24019435

0000d368 <__tVZFilterLS_setResonance_veneer>:
    d368:	f85f f000 	ldr.w	pc, [pc]	; d36c <__tVZFilterLS_setResonance_veneer+0x4>
    d36c:	24014f59 	.word	0x24014f59

0000d370 <__tPBPulse_setFreq_veneer>:
    d370:	f85f f000 	ldr.w	pc, [pc]	; d374 <__tPBPulse_setFreq_veneer+0x4>
    d374:	240179a9 	.word	0x240179a9

0000d378 <__tSVF_setFreqFast_veneer>:
    d378:	f85f f000 	ldr.w	pc, [pc]	; d37c <__tSVF_setFreqFast_veneer+0x4>
    d37c:	24013e59 	.word	0x24013e59

0000d380 <__tCrusher_setSamplingRatio_veneer>:
    d380:	f85f f000 	ldr.w	pc, [pc]	; d384 <__tCrusher_setSamplingRatio_veneer+0x4>
    d384:	2401284d 	.word	0x2401284d

0000d388 <__tTString_setPickupModAmp_veneer>:
    d388:	f85f f000 	ldr.w	pc, [pc]	; d38c <__tTString_setPickupModAmp_veneer+0x4>
    d38c:	24019f19 	.word	0x24019f19

0000d390 <__tStiffString_setFreq_veneer>:
    d390:	f85f f000 	ldr.w	pc, [pc]	; d394 <__tStiffString_setFreq_veneer+0x4>
    d394:	2401aa2d 	.word	0x2401aa2d

0000d398 <__tADSRT_tick_veneer>:
    d398:	f85f f000 	ldr.w	pc, [pc]	; d39c <__tADSRT_tick_veneer+0x4>
    d39c:	24012d2d 	.word	0x24012d2d

0000d3a0 <__tSineTriLFO_tick_veneer>:
    d3a0:	f85f f000 	ldr.w	pc, [pc]	; d3a4 <__tSineTriLFO_tick_veneer+0x4>
    d3a4:	24018391 	.word	0x24018391

0000d3a8 <__tVoc_setAspirationNoiseGain_veneer>:
    d3a8:	f85f f000 	ldr.w	pc, [pc]	; d3ac <__tVoc_setAspirationNoiseGain_veneer+0x4>
    d3ac:	2401c131 	.word	0x2401c131

0000d3b0 <__tExpSmooth_free_veneer>:
    d3b0:	f85f f000 	ldr.w	pc, [pc]	; d3b4 <__tExpSmooth_free_veneer+0x4>
    d3b4:	24013289 	.word	0x24013289

0000d3b8 <__changeOversampling_veneer>:
    d3b8:	f85f f000 	ldr.w	pc, [pc]	; d3bc <__changeOversampling_veneer+0x4>
    d3bc:	24004da5 	.word	0x24004da5

0000d3c0 <__tSquareLFO_tick_veneer>:
    d3c0:	f85f f000 	ldr.w	pc, [pc]	; d3c4 <__tSquareLFO_tick_veneer+0x4>
    d3c4:	24017f95 	.word	0x24017f95

0000d3c8 <__tADSRT_setLeakFactor_veneer>:
    d3c8:	f85f f000 	ldr.w	pc, [pc]	; d3cc <__tADSRT_setLeakFactor_veneer+0x4>
    d3cc:	24012cc5 	.word	0x24012cc5

0000d3d0 <__tVoc_set_tenseness_veneer>:
    d3d0:	f85f f000 	ldr.w	pc, [pc]	; d3d4 <__tVoc_set_tenseness_veneer+0x4>
    d3d4:	2401c10d 	.word	0x2401c10d

0000d3d8 <__tCompressor_tickWithTableHardKnee_veneer>:
    d3d8:	f85f f000 	ldr.w	pc, [pc]	; d3dc <__tCompressor_tickWithTableHardKnee_veneer+0x4>
    d3dc:	24012901 	.word	0x24012901

0000d3e0 <__tADSRT_off_veneer>:
    d3e0:	f85f f000 	ldr.w	pc, [pc]	; d3e4 <__tADSRT_off_veneer+0x4>
    d3e4:	24012d11 	.word	0x24012d11

0000d3e8 <__tVZFilterBell_setBandwidth_veneer>:
    d3e8:	f85f f000 	ldr.w	pc, [pc]	; d3ec <__tVZFilterBell_setBandwidth_veneer+0x4>
    d3ec:	240157d5 	.word	0x240157d5

0000d3f0 <__tTriLFO_setFreq_veneer>:
    d3f0:	f85f f000 	ldr.w	pc, [pc]	; d3f4 <__tTriLFO_setFreq_veneer+0x4>
    d3f4:	240182cd 	.word	0x240182cd

0000d3f8 <__tPBSaw_tick_veneer>:
    d3f8:	f85f f000 	ldr.w	pc, [pc]	; d3fc <__tPBSaw_tick_veneer+0x4>
    d3fc:	24017a45 	.word	0x24017a45

0000d400 <__HAL_I2C_Slave_Receive_IT_veneer>:
    d400:	f85f f000 	ldr.w	pc, [pc]	; d404 <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    d404:	240081a1 	.word	0x240081a1

0000d408 <__tCycle_setPhase_veneer>:
    d408:	f85f f000 	ldr.w	pc, [pc]	; d40c <__tCycle_setPhase_veneer+0x4>
    d40c:	240172cd 	.word	0x240172cd

0000d410 <__tVZFilterBR_setResonance_veneer>:
    d410:	f85f f000 	ldr.w	pc, [pc]	; d414 <__tVZFilterBR_setResonance_veneer+0x4>
    d414:	24015d6d 	.word	0x24015d6d

0000d418 <__tPBSineTriangle_setShape_veneer>:
    d418:	f85f f000 	ldr.w	pc, [pc]	; d41c <__tPBSineTriangle_setShape_veneer+0x4>
    d41c:	24017839 	.word	0x24017839

0000d420 <__memcpy_veneer>:
    d420:	f85f f000 	ldr.w	pc, [pc]	; d424 <__memcpy_veneer+0x4>
    d424:	2401c6d5 	.word	0x2401c6d5

0000d428 <__tVZFilterLS_setFreqFast_veneer>:
    d428:	f85f f000 	ldr.w	pc, [pc]	; d42c <__tVZFilterLS_setFreqFast_veneer+0x4>
    d42c:	24014e05 	.word	0x24014e05

0000d430 <__tTString_setBarPosition_veneer>:
    d430:	f85f f000 	ldr.w	pc, [pc]	; d434 <__tTString_setBarPosition_veneer+0x4>
    d434:	2401a001 	.word	0x2401a001

0000d438 <__tSineTriLFO_setFreq_veneer>:
    d438:	f85f f000 	ldr.w	pc, [pc]	; d43c <__tSineTriLFO_setFreq_veneer+0x4>
    d43c:	24018431 	.word	0x24018431

0000d440 <__tPBTriangle_setSkew_veneer>:
    d440:	f85f f000 	ldr.w	pc, [pc]	; d444 <__tPBTriangle_setSkew_veneer+0x4>
    d444:	24017519 	.word	0x24017519

0000d448 <__tADSRT_setRelease_veneer>:
    d448:	f85f f000 	ldr.w	pc, [pc]	; d44c <__tADSRT_setRelease_veneer+0x4>
    d44c:	24012c99 	.word	0x24012c99

0000d450 <__tSimpleLivingString3_tick_veneer>:
    d450:	f85f f000 	ldr.w	pc, [pc]	; d454 <__tSimpleLivingString3_tick_veneer+0x4>
    d454:	24018add 	.word	0x24018add

0000d458 <__tDiodeFilter_setQ_veneer>:
    d458:	f85f f000 	ldr.w	pc, [pc]	; d45c <__tDiodeFilter_setQ_veneer+0x4>
    d45c:	2401659d 	.word	0x2401659d

0000d460 <__tTString_setPhantomHarmonicsGain_veneer>:
    d460:	f85f f000 	ldr.w	pc, [pc]	; d464 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    d464:	2401a029 	.word	0x2401a029

0000d468 <__tLadderFilter_setFreqFast_veneer>:
    d468:	f85f f000 	ldr.w	pc, [pc]	; d46c <__tLadderFilter_setFreqFast_veneer+0x4>
    d46c:	24016a05 	.word	0x24016a05

0000d470 <__tStiffString_setPluckPosNoUpdate_veneer>:
    d470:	f85f f000 	ldr.w	pc, [pc]	; d474 <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    d474:	2401abbd 	.word	0x2401abbd

0000d478 <__arm_sin_f32_veneer>:
    d478:	f85f f000 	ldr.w	pc, [pc]	; d47c <__arm_sin_f32_veneer+0x4>
    d47c:	24000869 	.word	0x24000869

0000d480 <__tVZFilterBR_tick_veneer>:
    d480:	f85f f000 	ldr.w	pc, [pc]	; d484 <__tVZFilterBR_tick_veneer+0x4>
    d484:	24015c91 	.word	0x24015c91

0000d488 <__tSawSquareLFO_setPhase_veneer>:
    d488:	f85f f000 	ldr.w	pc, [pc]	; d48c <__tSawSquareLFO_setPhase_veneer+0x4>
    d48c:	240181cd 	.word	0x240181cd

0000d490 <__tSawSquareLFO_setFreq_veneer>:
    d490:	f85f f000 	ldr.w	pc, [pc]	; d494 <__tSawSquareLFO_setFreq_veneer+0x4>
    d494:	24018185 	.word	0x24018185

0000d498 <__tPBTriangle_tick_veneer>:
    d498:	f85f f000 	ldr.w	pc, [pc]	; d49c <__tPBTriangle_tick_veneer+0x4>
    d49c:	24017361 	.word	0x24017361

0000d4a0 <__tVZFilterBell_setFreq_veneer>:
    d4a0:	f85f f000 	ldr.w	pc, [pc]	; d4a4 <__tVZFilterBell_setFreq_veneer+0x4>
    d4a4:	240157dd 	.word	0x240157dd

0000d4a8 <__tTriLFO_tick_veneer>:
    d4a8:	f85f f000 	ldr.w	pc, [pc]	; d4ac <__tTriLFO_tick_veneer+0x4>
    d4ac:	24018295 	.word	0x24018295

0000d4b0 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    d4b0:	f85f f000 	ldr.w	pc, [pc]	; d4b4 <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    d4b4:	2401abf5 	.word	0x2401abf5

0000d4b8 <__tSVF_LP_tick_veneer>:
    d4b8:	f85f f000 	ldr.w	pc, [pc]	; d4bc <__tSVF_LP_tick_veneer+0x4>
    d4bc:	24014075 	.word	0x24014075

0000d4c0 <__tTString_mute_veneer>:
    d4c0:	f85f f000 	ldr.w	pc, [pc]	; d4c4 <__tTString_mute_veneer+0x4>
    d4c4:	24019f31 	.word	0x24019f31

0000d4c8 <__tADSRT_on_veneer>:
    d4c8:	f85f f000 	ldr.w	pc, [pc]	; d4cc <__tADSRT_on_veneer+0x4>
    d4cc:	24012ced 	.word	0x24012ced

0000d4d0 <__tTString_setPeakFilterQ_veneer>:
    d4d0:	f85f f000 	ldr.w	pc, [pc]	; d4d4 <__tTString_setPeakFilterQ_veneer+0x4>
    d4d4:	2401a5a5 	.word	0x2401a5a5

0000d4d8 <__tADSRT_init_veneer>:
    d4d8:	f85f f000 	ldr.w	pc, [pc]	; d4dc <__tADSRT_init_veneer+0x4>
    d4dc:	24012b61 	.word	0x24012b61

0000d4e0 <__tTString_setPickupPos_veneer>:
    d4e0:	f85f f000 	ldr.w	pc, [pc]	; d4e4 <__tTString_setPickupPos_veneer+0x4>
    d4e4:	24019f09 	.word	0x24019f09

0000d4e8 <__dbToATableLookup_veneer>:
    d4e8:	f85f f000 	ldr.w	pc, [pc]	; d4ec <__dbToATableLookup_veneer+0x4>
    d4ec:	24000909 	.word	0x24000909

0000d4f0 <__tPBSawSquare_setFreq_veneer>:
    d4f0:	f85f f000 	ldr.w	pc, [pc]	; d4f4 <__tPBSawSquare_setFreq_veneer+0x4>
    d4f4:	24017c7d 	.word	0x24017c7d

0000d4f8 <__tDiodeFilter_tickEfficient_veneer>:
    d4f8:	f85f f000 	ldr.w	pc, [pc]	; d4fc <__tDiodeFilter_tickEfficient_veneer+0x4>
    d4fc:	24015eed 	.word	0x24015eed

0000d500 <__tTString_setOpenStringFrequency_veneer>:
    d500:	f85f f000 	ldr.w	pc, [pc]	; d504 <__tTString_setOpenStringFrequency_veneer+0x4>
    d504:	2401a011 	.word	0x2401a011

0000d508 <__tLinearDelay_tick_veneer>:
    d508:	f85f f000 	ldr.w	pc, [pc]	; d50c <__tLinearDelay_tick_veneer+0x4>
    d50c:	24011e19 	.word	0x24011e19

0000d510 <__tVoc_rescaleDiameter_veneer>:
    d510:	f85f f000 	ldr.w	pc, [pc]	; d514 <__tVoc_rescaleDiameter_veneer+0x4>
    d514:	2401c53d 	.word	0x2401c53d

0000d518 <__tSquareLFO_setPhase_veneer>:
    d518:	f85f f000 	ldr.w	pc, [pc]	; d51c <__tSquareLFO_setPhase_veneer+0x4>
    d51c:	24018055 	.word	0x24018055

0000d520 <__tSimpleLivingString3_setLevStrength_veneer>:
    d520:	f85f f000 	ldr.w	pc, [pc]	; d524 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    d524:	24018969 	.word	0x24018969

0000d528 <__tPickupNonLinearity_free_veneer>:
    d528:	f85f f000 	ldr.w	pc, [pc]	; d52c <__tPickupNonLinearity_free_veneer+0x4>
    d52c:	240184b1 	.word	0x240184b1

0000d530 <__tTString_setDecayInSeconds_veneer>:
    d530:	f85f f000 	ldr.w	pc, [pc]	; d534 <__tTString_setDecayInSeconds_veneer+0x4>
    d534:	24019e71 	.word	0x24019e71

0000d538 <__tVZFilterLS_tick_veneer>:
    d538:	f85f f000 	ldr.w	pc, [pc]	; d53c <__tVZFilterLS_tick_veneer+0x4>
    d53c:	24014db1 	.word	0x24014db1

0000d540 <__tTriLFO_setPhase_veneer>:
    d540:	f85f f000 	ldr.w	pc, [pc]	; d544 <__tTriLFO_setPhase_veneer+0x4>
    d544:	240182e5 	.word	0x240182e5

0000d548 <__tTString_setFeedbackReactionSpeed_veneer>:
    d548:	f85f f000 	ldr.w	pc, [pc]	; d54c <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    d54c:	2401a165 	.word	0x2401a165

0000d550 <__tVZFilterBell_setFreqFast_veneer>:
    d550:	f85f f000 	ldr.w	pc, [pc]	; d554 <__tVZFilterBell_setFreqFast_veneer+0x4>
    d554:	24015901 	.word	0x24015901

0000d558 <__tExpSmooth_init_veneer>:
    d558:	f85f f000 	ldr.w	pc, [pc]	; d55c <__tExpSmooth_init_veneer+0x4>
    d55c:	240131f1 	.word	0x240131f1

0000d560 <__tSimpleLivingString3_setPickupPoint_veneer>:
    d560:	f85f f000 	ldr.w	pc, [pc]	; d564 <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    d564:	24018c85 	.word	0x24018c85

0000d568 <__tTString_setInharmonic_veneer>:
    d568:	f85f f000 	ldr.w	pc, [pc]	; d56c <__tTString_setInharmonic_veneer+0x4>
    d56c:	2401a4f9 	.word	0x2401a4f9

0000d570 <__tTString_setTensionGain_veneer>:
    d570:	f85f f000 	ldr.w	pc, [pc]	; d574 <__tTString_setTensionGain_veneer+0x4>
    d574:	24019ff9 	.word	0x24019ff9

0000d578 <__setEffectsFunctions_veneer>:
    d578:	f85f f000 	ldr.w	pc, [pc]	; d57c <__setEffectsFunctions_veneer+0x4>
    d57c:	240020bd 	.word	0x240020bd

0000d580 <__tStiffString_setDecayNoUpdate_veneer>:
    d580:	f85f f000 	ldr.w	pc, [pc]	; d584 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    d584:	2401abed 	.word	0x2401abed

0000d588 <__tPBPulse_tick_veneer>:
    d588:	f85f f000 	ldr.w	pc, [pc]	; d58c <__tPBPulse_tick_veneer+0x4>
    d58c:	2401788d 	.word	0x2401788d

0000d590 <__tIntPhasor_setFreq_veneer>:
    d590:	f85f f000 	ldr.w	pc, [pc]	; d594 <__tIntPhasor_setFreq_veneer+0x4>
    d594:	24017e09 	.word	0x24017e09

0000d598 <__mtofTableLookup_veneer>:
    d598:	f85f f000 	ldr.w	pc, [pc]	; d59c <__mtofTableLookup_veneer+0x4>
    d59c:	2400098d 	.word	0x2400098d

0000d5a0 <__tCycle_init_veneer>:
    d5a0:	f85f f000 	ldr.w	pc, [pc]	; d5a4 <__tCycle_init_veneer+0x4>
    d5a4:	240171ed 	.word	0x240171ed

0000d5a8 <__tSVF_tickBP_veneer>:
    d5a8:	f85f f000 	ldr.w	pc, [pc]	; d5ac <__tSVF_tickBP_veneer+0x4>
    d5ac:	24013d61 	.word	0x24013d61

0000d5b0 <__tSimpleLivingString3_setDampFreq_veneer>:
    d5b0:	f85f f000 	ldr.w	pc, [pc]	; d5b4 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    d5b4:	240188f9 	.word	0x240188f9

0000d5b8 <__tADSRT_setSustain_veneer>:
    d5b8:	f85f f000 	ldr.w	pc, [pc]	; d5bc <__tADSRT_setSustain_veneer+0x4>
    d5bc:	24012c7d 	.word	0x24012c7d

0000d5c0 <__tTString_setWindingsPerInch_veneer>:
    d5c0:	f85f f000 	ldr.w	pc, [pc]	; d5c4 <__tTString_setWindingsPerInch_veneer+0x4>
    d5c4:	2401a571 	.word	0x2401a571

0000d5c8 <__tVZFilterHS_setResonance_veneer>:
    d5c8:	f85f f000 	ldr.w	pc, [pc]	; d5cc <__tVZFilterHS_setResonance_veneer+0x4>
    d5cc:	24015451 	.word	0x24015451

0000d5d0 <__tanhf_veneer>:
    d5d0:	f85f f000 	ldr.w	pc, [pc]	; d5d4 <__tanhf_veneer+0x4>
    d5d4:	2401cffd 	.word	0x2401cffd

0000d5d8 <__tTString_setFeedbackStrength_veneer>:
    d5d8:	f85f f000 	ldr.w	pc, [pc]	; d5dc <__tTString_setFeedbackStrength_veneer+0x4>
    d5dc:	2401a119 	.word	0x2401a119

0000d5e0 <__setLFOShapes_veneer>:
    d5e0:	f85f f000 	ldr.w	pc, [pc]	; d5e4 <__setLFOShapes_veneer+0x4>
    d5e4:	24002a91 	.word	0x24002a91

0000d5e8 <__tSquareLFO_setPulseWidth_veneer>:
    d5e8:	f85f f000 	ldr.w	pc, [pc]	; d5ec <__tSquareLFO_setPulseWidth_veneer+0x4>
    d5ec:	24018011 	.word	0x24018011

0000d5f0 <__tDiodeFilter_setFreqFast_veneer>:
    d5f0:	f85f f000 	ldr.w	pc, [pc]	; d5f4 <__tDiodeFilter_setFreqFast_veneer+0x4>
    d5f4:	240164a1 	.word	0x240164a1

0000d5f8 <__tADSRT_setDecay_veneer>:
    d5f8:	f85f f000 	ldr.w	pc, [pc]	; d5fc <__tADSRT_setDecay_veneer+0x4>
    d5fc:	24012c51 	.word	0x24012c51

0000d600 <__tStiffString_init_veneer>:
    d600:	f85f f000 	ldr.w	pc, [pc]	; d604 <__tStiffString_init_veneer+0x4>
    d604:	2401a75d 	.word	0x2401a75d

0000d608 <__MX_SPI1_Init_veneer>:
    d608:	f85f f000 	ldr.w	pc, [pc]	; d60c <__MX_SPI1_Init_veneer+0x4>
    d60c:	24003f15 	.word	0x24003f15

0000d610 <__tVoc_setFreq_veneer>:
    d610:	f85f f000 	ldr.w	pc, [pc]	; d614 <__tVoc_setFreq_veneer+0x4>
    d614:	2401c0f9 	.word	0x2401c0f9

0000d618 <__tPBTriangle_setFreq_veneer>:
    d618:	f85f f000 	ldr.w	pc, [pc]	; d61c <__tPBTriangle_setFreq_veneer+0x4>
    d61c:	24017501 	.word	0x24017501

0000d620 <__tLinearDelay_setDelay_veneer>:
    d620:	f85f f000 	ldr.w	pc, [pc]	; d624 <__tLinearDelay_setDelay_veneer+0x4>
    d624:	24011f11 	.word	0x24011f11

0000d628 <__tIntPhasor_tick_veneer>:
    d628:	f85f f000 	ldr.w	pc, [pc]	; d62c <__tIntPhasor_tick_veneer+0x4>
    d62c:	24017de5 	.word	0x24017de5

0000d630 <__tTString_setHarmonic_veneer>:
    d630:	f85f f000 	ldr.w	pc, [pc]	; d634 <__tTString_setHarmonic_veneer+0x4>
    d634:	2401a105 	.word	0x2401a105

0000d638 <__tTString_setWoundOrUnwound_veneer>:
    d638:	f85f f000 	ldr.w	pc, [pc]	; d63c <__tTString_setWoundOrUnwound_veneer+0x4>
    d63c:	2401a50d 	.word	0x2401a50d

0000d640 <__tStiffString_free_veneer>:
    d640:	f85f f000 	ldr.w	pc, [pc]	; d644 <__tStiffString_free_veneer+0x4>
    d644:	2401a765 	.word	0x2401a765

0000d648 <__tTString_free_veneer>:
    d648:	f85f f000 	ldr.w	pc, [pc]	; d64c <__tTString_free_veneer+0x4>
    d64c:	24019321 	.word	0x24019321

0000d650 <__tStiffString_pluck_veneer>:
    d650:	f85f f000 	ldr.w	pc, [pc]	; d654 <__tStiffString_pluck_veneer+0x4>
    d654:	2401aa49 	.word	0x2401aa49

0000d658 <__tSVF_setQ_veneer>:
    d658:	f85f f000 	ldr.w	pc, [pc]	; d65c <__tSVF_setQ_veneer+0x4>
    d65c:	24013ee9 	.word	0x24013ee9

0000d660 <__tTString_setPeakFilterFreq_veneer>:
    d660:	f85f f000 	ldr.w	pc, [pc]	; d664 <__tTString_setPeakFilterFreq_veneer+0x4>
    d664:	2401a599 	.word	0x2401a599

0000d668 <__tVoc_setDoubleComputeFlag_veneer>:
    d668:	f85f f000 	ldr.w	pc, [pc]	; d66c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    d66c:	2401c0f1 	.word	0x2401c0f1

0000d670 <__tSineTriLFO_setPhase_veneer>:
    d670:	f85f f000 	ldr.w	pc, [pc]	; d674 <__tSineTriLFO_setPhase_veneer+0x4>
    d674:	24018461 	.word	0x24018461

0000d678 <__tVoc_init_veneer>:
    d678:	f85f f000 	ldr.w	pc, [pc]	; d67c <__tVoc_init_veneer+0x4>
    d67c:	2401bfe1 	.word	0x2401bfe1

0000d680 <__tTString_initToPool_veneer>:
    d680:	f85f f000 	ldr.w	pc, [pc]	; d684 <__tTString_initToPool_veneer+0x4>
    d684:	24018c8d 	.word	0x24018c8d

0000d688 <__tPBSawSquare_tick_veneer>:
    d688:	f85f f000 	ldr.w	pc, [pc]	; d68c <__tPBSawSquare_tick_veneer+0x4>
    d68c:	24017b3d 	.word	0x24017b3d

0000d690 <__tTString_setPickupModFreq_veneer>:
    d690:	f85f f000 	ldr.w	pc, [pc]	; d694 <__tTString_setPickupModFreq_veneer+0x4>
    d694:	24019f21 	.word	0x24019f21

0000d698 <__tVoc_tick_veneer>:
    d698:	f85f f000 	ldr.w	pc, [pc]	; d69c <__tVoc_tick_veneer+0x4>
    d69c:	2401c051 	.word	0x2401c051

0000d6a0 <__tTString_setFilterFreqDirectly_veneer>:
    d6a0:	f85f f000 	ldr.w	pc, [pc]	; d6a4 <__tTString_setFilterFreqDirectly_veneer+0x4>
    d6a4:	24019fa1 	.word	0x24019fa1

0000d6a8 <__tSineTriLFO_setShape_veneer>:
    d6a8:	f85f f000 	ldr.w	pc, [pc]	; d6ac <__tSineTriLFO_setShape_veneer+0x4>
    d6ac:	24018491 	.word	0x24018491

0000d6b0 <__tVZFilter_setFreq_veneer>:
    d6b0:	f85f f000 	ldr.w	pc, [pc]	; d6b4 <__tVZFilter_setFreq_veneer+0x4>
    d6b4:	24014751 	.word	0x24014751

0000d6b8 <__tOversampler_upsample_veneer>:
    d6b8:	f85f f000 	ldr.w	pc, [pc]	; d6bc <__tOversampler_upsample_veneer+0x4>
    d6bc:	24012565 	.word	0x24012565

0000d6c0 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    d6c0:	f85f f000 	ldr.w	pc, [pc]	; d6c4 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    d6c4:	2400ca49 	.word	0x2400ca49

0000d6c8 <__tExpSmooth_setFactor_veneer>:
    d6c8:	f85f f000 	ldr.w	pc, [pc]	; d6cc <__tExpSmooth_setFactor_veneer+0x4>
    d6cc:	24013291 	.word	0x24013291

0000d6d0 <__tVZFilterHS_setFreqFast_veneer>:
    d6d0:	f85f f000 	ldr.w	pc, [pc]	; d6d4 <__tVZFilterHS_setFreqFast_veneer+0x4>
    d6d4:	24015301 	.word	0x24015301

0000d6d8 <__tVZFilterBR_setGain_veneer>:
    d6d8:	f85f f000 	ldr.w	pc, [pc]	; d6dc <__tVZFilterBR_setGain_veneer+0x4>
    d6dc:	24015d65 	.word	0x24015d65

0000d6e0 <__tCrusher_setQuality_veneer>:
    d6e0:	f85f f000 	ldr.w	pc, [pc]	; d6e4 <__tCrusher_setQuality_veneer+0x4>
    d6e4:	240127ed 	.word	0x240127ed

0000d6e8 <__setFilterTypes_veneer>:
    d6e8:	f85f f000 	ldr.w	pc, [pc]	; d6ec <__setFilterTypes_veneer+0x4>
    d6ec:	24002859 	.word	0x24002859

0000d6f0 <__tNoise_tick_veneer>:
    d6f0:	f85f f000 	ldr.w	pc, [pc]	; d6f4 <__tNoise_tick_veneer+0x4>
    d6f4:	24017cf1 	.word	0x24017cf1

0000d6f8 <__tPBSawSquare_setShape_veneer>:
    d6f8:	f85f f000 	ldr.w	pc, [pc]	; d6fc <__tPBSawSquare_setShape_veneer+0x4>
    d6fc:	24017c95 	.word	0x24017c95

0000d700 <__tSquareLFO_setFreq_veneer>:
    d700:	f85f f000 	ldr.w	pc, [pc]	; d704 <__tSquareLFO_setFreq_veneer+0x4>
    d704:	24017fe1 	.word	0x24017fe1

0000d708 <__tTiltFilter_tick_veneer>:
    d708:	f85f f000 	ldr.w	pc, [pc]	; d70c <__tTiltFilter_tick_veneer+0x4>
    d70c:	24016b71 	.word	0x24016b71

0000d710 <__tADSRT_setAttack_veneer>:
    d710:	f85f f000 	ldr.w	pc, [pc]	; d714 <__tADSRT_setAttack_veneer+0x4>
    d714:	24012c25 	.word	0x24012c25

0000d718 <__tStiffString_updateOscillators_veneer>:
    d718:	f85f f000 	ldr.w	pc, [pc]	; d71c <__tStiffString_updateOscillators_veneer+0x4>
    d71c:	2401a7b9 	.word	0x2401a7b9

0000d720 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    d720:	f85f f000 	ldr.w	pc, [pc]	; d724 <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    d724:	2401c15d 	.word	0x2401c15d

0000d728 <__tTString_setPickupFilterFreq_veneer>:
    d728:	f85f f000 	ldr.w	pc, [pc]	; d72c <__tTString_setPickupFilterFreq_veneer+0x4>
    d72c:	2401a581 	.word	0x2401a581

0000d730 <__tCrusher_setRound_veneer>:
    d730:	f85f f000 	ldr.w	pc, [pc]	; d734 <__tCrusher_setRound_veneer+0x4>
    d734:	24012845 	.word	0x24012845

0000d738 <__tVZFilterBell_tick_veneer>:
    d738:	f85f f000 	ldr.w	pc, [pc]	; d73c <__tVZFilterBell_tick_veneer+0x4>
    d73c:	2401577d 	.word	0x2401577d

0000d740 <__tStiffString_setStiffnessNoUpdate_veneer>:
    d740:	f85f f000 	ldr.w	pc, [pc]	; d744 <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    d744:	2401ab7d 	.word	0x2401ab7d

0000d748 <__tSVF_LP_setFreqFast_veneer>:
    d748:	f85f f000 	ldr.w	pc, [pc]	; d74c <__tSVF_LP_setFreqFast_veneer+0x4>
    d74c:	240140c5 	.word	0x240140c5

0000d750 <__tSawSquareLFO_setShape_veneer>:
    d750:	f85f f000 	ldr.w	pc, [pc]	; d754 <__tSawSquareLFO_setShape_veneer+0x4>
    d754:	24018239 	.word	0x24018239

0000d758 <__tTString_setSlideGain_veneer>:
    d758:	f85f f000 	ldr.w	pc, [pc]	; d75c <__tTString_setSlideGain_veneer+0x4>
    d75c:	2401a031 	.word	0x2401a031

0000d760 <__tVZFilterLS_setGain_veneer>:
    d760:	f85f f000 	ldr.w	pc, [pc]	; d764 <__tVZFilterLS_setGain_veneer+0x4>
    d764:	24014e95 	.word	0x24014e95

0000d768 <__tPBSineTriangle_tick_veneer>:
    d768:	f85f f000 	ldr.w	pc, [pc]	; d76c <__tPBSineTriangle_tick_veneer+0x4>
    d76c:	24017619 	.word	0x24017619

0000d770 <__tVoc_set_tongue_shape_and_touch_veneer>:
    d770:	f85f f000 	ldr.w	pc, [pc]	; d774 <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    d774:	2401c495 	.word	0x2401c495

0000d778 <__tSimpleLivingString3_setTargetLev_veneer>:
    d778:	f85f f000 	ldr.w	pc, [pc]	; d77c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    d77c:	24018959 	.word	0x24018959

0000d780 <__tTString_setHarmonicity_veneer>:
    d780:	f85f f000 	ldr.w	pc, [pc]	; d784 <__tTString_setHarmonicity_veneer+0x4>
    d784:	2401a4a1 	.word	0x2401a4a1

0000d788 <__tVoc_setTurbulenceNoiseGain_veneer>:
    d788:	f85f f000 	ldr.w	pc, [pc]	; d78c <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    d78c:	2401c125 	.word	0x2401c125

0000d790 <__tSVF_tickHP_veneer>:
    d790:	f85f f000 	ldr.w	pc, [pc]	; d794 <__tSVF_tickHP_veneer+0x4>
    d794:	24013d15 	.word	0x24013d15

0000d798 <__tSimpleLivingString3_pluck_veneer>:
    d798:	f85f f000 	ldr.w	pc, [pc]	; d79c <__tSimpleLivingString3_pluck_veneer+0x4>
    d79c:	24018985 	.word	0x24018985

0000d7a0 <__tADSRT_clear_veneer>:
    d7a0:	f85f f000 	ldr.w	pc, [pc]	; d7a4 <__tADSRT_clear_veneer+0x4>
    d7a4:	24012d21 	.word	0x24012d21
