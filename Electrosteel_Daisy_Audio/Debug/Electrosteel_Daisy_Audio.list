
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00035d30  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  24035fc8  24035fc8  00065c60  2**0
                  CONTENTS
  3 .exidx        00000000  24035fc8  24035fc8  00065c60  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  24035fc8  24035fc8  00065c60  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  24035fc8  24035fc8  00045fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  24035fcc  24035fcc  00045fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003ff70  24040000  24040000  00070000  2**5
                  ALLOC
  8 .sram2_bss    00001480  30000000  30000000  00070000  2**5
                  ALLOC
  9 .sram3_bss    0003bf80  30002000  30002000  00072000  2**5
                  ALLOC
 10 .sram4_bss    00000034  38000000  38000000  00070000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00070000  2**5
                  ALLOC
 12 .data         00000848  20000000  24035fd0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001e10c  20000848  24036818  00070848  2**3
                  ALLOC
 14 .dtcmram_bss  00000000  2001e954  2001e954  00065c8e  2**0
                  CONTENTS
 15 .itcmram      00005860  00000400  24036818  00060400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    04000000  c0000000  c0000000  00070000  2**5
                  ALLOC
 17 .qspiflash_text 00000000  90040000  90040000  00065c8e  2**0
                  CONTENTS
 18 .qspiflash_data 00000000  90040000  90040000  00065c8e  2**0
                  CONTENTS
 19 .qspiflash_bss 00000000  90040000  90040000  00065c8e  2**0
                  CONTENTS
 20 .heap         00000000  2001e954  2001e954  00065c8e  2**0
                  CONTENTS
 21 .reserved_for_stack 00000000  2001e954  2001e954  00065c8e  2**0
                  CONTENTS
 22 .debug_info   0008a2c0  00000000  00000000  00065c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000a6bb  00000000  00000000  000eff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    0007b14f  00000000  00000000  000fa609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003ad0  00000000  00000000  00175758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 0000fac0  00000000  00000000  00179228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  0004509d  00000000  00000000  00188ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   00077b6a  00000000  00000000  001cdd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00175502  00000000  00000000  002458ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .comment      000000c5  00000000  00000000  003badf1  2**0
                  CONTENTS, READONLY
 31 .debug_frame  0000d160  00000000  00000000  003baeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000848 	.word	0x20000848
240002b4:	00000000 	.word	0x00000000
240002b8:	00005c60 	.word	0x00005c60

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000084c 	.word	0x2000084c
240002d4:	00005c60 	.word	0x00005c60

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4cf0      	ldr	r4, [pc, #960]	; (24000a28 <audioInit+0x3c8>)
24000666:	ed9f 0af1 	vldr	s0, [pc, #964]	; 24000a2c <audioInit+0x3cc>
2400066a:	4620      	mov	r0, r4
2400066c:	4af0      	ldr	r2, [pc, #960]	; (24000a30 <audioInit+0x3d0>)
2400066e:	49f1      	ldr	r1, [pc, #964]	; (24000a34 <audioInit+0x3d4>)
24000670:	4bf1      	ldr	r3, [pc, #964]	; (24000a38 <audioInit+0x3d8>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000672:	4df2      	ldr	r5, [pc, #968]	; (24000a3c <audioInit+0x3dc>)
{
24000674:	ed2d 8b10 	vpush	{d8-d15}
24000678:	b089      	sub	sp, #36	; 0x24
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
2400067e:	f01a f8ef 	bl	2401a860 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000682:	4623      	mov	r3, r4
24000684:	4aee      	ldr	r2, [pc, #952]	; (24000a40 <audioInit+0x3e0>)
24000686:	49ef      	ldr	r1, [pc, #956]	; (24000a44 <audioInit+0x3e4>)
24000688:	48ef      	ldr	r0, [pc, #956]	; (24000a48 <audioInit+0x3e8>)
2400068a:	f015 fa73 	bl	24015b74 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
2400068e:	4623      	mov	r3, r4
24000690:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24000694:	49ed      	ldr	r1, [pc, #948]	; (24000a4c <audioInit+0x3ec>)
24000696:	48ee      	ldr	r0, [pc, #952]	; (24000a50 <audioInit+0x3f0>)
24000698:	f015 fa6c 	bl	24015b74 <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069c:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
2400069e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a2:	eddf 1aec 	vldr	s3, [pc, #944]	; 24000a54 <audioInit+0x3f4>
240006a6:	eddf 0aec 	vldr	s1, [pc, #944]	; 24000a58 <audioInit+0x3f8>
240006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006ae:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 24000a5c <audioInit+0x3fc>
240006b2:	48eb      	ldr	r0, [pc, #940]	; (24000a60 <audioInit+0x400>)
	leaf.clearOnAllocation = 1;
240006b4:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b6:	f014 ff95 	bl	240155e4 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006ba:	48ea      	ldr	r0, [pc, #936]	; (24000a64 <audioInit+0x404>)
	tCycle_init(&testSine, &leaf);
240006bc:	4621      	mov	r1, r4
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006be:	4bea      	ldr	r3, [pc, #936]	; (24000a68 <audioInit+0x408>)
240006c0:	4aea      	ldr	r2, [pc, #936]	; (24000a6c <audioInit+0x40c>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c2:	6005      	str	r5, [r0, #0]
	tCycle_init(&testSine, &leaf);
240006c4:	48ea      	ldr	r0, [pc, #936]	; (24000a70 <audioInit+0x410>)
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c6:	601a      	str	r2, [r3, #0]
	tCycle_init(&testSine, &leaf);
240006c8:	f015 fad4 	bl	24015c74 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006cc:	ed9f 0ae9 	vldr	s0, [pc, #932]	; 24000a74 <audioInit+0x414>
240006d0:	48e7      	ldr	r0, [pc, #924]	; (24000a70 <audioInit+0x410>)
240006d2:	f015 fb11 	bl	24015cf8 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006d6:	4ce8      	ldr	r4, [pc, #928]	; (24000a78 <audioInit+0x418>)
		totalGain[1] += partialsHigh[i];
240006d8:	49e8      	ldr	r1, [pc, #928]	; (24000a7c <audioInit+0x41c>)
		totalGain[0] += partials[i];
240006da:	4ae9      	ldr	r2, [pc, #932]	; (24000a80 <audioInit+0x420>)
		totalGain[1] += partialsHigh[i];
240006dc:	ed94 4a01 	vldr	s8, [r4, #4]
240006e0:	edd1 4a00 	vldr	s9, [r1]
		totalGain[0] += partials[i];
240006e4:	ed92 2a00 	vldr	s4, [r2]
240006e8:	edd4 3a00 	vldr	s7, [r4]
		totalGain[1] += partialsHigh[i];
240006ec:	ee34 4a24 	vadd.f32	s8, s8, s9
240006f0:	ed91 1a01 	vldr	s2, [r1, #4]
		totalGain[0] += partials[i];
240006f4:	ee73 3a82 	vadd.f32	s7, s7, s4
240006f8:	edd2 0a01 	vldr	s1, [r2, #4]
		totalGain[1] += partialsHigh[i];
240006fc:	ee34 4a01 	vadd.f32	s8, s8, s2
24000700:	ed91 3a02 	vldr	s6, [r1, #8]
		totalGain[0] += partials[i];
24000704:	edd2 6a02 	vldr	s13, [r2, #8]
24000708:	ee73 3aa0 	vadd.f32	s7, s7, s1
		totalGain[1] += partialsHigh[i];
2400070c:	ed91 2a03 	vldr	s4, [r1, #12]
24000710:	ee34 4a03 	vadd.f32	s8, s8, s6
		totalGain[0] += partials[i];
24000714:	ed92 5a03 	vldr	s10, [r2, #12]
		totalGain[1] += partialsHigh[i];
24000718:	edd1 4a04 	vldr	s9, [r1, #16]
		totalGain[0] += partials[i];
2400071c:	ee73 3aa6 	vadd.f32	s7, s7, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000720:	4bd8      	ldr	r3, [pc, #864]	; (24000a84 <audioInit+0x424>)
		totalGain[1] += partialsHigh[i];
24000722:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000726:	48d8      	ldr	r0, [pc, #864]	; (24000a88 <audioInit+0x428>)
		totalGain[0] += partials[i];
24000728:	edd2 2a04 	vldr	s5, [r2, #16]
2400072c:	ee73 3a85 	vadd.f32	s7, s7, s10
		totalGain[1] += partialsHigh[i];
24000730:	ed91 1a05 	vldr	s2, [r1, #20]
24000734:	ee34 4a24 	vadd.f32	s8, s8, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000738:	edd0 4a00 	vldr	s9, [r0]
		totalGain[0] += partials[i];
2400073c:	ed92 0a05 	vldr	s0, [r2, #20]
24000740:	ee73 3aa2 	vadd.f32	s7, s7, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000744:	edd3 2a00 	vldr	s5, [r3]
		totalGain[1] += partialsHigh[i];
24000748:	ee34 4a01 	vadd.f32	s8, s8, s2
2400074c:	edd1 0a06 	vldr	s1, [r1, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000750:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000754:	edd2 1a06 	vldr	s3, [r2, #24]
24000758:	ee73 3a80 	vadd.f32	s7, s7, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400075c:	ed93 0a01 	vldr	s0, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000760:	ee34 4a20 	vadd.f32	s8, s8, s1
24000764:	edd1 6a07 	vldr	s13, [r1, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000768:	ee74 4a80 	vadd.f32	s9, s9, s0
2400076c:	edd3 2a02 	vldr	s5, [r3, #8]
		totalGain[0] += partials[i];
24000770:	ee73 3aa1 	vadd.f32	s7, s7, s3
		totalGain[1] += partialsHigh[i];
24000774:	ed91 5a08 	vldr	s10, [r1, #32]
24000778:	ee34 4a26 	vadd.f32	s8, s8, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077c:	edd3 1a03 	vldr	s3, [r3, #12]
24000780:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000784:	edd2 5a07 	vldr	s11, [r2, #28]
24000788:	edd2 7a08 	vldr	s15, [r2, #32]
2400078c:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
24000790:	ee73 3aa5 	vadd.f32	s7, s7, s11
24000794:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000798:	ee74 4aa1 	vadd.f32	s9, s9, s3
		totalGain[1] += partialsHigh[i];
2400079c:	ed91 3a09 	vldr	s6, [r1, #36]	; 0x24
240007a0:	ee34 4a05 	vadd.f32	s8, s8, s10
240007a4:	ed91 2a0a 	vldr	s4, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007a8:	ee73 3aa7 	vadd.f32	s7, s7, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ac:	ed93 1a04 	vldr	s2, [r3, #16]
240007b0:	ed93 0a05 	vldr	s0, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007b4:	ee34 4a03 	vadd.f32	s8, s8, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007b8:	ed93 8a06 	vldr	s16, [r3, #24]
240007bc:	ee74 4a81 	vadd.f32	s9, s9, s2
240007c0:	edd3 5a07 	vldr	s11, [r3, #28]
		totalGain[0] += partials[i];
240007c4:	ee73 3a86 	vadd.f32	s7, s7, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007c8:	ed90 5a01 	vldr	s10, [r0, #4]
		totalGain[1] += partialsHigh[i];
240007cc:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d0:	edd3 1a0c 	vldr	s3, [r3, #48]	; 0x30
240007d4:	ee74 4a80 	vadd.f32	s9, s9, s0
240007d8:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007dc:	ee73 3a87 	vadd.f32	s7, s7, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e0:	ee35 5a21 	vadd.f32	s10, s10, s3
240007e4:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
240007e8:	edd3 1a0f 	vldr	s3, [r3, #60]	; 0x3c
240007ec:	ee74 4a88 	vadd.f32	s9, s9, s16
240007f0:	ed93 1a10 	vldr	s2, [r3, #64]	; 0x40
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
240007f4:	ee8b aa23 	vdiv.f32	s20, s22, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007f8:	edd3 0a11 	vldr	s1, [r3, #68]	; 0x44
240007fc:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
24000800:	edd3 2a08 	vldr	s5, [r3, #32]
24000804:	ed93 3a13 	vldr	s6, [r3, #76]	; 0x4c
24000808:	ee35 5a28 	vadd.f32	s10, s10, s17
2400080c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
24000810:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000814:	edd0 5a02 	vldr	s11, [r0, #8]
24000818:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	gainNormalizers[1] = 1.0f / totalGain[1];
2400081c:	eecb 8a04 	vdiv.f32	s17, s22, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000820:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
24000824:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
	gainNormalizers[0] = 1.0f / totalGain[0];
24000828:	4d98      	ldr	r5, [pc, #608]	; (24000a8c <audioInit+0x42c>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400082a:	ee35 5a06 	vadd.f32	s10, s10, s12
2400082e:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
24000832:	ee74 4aa2 	vadd.f32	s9, s9, s5
24000836:	edd3 2a1b 	vldr	s5, [r3, #108]	; 0x6c
2400083a:	ee35 5a21 	vadd.f32	s10, s10, s3
2400083e:	edd3 1a18 	vldr	s3, [r3, #96]	; 0x60
24000842:	ee74 4aa6 	vadd.f32	s9, s9, s13
24000846:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
2400084a:	ee75 5aa1 	vadd.f32	s11, s11, s3
2400084e:	edd3 1a1a 	vldr	s3, [r3, #104]	; 0x68
24000852:	ee35 5a01 	vadd.f32	s10, s10, s2
24000856:	ed93 1a19 	vldr	s2, [r3, #100]	; 0x64
2400085a:	ee74 4aa7 	vadd.f32	s9, s9, s15
2400085e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
24000862:	ee75 5a81 	vadd.f32	s11, s11, s2
24000866:	ed93 1a1d 	vldr	s2, [r3, #116]	; 0x74
2400086a:	ee35 5a20 	vadd.f32	s10, s10, s1
2400086e:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000872:	eecb 9a24 	vdiv.f32	s19, s22, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000876:	ee35 5a00 	vadd.f32	s10, s10, s0
2400087a:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
2400087e:	ee75 5aa1 	vadd.f32	s11, s11, s3
24000882:	edd3 1a21 	vldr	s3, [r3, #132]	; 0x84
24000886:	ee35 5a03 	vadd.f32	s10, s10, s6
2400088a:	ed93 3a1f 	vldr	s6, [r3, #124]	; 0x7c
2400088e:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000892:	edd3 2a22 	vldr	s5, [r3, #136]	; 0x88
24000896:	ee35 5a06 	vadd.f32	s10, s10, s12
2400089a:	ed90 6a03 	vldr	s12, [r0, #12]
2400089e:	ee75 5aa0 	vadd.f32	s11, s11, s1
240008a2:	edd3 0a24 	vldr	s1, [r3, #144]	; 0x90
240008a6:	ee36 6a20 	vadd.f32	s12, s12, s1
240008aa:	ee35 5a02 	vadd.f32	s10, s10, s4
240008ae:	ed93 2a26 	vldr	s4, [r3, #152]	; 0x98
240008b2:	ee75 5a81 	vadd.f32	s11, s11, s2
240008b6:	edd3 0a27 	vldr	s1, [r3, #156]	; 0x9c
240008ba:	ee36 6a27 	vadd.f32	s12, s12, s15
240008be:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008c2:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
240008c6:	ee35 5a07 	vadd.f32	s10, s10, s14
240008ca:	ee75 5a80 	vadd.f32	s11, s11, s0
240008ce:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
240008d2:	ee36 6a02 	vadd.f32	s12, s12, s4
240008d6:	ed93 0a2b 	vldr	s0, [r3, #172]	; 0xac
240008da:	ed93 2a2c 	vldr	s4, [r3, #176]	; 0xb0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008de:	ee8b 9a05 	vdiv.f32	s18, s22, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008e2:	edd3 aa45 	vldr	s21, [r3, #276]	; 0x114
240008e6:	ee36 6a20 	vadd.f32	s12, s12, s1
240008ea:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
240008ee:	ee75 5a83 	vadd.f32	s11, s11, s6
240008f2:	ed93 3a2d 	vldr	s6, [r3, #180]	; 0xb4
240008f6:	ee36 6a01 	vadd.f32	s12, s12, s2
240008fa:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
240008fe:	ee75 5aa6 	vadd.f32	s11, s11, s13
24000902:	edd0 6a04 	vldr	s13, [r0, #16]
24000906:	ee36 6a27 	vadd.f32	s12, s12, s15
2400090a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
2400090e:	ee76 6a81 	vadd.f32	s13, s13, s2
24000912:	ed93 1a33 	vldr	s2, [r3, #204]	; 0xcc
24000916:	ee75 5aa1 	vadd.f32	s11, s11, s3
2400091a:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
2400091e:	ee36 6a07 	vadd.f32	s12, s12, s14
24000922:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
24000926:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400092a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
2400092e:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000932:	edd3 2a36 	vldr	s5, [r3, #216]	; 0xd8
24000936:	ee36 6a00 	vadd.f32	s12, s12, s0
2400093a:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
2400093e:	ee76 6aa1 	vadd.f32	s13, s13, s3
24000942:	edd3 1a38 	vldr	s3, [r3, #224]	; 0xe0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000946:	ee8b 8a25 	vdiv.f32	s16, s22, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400094a:	ee36 6a02 	vadd.f32	s12, s12, s4
2400094e:	ed93 2a39 	vldr	s4, [r3, #228]	; 0xe4
24000952:	ee76 6a81 	vadd.f32	s13, s13, s2
24000956:	ed93 1a3c 	vldr	s2, [r3, #240]	; 0xf0
2400095a:	ee36 6a03 	vadd.f32	s12, s12, s6
2400095e:	ed90 3a05 	vldr	s6, [r0, #20]
24000962:	ee76 6a87 	vadd.f32	s13, s13, s14
24000966:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
2400096a:	ee33 3a01 	vadd.f32	s6, s6, s2
2400096e:	ed93 1a3d 	vldr	s2, [r3, #244]	; 0xf4
24000972:	ee36 6a20 	vadd.f32	s12, s12, s1
24000976:	edd3 0a3f 	vldr	s1, [r3, #252]	; 0xfc
2400097a:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400097e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
24000982:	ee33 3a01 	vadd.f32	s6, s6, s2
24000986:	ed93 1a42 	vldr	s2, [r3, #264]	; 0x108
2400098a:	ee76 6aa2 	vadd.f32	s13, s13, s5
2400098e:	edd3 2a40 	vldr	s5, [r3, #256]	; 0x100
24000992:	ee33 3a27 	vadd.f32	s6, s6, s15
24000996:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
2400099a:	ee76 6a80 	vadd.f32	s13, s13, s0
2400099e:	ee33 3a20 	vadd.f32	s6, s6, s1
240009a2:	edd3 0a44 	vldr	s1, [r3, #272]	; 0x110
240009a6:	ee76 6aa1 	vadd.f32	s13, s13, s3
240009aa:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
240009ae:	ee33 3a22 	vadd.f32	s6, s6, s5
240009b2:	edd3 2a46 	vldr	s5, [r3, #280]	; 0x118
240009b6:	ee76 6a82 	vadd.f32	s13, s13, s4
240009ba:	ed90 2a06 	vldr	s4, [r0, #24]
240009be:	ee33 3a27 	vadd.f32	s6, s6, s15
240009c2:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
240009c6:	ed93 0a54 	vldr	s0, [r3, #336]	; 0x150
240009ca:	ee32 2a27 	vadd.f32	s4, s4, s15
240009ce:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
240009d2:	ee76 6a87 	vadd.f32	s13, s13, s14
240009d6:	ed90 7a07 	vldr	s14, [r0, #28]
240009da:	ee33 3a01 	vadd.f32	s6, s6, s2
240009de:	ed93 1a4c 	vldr	s2, [r3, #304]	; 0x130
240009e2:	ee37 7a00 	vadd.f32	s14, s14, s0
240009e6:	ed93 0a60 	vldr	s0, [r3, #384]	; 0x180
240009ea:	ee32 2a27 	vadd.f32	s4, s4, s15
240009ee:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
240009f2:	ee33 3a21 	vadd.f32	s6, s6, s3
240009f6:	edd3 1a55 	vldr	s3, [r3, #340]	; 0x154
240009fa:	ee32 2a27 	vadd.f32	s4, s4, s15
240009fe:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000a02:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a06:	edd3 1a56 	vldr	s3, [r3, #344]	; 0x158
24000a0a:	ee33 3a20 	vadd.f32	s6, s6, s1
24000a0e:	edd3 0a58 	vldr	s1, [r3, #352]	; 0x160
24000a12:	ee32 2a27 	vadd.f32	s4, s4, s15
24000a16:	edd0 7a08 	vldr	s15, [r0, #32]
24000a1a:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a1e:	edd3 1a57 	vldr	s3, [r3, #348]	; 0x15c
24000a22:	ee77 7a80 	vadd.f32	s15, s15, s0
24000a26:	e033      	b.n	24000a90 <audioInit+0x430>
24000a28:	2000522c 	.word	0x2000522c
24000a2c:	473b8000 	.word	0x473b8000
24000a30:	00011d28 	.word	0x00011d28
24000a34:	20005b60 	.word	0x20005b60
24000a38:	240046d1 	.word	0x240046d1
24000a3c:	457ff000 	.word	0x457ff000
24000a40:	0003ff70 	.word	0x0003ff70
24000a44:	24040000 	.word	0x24040000
24000a48:	2000546c 	.word	0x2000546c
24000a4c:	c0000000 	.word	0xc0000000
24000a50:	20005228 	.word	0x20005228
24000a54:	ba51b717 	.word	0xba51b717
24000a58:	00000000 	.word	0x00000000
24000a5c:	3a83126f 	.word	0x3a83126f
24000a60:	20000fec 	.word	0x20000fec
24000a64:	20004fec 	.word	0x20004fec
24000a68:	20005180 	.word	0x20005180
24000a6c:	3dba2e8c 	.word	0x3dba2e8c
24000a70:	20017a00 	.word	0x20017a00
24000a74:	43dc0000 	.word	0x43dc0000
24000a78:	20017a28 	.word	0x20017a28
24000a7c:	20000144 	.word	0x20000144
24000a80:	200000fc 	.word	0x200000fc
24000a84:	20000394 	.word	0x20000394
24000a88:	20017a30 	.word	0x20017a30
24000a8c:	20005118 	.word	0x20005118
24000a90:	ed93 0a4e 	vldr	s0, [r3, #312]	; 0x138
24000a94:	ee73 aa2a 	vadd.f32	s21, s6, s21
24000a98:	ed93 3a61 	vldr	s6, [r3, #388]	; 0x184
24000a9c:	ee37 7a21 	vadd.f32	s14, s14, s3
24000aa0:	edd3 1a62 	vldr	s3, [r3, #392]	; 0x188
24000aa4:	ee32 2a01 	vadd.f32	s4, s4, s2
24000aa8:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
24000aac:	ee77 7a83 	vadd.f32	s15, s15, s6
24000ab0:	ee37 7a20 	vadd.f32	s14, s14, s1
24000ab4:	edd3 0a66 	vldr	s1, [r3, #408]	; 0x198
24000ab8:	ee32 2a01 	vadd.f32	s4, s4, s2
24000abc:	ed93 1a59 	vldr	s2, [r3, #356]	; 0x164
24000ac0:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000ac4:	edd3 1a5a 	vldr	s3, [r3, #360]	; 0x168
24000ac8:	ee37 7a01 	vadd.f32	s14, s14, s2
24000acc:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000ad0:	ee32 3a00 	vadd.f32	s6, s4, s0
24000ad4:	ed93 0a64 	vldr	s0, [r3, #400]	; 0x190
24000ad8:	ee77 7a81 	vadd.f32	s15, s15, s2
24000adc:	ed93 1a5b 	vldr	s2, [r3, #364]	; 0x16c
24000ae0:	ee37 7a21 	vadd.f32	s14, s14, s3
24000ae4:	ed93 2a65 	vldr	s4, [r3, #404]	; 0x194
24000ae8:	edd3 1a4f 	vldr	s3, [r3, #316]	; 0x13c
24000aec:	ee7a aaa2 	vadd.f32	s21, s21, s5
24000af0:	ee77 7a80 	vadd.f32	s15, s15, s0
24000af4:	ee37 7a01 	vadd.f32	s14, s14, s2
24000af8:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
24000afc:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b00:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
24000b04:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b08:	ed93 2a5c 	vldr	s4, [r3, #368]	; 0x170
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b0c:	ee8b 0a06 	vdiv.f32	s0, s22, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b10:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b14:	ed93 2a5e 	vldr	s4, [r3, #376]	; 0x178
24000b18:	ee77 7aa0 	vadd.f32	s15, s15, s1
24000b1c:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
24000b20:	ee37 7a01 	vadd.f32	s14, s14, s2
24000b24:	ed93 1a52 	vldr	s2, [r3, #328]	; 0x148
24000b28:	ee33 3a20 	vadd.f32	s6, s6, s1
24000b2c:	edd3 2a67 	vldr	s5, [r3, #412]	; 0x19c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b30:	eecb 0a26 	vdiv.f32	s1, s22, s13
24000b34:	edc4 3a00 	vstr	s7, [r4]
24000b38:	ed84 4a01 	vstr	s8, [r4, #4]
24000b3c:	edc0 4a00 	vstr	s9, [r0]
24000b40:	4ce2      	ldr	r4, [pc, #904]	; (24000ecc <audioInit+0x86c>)
24000b42:	ed80 5a01 	vstr	s10, [r0, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b46:	ee77 7aa2 	vadd.f32	s15, s15, s5
24000b4a:	edd3 2a6a 	vldr	s5, [r3, #424]	; 0x1a8
24000b4e:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b52:	edd3 1a68 	vldr	s3, [r3, #416]	; 0x1a0
24000b56:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b5a:	ed93 2a69 	vldr	s4, [r3, #420]	; 0x1a4
24000b5e:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000b62:	edc0 5a02 	vstr	s11, [r0, #8]
24000b66:	ee33 3a01 	vadd.f32	s6, s6, s2
24000b6a:	ed80 6a03 	vstr	s12, [r0, #12]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6e:	ee8b 1a2a 	vdiv.f32	s2, s22, s21
24000b72:	edc0 6a04 	vstr	s13, [r0, #16]
24000b76:	edc0 aa05 	vstr	s21, [r0, #20]
24000b7a:	ed80 3a06 	vstr	s6, [r0, #24]
24000b7e:	ed80 7a07 	vstr	s14, [r0, #28]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000b82:	ed85 aa00 	vstr	s20, [r5]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b86:	ee77 7a82 	vadd.f32	s15, s15, s4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b8a:	edc4 9a00 	vstr	s19, [r4]
24000b8e:	eecb 1a03 	vdiv.f32	s3, s22, s6
24000b92:	ed84 9a01 	vstr	s18, [r4, #4]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000b96:	edc5 8a01 	vstr	s17, [r5, #4]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b9a:	ed84 8a02 	vstr	s16, [r4, #8]
24000b9e:	ed84 0a03 	vstr	s0, [r4, #12]
24000ba2:	edc4 0a04 	vstr	s1, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000ba6:	ee77 7aa2 	vadd.f32	s15, s15, s5
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000baa:	ee8b 2a07 	vdiv.f32	s4, s22, s14
24000bae:	edc0 7a08 	vstr	s15, [r0, #32]
24000bb2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
24000bb6:	ed84 1a05 	vstr	s2, [r4, #20]
24000bba:	eecb 2a27 	vdiv.f32	s5, s22, s15
24000bbe:	edc4 1a06 	vstr	s3, [r4, #24]
24000bc2:	ed84 2a07 	vstr	s4, [r4, #28]
24000bc6:	edc4 2a08 	vstr	s5, [r4, #32]
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bca:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
24000bce:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bd2:	ee69 7aa7 	vmul.f32	s15, s19, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bd6:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
24000bda:	ee2a 3a03 	vmul.f32	s6, s20, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bde:	ee68 3aa3 	vmul.f32	s7, s17, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000be2:	ece3 7a01 	vstmia	r3!, {s15}
24000be6:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000bea:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000bee:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000bf2:	ee24 4a09 	vmul.f32	s8, s8, s18
24000bf6:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000bfa:	ee64 4a88 	vmul.f32	s9, s9, s16
24000bfe:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c02:	ee25 5a00 	vmul.f32	s10, s10, s0
24000c06:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c0a:	ee65 5aa0 	vmul.f32	s11, s11, s1
24000c0e:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c12:	ee26 6a01 	vmul.f32	s12, s12, s2
24000c16:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c1a:	ee66 6aa1 	vmul.f32	s13, s13, s3
24000c1e:	ee27 7a02 	vmul.f32	s14, s14, s4
			partials[i] = partials[i] * gainNormalizers[0];
24000c22:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c26:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c2a:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c2c:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c30:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000c34:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000c38:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000c3c:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000c40:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000c44:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000c48:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000c4c:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c50:	d1bb      	bne.n	24000bca <audioInit+0x56a>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000c52:	4b9f      	ldr	r3, [pc, #636]	; (24000ed0 <audioInit+0x870>)
24000c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000c58:	4c9e      	ldr	r4, [pc, #632]	; (24000ed4 <audioInit+0x874>)
24000c5a:	ed93 8a01 	vldr	s16, [r3, #4]
24000c5e:	ed93 0a04 	vldr	s0, [r3, #16]
24000c62:	f104 082c 	add.w	r8, r4, #44	; 0x2c
24000c66:	edd3 0a07 	vldr	s1, [r3, #28]
24000c6a:	edd3 9a00 	vldr	s19, [r3]
24000c6e:	ed93 6a02 	vldr	s12, [r3, #8]
24000c72:	ed93 9a03 	vldr	s18, [r3, #12]
24000c76:	ee78 4a69 	vsub.f32	s9, s16, s19
24000c7a:	edd3 6a05 	vldr	s13, [r3, #20]
24000c7e:	ee36 6a48 	vsub.f32	s12, s12, s16
24000c82:	edd3 8a06 	vldr	s17, [r3, #24]
24000c86:	ee30 5a49 	vsub.f32	s10, s0, s18
24000c8a:	ed93 7a08 	vldr	s14, [r3, #32]
24000c8e:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000c92:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000c96:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 24000f58 <audioInit+0x8f8>
24000c9a:	ee37 7a60 	vsub.f32	s14, s14, s1
24000c9e:	4f8e      	ldr	r7, [pc, #568]	; (24000ed8 <audioInit+0x878>)
24000ca0:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000ca4:	4e8d      	ldr	r6, [pc, #564]	; (24000edc <audioInit+0x87c>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000ca6:	eddf aa8e 	vldr	s21, [pc, #568]	; 24000ee0 <audioInit+0x880>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000caa:	ed9f aa8e 	vldr	s20, [pc, #568]	; 24000ee4 <audioInit+0x884>
24000cae:	4b8e      	ldr	r3, [pc, #568]	; (24000ee8 <audioInit+0x888>)
24000cb0:	488e      	ldr	r0, [pc, #568]	; (24000eec <audioInit+0x88c>)
24000cb2:	ee87 da86 	vdiv.f32	s26, s15, s12
24000cb6:	498e      	ldr	r1, [pc, #568]	; (24000ef0 <audioInit+0x890>)
24000cb8:	4a8e      	ldr	r2, [pc, #568]	; (24000ef4 <audioInit+0x894>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cba:	4d8f      	ldr	r5, [pc, #572]	; (24000ef8 <audioInit+0x898>)
24000cbc:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000cc0:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000cc4:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000cc8:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000ccc:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000cd0:	3304      	adds	r3, #4
24000cd2:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cd6:	ecb5 2a01 	vldmia	r5!, {s4}
24000cda:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cde:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000ce2:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000ce6:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
24000cea:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cec:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000cf0:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000cf4:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cf8:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cfc:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d00:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d04:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d08:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d0c:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d10:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d14:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d1c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d20:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d24:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d28:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d2c:	ee35 3a63 	vsub.f32	s6, s10, s7
24000d30:	ee74 2aef 	vsub.f32	s5, s9, s31
24000d34:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d38:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3c:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d40:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d44:	ece0 1a01 	vstmia	r0!, {s3}
24000d48:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d4c:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d54:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d58:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5c:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d60:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d64:	ee62 2aac 	vmul.f32	s5, s5, s25
24000d68:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000d6c:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d70:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d74:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000d78:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000d7c:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d80:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d84:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d88:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8c:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d90:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d94:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d98:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d9c:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000da0:	ee28 2a83 	vmul.f32	s4, s17, s6
24000da4:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000da8:	ee20 6a87 	vmul.f32	s12, s1, s14
24000dac:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000db0:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db4:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000db8:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dbc:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc0:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc4:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc8:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000dcc:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dd0:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000dd4:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000dd8:	ee35 5a46 	vsub.f32	s10, s10, s12
24000ddc:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000de0:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000de4:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000de8:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
24000dec:	f47f af6e 	bne.w	24000ccc <audioInit+0x66c>
24000df0:	4c42      	ldr	r4, [pc, #264]	; (24000efc <audioInit+0x89c>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = randomNumber() + 0.5f;
24000df2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24000df6:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000dfa:	f003 fc69 	bl	240046d0 <randomNumber>
24000dfe:	ee30 0a08 	vadd.f32	s0, s0, s16
24000e02:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
24000e06:	42ac      	cmp	r4, r5
24000e08:	d1f7      	bne.n	24000dfa <audioInit+0x79a>
		}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000e0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000e0e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 24000f00 <audioInit+0x8a0>
24000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e16:	483b      	ldr	r0, [pc, #236]	; (24000f04 <audioInit+0x8a4>)
24000e18:	f014 fc48 	bl	240156ac <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000e1c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24000e20:	ed9f 0a39 	vldr	s0, [pc, #228]	; 24000f08 <audioInit+0x8a8>
24000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e28:	4838      	ldr	r0, [pc, #224]	; (24000f0c <audioInit+0x8ac>)
24000e2a:	f014 fc63 	bl	240156f4 <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000e2e:	4c38      	ldr	r4, [pc, #224]	; (24000f10 <audioInit+0x8b0>)
24000e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000e34:	eddf 0a37 	vldr	s1, [pc, #220]	; 24000f14 <audioInit+0x8b4>
24000e38:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24000f18 <audioInit+0x8b8>
24000e3c:	4837      	ldr	r0, [pc, #220]	; (24000f1c <audioInit+0x8bc>)
24000e3e:	1865      	adds	r5, r4, r1

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
24000e40:	ed9f 8a37 	vldr	s16, [pc, #220]	; 24000f20 <audioInit+0x8c0>
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000e44:	f014 fc80 	bl	24015748 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e48:	eddf 9a36 	vldr	s19, [pc, #216]	; 24000f24 <audioInit+0x8c4>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e4c:	4b36      	ldr	r3, [pc, #216]	; (24000f28 <audioInit+0x8c8>)
24000e4e:	4a37      	ldr	r2, [pc, #220]	; (24000f2c <audioInit+0x8cc>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e50:	ed9f 9a37 	vldr	s18, [pc, #220]	; 24000f30 <audioInit+0x8d0>
        x += increment;
24000e54:	eddf 8a37 	vldr	s17, [pc, #220]	; 24000f34 <audioInit+0x8d4>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e58:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e5a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
24000e5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24000e62:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
24000e66:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e6a:	ee20 0a29 	vmul.f32	s0, s0, s19
24000e6e:	f014 fd39 	bl	240158e4 <ftom>
24000e72:	ee30 0a49 	vsub.f32	s0, s0, s18
24000e76:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
24000e7a:	42ac      	cmp	r4, r5
24000e7c:	d1ed      	bne.n	24000e5a <audioInit+0x7fa>





	if (numStrings == 6)
24000e7e:	4b2e      	ldr	r3, [pc, #184]	; (24000f38 <audioInit+0x8d8>)
24000e80:	781b      	ldrb	r3, [r3, #0]
24000e82:	2b06      	cmp	r3, #6
24000e84:	f000 8417 	beq.w	240016b6 <audioInit+0x1056>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000e88:	2b0a      	cmp	r3, #10
	{
		// first two strings are one board each, other 8 are two strings each.
		if (boardNumber == 0)
24000e8a:	4b2c      	ldr	r3, [pc, #176]	; (24000f3c <audioInit+0x8dc>)
	else if (numStrings == 10)
24000e8c:	f000 83f9 	beq.w	24001682 <audioInit+0x1022>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e90:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
24000e92:	2002      	movs	r0, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e94:	4a2a      	ldr	r2, [pc, #168]	; (24000f40 <audioInit+0x8e0>)
		numStringsThisBoard = 2;
24000e96:	492b      	ldr	r1, [pc, #172]	; (24000f44 <audioInit+0x8e4>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e98:	005b      	lsls	r3, r3, #1
		numStringsThisBoard = 2;
24000e9a:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e9c:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
24000e9e:	4b2a      	ldr	r3, [pc, #168]	; (24000f48 <audioInit+0x8e8>)
    float x = 0.0f;
24000ea0:	f04f 0900 	mov.w	r9, #0
24000ea4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 24000f5c <audioInit+0x8fc>
24000ea8:	9303      	str	r3, [sp, #12]
24000eaa:	4b13      	ldr	r3, [pc, #76]	; (24000ef8 <audioInit+0x898>)
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000eac:	ed9f 9a27 	vldr	s18, [pc, #156]	; 24000f4c <audioInit+0x8ec>
24000eb0:	f103 082c 	add.w	r8, r3, #44	; 0x2c
24000eb4:	eddf 8a26 	vldr	s17, [pc, #152]	; 24000f50 <audioInit+0x8f0>
24000eb8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 24000f20 <audioInit+0x8c0>
    float x = 0.0f;
24000ebc:	9e03      	ldr	r6, [sp, #12]
24000ebe:	465c      	mov	r4, fp
24000ec0:	4d0d      	ldr	r5, [pc, #52]	; (24000ef8 <audioInit+0x898>)
			tCycle_init(&additive[i][j], &leaf);
24000ec2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 24000f60 <audioInit+0x900>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000ec6:	4f23      	ldr	r7, [pc, #140]	; (24000f54 <audioInit+0x8f4>)
24000ec8:	e04c      	b.n	24000f64 <audioInit+0x904>
24000eca:	bf00      	nop
24000ecc:	20005120 	.word	0x20005120
24000ed0:	20000340 	.word	0x20000340
24000ed4:	200000b4 	.word	0x200000b4
24000ed8:	20000f14 	.word	0x20000f14
24000edc:	20000fa4 	.word	0x20000fa4
24000ee0:	3b84a9fa 	.word	0x3b84a9fa
24000ee4:	42f60000 	.word	0x42f60000
24000ee8:	20000190 	.word	0x20000190
24000eec:	20000c94 	.word	0x20000c94
24000ef0:	20000b74 	.word	0x20000b74
24000ef4:	20000db4 	.word	0x20000db4
24000ef8:	2000006c 	.word	0x2000006c
24000efc:	20005670 	.word	0x20005670
24000f00:	3727c5ac 	.word	0x3727c5ac
24000f04:	3000a000 	.word	0x3000a000
24000f08:	c2b40000 	.word	0xc2b40000
24000f0c:	30002000 	.word	0x30002000
24000f10:	30012000 	.word	0x30012000
24000f14:	4323d666 	.word	0x4323d666
24000f18:	c323d666 	.word	0xc323d666
24000f1c:	3001a000 	.word	0x3001a000
24000f20:	00000000 	.word	0x00000000
24000f24:	435c0000 	.word	0x435c0000
24000f28:	2000004c 	.word	0x2000004c
24000f2c:	44924492 	.word	0x44924492
24000f30:	42640000 	.word	0x42640000
24000f34:	39000400 	.word	0x39000400
24000f38:	20000051 	.word	0x20000051
24000f3c:	20017c79 	.word	0x20017c79
24000f40:	200050b8 	.word	0x200050b8
24000f44:	20000052 	.word	0x20000052
24000f48:	20000a64 	.word	0x20000a64
24000f4c:	447a0000 	.word	0x447a0000
24000f50:	43160000 	.word	0x43160000
24000f54:	20000fec 	.word	0x20000fec
24000f58:	20000f5c 	.word	0x20000f5c
24000f5c:	200009d4 	.word	0x200009d4
24000f60:	2000522c 	.word	0x2000522c
			tCycle_init(&additive[i][j], &leaf);
24000f64:	4620      	mov	r0, r4
24000f66:	4651      	mov	r1, sl
24000f68:	f014 fe84 	bl	24015c74 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f6c:	ecf5 0a01 	vldmia	r5!, {s1}
24000f70:	4630      	mov	r0, r6
24000f72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f76:	ee60 0a89 	vmul.f32	s1, s1, s18
24000f7a:	4653      	mov	r3, sl
24000f7c:	eef0 1a68 	vmov.f32	s3, s17
24000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000f84:	eeb0 1a48 	vmov.f32	s2, s16
24000f88:	4639      	mov	r1, r7
24000f8a:	f012 fa2b 	bl	240133e4 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000f8e:	4545      	cmp	r5, r8
24000f90:	f104 0404 	add.w	r4, r4, #4
24000f94:	f106 0604 	add.w	r6, r6, #4
24000f98:	d1e4      	bne.n	24000f64 <audioInit+0x904>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000f9a:	9b03      	ldr	r3, [sp, #12]
24000f9c:	f109 0912 	add.w	r9, r9, #18
24000fa0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
24000fa4:	3348      	adds	r3, #72	; 0x48
24000fa6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000faa:	9303      	str	r3, [sp, #12]
24000fac:	d186      	bne.n	24000ebc <audioInit+0x85c>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fae:	4ede      	ldr	r6, [pc, #888]	; (24001328 <audioInit+0xcc8>)
24000fb0:	eddf 8ade 	vldr	s17, [pc, #888]	; 2400132c <audioInit+0xccc>
24000fb4:	ed9f 8ade 	vldr	s16, [pc, #888]	; 24001330 <audioInit+0xcd0>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fb8:	4631      	mov	r1, r6
24000fba:	4cde      	ldr	r4, [pc, #888]	; (24001334 <audioInit+0xcd4>)
24000fbc:	eef0 0a68 	vmov.f32	s1, s17
24000fc0:	eeb0 0a48 	vmov.f32	s0, s16
24000fc4:	48dc      	ldr	r0, [pc, #880]	; (24001338 <audioInit+0xcd8>)
24000fc6:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000fca:	f012 fd09 	bl	240139e0 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fce:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24000fd0:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fd2:	eef0 0a68 	vmov.f32	s1, s17
24000fd6:	4631      	mov	r1, r6
24000fd8:	eeb0 0a48 	vmov.f32	s0, s16
24000fdc:	f012 fd00 	bl	240139e0 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24000fe0:	42ac      	cmp	r4, r5
24000fe2:	d1f4      	bne.n	24000fce <audioInit+0x96e>
24000fe4:	4cd5      	ldr	r4, [pc, #852]	; (2400133c <audioInit+0xcdc>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000fe6:	4ed0      	ldr	r6, [pc, #832]	; (24001328 <audioInit+0xcc8>)
24000fe8:	eddf 8ad0 	vldr	s17, [pc, #832]	; 2400132c <audioInit+0xccc>
24000fec:	f104 0528 	add.w	r5, r4, #40	; 0x28
24000ff0:	ed9f 8acf 	vldr	s16, [pc, #828]	; 24001330 <audioInit+0xcd0>
24000ff4:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24000ff6:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000ff8:	eef0 0a68 	vmov.f32	s1, s17
24000ffc:	4631      	mov	r1, r6
24000ffe:	eeb0 0a48 	vmov.f32	s0, s16
24001002:	f012 fced 	bl	240139e0 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24001006:	42ac      	cmp	r4, r5
24001008:	d1f4      	bne.n	24000ff4 <audioInit+0x994>
2400100a:	2600      	movs	r6, #0
2400100c:	4bcc      	ldr	r3, [pc, #816]	; (24001340 <audioInit+0xce0>)
2400100e:	f8df b430 	ldr.w	fp, [pc, #1072]	; 24001440 <audioInit+0xde0>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
24001012:	4cc5      	ldr	r4, [pc, #788]	; (24001328 <audioInit+0xcc8>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001014:	eddf bacb 	vldr	s23, [pc, #812]	; 24001344 <audioInit+0xce4>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001018:	ed9f cacb 	vldr	s24, [pc, #812]	; 24001348 <audioInit+0xce8>
2400101c:	eddf 8ac4 	vldr	s17, [pc, #784]	; 24001330 <audioInit+0xcd0>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001020:	ed9f aaca 	vldr	s20, [pc, #808]	; 2400134c <audioInit+0xcec>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001024:	e9cd 3604 	strd	r3, r6, [sp, #16]
    float x = 0.0f;
24001028:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400102a:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 24001350 <audioInit+0xcf0>
			tMBSaw_init(&saw[i][v],  &leaf);
2400102e:	4bc9      	ldr	r3, [pc, #804]	; (24001354 <audioInit+0xcf4>)
24001030:	4621      	mov	r1, r4
24001032:	1998      	adds	r0, r3, r6
24001034:	4428      	add	r0, r5
24001036:	f017 fdff 	bl	24018c38 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
2400103a:	4bc7      	ldr	r3, [pc, #796]	; (24001358 <audioInit+0xcf8>)
2400103c:	4621      	mov	r1, r4
2400103e:	1998      	adds	r0, r3, r6
24001040:	4428      	add	r0, r5
24001042:	f014 fed7 	bl	24015df4 <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24001046:	4bc5      	ldr	r3, [pc, #788]	; (2400135c <audioInit+0xcfc>)
24001048:	4621      	mov	r1, r4
2400104a:	1998      	adds	r0, r3, r6
2400104c:	4428      	add	r0, r5
2400104e:	f014 fe11 	bl	24015c74 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
24001052:	4bc3      	ldr	r3, [pc, #780]	; (24001360 <audioInit+0xd00>)
24001054:	4621      	mov	r1, r4
24001056:	1998      	adds	r0, r3, r6
24001058:	4428      	add	r0, r5
2400105a:	f015 fcb7 	bl	240169cc <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
2400105e:	4bc1      	ldr	r3, [pc, #772]	; (24001364 <audioInit+0xd04>)
24001060:	4621      	mov	r1, r4
24001062:	1998      	adds	r0, r3, r6
24001064:	4428      	add	r0, r5
24001066:	f018 f8a5 	bl	240191b4 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
2400106a:	4bbf      	ldr	r3, [pc, #764]	; (24001368 <audioInit+0xd08>)
2400106c:	4621      	mov	r1, r4
2400106e:	1998      	adds	r0, r3, r6
24001070:	4428      	add	r0, r5
24001072:	f016 fd21 	bl	24017ab8 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001076:	4bbd      	ldr	r3, [pc, #756]	; (2400136c <audioInit+0xd0c>)
24001078:	eef0 0a48 	vmov.f32	s1, s16
2400107c:	4621      	mov	r1, r4
2400107e:	1998      	adds	r0, r3, r6
24001080:	eeb0 0a6b 	vmov.f32	s0, s23
24001084:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
24001086:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001088:	f012 fcaa 	bl	240139e0 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
2400108c:	2d18      	cmp	r5, #24
2400108e:	d1ce      	bne.n	2400102e <audioInit+0x9ce>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001090:	48b7      	ldr	r0, [pc, #732]	; (24001370 <audioInit+0xd10>)
24001092:	eef0 2a4c 	vmov.f32	s5, s24
24001096:	eef0 1a68 	vmov.f32	s3, s17
2400109a:	ed9f 2aab 	vldr	s4, [pc, #684]	; 24001348 <audioInit+0xce8>
2400109e:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 24001374 <audioInit+0xd14>
240010a2:	2200      	movs	r2, #0
240010a4:	eddf 0ab4 	vldr	s1, [pc, #720]	; 24001378 <audioInit+0xd18>
240010a8:	2104      	movs	r1, #4
240010aa:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 2400137c <audioInit+0xd1c>
240010ae:	4430      	add	r0, r6
240010b0:	4bb3      	ldr	r3, [pc, #716]	; (24001380 <audioInit+0xd20>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240010b2:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010b4:	f018 fc24 	bl	24019900 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
240010b8:	4bb2      	ldr	r3, [pc, #712]	; (24001384 <audioInit+0xd24>)
240010ba:	eddf 4ab3 	vldr	s9, [pc, #716]	; 24001388 <audioInit+0xd28>
240010be:	eef0 3a68 	vmov.f32	s7, s17
240010c2:	ed9f 3ab2 	vldr	s6, [pc, #712]	; 2400138c <audioInit+0xd2c>
240010c6:	1998      	adds	r0, r3, r6
240010c8:	eeb0 4a64 	vmov.f32	s8, s9
240010cc:	ed9f 2a98 	vldr	s4, [pc, #608]	; 24001330 <audioInit+0xcd0>
240010d0:	eef0 2a43 	vmov.f32	s5, s6
240010d4:	eddf 1aae 	vldr	s3, [pc, #696]	; 24001390 <audioInit+0xd30>
240010d8:	ed9f 1aae 	vldr	s2, [pc, #696]	; 24001394 <audioInit+0xd34>
240010dc:	2101      	movs	r1, #1
240010de:	eddf 0aae 	vldr	s1, [pc, #696]	; 24001398 <audioInit+0xd38>
240010e2:	f106 0710 	add.w	r7, r6, #16
240010e6:	4aad      	ldr	r2, [pc, #692]	; (2400139c <audioInit+0xd3c>)
240010e8:	ed9f 0aad 	vldr	s0, [pc, #692]	; 240013a0 <audioInit+0xd40>
240010ec:	9003      	str	r0, [sp, #12]
240010ee:	f018 ff4d 	bl	24019f8c <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
240010f2:	ed9f 0aac 	vldr	s0, [pc, #688]	; 240013a4 <audioInit+0xd44>
240010f6:	9803      	ldr	r0, [sp, #12]
240010f8:	f019 f8f6 	bl	2401a2e8 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
240010fc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
24001100:	9803      	ldr	r0, [sp, #12]
24001102:	f019 f8ad 	bl	2401a260 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
24001106:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 240013a8 <audioInit+0xd48>
2400110a:	9803      	ldr	r0, [sp, #12]
2400110c:	f019 f8ba 	bl	2401a284 <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
24001110:	eeb0 0a68 	vmov.f32	s0, s17
24001114:	9803      	ldr	r0, [sp, #12]
24001116:	f019 f8d9 	bl	2401a2cc <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
2400111a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400111e:	9803      	ldr	r0, [sp, #12]
24001120:	f019 f8c2 	bl	2401a2a8 <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001124:	4aa1      	ldr	r2, [pc, #644]	; (240013ac <audioInit+0xd4c>)
24001126:	eeb0 1a68 	vmov.f32	s2, s17
2400112a:	4623      	mov	r3, r4
2400112c:	eddf 1aa0 	vldr	s3, [pc, #640]	; 240013b0 <audioInit+0xd50>
24001130:	1990      	adds	r0, r2, r6
24001132:	eddf 0aa0 	vldr	s1, [pc, #640]	; 240013b4 <audioInit+0xd54>
24001136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400113a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24001330 <audioInit+0xcd0>
2400113e:	499e      	ldr	r1, [pc, #632]	; (240013b8 <audioInit+0xd58>)
24001140:	f012 f950 	bl	240133e4 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24001144:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24001148:	4622      	mov	r2, r4
2400114a:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 240013bc <audioInit+0xd5c>
2400114e:	2103      	movs	r1, #3
24001150:	489b      	ldr	r0, [pc, #620]	; (240013c0 <audioInit+0xd60>)
24001152:	f013 f92b 	bl	240143ac <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24001156:	4622      	mov	r2, r4
24001158:	2101      	movs	r1, #1
2400115a:	489a      	ldr	r0, [pc, #616]	; (240013c4 <audioInit+0xd64>)
2400115c:	eddf 0a8c 	vldr	s1, [pc, #560]	; 24001390 <audioInit+0xd30>
24001160:	ed9f 0a99 	vldr	s0, [pc, #612]	; 240013c8 <audioInit+0xd68>
24001164:	f013 f922 	bl	240143ac <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001168:	4622      	mov	r2, r4
2400116a:	2100      	movs	r1, #0
2400116c:	4897      	ldr	r0, [pc, #604]	; (240013cc <audioInit+0xd6c>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400116e:	ed9f 9ab6 	vldr	s18, [pc, #728]	; 24001448 <audioInit+0xde8>
24001172:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 2400144c <audioInit+0xdec>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001176:	f014 fddd 	bl	24015d34 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400117a:	4b95      	ldr	r3, [pc, #596]	; (240013d0 <audioInit+0xd70>)
2400117c:	eef0 0a49 	vmov.f32	s1, s18
24001180:	eeb0 0a48 	vmov.f32	s0, s16
24001184:	2101      	movs	r1, #1
24001186:	1958      	adds	r0, r3, r5
24001188:	4622      	mov	r2, r4
2400118a:	f012 fda5 	bl	24013cd8 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
2400118e:	4b91      	ldr	r3, [pc, #580]	; (240013d4 <audioInit+0xd74>)
24001190:	eef0 0a49 	vmov.f32	s1, s18
24001194:	4622      	mov	r2, r4
24001196:	1958      	adds	r0, r3, r5
24001198:	eeb0 0a48 	vmov.f32	s0, s16
2400119c:	2100      	movs	r1, #0
2400119e:	f012 fd9b 	bl	24013cd8 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240011a2:	4b8d      	ldr	r3, [pc, #564]	; (240013d8 <audioInit+0xd78>)
240011a4:	4622      	mov	r2, r4
240011a6:	eef0 0a49 	vmov.f32	s1, s18
240011aa:	1958      	adds	r0, r3, r5
240011ac:	eeb0 0a48 	vmov.f32	s0, s16
240011b0:	2102      	movs	r1, #2
240011b2:	f012 fd91 	bl	24013cd8 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240011b6:	4b89      	ldr	r3, [pc, #548]	; (240013dc <audioInit+0xd7c>)
240011b8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240011bc:	4621      	mov	r1, r4
240011be:	1958      	adds	r0, r3, r5
240011c0:	eeb0 0a48 	vmov.f32	s0, s16
240011c4:	f013 fbe6 	bl	24014994 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240011c8:	4b85      	ldr	r3, [pc, #532]	; (240013e0 <audioInit+0xd80>)
240011ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011ce:	4622      	mov	r2, r4
240011d0:	1958      	adds	r0, r3, r5
240011d2:	eeb0 0a48 	vmov.f32	s0, s16
240011d6:	2105      	movs	r1, #5
240011d8:	f013 f8e8 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240011dc:	4b81      	ldr	r3, [pc, #516]	; (240013e4 <audioInit+0xd84>)
240011de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011e2:	4622      	mov	r2, r4
240011e4:	1958      	adds	r0, r3, r5
240011e6:	eeb0 0a48 	vmov.f32	s0, s16
240011ea:	2106      	movs	r1, #6
240011ec:	f013 f8de 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240011f0:	4b7d      	ldr	r3, [pc, #500]	; (240013e8 <audioInit+0xd88>)
240011f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011f6:	4622      	mov	r2, r4
240011f8:	1958      	adds	r0, r3, r5
240011fa:	eeb0 0a48 	vmov.f32	s0, s16
240011fe:	2107      	movs	r1, #7
24001200:	f013 f8d4 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24001204:	4b79      	ldr	r3, [pc, #484]	; (240013ec <audioInit+0xd8c>)
24001206:	4622      	mov	r2, r4
24001208:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400120c:	1958      	adds	r0, r3, r5
2400120e:	eeb0 0a48 	vmov.f32	s0, s16
24001212:	2104      	movs	r1, #4
24001214:	f013 f8ca 	bl	240143ac <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
24001218:	4b75      	ldr	r3, [pc, #468]	; (240013f0 <audioInit+0xd90>)
2400121a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400121e:	4621      	mov	r1, r4
24001220:	1958      	adds	r0, r3, r5
24001222:	eeb0 0a48 	vmov.f32	s0, s16
24001226:	f013 ff49 	bl	240150bc <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400122a:	4b72      	ldr	r3, [pc, #456]	; (240013f4 <audioInit+0xd94>)
2400122c:	eef0 0a4c 	vmov.f32	s1, s24
24001230:	4621      	mov	r1, r4
24001232:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
24001234:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24001236:	eeb0 0a6b 	vmov.f32	s0, s23
2400123a:	f012 fbd1 	bl	240139e0 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
2400123e:	42af      	cmp	r7, r5
24001240:	d19b      	bne.n	2400117a <audioInit+0xb1a>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001242:	4b6d      	ldr	r3, [pc, #436]	; (240013f8 <audioInit+0xd98>)
24001244:	2500      	movs	r5, #0
24001246:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400124a:	4b6c      	ldr	r3, [pc, #432]	; (240013fc <audioInit+0xd9c>)
2400124c:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
2400124e:	eb08 0005 	add.w	r0, r8, r5
24001252:	4621      	mov	r1, r4
24001254:	f017 fffc 	bl	24019250 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24001258:	1978      	adds	r0, r7, r5
2400125a:	4621      	mov	r1, r4
2400125c:	f018 f83e 	bl	240192dc <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001260:	4b67      	ldr	r3, [pc, #412]	; (24001400 <audioInit+0xda0>)
24001262:	4621      	mov	r1, r4
24001264:	1998      	adds	r0, r3, r6
24001266:	4428      	add	r0, r5
24001268:	f014 fd04 	bl	24015c74 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
2400126c:	4b65      	ldr	r3, [pc, #404]	; (24001404 <audioInit+0xda4>)
2400126e:	4621      	mov	r1, r4
24001270:	1998      	adds	r0, r3, r6
24001272:	4428      	add	r0, r5
24001274:	f018 fa1e 	bl	240196b4 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
24001278:	4b63      	ldr	r3, [pc, #396]	; (24001408 <audioInit+0xda8>)
2400127a:	4621      	mov	r1, r4
2400127c:	1998      	adds	r0, r3, r6
2400127e:	4428      	add	r0, r5
24001280:	f018 fa74 	bl	2401976c <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24001284:	4b61      	ldr	r3, [pc, #388]	; (2400140c <audioInit+0xdac>)
24001286:	4621      	mov	r1, r4
24001288:	1998      	adds	r0, r3, r6
2400128a:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
2400128c:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
2400128e:	f018 f94f 	bl	24019530 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24001292:	2d20      	cmp	r5, #32
24001294:	d1db      	bne.n	2400124e <audioInit+0xbee>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
24001296:	4b5e      	ldr	r3, [pc, #376]	; (24001410 <audioInit+0xdb0>)
24001298:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
2400129c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 24001414 <audioInit+0xdb4>
240012a0:	2106      	movs	r1, #6
240012a2:	1998      	adds	r0, r3, r6
240012a4:	4622      	mov	r2, r4
240012a6:	f013 f881 	bl	240143ac <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012aa:	4b5b      	ldr	r3, [pc, #364]	; (24001418 <audioInit+0xdb8>)
240012ac:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012b0:	4622      	mov	r2, r4
240012b2:	1998      	adds	r0, r3, r6
240012b4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 2400141c <audioInit+0xdbc>
240012b8:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012ba:	ed9f 9a59 	vldr	s18, [pc, #356]	; 24001420 <audioInit+0xdc0>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012be:	f013 f875 	bl	240143ac <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012c2:	4b58      	ldr	r3, [pc, #352]	; (24001424 <audioInit+0xdc4>)
240012c4:	9f04      	ldr	r7, [sp, #16]
240012c6:	eeb0 0a4a 	vmov.f32	s0, s20
240012ca:	4622      	mov	r2, r4
240012cc:	eddf 0a56 	vldr	s1, [pc, #344]	; 24001428 <audioInit+0xdc8>
240012d0:	2105      	movs	r1, #5
240012d2:	1998      	adds	r0, r3, r6
240012d4:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012d8:	ed9f 8a54 	vldr	s16, [pc, #336]	; 2400142c <audioInit+0xdcc>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012dc:	f013 f866 	bl	240143ac <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012e0:	4628      	mov	r0, r5
240012e2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240012e6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240012ea:	4623      	mov	r3, r4
240012ec:	eef0 0a4a 	vmov.f32	s1, s20
240012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240012f4:	eeb0 0a49 	vmov.f32	s0, s18
240012f8:	492f      	ldr	r1, [pc, #188]	; (240013b8 <audioInit+0xd58>)
240012fa:	f012 f873 	bl	240133e4 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012fe:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
24001300:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001302:	eeb0 0a48 	vmov.f32	s0, s16
24001306:	f012 f923 	bl	24013550 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
2400130a:	42af      	cmp	r7, r5
2400130c:	d1e8      	bne.n	240012e0 <audioInit+0xc80>
2400130e:	4b48      	ldr	r3, [pc, #288]	; (24001430 <audioInit+0xdd0>)
24001310:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001312:	ed9f ba48 	vldr	s22, [pc, #288]	; 24001434 <audioInit+0xdd4>
24001316:	eb03 0806 	add.w	r8, r3, r6
2400131a:	4b47      	ldr	r3, [pc, #284]	; (24001438 <audioInit+0xdd8>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400131c:	eddf 9a47 	vldr	s19, [pc, #284]	; 2400143c <audioInit+0xddc>
24001320:	199f      	adds	r7, r3, r6
24001322:	f106 0320 	add.w	r3, r6, #32
24001326:	e093      	b.n	24001450 <audioInit+0xdf0>
24001328:	2000522c 	.word	0x2000522c
2400132c:	3a03126f 	.word	0x3a03126f
24001330:	00000000 	.word	0x00000000
24001334:	200051f8 	.word	0x200051f8
24001338:	20017a84 	.word	0x20017a84
2400133c:	200055d8 	.word	0x200055d8
24001340:	20005078 	.word	0x20005078
24001344:	42800000 	.word	0x42800000
24001348:	3c23d70a 	.word	0x3c23d70a
2400134c:	447a0000 	.word	0x447a0000
24001350:	3ca3d70a 	.word	0x3ca3d70a
24001354:	20005a74 	.word	0x20005a74
24001358:	20005658 	.word	0x20005658
2400135c:	20005b30 	.word	0x20005b30
24001360:	20017a5c 	.word	0x20017a5c
24001364:	20005a8c 	.word	0x20005a8c
24001368:	20005b48 	.word	0x20005b48
2400136c:	20005600 	.word	0x20005600
24001370:	20005350 	.word	0x20005350
24001374:	3f7fff58 	.word	0x3f7fff58
24001378:	4684d000 	.word	0x4684d000
2400137c:	435c0000 	.word	0x435c0000
24001380:	2000546c 	.word	0x2000546c
24001384:	200179f8 	.word	0x200179f8
24001388:	3d4ccccd 	.word	0x3d4ccccd
2400138c:	3f7ff972 	.word	0x3f7ff972
24001390:	3f666666 	.word	0x3f666666
24001394:	3e99999a 	.word	0x3e99999a
24001398:	3f19999a 	.word	0x3f19999a
2400139c:	20005228 	.word	0x20005228
240013a0:	42c80000 	.word	0x42c80000
240013a4:	3f7d70a4 	.word	0x3f7d70a4
240013a8:	3ecccccd 	.word	0x3ecccccd
240013ac:	20005078 	.word	0x20005078
240013b0:	43480000 	.word	0x43480000
240013b4:	42480000 	.word	0x42480000
240013b8:	20000fec 	.word	0x20000fec
240013bc:	44bb8000 	.word	0x44bb8000
240013c0:	200054c8 	.word	0x200054c8
240013c4:	200054cc 	.word	0x200054cc
240013c8:	44480000 	.word	0x44480000
240013cc:	200054b0 	.word	0x200054b0
240013d0:	20005358 	.word	0x20005358
240013d4:	20005144 	.word	0x20005144
240013d8:	20000afc 	.word	0x20000afc
240013dc:	20005030 	.word	0x20005030
240013e0:	200009c4 	.word	0x200009c4
240013e4:	200009b4 	.word	0x200009b4
240013e8:	200009a4 	.word	0x200009a4
240013ec:	20000994 	.word	0x20000994
240013f0:	20000984 	.word	0x20000984
240013f4:	20005080 	.word	0x20005080
240013f8:	200052a0 	.word	0x200052a0
240013fc:	20005280 	.word	0x20005280
24001400:	200052f0 	.word	0x200052f0
24001404:	20005330 	.word	0x20005330
24001408:	20005310 	.word	0x20005310
2400140c:	200052c0 	.word	0x200052c0
24001410:	200054e0 	.word	0x200054e0
24001414:	42a00000 	.word	0x42a00000
24001418:	200054e8 	.word	0x200054e8
2400141c:	463b8000 	.word	0x463b8000
24001420:	3dcccccd 	.word	0x3dcccccd
24001424:	200054c0 	.word	0x200054c0
24001428:	3ff33333 	.word	0x3ff33333
2400142c:	3f7fffac 	.word	0x3f7fffac
24001430:	20000b14 	.word	0x20000b14
24001434:	42000000 	.word	0x42000000
24001438:	20000ed4 	.word	0x20000ed4
2400143c:	47bb8000 	.word	0x47bb8000
24001440:	2000546c 	.word	0x2000546c
24001444:	457a0000 	.word	0x457a0000
24001448:	3f333333 	.word	0x3f333333
2400144c:	44fa0000 	.word	0x44fa0000
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001450:	ed5f aa04 	vldr	s21, [pc, #-16]	; 24001444 <audioInit+0xde4>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001454:	ed1f 9a04 	vldr	s18, [pc, #-16]	; 24001448 <audioInit+0xde8>
24001458:	ed1f 8a04 	vldr	s16, [pc, #-16]	; 2400144c <audioInit+0xdec>
2400145c:	e9cd b606 	strd	fp, r6, [sp, #24]
24001460:	461e      	mov	r6, r3
			tCrusher_init(&bc[i][v],&leaf);
24001462:	4640      	mov	r0, r8
24001464:	4621      	mov	r1, r4
24001466:	f011 fdd3 	bl	24013010 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
2400146a:	4638      	mov	r0, r7
2400146c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001470:	4621      	mov	r1, r4
24001472:	f012 fd2b 	bl	24013ecc <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001476:	4b9b      	ldr	r3, [pc, #620]	; (240016e4 <audioInit+0x1084>)
24001478:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400147c:	4621      	mov	r1, r4
2400147e:	eb03 0b05 	add.w	fp, r3, r5
24001482:	4b99      	ldr	r3, [pc, #612]	; (240016e8 <audioInit+0x1088>)
		for (int i = 0; i < NUM_EFFECT; i++)
24001484:	f108 0808 	add.w	r8, r8, #8
24001488:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
2400148a:	1958      	adds	r0, r3, r5
2400148c:	f012 fd1e 	bl	24013ecc <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001490:	4b96      	ldr	r3, [pc, #600]	; (240016ec <audioInit+0x108c>)
24001492:	eef0 0a4b 	vmov.f32	s1, s22
24001496:	ed9f 0a96 	vldr	s0, [pc, #600]	; 240016f0 <audioInit+0x1090>
2400149a:	eb03 0a05 	add.w	sl, r3, r5
2400149e:	4b95      	ldr	r3, [pc, #596]	; (240016f4 <audioInit+0x1094>)
240014a0:	4622      	mov	r2, r4
240014a2:	2106      	movs	r1, #6
240014a4:	eb03 0905 	add.w	r9, r3, r5
240014a8:	4658      	mov	r0, fp
240014aa:	f012 ff7f 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
240014ae:	4650      	mov	r0, sl
240014b0:	eef0 0a4b 	vmov.f32	s1, s22
240014b4:	ed9f 0a90 	vldr	s0, [pc, #576]	; 240016f8 <audioInit+0x1098>
240014b8:	4622      	mov	r2, r4
240014ba:	2107      	movs	r1, #7
240014bc:	f012 ff76 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
240014c0:	eddf 0a8e 	vldr	s1, [pc, #568]	; 240016fc <audioInit+0x109c>
240014c4:	4622      	mov	r2, r4
240014c6:	2105      	movs	r1, #5
240014c8:	4648      	mov	r0, r9
240014ca:	eeb0 0a4a 	vmov.f32	s0, s20
240014ce:	f012 ff6d 	bl	240143ac <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014d2:	eeb0 0a69 	vmov.f32	s0, s19
240014d6:	4658      	mov	r0, fp
240014d8:	f013 f91a 	bl	24014710 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
240014dc:	4650      	mov	r0, sl
240014de:	eeb0 0a69 	vmov.f32	s0, s19
240014e2:	f013 f915 	bl	24014710 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014e6:	eeb0 0a69 	vmov.f32	s0, s19
240014ea:	4648      	mov	r0, r9
240014ec:	f013 f910 	bl	24014710 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
240014f0:	4b83      	ldr	r3, [pc, #524]	; (24001700 <audioInit+0x10a0>)
240014f2:	4621      	mov	r1, r4
240014f4:	1958      	adds	r0, r3, r5
240014f6:	4b83      	ldr	r3, [pc, #524]	; (24001704 <audioInit+0x10a4>)
240014f8:	9003      	str	r0, [sp, #12]
240014fa:	eb03 0905 	add.w	r9, r3, r5
240014fe:	f011 fe43 	bl	24013188 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001506:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
2400150a:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 24001708 <audioInit+0x10a8>
2400150e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24001512:	9803      	ldr	r0, [sp, #12]
24001514:	4a7d      	ldr	r2, [pc, #500]	; (2400170c <audioInit+0x10ac>)
24001516:	497e      	ldr	r1, [pc, #504]	; (24001710 <audioInit+0x10b0>)
24001518:	9300      	str	r3, [sp, #0]
2400151a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 24001714 <audioInit+0x10b4>
2400151e:	f011 fedd 	bl	240132dc <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001522:	4b7d      	ldr	r3, [pc, #500]	; (24001718 <audioInit+0x10b8>)
24001524:	eeb0 0a6a 	vmov.f32	s0, s21
24001528:	4a7c      	ldr	r2, [pc, #496]	; (2400171c <audioInit+0x10bc>)
2400152a:	1958      	adds	r0, r3, r5
2400152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001530:	f011 fafe 	bl	24012b30 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
24001534:	4b7a      	ldr	r3, [pc, #488]	; (24001720 <audioInit+0x10c0>)
24001536:	4a79      	ldr	r2, [pc, #484]	; (2400171c <audioInit+0x10bc>)
24001538:	eeb0 0a6a 	vmov.f32	s0, s21
2400153c:	1958      	adds	r0, r3, r5
2400153e:	4b79      	ldr	r3, [pc, #484]	; (24001724 <audioInit+0x10c4>)
24001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001544:	eb03 0a05 	add.w	sl, r3, r5
24001548:	f011 faf2 	bl	24012b30 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
2400154c:	4621      	mov	r1, r4
2400154e:	4648      	mov	r0, r9
24001550:	f014 fb90 	bl	24015c74 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001554:	4621      	mov	r1, r4
24001556:	4650      	mov	r0, sl
24001558:	f014 fb8c 	bl	24015c74 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
2400155c:	ed9f 0a72 	vldr	s0, [pc, #456]	; 24001728 <audioInit+0x10c8>
24001560:	4648      	mov	r0, r9
24001562:	f014 fbc9 	bl	24015cf8 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24001566:	4650      	mov	r0, sl
24001568:	ed9f 0a70 	vldr	s0, [pc, #448]	; 2400172c <audioInit+0x10cc>
2400156c:	f014 fbc4 	bl	24015cf8 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001570:	4b6f      	ldr	r3, [pc, #444]	; (24001730 <audioInit+0x10d0>)
24001572:	eef0 0a49 	vmov.f32	s1, s18
24001576:	4622      	mov	r2, r4
24001578:	1958      	adds	r0, r3, r5
2400157a:	eeb0 0a48 	vmov.f32	s0, s16
2400157e:	2101      	movs	r1, #1
24001580:	f012 fbaa 	bl	24013cd8 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001584:	4b6b      	ldr	r3, [pc, #428]	; (24001734 <audioInit+0x10d4>)
24001586:	eef0 0a49 	vmov.f32	s1, s18
2400158a:	4622      	mov	r2, r4
2400158c:	1958      	adds	r0, r3, r5
2400158e:	eeb0 0a48 	vmov.f32	s0, s16
24001592:	2100      	movs	r1, #0
24001594:	f012 fba0 	bl	24013cd8 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001598:	4b67      	ldr	r3, [pc, #412]	; (24001738 <audioInit+0x10d8>)
2400159a:	4622      	mov	r2, r4
2400159c:	eef0 0a49 	vmov.f32	s1, s18
240015a0:	1958      	adds	r0, r3, r5
240015a2:	eeb0 0a48 	vmov.f32	s0, s16
240015a6:	2102      	movs	r1, #2
240015a8:	f012 fb96 	bl	24013cd8 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
240015ac:	4b63      	ldr	r3, [pc, #396]	; (2400173c <audioInit+0x10dc>)
240015ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015b2:	4621      	mov	r1, r4
240015b4:	1958      	adds	r0, r3, r5
240015b6:	eeb0 0a48 	vmov.f32	s0, s16
240015ba:	f013 f9eb 	bl	24014994 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240015be:	4b60      	ldr	r3, [pc, #384]	; (24001740 <audioInit+0x10e0>)
240015c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015c4:	4622      	mov	r2, r4
240015c6:	1958      	adds	r0, r3, r5
240015c8:	eeb0 0a48 	vmov.f32	s0, s16
240015cc:	2105      	movs	r1, #5
240015ce:	f012 feed 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240015d2:	4b5c      	ldr	r3, [pc, #368]	; (24001744 <audioInit+0x10e4>)
240015d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015d8:	4622      	mov	r2, r4
240015da:	1958      	adds	r0, r3, r5
240015dc:	eeb0 0a48 	vmov.f32	s0, s16
240015e0:	2106      	movs	r1, #6
240015e2:	f012 fee3 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240015e6:	4b58      	ldr	r3, [pc, #352]	; (24001748 <audioInit+0x10e8>)
240015e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015ec:	4622      	mov	r2, r4
240015ee:	1958      	adds	r0, r3, r5
240015f0:	eeb0 0a48 	vmov.f32	s0, s16
240015f4:	2107      	movs	r1, #7
240015f6:	f012 fed9 	bl	240143ac <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240015fa:	4b54      	ldr	r3, [pc, #336]	; (2400174c <audioInit+0x10ec>)
240015fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001600:	4622      	mov	r2, r4
24001602:	1958      	adds	r0, r3, r5
24001604:	eeb0 0a48 	vmov.f32	s0, s16
24001608:	2104      	movs	r1, #4
2400160a:	f012 fecf 	bl	240143ac <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
2400160e:	4b50      	ldr	r3, [pc, #320]	; (24001750 <audioInit+0x10f0>)
24001610:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001614:	4621      	mov	r1, r4
24001616:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
24001618:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
2400161a:	eeb0 0a48 	vmov.f32	s0, s16
2400161e:	f013 fd4d 	bl	240150bc <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
24001622:	42ae      	cmp	r6, r5
24001624:	f47f af1d 	bne.w	24001462 <audioInit+0xe02>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001628:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 24001754 <audioInit+0x10f4>
2400162c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
24001630:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
24001634:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001636:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001638:	eef0 0a48 	vmov.f32	s1, s16
2400163c:	4621      	mov	r1, r4
2400163e:	eeb0 0a68 	vmov.f32	s0, s17
24001642:	f012 f9cd 	bl	240139e0 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001646:	455d      	cmp	r5, fp
24001648:	d1f4      	bne.n	24001634 <audioInit+0xfd4>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400164a:	9b04      	ldr	r3, [sp, #16]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
2400164c:	2102      	movs	r1, #2
2400164e:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001650:	f10b 0b04 	add.w	fp, fp, #4
24001654:	3304      	adds	r3, #4
24001656:	9304      	str	r3, [sp, #16]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24001658:	4b3f      	ldr	r3, [pc, #252]	; (24001758 <audioInit+0x10f8>)
2400165a:	1998      	adds	r0, r3, r6
2400165c:	4623      	mov	r3, r4
2400165e:	f011 fc7f 	bl	24012f60 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001662:	4b3e      	ldr	r3, [pc, #248]	; (2400175c <audioInit+0x10fc>)
24001664:	4622      	mov	r2, r4
24001666:	eddf 0a3e 	vldr	s1, [pc, #248]	; 24001760 <audioInit+0x1100>
2400166a:	1998      	adds	r0, r3, r6
2400166c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 24001764 <audioInit+0x1104>
24001670:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001672:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001674:	f012 fb30 	bl	24013cd8 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001678:	9b05      	ldr	r3, [sp, #20]
2400167a:	b973      	cbnz	r3, 2400169a <audioInit+0x103a>
2400167c:	2301      	movs	r3, #1
2400167e:	9305      	str	r3, [sp, #20]
24001680:	e4d2      	b.n	24001028 <audioInit+0x9c8>
		if (boardNumber == 0)
24001682:	781b      	ldrb	r3, [r3, #0]
24001684:	b303      	cbz	r3, 240016c8 <audioInit+0x1068>
		else if (boardNumber == 1)
24001686:	2b01      	cmp	r3, #1
24001688:	d025      	beq.n	240016d6 <audioInit+0x1076>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
2400168a:	3b01      	subs	r3, #1
2400168c:	4a36      	ldr	r2, [pc, #216]	; (24001768 <audioInit+0x1108>)
			numStringsThisBoard = 2;
2400168e:	4937      	ldr	r1, [pc, #220]	; (2400176c <audioInit+0x110c>)
24001690:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001692:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
24001694:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001696:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
24001698:	e401      	b.n	24000e9e <audioInit+0x83e>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
2400169a:	f44f 7200 	mov.w	r2, #512	; 0x200
2400169e:	2100      	movs	r1, #0
240016a0:	4833      	ldr	r0, [pc, #204]	; (24001770 <audioInit+0x1110>)
240016a2:	f019 f9a9 	bl	2401a9f8 <memset>
	}
	HAL_Delay(1);
240016a6:	9805      	ldr	r0, [sp, #20]

}
240016a8:	b009      	add	sp, #36	; 0x24
240016aa:	ecbd 8b10 	vpop	{d8-d15}
240016ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
240016b2:	f004 bd0d 	b.w	240060d0 <HAL_Delay>
		firstString = boardNumber;
240016b6:	4a2f      	ldr	r2, [pc, #188]	; (24001774 <audioInit+0x1114>)
		numStringsThisBoard = 1;
240016b8:	2001      	movs	r0, #1
		firstString = boardNumber;
240016ba:	4b2b      	ldr	r3, [pc, #172]	; (24001768 <audioInit+0x1108>)
		numStringsThisBoard = 1;
240016bc:	492b      	ldr	r1, [pc, #172]	; (2400176c <audioInit+0x110c>)
		firstString = boardNumber;
240016be:	7812      	ldrb	r2, [r2, #0]
		numStringsThisBoard = 1;
240016c0:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber;
240016c2:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
240016c4:	f7ff bbeb 	b.w	24000e9e <audioInit+0x83e>
			firstString = 0;
240016c8:	4827      	ldr	r0, [pc, #156]	; (24001768 <audioInit+0x1108>)
			numStringsThisBoard = 1;
240016ca:	2101      	movs	r1, #1
240016cc:	4a27      	ldr	r2, [pc, #156]	; (2400176c <audioInit+0x110c>)
			firstString = 0;
240016ce:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
240016d0:	7011      	strb	r1, [r2, #0]
240016d2:	f7ff bbe4 	b.w	24000e9e <audioInit+0x83e>
			firstString = 1;
240016d6:	4924      	ldr	r1, [pc, #144]	; (24001768 <audioInit+0x1108>)
			numStringsThisBoard = 1;
240016d8:	4a24      	ldr	r2, [pc, #144]	; (2400176c <audioInit+0x110c>)
			firstString = 1;
240016da:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
240016dc:	7013      	strb	r3, [r2, #0]
240016de:	f7ff bbde 	b.w	24000e9e <audioInit+0x83e>
240016e2:	bf00      	nop
240016e4:	20005af0 	.word	0x20005af0
240016e8:	20000ef4 	.word	0x20000ef4
240016ec:	20005b10 	.word	0x20005b10
240016f0:	42a00000 	.word	0x42a00000
240016f4:	20000b34 	.word	0x20000b34
240016f8:	463b8000 	.word	0x463b8000
240016fc:	3ff33333 	.word	0x3ff33333
24001700:	20000b54 	.word	0x20000b54
24001704:	20005470 	.word	0x20005470
24001708:	c2b40000 	.word	0xc2b40000
2400170c:	30002000 	.word	0x30002000
24001710:	3000a000 	.word	0x3000a000
24001714:	3727c5ac 	.word	0x3727c5ac
24001718:	20004ff0 	.word	0x20004ff0
2400171c:	20005228 	.word	0x20005228
24001720:	20005010 	.word	0x20005010
24001724:	20005490 	.word	0x20005490
24001728:	3e4ccccd 	.word	0x3e4ccccd
2400172c:	3e638e39 	.word	0x3e638e39
24001730:	20000964 	.word	0x20000964
24001734:	20000944 	.word	0x20000944
24001738:	20000904 	.word	0x20000904
2400173c:	20000924 	.word	0x20000924
24001740:	200008e4 	.word	0x200008e4
24001744:	200008c4 	.word	0x200008c4
24001748:	200008a4 	.word	0x200008a4
2400174c:	20000884 	.word	0x20000884
24001750:	20000864 	.word	0x20000864
24001754:	3d4ccccd 	.word	0x3d4ccccd
24001758:	200054f4 	.word	0x200054f4
2400175c:	200050a8 	.word	0x200050a8
24001760:	3e99999a 	.word	0x3e99999a
24001764:	46947000 	.word	0x46947000
24001768:	200050b8 	.word	0x200050b8
2400176c:	20000052 	.word	0x20000052
24001770:	30000000 	.word	0x30000000
24001774:	20017c79 	.word	0x20017c79

24001778 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24001778:	b570      	push	{r4, r5, r6, lr}
2400177a:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400177c:	4e0a      	ldr	r6, [pc, #40]	; (240017a8 <audioStart+0x30>)
	HAL_Delay(1);
2400177e:	2001      	movs	r0, #1
{
24001780:	460c      	mov	r4, r1
	HAL_Delay(1);
24001782:	f004 fca5 	bl	240060d0 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001786:	2280      	movs	r2, #128	; 0x80
24001788:	4631      	mov	r1, r6
2400178a:	4628      	mov	r0, r5
2400178c:	f00a fd92 	bl	2400c2b4 <HAL_SAI_Transmit_DMA>
24001790:	4b06      	ldr	r3, [pc, #24]	; (240017ac <audioStart+0x34>)
24001792:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001794:	2280      	movs	r2, #128	; 0x80
24001796:	f506 7100 	add.w	r1, r6, #512	; 0x200
2400179a:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400179c:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
2400179e:	f00a fe25 	bl	2400c3ec <HAL_SAI_Receive_DMA>
240017a2:	4b03      	ldr	r3, [pc, #12]	; (240017b0 <audioStart+0x38>)
240017a4:	7018      	strb	r0, [r3, #0]
}
240017a6:	bd70      	pop	{r4, r5, r6, pc}
240017a8:	30000000 	.word	0x30000000
240017ac:	20017a54 	.word	0x20017a54
240017b0:	20005a71 	.word	0x20005a71

240017b4 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};
float pluckPos = 0.5f;

void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
240017b4:	4a38      	ldr	r2, [pc, #224]	; (24001898 <updateStateFromSPIMessage+0xe4>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
240017b6:	4939      	ldr	r1, [pc, #228]	; (2400189c <updateStateFromSPIMessage+0xe8>)
	dualSlider = (modeBit >> 5) & 1;
240017b8:	f8df c120 	ldr.w	ip, [pc, #288]	; 240018dc <updateStateFromSPIMessage+0x128>
{
240017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int modeBit = SPI_LEVERS[24 + offset];
240017be:	1815      	adds	r5, r2, r0
	neck = (modeBit >> 6) & 1;
240017c0:	4e37      	ldr	r6, [pc, #220]	; (240018a0 <updateStateFromSPIMessage+0xec>)

	if (voice != prevVoice)
240017c2:	4c38      	ldr	r4, [pc, #224]	; (240018a4 <updateStateFromSPIMessage+0xf0>)
	int modeBit = SPI_LEVERS[24 + offset];
240017c4:	7e2b      	ldrb	r3, [r5, #24]
	voice = SPI_LEVERS[25 + offset];
240017c6:	7e6d      	ldrb	r5, [r5, #25]
	edit = (modeBit >> 4) & 1;
240017c8:	4f37      	ldr	r7, [pc, #220]	; (240018a8 <updateStateFromSPIMessage+0xf4>)
	voice = SPI_LEVERS[25 + offset];
240017ca:	600d      	str	r5, [r1, #0]
	neck = (modeBit >> 6) & 1;
240017cc:	f3c3 1580 	ubfx	r5, r3, #6, #1
240017d0:	6035      	str	r5, [r6, #0]
	dualSlider = (modeBit >> 5) & 1;
240017d2:	f3c3 1540 	ubfx	r5, r3, #5, #1
	if (voice != prevVoice)
240017d6:	680e      	ldr	r6, [r1, #0]
	dualSlider = (modeBit >> 5) & 1;
240017d8:	f8cc 5000 	str.w	r5, [ip]
	edit = (modeBit >> 4) & 1;
240017dc:	f3c3 1500 	ubfx	r5, r3, #4, #1
240017e0:	603d      	str	r5, [r7, #0]
	if (voice != prevVoice)
240017e2:	6825      	ldr	r5, [r4, #0]
240017e4:	42ae      	cmp	r6, r5
240017e6:	d00f      	beq.n	24001808 <updateStateFromSPIMessage+0x54>
	{
		if ((voice == 63) || (voice == 62) || (voice == 61))
240017e8:	680d      	ldr	r5, [r1, #0]
240017ea:	2d3f      	cmp	r5, #63	; 0x3f
240017ec:	d04e      	beq.n	2400188c <updateStateFromSPIMessage+0xd8>
240017ee:	680d      	ldr	r5, [r1, #0]
240017f0:	2d3e      	cmp	r5, #62	; 0x3e
240017f2:	d04b      	beq.n	2400188c <updateStateFromSPIMessage+0xd8>
240017f4:	680d      	ldr	r5, [r1, #0]
240017f6:	2d3d      	cmp	r5, #61	; 0x3d
240017f8:	d048      	beq.n	2400188c <updateStateFromSPIMessage+0xd8>
		{
			currentActivePreset = voice;
		}
		else
		{
			presetWaitingToLoad = 1;
240017fa:	4d2c      	ldr	r5, [pc, #176]	; (240018ac <updateStateFromSPIMessage+0xf8>)
240017fc:	2601      	movs	r6, #1
240017fe:	602e      	str	r6, [r5, #0]
			presetNumberToLoad = voice;
24001800:	680d      	ldr	r5, [r1, #0]
24001802:	4e2b      	ldr	r6, [pc, #172]	; (240018b0 <updateStateFromSPIMessage+0xfc>)
24001804:	b2ed      	uxtb	r5, r5
24001806:	7035      	strb	r5, [r6, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
24001808:	4410      	add	r0, r2
	prevVoice = voice;
2400180a:	680a      	ldr	r2, [r1, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
2400180c:	f003 030f 	and.w	r3, r3, #15
24001810:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	prevVoice = voice;
24001814:	6022      	str	r2, [r4, #0]
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
24001816:	7e81      	ldrb	r1, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
24001818:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
2400181a:	7ec2      	ldrb	r2, [r0, #27]
2400181c:	4c25      	ldr	r4, [pc, #148]	; (240018b4 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
2400181e:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
24001822:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	volumePedal = volumePedalInt * 0.0002442002442f;
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
24001826:	7f05      	ldrb	r5, [r0, #28]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
24001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
2400182c:	7f41      	ldrb	r1, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
2400182e:	b293      	uxth	r3, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
24001830:	ed9f 7a21 	vldr	s14, [pc, #132]	; 240018b8 <updateStateFromSPIMessage+0x104>
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
24001834:	eb01 2105 	add.w	r1, r1, r5, lsl #8
	if (stringPositions[0] != stringPositionsPrev[0])
24001838:	4d20      	ldr	r5, [pc, #128]	; (240018bc <updateStateFromSPIMessage+0x108>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
2400183a:	8023      	strh	r3, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
2400183c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
24001840:	8823      	ldrh	r3, [r4, #0]
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
24001842:	4c1f      	ldr	r4, [pc, #124]	; (240018c0 <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;
24001844:	b29b      	uxth	r3, r3
24001846:	4e1f      	ldr	r6, [pc, #124]	; (240018c4 <updateStateFromSPIMessage+0x110>)
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
24001848:	6021      	str	r1, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
2400184a:	ee00 3a10 	vmov	s0, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
2400184e:	4b1e      	ldr	r3, [pc, #120]	; (240018c8 <updateStateFromSPIMessage+0x114>)
	if (stringPositions[0] != stringPositionsPrev[0])
24001850:	6822      	ldr	r2, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
24001852:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
24001856:	edc3 7a00 	vstr	s15, [r3]
	if (stringPositions[0] != stringPositionsPrev[0])
2400185a:	682b      	ldr	r3, [r5, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
2400185c:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (stringPositions[0] != stringPositionsPrev[0])
24001860:	429a      	cmp	r2, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
24001862:	ed86 0a00 	vstr	s0, [r6]
	if (stringPositions[0] != stringPositionsPrev[0])
24001866:	d00a      	beq.n	2400187e <updateStateFromSPIMessage+0xca>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
24001868:	2201      	movs	r2, #1
2400186a:	f44f 6100 	mov.w	r1, #2048	; 0x800
2400186e:	4817      	ldr	r0, [pc, #92]	; (240018cc <updateStateFromSPIMessage+0x118>)
24001870:	f006 fca2 	bl	240081b8 <HAL_GPIO_WritePin>
		newBar = 1;
24001874:	4b16      	ldr	r3, [pc, #88]	; (240018d0 <updateStateFromSPIMessage+0x11c>)
24001876:	2201      	movs	r2, #1
	}
	stringPositionsPrev[0] = stringPositions[0];
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
24001878:	ed96 0a00 	vldr	s0, [r6]
		newBar = 1;
2400187c:	601a      	str	r2, [r3, #0]
	stringPositionsPrev[0] = stringPositions[0];
2400187e:	6823      	ldr	r3, [r4, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
24001880:	4814      	ldr	r0, [pc, #80]	; (240018d4 <updateStateFromSPIMessage+0x120>)
	stringPositionsPrev[0] = stringPositions[0];
24001882:	602b      	str	r3, [r5, #0]
}
24001884:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
24001888:	f012 b902 	b.w	24013a90 <tExpSmooth_setDest>
			currentActivePreset = voice;
2400188c:	680d      	ldr	r5, [r1, #0]
2400188e:	4e12      	ldr	r6, [pc, #72]	; (240018d8 <updateStateFromSPIMessage+0x124>)
24001890:	b2ed      	uxtb	r5, r5
24001892:	7035      	strb	r5, [r6, #0]
24001894:	e7b8      	b.n	24001808 <updateStateFromSPIMessage+0x54>
24001896:	bf00      	nop
24001898:	30000400 	.word	0x30000400
2400189c:	20017a74 	.word	0x20017a74
240018a0:	200054b4 	.word	0x200054b4
240018a4:	20005624 	.word	0x20005624
240018a8:	20005044 	.word	0x20005044
240018ac:	2001b900 	.word	0x2001b900
240018b0:	2000074c 	.word	0x2000074c
240018b4:	20017a80 	.word	0x20017a80
240018b8:	39800801 	.word	0x39800801
240018bc:	200179e8 	.word	0x200179e8
240018c0:	200179d8 	.word	0x200179d8
240018c4:	20017a7c 	.word	0x20017a7c
240018c8:	200054f0 	.word	0x200054f0
240018cc:	58020c00 	.word	0x58020c00
240018d0:	200054b8 	.word	0x200054b8
240018d4:	20017a84 	.word	0x20017a84
240018d8:	20017c7d 	.word	0x20017c7d
240018dc:	20005040 	.word	0x20005040

240018e0 <audioTickString>:




float  audioTickString(void)
{
240018e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
240018e4:	f8df 9210 	ldr.w	r9, [pc, #528]	; 24001af8 <audioTickString+0x218>
240018e8:	4d74      	ldr	r5, [pc, #464]	; (24001abc <audioTickString+0x1dc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240018ea:	4875      	ldr	r0, [pc, #468]	; (24001ac0 <audioTickString+0x1e0>)
240018ec:	f8df 820c 	ldr.w	r8, [pc, #524]	; 24001afc <audioTickString+0x21c>
240018f0:	462c      	mov	r4, r5
240018f2:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
240018f6:	ed2d 8b0c 	vpush	{d8-d13}
240018fa:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
240018fc:	f899 3000 	ldrb.w	r3, [r9]
{
24001900:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
24001902:	009b      	lsls	r3, r3, #2
24001904:	3307      	adds	r3, #7
24001906:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
2400190a:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
2400190e:	f012 f8c3 	bl	24013a98 <tExpSmooth_tick>
24001912:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
24001916:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001918:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
2400191a:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
2400191e:	f012 f8bb 	bl	24013a98 <tExpSmooth_tick>
24001922:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
24001926:	4554      	cmp	r4, sl
24001928:	d1f6      	bne.n	24001918 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
2400192a:	4a66      	ldr	r2, [pc, #408]	; (24001ac4 <audioTickString+0x1e4>)
2400192c:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
2400192e:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
24001932:	eddf 9a65 	vldr	s19, [pc, #404]	; 24001ac8 <audioTickString+0x1e8>
	pluckPos = knobScaled[9];
24001936:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
24001938:	2b00      	cmp	r3, #0
2400193a:	f000 8088 	beq.w	24001a4e <audioTickString+0x16e>
2400193e:	4b63      	ldr	r3, [pc, #396]	; (24001acc <audioTickString+0x1ec>)
		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
24001940:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
		if (note[i] < 0.0f)
24001944:	eef0 aa69 	vmov.f32	s21, s19
24001948:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 24001b00 <audioTickString+0x220>
2400194c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
2400194e:	f04f 0800 	mov.w	r8, #0
24001952:	4b5f      	ldr	r3, [pc, #380]	; (24001ad0 <audioTickString+0x1f0>)
24001954:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 24001b04 <audioTickString+0x224>
24001958:	4c5e      	ldr	r4, [pc, #376]	; (24001ad4 <audioTickString+0x1f4>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
2400195a:	eddf ca5f 	vldr	s25, [pc, #380]	; 24001ad8 <audioTickString+0x1f8>
2400195e:	ed9f ca5f 	vldr	s24, [pc, #380]	; 24001adc <audioTickString+0x1fc>
		float decay = 0.1f;
24001962:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 24001ae0 <audioTickString+0x200>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
24001966:	ed9f da5f 	vldr	s26, [pc, #380]	; 24001ae4 <audioTickString+0x204>
2400196a:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
2400196c:	ecfb 7a01 	vldmia	fp!, {s15}
24001970:	ecba 0a01 	vldmia	sl!, {s0}
24001974:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
24001978:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24001980:	f100 8097 	bmi.w	24001ab2 <audioTickString+0x1d2>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001984:	ed86 0a00 	vstr	s0, [r6]
		float finalFreq = mtof(note[i]) * invMapping[i] ;
24001988:	f013 ff62 	bl	24015850 <mtof>
2400198c:	683b      	ldr	r3, [r7, #0]
2400198e:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
24001992:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
24001996:	eeb0 0a4c 	vmov.f32	s0, s24
		float finalFreq = mtof(note[i]) * invMapping[i] ;
2400199a:	ecf3 7a01 	vldmia	r3!, {s15}
		float decay = 0.1f;
2400199e:	eeb0 aa49 	vmov.f32	s20, s18
		float finalFreq = mtof(note[i]) * invMapping[i] ;
240019a2:	603b      	str	r3, [r7, #0]
240019a4:	ee28 8a27 	vmul.f32	s16, s16, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
240019a8:	eea7 0a2c 	vfma.f32	s0, s14, s25
240019ac:	f013 ff7a 	bl	240158a4 <faster_mtof>
		if (lsDecay[i])
240019b0:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
240019b2:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
240019b6:	f812 3b01 	ldrb.w	r3, [r2], #1
240019ba:	607a      	str	r2, [r7, #4]
240019bc:	b12b      	cbz	r3, 240019ca <audioTickString+0xea>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
240019be:	eeb0 aa6b 	vmov.f32	s20, s23
240019c2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
240019c6:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
240019ca:	4620      	mov	r0, r4
240019cc:	ed95 0a08 	vldr	s0, [r5, #32]
240019d0:	f018 fad8 	bl	24019f84 <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
240019d4:	4620      	mov	r0, r4
240019d6:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
240019da:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
240019de:	f018 f92b 	bl	24019c38 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
240019e2:	4620      	mov	r0, r4
240019e4:	eeb0 0a68 	vmov.f32	s0, s17
	for (int i = 0; i < numStringsThisBoard; i++)
240019e8:	3604      	adds	r6, #4
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
240019ea:	f018 f921 	bl	24019c30 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
240019ee:	4620      	mov	r0, r4
240019f0:	ed95 0a00 	vldr	s0, [r5]
240019f4:	f018 f946 	bl	24019c84 <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
240019f8:	ed95 0a01 	vldr	s0, [r5, #4]
240019fc:	4620      	mov	r0, r4
240019fe:	ee20 0a09 	vmul.f32	s0, s0, s18
24001a02:	f018 f943 	bl	24019c8c <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
24001a06:	ed95 0a02 	vldr	s0, [r5, #8]
24001a0a:	4620      	mov	r0, r4
24001a0c:	ee20 0a09 	vmul.f32	s0, s0, s18
24001a10:	f018 f940 	bl	24019c94 <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
24001a14:	edd5 7a03 	vldr	s15, [r5, #12]
24001a18:	4620      	mov	r0, r4
24001a1a:	eef4 7aeb 	vcmpe.f32	s15, s23
24001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24001a22:	bfcc      	ite	gt
24001a24:	2101      	movgt	r1, #1
24001a26:	2100      	movle	r1, #0
24001a28:	f018 f938 	bl	24019c9c <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
24001a2c:	4620      	mov	r0, r4
24001a2e:	eeb0 0a48 	vmov.f32	s0, s16
24001a32:	f018 f8ad 	bl	24019b90 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001a36:	4620      	mov	r0, r4
24001a38:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
24001a3c:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001a3e:	f018 f9df 	bl	24019e00 <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
24001a42:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001a46:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
24001a4a:	4543      	cmp	r3, r8
24001a4c:	dc8e      	bgt.n	2400196c <audioTickString+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24001a4e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 24001ae8 <audioTickString+0x208>
24001a52:	eddf 7a26 	vldr	s15, [pc, #152]	; 24001aec <audioTickString+0x20c>
24001a56:	eef0 0a40 	vmov.f32	s1, s0
24001a5a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 24001af0 <audioTickString+0x210>
24001a5e:	eeeb 0a27 	vfma.f32	s1, s22, s15
24001a62:	f034 faad 	bl	24035fc0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
24001a66:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001a6a:	4a22      	ldr	r2, [pc, #136]	; (24001af4 <audioTickString+0x214>)
	float omAlpha = 1.0f - alpha;
24001a6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
24001a70:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
24001a72:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
24001a76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
24001a7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001a7e:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
24001a84:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001a88:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
24001a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001a90:	ed93 7a00 	vldr	s14, [r3]
24001a94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24001a98:	edd2 6a00 	vldr	s13, [r2]
24001a9c:	ee20 0a26 	vmul.f32	s0, s0, s13
24001aa0:	eea7 0a27 	vfma.f32	s0, s14, s15
}
24001aa4:	ee20 0a29 	vmul.f32	s0, s0, s19
24001aa8:	46bd      	mov	sp, r7
24001aaa:	ecbd 8b0c 	vpop	{d8-d13}
24001aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
24001ab2:	eeb0 0a6a 	vmov.f32	s0, s21
24001ab6:	edc6 aa00 	vstr	s21, [r6]
24001aba:	e765      	b.n	24001988 <audioTickString+0xa8>
24001abc:	20005184 	.word	0x20005184
24001ac0:	20017a84 	.word	0x20017a84
24001ac4:	2000018c 	.word	0x2000018c
24001ac8:	00000000 	.word	0x00000000
24001acc:	20005178 	.word	0x20005178
24001ad0:	20005368 	.word	0x20005368
24001ad4:	20005350 	.word	0x20005350
24001ad8:	430c0000 	.word	0x430c0000
24001adc:	42700000 	.word	0x42700000
24001ae0:	3dcccccd 	.word	0x3dcccccd
24001ae4:	44480000 	.word	0x44480000
24001ae8:	423c0000 	.word	0x423c0000
24001aec:	42a00000 	.word	0x42a00000
24001af0:	42fe0000 	.word	0x42fe0000
24001af4:	20000544 	.word	0x20000544
24001af8:	20000052 	.word	0x20000052
24001afc:	200051f8 	.word	0x200051f8
24001b00:	200179c8 	.word	0x200179c8
24001b04:	200179d0 	.word	0x200179d0

24001b08 <audioTickString2>:



float  audioTickString2(void)
{
24001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
24001b0c:	4ba8      	ldr	r3, [pc, #672]	; (24001db0 <audioTickString2+0x2a8>)
24001b0e:	4da9      	ldr	r5, [pc, #676]	; (24001db4 <audioTickString2+0x2ac>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001b10:	48a9      	ldr	r0, [pc, #676]	; (24001db8 <audioTickString2+0x2b0>)
24001b12:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 24001e0c <audioTickString2+0x304>
24001b16:	462c      	mov	r4, r5
24001b18:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
24001b1c:	ed2d 8b08 	vpush	{d8-d11}
24001b20:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
24001b22:	781b      	ldrb	r3, [r3, #0]
{
24001b24:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
24001b26:	009b      	lsls	r3, r3, #2
24001b28:	3307      	adds	r3, #7
24001b2a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
24001b2e:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001b32:	f011 ffb1 	bl	24013a98 <tExpSmooth_tick>
24001b36:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
24001b3a:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001b3c:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
24001b3e:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001b42:	f011 ffa9 	bl	24013a98 <tExpSmooth_tick>
24001b46:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
24001b4a:	454c      	cmp	r4, r9
24001b4c:	d1f6      	bne.n	24001b3c <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
24001b4e:	4b98      	ldr	r3, [pc, #608]	; (24001db0 <audioTickString2+0x2a8>)
	float temp = 0.0f;
24001b50:	eddf 8a9a 	vldr	s17, [pc, #616]	; 24001dbc <audioTickString2+0x2b4>
	for (int i = 0; i < numStringsThisBoard; i++)
24001b54:	781b      	ldrb	r3, [r3, #0]
24001b56:	2b00      	cmp	r3, #0
24001b58:	f000 80e8 	beq.w	24001d2c <audioTickString2+0x224>
24001b5c:	4b98      	ldr	r3, [pc, #608]	; (24001dc0 <audioTickString2+0x2b8>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
24001b5e:	eeb0 aa68 	vmov.f32	s20, s17
24001b62:	617e      	str	r6, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
24001b64:	2600      	movs	r6, #0
24001b66:	60bb      	str	r3, [r7, #8]
24001b68:	4b96      	ldr	r3, [pc, #600]	; (24001dc4 <audioTickString2+0x2bc>)
24001b6a:	4c97      	ldr	r4, [pc, #604]	; (24001dc8 <audioTickString2+0x2c0>)
24001b6c:	60fb      	str	r3, [r7, #12]
24001b6e:	4b97      	ldr	r3, [pc, #604]	; (24001dcc <audioTickString2+0x2c4>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001b70:	eddf 9a97 	vldr	s19, [pc, #604]	; 24001dd0 <audioTickString2+0x2c8>
24001b74:	607b      	str	r3, [r7, #4]
24001b76:	f8df 8298 	ldr.w	r8, [pc, #664]	; 24001e10 <audioTickString2+0x308>
24001b7a:	4b96      	ldr	r3, [pc, #600]	; (24001dd4 <audioTickString2+0x2cc>)
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001b7c:	f8df b294 	ldr.w	fp, [pc, #660]	; 24001e14 <audioTickString2+0x30c>
24001b80:	f8df a294 	ldr.w	sl, [pc, #660]	; 24001e18 <audioTickString2+0x310>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001b84:	f8df 9294 	ldr.w	r9, [pc, #660]	; 24001e1c <audioTickString2+0x314>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001b88:	eddf aa93 	vldr	s21, [pc, #588]	; 24001dd8 <audioTickString2+0x2d0>
24001b8c:	613b      	str	r3, [r7, #16]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001b8e:	68bb      	ldr	r3, [r7, #8]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001b90:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001b92:	eddf ba92 	vldr	s23, [pc, #584]	; 24001ddc <audioTickString2+0x2d4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001b96:	ecf3 7a01 	vldmia	r3!, {s15}
24001b9a:	60bb      	str	r3, [r7, #8]
24001b9c:	68fb      	ldr	r3, [r7, #12]
24001b9e:	ecb3 7a01 	vldmia	r3!, {s14}
24001ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
24001ba6:	60fb      	str	r3, [r7, #12]
			note[i] = 0.0f;
24001ba8:	697b      	ldr	r3, [r7, #20]
		if (note[i] < 0.0f)
24001baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001bb2:	bf54      	ite	pl
24001bb4:	edc3 7a00 	vstrpl	s15, [r3]
			note[i] = 0.0f;
24001bb8:	ed83 aa00 	vstrmi	s20, [r3]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001bbc:	f014 f8ca 	bl	24015d54 <tNoise_tick>
24001bc0:	4650      	mov	r0, sl
24001bc2:	f012 f9f1 	bl	24013fa8 <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001bc6:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001bc8:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001bcc:	f014 f8c2 	bl	24015d54 <tNoise_tick>
24001bd0:	4648      	mov	r0, r9
24001bd2:	f012 f9e9 	bl	24013fa8 <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001bd6:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001bd8:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001bdc:	f011 fce4 	bl	240135a8 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001be0:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001be2:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001be6:	eeb0 0a6a 	vmov.f32	s0, s21
24001bea:	f018 fb5d 	bl	2401a2a8 <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001bee:	ed95 0a05 	vldr	s0, [r5, #20]
24001bf2:	ee20 0a29 	vmul.f32	s0, s0, s19
24001bf6:	f013 fe55 	bl	240158a4 <faster_mtof>
24001bfa:	4650      	mov	r0, sl
24001bfc:	f012 fbda 	bl	240143b4 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
24001c00:	ed95 0a06 	vldr	s0, [r5, #24]
24001c04:	ee20 0a29 	vmul.f32	s0, s0, s19
24001c08:	f013 fe4c 	bl	240158a4 <faster_mtof>
24001c0c:	4648      	mov	r0, r9
24001c0e:	f012 fbd1 	bl	240143b4 <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001c12:	ed95 0a07 	vldr	s0, [r5, #28]
24001c16:	4620      	mov	r0, r4
24001c18:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001c1c:	f018 fbd2 	bl	2401a3c4 <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
24001c20:	ed95 0a08 	vldr	s0, [r5, #32]
24001c24:	4620      	mov	r0, r4
24001c26:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001c2a:	f018 fbdf 	bl	2401a3ec <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
24001c2e:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
24001c32:	4620      	mov	r0, r4
24001c34:	f018 fb58 	bl	2401a2e8 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
24001c38:	ed95 0a02 	vldr	s0, [r5, #8]
24001c3c:	4620      	mov	r0, r4
24001c3e:	f018 fb0f 	bl	2401a260 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
24001c42:	eeb0 0a6b 	vmov.f32	s0, s23
24001c46:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
24001c4a:	4620      	mov	r0, r4
24001c4c:	eddf 7a64 	vldr	s15, [pc, #400]	; 24001de0 <audioTickString2+0x2d8>
24001c50:	eea7 0a27 	vfma.f32	s0, s14, s15
24001c54:	f018 fb16 	bl	2401a284 <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001c58:	697b      	ldr	r3, [r7, #20]
24001c5a:	ed9f 1a62 	vldr	s2, [pc, #392]	; 24001de4 <audioTickString2+0x2dc>
24001c5e:	ecf3 0a01 	vldmia	r3!, {s1}
24001c62:	ed9f 0a61 	vldr	s0, [pc, #388]	; 24001de8 <audioTickString2+0x2e0>
24001c66:	617b      	str	r3, [r7, #20]
24001c68:	f034 f9aa 	bl	24035fc0 <__LEAF_clip_veneer>
24001c6c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 24001dec <audioTickString2+0x2e4>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth * invMapping[i] ;

		tLivingString2_setFreq(&strings[i], finalFreq);
24001c70:	4620      	mov	r0, r4
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001c72:	eddf 7a5f 	vldr	s15, [pc, #380]	; 24001df0 <audioTickString2+0x2e8>
		float finalFreq = freqToSmooth * invMapping[i] ;
24001c76:	687b      	ldr	r3, [r7, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001c78:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001c7c:	495d      	ldr	r1, [pc, #372]	; (24001df4 <audioTickString2+0x2ec>)
		float finalFreq = freqToSmooth * invMapping[i] ;
24001c7e:	ecb3 0a01 	vldmia	r3!, {s0}
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float finalFreq = freqToSmooth * invMapping[i] ;
24001c86:	607b      	str	r3, [r7, #4]
		int tempIndexI = (int)tempIndexF;
24001c88:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
24001c90:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
24001c94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001c98:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001c9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001c9e:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001ca2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001ca6:	f3c2 020e 	ubfx	r2, r2, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
24001caa:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001cae:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001cb2:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001cb6:	ed93 6a00 	vldr	s12, [r3]
24001cba:	ee67 7a86 	vmul.f32	s15, s15, s12
24001cbe:	eee7 7a26 	vfma.f32	s15, s14, s13
		tLivingString2_setFreq(&strings[i], finalFreq);
24001cc2:	ee20 0a27 	vmul.f32	s0, s0, s15
24001cc6:	f018 faad 	bl	2401a224 <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
24001cca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24001cce:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001cd2:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001cd4:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
24001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
24001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001ce0:	bfc8      	it	gt
24001ce2:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001ce6:	f018 faf1 	bl	2401a2cc <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
24001cea:	ee28 0a0b 	vmul.f32	s0, s16, s22
24001cee:	4620      	mov	r0, r4
24001cf0:	f018 fb9e 	bl	2401a430 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
24001cf4:	693b      	ldr	r3, [r7, #16]
24001cf6:	eca3 aa01 	vstmia	r3!, {s20}
24001cfa:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
24001cfc:	2e00      	cmp	r6, #0
24001cfe:	d14f      	bne.n	24001da0 <audioTickString2+0x298>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001d00:	4b34      	ldr	r3, [pc, #208]	; (24001dd4 <audioTickString2+0x2cc>)
24001d02:	edd3 7a01 	vldr	s15, [r3, #4]
24001d06:	eee9 7a00 	vfma.f32	s15, s18, s0
24001d0a:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
24001d0e:	4b28      	ldr	r3, [pc, #160]	; (24001db0 <audioTickString2+0x2a8>)
24001d10:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
24001d12:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
24001d16:	3404      	adds	r4, #4
24001d18:	781b      	ldrb	r3, [r3, #0]
24001d1a:	f108 0804 	add.w	r8, r8, #4
24001d1e:	42b3      	cmp	r3, r6
24001d20:	f73f af35 	bgt.w	24001b8e <audioTickString2+0x86>
24001d24:	eddf 7a34 	vldr	s15, [pc, #208]	; 24001df8 <audioTickString2+0x2f0>
24001d28:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24001d2c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 24001dfc <audioTickString2+0x2f4>
24001d30:	eddf 7a33 	vldr	s15, [pc, #204]	; 24001e00 <audioTickString2+0x2f8>
24001d34:	eef0 0a40 	vmov.f32	s1, s0
24001d38:	ed9f 1a32 	vldr	s2, [pc, #200]	; 24001e04 <audioTickString2+0x2fc>
24001d3c:	eee9 0a27 	vfma.f32	s1, s18, s15
24001d40:	f034 f93e 	bl	24035fc0 <__LEAF_clip_veneer>
24001d44:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
24001d48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001d4c:	4a2e      	ldr	r2, [pc, #184]	; (24001e08 <audioTickString2+0x300>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001d4e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
24001d52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24001d56:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
24001d5a:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001d5e:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
24001d60:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001d64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
24001d68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001d6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001d70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
24001d74:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001d78:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
24001d7c:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001d80:	edd3 6a00 	vldr	s13, [r3]
24001d84:	ee60 0aa7 	vmul.f32	s1, s1, s15
24001d88:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001d8c:	ee60 0aa8 	vmul.f32	s1, s1, s17
24001d90:	f034 f916 	bl	24035fc0 <__LEAF_clip_veneer>
}
24001d94:	371c      	adds	r7, #28
24001d96:	46bd      	mov	sp, r7
24001d98:	ecbd 8b08 	vpop	{d8-d11}
24001d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001da0:	4b0c      	ldr	r3, [pc, #48]	; (24001dd4 <audioTickString2+0x2cc>)
24001da2:	edd3 7a00 	vldr	s15, [r3]
24001da6:	eee9 7a00 	vfma.f32	s15, s18, s0
24001daa:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
24001dae:	e7ae      	b.n	24001d0e <audioTickString2+0x206>
24001db0:	20000052 	.word	0x20000052
24001db4:	20005184 	.word	0x20005184
24001db8:	20017a84 	.word	0x20017a84
24001dbc:	00000000 	.word	0x00000000
24001dc0:	200179c8 	.word	0x200179c8
24001dc4:	200179d0 	.word	0x200179d0
24001dc8:	200179f8 	.word	0x200179f8
24001dcc:	20005178 	.word	0x20005178
24001dd0:	43000000 	.word	0x43000000
24001dd4:	2000561c 	.word	0x2000561c
24001dd8:	3f7ff972 	.word	0x3f7ff972
24001ddc:	3dcccccd 	.word	0x3dcccccd
24001de0:	3f4ccccd 	.word	0x3f4ccccd
24001de4:	43480000 	.word	0x43480000
24001de8:	c3480000 	.word	0xc3480000
24001dec:	42c80000 	.word	0x42c80000
24001df0:	46800000 	.word	0x46800000
24001df4:	3001a000 	.word	0x3001a000
24001df8:	3f666666 	.word	0x3f666666
24001dfc:	423c0000 	.word	0x423c0000
24001e00:	42a00000 	.word	0x42a00000
24001e04:	42fe0000 	.word	0x42fe0000
24001e08:	20000544 	.word	0x20000544
24001e0c:	200051f8 	.word	0x200051f8
24001e10:	20005078 	.word	0x20005078
24001e14:	200054b0 	.word	0x200054b0
24001e18:	200054c8 	.word	0x200054c8
24001e1c:	200054cc 	.word	0x200054cc

24001e20 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001e20:	4b05      	ldr	r3, [pc, #20]	; (24001e38 <lfoSawSquareTick+0x18>)
24001e22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e26:	b510      	push	{r4, lr}
24001e28:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001e2a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e2e:	f017 fba5 	bl	2401957c <tSawSquareLFO_tick>
24001e32:	ed84 0a00 	vstr	s0, [r4]
}
24001e36:	bd10      	pop	{r4, pc}
24001e38:	200052c0 	.word	0x200052c0

24001e3c <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001e3c:	4b05      	ldr	r3, [pc, #20]	; (24001e54 <lfoSineTriTick+0x18>)
24001e3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e42:	b510      	push	{r4, lr}
24001e44:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001e46:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e4a:	f017 fcd9 	bl	24019800 <tSineTriLFO_tick>
24001e4e:	ed84 0a00 	vstr	s0, [r4]
}
24001e52:	bd10      	pop	{r4, pc}
24001e54:	20005310 	.word	0x20005310

24001e58 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
24001e58:	4b05      	ldr	r3, [pc, #20]	; (24001e70 <lfoSineTick+0x18>)
24001e5a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e5e:	b510      	push	{r4, lr}
24001e60:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
24001e62:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e66:	f013 ff21 	bl	24015cac <tCycle_tick>
24001e6a:	ed84 0a00 	vstr	s0, [r4]
}
24001e6e:	bd10      	pop	{r4, pc}
24001e70:	200052f0 	.word	0x200052f0

24001e74 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001e74:	4b05      	ldr	r3, [pc, #20]	; (24001e8c <lfoTriTick+0x18>)
24001e76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e7a:	b510      	push	{r4, lr}
24001e7c:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001e7e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e82:	f017 fc41 	bl	24019708 <tTriLFO_tick>
24001e86:	ed84 0a00 	vstr	s0, [r4]
}
24001e8a:	bd10      	pop	{r4, pc}
24001e8c:	20005330 	.word	0x20005330

24001e90 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001e90:	4b08      	ldr	r3, [pc, #32]	; (24001eb4 <lfoSawTick+0x24>)
24001e92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e96:	b510      	push	{r4, lr}
24001e98:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001e9a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e9e:	f017 f9ef 	bl	24019280 <tIntPhasor_tick>
24001ea2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24001ea6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24001eaa:	eee0 7a07 	vfma.f32	s15, s0, s14
24001eae:	edc4 7a00 	vstr	s15, [r4]
}
24001eb2:	bd10      	pop	{r4, pc}
24001eb4:	200052a0 	.word	0x200052a0

24001eb8 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001eb8:	4b05      	ldr	r3, [pc, #20]	; (24001ed0 <lfoPulseTick+0x18>)
24001eba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001ebe:	b510      	push	{r4, lr}
24001ec0:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001ec2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001ec6:	f017 faa9 	bl	2401941c <tSquareLFO_tick>
24001eca:	ed84 0a00 	vstr	s0, [r4]
}
24001ece:	bd10      	pop	{r4, pc}
24001ed0:	20005280 	.word	0x20005280

24001ed4 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
24001ed4:	4b03      	ldr	r3, [pc, #12]	; (24001ee4 <lfoSawSquareSetRate+0x10>)
24001ed6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001ede:	f017 bb8f 	b.w	24019600 <tSawSquareLFO_setFreq>
24001ee2:	bf00      	nop
24001ee4:	200052c0 	.word	0x200052c0

24001ee8 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
24001ee8:	4b03      	ldr	r3, [pc, #12]	; (24001ef8 <lfoSineTriSetRate+0x10>)
24001eea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001eee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001ef2:	f017 bcd1 	b.w	24019898 <tSineTriLFO_setFreq>
24001ef6:	bf00      	nop
24001ef8:	20005310 	.word	0x20005310

24001efc <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
24001efc:	4b03      	ldr	r3, [pc, #12]	; (24001f0c <lfoSineSetRate+0x10>)
24001efe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f06:	f013 bef7 	b.w	24015cf8 <tCycle_setFreq>
24001f0a:	bf00      	nop
24001f0c:	200052f0 	.word	0x200052f0

24001f10 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
24001f10:	4b03      	ldr	r3, [pc, #12]	; (24001f20 <lfoTriSetRate+0x10>)
24001f12:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f1a:	f017 bc0f 	b.w	2401973c <tTriLFO_setFreq>
24001f1e:	bf00      	nop
24001f20:	20005330 	.word	0x20005330

24001f24 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
24001f24:	4b03      	ldr	r3, [pc, #12]	; (24001f34 <lfoSawSetRate+0x10>)
24001f26:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f2e:	f017 b9b7 	b.w	240192a0 <tIntPhasor_setFreq>
24001f32:	bf00      	nop
24001f34:	200052a0 	.word	0x200052a0

24001f38 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
24001f38:	4b03      	ldr	r3, [pc, #12]	; (24001f48 <lfoPulseSetRate+0x10>)
24001f3a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f42:	f017 ba8f 	b.w	24019464 <tSquareLFO_setFreq>
24001f46:	bf00      	nop
24001f48:	20005280 	.word	0x20005280

24001f4c <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
24001f4c:	4b03      	ldr	r3, [pc, #12]	; (24001f5c <lfoSawSquareSetPhase+0x10>)
24001f4e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f56:	f017 bb77 	b.w	24019648 <tSawSquareLFO_setPhase>
24001f5a:	bf00      	nop
24001f5c:	200052c0 	.word	0x200052c0

24001f60 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
24001f60:	4b03      	ldr	r3, [pc, #12]	; (24001f70 <lfoSineTriSetPhase+0x10>)
24001f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f6a:	f017 bcad 	b.w	240198c8 <tSineTriLFO_setPhase>
24001f6e:	bf00      	nop
24001f70:	20005310 	.word	0x20005310

24001f74 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
24001f74:	4b03      	ldr	r3, [pc, #12]	; (24001f84 <lfoSineSetPhase+0x10>)
24001f76:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f7e:	f013 bec7 	b.w	24015d10 <tCycle_setPhase>
24001f82:	bf00      	nop
24001f84:	200052f0 	.word	0x200052f0

24001f88 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
24001f88:	4b03      	ldr	r3, [pc, #12]	; (24001f98 <lfoTriSetPhase+0x10>)
24001f8a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f92:	f017 bbdf 	b.w	24019754 <tTriLFO_setPhase>
24001f96:	bf00      	nop
24001f98:	20005330 	.word	0x20005330

24001f9c <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
24001f9c:	4b03      	ldr	r3, [pc, #12]	; (24001fac <lfoSawSetPhase+0x10>)
24001f9e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001fa2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001fa6:	f017 b987 	b.w	240192b8 <tIntPhasor_setPhase>
24001faa:	bf00      	nop
24001fac:	200052a0 	.word	0x200052a0

24001fb0 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
24001fb0:	4b03      	ldr	r3, [pc, #12]	; (24001fc0 <lfoPulseSetPhase+0x10>)
24001fb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001fb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001fba:	f017 ba8b 	b.w	240194d4 <tSquareLFO_setPhase>
24001fbe:	bf00      	nop
24001fc0:	20005280 	.word	0x20005280

24001fc4 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
24001fc4:	4b03      	ldr	r3, [pc, #12]	; (24001fd4 <lfoSawSquareSetShape+0x10>)
24001fc6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001fca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001fce:	f017 bb6d 	b.w	240196ac <tSawSquareLFO_setShape>
24001fd2:	bf00      	nop
24001fd4:	200052c0 	.word	0x200052c0

24001fd8 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
24001fd8:	4b03      	ldr	r3, [pc, #12]	; (24001fe8 <lfoSineTriSetShape+0x10>)
24001fda:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001fde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001fe2:	f017 bc89 	b.w	240198f8 <tSineTriLFO_setShape>
24001fe6:	bf00      	nop
24001fe8:	20005310 	.word	0x20005310

24001fec <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
24001fec:	4770      	bx	lr
24001fee:	bf00      	nop

24001ff0 <lfoTriSetShape>:
24001ff0:	4770      	bx	lr
24001ff2:	bf00      	nop

24001ff4 <lfoSawSetShape>:
24001ff4:	4770      	bx	lr
24001ff6:	bf00      	nop

24001ff8 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
24001ff8:	4b03      	ldr	r3, [pc, #12]	; (24002008 <lfoPulseSetShape+0x10>)
24001ffa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001ffe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002002:	f017 ba47 	b.w	24019494 <tSquareLFO_setPulseWidth>
24002006:	bf00      	nop
24002008:	20005280 	.word	0x20005280

2400200c <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400200c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002010:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002044 <FXLowpassParam1+0x38>
24002014:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002048 <FXLowpassParam1+0x3c>
24002018:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2400204c <FXLowpassParam1+0x40>
2400201c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002020:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002050 <FXLowpassParam1+0x44>
{
24002024:	b538      	push	{r3, r4, r5, lr}
24002026:	4605      	mov	r5, r0
24002028:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400202a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
2400202e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002032:	f033 ffc5 	bl	24035fc0 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24002036:	4807      	ldr	r0, [pc, #28]	; (24002054 <FXLowpassParam1+0x48>)
24002038:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400203c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24002040:	f011 bef0 	b.w	24013e24 <tSVF_setFreqFast>
24002044:	429a0000 	.word	0x429a0000
24002048:	420fb824 	.word	0x420fb824
2400204c:	457ff000 	.word	0x457ff000
24002050:	00000000 	.word	0x00000000
24002054:	20000964 	.word	0x20000964

24002058 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002058:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
2400205c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002090 <FXHighpassParam1+0x38>
24002060:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002094 <FXHighpassParam1+0x3c>
24002064:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002098 <FXHighpassParam1+0x40>
24002068:	eee0 7a07 	vfma.f32	s15, s0, s14
2400206c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2400209c <FXHighpassParam1+0x44>
{
24002070:	b538      	push	{r3, r4, r5, lr}
24002072:	4605      	mov	r5, r0
24002074:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002076:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
2400207a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400207e:	f033 ff9f 	bl	24035fc0 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24002082:	4807      	ldr	r0, [pc, #28]	; (240020a0 <FXHighpassParam1+0x48>)
24002084:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
2400208c:	f011 beca 	b.w	24013e24 <tSVF_setFreqFast>
24002090:	429a0000 	.word	0x429a0000
24002094:	420fb824 	.word	0x420fb824
24002098:	457ff000 	.word	0x457ff000
2400209c:	00000000 	.word	0x00000000
240020a0:	20000944 	.word	0x20000944

240020a4 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020a4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240020a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240020dc <FXBandpassParam1+0x38>
240020ac:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240020e0 <FXBandpassParam1+0x3c>
240020b0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240020e4 <FXBandpassParam1+0x40>
240020b4:	eee0 7a07 	vfma.f32	s15, s0, s14
240020b8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240020e8 <FXBandpassParam1+0x44>
{
240020bc:	b538      	push	{r3, r4, r5, lr}
240020be:	4605      	mov	r5, r0
240020c0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020c2:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
240020c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020ca:	f033 ff79 	bl	24035fc0 <__LEAF_clip_veneer>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
240020ce:	4807      	ldr	r0, [pc, #28]	; (240020ec <FXBandpassParam1+0x48>)
240020d0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240020d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
240020d8:	f011 bea4 	b.w	24013e24 <tSVF_setFreqFast>
240020dc:	429a0000 	.word	0x429a0000
240020e0:	420fb824 	.word	0x420fb824
240020e4:	457ff000 	.word	0x457ff000
240020e8:	00000000 	.word	0x00000000
240020ec:	20000904 	.word	0x20000904

240020f0 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020f0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240020f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002128 <FXDiodeParam1+0x38>
240020f8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2400212c <FXDiodeParam1+0x3c>
240020fc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002130 <FXDiodeParam1+0x40>
24002100:	eee0 7a07 	vfma.f32	s15, s0, s14
24002104:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002134 <FXDiodeParam1+0x44>
{
24002108:	b538      	push	{r3, r4, r5, lr}
2400210a:	4605      	mov	r5, r0
2400210c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400210e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24002112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002116:	f033 ff53 	bl	24035fc0 <__LEAF_clip_veneer>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
2400211a:	4807      	ldr	r0, [pc, #28]	; (24002138 <FXDiodeParam1+0x48>)
2400211c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24002124:	f012 bf96 	b.w	24015054 <tDiodeFilter_setFreqFast>
24002128:	429a0000 	.word	0x429a0000
2400212c:	420fb824 	.word	0x420fb824
24002130:	457ff000 	.word	0x457ff000
24002134:	00000000 	.word	0x00000000
24002138:	20000924 	.word	0x20000924

2400213c <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400213c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002140:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002174 <FXPeakParam1+0x38>
24002144:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002178 <FXPeakParam1+0x3c>
24002148:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2400217c <FXPeakParam1+0x40>
2400214c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002150:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002180 <FXPeakParam1+0x44>
{
24002154:	b538      	push	{r3, r4, r5, lr}
24002156:	4605      	mov	r5, r0
24002158:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400215a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
2400215e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002162:	f033 ff2d 	bl	24035fc0 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
24002166:	4807      	ldr	r0, [pc, #28]	; (24002184 <FXPeakParam1+0x48>)
24002168:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400216c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
24002170:	f012 b938 	b.w	240143e4 <tVZFilter_setFreqFast>
24002174:	429a0000 	.word	0x429a0000
24002178:	420fb824 	.word	0x420fb824
2400217c:	457ff000 	.word	0x457ff000
24002180:	00000000 	.word	0x00000000
24002184:	200008e4 	.word	0x200008e4

24002188 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002188:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
2400218c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240021c0 <FXLowShelfParam1+0x38>
24002190:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240021c4 <FXLowShelfParam1+0x3c>
24002194:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240021c8 <FXLowShelfParam1+0x40>
24002198:	eee0 7a07 	vfma.f32	s15, s0, s14
2400219c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240021cc <FXLowShelfParam1+0x44>
{
240021a0:	b538      	push	{r3, r4, r5, lr}
240021a2:	4605      	mov	r5, r0
240021a4:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021a6:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
240021aa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021ae:	f033 ff07 	bl	24035fc0 <__LEAF_clip_veneer>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
240021b2:	4807      	ldr	r0, [pc, #28]	; (240021d0 <FXLowShelfParam1+0x48>)
240021b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240021b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
240021bc:	f012 b912 	b.w	240143e4 <tVZFilter_setFreqFast>
240021c0:	429a0000 	.word	0x429a0000
240021c4:	420fb824 	.word	0x420fb824
240021c8:	457ff000 	.word	0x457ff000
240021cc:	00000000 	.word	0x00000000
240021d0:	200008c4 	.word	0x200008c4

240021d4 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021d4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240021d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2400220c <FXHighShelfParam1+0x38>
240021dc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002210 <FXHighShelfParam1+0x3c>
240021e0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002214 <FXHighShelfParam1+0x40>
240021e4:	eee0 7a07 	vfma.f32	s15, s0, s14
240021e8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002218 <FXHighShelfParam1+0x44>
{
240021ec:	b538      	push	{r3, r4, r5, lr}
240021ee:	4605      	mov	r5, r0
240021f0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021f2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
240021f6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021fa:	f033 fee1 	bl	24035fc0 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
240021fe:	4807      	ldr	r0, [pc, #28]	; (2400221c <FXHighShelfParam1+0x48>)
24002200:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
24002208:	f012 b8ec 	b.w	240143e4 <tVZFilter_setFreqFast>
2400220c:	429a0000 	.word	0x429a0000
24002210:	420fb824 	.word	0x420fb824
24002214:	457ff000 	.word	0x457ff000
24002218:	00000000 	.word	0x00000000
2400221c:	200008a4 	.word	0x200008a4

24002220 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002220:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002224:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002258 <FXNotchParam1+0x38>
24002228:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2400225c <FXNotchParam1+0x3c>
2400222c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002260 <FXNotchParam1+0x40>
24002230:	eee0 7a07 	vfma.f32	s15, s0, s14
24002234:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002264 <FXNotchParam1+0x44>
{
24002238:	b538      	push	{r3, r4, r5, lr}
2400223a:	4605      	mov	r5, r0
2400223c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400223e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
24002242:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002246:	f033 febb 	bl	24035fc0 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
2400224a:	4807      	ldr	r0, [pc, #28]	; (24002268 <FXNotchParam1+0x48>)
2400224c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
24002254:	f012 b8c6 	b.w	240143e4 <tVZFilter_setFreqFast>
24002258:	429a0000 	.word	0x429a0000
2400225c:	420fb824 	.word	0x420fb824
24002260:	457ff000 	.word	0x457ff000
24002264:	00000000 	.word	0x00000000
24002268:	20000884 	.word	0x20000884

2400226c <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400226c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002270:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240022a4 <FXLadderParam1+0x38>
24002274:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240022a8 <FXLadderParam1+0x3c>
24002278:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240022ac <FXLadderParam1+0x40>
2400227c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002280:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240022b0 <FXLadderParam1+0x44>
{
24002284:	b538      	push	{r3, r4, r5, lr}
24002286:	4605      	mov	r5, r0
24002288:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400228a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
2400228e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002292:	f033 fe95 	bl	24035fc0 <__LEAF_clip_veneer>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
24002296:	4807      	ldr	r0, [pc, #28]	; (240022b4 <FXLadderParam1+0x48>)
24002298:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400229c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
240022a0:	f013 b876 	b.w	24015390 <tLadderFilter_setFreqFast>
240022a4:	429a0000 	.word	0x429a0000
240022a8:	420fb824 	.word	0x420fb824
240022ac:	457ff000 	.word	0x457ff000
240022b0:	00000000 	.word	0x00000000
240022b4:	20000864 	.word	0x20000864

240022b8 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022b8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240022bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240022e4 <FXPeakParam2+0x2c>
{
240022c0:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022c2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240022c6:	4605      	mov	r5, r0
240022c8:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022ca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
240022ce:	eeb0 0a67 	vmov.f32	s0, s15
240022d2:	f013 fb55 	bl	24015980 <fasterdbtoa>
240022d6:	4804      	ldr	r0, [pc, #16]	; (240022e8 <FXPeakParam2+0x30>)
240022d8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240022dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022e0:	f012 b9de 	b.w	240146a0 <tVZFilter_setGain>
240022e4:	42480000 	.word	0x42480000
240022e8:	200008e4 	.word	0x200008e4

240022ec <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022ec:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240022f0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24002318 <FXLowShelfParam2+0x2c>
{
240022f4:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022f6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240022fa:	4605      	mov	r5, r0
240022fc:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24002302:	eeb0 0a67 	vmov.f32	s0, s15
24002306:	f013 fb3b 	bl	24015980 <fasterdbtoa>
2400230a:	4804      	ldr	r0, [pc, #16]	; (2400231c <FXLowShelfParam2+0x30>)
2400230c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002314:	f012 b9c4 	b.w	240146a0 <tVZFilter_setGain>
24002318:	42480000 	.word	0x42480000
2400231c:	200008c4 	.word	0x200008c4

24002320 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002320:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24002324:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2400234c <FXHighShelfParam2+0x2c>
{
24002328:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400232a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
2400232e:	4605      	mov	r5, r0
24002330:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002332:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24002336:	eeb0 0a67 	vmov.f32	s0, s15
2400233a:	f013 fb21 	bl	24015980 <fasterdbtoa>
2400233e:	4804      	ldr	r0, [pc, #16]	; (24002350 <FXHighShelfParam2+0x30>)
24002340:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002348:	f012 b9aa 	b.w	240146a0 <tVZFilter_setGain>
2400234c:	42480000 	.word	0x42480000
24002350:	200008a4 	.word	0x200008a4

24002354 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002354:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24002358:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24002380 <FXNotchParam2+0x2c>
{
2400235c:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400235e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
24002362:	4605      	mov	r5, r0
24002364:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002366:	eb04 0445 	add.w	r4, r4, r5, lsl #1
2400236a:	eeb0 0a67 	vmov.f32	s0, s15
2400236e:	f013 fb07 	bl	24015980 <fasterdbtoa>
24002372:	4804      	ldr	r0, [pc, #16]	; (24002384 <FXNotchParam2+0x30>)
24002374:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
24002378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400237c:	f012 b990 	b.w	240146a0 <tVZFilter_setGain>
24002380:	42480000 	.word	0x42480000
24002384:	20000884 	.word	0x20000884

24002388 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
24002388:	4b03      	ldr	r3, [pc, #12]	; (24002398 <FXLowpassParam3+0x10>)
2400238a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400238e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002392:	f011 bd7d 	b.w	24013e90 <tSVF_setQ>
24002396:	bf00      	nop
24002398:	20000964 	.word	0x20000964

2400239c <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
2400239c:	4b03      	ldr	r3, [pc, #12]	; (240023ac <FXHighpassParam3+0x10>)
2400239e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240023a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240023a6:	f011 bd73 	b.w	24013e90 <tSVF_setQ>
240023aa:	bf00      	nop
240023ac:	20000944 	.word	0x20000944

240023b0 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
240023b0:	4b03      	ldr	r3, [pc, #12]	; (240023c0 <FXBandpassParam3+0x10>)
240023b2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240023b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240023ba:	f011 bd69 	b.w	24013e90 <tSVF_setQ>
240023be:	bf00      	nop
240023c0:	20000904 	.word	0x20000904

240023c4 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
240023c4:	4b03      	ldr	r3, [pc, #12]	; (240023d4 <FXDiodeParam3+0x10>)
240023c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240023ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240023ce:	f012 be61 	b.w	24015094 <tDiodeFilter_setQ>
240023d2:	bf00      	nop
240023d4:	20000924 	.word	0x20000924

240023d8 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
240023d8:	4b03      	ldr	r3, [pc, #12]	; (240023e8 <FXPeakParam3+0x10>)
240023da:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240023de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240023e2:	f012 b979 	b.w	240146d8 <tVZFilter_setResonance>
240023e6:	bf00      	nop
240023e8:	200008e4 	.word	0x200008e4

240023ec <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
240023ec:	4b03      	ldr	r3, [pc, #12]	; (240023fc <FXLowShelfParam3+0x10>)
240023ee:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240023f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240023f6:	f012 b96f 	b.w	240146d8 <tVZFilter_setResonance>
240023fa:	bf00      	nop
240023fc:	200008c4 	.word	0x200008c4

24002400 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
24002400:	4b03      	ldr	r3, [pc, #12]	; (24002410 <FXHighShelfParam3+0x10>)
24002402:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400240a:	f012 b965 	b.w	240146d8 <tVZFilter_setResonance>
2400240e:	bf00      	nop
24002410:	200008a4 	.word	0x200008a4

24002414 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
24002414:	4b03      	ldr	r3, [pc, #12]	; (24002424 <FXNotchParam3+0x10>)
24002416:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400241a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400241e:	f012 b95b 	b.w	240146d8 <tVZFilter_setResonance>
24002422:	bf00      	nop
24002424:	20000884 	.word	0x20000884

24002428 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
24002428:	4b03      	ldr	r3, [pc, #12]	; (24002438 <FXLadderParam3+0x10>)
2400242a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400242e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002432:	f012 bfd1 	b.w	240153d8 <tLadderFilter_setQ>
24002436:	bf00      	nop
24002438:	20000864 	.word	0x20000864

2400243c <audioTickL>:
{
2400243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
24002440:	2100      	movs	r1, #0
24002442:	48c5      	ldr	r0, [pc, #788]	; (24002758 <audioTickL+0x31c>)
	uint32_t tempCount5 = DWT->CYCCNT;
24002444:	4ac5      	ldr	r2, [pc, #788]	; (2400275c <audioTickL+0x320>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
24002446:	4bc6      	ldr	r3, [pc, #792]	; (24002760 <audioTickL+0x324>)
24002448:	4dc6      	ldr	r5, [pc, #792]	; (24002764 <audioTickL+0x328>)
2400244a:	4ec7      	ldr	r6, [pc, #796]	; (24002768 <audioTickL+0x32c>)
2400244c:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24002450:	4cc6      	ldr	r4, [pc, #792]	; (2400276c <audioTickL+0x330>)
{
24002452:	ed2d 8b0a 	vpush	{d8-d12}
24002456:	b08d      	sub	sp, #52	; 0x34
	interrupted = 0;
24002458:	7001      	strb	r1, [r0, #0]
{
2400245a:	af00      	add	r7, sp, #0
	uint32_t tempCount5 = DWT->CYCCNT;
2400245c:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
2400245e:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
24002462:	60ba      	str	r2, [r7, #8]
	tickMappings();
24002464:	f033 fd84 	bl	24035f70 <__tickMappings_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24002468:	48c1      	ldr	r0, [pc, #772]	; (24002770 <audioTickL+0x334>)
2400246a:	f011 fb15 	bl	24013a98 <tExpSmooth_tick>
2400246e:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24002472:	4630      	mov	r0, r6
24002474:	f011 fb10 	bl	24013a98 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
24002478:	4bbe      	ldr	r3, [pc, #760]	; (24002774 <audioTickL+0x338>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
2400247a:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
2400247e:	781b      	ldrb	r3, [r3, #0]
24002480:	b12b      	cbz	r3, 2400248e <audioTickL+0x52>
24002482:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
24002484:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
24002488:	d001      	beq.n	2400248e <audioTickL+0x52>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
2400248a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
2400248e:	4545      	cmp	r5, r8
24002490:	f106 0604 	add.w	r6, r6, #4
24002494:	f104 0408 	add.w	r4, r4, #8
24002498:	d1eb      	bne.n	24002472 <audioTickL+0x36>
	float note[numStringsThisBoard];
2400249a:	009a      	lsls	r2, r3, #2
2400249c:	3207      	adds	r2, #7
2400249e:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
240024a2:	ebad 0d02 	sub.w	sp, sp, r2
240024a6:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
240024a8:	2b00      	cmp	r3, #0
240024aa:	f000 823b 	beq.w	24002924 <audioTickL+0x4e8>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240024ae:	ed9f aab2 	vldr	s20, [pc, #712]	; 24002778 <audioTickL+0x33c>
240024b2:	2300      	movs	r3, #0
240024b4:	eddf 7ab1 	vldr	s15, [pc, #708]	; 2400277c <audioTickL+0x340>
240024b8:	eeb0 ba4a 	vmov.f32	s22, s20
240024bc:	617a      	str	r2, [r7, #20]
240024be:	4ab0      	ldr	r2, [pc, #704]	; (24002780 <audioTickL+0x344>)
	for (int v = 0; v < numStringsThisBoard; v++)
240024c0:	469a      	mov	sl, r3
	float masterSample = 0.0f;
240024c2:	eddf 8ab0 	vldr	s17, [pc, #704]	; 24002784 <audioTickL+0x348>
240024c6:	61ba      	str	r2, [r7, #24]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240024c8:	eea8 ba27 	vfma.f32	s22, s16, s15
240024cc:	4aae      	ldr	r2, [pc, #696]	; (24002788 <audioTickL+0x34c>)
		if (note[v] < 0.0f)
240024ce:	eeb0 9a68 	vmov.f32	s18, s17
240024d2:	f8df b30c 	ldr.w	fp, [pc, #780]	; 240027e0 <audioTickL+0x3a4>
240024d6:	623a      	str	r2, [r7, #32]
240024d8:	4aac      	ldr	r2, [pc, #688]	; (2400278c <audioTickL+0x350>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240024da:	eddf aaad 	vldr	s21, [pc, #692]	; 24002790 <audioTickL+0x354>
240024de:	613a      	str	r2, [r7, #16]
240024e0:	4aac      	ldr	r2, [pc, #688]	; (24002794 <audioTickL+0x358>)
240024e2:	627b      	str	r3, [r7, #36]	; 0x24
240024e4:	61fa      	str	r2, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240024e6:	69bb      	ldr	r3, [r7, #24]
240024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240024ea:	ecb3 8a01 	vldmia	r3!, {s16}
240024ee:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
240024f0:	4ba9      	ldr	r3, [pc, #676]	; (24002798 <audioTickL+0x35c>)
240024f2:	edd3 7a00 	vldr	s15, [r3]
240024f6:	4ba9      	ldr	r3, [pc, #676]	; (2400279c <audioTickL+0x360>)
240024f8:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240024fc:	4ba8      	ldr	r3, [pc, #672]	; (240027a0 <audioTickL+0x364>)
240024fe:	4413      	add	r3, r2
24002500:	edd3 6a00 	vldr	s13, [r3]
24002504:	697b      	ldr	r3, [r7, #20]
24002506:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
2400250a:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
2400250e:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
24002512:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
24002516:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
24002518:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
2400251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
24002520:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
24002524:	d503      	bpl.n	2400252e <audioTickL+0xf2>
			note[v] = 0.0f;
24002526:	eeb0 8a49 	vmov.f32	s16, s18
2400252a:	ed03 9a01 	vstr	s18, [r3, #-4]
	interruptChecker = 0;
2400252e:	2300      	movs	r3, #0
24002530:	4a9c      	ldr	r2, [pc, #624]	; (240027a4 <audioTickL+0x368>)
24002532:	f1ab 0520 	sub.w	r5, fp, #32
24002536:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
24002538:	4b88      	ldr	r3, [pc, #544]	; (2400275c <audioTickL+0x320>)
2400253a:	462e      	mov	r6, r5
2400253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2400253e:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
24002540:	4b99      	ldr	r3, [pc, #612]	; (240027a8 <audioTickL+0x36c>)
24002542:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
24002546:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
24002548:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
2400254a:	f011 f983 	bl	24013854 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
2400254e:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
24002552:	455e      	cmp	r6, fp
24002554:	f108 0808 	add.w	r8, r8, #8
24002558:	d1f5      	bne.n	24002546 <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
2400255a:	4a80      	ldr	r2, [pc, #512]	; (2400275c <audioTickL+0x320>)
2400255c:	4e93      	ldr	r6, [pc, #588]	; (240027ac <audioTickL+0x370>)
2400255e:	6853      	ldr	r3, [r2, #4]
24002560:	1b1c      	subs	r4, r3, r4
24002562:	4b93      	ldr	r3, [pc, #588]	; (240027b0 <audioTickL+0x374>)
24002564:	601c      	str	r4, [r3, #0]
	interruptChecker = 0;
24002566:	2400      	movs	r4, #0
24002568:	4b8e      	ldr	r3, [pc, #568]	; (240027a4 <audioTickL+0x368>)
2400256a:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
2400256c:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
24002570:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
24002574:	4621      	mov	r1, r4
24002576:	4652      	mov	r2, sl
24002578:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
2400257c:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
24002580:	2b00      	cmp	r3, #0
24002582:	f000 8165 	beq.w	24002850 <audioTickL+0x414>
			lfoShapeTick[i](&sample,i, string);
24002586:	4b8b      	ldr	r3, [pc, #556]	; (240027b4 <audioTickL+0x378>)
	for (int i = 0; i < NUM_LFOS; i++)
24002588:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
2400258a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
2400258e:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
24002590:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
24002594:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002596:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
2400259a:	d1e9      	bne.n	24002570 <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
2400259c:	4b6f      	ldr	r3, [pc, #444]	; (2400275c <audioTickL+0x320>)
		oscillator_tick(note[v], v);
2400259e:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
240025a2:	4a85      	ldr	r2, [pc, #532]	; (240027b8 <audioTickL+0x37c>)
		oscillator_tick(note[v], v);
240025a4:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
240025a6:	685b      	ldr	r3, [r3, #4]
240025a8:	eba3 0308 	sub.w	r3, r3, r8
240025ac:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
240025ae:	f033 fce7 	bl	24035f80 <__oscillator_tick_veneer>
		noise_tick(v);
240025b2:	4650      	mov	r0, sl
240025b4:	f033 fcf4 	bl	24035fa0 <__noise_tick_veneer>
		for (int i = 0; i < oscToTick; i++)
240025b8:	4b80      	ldr	r3, [pc, #512]	; (240027bc <audioTickL+0x380>)
240025ba:	781b      	ldrb	r3, [r3, #0]
240025bc:	2b00      	cmp	r3, #0
240025be:	f000 81ac 	beq.w	2400291a <audioTickL+0x4de>
			filterSamps[0] += oscOuts[0][i][v];
240025c2:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
240025c4:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
240025c6:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
240025ca:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
240025ce:	d011      	beq.n	240025f4 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
240025d0:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
240025d4:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
240025d6:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
240025da:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
240025de:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
240025e2:	d007      	beq.n	240025f4 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
240025e4:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
240025e8:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
240025ec:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
240025f0:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
240025f4:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
240025f6:	eeb0 0a48 	vmov.f32	s0, s16
240025fa:	4651      	mov	r1, sl
240025fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
24002600:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
24002604:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
24002608:	ee76 6a86 	vadd.f32	s13, s13, s12
2400260c:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
2400260e:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
24002612:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
24002616:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
2400261a:	f033 fcc9 	bl	24035fb0 <__filter_tick_veneer>
		if (fxPre)
2400261e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
24002622:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
24002626:	eef4 9ae7 	vcmpe.f32	s19, s15
2400262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400262e:	dd04      	ble.n	2400263a <audioTickL+0x1fe>
			sample *= amplitude[v];
24002630:	6a3b      	ldr	r3, [r7, #32]
24002632:	edd3 7a00 	vldr	s15, [r3]
24002636:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
2400263a:	4b61      	ldr	r3, [pc, #388]	; (240027c0 <audioTickL+0x384>)
2400263c:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
2400263e:	4b47      	ldr	r3, [pc, #284]	; (2400275c <audioTickL+0x320>)
24002640:	685b      	ldr	r3, [r3, #4]
24002642:	60fb      	str	r3, [r7, #12]
		if (overSampled)
24002644:	2c00      	cmp	r4, #0
24002646:	f040 810b 	bne.w	24002860 <audioTickL+0x424>
			for (int i = 0; i < numEffectToTick; i++)
2400264a:	4b5e      	ldr	r3, [pc, #376]	; (240027c4 <audioTickL+0x388>)
2400264c:	781b      	ldrb	r3, [r3, #0]
2400264e:	b32b      	cbz	r3, 2400269c <audioTickL+0x260>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002650:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24002654:	f8df 918c 	ldr.w	r9, [pc, #396]	; 240027e4 <audioTickL+0x3a8>
			for (int i = 0; i < numEffectToTick; i++)
24002658:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
2400265c:	4e5a      	ldr	r6, [pc, #360]	; (240027c8 <audioTickL+0x38c>)
2400265e:	4d5b      	ldr	r5, [pc, #364]	; (240027cc <audioTickL+0x390>)
				sample = effectTick[i](sample, i, v); //run the effect
24002660:	eeb0 0a48 	vmov.f32	s0, s16
24002664:	4620      	mov	r0, r4
24002666:	f859 3b04 	ldr.w	r3, [r9], #4
2400266a:	4651      	mov	r1, sl
2400266c:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
2400266e:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
24002672:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002674:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
24002678:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
2400267c:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002680:	ee67 7a00 	vmul.f32	s15, s14, s0
24002684:	ee3b 7ac7 	vsub.f32	s14, s23, s14
24002688:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
2400268c:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
24002690:	4b4c      	ldr	r3, [pc, #304]	; (240027c4 <audioTickL+0x388>)
24002692:	781b      	ldrb	r3, [r3, #0]
24002694:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
24002696:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
2400269a:	dce1      	bgt.n	24002660 <audioTickL+0x224>
		if (!fxPre)
2400269c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
240026a0:	4b2e      	ldr	r3, [pc, #184]	; (2400275c <audioTickL+0x320>)
		oversampleCount = tempCount2-tempCount1;
240026a2:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
240026a4:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
240026a6:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
240026aa:	1a9b      	subs	r3, r3, r2
240026ac:	4a48      	ldr	r2, [pc, #288]	; (240027d0 <audioTickL+0x394>)
		if (!fxPre)
240026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
240026b2:	6013      	str	r3, [r2, #0]
		if (!fxPre)
240026b4:	d804      	bhi.n	240026c0 <audioTickL+0x284>
			sample *= amplitude[v];
240026b6:	6a3b      	ldr	r3, [r7, #32]
240026b8:	edd3 7a00 	vldr	s15, [r3]
240026bc:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
240026c0:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
240026c2:	eeb0 0a48 	vmov.f32	s0, s16
240026c6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
240026c8:	f10a 0a01 	add.w	sl, sl, #1
240026cc:	3304      	adds	r3, #4
240026ce:	f10b 0b04 	add.w	fp, fp, #4
240026d2:	623b      	str	r3, [r7, #32]
240026d4:	69fb      	ldr	r3, [r7, #28]
240026d6:	3304      	adds	r3, #4
240026d8:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
240026da:	4b3e      	ldr	r3, [pc, #248]	; (240027d4 <audioTickL+0x398>)
240026dc:	1918      	adds	r0, r3, r4
240026de:	f011 fb6b 	bl	24013db8 <tSVF_tick>
		masterSample += sample;
240026e2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240026e6:	eeb0 1a6a 	vmov.f32	s2, s21
240026ea:	eef0 0a4b 	vmov.f32	s1, s22
		masterSample += sample;
240026ee:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240026f2:	eeb0 0a4a 	vmov.f32	s0, s20
240026f6:	f033 fc63 	bl	24035fc0 <__LEAF_clip_veneer>
240026fa:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
240026fe:	4936      	ldr	r1, [pc, #216]	; (240027d8 <audioTickL+0x39c>)
		float omAlpha = 1.0f - alpha;
24002700:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
24002704:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
24002708:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
2400270c:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
24002710:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
24002714:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
24002718:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
2400271a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
2400271e:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
24002722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
24002726:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
2400272a:	edd2 6a00 	vldr	s13, [r2]
2400272e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24002732:	edd3 0a00 	vldr	s1, [r3]
		masterSample *= finalMaster[v] ;
24002736:	4b29      	ldr	r3, [pc, #164]	; (240027dc <audioTickL+0x3a0>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
24002738:	ee67 7aa0 	vmul.f32	s15, s15, s1
		masterSample *= finalMaster[v] ;
2400273c:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
2400273e:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
24002742:	edd3 0a00 	vldr	s1, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
24002746:	1d23      	adds	r3, r4, #4
24002748:	ee68 0aa0 	vmul.f32	s1, s17, s1
2400274c:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
2400274e:	ee60 0aa7 	vmul.f32	s1, s1, s15
24002752:	f033 fc35 	bl	24035fc0 <__LEAF_clip_veneer>
24002756:	e047      	b.n	240027e8 <audioTickL+0x3ac>
24002758:	20005154 	.word	0x20005154
2400275c:	e0001000 	.word	0xe0001000
24002760:	2001b7fc 	.word	0x2001b7fc
24002764:	20005184 	.word	0x20005184
24002768:	200051f8 	.word	0x200051f8
2400276c:	20017888 	.word	0x20017888
24002770:	20017a84 	.word	0x20017a84
24002774:	20000052 	.word	0x20000052
24002778:	423c0000 	.word	0x423c0000
2400277c:	42a00000 	.word	0x42a00000
24002780:	200179c8 	.word	0x200179c8
24002784:	00000000 	.word	0x00000000
24002788:	20000af4 	.word	0x20000af4
2400278c:	200054d0 	.word	0x200054d0
24002790:	42fe0000 	.word	0x42fe0000
24002794:	200054fc 	.word	0x200054fc
24002798:	2001a7f0 	.word	0x2001a7f0
2400279c:	2001a7ec 	.word	0x2001a7ec
240027a0:	200179d0 	.word	0x200179d0
240027a4:	20019e36 	.word	0x20019e36
240027a8:	20005058 	.word	0x20005058
240027ac:	2000527c 	.word	0x2000527c
240027b0:	20017a08 	.word	0x20017a08
240027b4:	200052e0 	.word	0x200052e0
240027b8:	20017a14 	.word	0x20017a14
240027bc:	20000068 	.word	0x20000068
240027c0:	20000069 	.word	0x20000069
240027c4:	20000050 	.word	0x20000050
240027c8:	200050d8 	.word	0x200050d8
240027cc:	200050f8 	.word	0x200050f8
240027d0:	2000552c 	.word	0x2000552c
240027d4:	200050a8 	.word	0x200050a8
240027d8:	20000544 	.word	0x20000544
240027dc:	200050b0 	.word	0x200050b0
240027e0:	200178a8 	.word	0x200178a8
240027e4:	20005048 	.word	0x20005048
	for (int v = 0; v < numStringsThisBoard; v++)
240027e8:	4b51      	ldr	r3, [pc, #324]	; (24002930 <audioTickL+0x4f4>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240027ea:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
240027ee:	781b      	ldrb	r3, [r3, #0]
240027f0:	4553      	cmp	r3, sl
240027f2:	f73f ae78 	bgt.w	240024e6 <audioTickL+0xaa>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240027f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240027fa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240027fe:	eef0 0a68 	vmov.f32	s1, s17
24002802:	f033 fbdd 	bl	24035fc0 <__LEAF_clip_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
24002806:	4b4b      	ldr	r3, [pc, #300]	; (24002934 <audioTickL+0x4f8>)
	timeTick = tempCount6-tempCount5;
24002808:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
2400280a:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
2400280e:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
24002810:	4949      	ldr	r1, [pc, #292]	; (24002938 <audioTickL+0x4fc>)
24002812:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
24002814:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
24002816:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
24002818:	d90b      	bls.n	24002832 <audioTickL+0x3f6>
2400281a:	4b48      	ldr	r3, [pc, #288]	; (2400293c <audioTickL+0x500>)
2400281c:	781b      	ldrb	r3, [r3, #0]
2400281e:	b943      	cbnz	r3, 24002832 <audioTickL+0x3f6>
		if (overSampled)
24002820:	4a47      	ldr	r2, [pc, #284]	; (24002940 <audioTickL+0x504>)
24002822:	7811      	ldrb	r1, [r2, #0]
24002824:	b921      	cbnz	r1, 24002830 <audioTickL+0x3f4>
		else if (oscToTick > 1)
24002826:	4a47      	ldr	r2, [pc, #284]	; (24002944 <audioTickL+0x508>)
24002828:	7813      	ldrb	r3, [r2, #0]
2400282a:	2b01      	cmp	r3, #1
2400282c:	d901      	bls.n	24002832 <audioTickL+0x3f6>
			oscToTick--;
2400282e:	3b01      	subs	r3, #1
24002830:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
24002832:	4b45      	ldr	r3, [pc, #276]	; (24002948 <audioTickL+0x50c>)
}
24002834:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
24002836:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2400294c <audioTickL+0x510>
2400283a:	edd3 7a00 	vldr	s15, [r3]
2400283e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
24002842:	ee27 0a80 	vmul.f32	s0, s15, s0
24002846:	46bd      	mov	sp, r7
24002848:	ecbd 8b0a 	vpop	{d8-d12}
2400284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
24002850:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002852:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
24002856:	3508      	adds	r5, #8
24002858:	2c04      	cmp	r4, #4
2400285a:	f47f ae89 	bne.w	24002570 <audioTickL+0x134>
2400285e:	e69d      	b.n	2400259c <audioTickL+0x160>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
24002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24002862:	eeb0 0a48 	vmov.f32	s0, s16
24002866:	4b3a      	ldr	r3, [pc, #232]	; (24002950 <audioTickL+0x514>)
24002868:	493a      	ldr	r1, [pc, #232]	; (24002954 <audioTickL+0x518>)
2400286a:	4413      	add	r3, r2
2400286c:	4618      	mov	r0, r3
2400286e:	ee0c 3a10 	vmov	s24, r3
24002872:	f033 fb81 	bl	24035f78 <__tOversampler_upsample_veneer>
			for (int i = 0; i < numEffectToTick; i++)
24002876:	4b38      	ldr	r3, [pc, #224]	; (24002958 <audioTickL+0x51c>)
24002878:	781b      	ldrb	r3, [r3, #0]
2400287a:	2b00      	cmp	r3, #0
2400287c:	d055      	beq.n	2400292a <audioTickL+0x4ee>
2400287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002880:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24002884:	4e35      	ldr	r6, [pc, #212]	; (2400295c <audioTickL+0x520>)
			for (int i = 0; i < numEffectToTick; i++)
24002886:	f04f 0800 	mov.w	r8, #0
2400288a:	4d35      	ldr	r5, [pc, #212]	; (24002960 <audioTickL+0x524>)
2400288c:	eb06 0903 	add.w	r9, r6, r3
24002890:	4e34      	ldr	r6, [pc, #208]	; (24002964 <audioTickL+0x528>)
24002892:	441d      	add	r5, r3
24002894:	4b2f      	ldr	r3, [pc, #188]	; (24002954 <audioTickL+0x518>)
24002896:	607b      	str	r3, [r7, #4]
24002898:	4c2e      	ldr	r4, [pc, #184]	; (24002954 <audioTickL+0x518>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
2400289a:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
2400289e:	4651      	mov	r1, sl
240028a0:	6833      	ldr	r3, [r6, #0]
240028a2:	4640      	mov	r0, r8
240028a4:	eeb0 0a48 	vmov.f32	s0, s16
240028a8:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
240028aa:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
240028ae:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
240028b2:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
240028b6:	4b2c      	ldr	r3, [pc, #176]	; (24002968 <audioTickL+0x52c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
240028b8:	ee3b 7ac7 	vsub.f32	s14, s23, s14
240028bc:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
240028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
240028c4:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
240028c8:	42a3      	cmp	r3, r4
240028ca:	d1e6      	bne.n	2400289a <audioTickL+0x45e>
			for (int i = 0; i < numEffectToTick; i++)
240028cc:	4b22      	ldr	r3, [pc, #136]	; (24002958 <audioTickL+0x51c>)
240028ce:	f108 0801 	add.w	r8, r8, #1
240028d2:	3604      	adds	r6, #4
240028d4:	f109 0908 	add.w	r9, r9, #8
240028d8:	781b      	ldrb	r3, [r3, #0]
240028da:	3508      	adds	r5, #8
240028dc:	4543      	cmp	r3, r8
240028de:	dcdb      	bgt.n	24002898 <audioTickL+0x45c>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
240028e0:	687c      	ldr	r4, [r7, #4]
240028e2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240028e6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240028ea:	edd4 0a00 	vldr	s1, [r4]
240028ee:	f033 fb67 	bl	24035fc0 <__LEAF_clip_veneer>
240028f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240028f6:	edd4 0a01 	vldr	s1, [r4, #4]
240028fa:	ed84 0a00 	vstr	s0, [r4]
240028fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24002902:	f033 fb5d 	bl	24035fc0 <__LEAF_clip_veneer>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
24002906:	ee1c 0a10 	vmov	r0, s24
2400290a:	4912      	ldr	r1, [pc, #72]	; (24002954 <audioTickL+0x518>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
2400290c:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
24002910:	f033 fb42 	bl	24035f98 <__tOversampler_downsample_veneer>
24002914:	eeb0 8a40 	vmov.f32	s16, s0
24002918:	e6c0      	b.n	2400269c <audioTickL+0x260>
		for (int i = 0; i < oscToTick; i++)
2400291a:	eddf 7a14 	vldr	s15, [pc, #80]	; 2400296c <audioTickL+0x530>
2400291e:	eeb0 6a67 	vmov.f32	s12, s15
24002922:	e667      	b.n	240025f4 <audioTickL+0x1b8>
	float masterSample = 0.0f;
24002924:	eddf 8a11 	vldr	s17, [pc, #68]	; 2400296c <audioTickL+0x530>
24002928:	e765      	b.n	240027f6 <audioTickL+0x3ba>
2400292a:	4b0a      	ldr	r3, [pc, #40]	; (24002954 <audioTickL+0x518>)
2400292c:	607b      	str	r3, [r7, #4]
2400292e:	e7d7      	b.n	240028e0 <audioTickL+0x4a4>
24002930:	20000052 	.word	0x20000052
24002934:	e0001000 	.word	0xe0001000
24002938:	20017a24 	.word	0x20017a24
2400293c:	20005154 	.word	0x20005154
24002940:	20000069 	.word	0x20000069
24002944:	20000068 	.word	0x20000068
24002948:	20000744 	.word	0x20000744
2400294c:	3f7ae148 	.word	0x3f7ae148
24002950:	200054f4 	.word	0x200054f4
24002954:	20005530 	.word	0x20005530
24002958:	20000050 	.word	0x20000050
2400295c:	200050d8 	.word	0x200050d8
24002960:	200050f8 	.word	0x200050f8
24002964:	20005048 	.word	0x20005048
24002968:	20005538 	.word	0x20005538
2400296c:	00000000 	.word	0x00000000

24002970 <audioFrame>:
{
24002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24002974:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
24002976:	2201      	movs	r2, #1
24002978:	2108      	movs	r1, #8
2400297a:	48b6      	ldr	r0, [pc, #728]	; (24002c54 <audioFrame+0x2e4>)
	if (newBar)
2400297c:	4db6      	ldr	r5, [pc, #728]	; (24002c58 <audioFrame+0x2e8>)
{
2400297e:	ed2d 8b10 	vpush	{d8-d15}
24002982:	b08d      	sub	sp, #52	; 0x34
24002984:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
24002986:	f005 fc17 	bl	240081b8 <HAL_GPIO_WritePin>
	uint32_t tempCountFrame = DWT->CYCCNT;
2400298a:	4bb4      	ldr	r3, [pc, #720]	; (24002c5c <audioFrame+0x2ec>)
2400298c:	685b      	ldr	r3, [r3, #4]
2400298e:	9304      	str	r3, [sp, #16]
	if (newBar)
24002990:	682b      	ldr	r3, [r5, #0]
24002992:	2b00      	cmp	r3, #0
24002994:	f040 80b9 	bne.w	24002b0a <audioFrame+0x19a>
	if (newPluck)
24002998:	4bb1      	ldr	r3, [pc, #708]	; (24002c60 <audioFrame+0x2f0>)
2400299a:	681b      	ldr	r3, [r3, #0]
2400299c:	2b00      	cmp	r3, #0
2400299e:	d048      	beq.n	24002a32 <audioFrame+0xc2>
		for (int i = 0; i < numStringsThisBoard; i++)
240029a0:	4bb0      	ldr	r3, [pc, #704]	; (24002c64 <audioFrame+0x2f4>)
240029a2:	7818      	ldrb	r0, [r3, #0]
240029a4:	9306      	str	r3, [sp, #24]
240029a6:	2800      	cmp	r0, #0
240029a8:	d040      	beq.n	24002a2c <audioFrame+0xbc>
240029aa:	4baf      	ldr	r3, [pc, #700]	; (24002c68 <audioFrame+0x2f8>)
240029ac:	f04f 0b00 	mov.w	fp, #0
240029b0:	4aae      	ldr	r2, [pc, #696]	; (24002c6c <audioFrame+0x2fc>)
240029b2:	9302      	str	r3, [sp, #8]
240029b4:	4bae      	ldr	r3, [pc, #696]	; (24002c70 <audioFrame+0x300>)
					tLivingString2_setDecay(&strings[i], 0.2f);
240029b6:	ed9f baaf 	vldr	s22, [pc, #700]	; 24002c74 <audioFrame+0x304>
240029ba:	9301      	str	r3, [sp, #4]
240029bc:	4bae      	ldr	r3, [pc, #696]	; (24002c78 <audioFrame+0x308>)
				float amplitz = stringInputs[i] * 0.000025f;
240029be:	ed9f caaf 	vldr	s24, [pc, #700]	; 24002c7c <audioFrame+0x30c>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
240029c2:	eddf aaaf 	vldr	s21, [pc, #700]	; 24002c80 <audioFrame+0x310>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
240029c6:	4698      	mov	r8, r3
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240029c8:	eddf baae 	vldr	s23, [pc, #696]	; 24002c84 <audioFrame+0x314>
240029cc:	f8df a304 	ldr.w	sl, [pc, #772]	; 24002cd4 <audioFrame+0x364>
240029d0:	4fad      	ldr	r7, [pc, #692]	; (24002c88 <audioFrame+0x318>)
240029d2:	f8df 9304 	ldr.w	r9, [pc, #772]	; 24002cd8 <audioFrame+0x368>
240029d6:	4cad      	ldr	r4, [pc, #692]	; (24002c8c <audioFrame+0x31c>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
240029d8:	eddf 9aad 	vldr	s19, [pc, #692]	; 24002c90 <audioFrame+0x320>
240029dc:	9203      	str	r2, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
240029de:	f854 202b 	ldr.w	r2, [r4, fp, lsl #2]
240029e2:	2a00      	cmp	r2, #0
240029e4:	d168      	bne.n	24002ab8 <audioFrame+0x148>
240029e6:	f8da 3000 	ldr.w	r3, [sl]
240029ea:	2b00      	cmp	r3, #0
240029ec:	f040 8302 	bne.w	24002ff4 <audioFrame+0x684>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
240029f0:	f854 202b 	ldr.w	r2, [r4, fp, lsl #2]
240029f4:	2a00      	cmp	r2, #0
240029f6:	dc67      	bgt.n	24002ac8 <audioFrame+0x158>
			previousStringInputs[i] = stringInputs[i];
240029f8:	f844 302b 	str.w	r3, [r4, fp, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
240029fc:	f10b 0b01 	add.w	fp, fp, #1
24002a00:	9b02      	ldr	r3, [sp, #8]
24002a02:	f10a 0a04 	add.w	sl, sl, #4
24002a06:	4558      	cmp	r0, fp
24002a08:	f107 0704 	add.w	r7, r7, #4
24002a0c:	f103 0301 	add.w	r3, r3, #1
24002a10:	f108 0804 	add.w	r8, r8, #4
24002a14:	f109 0904 	add.w	r9, r9, #4
24002a18:	9302      	str	r3, [sp, #8]
24002a1a:	9b01      	ldr	r3, [sp, #4]
24002a1c:	f103 0304 	add.w	r3, r3, #4
24002a20:	9301      	str	r3, [sp, #4]
24002a22:	9b03      	ldr	r3, [sp, #12]
24002a24:	f103 0348 	add.w	r3, r3, #72	; 0x48
24002a28:	9303      	str	r3, [sp, #12]
24002a2a:	dcd8      	bgt.n	240029de <audioFrame+0x6e>
		newPluck = 0;
24002a2c:	2300      	movs	r3, #0
24002a2e:	4a8c      	ldr	r2, [pc, #560]	; (24002c60 <audioFrame+0x2f0>)
24002a30:	6013      	str	r3, [r2, #0]
	if (presetReady)
24002a32:	4b98      	ldr	r3, [pc, #608]	; (24002c94 <audioFrame+0x324>)
24002a34:	681b      	ldr	r3, [r3, #0]
24002a36:	b31b      	cbz	r3, 24002a80 <audioFrame+0x110>
		if (currentActivePreset == 63)
24002a38:	4b97      	ldr	r3, [pc, #604]	; (24002c98 <audioFrame+0x328>)
24002a3a:	781a      	ldrb	r2, [r3, #0]
24002a3c:	2a3f      	cmp	r2, #63	; 0x3f
24002a3e:	f000 817b 	beq.w	24002d38 <audioFrame+0x3c8>
		else if (currentActivePreset == 62)
24002a42:	781a      	ldrb	r2, [r3, #0]
24002a44:	2a3e      	cmp	r2, #62	; 0x3e
24002a46:	f000 82a9 	beq.w	24002f9c <audioFrame+0x62c>
		else if (currentActivePreset == 61)
24002a4a:	781b      	ldrb	r3, [r3, #0]
24002a4c:	2b3d      	cmp	r3, #61	; 0x3d
24002a4e:	f000 81e1 	beq.w	24002e14 <audioFrame+0x4a4>
24002a52:	4c92      	ldr	r4, [pc, #584]	; (24002c9c <audioFrame+0x32c>)
24002a54:	9b05      	ldr	r3, [sp, #20]
24002a56:	f504 7580 	add.w	r5, r4, #256	; 0x100
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002a5a:	ed9f 8a91 	vldr	s16, [pc, #580]	; 24002ca0 <audioFrame+0x330>
24002a5e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24002a62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
24002a66:	f7ff fce9 	bl	2400243c <audioTickL>
24002a6a:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002a6e:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002a70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002a74:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002a76:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002a7a:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002a7e:	d1f2      	bne.n	24002a66 <audioFrame+0xf6>
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002a80:	4b76      	ldr	r3, [pc, #472]	; (24002c5c <audioFrame+0x2ec>)
24002a82:	9904      	ldr	r1, [sp, #16]
24002a84:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002a86:	4a87      	ldr	r2, [pc, #540]	; (24002ca4 <audioFrame+0x334>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002a88:	1a5b      	subs	r3, r3, r1
24002a8a:	4887      	ldr	r0, [pc, #540]	; (24002ca8 <audioFrame+0x338>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002a8c:	ed92 7a00 	vldr	s14, [r2]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
24002a90:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002a92:	ee07 3a90 	vmov	s15, r3
24002a96:	4c85      	ldr	r4, [pc, #532]	; (24002cac <audioFrame+0x33c>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002a98:	6003      	str	r3, [r0, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
24002a9a:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
24002aa0:	486c      	ldr	r0, [pc, #432]	; (24002c54 <audioFrame+0x2e4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
24002aa6:	edc4 7a00 	vstr	s15, [r4]
}
24002aaa:	b00d      	add	sp, #52	; 0x34
24002aac:	ecbd 8b10 	vpop	{d8-d15}
24002ab0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
24002ab4:	f005 bb80 	b.w	240081b8 <HAL_GPIO_WritePin>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
24002ab8:	f854 302b 	ldr.w	r3, [r4, fp, lsl #2]
24002abc:	2b00      	cmp	r3, #0
24002abe:	f8da 3000 	ldr.w	r3, [sl]
24002ac2:	dd99      	ble.n	240029f8 <audioFrame+0x88>
24002ac4:	2b00      	cmp	r3, #0
24002ac6:	d197      	bne.n	240029f8 <audioFrame+0x88>
					tADSRT_off(&envs[v][i]);
24002ac8:	4648      	mov	r0, r9
24002aca:	f010 fd65 	bl	24013598 <tADSRT_off>
24002ace:	f109 0008 	add.w	r0, r9, #8
24002ad2:	f010 fd61 	bl	24013598 <tADSRT_off>
24002ad6:	f109 0010 	add.w	r0, r9, #16
24002ada:	f010 fd5d 	bl	24013598 <tADSRT_off>
24002ade:	f109 0018 	add.w	r0, r9, #24
24002ae2:	f010 fd59 	bl	24013598 <tADSRT_off>
				if (currentActivePreset == 63)
24002ae6:	4b6c      	ldr	r3, [pc, #432]	; (24002c98 <audioFrame+0x328>)
24002ae8:	781a      	ldrb	r2, [r3, #0]
24002aea:	2a3f      	cmp	r2, #63	; 0x3f
24002aec:	f000 84f6 	beq.w	240034dc <audioFrame+0xb6c>
				else if (currentActivePreset == 62)
24002af0:	781a      	ldrb	r2, [r3, #0]
24002af2:	2a3e      	cmp	r2, #62	; 0x3e
24002af4:	f000 854b 	beq.w	2400358e <audioFrame+0xc1e>
				else if (currentActivePreset == 61)
24002af8:	781b      	ldrb	r3, [r3, #0]
24002afa:	2b3d      	cmp	r3, #61	; 0x3d
24002afc:	f000 856f 	beq.w	240035de <audioFrame+0xc6e>
		for (int i = 0; i < numStringsThisBoard; i++)
24002b00:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
24002b02:	f8da 3000 	ldr.w	r3, [sl]
		for (int i = 0; i < numStringsThisBoard; i++)
24002b06:	7810      	ldrb	r0, [r2, #0]
24002b08:	e776      	b.n	240029f8 <audioFrame+0x88>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
24002b0a:	2201      	movs	r2, #1
24002b0c:	2102      	movs	r1, #2
24002b0e:	4868      	ldr	r0, [pc, #416]	; (24002cb0 <audioFrame+0x340>)
24002b10:	f005 fb52 	bl	240081b8 <HAL_GPIO_WritePin>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24002b14:	4a67      	ldr	r2, [pc, #412]	; (24002cb4 <audioFrame+0x344>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002b16:	4b68      	ldr	r3, [pc, #416]	; (24002cb8 <audioFrame+0x348>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24002b18:	edd2 7a03 	vldr	s15, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002b1c:	edd2 6a02 	vldr	s13, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002b20:	ed92 7a01 	vldr	s14, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002b24:	ed92 6a04 	vldr	s12, [r2, #16]
24002b28:	ee77 2ae6 	vsub.f32	s5, s15, s13
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002b2c:	edd2 5a00 	vldr	s11, [r2]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
24002b34:	6819      	ldr	r1, [r3, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002b36:	ee36 5a67 	vsub.f32	s10, s12, s15
24002b3a:	ee76 3ac7 	vsub.f32	s7, s13, s14
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002b3e:	4291      	cmp	r1, r2
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002b40:	ee37 4a65 	vsub.f32	s8, s14, s11
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002b44:	d00c      	beq.n	24002b60 <audioFrame+0x1f0>
24002b46:	ed93 6a00 	vldr	s12, [r3]
24002b4a:	4a5c      	ldr	r2, [pc, #368]	; (24002cbc <audioFrame+0x34c>)
24002b4c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002b50:	edd2 4a00 	vldr	s9, [r2]
24002b54:	eef4 4ac6 	vcmpe.f32	s9, s12
24002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002b5c:	f140 8132 	bpl.w	24002dc4 <audioFrame+0x454>
				stringMappedPositions[j] = 1.0f;
24002b60:	4e57      	ldr	r6, [pc, #348]	; (24002cc0 <audioFrame+0x350>)
24002b62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
24002b66:	6032      	str	r2, [r6, #0]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002b68:	6859      	ldr	r1, [r3, #4]
24002b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
24002b6e:	4291      	cmp	r1, r2
24002b70:	d00c      	beq.n	24002b8c <audioFrame+0x21c>
24002b72:	ed93 6a01 	vldr	s12, [r3, #4]
24002b76:	4a51      	ldr	r2, [pc, #324]	; (24002cbc <audioFrame+0x34c>)
24002b78:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002b7c:	edd2 4a01 	vldr	s9, [r2, #4]
24002b80:	eeb4 6ae4 	vcmpe.f32	s12, s9
24002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002b88:	f340 80f9 	ble.w	24002d7e <audioFrame+0x40e>
				stringMappedPositions[j] = 1.0f;
24002b8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24002b90:	6073      	str	r3, [r6, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
24002b92:	4b34      	ldr	r3, [pc, #208]	; (24002c64 <audioFrame+0x2f4>)
24002b94:	f893 c000 	ldrb.w	ip, [r3]
24002b98:	9306      	str	r3, [sp, #24]
24002b9a:	f1bc 0f00 	cmp.w	ip, #0
24002b9e:	f000 80c4 	beq.w	24002d2a <audioFrame+0x3ba>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
24002ba2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
24002ba6:	eddf 8a47 	vldr	s17, [pc, #284]	; 24002cc4 <audioFrame+0x354>
		for (int i = 0; i < numStringsThisBoard; i++)
24002baa:	2400      	movs	r4, #0
24002bac:	4846      	ldr	r0, [pc, #280]	; (24002cc8 <audioFrame+0x358>)
24002bae:	f8df 912c 	ldr.w	r9, [pc, #300]	; 24002cdc <audioFrame+0x36c>
24002bb2:	4637      	mov	r7, r6
24002bb4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 24002cd0 <audioFrame+0x360>
24002bb8:	f8df a124 	ldr.w	sl, [pc, #292]	; 24002ce0 <audioFrame+0x370>
24002bbc:	f8df b124 	ldr.w	fp, [pc, #292]	; 24002ce4 <audioFrame+0x374>
			if (dualSlider)
24002bc0:	6806      	ldr	r6, [r0, #0]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
24002bc2:	ed97 0a00 	vldr	s0, [r7]
			if (dualSlider)
24002bc6:	b326      	cbz	r6, 24002c12 <audioFrame+0x2a2>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
24002bc8:	eeb4 0a48 	vcmp.f32	s0, s16
24002bcc:	edd7 0a01 	vldr	s1, [r7, #4]
24002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002bd4:	f000 80c8 	beq.w	24002d68 <audioFrame+0x3f8>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
24002bd8:	eef4 0a48 	vcmp.f32	s1, s16
24002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002be0:	d108      	bne.n	24002bf4 <audioFrame+0x284>
24002be2:	eeb4 0a48 	vcmp.f32	s0, s16
24002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002bea:	d503      	bpl.n	24002bf4 <audioFrame+0x284>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
24002bec:	eef0 0a40 	vmov.f32	s1, s0
					stringMappedPositions[1] = stringMappedPositions[0];
24002bf0:	ed87 0a01 	vstr	s0, [r7, #4]
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
24002bf4:	4b35      	ldr	r3, [pc, #212]	; (24002ccc <audioFrame+0x35c>)
24002bf6:	681b      	ldr	r3, [r3, #0]
24002bf8:	4423      	add	r3, r4
24002bfa:	ee07 3a90 	vmov	s15, r3
24002bfe:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
24002c02:	ee21 1a28 	vmul.f32	s2, s2, s17
24002c06:	f012 fe0f 	bl	24015828 <LEAF_interpolation_linear>
		for (int i = 0; i < numStringsThisBoard; i++)
24002c0a:	9b06      	ldr	r3, [sp, #24]
24002c0c:	482e      	ldr	r0, [pc, #184]	; (24002cc8 <audioFrame+0x358>)
24002c0e:	f893 c000 	ldrb.w	ip, [r3]
			invMapping[i] = (1.0f / myMappedPos);
24002c12:	eec8 7a00 	vdiv.f32	s15, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
24002c16:	edd9 6a00 	vldr	s13, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
24002c1a:	1c62      	adds	r2, r4, #1
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002c1c:	eb0a 0e84 	add.w	lr, sl, r4, lsl #2
		for (int i = 0; i < numStringsThisBoard; i++)
24002c20:	4594      	cmp	ip, r2
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
24002c22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24002c26:	ee37 6ac8 	vsub.f32	s12, s15, s16
			invMapping[i] = (1.0f / myMappedPos);
24002c2a:	ece8 7a01 	vstmia	r8!, {s15}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
24002c2e:	eef0 7a47 	vmov.f32	s15, s14
24002c32:	eee6 7a26 	vfma.f32	s15, s12, s13
24002c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24002c3a:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002c3e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
24002c42:	681b      	ldr	r3, [r3, #0]
24002c44:	f8ce 3000 	str.w	r3, [lr]
		for (int i = 0; i < numStringsThisBoard; i++)
24002c48:	dd6f      	ble.n	24002d2a <audioFrame+0x3ba>
24002c4a:	2e00      	cmp	r6, #0
24002c4c:	d04c      	beq.n	24002ce8 <audioFrame+0x378>
24002c4e:	4614      	mov	r4, r2
24002c50:	e7b6      	b.n	24002bc0 <audioFrame+0x250>
24002c52:	bf00      	nop
24002c54:	58020000 	.word	0x58020000
24002c58:	200054b8 	.word	0x200054b8
24002c5c:	e0001000 	.word	0xe0001000
24002c60:	200054bc 	.word	0x200054bc
24002c64:	20000052 	.word	0x20000052
24002c68:	20005368 	.word	0x20005368
24002c6c:	20000a64 	.word	0x20000a64
24002c70:	20017918 	.word	0x20017918
24002c74:	3e4ccccd 	.word	0x3e4ccccd
24002c78:	2001b6ac 	.word	0x2001b6ac
24002c7c:	37d1b717 	.word	0x37d1b717
24002c80:	3ffeb852 	.word	0x3ffeb852
24002c84:	44fa0000 	.word	0x44fa0000
24002c88:	200179f8 	.word	0x200179f8
24002c8c:	20005628 	.word	0x20005628
24002c90:	00000000 	.word	0x00000000
24002c94:	20005618 	.word	0x20005618
24002c98:	20017c7d 	.word	0x20017c7d
24002c9c:	30000000 	.word	0x30000000
24002ca0:	4b000000 	.word	0x4b000000
24002ca4:	20000008 	.word	0x20000008
24002ca8:	20017a10 	.word	0x20017a10
24002cac:	200050bc 	.word	0x200050bc
24002cb0:	58020400 	.word	0x58020400
24002cb4:	20000034 	.word	0x20000034
24002cb8:	200179d8 	.word	0x200179d8
24002cbc:	2000000c 	.word	0x2000000c
24002cc0:	20000364 	.word	0x20000364
24002cc4:	3dcccccd 	.word	0x3dcccccd
24002cc8:	20005040 	.word	0x20005040
24002ccc:	200050b8 	.word	0x200050b8
24002cd0:	20005178 	.word	0x20005178
24002cd4:	20017998 	.word	0x20017998
24002cd8:	20005058 	.word	0x20005058
24002cdc:	2000004c 	.word	0x2000004c
24002ce0:	20000b0c 	.word	0x20000b0c
24002ce4:	30012000 	.word	0x30012000
			invMapping[i] = (1.0f / myMappedPos);
24002ce8:	ed97 6a00 	vldr	s12, [r7]
		for (int i = 0; i < numStringsThisBoard; i++)
24002cec:	3402      	adds	r4, #2
			invMapping[i] = (1.0f / myMappedPos);
24002cee:	48b7      	ldr	r0, [pc, #732]	; (24002fcc <audioFrame+0x65c>)
24002cf0:	eec8 7a06 	vdiv.f32	s15, s16, s12
		for (int i = 0; i < numStringsThisBoard; i++)
24002cf4:	45a4      	cmp	ip, r4
			invMapping[i] = (1.0f / myMappedPos);
24002cf6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002cfa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
24002cfe:	ee37 8ac8 	vsub.f32	s16, s15, s16
			invMapping[i] = (1.0f / myMappedPos);
24002d02:	edc3 7a00 	vstr	s15, [r3]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
24002d06:	eea6 7a88 	vfma.f32	s14, s13, s16
24002d0a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002d0e:	ee17 3a10 	vmov	r3, s14
24002d12:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
24002d16:	6819      	ldr	r1, [r3, #0]
24002d18:	6011      	str	r1, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
24002d1a:	dd06      	ble.n	24002d2a <audioFrame+0x3ba>
			invMapping[i] = (1.0f / myMappedPos);
24002d1c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002d20:	eb0a 0284 	add.w	r2, sl, r4, lsl #2
			invMapping[i] = (1.0f / myMappedPos);
24002d24:	edc3 7a00 	vstr	s15, [r3]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002d28:	6011      	str	r1, [r2, #0]
		newBar = 0;
24002d2a:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
24002d2c:	2102      	movs	r1, #2
24002d2e:	48a8      	ldr	r0, [pc, #672]	; (24002fd0 <audioFrame+0x660>)
		newBar = 0;
24002d30:	602a      	str	r2, [r5, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
24002d32:	f005 fa41 	bl	240081b8 <HAL_GPIO_WritePin>
24002d36:	e62f      	b.n	24002998 <audioFrame+0x28>
24002d38:	4ca6      	ldr	r4, [pc, #664]	; (24002fd4 <audioFrame+0x664>)
24002d3a:	9b05      	ldr	r3, [sp, #20]
24002d3c:	f504 7580 	add.w	r5, r4, #256	; 0x100
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002d40:	ed9f 8aa5 	vldr	s16, [pc, #660]	; 24002fd8 <audioFrame+0x668>
24002d44:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24002d48:	eb05 0583 	add.w	r5, r5, r3, lsl #2
24002d4c:	f7fe fdc8 	bl	240018e0 <audioTickString>
24002d50:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002d54:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002d56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002d5a:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002d5c:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002d60:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002d64:	d1f2      	bne.n	24002d4c <audioFrame+0x3dc>
24002d66:	e68b      	b.n	24002a80 <audioFrame+0x110>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
24002d68:	eef4 0ac8 	vcmpe.f32	s1, s16
24002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002d70:	f57f af40 	bpl.w	24002bf4 <audioFrame+0x284>
24002d74:	eeb0 0a60 	vmov.f32	s0, s1
					stringMappedPositions[0] = stringMappedPositions[1];
24002d78:	edc7 0a00 	vstr	s1, [r7]
24002d7c:	e73a      	b.n	24002bf4 <audioFrame+0x284>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
24002d7e:	ed93 6a01 	vldr	s12, [r3, #4]
24002d82:	ed92 3a03 	vldr	s6, [r2, #12]
24002d86:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002d8a:	eeb4 6ac3 	vcmpe.f32	s12, s6
24002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002d92:	db6c      	blt.n	24002e6e <audioFrame+0x4fe>
24002d94:	ed93 6a01 	vldr	s12, [r3, #4]
24002d98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002d9c:	eef4 4ac6 	vcmpe.f32	s9, s12
24002da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002da4:	db63      	blt.n	24002e6e <audioFrame+0x4fe>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002da6:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002daa:	ee33 3a64 	vsub.f32	s6, s6, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002db2:	ee77 4ae4 	vsub.f32	s9, s15, s9
24002db6:	eec4 7a83 	vdiv.f32	s15, s9, s6
24002dba:	eee4 5a27 	vfma.f32	s11, s8, s15
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002dbe:	edc6 5a01 	vstr	s11, [r6, #4]
24002dc2:	e6e6      	b.n	24002b92 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
24002dc4:	ed93 6a00 	vldr	s12, [r3]
24002dc8:	ed92 3a02 	vldr	s6, [r2, #8]
24002dcc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002dd0:	eeb4 3ac6 	vcmpe.f32	s6, s12
24002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002dd8:	f200 8091 	bhi.w	24002efe <audioFrame+0x58e>
24002ddc:	ed93 6a00 	vldr	s12, [r3]
24002de0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002de4:	eeb4 6ae4 	vcmpe.f32	s12, s9
24002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002dec:	f200 8087 	bhi.w	24002efe <audioFrame+0x58e>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002df0:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002df4:	ee33 3a64 	vsub.f32	s6, s6, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002df8:	4e78      	ldr	r6, [pc, #480]	; (24002fdc <audioFrame+0x66c>)
24002dfa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002dfe:	ee76 4a64 	vsub.f32	s9, s12, s9
24002e02:	eeb0 6a65 	vmov.f32	s12, s11
24002e06:	ee84 2a83 	vdiv.f32	s4, s9, s6
24002e0a:	eea4 6a02 	vfma.f32	s12, s8, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002e0e:	ed86 6a00 	vstr	s12, [r6]
24002e12:	e6a9      	b.n	24002b68 <audioFrame+0x1f8>
24002e14:	4e72      	ldr	r6, [pc, #456]	; (24002fe0 <audioFrame+0x670>)
24002e16:	4d73      	ldr	r5, [pc, #460]	; (24002fe4 <audioFrame+0x674>)
						tCycle_setFreq(&additive[i][j], tempFreq);
24002e18:	ed9f 8a73 	vldr	s16, [pc, #460]	; 24002fe8 <audioFrame+0x678>
		else if (currentActivePreset == 61)
24002e1c:	f1a6 042c 	sub.w	r4, r6, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002e20:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
24002e22:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002e24:	f010 fd16 	bl	24013854 <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
24002e28:	4628      	mov	r0, r5
24002e2a:	eeb0 0a48 	vmov.f32	s0, s16
24002e2e:	f012 ff63 	bl	24015cf8 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
24002e32:	4628      	mov	r0, r5
24002e34:	f012 ff3a 	bl	24015cac <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
24002e38:	42a6      	cmp	r6, r4
24002e3a:	f105 0504 	add.w	r5, r5, #4
24002e3e:	d1ef      	bne.n	24002e20 <audioFrame+0x4b0>
24002e40:	4c6a      	ldr	r4, [pc, #424]	; (24002fec <audioFrame+0x67c>)
24002e42:	4d6b      	ldr	r5, [pc, #428]	; (24002ff0 <audioFrame+0x680>)
						tCycle_setFreq(&additive[i][j], tempFreq);
24002e44:	ed9f 8a68 	vldr	s16, [pc, #416]	; 24002fe8 <audioFrame+0x678>
24002e48:	f104 062c 	add.w	r6, r4, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002e4c:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
24002e4e:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002e50:	f010 fd00 	bl	24013854 <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
24002e54:	4628      	mov	r0, r5
24002e56:	eeb0 0a48 	vmov.f32	s0, s16
24002e5a:	f012 ff4d 	bl	24015cf8 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
24002e5e:	4628      	mov	r0, r5
24002e60:	f012 ff24 	bl	24015cac <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
24002e64:	42a6      	cmp	r6, r4
24002e66:	f105 0504 	add.w	r5, r5, #4
24002e6a:	d1ef      	bne.n	24002e4c <audioFrame+0x4dc>
24002e6c:	e608      	b.n	24002a80 <audioFrame+0x110>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
24002e6e:	ed93 6a01 	vldr	s12, [r3, #4]
24002e72:	edd2 5a05 	vldr	s11, [r2, #20]
24002e76:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002e7a:	eeb4 6ae5 	vcmpe.f32	s12, s11
24002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002e82:	db17      	blt.n	24002eb4 <audioFrame+0x544>
24002e84:	ed93 6a01 	vldr	s12, [r3, #4]
24002e88:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002e8c:	eeb4 3ac6 	vcmpe.f32	s6, s12
24002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002e94:	dd0e      	ble.n	24002eb4 <audioFrame+0x544>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002e96:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002e9a:	ee75 5ac3 	vsub.f32	s11, s11, s6
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002ea2:	ee37 3ac3 	vsub.f32	s6, s15, s6
24002ea6:	eec3 7a25 	vdiv.f32	s15, s6, s11
24002eaa:	eea3 7aa7 	vfma.f32	s14, s7, s15
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002eae:	ed86 7a01 	vstr	s14, [r6, #4]
24002eb2:	e66e      	b.n	24002b92 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
24002eb4:	ed93 7a01 	vldr	s14, [r3, #4]
24002eb8:	ed92 6a07 	vldr	s12, [r2, #28]
24002ebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24002ec0:	eeb4 7ac6 	vcmpe.f32	s14, s12
24002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002ec8:	f2c0 82e1 	blt.w	2400348e <audioFrame+0xb1e>
24002ecc:	ed93 7a01 	vldr	s14, [r3, #4]
24002ed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24002ed4:	eef4 5ac7 	vcmpe.f32	s11, s14
24002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002edc:	f2c0 82d7 	blt.w	2400348e <audioFrame+0xb1e>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002ee0:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002ee4:	ee36 7a65 	vsub.f32	s14, s12, s11
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002eec:	ee77 5ae5 	vsub.f32	s11, s15, s11
24002ef0:	eec5 7a87 	vdiv.f32	s15, s11, s14
24002ef4:	eee2 6aa7 	vfma.f32	s13, s5, s15
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002ef8:	edc6 6a01 	vstr	s13, [r6, #4]
24002efc:	e649      	b.n	24002b92 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
24002efe:	ed93 6a00 	vldr	s12, [r3]
24002f02:	edd2 4a04 	vldr	s9, [r2, #16]
24002f06:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002f0a:	eef4 4ac6 	vcmpe.f32	s9, s12
24002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002f12:	d81a      	bhi.n	24002f4a <audioFrame+0x5da>
24002f14:	ed93 6a00 	vldr	s12, [r3]
24002f18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002f1c:	eeb4 6ac3 	vcmpe.f32	s12, s6
24002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002f24:	d511      	bpl.n	24002f4a <audioFrame+0x5da>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002f26:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f2a:	ee74 4ac3 	vsub.f32	s9, s9, s6
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002f2e:	4e2b      	ldr	r6, [pc, #172]	; (24002fdc <audioFrame+0x66c>)
24002f30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f34:	ee36 3a43 	vsub.f32	s6, s12, s6
24002f38:	eeb0 6a47 	vmov.f32	s12, s14
24002f3c:	ee83 2a24 	vdiv.f32	s4, s6, s9
24002f40:	eea3 6a82 	vfma.f32	s12, s7, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002f44:	ed86 6a00 	vstr	s12, [r6]
24002f48:	e60e      	b.n	24002b68 <audioFrame+0x1f8>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
24002f4a:	ed93 6a00 	vldr	s12, [r3]
24002f4e:	ed92 3a06 	vldr	s6, [r2, #24]
24002f52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002f56:	eeb4 3ac6 	vcmpe.f32	s6, s12
24002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002f5e:	f200 82a8 	bhi.w	240034b2 <audioFrame+0xb42>
24002f62:	ed93 6a00 	vldr	s12, [r3]
24002f66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24002f6a:	eeb4 6ae4 	vcmpe.f32	s12, s9
24002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002f72:	f200 829e 	bhi.w	240034b2 <audioFrame+0xb42>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002f76:	681a      	ldr	r2, [r3, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f78:	ee33 6a64 	vsub.f32	s12, s6, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002f7c:	4e17      	ldr	r6, [pc, #92]	; (24002fdc <audioFrame+0x66c>)
24002f7e:	ee03 2a10 	vmov	s6, r2
24002f82:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f86:	ee73 4a64 	vsub.f32	s9, s6, s9
24002f8a:	ee84 3a86 	vdiv.f32	s6, s9, s12
24002f8e:	eeb0 6a66 	vmov.f32	s12, s13
24002f92:	eea2 6a83 	vfma.f32	s12, s5, s6
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
24002f96:	ed86 6a00 	vstr	s12, [r6]
24002f9a:	e5e5      	b.n	24002b68 <audioFrame+0x1f8>
24002f9c:	4c0d      	ldr	r4, [pc, #52]	; (24002fd4 <audioFrame+0x664>)
24002f9e:	9b05      	ldr	r3, [sp, #20]
24002fa0:	f504 7580 	add.w	r5, r4, #256	; 0x100
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002fa4:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 24002fd8 <audioFrame+0x668>
24002fa8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24002fac:	eb05 0583 	add.w	r5, r5, r3, lsl #2
24002fb0:	f7fe fdaa 	bl	24001b08 <audioTickString2>
24002fb4:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002fb8:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002fba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002fbe:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002fc0:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002fc4:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
24002fc8:	d1f2      	bne.n	24002fb0 <audioFrame+0x640>
24002fca:	e559      	b.n	24002a80 <audioFrame+0x110>
24002fcc:	20005178 	.word	0x20005178
24002fd0:	58020400 	.word	0x58020400
24002fd4:	30000000 	.word	0x30000000
24002fd8:	4b000000 	.word	0x4b000000
24002fdc:	20000364 	.word	0x20000364
24002fe0:	20000a90 	.word	0x20000a90
24002fe4:	200009d4 	.word	0x200009d4
24002fe8:	00000000 	.word	0x00000000
24002fec:	20000aac 	.word	0x20000aac
24002ff0:	20000a1c 	.word	0x20000a1c
				float amplitz = stringInputs[i] * 0.000025f;
24002ff4:	ee07 3a90 	vmov	s15, r3
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24002ff8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24002ffc:	eeb0 0a69 	vmov.f32	s0, s19
24003000:	9208      	str	r2, [sp, #32]
				float amplitz = stringInputs[i] * 0.000025f;
24003002:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24003006:	f5a8 7613 	sub.w	r6, r8, #588	; 0x24c
				stringOctave[i] = octave;
2400300a:	464d      	mov	r5, r9
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
2400300c:	ee60 0a8c 	vmul.f32	s1, s1, s24
24003010:	f032 ffd6 	bl	24035fc0 <__LEAF_clip_veneer>
				stringOctave[i] = octave;
24003014:	4b41      	ldr	r3, [pc, #260]	; (2400311c <audioFrame+0x7ac>)
24003016:	4942      	ldr	r1, [pc, #264]	; (24003120 <audioFrame+0x7b0>)
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24003018:	eeb0 aa40 	vmov.f32	s20, s0
				stringOctave[i] = octave;
2400301c:	eb03 038b 	add.w	r3, r3, fp, lsl #2
24003020:	6809      	ldr	r1, [r1, #0]
24003022:	6019      	str	r1, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
24003024:	ea4f 038b 	mov.w	r3, fp, lsl #2
24003028:	9309      	str	r3, [sp, #36]	; 0x24
2400302a:	f108 0354 	add.w	r3, r8, #84	; 0x54
2400302e:	9307      	str	r3, [sp, #28]
					if (useVelocity == 0) envVel = 1.f;
24003030:	edd6 7a00 	vldr	s15, [r6]
				    tADSRT_on(&envs[v][i], envVel);
24003034:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24003038:	4628      	mov	r0, r5
				for (int v = 0; v < NUM_ENV; v++)
2400303a:	36a8      	adds	r6, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
2400303c:	eef5 7a40 	vcmp.f32	s15, #0.0
24003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003044:	f000 8217 	beq.w	24003476 <audioFrame+0xb06>
				    tADSRT_on(&envs[v][i], envVel);
24003048:	eeb0 0a4a 	vmov.f32	s0, s20
				for (int v = 0; v < NUM_ENV; v++)
2400304c:	3508      	adds	r5, #8
				    tADSRT_on(&envs[v][i], envVel);
2400304e:	f010 fa91 	bl	24013574 <tADSRT_on>
				    voiceSounding = 1;
24003052:	4b34      	ldr	r3, [pc, #208]	; (24003124 <audioFrame+0x7b4>)
24003054:	f04f 0201 	mov.w	r2, #1
24003058:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
2400305a:	9b07      	ldr	r3, [sp, #28]
2400305c:	429e      	cmp	r6, r3
2400305e:	d1e7      	bne.n	24003030 <audioFrame+0x6c0>
24003060:	ebcb 738b 	rsb	r3, fp, fp, lsl #30
24003064:	9a08      	ldr	r2, [sp, #32]
					if (noteOnSync > 0.5f)
24003066:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
				stringOctave[i] = octave;
2400306a:	4646      	mov	r6, r8
2400306c:	009b      	lsls	r3, r3, #2
				for (int v = 0; v < NUM_LFOS; v++)
2400306e:	2500      	movs	r5, #0
24003070:	330c      	adds	r3, #12
24003072:	e9cd 2707 	strd	r2, r7, [sp, #28]
24003076:	461f      	mov	r7, r3
					if (noteOnSync > 0.5f)
24003078:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
2400307c:	4628      	mov	r0, r5
2400307e:	4659      	mov	r1, fp
				for (int v = 0; v < NUM_LFOS; v++)
24003080:	3501      	adds	r5, #1
					if (noteOnSync > 0.5f)
24003082:	eef4 7ac8 	vcmpe.f32	s15, s16
24003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400308a:	dd03      	ble.n	24003094 <audioFrame+0x724>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
2400308c:	ed96 0a00 	vldr	s0, [r6]
24003090:	59f2      	ldr	r2, [r6, r7]
24003092:	4790      	blx	r2
				for (int v = 0; v < NUM_LFOS; v++)
24003094:	2d04      	cmp	r5, #4
24003096:	f106 068c 	add.w	r6, r6, #140	; 0x8c
2400309a:	d1ed      	bne.n	24003078 <audioFrame+0x708>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
2400309c:	4922      	ldr	r1, [pc, #136]	; (24003128 <audioFrame+0x7b8>)
2400309e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240030a2:	4822      	ldr	r0, [pc, #136]	; (2400312c <audioFrame+0x7bc>)
240030a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240030a8:	780b      	ldrb	r3, [r1, #0]
				if (currentActivePreset == 63)
240030aa:	4d21      	ldr	r5, [pc, #132]	; (24003130 <audioFrame+0x7c0>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
240030ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
240030b0:	3301      	adds	r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
240030b2:	9e01      	ldr	r6, [sp, #4]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
240030b4:	edd0 7a00 	vldr	s15, [r0]
240030b8:	700b      	strb	r3, [r1, #0]
240030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if (currentActivePreset == 63)
240030be:	782b      	ldrb	r3, [r5, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
240030c0:	ed86 aa00 	vstr	s20, [r6]
				if (currentActivePreset == 63)
240030c4:	2b3f      	cmp	r3, #63	; 0x3f
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
240030c6:	ee67 7a87 	vmul.f32	s15, s15, s14
240030ca:	e9dd 2707 	ldrd	r2, r7, [sp, #28]
240030ce:	edc6 7a02 	vstr	s15, [r6, #8]
				if (currentActivePreset == 63)
240030d2:	f000 8275 	beq.w	240035c0 <audioFrame+0xc50>
				if (currentActivePreset == 62)
240030d6:	782b      	ldrb	r3, [r5, #0]
240030d8:	2b3e      	cmp	r3, #62	; 0x3e
240030da:	f000 8298 	beq.w	2400360e <audioFrame+0xc9e>
				else if (currentActivePreset == 61)
240030de:	782b      	ldrb	r3, [r5, #0]
240030e0:	2b3d      	cmp	r3, #61	; 0x3d
240030e2:	f47f ad0d 	bne.w	24002b00 <audioFrame+0x190>
240030e6:	4b13      	ldr	r3, [pc, #76]	; (24003134 <audioFrame+0x7c4>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
240030e8:	eef1 ca00 	vmov.f32	s25, #16	; 0x40800000  4.0
240030ec:	9909      	ldr	r1, [sp, #36]	; 0x24
							stringFade = (float)(thisString - 6.0f) * 0.2f;
240030ee:	eeb1 da08 	vmov.f32	s26, #24	; 0x40c00000  6.0
				else if (currentActivePreset == 61)
240030f2:	9803      	ldr	r0, [sp, #12]
240030f4:	4419      	add	r1, r3
240030f6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
240030fa:	970a      	str	r7, [sp, #40]	; 0x28
240030fc:	4680      	mov	r8, r0
240030fe:	460b      	mov	r3, r1
24003100:	490d      	ldr	r1, [pc, #52]	; (24003138 <audioFrame+0x7c8>)
24003102:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
24003106:	4617      	mov	r7, r2
24003108:	4d0c      	ldr	r5, [pc, #48]	; (2400313c <audioFrame+0x7cc>)
2400310a:	4e0d      	ldr	r6, [pc, #52]	; (24003140 <audioFrame+0x7d0>)
2400310c:	f8df a034 	ldr.w	sl, [pc, #52]	; 24003144 <audioFrame+0x7d4>
24003110:	e9cd b907 	strd	fp, r9, [sp, #28]
24003114:	4689      	mov	r9, r1
24003116:	469b      	mov	fp, r3
24003118:	e0f5      	b.n	24003306 <audioFrame+0x996>
2400311a:	bf00      	nop
2400311c:	200179d0 	.word	0x200179d0
24003120:	200054f0 	.word	0x200054f0
24003124:	20017a78 	.word	0x20017a78
24003128:	20005a70 	.word	0x20005a70
2400312c:	2001b90c 	.word	0x2001b90c
24003130:	20017c7d 	.word	0x20017c7d
24003134:	20017968 	.word	0x20017968
24003138:	20000c94 	.word	0x20000c94
2400313c:	20000db4 	.word	0x20000db4
24003140:	20000340 	.word	0x20000340
24003144:	20005184 	.word	0x20005184
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24003148:	ed96 7a06 	vldr	s14, [r6, #24]
2400314c:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003150:	edd6 7a08 	vldr	s15, [r6, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24003154:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003158:	ee78 6a47 	vsub.f32	s13, s16, s14
2400315c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003160:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
24003164:	ee68 8a8b 	vmul.f32	s17, s17, s22
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003168:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
2400316c:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24003170:	ee70 0aa0 	vadd.f32	s1, s1, s1
24003174:	f032 ff24 	bl	24035fc0 <__LEAF_clip_veneer>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003178:	ed96 7a03 	vldr	s14, [r6, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400317c:	edd6 7a05 	vldr	s15, [r6, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24003180:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003184:	ee78 6a47 	vsub.f32	s13, s16, s14
24003188:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
2400318c:	eeb0 1a6a 	vmov.f32	s2, s21
24003190:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003194:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003198:	ee70 0aa0 	vadd.f32	s1, s1, s1
2400319c:	f032 ff10 	bl	24035fc0 <__LEAF_clip_veneer>
							int height2Int = floor(height2);
240031a0:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031a4:	48eb      	ldr	r0, [pc, #940]	; (24003554 <audioFrame+0xbe4>)
							int height1Int = floor(height1);
240031a6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							if (height2 < 1.0f)
240031aa:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
240031ae:	febb 6b46 	vrintm.f64	d6, d6
240031b2:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
240031b6:	febb 7b47 	vrintm.f64	d7, d7
240031ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
240031be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
240031c2:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
240031c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
240031ca:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
240031ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031d2:	f102 0101 	add.w	r1, r2, #1
240031d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
240031da:	ee3e 9ae6 	vsub.f32	s18, s29, s13
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
240031e2:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031e6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
240031ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
240031ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
240031f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
240031f6:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031fa:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031fe:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24003206:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
2400320a:	ee29 9a07 	vmul.f32	s18, s18, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
2400320e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003212:	ee3f 7a6e 	vsub.f32	s14, s30, s29
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003216:	eb07 0282 	add.w	r2, r7, r2, lsl #2
2400321a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
2400321e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003222:	ee37 7a26 	vadd.f32	s14, s14, s13
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003226:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
2400322a:	edd2 5a24 	vldr	s11, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
2400322e:	eea5 9a07 	vfma.f32	s18, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003232:	ee3f 7a40 	vsub.f32	s14, s30, s0
24003236:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
2400323a:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
2400323e:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003242:	ee67 7aa5 	vmul.f32	s15, s15, s11
24003246:	eee6 7a07 	vfma.f32	s15, s12, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
2400324a:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
2400324e:	f100 815f 	bmi.w	24003510 <audioFrame+0xba0>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
24003252:	eef0 0a48 	vmov.f32	s1, s16
24003256:	ed96 1a08 	vldr	s2, [r6, #32]
2400325a:	ed96 0a07 	vldr	s0, [r6, #28]
2400325e:	edd9 ea3c 	vldr	s29, [r9, #240]	; 0xf0
24003262:	f032 fead 	bl	24035fc0 <__LEAF_clip_veneer>
24003266:	edd5 7a3c 	vldr	s15, [r5, #240]	; 0xf0
2400326a:	eeee 7a80 	vfma.f32	s15, s29, s0
2400326e:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
24003272:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
24003276:	eeb4 eaee 	vcmpe.f32	s28, s29
2400327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400327e:	f100 8136 	bmi.w	240034ee <audioFrame+0xb7e>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
24003282:	eef0 0a48 	vmov.f32	s1, s16
24003286:	ed96 1a05 	vldr	s2, [r6, #20]
2400328a:	ed96 0a04 	vldr	s0, [r6, #16]
2400328e:	ed99 8a24 	vldr	s16, [r9, #144]	; 0x90
24003292:	f032 fe95 	bl	24035fc0 <__LEAF_clip_veneer>
24003296:	edd5 7a24 	vldr	s15, [r5, #144]	; 0x90
2400329a:	eee8 7a00 	vfma.f32	s15, s16, s0
2400329e:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240032a2:	4aad      	ldr	r2, [pc, #692]	; (24003558 <audioFrame+0xbe8>)
240032a4:	4640      	mov	r0, r8
240032a6:	49ad      	ldr	r1, [pc, #692]	; (2400355c <audioFrame+0xbec>)
					for (int j = 0; j < NUM_OVERTONES; j++)
240032a8:	3701      	adds	r7, #1
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240032aa:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
240032ac:	f109 0904 	add.w	r9, r9, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240032b0:	ed9a 0a01 	vldr	s0, [sl, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
240032b4:	3504      	adds	r5, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
240032b6:	ee6d 7aaf 	vmul.f32	s15, s27, s31
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240032ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240032be:	ee20 0a2b 	vmul.f32	s0, s0, s23
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
240032c2:	eee7 7a28 	vfma.f32	s15, s14, s17
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
240032c6:	ed93 7a00 	vldr	s14, [r3]
240032ca:	ee20 0a07 	vmul.f32	s0, s0, s14
240032ce:	ee20 0a27 	vmul.f32	s0, s0, s15
240032d2:	f010 f8ff 	bl	240134d4 <tADSRT_setDecay>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
240032d6:	4aa0      	ldr	r2, [pc, #640]	; (24003558 <audioFrame+0xbe8>)
240032d8:	49a0      	ldr	r1, [pc, #640]	; (2400355c <audioFrame+0xbec>)
240032da:	4640      	mov	r0, r8
240032dc:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
240032de:	f108 0804 	add.w	r8, r8, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
240032e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240032e6:	ed93 0a00 	vldr	s0, [r3]
240032ea:	ee2a 0a00 	vmul.f32	s0, s20, s0
240032ee:	ee20 0a09 	vmul.f32	s0, s0, s18
240032f2:	f010 f93f 	bl	24013574 <tADSRT_on>
						currentRandom++;
240032f6:	4a98      	ldr	r2, [pc, #608]	; (24003558 <audioFrame+0xbe8>)
					for (int j = 0; j < NUM_OVERTONES; j++)
240032f8:	2f0b      	cmp	r7, #11
						currentRandom++;
240032fa:	7813      	ldrb	r3, [r2, #0]
240032fc:	f103 0301 	add.w	r3, r3, #1
24003300:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
24003302:	f000 8178 	beq.w	240035f6 <audioFrame+0xc86>
						int thisString = i + firstString;
24003306:	4b96      	ldr	r3, [pc, #600]	; (24003560 <audioFrame+0xbf0>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
24003308:	ed9a 8a02 	vldr	s16, [sl, #8]
						int thisString = i + firstString;
2400330c:	681b      	ldr	r3, [r3, #0]
2400330e:	9a07      	ldr	r2, [sp, #28]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
24003310:	ee28 8a2c 	vmul.f32	s16, s16, s25
24003314:	eddb 7a00 	vldr	s15, [fp]
						int thisString = i + firstString;
24003318:	4413      	add	r3, r2
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
2400331a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (thisString < 6)
2400331e:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
24003320:	ee07 3a90 	vmov	s15, r3
24003324:	eef8 8ae7 	vcvt.f32.s32	s17, s15
						if (thisString < 6)
24003328:	f77f af0e 	ble.w	24003148 <audioFrame+0x7d8>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
2400332c:	ed96 7a03 	vldr	s14, [r6, #12]
24003330:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003334:	edd6 7a05 	vldr	s15, [r6, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003338:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400333c:	ee78 6a47 	vsub.f32	s13, s16, s14
24003340:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
24003344:	ee78 8acd 	vsub.f32	s17, s17, s26
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003348:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400334c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
24003350:	ee68 8a8b 	vmul.f32	s17, s17, s22
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003354:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003358:	ee70 0aa0 	vadd.f32	s1, s1, s1
2400335c:	f032 fe30 	bl	24035fc0 <__LEAF_clip_veneer>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003360:	ed96 7a00 	vldr	s14, [r6]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003364:	edd6 7a02 	vldr	s15, [r6, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003368:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400336c:	ee78 6a47 	vsub.f32	s13, s16, s14
24003370:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003374:	eeb0 1a6a 	vmov.f32	s2, s21
24003378:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400337c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003380:	ee70 0aa0 	vadd.f32	s1, s1, s1
24003384:	f032 fe1c 	bl	24035fc0 <__LEAF_clip_veneer>
							int height2Int = floor(height2);
24003388:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							int height1Int = floor(height1);
2400338c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003390:	4870      	ldr	r0, [pc, #448]	; (24003554 <audioFrame+0xbe4>)
							if (height2 < 1.0f)
24003392:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
24003396:	febb 6b46 	vrintm.f64	d6, d6
2400339a:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
2400339e:	febb 7b47 	vrintm.f64	d7, d7
240033a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
240033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
240033aa:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
240033ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
240033b2:	ee17 3a90 	vmov	r3, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
240033b6:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240033ba:	f102 0101 	add.w	r1, r2, #1
240033be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
240033c2:	ee7e 6ae6 	vsub.f32	s13, s29, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240033c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
240033ca:	eb07 0282 	add.w	r2, r7, r2, lsl #2
240033ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
240033d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
240033d6:	ed92 9a24 	vldr	s18, [r2, #144]	; 0x90
240033da:	eb00 0281 	add.w	r2, r0, r1, lsl #2
240033de:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240033e2:	f103 0201 	add.w	r2, r3, #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240033e6:	eea7 9aa6 	vfma.f32	s18, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240033ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height1Float = height1 - height1Int;
240033ee:	ee07 3a90 	vmov	s15, r3
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240033f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240033f6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
							float height1Float = height1 - height1Int;
240033fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240033fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24003402:	eb00 0282 	add.w	r2, r0, r2, lsl #2
24003406:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float height1Float = height1 - height1Int;
2400340a:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
2400340e:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
24003412:	edd3 7a00 	vldr	s15, [r3]
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003416:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
2400341a:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
2400341e:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
24003422:	f100 80a3 	bmi.w	2400356c <audioFrame+0xbfc>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
24003426:	eef0 0a48 	vmov.f32	s1, s16
2400342a:	ed96 1a05 	vldr	s2, [r6, #20]
2400342e:	ed96 0a04 	vldr	s0, [r6, #16]
24003432:	edd9 ea24 	vldr	s29, [r9, #144]	; 0x90
24003436:	f032 fdc3 	bl	24035fc0 <__LEAF_clip_veneer>
2400343a:	edd5 7a24 	vldr	s15, [r5, #144]	; 0x90
2400343e:	eeee 7a80 	vfma.f32	s15, s29, s0
24003442:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
24003446:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
2400344a:	eeb4 eaee 	vcmpe.f32	s28, s29
2400344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003452:	d46e      	bmi.n	24003532 <audioFrame+0xbc2>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
24003454:	eef0 0a48 	vmov.f32	s1, s16
24003458:	ed96 1a02 	vldr	s2, [r6, #8]
2400345c:	ed96 0a01 	vldr	s0, [r6, #4]
24003460:	ed99 8a0c 	vldr	s16, [r9, #48]	; 0x30
24003464:	f032 fdac 	bl	24035fc0 <__LEAF_clip_veneer>
24003468:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
2400346c:	eee8 7a00 	vfma.f32	s15, s16, s0
24003470:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
24003474:	e715      	b.n	240032a2 <audioFrame+0x932>
				    tADSRT_on(&envs[v][i], envVel);
24003476:	f010 f87d 	bl	24013574 <tADSRT_on>
				    voiceSounding = 1;
2400347a:	4b3a      	ldr	r3, [pc, #232]	; (24003564 <audioFrame+0xbf4>)
2400347c:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
24003480:	3508      	adds	r5, #8
				    voiceSounding = 1;
24003482:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
24003484:	9b07      	ldr	r3, [sp, #28]
24003486:	42b3      	cmp	r3, r6
24003488:	f47f add2 	bne.w	24003030 <audioFrame+0x6c0>
2400348c:	e5e8      	b.n	24003060 <audioFrame+0x6f0>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
2400348e:	ed93 7a01 	vldr	s14, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003492:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24003496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400349a:	ee76 6ac6 	vsub.f32	s13, s13, s12
2400349e:	ee37 7a46 	vsub.f32	s14, s14, s12
240034a2:	ee87 6a26 	vdiv.f32	s12, s14, s13
240034a6:	eee5 7a06 	vfma.f32	s15, s10, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
240034aa:	edc6 7a01 	vstr	s15, [r6, #4]
240034ae:	f7ff bb70 	b.w	24002b92 <audioFrame+0x222>
240034b2:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
240034b6:	edd2 4a08 	vldr	s9, [r2, #32]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
240034ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240034be:	4e2a      	ldr	r6, [pc, #168]	; (24003568 <audioFrame+0xbf8>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
240034c0:	ee74 4ac3 	vsub.f32	s9, s9, s6
240034c4:	ee36 6a43 	vsub.f32	s12, s12, s6
240034c8:	ee86 3a24 	vdiv.f32	s6, s12, s9
240034cc:	eeb0 6a67 	vmov.f32	s12, s15
240034d0:	eea5 6a03 	vfma.f32	s12, s10, s6
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
240034d4:	ed86 6a00 	vstr	s12, [r6]
240034d8:	f7ff bb46 	b.w	24002b68 <audioFrame+0x1f8>
					lsDecay[i] = 0;
240034dc:	2300      	movs	r3, #0
240034de:	9a02      	ldr	r2, [sp, #8]
240034e0:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
240034e2:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
240034e4:	f8da 3000 	ldr.w	r3, [sl]
		for (int i = 0; i < numStringsThisBoard; i++)
240034e8:	7810      	ldrb	r0, [r2, #0]
240034ea:	f7ff ba85 	b.w	240029f8 <audioFrame+0x88>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
240034ee:	eef0 0a48 	vmov.f32	s1, s16
240034f2:	ed96 1a04 	vldr	s2, [r6, #16]
240034f6:	ed96 0a03 	vldr	s0, [r6, #12]
240034fa:	ed99 8a18 	vldr	s16, [r9, #96]	; 0x60
240034fe:	f032 fd5f 	bl	24035fc0 <__LEAF_clip_veneer>
24003502:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
24003506:	eee8 7a00 	vfma.f32	s15, s16, s0
2400350a:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
2400350e:	e6c8      	b.n	240032a2 <audioFrame+0x932>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
24003510:	eef0 0a48 	vmov.f32	s1, s16
24003514:	ed96 1a07 	vldr	s2, [r6, #28]
24003518:	ed96 0a06 	vldr	s0, [r6, #24]
2400351c:	edd9 ea30 	vldr	s29, [r9, #192]	; 0xc0
24003520:	f032 fd4e 	bl	24035fc0 <__LEAF_clip_veneer>
24003524:	edd5 7a30 	vldr	s15, [r5, #192]	; 0xc0
24003528:	eeee 7a80 	vfma.f32	s15, s29, s0
2400352c:	eecf fa27 	vdiv.f32	s31, s30, s15
24003530:	e69f      	b.n	24003272 <audioFrame+0x902>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
24003532:	eef0 0a48 	vmov.f32	s1, s16
24003536:	ed96 1a01 	vldr	s2, [r6, #4]
2400353a:	ed96 0a00 	vldr	s0, [r6]
2400353e:	ed99 8a00 	vldr	s16, [r9]
24003542:	f032 fd3d 	bl	24035fc0 <__LEAF_clip_veneer>
24003546:	edd5 7a00 	vldr	s15, [r5]
2400354a:	eee8 7a00 	vfma.f32	s15, s16, s0
2400354e:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
24003552:	e6a6      	b.n	240032a2 <audioFrame+0x932>
24003554:	20000394 	.word	0x20000394
24003558:	20017c7e 	.word	0x20017c7e
2400355c:	20005670 	.word	0x20005670
24003560:	200050b8 	.word	0x200050b8
24003564:	20017a78 	.word	0x20017a78
24003568:	20000364 	.word	0x20000364
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
2400356c:	eef0 0a48 	vmov.f32	s1, s16
24003570:	ed96 1a04 	vldr	s2, [r6, #16]
24003574:	ed96 0a03 	vldr	s0, [r6, #12]
24003578:	edd9 ea18 	vldr	s29, [r9, #96]	; 0x60
2400357c:	f032 fd20 	bl	24035fc0 <__LEAF_clip_veneer>
24003580:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
24003584:	eeee 7a80 	vfma.f32	s15, s29, s0
24003588:	eecf fa27 	vdiv.f32	s31, s30, s15
2400358c:	e75b      	b.n	24003446 <audioFrame+0xad6>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
2400358e:	eeb0 0a69 	vmov.f32	s0, s19
24003592:	4638      	mov	r0, r7
24003594:	f016 ff02 	bl	2401a39c <tLivingString2_setTargetLev>
					tLivingString2_setLevMode(&strings[i], 0);
24003598:	2100      	movs	r1, #0
2400359a:	4638      	mov	r0, r7
2400359c:	f016 ff3a 	bl	2401a414 <tLivingString2_setLevMode>
					tLivingString2_setDecay(&strings[i], 0.2f);
240035a0:	eeb0 0a4b 	vmov.f32	s0, s22
240035a4:	4638      	mov	r0, r7
240035a6:	f016 fee3 	bl	2401a370 <tLivingString2_setDecay>
					tADSRT_off(&fenvelopes[i]);
240035aa:	4861      	ldr	r0, [pc, #388]	; (24003730 <audioFrame+0xdc0>)
240035ac:	eb00 008b 	add.w	r0, r0, fp, lsl #2
240035b0:	f00f fff2 	bl	24013598 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
240035b4:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
240035b6:	f8da 3000 	ldr.w	r3, [sl]
		for (int i = 0; i < numStringsThisBoard; i++)
240035ba:	7810      	ldrb	r0, [r2, #0]
240035bc:	f7ff ba1c 	b.w	240029f8 <audioFrame+0x88>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
240035c0:	4b5c      	ldr	r3, [pc, #368]	; (24003734 <audioFrame+0xdc4>)
240035c2:	eeb0 0a4a 	vmov.f32	s0, s20
240035c6:	485c      	ldr	r0, [pc, #368]	; (24003738 <audioFrame+0xdc8>)
240035c8:	edd3 0a00 	vldr	s1, [r3]
240035cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
240035ce:	4418      	add	r0, r3
240035d0:	f016 fb6e 	bl	24019cb0 <tSimpleLivingString3_pluck>
					lsDecay[i] = 1;
240035d4:	9a02      	ldr	r2, [sp, #8]
240035d6:	2301      	movs	r3, #1
240035d8:	7013      	strb	r3, [r2, #0]
240035da:	9a07      	ldr	r2, [sp, #28]
240035dc:	e57b      	b.n	240030d6 <audioFrame+0x766>
240035de:	9b03      	ldr	r3, [sp, #12]
240035e0:	461e      	mov	r6, r3
240035e2:	f103 052c 	add.w	r5, r3, #44	; 0x2c
						tADSRT_off(&additiveEnv[i][j]);
240035e6:	4630      	mov	r0, r6
					for (int j = 0; j < NUM_OVERTONES; j++)
240035e8:	3604      	adds	r6, #4
						tADSRT_off(&additiveEnv[i][j]);
240035ea:	f00f ffd5 	bl	24013598 <tADSRT_off>
					for (int j = 0; j < NUM_OVERTONES; j++)
240035ee:	42ae      	cmp	r6, r5
240035f0:	d1f9      	bne.n	240035e6 <audioFrame+0xc76>
240035f2:	f7ff ba85 	b.w	24002b00 <audioFrame+0x190>
			previousStringInputs[i] = stringInputs[i];
240035f6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
240035fa:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
240035fc:	f8da 3000 	ldr.w	r3, [sl]
		for (int i = 0; i < numStringsThisBoard; i++)
24003600:	7810      	ldrb	r0, [r2, #0]
			previousStringInputs[i] = stringInputs[i];
24003602:	e9dd b907 	ldrd	fp, r9, [sp, #28]
24003606:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
2400360a:	f7ff b9f5 	b.w	240029f8 <audioFrame+0x88>
					tADSRT_on(&fenvelopes[i], amplitz);
2400360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24003610:	eeb0 0a4a 	vmov.f32	s0, s20
24003614:	4846      	ldr	r0, [pc, #280]	; (24003730 <audioFrame+0xdc0>)
					float pluckAmp = amplitz * 2.0f; //was 4
24003616:	ee3a aa0a 	vadd.f32	s20, s20, s20
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
2400361a:	4d48      	ldr	r5, [pc, #288]	; (2400373c <audioFrame+0xdcc>)
					tADSRT_on(&fenvelopes[i], amplitz);
2400361c:	4418      	add	r0, r3
2400361e:	9208      	str	r2, [sp, #32]
24003620:	f00f ffa8 	bl	24013574 <tADSRT_on>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
24003624:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24003628:	ed95 7a00 	vldr	s14, [r5]
2400362c:	4638      	mov	r0, r7
2400362e:	9507      	str	r5, [sp, #28]
24003630:	eeb4 7ae7 	vcmpe.f32	s14, s15
24003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003638:	bfcc      	ite	gt
2400363a:	2101      	movgt	r1, #1
2400363c:	2100      	movle	r1, #0
2400363e:	f016 fee9 	bl	2401a414 <tLivingString2_setLevMode>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
24003642:	ed95 0a01 	vldr	s0, [r5, #4]
24003646:	4638      	mov	r0, r7
24003648:	f016 fea8 	bl	2401a39c <tLivingString2_setTargetLev>
					int delayLength = (int)strings[i]->waveLengthInSamples;
2400364c:	683b      	ldr	r3, [r7, #0]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
2400364e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
24003652:	ed95 7a02 	vldr	s14, [r5, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
24003656:	edd3 6a02 	vldr	s13, [r3, #8]
					if (beforeLength > 0)
2400365a:	9a08      	ldr	r2, [sp, #32]
					int delayLength = (int)strings[i]->waveLengthInSamples;
2400365c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003660:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
24003664:	ee16 6a90 	vmov	r6, s13
					int beforeLength = (delayLength * knobScaled[2]);
24003668:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400366c:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003670:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
24003674:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
2400367c:	ee17 5a10 	vmov	r5, s14
					if (beforeLength > 0)
24003680:	2d00      	cmp	r5, #0
24003682:	dd52      	ble.n	2400372a <audioFrame+0xdba>
						beforePickIncrement = pluckAmp / beforeLength;
24003684:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24003688:	ee8a 6a07 	vdiv.f32	s12, s20, s14
					if (afterLength > 0)
2400368c:	ee17 1a90 	vmov	r1, s15
24003690:	2900      	cmp	r1, #0
24003692:	dd03      	ble.n	2400369c <audioFrame+0xd2c>
						afterPickIncrement = pluckAmp / afterLength;
24003694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24003698:	ee8a aa27 	vdiv.f32	s20, s20, s15
					for (int j = 0; j < delayLength; j++)
2400369c:	2e00      	cmp	r6, #0
2400369e:	dd34      	ble.n	2400370a <audioFrame+0xd9a>
					float value = 0.0f;
240036a0:	eddf 7a27 	vldr	s15, [pc, #156]	; 24003740 <audioFrame+0xdd0>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240036a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
240036a8:	e01c      	b.n	240036e4 <audioFrame+0xd74>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
240036aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
							value += beforePickIncrement;
240036ac:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
240036b0:	6983      	ldr	r3, [r0, #24]
240036b2:	6881      	ldr	r1, [r0, #8]
240036b4:	ee27 7aa6 	vmul.f32	s14, s15, s13
240036b8:	4413      	add	r3, r2
240036ba:	4019      	ands	r1, r3
240036bc:	6843      	ldr	r3, [r0, #4]
240036be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
240036c2:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
240036c6:	683b      	ldr	r3, [r7, #0]
240036c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240036ca:	6983      	ldr	r3, [r0, #24]
240036cc:	6881      	ldr	r1, [r0, #8]
240036ce:	4413      	add	r3, r2
					for (int j = 0; j < delayLength; j++)
240036d0:	3201      	adds	r2, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240036d2:	4019      	ands	r1, r3
240036d4:	6843      	ldr	r3, [r0, #4]
					for (int j = 0; j < delayLength; j++)
240036d6:	4296      	cmp	r6, r2
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240036d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
240036dc:	ed81 7a00 	vstr	s14, [r1]
					for (int j = 0; j < delayLength; j++)
240036e0:	d013      	beq.n	2400370a <audioFrame+0xd9a>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
240036e2:	683b      	ldr	r3, [r7, #0]
						if (j < beforeLength)
240036e4:	42aa      	cmp	r2, r5
240036e6:	dbe0      	blt.n	240036aa <audioFrame+0xd3a>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240036e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
							value -= afterPickIncrement;
240036ea:	ee77 7aca 	vsub.f32	s15, s15, s20
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240036ee:	6983      	ldr	r3, [r0, #24]
240036f0:	6881      	ldr	r1, [r0, #8]
240036f2:	ee27 7aa6 	vmul.f32	s14, s15, s13
240036f6:	4413      	add	r3, r2
240036f8:	4019      	ands	r1, r3
240036fa:	6843      	ldr	r3, [r0, #4]
240036fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
24003700:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
24003704:	683b      	ldr	r3, [r7, #0]
24003706:	6b58      	ldr	r0, [r3, #52]	; 0x34
24003708:	e7df      	b.n	240036ca <audioFrame+0xd5a>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
2400370a:	9b07      	ldr	r3, [sp, #28]
2400370c:	4638      	mov	r0, r7
2400370e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24003744 <audioFrame+0xdd4>
24003712:	ed93 0a03 	vldr	s0, [r3, #12]
24003716:	ee20 0a27 	vmul.f32	s0, s0, s15
2400371a:	f016 fe29 	bl	2401a370 <tLivingString2_setDecay>
		for (int i = 0; i < numStringsThisBoard; i++)
2400371e:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
24003720:	f8da 3000 	ldr.w	r3, [sl]
		for (int i = 0; i < numStringsThisBoard; i++)
24003724:	7810      	ldrb	r0, [r2, #0]
24003726:	f7ff b967 	b.w	240029f8 <audioFrame+0x88>
						beforePickIncrement = pluckAmp;
2400372a:	eeb0 6a4a 	vmov.f32	s12, s20
2400372e:	e7ad      	b.n	2400368c <audioFrame+0xd1c>
24003730:	20005078 	.word	0x20005078
24003734:	2000018c 	.word	0x2000018c
24003738:	20005350 	.word	0x20005350
2400373c:	20005184 	.word	0x20005184
24003740:	00000000 	.word	0x00000000
24003744:	43fa0000 	.word	0x43fa0000

24003748 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if (hspi == &hspi6)
24003748:	4b6f      	ldr	r3, [pc, #444]	; (24003908 <HAL_SPI_RxCpltCallback+0x1c0>)
	interrupted = 1;
2400374a:	2201      	movs	r2, #1
2400374c:	496f      	ldr	r1, [pc, #444]	; (2400390c <HAL_SPI_RxCpltCallback+0x1c4>)
	if (hspi == &hspi6)
2400374e:	4283      	cmp	r3, r0
	interrupted = 1;
24003750:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
24003752:	d000      	beq.n	24003756 <HAL_SPI_RxCpltCallback+0xe>
24003754:	4770      	bx	lr
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
24003756:	2102      	movs	r1, #2
24003758:	486d      	ldr	r0, [pc, #436]	; (24003910 <HAL_SPI_RxCpltCallback+0x1c8>)
{
2400375a:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
2400375c:	f004 fd2c 	bl	240081b8 <HAL_GPIO_WritePin>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
24003760:	4b6c      	ldr	r3, [pc, #432]	; (24003914 <HAL_SPI_RxCpltCallback+0x1cc>)
24003762:	7e9a      	ldrb	r2, [r3, #26]
24003764:	2afe      	cmp	r2, #254	; 0xfe
24003766:	d009      	beq.n	2400377c <HAL_SPI_RxCpltCallback+0x34>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
			}
		}
		newPluck = 1;
24003768:	2401      	movs	r4, #1
2400376a:	4b6b      	ldr	r3, [pc, #428]	; (24003918 <HAL_SPI_RxCpltCallback+0x1d0>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
2400376c:	2200      	movs	r2, #0
2400376e:	2102      	movs	r1, #2
		newPluck = 1;
24003770:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
24003772:	4867      	ldr	r0, [pc, #412]	; (24003910 <HAL_SPI_RxCpltCallback+0x1c8>)
	}
}
24003774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
24003778:	f004 bd1e 	b.w	240081b8 <HAL_GPIO_WritePin>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
2400377c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
24003780:	2afd      	cmp	r2, #253	; 0xfd
24003782:	d1f1      	bne.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
			for (int i = 0; i < numStringsThisBoard; i++)
24003784:	4a65      	ldr	r2, [pc, #404]	; (2400391c <HAL_SPI_RxCpltCallback+0x1d4>)
24003786:	7811      	ldrb	r1, [r2, #0]
24003788:	2900      	cmp	r1, #0
2400378a:	d0ed      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400378c:	4a64      	ldr	r2, [pc, #400]	; (24003920 <HAL_SPI_RxCpltCallback+0x1d8>)
			for (int i = 0; i < numStringsThisBoard; i++)
2400378e:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003790:	6814      	ldr	r4, [r2, #0]
24003792:	6810      	ldr	r0, [r2, #0]
24003794:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003798:	f100 000e 	add.w	r0, r0, #14
2400379c:	f894 c01b 	ldrb.w	ip, [r4, #27]
240037a0:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
240037a4:	485f      	ldr	r0, [pc, #380]	; (24003924 <HAL_SPI_RxCpltCallback+0x1dc>)
240037a6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240037aa:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037ac:	d0dc      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037ae:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037b0:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037b2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037b6:	f894 e01d 	ldrb.w	lr, [r4, #29]
240037ba:	6814      	ldr	r4, [r2, #0]
240037bc:	f104 0c0f 	add.w	ip, r4, #15
240037c0:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240037c4:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240037c8:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
240037ca:	d0cd      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037cc:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037ce:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037d0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037d4:	f894 c01f 	ldrb.w	ip, [r4, #31]
240037d8:	6814      	ldr	r4, [r2, #0]
240037da:	f104 0410 	add.w	r4, r4, #16
240037de:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240037e2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240037e6:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
240037e8:	d0be      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037ea:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037ec:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240037ee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037f2:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
240037f6:	6814      	ldr	r4, [r2, #0]
240037f8:	f104 0411 	add.w	r4, r4, #17
240037fc:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003800:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003804:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
24003806:	d0af      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003808:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400380a:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400380c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003810:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23
24003814:	6814      	ldr	r4, [r2, #0]
24003816:	f104 0412 	add.w	r4, r4, #18
2400381a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400381e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003822:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
24003824:	d0a0      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003826:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003828:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400382a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400382e:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
24003832:	6814      	ldr	r4, [r2, #0]
24003834:	f104 0413 	add.w	r4, r4, #19
24003838:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400383c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003840:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
24003842:	d091      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003844:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003846:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003848:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400384c:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
24003850:	6814      	ldr	r4, [r2, #0]
24003852:	f104 0414 	add.w	r4, r4, #20
24003856:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400385a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400385e:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
24003860:	d082      	beq.n	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003862:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003864:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003866:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400386a:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
2400386e:	6814      	ldr	r4, [r2, #0]
24003870:	f104 0415 	add.w	r4, r4, #21
24003874:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003878:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400387c:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
2400387e:	f43f af73 	beq.w	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003882:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003884:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003886:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400388a:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
2400388e:	6814      	ldr	r4, [r2, #0]
24003890:	f104 0416 	add.w	r4, r4, #22
24003894:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003898:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400389c:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
2400389e:	f43f af63 	beq.w	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038a2:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240038a4:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240038aa:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
240038ae:	6814      	ldr	r4, [r2, #0]
240038b0:	f104 0417 	add.w	r4, r4, #23
240038b4:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240038b8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240038bc:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
240038be:	f43f af53 	beq.w	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038c2:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240038c4:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240038ca:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
240038ce:	6814      	ldr	r4, [r2, #0]
240038d0:	f104 0418 	add.w	r4, r4, #24
240038d4:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240038d8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240038dc:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
240038de:	f43f af43 	beq.w	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038e2:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240038e4:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240038e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240038ea:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
240038ee:	6814      	ldr	r4, [r2, #0]
240038f0:	f104 0419 	add.w	r4, r4, #25
240038f4:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
240038f8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
240038fc:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
240038fe:	f43f af33 	beq.w	24003768 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003902:	6813      	ldr	r3, [r2, #0]
24003904:	6813      	ldr	r3, [r2, #0]
24003906:	bf00      	nop
24003908:	2001e218 	.word	0x2001e218
2400390c:	20005154 	.word	0x20005154
24003910:	58020800 	.word	0x58020800
24003914:	38000000 	.word	0x38000000
24003918:	200054bc 	.word	0x200054bc
2400391c:	20000052 	.word	0x20000052
24003920:	200050b8 	.word	0x200050b8
24003924:	20017998 	.word	0x20017998

24003928 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;

	if (hspi == &hspi6)
24003928:	4b6e      	ldr	r3, [pc, #440]	; (24003ae4 <HAL_SPI_RxHalfCpltCallback+0x1bc>)
	interrupted = 1;
2400392a:	2201      	movs	r2, #1
2400392c:	496e      	ldr	r1, [pc, #440]	; (24003ae8 <HAL_SPI_RxHalfCpltCallback+0x1c0>)
	if (hspi == &hspi6)
2400392e:	4283      	cmp	r3, r0
	interrupted = 1;
24003930:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
24003932:	d000      	beq.n	24003936 <HAL_SPI_RxHalfCpltCallback+0xe>
24003934:	4770      	bx	lr
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
24003936:	2102      	movs	r1, #2
24003938:	486c      	ldr	r0, [pc, #432]	; (24003aec <HAL_SPI_RxHalfCpltCallback+0x1c4>)
{
2400393a:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
2400393c:	f004 fc3c 	bl	240081b8 <HAL_GPIO_WritePin>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
24003940:	4b6b      	ldr	r3, [pc, #428]	; (24003af0 <HAL_SPI_RxHalfCpltCallback+0x1c8>)
24003942:	781a      	ldrb	r2, [r3, #0]
24003944:	2afe      	cmp	r2, #254	; 0xfe
24003946:	d009      	beq.n	2400395c <HAL_SPI_RxHalfCpltCallback+0x34>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
			}
		}
		newPluck = 1;
24003948:	2401      	movs	r4, #1
2400394a:	4b6a      	ldr	r3, [pc, #424]	; (24003af4 <HAL_SPI_RxHalfCpltCallback+0x1cc>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
2400394c:	2200      	movs	r2, #0
2400394e:	2102      	movs	r1, #2
		newPluck = 1;
24003950:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
24003952:	4866      	ldr	r0, [pc, #408]	; (24003aec <HAL_SPI_RxHalfCpltCallback+0x1c4>)
	}
}
24003954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
24003958:	f004 bc2e 	b.w	240081b8 <HAL_GPIO_WritePin>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
2400395c:	7e5a      	ldrb	r2, [r3, #25]
2400395e:	2afd      	cmp	r2, #253	; 0xfd
24003960:	d1f2      	bne.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
			for (int i = 0; i < numStringsThisBoard; i++)
24003962:	4a65      	ldr	r2, [pc, #404]	; (24003af8 <HAL_SPI_RxHalfCpltCallback+0x1d0>)
24003964:	7811      	ldrb	r1, [r2, #0]
24003966:	2900      	cmp	r1, #0
24003968:	d0ee      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400396a:	4a64      	ldr	r2, [pc, #400]	; (24003afc <HAL_SPI_RxHalfCpltCallback+0x1d4>)
			for (int i = 0; i < numStringsThisBoard; i++)
2400396c:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400396e:	6814      	ldr	r4, [r2, #0]
24003970:	6810      	ldr	r0, [r2, #0]
24003972:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003976:	f100 0001 	add.w	r0, r0, #1
2400397a:	f894 c001 	ldrb.w	ip, [r4, #1]
2400397e:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
24003982:	485f      	ldr	r0, [pc, #380]	; (24003b00 <HAL_SPI_RxHalfCpltCallback+0x1d8>)
24003984:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003988:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400398a:	d0dd      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400398c:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400398e:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003990:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003994:	f894 e003 	ldrb.w	lr, [r4, #3]
24003998:	6814      	ldr	r4, [r2, #0]
2400399a:	f104 0c02 	add.w	ip, r4, #2
2400399e:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240039a2:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240039a6:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
240039a8:	d0ce      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039aa:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240039ac:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039ae:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240039b2:	f894 c005 	ldrb.w	ip, [r4, #5]
240039b6:	6814      	ldr	r4, [r2, #0]
240039b8:	f104 0403 	add.w	r4, r4, #3
240039bc:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240039c0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240039c4:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
240039c6:	d0bf      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039c8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240039ca:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240039d0:	f894 c007 	ldrb.w	ip, [r4, #7]
240039d4:	6814      	ldr	r4, [r2, #0]
240039d6:	f104 0404 	add.w	r4, r4, #4
240039da:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240039de:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240039e2:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
240039e4:	d0b0      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039e6:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240039e8:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240039ea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240039ee:	f894 c009 	ldrb.w	ip, [r4, #9]
240039f2:	6814      	ldr	r4, [r2, #0]
240039f4:	f104 0405 	add.w	r4, r4, #5
240039f8:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240039fc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a00:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a02:	d0a1      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a04:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a06:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a08:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003a0c:	f894 c00b 	ldrb.w	ip, [r4, #11]
24003a10:	6814      	ldr	r4, [r2, #0]
24003a12:	f104 0406 	add.w	r4, r4, #6
24003a16:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003a1a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a1e:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a20:	d092      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a22:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a24:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a26:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003a2a:	f894 c00d 	ldrb.w	ip, [r4, #13]
24003a2e:	6814      	ldr	r4, [r2, #0]
24003a30:	f104 0407 	add.w	r4, r4, #7
24003a34:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003a38:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a3c:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a3e:	d083      	beq.n	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a40:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a42:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a44:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003a48:	f894 c00f 	ldrb.w	ip, [r4, #15]
24003a4c:	6814      	ldr	r4, [r2, #0]
24003a4e:	f104 0408 	add.w	r4, r4, #8
24003a52:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003a56:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a5a:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a5c:	f43f af74 	beq.w	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a60:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a62:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a64:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003a68:	f894 c011 	ldrb.w	ip, [r4, #17]
24003a6c:	6814      	ldr	r4, [r2, #0]
24003a6e:	f104 0409 	add.w	r4, r4, #9
24003a72:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003a76:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a7a:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a7c:	f43f af64 	beq.w	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a80:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003a82:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003a84:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003a88:	f894 c013 	ldrb.w	ip, [r4, #19]
24003a8c:	6814      	ldr	r4, [r2, #0]
24003a8e:	f104 040a 	add.w	r4, r4, #10
24003a92:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003a96:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003a9a:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
24003a9c:	f43f af54 	beq.w	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003aa0:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003aa2:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003aa4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003aa8:	f894 c015 	ldrb.w	ip, [r4, #21]
24003aac:	6814      	ldr	r4, [r2, #0]
24003aae:	f104 040b 	add.w	r4, r4, #11
24003ab2:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003ab6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003aba:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
24003abc:	f43f af44 	beq.w	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003ac0:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003ac2:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003ac4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003ac8:	f894 c017 	ldrb.w	ip, [r4, #23]
24003acc:	6814      	ldr	r4, [r2, #0]
24003ace:	f104 040c 	add.w	r4, r4, #12
24003ad2:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
24003ad6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
24003ada:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
24003adc:	f43f af34 	beq.w	24003948 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003ae0:	6813      	ldr	r3, [r2, #0]
24003ae2:	6813      	ldr	r3, [r2, #0]
24003ae4:	2001e218 	.word	0x2001e218
24003ae8:	20005154 	.word	0x20005154
24003aec:	58020800 	.word	0x58020800
24003af0:	38000000 	.word	0x38000000
24003af4:	200054bc 	.word	0x200054bc
24003af8:	20000052 	.word	0x20000052
24003afc:	200050b8 	.word	0x200050b8
24003b00:	20017998 	.word	0x20017998

24003b04 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
24003b04:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
24003b06:	2110      	movs	r1, #16
24003b08:	480c      	ldr	r0, [pc, #48]	; (24003b3c <HAL_SPI_TxRxCpltCallback+0x38>)
{
24003b0a:	b508      	push	{r3, lr}
	interrupted = 1;
24003b0c:	4b0c      	ldr	r3, [pc, #48]	; (24003b40 <HAL_SPI_TxRxCpltCallback+0x3c>)
24003b0e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
24003b10:	f004 fb52 	bl	240081b8 <HAL_GPIO_WritePin>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
24003b14:	4b0b      	ldr	r3, [pc, #44]	; (24003b44 <HAL_SPI_TxRxCpltCallback+0x40>)
24003b16:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
24003b1a:	2afe      	cmp	r2, #254	; 0xfe
24003b1c:	d006      	beq.n	24003b2c <HAL_SPI_TxRxCpltCallback+0x28>
	{
		handleSPI(LEVER_BUFFER_SIZE);
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
24003b1e:	2200      	movs	r2, #0
24003b20:	2110      	movs	r1, #16
24003b22:	4806      	ldr	r0, [pc, #24]	; (24003b3c <HAL_SPI_TxRxCpltCallback+0x38>)
}
24003b24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
24003b28:	f004 bb46 	b.w	240081b8 <HAL_GPIO_WritePin>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
24003b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
24003b30:	2bfd      	cmp	r3, #253	; 0xfd
24003b32:	d1f4      	bne.n	24003b1e <HAL_SPI_TxRxCpltCallback+0x1a>
		handleSPI(LEVER_BUFFER_SIZE);
24003b34:	2020      	movs	r0, #32
24003b36:	f032 fa2b 	bl	24035f90 <__handleSPI_veneer>
24003b3a:	e7f0      	b.n	24003b1e <HAL_SPI_TxRxCpltCallback+0x1a>
24003b3c:	58020800 	.word	0x58020800
24003b40:	20005154 	.word	0x20005154
24003b44:	30000400 	.word	0x30000400

24003b48 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
24003b48:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
24003b4a:	2110      	movs	r1, #16
24003b4c:	480b      	ldr	r0, [pc, #44]	; (24003b7c <HAL_SPI_TxRxHalfCpltCallback+0x34>)
{
24003b4e:	b508      	push	{r3, lr}
	interrupted = 1;
24003b50:	4b0b      	ldr	r3, [pc, #44]	; (24003b80 <HAL_SPI_TxRxHalfCpltCallback+0x38>)
24003b52:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
24003b54:	f004 fb30 	bl	240081b8 <HAL_GPIO_WritePin>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
24003b58:	4b0a      	ldr	r3, [pc, #40]	; (24003b84 <HAL_SPI_TxRxHalfCpltCallback+0x3c>)
24003b5a:	7f9a      	ldrb	r2, [r3, #30]
24003b5c:	2afe      	cmp	r2, #254	; 0xfe
24003b5e:	d006      	beq.n	24003b6e <HAL_SPI_TxRxHalfCpltCallback+0x26>
	{
		handleSPI(0);
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
24003b60:	2200      	movs	r2, #0
24003b62:	2110      	movs	r1, #16
24003b64:	4805      	ldr	r0, [pc, #20]	; (24003b7c <HAL_SPI_TxRxHalfCpltCallback+0x34>)
}
24003b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
24003b6a:	f004 bb25 	b.w	240081b8 <HAL_GPIO_WritePin>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
24003b6e:	7fdb      	ldrb	r3, [r3, #31]
24003b70:	2bfd      	cmp	r3, #253	; 0xfd
24003b72:	d1f5      	bne.n	24003b60 <HAL_SPI_TxRxHalfCpltCallback+0x18>
		handleSPI(0);
24003b74:	2000      	movs	r0, #0
24003b76:	f032 fa0b 	bl	24035f90 <__handleSPI_veneer>
24003b7a:	e7f1      	b.n	24003b60 <HAL_SPI_TxRxHalfCpltCallback+0x18>
24003b7c:	58020800 	.word	0x58020800
24003b80:	20005154 	.word	0x20005154
24003b84:	30000400 	.word	0x30000400

24003b88 <HAL_SAI_ErrorCallback>:
	audioFrame(0);
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
24003b88:	4770      	bx	lr
24003b8a:	bf00      	nop

24003b8c <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24003b8c:	4b0c      	ldr	r3, [pc, #48]	; (24003bc0 <MX_BDMA_Init+0x34>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 4, 0);
24003b8e:	2081      	movs	r0, #129	; 0x81
24003b90:	2200      	movs	r2, #0
24003b92:	2104      	movs	r1, #4
{
24003b94:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
24003b96:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24003b9a:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24003b9c:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24003ba0:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24003ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24003bac:	9301      	str	r3, [sp, #4]
24003bae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 4, 0);
24003bb0:	f002 fab8 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24003bb4:	2081      	movs	r0, #129	; 0x81

}
24003bb6:	b002      	add	sp, #8
24003bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24003bbc:	f002 baf0 	b.w	240061a0 <HAL_NVIC_EnableIRQ>
24003bc0:	58024400 	.word	0x58024400

24003bc4 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24003bc4:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
24003bc6:	231e      	movs	r3, #30
{
24003bc8:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003bca:	25fa      	movs	r5, #250	; 0xfa
24003bcc:	2134      	movs	r1, #52	; 0x34
24003bce:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24003bd0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003bd4:	9500      	str	r5, [sp, #0]
24003bd6:	2302      	movs	r3, #2
{
24003bd8:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003bda:	f004 fc25 	bl	24008428 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24003bde:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24003be0:	260a      	movs	r6, #10
    HAL_Delay(10);
24003be2:	f002 fa75 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003be6:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003bea:	2302      	movs	r3, #2
24003bec:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003bee:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003bf2:	4620      	mov	r0, r4
24003bf4:	aa03      	add	r2, sp, #12
24003bf6:	9500      	str	r5, [sp, #0]
24003bf8:	f004 fc16 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003bfc:	200a      	movs	r0, #10
24003bfe:	f002 fa67 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003c02:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c06:	2302      	movs	r3, #2
24003c08:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003c0a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c0e:	4620      	mov	r0, r4
24003c10:	aa03      	add	r2, sp, #12
24003c12:	9500      	str	r5, [sp, #0]
24003c14:	f004 fc08 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c18:	200a      	movs	r0, #10
24003c1a:	f002 fa59 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003c1e:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c20:	2302      	movs	r3, #2
24003c22:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003c24:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c28:	4620      	mov	r0, r4
24003c2a:	aa03      	add	r2, sp, #12
24003c2c:	9500      	str	r5, [sp, #0]
24003c2e:	f004 fbfb 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c32:	200a      	movs	r0, #10
24003c34:	f002 fa4c 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003c38:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c3a:	2302      	movs	r3, #2
24003c3c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003c3e:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c42:	4620      	mov	r0, r4
24003c44:	aa03      	add	r2, sp, #12
24003c46:	9500      	str	r5, [sp, #0]
24003c48:	f004 fbee 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c4c:	200a      	movs	r0, #10
24003c4e:	f002 fa3f 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003c52:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c56:	2302      	movs	r3, #2
24003c58:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003c5a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c5e:	4620      	mov	r0, r4
24003c60:	aa03      	add	r2, sp, #12
24003c62:	9500      	str	r5, [sp, #0]
24003c64:	f004 fbe0 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c68:	4630      	mov	r0, r6
24003c6a:	f002 fa31 	bl	240060d0 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c6e:	aa03      	add	r2, sp, #12
24003c70:	2302      	movs	r3, #2
24003c72:	2134      	movs	r1, #52	; 0x34
24003c74:	4620      	mov	r0, r4
24003c76:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24003c78:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c7c:	f004 fbd4 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c80:	4630      	mov	r0, r6
24003c82:	f002 fa25 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003c86:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c8a:	aa03      	add	r2, sp, #12
24003c8c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003c8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003c92:	4620      	mov	r0, r4
24003c94:	2302      	movs	r3, #2
24003c96:	9500      	str	r5, [sp, #0]
24003c98:	f004 fbc6 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003c9c:	4630      	mov	r0, r6
24003c9e:	f002 fa17 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003ca2:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003ca6:	aa03      	add	r2, sp, #12
24003ca8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003caa:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cae:	4620      	mov	r0, r4
24003cb0:	2302      	movs	r3, #2
24003cb2:	9500      	str	r5, [sp, #0]
24003cb4:	f004 fbb8 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003cb8:	4630      	mov	r0, r6
24003cba:	f002 fa09 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003cbe:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cc0:	aa03      	add	r2, sp, #12
24003cc2:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003cc4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cc8:	4620      	mov	r0, r4
24003cca:	2302      	movs	r3, #2
24003ccc:	9500      	str	r5, [sp, #0]
24003cce:	f004 fbab 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003cd2:	4630      	mov	r0, r6
24003cd4:	f002 f9fc 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003cd8:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cda:	aa03      	add	r2, sp, #12
24003cdc:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003cde:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003ce2:	4620      	mov	r0, r4
24003ce4:	2302      	movs	r3, #2
24003ce6:	9500      	str	r5, [sp, #0]
24003ce8:	f004 fb9e 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003cec:	4630      	mov	r0, r6
24003cee:	f002 f9ef 	bl	240060d0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003cf2:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cf6:	aa03      	add	r2, sp, #12
24003cf8:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24003cfa:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003cfe:	4620      	mov	r0, r4
24003d00:	2134      	movs	r1, #52	; 0x34
24003d02:	9500      	str	r5, [sp, #0]
24003d04:	f004 fb90 	bl	24008428 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003d08:	4630      	mov	r0, r6
24003d0a:	f002 f9e1 	bl	240060d0 <HAL_Delay>
}
24003d0e:	b004      	add	sp, #16
24003d10:	bd70      	pop	{r4, r5, r6, pc}
24003d12:	bf00      	nop

24003d14 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24003d14:	4b24      	ldr	r3, [pc, #144]	; (24003da8 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
24003d16:	2200      	movs	r2, #0
24003d18:	2103      	movs	r1, #3
24003d1a:	200b      	movs	r0, #11
{
24003d1c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24003d1e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24003d22:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24003d24:	f044 0401 	orr.w	r4, r4, #1
24003d28:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24003d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24003d30:	f003 0301 	and.w	r3, r3, #1
24003d34:	9301      	str	r3, [sp, #4]
24003d36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
24003d38:	f002 f9f4 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24003d3c:	200b      	movs	r0, #11
24003d3e:	f002 fa2f 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
24003d42:	2200      	movs	r2, #0
24003d44:	2104      	movs	r1, #4
24003d46:	200c      	movs	r0, #12
24003d48:	f002 f9ec 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24003d4c:	200c      	movs	r0, #12
24003d4e:	f002 fa27 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 4, 0);
24003d52:	2200      	movs	r2, #0
24003d54:	2104      	movs	r1, #4
24003d56:	200d      	movs	r0, #13
24003d58:	f002 f9e4 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24003d5c:	200d      	movs	r0, #13
24003d5e:	f002 fa1f 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
24003d62:	2200      	movs	r2, #0
24003d64:	2101      	movs	r1, #1
24003d66:	200e      	movs	r0, #14
24003d68:	f002 f9dc 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24003d6c:	200e      	movs	r0, #14
24003d6e:	f002 fa17 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
24003d72:	2200      	movs	r2, #0
24003d74:	2101      	movs	r1, #1
24003d76:	200f      	movs	r0, #15
24003d78:	f002 f9d4 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24003d7c:	200f      	movs	r0, #15
24003d7e:	f002 fa0f 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
24003d82:	2200      	movs	r2, #0
24003d84:	2103      	movs	r1, #3
24003d86:	2011      	movs	r0, #17
24003d88:	f002 f9cc 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24003d8c:	2011      	movs	r0, #17
24003d8e:	f002 fa07 	bl	240061a0 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
24003d92:	2066      	movs	r0, #102	; 0x66
24003d94:	2200      	movs	r2, #0
24003d96:	2105      	movs	r1, #5
24003d98:	f002 f9c4 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24003d9c:	2066      	movs	r0, #102	; 0x66

}
24003d9e:	b002      	add	sp, #8
24003da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24003da4:	f002 b9fc 	b.w	240061a0 <HAL_NVIC_EnableIRQ>
24003da8:	58024400 	.word	0x58024400
24003dac:	00000000 	.word	0x00000000

24003db0 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003db0:	481b      	ldr	r0, [pc, #108]	; (24003e20 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24003db2:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24003db4:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24003db6:	2108      	movs	r1, #8
{
24003db8:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003dba:	4c1a      	ldr	r4, [pc, #104]	; (24003e24 <MX_FMC_Init+0x74>)
{
24003dbc:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24003dbe:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24003dc0:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24003dc2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24003dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24003dc8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24003dca:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24003dce:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
24003dd0:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003dd2:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
24003dd6:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24003dd8:	2308      	movs	r3, #8
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24003dda:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24003dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 8;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 10;
24003de2:	240a      	movs	r4, #10
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24003de4:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
24003de8:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24003dea:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 10;
24003dec:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
24003dee:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24003e18 <MX_FMC_Init+0x68>
24003df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003df6:	2203      	movs	r2, #3
24003df8:	2310      	movs	r3, #16
24003dfa:	ed8d 7b00 	vstr	d7, [sp]
24003dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24003e02:	f009 fd15 	bl	2400d830 <HAL_SDRAM_Init>
24003e06:	b908      	cbnz	r0, 24003e0c <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24003e08:	b008      	add	sp, #32
24003e0a:	bd10      	pop	{r4, pc}
    Error_Handler( );
24003e0c:	f001 fbcc 	bl	240055a8 <Error_Handler>
}
24003e10:	b008      	add	sp, #32
24003e12:	bd10      	pop	{r4, pc}
24003e14:	f3af 8000 	nop.w
24003e18:	00000002 	.word	0x00000002
24003e1c:	00000007 	.word	0x00000007
24003e20:	20017aac 	.word	0x20017aac
24003e24:	52004140 	.word	0x52004140

24003e28 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24003e28:	4b31      	ldr	r3, [pc, #196]	; (24003ef0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003e2a:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24003e2c:	b5d0      	push	{r4, r6, r7, lr}
24003e2e:	b088      	sub	sp, #32
  if (FMC_Initialized) {
24003e30:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003e32:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24003e34:	2a00      	cmp	r2, #0
24003e36:	d159      	bne.n	24003eec <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24003e38:	4a2e      	ldr	r2, [pc, #184]	; (24003ef4 <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24003e3a:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003e3c:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003e40:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24003e42:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003e44:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24003e46:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003e4a:	2600      	movs	r6, #0
24003e4c:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24003e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24003e52:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24003e56:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003e5a:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24003e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24003e60:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24003e62:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24003e64:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24003e66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e6c:	a902      	add	r1, sp, #8
24003e6e:	4822      	ldr	r0, [pc, #136]	; (24003ef8 <HAL_SDRAM_MspInit+0xd0>)
24003e70:	f004 f852 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003e74:	f248 1237 	movw	r2, #33079	; 0x8137
24003e78:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003e7a:	a902      	add	r1, sp, #8
24003e7c:	481f      	ldr	r0, [pc, #124]	; (24003efc <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003e7e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003e84:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003e88:	f004 f846 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24003e8c:	f24c 7203 	movw	r2, #50947	; 0xc703
24003e90:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003e92:	a902      	add	r1, sp, #8
24003e94:	481a      	ldr	r0, [pc, #104]	; (24003f00 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003e96:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24003e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003e9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003ea0:	f004 f83a 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24003ea4:	f240 62ff 	movw	r2, #1791	; 0x6ff
24003ea8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003eaa:	a902      	add	r1, sp, #8
24003eac:	4815      	ldr	r0, [pc, #84]	; (24003f04 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003eae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24003eb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003eb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003eb8:	f004 f82e 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24003ebc:	f64f 722c 	movw	r2, #65324	; 0xff2c
24003ec0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003ec2:	a902      	add	r1, sp, #8
24003ec4:	4810      	ldr	r0, [pc, #64]	; (24003f08 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003ec6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24003ec8:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003ecc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003ed0:	f004 f822 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24003ed4:	f64f 023f 	movw	r2, #63551	; 0xf83f
24003ed8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24003eda:	a902      	add	r1, sp, #8
24003edc:	480b      	ldr	r0, [pc, #44]	; (24003f0c <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003ede:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24003ee0:	e9cd 6704 	strd	r6, r7, [sp, #16]
24003ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24003ee8:	f004 f816 	bl	24007f18 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24003eec:	b008      	add	sp, #32
24003eee:	bdd0      	pop	{r4, r6, r7, pc}
24003ef0:	20017aa8 	.word	0x20017aa8
24003ef4:	58024400 	.word	0x58024400
24003ef8:	58021000 	.word	0x58021000
24003efc:	58021800 	.word	0x58021800
24003f00:	58020c00 	.word	0x58020c00
24003f04:	58022000 	.word	0x58022000
24003f08:	58021c00 	.word	0x58021c00
24003f0c:	58021400 	.word	0x58021400

24003f10 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24003f14:	4bb4      	ldr	r3, [pc, #720]	; (240041e8 <MX_GPIO_Init+0x2d8>)
{
24003f16:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003f18:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
24003f1a:	4db4      	ldr	r5, [pc, #720]	; (240041ec <MX_GPIO_Init+0x2dc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24003f1c:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 24004200 <MX_GPIO_Init+0x2f0>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
24003f20:	21c2      	movs	r1, #194	; 0xc2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003f22:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
24003f24:	4628      	mov	r0, r5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24003f26:	4eb2      	ldr	r6, [pc, #712]	; (240041f0 <MX_GPIO_Init+0x2e0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG14 PG13 PG12 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7;
24003f28:	f44f 48e1 	mov.w	r8, #28800	; 0x7080
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24003f2c:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 24004204 <MX_GPIO_Init+0x2f4>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7;
24003f30:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24003f34:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003f36:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24003f3a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24003f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f42:	f042 0210 	orr.w	r2, r2, #16
24003f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003f4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f4e:	f002 0210 	and.w	r2, r2, #16
24003f52:	9201      	str	r2, [sp, #4]
24003f54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24003f56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f5a:	f042 0202 	orr.w	r2, r2, #2
24003f5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003f62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f66:	f002 0202 	and.w	r2, r2, #2
24003f6a:	9202      	str	r2, [sp, #8]
24003f6c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24003f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003f76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003f7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
24003f82:	9203      	str	r2, [sp, #12]
24003f84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24003f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f8a:	f042 0208 	orr.w	r2, r2, #8
24003f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003f92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003f96:	f002 0208 	and.w	r2, r2, #8
24003f9a:	9204      	str	r2, [sp, #16]
24003f9c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24003f9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fa2:	f042 0204 	orr.w	r2, r2, #4
24003fa6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fae:	f002 0204 	and.w	r2, r2, #4
24003fb2:	9205      	str	r2, [sp, #20]
24003fb4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24003fb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fba:	f042 0201 	orr.w	r2, r2, #1
24003fbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003fc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fc6:	f002 0201 	and.w	r2, r2, #1
24003fca:	9206      	str	r2, [sp, #24]
24003fcc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24003fce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24003fd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003fda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fde:	f402 7280 	and.w	r2, r2, #256	; 0x100
24003fe2:	9207      	str	r2, [sp, #28]
24003fe4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24003fe6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24003fee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003ff2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003ff6:	f002 0280 	and.w	r2, r2, #128	; 0x80
24003ffa:	9208      	str	r2, [sp, #32]
24003ffc:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24003ffe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004002:	f042 0220 	orr.w	r2, r2, #32
24004006:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
2400400a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
2400400c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24004010:	f003 0320 	and.w	r3, r3, #32
24004014:	9309      	str	r3, [sp, #36]	; 0x24
24004016:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
24004018:	f004 f8ce 	bl	240081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
2400401c:	4622      	mov	r2, r4
2400401e:	4650      	mov	r0, sl
24004020:	f44f 7100 	mov.w	r1, #512	; 0x200
24004024:	f004 f8c8 	bl	240081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24004028:	4b72      	ldr	r3, [pc, #456]	; (240041f4 <MX_GPIO_Init+0x2e4>)
2400402a:	4622      	mov	r2, r4
2400402c:	2193      	movs	r1, #147	; 0x93
2400402e:	4618      	mov	r0, r3
24004030:	f004 f8c2 	bl	240081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24004034:	4622      	mov	r2, r4
24004036:	4630      	mov	r0, r6
24004038:	2149      	movs	r1, #73	; 0x49
2400403a:	f004 f8bd 	bl	240081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
2400403e:	4622      	mov	r2, r4
24004040:	4658      	mov	r0, fp
24004042:	f44f 6100 	mov.w	r1, #2048	; 0x800
24004046:	f004 f8b7 	bl	240081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400404a:	a90a      	add	r1, sp, #40	; 0x28
2400404c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400404e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7;
24004050:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24004054:	f243 08f8 	movw	r8, #12536	; 0x30f8
24004058:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400405c:	f003 ff5c 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004060:	a90a      	add	r1, sp, #40	; 0x28
24004062:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24004064:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24004066:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
2400406a:	f44f 481f 	mov.w	r8, #40704	; 0x9f00
2400406e:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004072:	f003 ff51 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004076:	a90a      	add	r1, sp, #40	; 0x28
24004078:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400407a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
2400407c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004080:	f003 ff4a 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1;
24004084:	f04f 0800 	mov.w	r8, #0
24004088:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400408c:	a90a      	add	r1, sp, #40	; 0x28
2400408e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1;
24004090:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 240041c8 <MX_GPIO_Init+0x2b8>
24004094:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24004098:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400409c:	f003 ff3c 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240040a0:	a90a      	add	r1, sp, #40	; 0x28
240040a2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_9;
240040a4:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 240041d0 <MX_GPIO_Init+0x2c0>
240040a8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
240040ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240040b0:	f003 ff32 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040b4:	4b4f      	ldr	r3, [pc, #316]	; (240041f4 <MX_GPIO_Init+0x2e4>)
240040b6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240040b8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040ba:	4618      	mov	r0, r3
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240040bc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 240041d8 <MX_GPIO_Init+0x2c8>
240040c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040c4:	f003 ff28 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240040c8:	a90a      	add	r1, sp, #40	; 0x28
240040ca:	484b      	ldr	r0, [pc, #300]	; (240041f8 <MX_GPIO_Init+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240040cc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
240040ce:	ed9f 7b44 	vldr	d7, [pc, #272]	; 240041e0 <MX_GPIO_Init+0x2d0>
240040d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240040d6:	f003 ff1f 	bl	24007f18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040da:	4b46      	ldr	r3, [pc, #280]	; (240041f4 <MX_GPIO_Init+0x2e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
240040dc:	2293      	movs	r2, #147	; 0x93
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040de:	a90a      	add	r1, sp, #40	; 0x28
240040e0:	4618      	mov	r0, r3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
240040e2:	2301      	movs	r3, #1
240040e4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
240040e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040ec:	f003 ff14 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
240040f0:	2208      	movs	r2, #8
240040f2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240040f6:	4650      	mov	r0, sl
240040f8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240040fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
240040fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004100:	f003 ff0a 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24004104:	f242 4205 	movw	r2, #9221	; 0x2405
24004108:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400410a:	a90a      	add	r1, sp, #40	; 0x28
2400410c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400410e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24004110:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004114:	f003 ff00 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24004118:	22c0      	movs	r2, #192	; 0xc0
2400411a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400411c:	a90a      	add	r1, sp, #40	; 0x28
2400411e:	4837      	ldr	r0, [pc, #220]	; (240041fc <MX_GPIO_Init+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24004120:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24004122:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24004126:	f003 fef7 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
2400412a:	2202      	movs	r2, #2
2400412c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400412e:	a90a      	add	r1, sp, #40	; 0x28
24004130:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24004132:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24004134:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004138:	f003 feee 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
2400413c:	2249      	movs	r2, #73	; 0x49
2400413e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004140:	a90a      	add	r1, sp, #40	; 0x28
24004142:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24004144:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24004148:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400414c:	f003 fee4 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24004150:	f44f 6200 	mov.w	r2, #2048	; 0x800
24004154:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004156:	4658      	mov	r0, fp
24004158:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
2400415a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
2400415e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004162:	f003 fed9 	bl	24007f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24004166:	2204      	movs	r2, #4
24004168:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400416a:	4630      	mov	r0, r6
2400416c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
2400416e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24004170:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004174:	f003 fed0 	bl	24007f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24004178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400417c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004180:	a90a      	add	r1, sp, #40	; 0x28
24004182:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24004184:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24004186:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400418a:	f003 fec5 	bl	24007f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
2400418e:	2300      	movs	r3, #0
24004190:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004194:	4628      	mov	r0, r5
24004196:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24004198:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
2400419a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400419e:	f003 febb 	bl	24007f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
240041a2:	4622      	mov	r2, r4
240041a4:	4639      	mov	r1, r7
240041a6:	2009      	movs	r0, #9
240041a8:	f001 ffbc 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
240041ac:	2009      	movs	r0, #9
240041ae:	f001 fff7 	bl	240061a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
240041b2:	4622      	mov	r2, r4
240041b4:	4639      	mov	r1, r7
240041b6:	2028      	movs	r0, #40	; 0x28
240041b8:	f001 ffb4 	bl	24006124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
240041bc:	2028      	movs	r0, #40	; 0x28
240041be:	f001 ffef 	bl	240061a0 <HAL_NVIC_EnableIRQ>

}
240041c2:	b011      	add	sp, #68	; 0x44
240041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240041c8:	000000c2 	.word	0x000000c2
240041cc:	00000001 	.word	0x00000001
240041d0:	00000200 	.word	0x00000200
240041d4:	00000001 	.word	0x00000001
240041d8:	0000e06c 	.word	0x0000e06c
240041dc:	00000003 	.word	0x00000003
240041e0:	00000900 	.word	0x00000900
240041e4:	00000003 	.word	0x00000003
240041e8:	58024400 	.word	0x58024400
240041ec:	58020400 	.word	0x58020400
240041f0:	58020000 	.word	0x58020000
240041f4:	58020800 	.word	0x58020800
240041f8:	58022000 	.word	0x58022000
240041fc:	58021c00 	.word	0x58021c00
24004200:	58021800 	.word	0x58021800
24004204:	58020c00 	.word	0x58020c00

24004208 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24004208:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
2400420a:	4819      	ldr	r0, [pc, #100]	; (24004270 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x307075B1;
  hi2c1.Init.OwnAddress1 = 0;
2400420c:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x307075B1;
2400420e:	4a19      	ldr	r2, [pc, #100]	; (24004274 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24004210:	2101      	movs	r1, #1
  hi2c1.Instance = I2C1;
24004212:	4c19      	ldr	r4, [pc, #100]	; (24004278 <MX_I2C1_Init+0x70>)
  hi2c1.Init.OwnAddress1 = 0;
24004214:	6083      	str	r3, [r0, #8]
  hi2c1.Init.Timing = 0x307075B1;
24004216:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
2400421a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
2400421e:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
24004222:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24004226:	e9c0 2307 	strd	r2, r3, [r0, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
2400422a:	f004 f89f 	bl	2400836c <HAL_I2C_Init>
2400422e:	b950      	cbnz	r0, 24004246 <MX_I2C1_Init+0x3e>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24004230:	2100      	movs	r1, #0
24004232:	480f      	ldr	r0, [pc, #60]	; (24004270 <MX_I2C1_Init+0x68>)
24004234:	f005 fb24 	bl	24009880 <HAL_I2CEx_ConfigAnalogFilter>
24004238:	b968      	cbnz	r0, 24004256 <MX_I2C1_Init+0x4e>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
2400423a:	2100      	movs	r1, #0
2400423c:	480c      	ldr	r0, [pc, #48]	; (24004270 <MX_I2C1_Init+0x68>)
2400423e:	f005 fb53 	bl	240098e8 <HAL_I2CEx_ConfigDigitalFilter>
24004242:	b980      	cbnz	r0, 24004266 <MX_I2C1_Init+0x5e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24004244:	bd10      	pop	{r4, pc}
    Error_Handler();
24004246:	f001 f9af 	bl	240055a8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
2400424a:	2100      	movs	r1, #0
2400424c:	4808      	ldr	r0, [pc, #32]	; (24004270 <MX_I2C1_Init+0x68>)
2400424e:	f005 fb17 	bl	24009880 <HAL_I2CEx_ConfigAnalogFilter>
24004252:	2800      	cmp	r0, #0
24004254:	d0f1      	beq.n	2400423a <MX_I2C1_Init+0x32>
    Error_Handler();
24004256:	f001 f9a7 	bl	240055a8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
2400425a:	2100      	movs	r1, #0
2400425c:	4804      	ldr	r0, [pc, #16]	; (24004270 <MX_I2C1_Init+0x68>)
2400425e:	f005 fb43 	bl	240098e8 <HAL_I2CEx_ConfigDigitalFilter>
24004262:	2800      	cmp	r0, #0
24004264:	d0ee      	beq.n	24004244 <MX_I2C1_Init+0x3c>
}
24004266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
2400426a:	f001 b99d 	b.w	240055a8 <Error_Handler>
2400426e:	bf00      	nop
24004270:	20017bd0 	.word	0x20017bd0
24004274:	307075b1 	.word	0x307075b1
24004278:	40005400 	.word	0x40005400

2400427c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
2400427c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
2400427e:	4817      	ldr	r0, [pc, #92]	; (240042dc <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24004280:	2300      	movs	r3, #0
24004282:	4917      	ldr	r1, [pc, #92]	; (240042e0 <MX_I2C2_Init+0x64>)
24004284:	2401      	movs	r4, #1
24004286:	4a17      	ldr	r2, [pc, #92]	; (240042e4 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24004288:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
2400428a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
2400428e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24004292:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24004296:	f004 f869 	bl	2400836c <HAL_I2C_Init>
2400429a:	b950      	cbnz	r0, 240042b2 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
2400429c:	2100      	movs	r1, #0
2400429e:	480f      	ldr	r0, [pc, #60]	; (240042dc <MX_I2C2_Init+0x60>)
240042a0:	f005 faee 	bl	24009880 <HAL_I2CEx_ConfigAnalogFilter>
240042a4:	b968      	cbnz	r0, 240042c2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240042a6:	2100      	movs	r1, #0
240042a8:	480c      	ldr	r0, [pc, #48]	; (240042dc <MX_I2C2_Init+0x60>)
240042aa:	f005 fb1d 	bl	240098e8 <HAL_I2CEx_ConfigDigitalFilter>
240042ae:	b980      	cbnz	r0, 240042d2 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
240042b0:	bd10      	pop	{r4, pc}
    Error_Handler();
240042b2:	f001 f979 	bl	240055a8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240042b6:	2100      	movs	r1, #0
240042b8:	4808      	ldr	r0, [pc, #32]	; (240042dc <MX_I2C2_Init+0x60>)
240042ba:	f005 fae1 	bl	24009880 <HAL_I2CEx_ConfigAnalogFilter>
240042be:	2800      	cmp	r0, #0
240042c0:	d0f1      	beq.n	240042a6 <MX_I2C2_Init+0x2a>
    Error_Handler();
240042c2:	f001 f971 	bl	240055a8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240042c6:	2100      	movs	r1, #0
240042c8:	4804      	ldr	r0, [pc, #16]	; (240042dc <MX_I2C2_Init+0x60>)
240042ca:	f005 fb0d 	bl	240098e8 <HAL_I2CEx_ConfigDigitalFilter>
240042ce:	2800      	cmp	r0, #0
240042d0:	d0ee      	beq.n	240042b0 <MX_I2C2_Init+0x34>
}
240042d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240042d6:	f001 b967 	b.w	240055a8 <Error_Handler>
240042da:	bf00      	nop
240042dc:	20017c24 	.word	0x20017c24
240042e0:	40005800 	.word	0x40005800
240042e4:	00b03fdb 	.word	0x00b03fdb

240042e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
240042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
240042ea:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240042ec:	2100      	movs	r1, #0
{
240042ee:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240042f0:	22c0      	movs	r2, #192	; 0xc0
240042f2:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240042f4:	910a      	str	r1, [sp, #40]	; 0x28
240042f6:	e9cd 1106 	strd	r1, r1, [sp, #24]
240042fa:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240042fe:	f016 fb7b 	bl	2401a9f8 <memset>
  if(i2cHandle->Instance==I2C1)
24004302:	6823      	ldr	r3, [r4, #0]
24004304:	4a76      	ldr	r2, [pc, #472]	; (240044e0 <HAL_I2C_MspInit+0x1f8>)
24004306:	4293      	cmp	r3, r2
24004308:	d005      	beq.n	24004316 <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
2400430a:	4a76      	ldr	r2, [pc, #472]	; (240044e4 <HAL_I2C_MspInit+0x1fc>)
2400430c:	4293      	cmp	r3, r2
2400430e:	f000 8081 	beq.w	24004414 <HAL_I2C_MspInit+0x12c>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24004312:	b03d      	add	sp, #244	; 0xf4
24004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24004316:	2208      	movs	r2, #8
24004318:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400431a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
2400431c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004320:	f006 fa5c 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
24004324:	2800      	cmp	r0, #0
24004326:	f040 80d5 	bne.w	240044d4 <HAL_I2C_MspInit+0x1ec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400432a:	4d6f      	ldr	r5, [pc, #444]	; (240044e8 <HAL_I2C_MspInit+0x200>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400432c:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24004330:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004332:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004334:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24004338:	4e6c      	ldr	r6, [pc, #432]	; (240044ec <HAL_I2C_MspInit+0x204>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400433a:	f043 0302 	orr.w	r3, r3, #2
2400433e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24004342:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24004346:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004348:	f003 0302 	and.w	r3, r3, #2
2400434c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400434e:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004350:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004352:	4867      	ldr	r0, [pc, #412]	; (240044f0 <HAL_I2C_MspInit+0x208>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24004354:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004358:	2200      	movs	r2, #0
2400435a:	2301      	movs	r3, #1
2400435c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004360:	f003 fdda 	bl	24007f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24004364:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24004368:	4a62      	ldr	r2, [pc, #392]	; (240044f4 <HAL_I2C_MspInit+0x20c>)
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
2400436a:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
2400436c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004370:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24004372:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24004376:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Instance = DMA1_Stream3;
2400437a:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
2400437c:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
2400437e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24004382:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004384:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24004388:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400438a:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
2400438c:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400438e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    __HAL_RCC_I2C1_CLK_ENABLE();
24004392:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
24004394:	61f3      	str	r3, [r6, #28]
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24004396:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004398:	6232      	str	r2, [r6, #32]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
2400439a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400439e:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240043a2:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
240043a6:	f002 f879 	bl	2400649c <HAL_DMA_Init>
240043aa:	2800      	cmp	r0, #0
240043ac:	f040 808f 	bne.w	240044ce <HAL_I2C_MspInit+0x1e6>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240043b0:	4d51      	ldr	r5, [pc, #324]	; (240044f8 <HAL_I2C_MspInit+0x210>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240043b2:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240043b4:	4951      	ldr	r1, [pc, #324]	; (240044fc <HAL_I2C_MspInit+0x214>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043b6:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240043b8:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
240043ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240043be:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240043c0:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
240043c2:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240043c4:	2204      	movs	r2, #4
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240043c6:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043c8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
240043cc:	4628      	mov	r0, r5
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
240043ce:	63e6      	str	r6, [r4, #60]	; 0x3c
240043d0:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043d2:	60eb      	str	r3, [r5, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240043d4:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240043d6:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043d8:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240043dc:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240043e0:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
240043e4:	f002 f85a 	bl	2400649c <HAL_DMA_Init>
240043e8:	2800      	cmp	r0, #0
240043ea:	d16d      	bne.n	240044c8 <HAL_I2C_MspInit+0x1e0>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240043ec:	2200      	movs	r2, #0
240043ee:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
240043f0:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240043f2:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
240043f4:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240043f6:	f001 fe95 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
240043fa:	201f      	movs	r0, #31
240043fc:	f001 fed0 	bl	240061a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24004400:	2200      	movs	r2, #0
24004402:	2101      	movs	r1, #1
24004404:	2020      	movs	r0, #32
24004406:	f001 fe8d 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
2400440a:	2020      	movs	r0, #32
2400440c:	f001 fec8 	bl	240061a0 <HAL_NVIC_EnableIRQ>
}
24004410:	b03d      	add	sp, #244	; 0xf4
24004412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24004414:	2208      	movs	r2, #8
24004416:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004418:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400441a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400441e:	f006 f9dd 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
24004422:	2800      	cmp	r0, #0
24004424:	d159      	bne.n	240044da <HAL_I2C_MspInit+0x1f2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24004426:	4c30      	ldr	r4, [pc, #192]	; (240044e8 <HAL_I2C_MspInit+0x200>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24004428:	2010      	movs	r0, #16
2400442a:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400442c:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400442e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24004432:	2600      	movs	r6, #0
24004434:	2701      	movs	r7, #1
    __HAL_RCC_GPIOH_CLK_ENABLE();
24004436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400443a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400443e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
24004446:	9303      	str	r3, [sp, #12]
24004448:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400444a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400444e:	f043 0302 	orr.w	r3, r3, #2
24004452:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24004456:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400445a:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400445c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24004460:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004464:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24004466:	a906      	add	r1, sp, #24
24004468:	4825      	ldr	r0, [pc, #148]	; (24004500 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400446a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400446c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24004470:	f003 fd52 	bl	24007f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24004474:	f44f 6200 	mov.w	r2, #2048	; 0x800
24004478:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400447a:	a906      	add	r1, sp, #24
2400447c:	481c      	ldr	r0, [pc, #112]	; (240044f0 <HAL_I2C_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400447e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24004480:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004484:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004488:	f003 fd46 	bl	24007f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
2400448c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24004490:	2200      	movs	r2, #0
24004492:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
24004494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24004498:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
2400449a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
2400449e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240044a6:	9305      	str	r3, [sp, #20]
240044a8:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240044aa:	f001 fe3b 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
240044ae:	2021      	movs	r0, #33	; 0x21
240044b0:	f001 fe76 	bl	240061a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
240044b4:	2200      	movs	r2, #0
240044b6:	2101      	movs	r1, #1
240044b8:	2022      	movs	r0, #34	; 0x22
240044ba:	f001 fe33 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
240044be:	2022      	movs	r0, #34	; 0x22
240044c0:	f001 fe6e 	bl	240061a0 <HAL_NVIC_EnableIRQ>
}
240044c4:	b03d      	add	sp, #244	; 0xf4
240044c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240044c8:	f001 f86e 	bl	240055a8 <Error_Handler>
240044cc:	e78e      	b.n	240043ec <HAL_I2C_MspInit+0x104>
      Error_Handler();
240044ce:	f001 f86b 	bl	240055a8 <Error_Handler>
240044d2:	e76d      	b.n	240043b0 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
240044d4:	f001 f868 	bl	240055a8 <Error_Handler>
240044d8:	e727      	b.n	2400432a <HAL_I2C_MspInit+0x42>
      Error_Handler();
240044da:	f001 f865 	bl	240055a8 <Error_Handler>
240044de:	e7a2      	b.n	24004426 <HAL_I2C_MspInit+0x13e>
240044e0:	40005400 	.word	0x40005400
240044e4:	40005800 	.word	0x40005800
240044e8:	58024400 	.word	0x58024400
240044ec:	20017ae0 	.word	0x20017ae0
240044f0:	58020400 	.word	0x58020400
240044f4:	40020058 	.word	0x40020058
240044f8:	20017b58 	.word	0x20017b58
240044fc:	40020070 	.word	0x40020070
24004500:	58021c00 	.word	0x58021c00

24004504 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
24004504:	4770      	bx	lr
24004506:	bf00      	nop

24004508 <SystemClock_Config>:
{
24004508:	b500      	push	{lr}
2400450a:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2400450c:	224c      	movs	r2, #76	; 0x4c
2400450e:	2100      	movs	r1, #0
24004510:	a80c      	add	r0, sp, #48	; 0x30
24004512:	f016 fa71 	bl	2401a9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24004516:	2220      	movs	r2, #32
24004518:	2100      	movs	r1, #0
2400451a:	a804      	add	r0, sp, #16
2400451c:	f016 fa6c 	bl	2401a9f8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24004520:	2002      	movs	r0, #2
24004522:	f005 fa13 	bl	2400994c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24004526:	4b40      	ldr	r3, [pc, #256]	; (24004628 <SystemClock_Config+0x120>)
24004528:	2100      	movs	r1, #0
2400452a:	4a40      	ldr	r2, [pc, #256]	; (2400462c <SystemClock_Config+0x124>)
2400452c:	9101      	str	r1, [sp, #4]
2400452e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24004530:	f021 0101 	bic.w	r1, r1, #1
24004534:	62d9      	str	r1, [r3, #44]	; 0x2c
24004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004538:	f003 0301 	and.w	r3, r3, #1
2400453c:	9301      	str	r3, [sp, #4]
2400453e:	6993      	ldr	r3, [r2, #24]
24004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24004544:	6193      	str	r3, [r2, #24]
24004546:	6993      	ldr	r3, [r2, #24]
24004548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2400454c:	9301      	str	r3, [sp, #4]
2400454e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24004550:	6993      	ldr	r3, [r2, #24]
24004552:	0499      	lsls	r1, r3, #18
24004554:	d5fc      	bpl.n	24004550 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004556:	4b36      	ldr	r3, [pc, #216]	; (24004630 <SystemClock_Config+0x128>)
24004558:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
2400455c:	f041 0102 	orr.w	r1, r1, #2
24004560:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24004564:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400456a:	f003 0302 	and.w	r3, r3, #2
2400456e:	9302      	str	r3, [sp, #8]
24004570:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24004572:	9103      	str	r1, [sp, #12]
24004574:	6991      	ldr	r1, [r2, #24]
24004576:	4b2c      	ldr	r3, [pc, #176]	; (24004628 <SystemClock_Config+0x120>)
24004578:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
2400457c:	6191      	str	r1, [r2, #24]
2400457e:	6992      	ldr	r2, [r2, #24]
24004580:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
24004584:	9203      	str	r2, [sp, #12]
24004586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24004588:	4a28      	ldr	r2, [pc, #160]	; (2400462c <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400458a:	f041 0101 	orr.w	r1, r1, #1
2400458e:	62d9      	str	r1, [r3, #44]	; 0x2c
24004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004592:	f003 0301 	and.w	r3, r3, #1
24004596:	9303      	str	r3, [sp, #12]
24004598:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
2400459a:	6993      	ldr	r3, [r2, #24]
2400459c:	049b      	lsls	r3, r3, #18
2400459e:	d5fc      	bpl.n	2400459a <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
240045a0:	4a23      	ldr	r2, [pc, #140]	; (24004630 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240045a2:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240045a4:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
240045a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
240045a8:	f023 0303 	bic.w	r3, r3, #3
240045ac:	f043 0302 	orr.w	r3, r3, #2
240045b0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240045b2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240045b4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240045b6:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
240045b8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 1;
240045ba:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240045bc:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240045be:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
240045c0:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240045c2:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240045c4:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
240045c8:	2306      	movs	r3, #6
240045ca:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
240045cc:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240045ce:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004610 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLR = 8;
240045d2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240045d4:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240045d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240045da:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240045dc:	f005 fabc 	bl	24009b58 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240045e0:	2200      	movs	r2, #0
240045e2:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240045e4:	2104      	movs	r1, #4
240045e6:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240045e8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 24004618 <SystemClock_Config+0x110>
240045ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
240045f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
240045f4:	2340      	movs	r3, #64	; 0x40
240045f6:	ed8d 7b04 	vstr	d7, [sp, #16]
240045fa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 24004620 <SystemClock_Config+0x118>
240045fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24004602:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24004606:	f005 fe39 	bl	2400a27c <HAL_RCC_ClockConfig>
}
2400460a:	b021      	add	sp, #132	; 0x84
2400460c:	f85d fb04 	ldr.w	pc, [sp], #4
24004610:	00000021 	.word	0x00000021
24004614:	00010000 	.word	0x00010000
24004618:	0000003f 	.word	0x0000003f
2400461c:	00000003 	.word	0x00000003
24004620:	00000040 	.word	0x00000040
24004624:	00000040 	.word	0x00000040
24004628:	58000400 	.word	0x58000400
2400462c:	58024800 	.word	0x58024800
24004630:	58024400 	.word	0x58024400
24004634:	00000000 	.word	0x00000000

24004638 <PeriphCommonClock_Config>:
{
24004638:	b500      	push	{lr}
2400463a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400463c:	2100      	movs	r1, #0
2400463e:	2280      	movs	r2, #128	; 0x80
24004640:	a810      	add	r0, sp, #64	; 0x40
24004642:	f016 f9d9 	bl	2401a9f8 <memset>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24004646:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24004648:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400464a:	4668      	mov	r0, sp
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
2400464c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
2400464e:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24004650:	23c0      	movs	r3, #192	; 0xc0
24004652:	ed9f 7b15 	vldr	d7, [pc, #84]	; 240046a8 <PeriphCommonClock_Config+0x70>
24004656:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400465a:	2201      	movs	r2, #1
2400465c:	230c      	movs	r3, #12
2400465e:	ed8d 7b02 	vstr	d7, [sp, #8]
24004662:	ed9f 7b13 	vldr	d7, [pc, #76]	; 240046b0 <PeriphCommonClock_Config+0x78>
24004666:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
2400466a:	2210      	movs	r2, #16
2400466c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24004670:	ed8d 7b04 	vstr	d7, [sp, #16]
24004674:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240046b8 <PeriphCommonClock_Config+0x80>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24004678:	ed9f 6b11 	vldr	d6, [pc, #68]	; 240046c0 <PeriphCommonClock_Config+0x88>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400467c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
24004680:	ed8d 7b08 	vstr	d7, [sp, #32]
24004684:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240046c8 <PeriphCommonClock_Config+0x90>
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24004688:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400468c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24004690:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24004694:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24004698:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400469a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400469c:	f006 f89e 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
}
240046a0:	b031      	add	sp, #196	; 0xc4
240046a2:	f85d fb04 	ldr.w	pc, [sp], #4
240046a6:	bf00      	nop
240046a8:	00000001 	.word	0x00000001
240046ac:	0000000a 	.word	0x0000000a
240046b0:	00000008 	.word	0x00000008
240046b4:	00000002 	.word	0x00000002
240046b8:	00000020 	.word	0x00000020
240046bc:	00001000 	.word	0x00001000
240046c0:	01010100 	.word	0x01010100
240046c4:	00000000 	.word	0x00000000
240046c8:	00000004 	.word	0x00000004
240046cc:	00000008 	.word	0x00000008

240046d0 <randomNumber>:
float randomNumber(void) {
240046d0:	b500      	push	{lr}
240046d2:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
240046d4:	4807      	ldr	r0, [pc, #28]	; (240046f4 <randomNumber+0x24>)
240046d6:	a901      	add	r1, sp, #4
240046d8:	f007 faa8 	bl	2400bc2c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
240046dc:	eddd 7a01 	vldr	s15, [sp, #4]
240046e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 240046f8 <randomNumber+0x28>
240046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
240046e8:	ee27 0a80 	vmul.f32	s0, s15, s0
240046ec:	b003      	add	sp, #12
240046ee:	f85d fb04 	ldr.w	pc, [sp], #4
240046f2:	bf00      	nop
240046f4:	2001dd5c 	.word	0x2001dd5c
240046f8:	2f80000d 	.word	0x2f80000d

240046fc <BSP_SD_IsDetected>:
{
240046fc:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
240046fe:	2301      	movs	r3, #1
{
24004700:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
24004702:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() == 0x0)
24004706:	f00b f929 	bl	2400f95c <BSP_PlatformIsDetected>
2400470a:	b908      	cbnz	r0, 24004710 <BSP_SD_IsDetected+0x14>
    status = SD_NOT_PRESENT;
2400470c:	f88d 0007 	strb.w	r0, [sp, #7]
  return status;
24004710:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
24004714:	b003      	add	sp, #12
24004716:	f85d fb04 	ldr.w	pc, [sp], #4
2400471a:	bf00      	nop

2400471c <getPresetNamesFromSDCard>:
{
2400471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
24004720:	2301      	movs	r3, #1
{
24004722:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
24004724:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() == 0x0)
24004728:	f00b f918 	bl	2400f95c <BSP_PlatformIsDetected>
2400472c:	b908      	cbnz	r0, 24004732 <getPresetNamesFromSDCard+0x16>
    status = SD_NOT_PRESENT;
2400472e:	f88d 0003 	strb.w	r0, [sp, #3]
  return status;
24004732:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24004736:	b93b      	cbnz	r3, 24004748 <getPresetNamesFromSDCard+0x2c>
24004738:	f8df a05c 	ldr.w	sl, [pc, #92]	; 24004798 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
2400473c:	2300      	movs	r3, #0
2400473e:	f88a 3000 	strb.w	r3, [sl]
}
24004742:	b009      	add	sp, #36	; 0x24
24004744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
24004748:	2400      	movs	r4, #0
2400474a:	4b0e      	ldr	r3, [pc, #56]	; (24004784 <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
2400474c:	2501      	movs	r5, #1
2400474e:	f8df a048 	ldr.w	sl, [pc, #72]	; 24004798 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
24004752:	4620      	mov	r0, r4
		loadFailed = 0;
24004754:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
24004756:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
2400475a:	f00b f999 	bl	2400fa90 <disk_initialize>
	    disk_status(0);
2400475e:	4620      	mov	r0, r4
24004760:	f00b f98c 	bl	2400fa7c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24004764:	462a      	mov	r2, r5
24004766:	4908      	ldr	r1, [pc, #32]	; (24004788 <getPresetNamesFromSDCard+0x6c>)
24004768:	4808      	ldr	r0, [pc, #32]	; (2400478c <getPresetNamesFromSDCard+0x70>)
2400476a:	f00d fb89 	bl	24011e80 <f_mount>
2400476e:	2800      	cmp	r0, #0
24004770:	d1e4      	bne.n	2400473c <getPresetNamesFromSDCard+0x20>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24004772:	4605      	mov	r5, r0
24004774:	4e06      	ldr	r6, [pc, #24]	; (24004790 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004776:	f8df 9010 	ldr.w	r9, [pc, #16]	; 24004788 <getPresetNamesFromSDCard+0x6c>
2400477a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 2400479c <getPresetNamesFromSDCard+0x80>
2400477e:	4f05      	ldr	r7, [pc, #20]	; (24004794 <getPresetNamesFromSDCard+0x78>)
24004780:	e024      	b.n	240047cc <getPresetNamesFromSDCard+0xb0>
24004782:	bf00      	nop
24004784:	20019e68 	.word	0x20019e68
24004788:	2001e718 	.word	0x2001e718
2400478c:	2001e2b8 	.word	0x2001e2b8
24004790:	2401d084 	.word	0x2401d084
24004794:	20017c80 	.word	0x20017c80
24004798:	20017cb8 	.word	0x20017cb8
2400479c:	20019d1c 	.word	0x20019d1c
					strcat(charBuf, ".ebp");
240047a0:	ab02      	add	r3, sp, #8
240047a2:	6830      	ldr	r0, [r6, #0]
240047a4:	ac02      	add	r4, sp, #8
240047a6:	1899      	adds	r1, r3, r2
240047a8:	7933      	ldrb	r3, [r6, #4]
240047aa:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
240047ac:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
240047ae:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
240047b0:	a805      	add	r0, sp, #20
240047b2:	4621      	mov	r1, r4
240047b4:	f016 f912 	bl	2401a9dc <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240047b8:	ab05      	add	r3, sp, #20
240047ba:	464a      	mov	r2, r9
240047bc:	4641      	mov	r1, r8
240047be:	4638      	mov	r0, r7
240047c0:	f00e f8a0 	bl	24012904 <f_findfirst>
				if(res == FR_OK)
240047c4:	b358      	cbz	r0, 2400481e <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240047c6:	3501      	adds	r5, #1
240047c8:	2d40      	cmp	r5, #64	; 0x40
240047ca:	d0b7      	beq.n	2400473c <getPresetNamesFromSDCard+0x20>
				itoa(i, charBuf, 10);
240047cc:	220a      	movs	r2, #10
240047ce:	a902      	add	r1, sp, #8
240047d0:	4628      	mov	r0, r5
240047d2:	f016 f901 	bl	2401a9d8 <itoa>
				int len = ((strlen(charBuf)));
240047d6:	a802      	add	r0, sp, #8
240047d8:	f7fb fd7e 	bl	240002d8 <strlen>
				if (len == 1)
240047dc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240047de:	4602      	mov	r2, r0
				if (len == 1)
240047e0:	d1de      	bne.n	240047a0 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
240047e2:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
240047e6:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
240047e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
240047ec:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
240047ee:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
240047f2:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
240047f6:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
240047fa:	f7fb fd6d 	bl	240002d8 <strlen>
240047fe:	aa05      	add	r2, sp, #20
24004800:	4603      	mov	r3, r0
24004802:	a905      	add	r1, sp, #20
24004804:	4402      	add	r2, r0
24004806:	6830      	ldr	r0, [r6, #0]
24004808:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400480a:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
2400480c:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400480e:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
24004810:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004812:	ab05      	add	r3, sp, #20
24004814:	464a      	mov	r2, r9
24004816:	f00e f875 	bl	24012904 <f_findfirst>
				if(res == FR_OK)
2400481a:	2800      	cmp	r0, #0
2400481c:	d1d3      	bne.n	240047c6 <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400481e:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 24004bf4 <getPresetNamesFromSDCard+0x4d8>
24004822:	2211      	movs	r2, #17
24004824:	49ef      	ldr	r1, [pc, #956]	; (24004be4 <getPresetNamesFromSDCard+0x4c8>)
24004826:	4658      	mov	r0, fp
24004828:	f00d fb7c 	bl	24011f24 <f_open>
2400482c:	2800      	cmp	r0, #0
2400482e:	d1ca      	bne.n	240047c6 <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24004830:	4ced      	ldr	r4, [pc, #948]	; (24004be8 <getPresetNamesFromSDCard+0x4cc>)
24004832:	ab01      	add	r3, sp, #4
24004834:	f8db 200c 	ldr.w	r2, [fp, #12]
24004838:	4658      	mov	r0, fp
2400483a:	4621      	mov	r1, r4
2400483c:	f00d fcf0 	bl	24012220 <f_read>
						f_close(&SDFile);
24004840:	4658      	mov	r0, fp
24004842:	f00d ff55 	bl	240126f0 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
24004846:	7823      	ldrb	r3, [r4, #0]
24004848:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
2400484c:	4ae7      	ldr	r2, [pc, #924]	; (24004bec <getPresetNamesFromSDCard+0x4d0>)
2400484e:	f894 c001 	ldrb.w	ip, [r4, #1]
24004852:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
24004856:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400485a:	48e5      	ldr	r0, [pc, #916]	; (24004bf0 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
2400485c:	f882 c001 	strb.w	ip, [r2, #1]
24004860:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24004864:	eb00 1301 	add.w	r3, r0, r1, lsl #4
24004868:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
2400486a:	f882 c002 	strb.w	ip, [r2, #2]
2400486e:	f894 c003 	ldrb.w	ip, [r4, #3]
24004872:	f882 c003 	strb.w	ip, [r2, #3]
24004876:	f894 c004 	ldrb.w	ip, [r4, #4]
2400487a:	f882 c004 	strb.w	ip, [r2, #4]
2400487e:	f894 c005 	ldrb.w	ip, [r4, #5]
24004882:	f882 c005 	strb.w	ip, [r2, #5]
24004886:	f894 c006 	ldrb.w	ip, [r4, #6]
2400488a:	f882 c006 	strb.w	ip, [r2, #6]
2400488e:	f894 c007 	ldrb.w	ip, [r4, #7]
24004892:	f882 c007 	strb.w	ip, [r2, #7]
24004896:	f894 c008 	ldrb.w	ip, [r4, #8]
2400489a:	f882 c008 	strb.w	ip, [r2, #8]
2400489e:	f894 c009 	ldrb.w	ip, [r4, #9]
240048a2:	f882 c009 	strb.w	ip, [r2, #9]
240048a6:	f894 c00a 	ldrb.w	ip, [r4, #10]
240048aa:	f882 c00a 	strb.w	ip, [r2, #10]
240048ae:	f894 c00b 	ldrb.w	ip, [r4, #11]
240048b2:	f882 c00b 	strb.w	ip, [r2, #11]
240048b6:	f894 c00c 	ldrb.w	ip, [r4, #12]
240048ba:	f882 c00c 	strb.w	ip, [r2, #12]
240048be:	f894 c00d 	ldrb.w	ip, [r4, #13]
240048c2:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240048c6:	7ba2      	ldrb	r2, [r4, #14]
240048c8:	5442      	strb	r2, [r0, r1]
240048ca:	7be2      	ldrb	r2, [r4, #15]
240048cc:	705a      	strb	r2, [r3, #1]
240048ce:	7c22      	ldrb	r2, [r4, #16]
240048d0:	709a      	strb	r2, [r3, #2]
240048d2:	7c62      	ldrb	r2, [r4, #17]
240048d4:	70da      	strb	r2, [r3, #3]
240048d6:	7ca2      	ldrb	r2, [r4, #18]
240048d8:	711a      	strb	r2, [r3, #4]
240048da:	7ce2      	ldrb	r2, [r4, #19]
240048dc:	715a      	strb	r2, [r3, #5]
240048de:	7d22      	ldrb	r2, [r4, #20]
240048e0:	719a      	strb	r2, [r3, #6]
240048e2:	7d62      	ldrb	r2, [r4, #21]
240048e4:	71da      	strb	r2, [r3, #7]
240048e6:	7da2      	ldrb	r2, [r4, #22]
240048e8:	721a      	strb	r2, [r3, #8]
240048ea:	7de2      	ldrb	r2, [r4, #23]
240048ec:	725a      	strb	r2, [r3, #9]
240048ee:	7e22      	ldrb	r2, [r4, #24]
240048f0:	729a      	strb	r2, [r3, #10]
240048f2:	7e62      	ldrb	r2, [r4, #25]
240048f4:	72da      	strb	r2, [r3, #11]
240048f6:	7ea2      	ldrb	r2, [r4, #26]
240048f8:	731a      	strb	r2, [r3, #12]
240048fa:	7ee2      	ldrb	r2, [r4, #27]
240048fc:	735a      	strb	r2, [r3, #13]
240048fe:	7f22      	ldrb	r2, [r4, #28]
24004900:	739a      	strb	r2, [r3, #14]
24004902:	7f62      	ldrb	r2, [r4, #29]
24004904:	73da      	strb	r2, [r3, #15]
24004906:	7fa2      	ldrb	r2, [r4, #30]
24004908:	741a      	strb	r2, [r3, #16]
2400490a:	7fe2      	ldrb	r2, [r4, #31]
2400490c:	745a      	strb	r2, [r3, #17]
2400490e:	f894 2020 	ldrb.w	r2, [r4, #32]
24004912:	749a      	strb	r2, [r3, #18]
24004914:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
24004918:	74da      	strb	r2, [r3, #19]
2400491a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
2400491e:	751a      	strb	r2, [r3, #20]
24004920:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
24004924:	755a      	strb	r2, [r3, #21]
24004926:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400492a:	759a      	strb	r2, [r3, #22]
2400492c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24004930:	75da      	strb	r2, [r3, #23]
24004932:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
24004936:	761a      	strb	r2, [r3, #24]
24004938:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400493c:	765a      	strb	r2, [r3, #25]
2400493e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
24004942:	769a      	strb	r2, [r3, #26]
24004944:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
24004948:	76da      	strb	r2, [r3, #27]
2400494a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
2400494e:	771a      	strb	r2, [r3, #28]
24004950:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
24004954:	775a      	strb	r2, [r3, #29]
24004956:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400495a:	779a      	strb	r2, [r3, #30]
2400495c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
24004960:	77da      	strb	r2, [r3, #31]
24004962:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
24004966:	f883 2020 	strb.w	r2, [r3, #32]
2400496a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
2400496e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
24004972:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
24004976:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
2400497a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
2400497e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
24004982:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
24004986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
2400498a:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
2400498e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
24004992:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
24004996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
2400499a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
2400499e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
240049a2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
240049a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
240049aa:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
240049ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
240049b2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
240049b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
240049ba:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
240049be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
240049c2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
240049c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
240049ca:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
240049ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
240049d2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
240049d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
240049da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
240049de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
240049e2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
240049e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
240049ea:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
240049ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
240049f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
240049f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
240049fa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
240049fe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
24004a02:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
24004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
24004a0a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24004a12:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
24004a16:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
24004a1a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
24004a1e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
24004a22:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
24004a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
24004a2a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
24004a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
24004a32:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
24004a36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
24004a3a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
24004a3e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
24004a42:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
24004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
24004a4a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
24004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24004a52:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
24004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
24004a5a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
24004a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
24004a62:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
24004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24004a6a:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
24004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24004a72:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
24004a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
24004a7a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
24004a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
24004a82:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
24004a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
24004a8a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
24004a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
24004a92:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
24004a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
24004a9a:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
24004a9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
24004aa2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
24004aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
24004aaa:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
24004aae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
24004ab2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
24004ab6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
24004aba:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
24004abe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
24004ac2:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
24004ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
24004aca:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
24004ace:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
24004ad2:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
24004ad6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
24004ada:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
24004ade:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
24004ae2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
24004ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24004aea:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
24004aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
24004af2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
24004af6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
24004afa:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
24004afe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
24004b02:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
24004b06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
24004b0a:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
24004b0e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
24004b12:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
24004b16:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
24004b1a:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
24004b1e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
24004b22:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
24004b26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
24004b2a:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
24004b2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
24004b32:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
24004b36:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
24004b3a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
24004b3e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
24004b42:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
24004b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
24004b4a:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
24004b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
24004b52:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
24004b56:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
24004b5a:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
24004b5e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
24004b62:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
24004b66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
24004b6a:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
24004b6e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
24004b72:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
24004b76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
24004b7a:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
24004b7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
24004b82:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
24004b86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
24004b8a:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
24004b8e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
24004b92:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
24004b96:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
24004b9a:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
24004b9e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
24004ba2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
24004ba6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
24004baa:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
24004bae:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
24004bb2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
24004bb6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
24004bba:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
24004bbe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
24004bc2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
24004bc6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
24004bca:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
24004bce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
24004bd2:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
24004bd6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
24004bda:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
24004bde:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
24004be2:	e5f0      	b.n	240047c6 <getPresetNamesFromSDCard+0xaa>
24004be4:	20019d32 	.word	0x20019d32
24004be8:	30000480 	.word	0x30000480
24004bec:	3003a000 	.word	0x3003a000
24004bf0:	3003c380 	.word	0x3003c380
24004bf4:	2001e4ec 	.word	0x2001e4ec

24004bf8 <SDRAM_init>:
{
24004bf8:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
24004bfa:	2300      	movs	r3, #0
{
24004bfc:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004bfe:	4c22      	ldr	r4, [pc, #136]	; (24004c88 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004c00:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
24004c02:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004c04:	2310      	movs	r3, #16
24004c06:	2601      	movs	r6, #1
24004c08:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c0a:	a902      	add	r1, sp, #8
24004c0c:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004c16:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c1a:	f008 fe33 	bl	2400d884 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
24004c1e:	2064      	movs	r0, #100	; 0x64
24004c20:	f001 fa56 	bl	240060d0 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c24:	a902      	add	r1, sp, #8
24004c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24004c2a:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24004c2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
24004c30:	2602      	movs	r6, #2
24004c32:	2710      	movs	r7, #16
24004c34:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c38:	f008 fe24 	bl	2400d884 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24004c3c:	2003      	movs	r0, #3
24004c3e:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24004c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
24004c48:	2004      	movs	r0, #4
24004c4a:	2100      	movs	r1, #0
24004c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c50:	a902      	add	r1, sp, #8
24004c52:	4620      	mov	r0, r4
24004c54:	f008 fe16 	bl	2400d884 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24004c58:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24004c5c:	2204      	movs	r2, #4
24004c5e:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24004c60:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
24004c62:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c64:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24004c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
24004c6a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24004c70:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004c74:	4620      	mov	r0, r4
24004c76:	f008 fe05 	bl	2400d884 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
24004c7a:	f640 0106 	movw	r1, #2054	; 0x806
24004c7e:	4620      	mov	r0, r4
24004c80:	f008 fe20 	bl	2400d8c4 <HAL_SDRAM_ProgramRefreshRate>
}
24004c84:	b006      	add	sp, #24
24004c86:	bdd0      	pop	{r4, r6, r7, pc}
24004c88:	20017aac 	.word	0x20017aac

24004c8c <main>:
{
24004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24004c90:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004c92:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24004c94:	2604      	movs	r6, #4
{
24004c96:	ed2d 8b04 	vpush	{d8-d9}
24004c9a:	b093      	sub	sp, #76	; 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24004c9c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
24004ca0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_MPU_Disable();
24004ca4:	f001 fac6 	bl	24006234 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24004ca8:	f248 731f 	movw	r3, #34591	; 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cac:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004cae:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24004cb2:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
24004cb6:	f240 1301 	movw	r3, #257	; 0x101
24004cba:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cbc:	f001 fad8 	bl	24006270 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
24004cc0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24004cc4:	f8df c3d8 	ldr.w	ip, [pc, #984]	; 240050a0 <main+0x414>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cc8:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24004cca:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x024000000;
24004cce:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24004cd0:	4bd1      	ldr	r3, [pc, #836]	; (24005018 <main+0x38c>)
24004cd2:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cd6:	f001 facb 	bl	24006270 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24004cda:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cdc:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24004cde:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24004ce2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x24040000;
24004ce6:	4bcd      	ldr	r3, [pc, #820]	; (2400501c <main+0x390>)
24004ce8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cea:	f001 fac1 	bl	24006270 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24004cee:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004cf0:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24004cf2:	f8ad 503d 	strh.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24004cf6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x30000000;
24004cfa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24004cfe:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
  MPU_InitStruct.BaseAddress = 0x30000000;
24004d02:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24004d04:	230c      	movs	r3, #12
24004d06:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d0a:	f001 fab1 	bl	24006270 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30002000;
24004d0e:	4bc4      	ldr	r3, [pc, #784]	; (24005020 <main+0x394>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d10:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24004d12:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x30002000;
24004d16:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24004d18:	2311      	movs	r3, #17
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
24004d1a:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24004d1e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
24004d22:	f44f 7380 	mov.w	r3, #256	; 0x100
24004d26:	f8ad 303d 	strh.w	r3, [sp, #61]	; 0x3d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d2a:	f001 faa1 	bl	24006270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24004d2e:	2305      	movs	r3, #5
  MPU_InitStruct.BaseAddress = 0x38000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d30:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24004d32:	f8ad 503d 	strh.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24004d36:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x38000000;
24004d3a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
24004d3e:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24004d40:	230f      	movs	r3, #15
24004d42:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d46:	f001 fa93 	bl	24006270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
24004d4a:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24004d4e:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d50:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24004d52:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
  MPU_InitStruct.BaseAddress = 0x38800000;
24004d56:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24004d58:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24004d5a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24004d5e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d62:	f001 fa85 	bl	24006270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
  MPU_InitStruct.BaseAddress = 0xc0000000;
24004d66:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24004d6a:	2207      	movs	r2, #7
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d6c:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
24004d6e:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  MPU_InitStruct.BaseAddress = 0xc0000000;
24004d72:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24004d74:	2319      	movs	r3, #25
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24004d76:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24004d7a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d7e:	f001 fa77 	bl	24006270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24004d82:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
24004d84:	4ba7      	ldr	r3, [pc, #668]	; (24005024 <main+0x398>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d86:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24004d88:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x90040000;
24004d8c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004d8e:	f001 fa6f 	bl	24006270 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24004d92:	4630      	mov	r0, r6
24004d94:	f001 fa5c 	bl	24006250 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24004d98:	4ba3      	ldr	r3, [pc, #652]	; (24005028 <main+0x39c>)
24004d9a:	695a      	ldr	r2, [r3, #20]
24004d9c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
24004da0:	d111      	bne.n	24004dc6 <main+0x13a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24004da2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004da6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24004daa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24004dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004db2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24004db6:	695a      	ldr	r2, [r3, #20]
24004db8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24004dbc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24004dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004dc2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24004dc6:	4998      	ldr	r1, [pc, #608]	; (24005028 <main+0x39c>)
24004dc8:	694b      	ldr	r3, [r1, #20]
24004dca:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24004dce:	d124      	bne.n	24004e1a <main+0x18e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24004dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24004dd4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24004dd8:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004ddc:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24004de0:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24004de4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24004de8:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004dea:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24004dee:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004df0:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24004df4:	3b01      	subs	r3, #1
24004df6:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004df8:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
24004dfc:	d1f8      	bne.n	24004df0 <main+0x164>
    } while(sets-- != 0U);
24004dfe:	3c20      	subs	r4, #32
24004e00:	f114 0f20 	cmn.w	r4, #32
24004e04:	d1f1      	bne.n	24004dea <main+0x15e>
24004e06:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24004e0a:	694b      	ldr	r3, [r1, #20]
24004e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004e10:	614b      	str	r3, [r1, #20]
24004e12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004e16:	f3bf 8f6f 	isb	sy
  HAL_Init();
24004e1a:	f001 f917 	bl	2400604c <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24004e1e:	b662      	cpsie	i
  SystemClock_Config();
24004e20:	f7ff fb72 	bl	24004508 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24004e24:	f8df b27c 	ldr.w	fp, [pc, #636]	; 240050a4 <main+0x418>
  PeriphCommonClock_Config();
24004e28:	f7ff fc06 	bl	24004638 <PeriphCommonClock_Config>
  MX_GPIO_Init();
24004e2c:	f7ff f870 	bl	24003f10 <MX_GPIO_Init>
  MX_DMA_Init();
24004e30:	f7fe ff70 	bl	24003d14 <MX_DMA_Init>
  MX_BDMA_Init();
24004e34:	f7fe feaa 	bl	24003b8c <MX_BDMA_Init>
  MX_I2C2_Init();
24004e38:	f7ff fa20 	bl	2400427c <MX_I2C2_Init>
  MX_QUADSPI_Init();
24004e3c:	f000 fbb6 	bl	240055ac <MX_QUADSPI_Init>
  MX_SAI1_Init();
24004e40:	f000 fc88 	bl	24005754 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24004e44:	f000 fda2 	bl	2400598c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24004e48:	f000 fe16 	bl	24005a78 <MX_SPI1_Init>
  MX_I2C1_Init();
24004e4c:	f7ff f9dc 	bl	24004208 <MX_I2C1_Init>
  MX_FMC_Init();
24004e50:	f7fe ffae 	bl	24003db0 <MX_FMC_Init>
  MX_FATFS_Init();
24004e54:	f00a fd1a 	bl	2400f88c <MX_FATFS_Init>
  MX_SPI6_Init();
24004e58:	f000 fe3a 	bl	24005ad0 <MX_SPI6_Init>
  MX_RNG_Init();
24004e5c:	f000 fc3a 	bl	240056d4 <MX_RNG_Init>
  HAL_Delay(500);
24004e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24004e64:	f001 f934 	bl	240060d0 <HAL_Delay>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24004e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24004e6c:	486f      	ldr	r0, [pc, #444]	; (2400502c <main+0x3a0>)
24004e6e:	f003 f99d 	bl	240081ac <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24004e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24004e76:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24004e78:	486c      	ldr	r0, [pc, #432]	; (2400502c <main+0x3a0>)
24004e7a:	f003 f997 	bl	240081ac <HAL_GPIO_ReadPin>
24004e7e:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24004e80:	2104      	movs	r1, #4
24004e82:	486b      	ldr	r0, [pc, #428]	; (24005030 <main+0x3a4>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24004e84:	00a4      	lsls	r4, r4, #2
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24004e86:	f003 f991 	bl	240081ac <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24004e8a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24004e8e:	4420      	add	r0, r4
24004e90:	b2c4      	uxtb	r4, r0
24004e92:	f88b 4000 	strb.w	r4, [fp]
	if (boardNumber == 0)
24004e96:	2c00      	cmp	r4, #0
24004e98:	f000 82a2 	beq.w	240053e0 <main+0x754>
   PWR->CR1 |= PWR_CR1_DBP;
24004e9c:	4a65      	ldr	r2, [pc, #404]	; (24005034 <main+0x3a8>)
24004e9e:	6813      	ldr	r3, [r2, #0]
24004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004ea4:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24004ea6:	6813      	ldr	r3, [r2, #0]
24004ea8:	05d9      	lsls	r1, r3, #23
24004eaa:	d5fc      	bpl.n	24004ea6 <main+0x21a>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24004eac:	4b62      	ldr	r3, [pc, #392]	; (24005038 <main+0x3ac>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24004eae:	2200      	movs	r2, #0
24004eb0:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24004eb2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24004eb6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
24004eba:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
24004ebe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24004ec2:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
24004ec6:	9004      	str	r0, [sp, #16]
24004ec8:	9804      	ldr	r0, [sp, #16]
   __HAL_RCC_D2SRAM1_CLK_ENABLE();
24004eca:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
24004ece:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
24004ed2:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
24004ed6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
24004eda:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
24004ede:	9005      	str	r0, [sp, #20]
24004ee0:	9805      	ldr	r0, [sp, #20]
   __HAL_RCC_D2SRAM2_CLK_ENABLE();
24004ee2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
24004ee6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
24004eea:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
24004eee:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
24004ef2:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
24004ef6:	9006      	str	r0, [sp, #24]
24004ef8:	9806      	ldr	r0, [sp, #24]
   __HAL_RCC_D2SRAM3_CLK_ENABLE();
24004efa:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
24004efe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
24004f02:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
24004f06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24004f0a:	484c      	ldr	r0, [pc, #304]	; (2400503c <main+0x3b0>)
   __HAL_RCC_D2SRAM3_CLK_ENABLE();
24004f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24004f10:	9307      	str	r3, [sp, #28]
24004f12:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24004f14:	f003 f950 	bl	240081b8 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
24004f18:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24004f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24004f20:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24004f24:	4940      	ldr	r1, [pc, #256]	; (24005028 <main+0x39c>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24004f26:	4a46      	ldr	r2, [pc, #280]	; (24005040 <main+0x3b4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24004f28:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
24004f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24004f30:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24004f34:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
24004f38:	07db      	lsls	r3, r3, #31
24004f3a:	d502      	bpl.n	24004f42 <main+0x2b6>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24004f3c:	4b41      	ldr	r3, [pc, #260]	; (24005044 <main+0x3b8>)
24004f3e:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24004f42:	4b3f      	ldr	r3, [pc, #252]	; (24005040 <main+0x3b4>)
24004f44:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
24004f46:	4a40      	ldr	r2, [pc, #256]	; (24005048 <main+0x3bc>)
  buffer[NUM_PARAMS*2+19+112] = 1;
24004f48:	2401      	movs	r4, #1
  DWT->CYCCNT = 0;
24004f4a:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
24004f4c:	601a      	str	r2, [r3, #0]
	  buffer[i] = 0;
24004f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24004f52:	4b3e      	ldr	r3, [pc, #248]	; (2400504c <main+0x3c0>)
	  presetWaitingToLoad = 1;
24004f54:	4f3e      	ldr	r7, [pc, #248]	; (24005050 <main+0x3c4>)
	  buffer[i] = 0;
24004f56:	4618      	mov	r0, r3
24004f58:	f015 fd4e 	bl	2401a9f8 <memset>
  buffer[15+112] = NUM_PARAMS;
24004f5c:	229b      	movs	r2, #155	; 0x9b
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004f5e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24004f62:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 24005054 <main+0x3c8>
  buffer[15+112] = NUM_PARAMS;
24004f66:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24004f6a:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004f6e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
24004f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24004f76:	f8a0 21b6 	strh.w	r2, [r0, #438]	; 0x1b6
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24004f7a:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+19+112] = 1;
24004f7e:	f880 41b9 	strb.w	r4, [r0, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24004f82:	f8a0 21bf 	strh.w	r2, [r0, #447]	; 0x1bf
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004f86:	4834      	ldr	r0, [pc, #208]	; (24005058 <main+0x3cc>)
24004f88:	f010 fb54 	bl	24015634 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24004f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
24004f90:	ed9f 1a32 	vldr	s2, [pc, #200]	; 2400505c <main+0x3d0>
24004f94:	eddf 0a32 	vldr	s1, [pc, #200]	; 24005060 <main+0x3d4>
24004f98:	ed9f 0a32 	vldr	s0, [pc, #200]	; 24005064 <main+0x3d8>
24004f9c:	4832      	ldr	r0, [pc, #200]	; (24005068 <main+0x3dc>)
24004f9e:	f010 fb49 	bl	24015634 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24004fa2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24004fa6:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24004faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
24004fae:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 24005064 <main+0x3d8>
24004fb2:	482e      	ldr	r0, [pc, #184]	; (2400506c <main+0x3e0>)
24004fb4:	f010 fb3e 	bl	24015634 <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
24004fb8:	f89b 3000 	ldrb.w	r3, [fp]
24004fbc:	2b00      	cmp	r3, #0
24004fbe:	f000 820b 	beq.w	240053d8 <main+0x74c>
  SDRAM_init();
24004fc2:	f7ff fe19 	bl	24004bf8 <SDRAM_init>
  codec_init(&hi2c2);
24004fc6:	482a      	ldr	r0, [pc, #168]	; (24005070 <main+0x3e4>)
24004fc8:	f7fe fdfc 	bl	24003bc4 <codec_init>
  audioInit();
24004fcc:	f7fb fb48 	bl	24000660 <audioInit>
  	if (foundOne == 0)
24004fd0:	4b28      	ldr	r3, [pc, #160]	; (24005074 <main+0x3e8>)
24004fd2:	781b      	ldrb	r3, [r3, #0]
24004fd4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24004fd8:	2b00      	cmp	r3, #0
24004fda:	f040 81b2 	bne.w	24005342 <main+0x6b6>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
24004fde:	f240 10c1 	movw	r0, #449	; 0x1c1
24004fe2:	4d25      	ldr	r5, [pc, #148]	; (24005078 <main+0x3ec>)
24004fe4:	f030 ffe8 	bl	24035fb8 <__parsePreset_veneer>
24004fe8:	4b24      	ldr	r3, [pc, #144]	; (2400507c <main+0x3f0>)
24004fea:	9300      	str	r3, [sp, #0]
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24004fec:	2234      	movs	r2, #52	; 0x34
24004fee:	4924      	ldr	r1, [pc, #144]	; (24005080 <main+0x3f4>)
24004ff0:	4824      	ldr	r0, [pc, #144]	; (24005084 <main+0x3f8>)
24004ff2:	f008 fdaf 	bl	2400db54 <HAL_SPI_Receive_DMA>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24004ff6:	4a24      	ldr	r2, [pc, #144]	; (24005088 <main+0x3fc>)
24004ff8:	2340      	movs	r3, #64	; 0x40
24004ffa:	4824      	ldr	r0, [pc, #144]	; (2400508c <main+0x400>)
	  if (rand > TWO_TO_31)
24004ffc:	eddf 8a24 	vldr	s17, [pc, #144]	; 24005090 <main+0x404>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24005000:	18d1      	adds	r1, r2, r3
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24005002:	ed9f 8a24 	vldr	s16, [pc, #144]	; 24005094 <main+0x408>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24005006:	f008 fe85 	bl	2400dd14 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
2400500a:	4923      	ldr	r1, [pc, #140]	; (24005098 <main+0x40c>)
2400500c:	4823      	ldr	r0, [pc, #140]	; (2400509c <main+0x410>)
2400500e:	f8df a098 	ldr.w	sl, [pc, #152]	; 240050a8 <main+0x41c>
24005012:	f8df 9098 	ldr.w	r9, [pc, #152]	; 240050ac <main+0x420>
24005016:	e04b      	b.n	240050b0 <main+0x424>
24005018:	01010000 	.word	0x01010000
2400501c:	24040000 	.word	0x24040000
24005020:	30002000 	.word	0x30002000
24005024:	90040000 	.word	0x90040000
24005028:	e000ed00 	.word	0xe000ed00
2400502c:	58020400 	.word	0x58020400
24005030:	58020000 	.word	0x58020000
24005034:	58024800 	.word	0x58024800
24005038:	58024400 	.word	0x58024400
2400503c:	58020800 	.word	0x58020800
24005040:	e0001000 	.word	0xe0001000
24005044:	c5acce55 	.word	0xc5acce55
24005048:	40000001 	.word	0x40000001
2400504c:	30000480 	.word	0x30000480
24005050:	2001b900 	.word	0x2001b900
24005054:	3c23d70a 	.word	0x3c23d70a
24005058:	2001bd0c 	.word	0x2001bd0c
2400505c:	457a0000 	.word	0x457a0000
24005060:	469c4000 	.word	0x469c4000
24005064:	00000000 	.word	0x00000000
24005068:	20017d0c 	.word	0x20017d0c
2400506c:	3003a380 	.word	0x3003a380
24005070:	20017c24 	.word	0x20017c24
24005074:	20019e34 	.word	0x20019e34
24005078:	2001b904 	.word	0x2001b904
2400507c:	2000074c 	.word	0x2000074c
24005080:	38000000 	.word	0x38000000
24005084:	2001e218 	.word	0x2001e218
24005088:	30000400 	.word	0x30000400
2400508c:	2001e178 	.word	0x2001e178
24005090:	4f000000 	.word	0x4f000000
24005094:	3000000d 	.word	0x3000000d
24005098:	2001de64 	.word	0x2001de64
2400509c:	2001defc 	.word	0x2001defc
240050a0:	03010011 	.word	0x03010011
240050a4:	20017c79 	.word	0x20017c79
240050a8:	2001b908 	.word	0x2001b908
240050ac:	2001a7f4 	.word	0x2001a7f4
240050b0:	4cb4      	ldr	r4, [pc, #720]	; (24005384 <main+0x6f8>)
240050b2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 240053d4 <main+0x748>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
240050b6:	4eb4      	ldr	r6, [pc, #720]	; (24005388 <main+0x6fc>)
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
240050b8:	f7fc fb5e 	bl	24001778 <audioStart>
240050bc:	e02e      	b.n	2400511c <main+0x490>
	  if (presetWaitingToParse > 0)
240050be:	682b      	ldr	r3, [r5, #0]
240050c0:	2b00      	cmp	r3, #0
240050c2:	d142      	bne.n	2400514a <main+0x4be>
	  else if (presetWaitingToWrite > 0)
240050c4:	f8da 3000 	ldr.w	r3, [sl]
240050c8:	b11b      	cbz	r3, 240050d2 <main+0x446>
		  if (boardNumber == 0)
240050ca:	f89b 1000 	ldrb.w	r1, [fp]
240050ce:	2900      	cmp	r1, #0
240050d0:	d04b      	beq.n	2400516a <main+0x4de>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
240050d2:	a90c      	add	r1, sp, #48	; 0x30
240050d4:	48ad      	ldr	r0, [pc, #692]	; (2400538c <main+0x700>)
240050d6:	f006 fda9 	bl	2400bc2c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
240050da:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
240050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
240050e2:	eef4 7ae8 	vcmpe.f32	s15, s17
240050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240050ea:	dd0c      	ble.n	24005106 <main+0x47a>
		  myTestInt++;
240050ec:	f8d9 3000 	ldr.w	r3, [r9]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
240050f0:	2180      	movs	r1, #128	; 0x80
240050f2:	48a7      	ldr	r0, [pc, #668]	; (24005390 <main+0x704>)
		  myTestInt++;
240050f4:	3301      	adds	r3, #1
240050f6:	f8c9 3000 	str.w	r3, [r9]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
240050fa:	f003 f861 	bl	240081c0 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
240050fe:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
24005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24005106:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2400510a:	7823      	ldrb	r3, [r4, #0]
2400510c:	1c5a      	adds	r2, r3, #1
2400510e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
24005112:	eea7 7a88 	vfma.f32	s14, s15, s16
24005116:	7022      	strb	r2, [r4, #0]
24005118:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
2400511c:	683b      	ldr	r3, [r7, #0]
2400511e:	2b00      	cmp	r3, #0
24005120:	d0cd      	beq.n	240050be <main+0x432>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
24005122:	2201      	movs	r2, #1
24005124:	2140      	movs	r1, #64	; 0x40
24005126:	4630      	mov	r0, r6
24005128:	f003 f846 	bl	240081b8 <HAL_GPIO_WritePin>
		  if (boardNumber == 0)
2400512c:	f89b 3000 	ldrb.w	r3, [fp]
24005130:	b91b      	cbnz	r3, 2400513a <main+0x4ae>
			  if (!i2cSending)
24005132:	4b98      	ldr	r3, [pc, #608]	; (24005394 <main+0x708>)
24005134:	781b      	ldrb	r3, [r3, #0]
24005136:	2b00      	cmp	r3, #0
24005138:	d05a      	beq.n	240051f0 <main+0x564>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
2400513a:	2200      	movs	r2, #0
2400513c:	2140      	movs	r1, #64	; 0x40
2400513e:	4630      	mov	r0, r6
24005140:	f003 f83a 	bl	240081b8 <HAL_GPIO_WritePin>
	  if (presetWaitingToParse > 0)
24005144:	682b      	ldr	r3, [r5, #0]
24005146:	2b00      	cmp	r3, #0
24005148:	d0bc      	beq.n	240050c4 <main+0x438>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
2400514a:	2201      	movs	r2, #1
2400514c:	4630      	mov	r0, r6
2400514e:	2180      	movs	r1, #128	; 0x80
24005150:	f003 f832 	bl	240081b8 <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24005154:	9b00      	ldr	r3, [sp, #0]
24005156:	6828      	ldr	r0, [r5, #0]
24005158:	7819      	ldrb	r1, [r3, #0]
2400515a:	f030 ff2d 	bl	24035fb8 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
2400515e:	2200      	movs	r2, #0
24005160:	2180      	movs	r1, #128	; 0x80
24005162:	4630      	mov	r0, r6
24005164:	f003 f828 	bl	240081b8 <HAL_GPIO_WritePin>
24005168:	e7b3      	b.n	240050d2 <main+0x446>
			  writePresetToSDCard(presetWaitingToWrite);
2400516a:	f8da 3000 	ldr.w	r3, [sl]
2400516e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
24005170:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24005172:	f44f 7200 	mov.w	r2, #512	; 0x200
24005176:	4888      	ldr	r0, [pc, #544]	; (24005398 <main+0x70c>)
24005178:	f015 fc3e 	bl	2401a9f8 <memset>
  __IO uint8_t status = SD_PRESENT;
2400517c:	2301      	movs	r3, #1
2400517e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (BSP_PlatformIsDetected() == 0x0)
24005182:	f00a fbeb 	bl	2400f95c <BSP_PlatformIsDetected>
24005186:	b908      	cbnz	r0, 2400518c <main+0x500>
    status = SD_NOT_PRESENT;
24005188:	f88d 000f 	strb.w	r0, [sp, #15]
  return status;
2400518c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	if(BSP_SD_IsDetected())
24005190:	b33b      	cbz	r3, 240051e2 <main+0x556>
				diskBusy = 1;
24005192:	2301      	movs	r3, #1
24005194:	4a81      	ldr	r2, [pc, #516]	; (2400539c <main+0x710>)
24005196:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24005198:	4a81      	ldr	r2, [pc, #516]	; (240053a0 <main+0x714>)
2400519a:	7813      	ldrb	r3, [r2, #0]
2400519c:	2b63      	cmp	r3, #99	; 0x63
2400519e:	d901      	bls.n	240051a4 <main+0x518>
			        presetNumberToSave = 99;
240051a0:	2363      	movs	r3, #99	; 0x63
240051a2:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
240051a4:	4b7e      	ldr	r3, [pc, #504]	; (240053a0 <main+0x714>)
240051a6:	220a      	movs	r2, #10
240051a8:	a909      	add	r1, sp, #36	; 0x24
240051aa:	7818      	ldrb	r0, [r3, #0]
240051ac:	f015 fc14 	bl	2401a9d8 <itoa>
				int len = ((strlen(charBuf)));
240051b0:	a809      	add	r0, sp, #36	; 0x24
240051b2:	f7fb f891 	bl	240002d8 <strlen>
				if (len == 1)
240051b6:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240051b8:	4602      	mov	r2, r0
				if (len == 1)
240051ba:	d038      	beq.n	2400522e <main+0x5a2>
					strcat(charBuf, ".ebp");
240051bc:	4979      	ldr	r1, [pc, #484]	; (240053a4 <main+0x718>)
240051be:	ab09      	add	r3, sp, #36	; 0x24
240051c0:	6808      	ldr	r0, [r1, #0]
240051c2:	7909      	ldrb	r1, [r1, #4]
240051c4:	5098      	str	r0, [r3, r2]
240051c6:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
240051c8:	a80c      	add	r0, sp, #48	; 0x30
240051ca:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
240051cc:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
240051ce:	a909      	add	r1, sp, #36	; 0x24
240051d0:	f015 fc04 	bl	2401a9dc <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
240051d4:	220a      	movs	r2, #10
240051d6:	a90c      	add	r1, sp, #48	; 0x30
240051d8:	4873      	ldr	r0, [pc, #460]	; (240053a8 <main+0x71c>)
240051da:	f00c fea3 	bl	24011f24 <f_open>
240051de:	2800      	cmp	r0, #0
240051e0:	d03d      	beq.n	2400525e <main+0x5d2>
	presetWaitingToWrite = 0;
240051e2:	2300      	movs	r3, #0
	diskBusy = 0;
240051e4:	4a6d      	ldr	r2, [pc, #436]	; (2400539c <main+0x710>)
	presetWaitingToWrite = 0;
240051e6:	f8ca 3000 	str.w	r3, [sl]
	diskBusy = 0;
240051ea:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
240051ec:	b662      	cpsie	i
}
240051ee:	e770      	b.n	240050d2 <main+0x446>
				  checkForSDCardPreset(presetNumberToLoad);
240051f0:	9b00      	ldr	r3, [sp, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240051f2:	2201      	movs	r2, #1
240051f4:	4866      	ldr	r0, [pc, #408]	; (24005390 <main+0x704>)
				  checkForSDCardPreset(presetNumberToLoad);
240051f6:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240051f8:	4611      	mov	r1, r2
				  checkForSDCardPreset(presetNumberToLoad);
240051fa:	b2db      	uxtb	r3, r3
240051fc:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240051fe:	f002 ffdb 	bl	240081b8 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24005202:	2301      	movs	r3, #1
24005204:	f88d 300e 	strb.w	r3, [sp, #14]
  if (BSP_PlatformIsDetected() == 0x0)
24005208:	f00a fba8 	bl	2400f95c <BSP_PlatformIsDetected>
2400520c:	b908      	cbnz	r0, 24005212 <main+0x586>
    status = SD_NOT_PRESENT;
2400520e:	f88d 000e 	strb.w	r0, [sp, #14]
  return status;
24005212:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(BSP_SD_IsDetected())
24005216:	bb63      	cbnz	r3, 24005272 <main+0x5e6>
		loadFailed = 1;
24005218:	2301      	movs	r3, #1
2400521a:	4a64      	ldr	r2, [pc, #400]	; (240053ac <main+0x720>)
2400521c:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
2400521e:	2200      	movs	r2, #0
24005220:	4b5e      	ldr	r3, [pc, #376]	; (2400539c <main+0x710>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24005222:	2101      	movs	r1, #1
24005224:	485a      	ldr	r0, [pc, #360]	; (24005390 <main+0x704>)
	diskBusy = 0;
24005226:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24005228:	f002 ffc6 	bl	240081b8 <HAL_GPIO_WritePin>
	return found;
2400522c:	e785      	b.n	2400513a <main+0x4ae>
					finalString[2] = charBuf[1];
2400522e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
24005232:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
					finalString[1] = charBuf[0];
24005236:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
2400523a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
					finalString[0] = '0';
2400523e:	2330      	movs	r3, #48	; 0x30
					strcat(finalString, ".ebp");
24005240:	eb0d 0003 	add.w	r0, sp, r3
					finalString[0] = '0';
24005244:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
					strcat(finalString, ".ebp");
24005248:	f7fb f846 	bl	240002d8 <strlen>
2400524c:	4a55      	ldr	r2, [pc, #340]	; (240053a4 <main+0x718>)
2400524e:	4603      	mov	r3, r0
24005250:	a90c      	add	r1, sp, #48	; 0x30
24005252:	6810      	ldr	r0, [r2, #0]
24005254:	7912      	ldrb	r2, [r2, #4]
24005256:	50c8      	str	r0, [r1, r3]
24005258:	440b      	add	r3, r1
2400525a:	711a      	strb	r2, [r3, #4]
2400525c:	e7ba      	b.n	240051d4 <main+0x548>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
2400525e:	9a01      	ldr	r2, [sp, #4]
24005260:	ab08      	add	r3, sp, #32
24005262:	4953      	ldr	r1, [pc, #332]	; (240053b0 <main+0x724>)
24005264:	4850      	ldr	r0, [pc, #320]	; (240053a8 <main+0x71c>)
24005266:	f00d f901 	bl	2401246c <f_write>
					f_close(&SDFile);
2400526a:	484f      	ldr	r0, [pc, #316]	; (240053a8 <main+0x71c>)
2400526c:	f00d fa40 	bl	240126f0 <f_close>
24005270:	e7b7      	b.n	240051e2 <main+0x556>
		loadFailed = 0;
24005272:	2300      	movs	r3, #0
24005274:	4a4d      	ldr	r2, [pc, #308]	; (240053ac <main+0x720>)
		diskBusy = 1;
24005276:	4949      	ldr	r1, [pc, #292]	; (2400539c <main+0x710>)
		loadFailed = 0;
24005278:	7013      	strb	r3, [r2, #0]
		diskBusy = 1;
2400527a:	2201      	movs	r2, #1
		disk_initialize(0);
2400527c:	4618      	mov	r0, r3
		presetWaitingToLoad = 0;
2400527e:	603b      	str	r3, [r7, #0]
		diskBusy = 1;
24005280:	700a      	strb	r2, [r1, #0]
		disk_initialize(0);
24005282:	f00a fc05 	bl	2400fa90 <disk_initialize>
	    disk_status(0);
24005286:	2300      	movs	r3, #0
24005288:	4618      	mov	r0, r3
2400528a:	f00a fbf7 	bl	2400fa7c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400528e:	2201      	movs	r2, #1
24005290:	4948      	ldr	r1, [pc, #288]	; (240053b4 <main+0x728>)
24005292:	4849      	ldr	r0, [pc, #292]	; (240053b8 <main+0x72c>)
24005294:	f00c fdf4 	bl	24011e80 <f_mount>
24005298:	2800      	cmp	r0, #0
2400529a:	d1bd      	bne.n	24005218 <main+0x58c>
			itoa(numberToLoad, charBuf, 10);
2400529c:	220a      	movs	r2, #10
2400529e:	a909      	add	r1, sp, #36	; 0x24
240052a0:	9801      	ldr	r0, [sp, #4]
240052a2:	f015 fb99 	bl	2401a9d8 <itoa>
			int len = ((strlen(charBuf)));
240052a6:	a809      	add	r0, sp, #36	; 0x24
240052a8:	f7fb f816 	bl	240002d8 <strlen>
			if (len == 1)
240052ac:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
240052ae:	4602      	mov	r2, r0
			if (len == 1)
240052b0:	d04f      	beq.n	24005352 <main+0x6c6>
				strcat(charBuf, ".ebp");
240052b2:	493c      	ldr	r1, [pc, #240]	; (240053a4 <main+0x718>)
240052b4:	ab09      	add	r3, sp, #36	; 0x24
240052b6:	6808      	ldr	r0, [r1, #0]
240052b8:	7909      	ldrb	r1, [r1, #4]
240052ba:	5098      	str	r0, [r3, r2]
240052bc:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
240052be:	a80c      	add	r0, sp, #48	; 0x30
240052c0:	3205      	adds	r2, #5
				strcat(charBuf, ".ebp");
240052c2:	7119      	strb	r1, [r3, #4]
				strcpy(finalString, charBuf);
240052c4:	a909      	add	r1, sp, #36	; 0x24
240052c6:	f015 fb89 	bl	2401a9dc <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
240052ca:	ab0c      	add	r3, sp, #48	; 0x30
240052cc:	4a39      	ldr	r2, [pc, #228]	; (240053b4 <main+0x728>)
240052ce:	493b      	ldr	r1, [pc, #236]	; (240053bc <main+0x730>)
240052d0:	483b      	ldr	r0, [pc, #236]	; (240053c0 <main+0x734>)
240052d2:	f00d fb17 	bl	24012904 <f_findfirst>
			if(res == FR_OK)
240052d6:	2800      	cmp	r0, #0
240052d8:	d19e      	bne.n	24005218 <main+0x58c>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
240052da:	2211      	movs	r2, #17
240052dc:	4939      	ldr	r1, [pc, #228]	; (240053c4 <main+0x738>)
240052de:	4832      	ldr	r0, [pc, #200]	; (240053a8 <main+0x71c>)
240052e0:	f00c fe20 	bl	24011f24 <f_open>
240052e4:	ee09 0a10 	vmov	s18, r0
240052e8:	2800      	cmp	r0, #0
240052ea:	d195      	bne.n	24005218 <main+0x58c>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
240052ec:	4a2e      	ldr	r2, [pc, #184]	; (240053a8 <main+0x71c>)
240052ee:	ab08      	add	r3, sp, #32
240052f0:	492f      	ldr	r1, [pc, #188]	; (240053b0 <main+0x724>)
240052f2:	68d2      	ldr	r2, [r2, #12]
240052f4:	482c      	ldr	r0, [pc, #176]	; (240053a8 <main+0x71c>)
240052f6:	f00c ff93 	bl	24012220 <f_read>
					presetWaitingToParse = bytesRead;
240052fa:	9b08      	ldr	r3, [sp, #32]
					f_close(&SDFile);
240052fc:	482a      	ldr	r0, [pc, #168]	; (240053a8 <main+0x71c>)
					presetWaitingToParse = bytesRead;
240052fe:	602b      	str	r3, [r5, #0]
					f_close(&SDFile);
24005300:	f00d f9f6 	bl	240126f0 <f_close>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24005304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24005308:	4630      	mov	r0, r6
2400530a:	2201      	movs	r2, #1
2400530c:	f002 ff54 	bl	240081b8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
24005310:	2001      	movs	r0, #1
24005312:	f000 fedd 	bl	240060d0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24005316:	ee19 2a10 	vmov	r2, s18
2400531a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2400531e:	4630      	mov	r0, r6
24005320:	f002 ff4a 	bl	240081b8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
24005324:	2001      	movs	r0, #1
24005326:	f000 fed3 	bl	240060d0 <HAL_Delay>
	  	  i2cSending = 1;
2400532a:	2301      	movs	r3, #1
2400532c:	4a19      	ldr	r2, [pc, #100]	; (24005394 <main+0x708>)
	  	  HAL_I2C_Master_Transmit_DMA(&hi2c1, 0, buffer, 4096);
2400532e:	ee19 1a10 	vmov	r1, s18
24005332:	4825      	ldr	r0, [pc, #148]	; (240053c8 <main+0x73c>)
	  	  i2cSending = 1;
24005334:	7013      	strb	r3, [r2, #0]
	  	  HAL_I2C_Master_Transmit_DMA(&hi2c1, 0, buffer, 4096);
24005336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400533a:	4a1d      	ldr	r2, [pc, #116]	; (240053b0 <main+0x724>)
2400533c:	f003 fa40 	bl	240087c0 <HAL_I2C_Master_Transmit_DMA>
24005340:	e76d      	b.n	2400521e <main+0x592>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
24005342:	4b22      	ldr	r3, [pc, #136]	; (240053cc <main+0x740>)
24005344:	4d22      	ldr	r5, [pc, #136]	; (240053d0 <main+0x744>)
24005346:	9300      	str	r3, [sp, #0]
24005348:	6828      	ldr	r0, [r5, #0]
2400534a:	7819      	ldrb	r1, [r3, #0]
2400534c:	f030 fe34 	bl	24035fb8 <__parsePreset_veneer>
24005350:	e64c      	b.n	24004fec <main+0x360>
				finalString[2] = charBuf[1];
24005352:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
24005356:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				finalString[1] = charBuf[0];
2400535a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
2400535e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
				finalString[0] = '0';
24005362:	2330      	movs	r3, #48	; 0x30
				strcat(finalString, ".ebp");
24005364:	eb0d 0003 	add.w	r0, sp, r3
				finalString[0] = '0';
24005368:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				strcat(finalString, ".ebp");
2400536c:	f7fa ffb4 	bl	240002d8 <strlen>
24005370:	4a0c      	ldr	r2, [pc, #48]	; (240053a4 <main+0x718>)
24005372:	4603      	mov	r3, r0
24005374:	a90c      	add	r1, sp, #48	; 0x30
24005376:	6810      	ldr	r0, [r2, #0]
24005378:	7912      	ldrb	r2, [r2, #4]
2400537a:	50c8      	str	r0, [r1, r3]
2400537c:	440b      	add	r3, r1
2400537e:	711a      	strb	r2, [r3, #4]
24005380:	e7a3      	b.n	240052ca <main+0x63e>
24005382:	bf00      	nop
24005384:	20017c7e 	.word	0x20017c7e
24005388:	58020400 	.word	0x58020400
2400538c:	2001dd5c 	.word	0x2001dd5c
24005390:	58020800 	.word	0x58020800
24005394:	20019e35 	.word	0x20019e35
24005398:	30000000 	.word	0x30000000
2400539c:	20017cb8 	.word	0x20017cb8
240053a0:	2001b8fe 	.word	0x2001b8fe
240053a4:	2401d084 	.word	0x2401d084
240053a8:	2001e4ec 	.word	0x2001e4ec
240053ac:	20019e68 	.word	0x20019e68
240053b0:	30000480 	.word	0x30000480
240053b4:	2001e718 	.word	0x2001e718
240053b8:	2001e2b8 	.word	0x2001e2b8
240053bc:	20019d1c 	.word	0x20019d1c
240053c0:	20017c80 	.word	0x20017c80
240053c4:	20019d32 	.word	0x20019d32
240053c8:	20017bd0 	.word	0x20017bd0
240053cc:	2000074c 	.word	0x2000074c
240053d0:	2001b904 	.word	0x2001b904
240053d4:	2001b90c 	.word	0x2001b90c
	  getPresetNamesFromSDCard();
240053d8:	f7ff f9a0 	bl	2400471c <getPresetNamesFromSDCard>
	  presetWaitingToLoad = 1;
240053dc:	603c      	str	r4, [r7, #0]
240053de:	e5f0      	b.n	24004fc2 <main+0x336>
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
240053e0:	2028      	movs	r0, #40	; 0x28
240053e2:	f000 feeb 	bl	240061bc <HAL_NVIC_DisableIRQ>
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
240053e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240053ea:	2301      	movs	r3, #1
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240053ec:	a90c      	add	r1, sp, #48	; 0x30
240053ee:	4807      	ldr	r0, [pc, #28]	; (2400540c <main+0x780>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
240053f0:	9410      	str	r4, [sp, #64]	; 0x40
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
240053f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		GPIO_InitTypeDef GPIO_InitStruct = {0};
240053f6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240053fa:	f002 fd8d 	bl	24007f18 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240053fe:	4622      	mov	r2, r4
24005400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24005404:	4801      	ldr	r0, [pc, #4]	; (2400540c <main+0x780>)
24005406:	f002 fed7 	bl	240081b8 <HAL_GPIO_WritePin>
2400540a:	e547      	b.n	24004e9c <main+0x210>
2400540c:	58020400 	.word	0x58020400

24005410 <HAL_I2C_SlaveRxCpltCallback>:
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
24005410:	2200      	movs	r2, #0
24005412:	2140      	movs	r1, #64	; 0x40
24005414:	4804      	ldr	r0, [pc, #16]	; (24005428 <HAL_I2C_SlaveRxCpltCallback+0x18>)
{
24005416:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
24005418:	f002 fece 	bl	240081b8 <HAL_GPIO_WritePin>
	presetWaitingToParse = 4096;
2400541c:	4b03      	ldr	r3, [pc, #12]	; (2400542c <HAL_I2C_SlaveRxCpltCallback+0x1c>)
2400541e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24005422:	601a      	str	r2, [r3, #0]
}
24005424:	bd08      	pop	{r3, pc}
24005426:	bf00      	nop
24005428:	58020000 	.word	0x58020000
2400542c:	2001b904 	.word	0x2001b904

24005430 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
24005430:	4b01      	ldr	r3, [pc, #4]	; (24005438 <HAL_I2C_MasterTxCpltCallback+0x8>)
24005432:	2200      	movs	r2, #0
24005434:	701a      	strb	r2, [r3, #0]
}
24005436:	4770      	bx	lr
24005438:	20019e35 	.word	0x20019e35

2400543c <HAL_I2C_ErrorCallback>:
	I2CErrors++;
2400543c:	4a04      	ldr	r2, [pc, #16]	; (24005450 <HAL_I2C_ErrorCallback+0x14>)
	i2cSending = 0;
2400543e:	2100      	movs	r1, #0
24005440:	4b04      	ldr	r3, [pc, #16]	; (24005454 <HAL_I2C_ErrorCallback+0x18>)
24005442:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
24005444:	7813      	ldrb	r3, [r2, #0]
24005446:	3301      	adds	r3, #1
24005448:	b2db      	uxtb	r3, r3
2400544a:	7013      	strb	r3, [r2, #0]
}
2400544c:	4770      	bx	lr
2400544e:	bf00      	nop
24005450:	20017c78 	.word	0x20017c78
24005454:	20019e35 	.word	0x20019e35

24005458 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
24005458:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
2400545c:	b510      	push	{r4, lr}
2400545e:	b084      	sub	sp, #16
	if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
24005460:	d043      	beq.n	240054ea <HAL_GPIO_EXTI_Callback+0x92>
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line3
24005462:	2808      	cmp	r0, #8
24005464:	d001      	beq.n	2400546a <HAL_GPIO_EXTI_Callback+0x12>
}
24005466:	b004      	add	sp, #16
24005468:	bd10      	pop	{r4, pc}
    	  if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) //button is pressed, wait
2400546a:	4601      	mov	r1, r0
2400546c:	4844      	ldr	r0, [pc, #272]	; (24005580 <HAL_GPIO_EXTI_Callback+0x128>)
2400546e:	f002 fe9d 	bl	240081ac <HAL_GPIO_ReadPin>
24005472:	2801      	cmp	r0, #1
24005474:	d05f      	beq.n	24005536 <HAL_GPIO_EXTI_Callback+0xde>
    		  if (buttonPressed == 1)
24005476:	4c43      	ldr	r4, [pc, #268]	; (24005584 <HAL_GPIO_EXTI_Callback+0x12c>)
24005478:	7823      	ldrb	r3, [r4, #0]
2400547a:	2b01      	cmp	r3, #1
2400547c:	d1f3      	bne.n	24005466 <HAL_GPIO_EXTI_Callback+0xe>
    				  bootloaderFlag[i] = 231;
2400547e:	4b42      	ldr	r3, [pc, #264]	; (24005588 <HAL_GPIO_EXTI_Callback+0x130>)
24005480:	2220      	movs	r2, #32
24005482:	21e7      	movs	r1, #231	; 0xe7
24005484:	4618      	mov	r0, r3
24005486:	f015 fab7 	bl	2401a9f8 <memset>
	if(addr >= 0x24000000 && addr < 0x24080000){
2400548a:	f100 425c 	add.w	r2, r0, #3690987520	; 0xdc000000
    				  bootloaderFlag[i] = 231;
2400548e:	4603      	mov	r3, r0
	if(addr >= 0x24000000 && addr < 0x24080000){
24005490:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
24005494:	d252      	bcs.n	2400553c <HAL_GPIO_EXTI_Callback+0xe4>
			temp = *flush_ptr;
24005496:	e9d0 0100 	ldrd	r0, r1, [r0]
2400549a:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
2400549e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
240054a2:	e9c3 0100 	strd	r0, r1, [r3]
			temp = *flush_ptr;
240054a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
240054aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
240054ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
240054b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
			temp = *flush_ptr;
240054b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
240054ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
240054be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
240054c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
			temp = *flush_ptr;
240054c6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
240054ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
240054ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
240054d2:	e9c3 0106 	strd	r0, r1, [r3, #24]
				  buttonPressed = 0;
240054d6:	2300      	movs	r3, #0
				  HAL_Delay(100);
240054d8:	2064      	movs	r0, #100	; 0x64
				  buttonPressed = 0;
240054da:	7023      	strb	r3, [r4, #0]
				  HAL_Delay(100);
240054dc:	f000 fdf8 	bl	240060d0 <HAL_Delay>
}
240054e0:	b004      	add	sp, #16
240054e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				  HAL_NVIC_SystemReset();
240054e6:	f000 be7d 	b.w	240061e4 <HAL_NVIC_SystemReset>
		if(boardNumber != 0)
240054ea:	4b28      	ldr	r3, [pc, #160]	; (2400558c <HAL_GPIO_EXTI_Callback+0x134>)
240054ec:	781b      	ldrb	r3, [r3, #0]
240054ee:	2b00      	cmp	r3, #0
240054f0:	d0b9      	beq.n	24005466 <HAL_GPIO_EXTI_Callback+0xe>
    	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
240054f2:	4601      	mov	r1, r0
240054f4:	4826      	ldr	r0, [pc, #152]	; (24005590 <HAL_GPIO_EXTI_Callback+0x138>)
240054f6:	f002 fe59 	bl	240081ac <HAL_GPIO_ReadPin>
240054fa:	2801      	cmp	r0, #1
240054fc:	d1b3      	bne.n	24005466 <HAL_GPIO_EXTI_Callback+0xe>
    		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
240054fe:	4c24      	ldr	r4, [pc, #144]	; (24005590 <HAL_GPIO_EXTI_Callback+0x138>)
24005500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24005504:	4620      	mov	r0, r4
24005506:	f002 fe51 	bl	240081ac <HAL_GPIO_ReadPin>
2400550a:	2801      	cmp	r0, #1
2400550c:	d0f8      	beq.n	24005500 <HAL_GPIO_EXTI_Callback+0xa8>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
2400550e:	2201      	movs	r2, #1
24005510:	2140      	movs	r1, #64	; 0x40
24005512:	4820      	ldr	r0, [pc, #128]	; (24005594 <HAL_GPIO_EXTI_Callback+0x13c>)
    		  diskBusy = 1;
24005514:	2401      	movs	r4, #1
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
24005516:	f002 fe4f 	bl	240081b8 <HAL_GPIO_WritePin>
    		  diskBusy = 1;
2400551a:	481f      	ldr	r0, [pc, #124]	; (24005598 <HAL_GPIO_EXTI_Callback+0x140>)
    		  presetReady = 0;
2400551c:	4b1f      	ldr	r3, [pc, #124]	; (2400559c <HAL_GPIO_EXTI_Callback+0x144>)
2400551e:	2100      	movs	r1, #0
    		  diskBusy = 1;
24005520:	7004      	strb	r4, [r0, #0]
    		  HAL_I2C_Slave_Receive_DMA(&hi2c1, buffer, 4096);
24005522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    		  presetReady = 0;
24005526:	6019      	str	r1, [r3, #0]
    		  HAL_I2C_Slave_Receive_DMA(&hi2c1, buffer, 4096);
24005528:	481d      	ldr	r0, [pc, #116]	; (240055a0 <HAL_GPIO_EXTI_Callback+0x148>)
2400552a:	491e      	ldr	r1, [pc, #120]	; (240055a4 <HAL_GPIO_EXTI_Callback+0x14c>)
}
2400552c:	b004      	add	sp, #16
2400552e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    		  HAL_I2C_Slave_Receive_DMA(&hi2c1, buffer, 4096);
24005532:	f003 b9f3 	b.w	2400891c <HAL_I2C_Slave_Receive_DMA>
    		  buttonPressed = 1;
24005536:	4b13      	ldr	r3, [pc, #76]	; (24005584 <HAL_GPIO_EXTI_Callback+0x12c>)
24005538:	7018      	strb	r0, [r3, #0]
2400553a:	e794      	b.n	24005466 <HAL_GPIO_EXTI_Callback+0xe>
			temp = *flush_ptr;
2400553c:	6802      	ldr	r2, [r0, #0]
2400553e:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005540:	9a01      	ldr	r2, [sp, #4]
24005542:	6002      	str	r2, [r0, #0]
			temp = *flush_ptr;
24005544:	6842      	ldr	r2, [r0, #4]
24005546:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005548:	9a01      	ldr	r2, [sp, #4]
2400554a:	6042      	str	r2, [r0, #4]
			temp = *flush_ptr;
2400554c:	6882      	ldr	r2, [r0, #8]
2400554e:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005550:	9a01      	ldr	r2, [sp, #4]
24005552:	6082      	str	r2, [r0, #8]
			temp = *flush_ptr;
24005554:	68c2      	ldr	r2, [r0, #12]
24005556:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005558:	9a01      	ldr	r2, [sp, #4]
2400555a:	60c2      	str	r2, [r0, #12]
			temp = *flush_ptr;
2400555c:	6902      	ldr	r2, [r0, #16]
2400555e:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005560:	9a01      	ldr	r2, [sp, #4]
24005562:	6102      	str	r2, [r0, #16]
			temp = *flush_ptr;
24005564:	6942      	ldr	r2, [r0, #20]
24005566:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005568:	9a01      	ldr	r2, [sp, #4]
2400556a:	6142      	str	r2, [r0, #20]
			temp = *flush_ptr;
2400556c:	6982      	ldr	r2, [r0, #24]
2400556e:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005570:	9a01      	ldr	r2, [sp, #4]
24005572:	6182      	str	r2, [r0, #24]
			temp = *flush_ptr;
24005574:	69c2      	ldr	r2, [r0, #28]
24005576:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24005578:	9a01      	ldr	r2, [sp, #4]
2400557a:	61c2      	str	r2, [r0, #28]
		}while(flush_ptr != end_ptr);
2400557c:	e7ab      	b.n	240054d6 <HAL_GPIO_EXTI_Callback+0x7e>
2400557e:	bf00      	nop
24005580:	58021800 	.word	0x58021800
24005584:	20017c7c 	.word	0x20017c7c
24005588:	38800000 	.word	0x38800000
2400558c:	20017c79 	.word	0x20017c79
24005590:	58020400 	.word	0x58020400
24005594:	58020000 	.word	0x58020000
24005598:	20017cb8 	.word	0x20017cb8
2400559c:	20005618 	.word	0x20005618
240055a0:	20017bd0 	.word	0x20017bd0
240055a4:	30000480 	.word	0x30000480

240055a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
240055a8:	4770      	bx	lr
240055aa:	bf00      	nop

240055ac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
240055ac:	b510      	push	{r4, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
240055ae:	480b      	ldr	r0, [pc, #44]	; (240055dc <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 1;
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
240055b0:	2300      	movs	r3, #0
  hqspi.Init.ClockPrescaler = 1;
240055b2:	2201      	movs	r2, #1
  hqspi.Instance = QUADSPI;
240055b4:	4c0a      	ldr	r4, [pc, #40]	; (240055e0 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.FlashSize = 19;
240055b6:	2113      	movs	r1, #19
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
240055b8:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
240055ba:	6082      	str	r2, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
240055bc:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
240055be:	e9c0 4200 	strd	r4, r2, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
240055c2:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
240055c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
240055ca:	f004 f9e3 	bl	24009994 <HAL_QSPI_Init>
240055ce:	b900      	cbnz	r0, 240055d2 <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
240055d0:	bd10      	pop	{r4, pc}
240055d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240055d6:	f7ff bfe7 	b.w	240055a8 <Error_Handler>
240055da:	bf00      	nop
240055dc:	2001dd10 	.word	0x2001dd10
240055e0:	52005000 	.word	0x52005000

240055e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
240055e4:	b570      	push	{r4, r5, r6, lr}
240055e6:	b0ba      	sub	sp, #232	; 0xe8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240055e8:	2100      	movs	r1, #0
{
240055ea:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240055ec:	22c0      	movs	r2, #192	; 0xc0
240055ee:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240055f0:	9108      	str	r1, [sp, #32]
240055f2:	e9cd 1104 	strd	r1, r1, [sp, #16]
240055f6:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240055fa:	f015 f9fd 	bl	2401a9f8 <memset>
  if(qspiHandle->Instance==QUADSPI)
240055fe:	4b31      	ldr	r3, [pc, #196]	; (240056c4 <HAL_QSPI_MspInit+0xe0>)
24005600:	6822      	ldr	r2, [r4, #0]
24005602:	429a      	cmp	r2, r3
24005604:	d001      	beq.n	2400560a <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
24005606:	b03a      	add	sp, #232	; 0xe8
24005608:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
2400560a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
2400560e:	2500      	movs	r5, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24005610:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005612:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24005614:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24005618:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400561a:	f005 f8df 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
2400561e:	2800      	cmp	r0, #0
24005620:	d14d      	bne.n	240056be <HAL_QSPI_MspInit+0xda>
    __HAL_RCC_QSPI_CLK_ENABLE();
24005622:	4b29      	ldr	r3, [pc, #164]	; (240056c8 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24005624:	2040      	movs	r0, #64	; 0x40
24005626:	2102      	movs	r1, #2
24005628:	2400      	movs	r4, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
2400562a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2400562e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24005630:	260a      	movs	r6, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
24005632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24005636:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
2400563a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
2400563e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
24005642:	9201      	str	r2, [sp, #4]
24005644:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24005646:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400564a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400564e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24005652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005656:	f002 0240 	and.w	r2, r2, #64	; 0x40
2400565a:	9202      	str	r2, [sp, #8]
2400565c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
2400565e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005662:	f042 0220 	orr.w	r2, r2, #32
24005666:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400566a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
2400566e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005670:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24005674:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005678:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400567a:	a904      	add	r1, sp, #16
2400567c:	4813      	ldr	r0, [pc, #76]	; (240056cc <HAL_QSPI_MspInit+0xe8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
2400567e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24005680:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24005684:	f002 fc48 	bl	24007f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24005688:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
2400568c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400568e:	a904      	add	r1, sp, #16
24005690:	480f      	ldr	r0, [pc, #60]	; (240056d0 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24005692:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24005696:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24005698:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2400569c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400569e:	f002 fc3b 	bl	24007f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
240056a2:	f44f 7240 	mov.w	r2, #768	; 0x300
240056a6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240056a8:	a904      	add	r1, sp, #16
240056aa:	4809      	ldr	r0, [pc, #36]	; (240056d0 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
240056ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
240056ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
240056b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240056b6:	f002 fc2f 	bl	24007f18 <HAL_GPIO_Init>
}
240056ba:	b03a      	add	sp, #232	; 0xe8
240056bc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
240056be:	f7ff ff73 	bl	240055a8 <Error_Handler>
240056c2:	e7ae      	b.n	24005622 <HAL_QSPI_MspInit+0x3e>
240056c4:	52005000 	.word	0x52005000
240056c8:	58024400 	.word	0x58024400
240056cc:	58021800 	.word	0x58021800
240056d0:	58021400 	.word	0x58021400

240056d4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
240056d4:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
240056d6:	4806      	ldr	r0, [pc, #24]	; (240056f0 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
240056d8:	2300      	movs	r3, #0
240056da:	4a06      	ldr	r2, [pc, #24]	; (240056f4 <MX_RNG_Init+0x20>)
240056dc:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
240056e0:	f006 fa62 	bl	2400bba8 <HAL_RNG_Init>
240056e4:	b900      	cbnz	r0, 240056e8 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
240056e6:	bd08      	pop	{r3, pc}
240056e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240056ec:	f7ff bf5c 	b.w	240055a8 <Error_Handler>
240056f0:	2001dd5c 	.word	0x2001dd5c
240056f4:	48021800 	.word	0x48021800

240056f8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
240056f8:	b510      	push	{r4, lr}
240056fa:	b0b2      	sub	sp, #200	; 0xc8
240056fc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240056fe:	22c0      	movs	r2, #192	; 0xc0
24005700:	2100      	movs	r1, #0
24005702:	a802      	add	r0, sp, #8
24005704:	f015 f978 	bl	2401a9f8 <memset>
  if(rngHandle->Instance==RNG)
24005708:	4b10      	ldr	r3, [pc, #64]	; (2400574c <HAL_RNG_MspInit+0x54>)
2400570a:	6822      	ldr	r2, [r4, #0]
2400570c:	429a      	cmp	r2, r3
2400570e:	d001      	beq.n	24005714 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24005710:	b032      	add	sp, #200	; 0xc8
24005712:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24005714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24005718:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400571a:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
2400571c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005720:	f005 f85c 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
24005724:	b970      	cbnz	r0, 24005744 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
24005726:	4b0a      	ldr	r3, [pc, #40]	; (24005750 <HAL_RNG_MspInit+0x58>)
24005728:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
2400572c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24005730:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24005734:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400573c:	9301      	str	r3, [sp, #4]
2400573e:	9b01      	ldr	r3, [sp, #4]
}
24005740:	b032      	add	sp, #200	; 0xc8
24005742:	bd10      	pop	{r4, pc}
      Error_Handler();
24005744:	f7ff ff30 	bl	240055a8 <Error_Handler>
24005748:	e7ed      	b.n	24005726 <HAL_RNG_MspInit+0x2e>
2400574a:	bf00      	nop
2400574c:	48021800 	.word	0x48021800
24005750:	58024400 	.word	0x58024400

24005754 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24005754:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24005756:	4817      	ldr	r0, [pc, #92]	; (240057b4 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24005758:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
2400575a:	4c17      	ldr	r4, [pc, #92]	; (240057b8 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
2400575c:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400575e:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24005760:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24005762:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24005764:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24005768:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
2400576a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
2400576c:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24005770:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24005774:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005778:	461a      	mov	r2, r3
2400577a:	f006 fc67 	bl	2400c04c <HAL_SAI_InitProtocol>
2400577e:	b990      	cbnz	r0, 240057a6 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24005780:	480e      	ldr	r0, [pc, #56]	; (240057bc <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24005782:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24005784:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24005786:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24005788:	4c0d      	ldr	r4, [pc, #52]	; (240057c0 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400578a:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
2400578c:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
2400578e:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24005790:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24005792:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24005794:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005798:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
2400579a:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400579e:	f006 fc55 	bl	2400c04c <HAL_SAI_InitProtocol>
240057a2:	b918      	cbnz	r0, 240057ac <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
240057a4:	bd10      	pop	{r4, pc}
    Error_Handler();
240057a6:	f7ff feff 	bl	240055a8 <Error_Handler>
240057aa:	e7e9      	b.n	24005780 <MX_SAI1_Init+0x2c>
}
240057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240057b0:	f7ff befa 	b.w	240055a8 <Error_Handler>
240057b4:	2001de64 	.word	0x2001de64
240057b8:	40015804 	.word	0x40015804
240057bc:	2001defc 	.word	0x2001defc
240057c0:	40015824 	.word	0x40015824
240057c4:	00000000 	.word	0x00000000

240057c8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
240057c8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
240057ca:	4a67      	ldr	r2, [pc, #412]	; (24005968 <HAL_SAI_MspInit+0x1a0>)
{
240057cc:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
240057ce:	6803      	ldr	r3, [r0, #0]
{
240057d0:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
240057d2:	4293      	cmp	r3, r2
240057d4:	d004      	beq.n	240057e0 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
240057d6:	4a65      	ldr	r2, [pc, #404]	; (2400596c <HAL_SAI_MspInit+0x1a4>)
240057d8:	4293      	cmp	r3, r2
240057da:	d050      	beq.n	2400587e <HAL_SAI_MspInit+0xb6>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
240057dc:	b00d      	add	sp, #52	; 0x34
240057de:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
240057e0:	4d63      	ldr	r5, [pc, #396]	; (24005970 <HAL_SAI_MspInit+0x1a8>)
240057e2:	682a      	ldr	r2, [r5, #0]
240057e4:	2a00      	cmp	r2, #0
240057e6:	f000 8086 	beq.w	240058f6 <HAL_SAI_MspInit+0x12e>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240057ea:	2074      	movs	r0, #116	; 0x74
240057ec:	2102      	movs	r1, #2
    SAI1_client ++;
240057ee:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240057f0:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240057f2:	ed9f 7b5b 	vldr	d7, [pc, #364]	; 24005960 <HAL_SAI_MspInit+0x198>
240057f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240057fa:	a906      	add	r1, sp, #24
240057fc:	485d      	ldr	r0, [pc, #372]	; (24005974 <HAL_SAI_MspInit+0x1ac>)
    SAI1_client ++;
240057fe:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24005800:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_a.Instance = DMA1_Stream1;
24005802:	4d5d      	ldr	r5, [pc, #372]	; (24005978 <HAL_SAI_MspInit+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24005804:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24005808:	f002 fb86 	bl	24007f18 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
2400580c:	495b      	ldr	r1, [pc, #364]	; (2400597c <HAL_SAI_MspInit+0x1b4>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
2400580e:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24005810:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24005812:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24005814:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24005816:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
2400581a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
2400581e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24005822:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24005826:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400582a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
2400582e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24005832:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24005836:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400583a:	2304      	movs	r3, #4
2400583c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24005840:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24005844:	f000 fe2a 	bl	2400649c <HAL_DMA_Init>
24005848:	2800      	cmp	r0, #0
2400584a:	f040 8086 	bne.w	2400595a <HAL_SAI_MspInit+0x192>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
2400584e:	2006      	movs	r0, #6
24005850:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24005854:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
24005858:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
2400585a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
2400585e:	a902      	add	r1, sp, #8
24005860:	4845      	ldr	r0, [pc, #276]	; (24005978 <HAL_SAI_MspInit+0x1b0>)
    pSyncConfig.SyncEnable = DISABLE;
24005862:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
24005866:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24005868:	f002 faec 	bl	24007e44 <HAL_DMAEx_ConfigMuxSync>
2400586c:	2800      	cmp	r0, #0
2400586e:	d171      	bne.n	24005954 <HAL_SAI_MspInit+0x18c>
    if(saiHandle->Instance==SAI1_Block_B)
24005870:	4a3e      	ldr	r2, [pc, #248]	; (2400596c <HAL_SAI_MspInit+0x1a4>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24005872:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24005874:	6823      	ldr	r3, [r4, #0]
24005876:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24005878:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
2400587c:	d1ae      	bne.n	240057dc <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
2400587e:	4d3c      	ldr	r5, [pc, #240]	; (24005970 <HAL_SAI_MspInit+0x1a8>)
24005880:	682a      	ldr	r2, [r5, #0]
24005882:	2a00      	cmp	r2, #0
24005884:	d050      	beq.n	24005928 <HAL_SAI_MspInit+0x160>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24005886:	2008      	movs	r0, #8
24005888:	2102      	movs	r1, #2
    SAI1_client ++;
2400588a:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400588c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
2400588e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 24005960 <HAL_SAI_MspInit+0x198>
24005892:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24005896:	a906      	add	r1, sp, #24
24005898:	4836      	ldr	r0, [pc, #216]	; (24005974 <HAL_SAI_MspInit+0x1ac>)
    SAI1_client ++;
2400589a:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400589c:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_b.Instance = DMA1_Stream2;
2400589e:	4d38      	ldr	r5, [pc, #224]	; (24005980 <HAL_SAI_MspInit+0x1b8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
240058a0:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240058a4:	f002 fb38 	bl	24007f18 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
240058a8:	4936      	ldr	r1, [pc, #216]	; (24005984 <HAL_SAI_MspInit+0x1bc>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240058aa:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240058ac:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240058ae:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240058b0:	60eb      	str	r3, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
240058b2:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240058b4:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240058b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240058bc:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
240058be:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240058c2:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240058c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240058c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240058cc:	60a9      	str	r1, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240058ce:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
240058d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
240058d6:	f44f 7280 	mov.w	r2, #256	; 0x100
240058da:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240058de:	2304      	movs	r3, #4
240058e0:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240058e2:	f000 fddb 	bl	2400649c <HAL_DMA_Init>
240058e6:	b9e0      	cbnz	r0, 24005922 <HAL_SAI_MspInit+0x15a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
240058e8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
240058ec:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
240058ee:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
240058f2:	b00d      	add	sp, #52	; 0x34
240058f4:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
240058f6:	4b24      	ldr	r3, [pc, #144]	; (24005988 <HAL_SAI_MspInit+0x1c0>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
240058f8:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
240058fa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
240058fe:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
24005902:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
24005906:	2104      	movs	r1, #4
       __HAL_RCC_SAI1_CLK_ENABLE();
24005908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
2400590c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24005910:	9300      	str	r3, [sp, #0]
24005912:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
24005914:	f000 fc06 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
24005918:	2057      	movs	r0, #87	; 0x57
2400591a:	f000 fc41 	bl	240061a0 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
2400591e:	682a      	ldr	r2, [r5, #0]
24005920:	e763      	b.n	240057ea <HAL_SAI_MspInit+0x22>
      Error_Handler();
24005922:	f7ff fe41 	bl	240055a8 <Error_Handler>
24005926:	e7df      	b.n	240058e8 <HAL_SAI_MspInit+0x120>
       __HAL_RCC_SAI1_CLK_ENABLE();
24005928:	4b17      	ldr	r3, [pc, #92]	; (24005988 <HAL_SAI_MspInit+0x1c0>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
2400592a:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
2400592c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
24005930:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
24005934:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
      HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
24005938:	2104      	movs	r1, #4
       __HAL_RCC_SAI1_CLK_ENABLE();
2400593a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
2400593e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24005942:	9301      	str	r3, [sp, #4]
24005944:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(SAI1_IRQn, 4, 0);
24005946:	f000 fbed 	bl	24006124 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
2400594a:	2057      	movs	r0, #87	; 0x57
2400594c:	f000 fc28 	bl	240061a0 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
24005950:	682a      	ldr	r2, [r5, #0]
24005952:	e798      	b.n	24005886 <HAL_SAI_MspInit+0xbe>
      Error_Handler();
24005954:	f7ff fe28 	bl	240055a8 <Error_Handler>
24005958:	e78a      	b.n	24005870 <HAL_SAI_MspInit+0xa8>
      Error_Handler();
2400595a:	f7ff fe25 	bl	240055a8 <Error_Handler>
2400595e:	e776      	b.n	2400584e <HAL_SAI_MspInit+0x86>
24005960:	00000000 	.word	0x00000000
24005964:	00000002 	.word	0x00000002
24005968:	40015804 	.word	0x40015804
2400596c:	40015824 	.word	0x40015824
24005970:	2001dd70 	.word	0x2001dd70
24005974:	58021000 	.word	0x58021000
24005978:	2001dd74 	.word	0x2001dd74
2400597c:	40020028 	.word	0x40020028
24005980:	2001ddec 	.word	0x2001ddec
24005984:	40020040 	.word	0x40020040
24005988:	58024400 	.word	0x58024400

2400598c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
2400598c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
2400598e:	4b07      	ldr	r3, [pc, #28]	; (240059ac <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24005990:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
24005992:	4c07      	ldr	r4, [pc, #28]	; (240059b0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24005994:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24005998:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
2400599a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400599e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
240059a2:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
240059a6:	f85d 4b04 	ldr.w	r4, [sp], #4
240059aa:	4770      	bx	lr
240059ac:	2001df94 	.word	0x2001df94
240059b0:	52007000 	.word	0x52007000

240059b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
240059b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
240059b6:	4b2b      	ldr	r3, [pc, #172]	; (24005a64 <HAL_SD_MspInit+0xb0>)
{
240059b8:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
240059ba:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240059bc:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
240059be:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240059c0:	9408      	str	r4, [sp, #32]
240059c2:	e9cd 4404 	strd	r4, r4, [sp, #16]
240059c6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
240059ca:	d001      	beq.n	240059d0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
240059cc:	b00b      	add	sp, #44	; 0x2c
240059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240059d0:	4b25      	ldr	r3, [pc, #148]	; (24005a68 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240059d2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240059d4:	2601      	movs	r6, #1
240059d6:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240059d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240059dc:	4823      	ldr	r0, [pc, #140]	; (24005a6c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240059de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240059e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240059e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240059ea:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240059ee:	9201      	str	r2, [sp, #4]
240059f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240059f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240059f6:	f042 0204 	orr.w	r2, r2, #4
240059fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240059fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005a02:	f002 0204 	and.w	r2, r2, #4
24005a06:	9202      	str	r2, [sp, #8]
24005a08:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24005a0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005a0e:	f042 0208 	orr.w	r2, r2, #8
24005a12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24005a16:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
24005a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24005a1e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24005a20:	f003 0308 	and.w	r3, r3, #8
24005a24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24005a26:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
24005a28:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24005a2a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24005a2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
24005a30:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24005a34:	f002 fa70 	bl	24007f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24005a38:	2302      	movs	r3, #2
24005a3a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24005a3c:	a904      	add	r1, sp, #16
24005a3e:	480c      	ldr	r0, [pc, #48]	; (24005a70 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24005a40:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24005a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
24005a46:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24005a4a:	f002 fa65 	bl	24007f18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
24005a4e:	4622      	mov	r2, r4
24005a50:	2102      	movs	r1, #2
24005a52:	2031      	movs	r0, #49	; 0x31
24005a54:	f000 fb66 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
24005a58:	2031      	movs	r0, #49	; 0x31
24005a5a:	f000 fba1 	bl	240061a0 <HAL_NVIC_EnableIRQ>
}
24005a5e:	b00b      	add	sp, #44	; 0x2c
24005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
24005a62:	bf00      	nop
24005a64:	52007000 	.word	0x52007000
24005a68:	58024400 	.word	0x58024400
24005a6c:	58020800 	.word	0x58020800
24005a70:	58020c00 	.word	0x58020c00
24005a74:	00000000 	.word	0x00000000

24005a78 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24005a78:	4813      	ldr	r0, [pc, #76]	; (24005ac8 <MX_SPI1_Init+0x50>)
24005a7a:	4a14      	ldr	r2, [pc, #80]	; (24005acc <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24005a7c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24005ac0 <MX_SPI1_Init+0x48>
{
24005a80:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
24005a82:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
24005a84:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24005a86:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24005a88:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24005a8a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24005a8c:	ed80 7b08 	vstr	d7, [r0, #32]
24005a90:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
24005a94:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24005a98:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24005a9c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24005aa0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24005aa4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24005aa8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24005aac:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24005ab0:	f007 ff84 	bl	2400d9bc <HAL_SPI_Init>
24005ab4:	b900      	cbnz	r0, 24005ab8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24005ab6:	bd08      	pop	{r3, pc}
24005ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24005abc:	f7ff bd74 	b.w	240055a8 <Error_Handler>
	...
24005ac8:	2001e178 	.word	0x2001e178
24005acc:	40013000 	.word	0x40013000

24005ad0 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24005ad0:	4815      	ldr	r0, [pc, #84]	; (24005b28 <MX_SPI6_Init+0x58>)
24005ad2:	4a16      	ldr	r2, [pc, #88]	; (24005b2c <MX_SPI6_Init+0x5c>)
{
24005ad4:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24005ad6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24005b20 <MX_SPI6_Init+0x50>
  hspi6.Instance = SPI6;
24005ada:	6002      	str	r2, [r0, #0]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
24005adc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi6.Init.Mode = SPI_MODE_SLAVE;
24005ae0:	2300      	movs	r3, #0
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
24005ae2:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24005ae4:	2207      	movs	r2, #7
  hspi6.Init.Mode = SPI_MODE_SLAVE;
24005ae6:	6043      	str	r3, [r0, #4]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
24005ae8:	6103      	str	r3, [r0, #16]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24005aea:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24005aec:	ed80 7b08 	vstr	d7, [r0, #32]
24005af0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24005af4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24005af8:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24005afc:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24005b00:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24005b04:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24005b08:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24005b0c:	f007 ff56 	bl	2400d9bc <HAL_SPI_Init>
24005b10:	b900      	cbnz	r0, 24005b14 <MX_SPI6_Init+0x44>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
24005b12:	bd08      	pop	{r3, pc}
24005b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24005b18:	f7ff bd46 	b.w	240055a8 <Error_Handler>
24005b1c:	f3af 8000 	nop.w
	...
24005b28:	2001e218 	.word	0x2001e218
24005b2c:	58001400 	.word	0x58001400

24005b30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
24005b32:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24005b34:	2100      	movs	r1, #0
{
24005b36:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24005b38:	22c0      	movs	r2, #192	; 0xc0
24005b3a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24005b3c:	910a      	str	r1, [sp, #40]	; 0x28
24005b3e:	e9cd 1106 	strd	r1, r1, [sp, #24]
24005b42:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24005b46:	f014 ff57 	bl	2401a9f8 <memset>
  if(spiHandle->Instance==SPI1)
24005b4a:	6823      	ldr	r3, [r4, #0]
24005b4c:	4a7f      	ldr	r2, [pc, #508]	; (24005d4c <HAL_SPI_MspInit+0x21c>)
24005b4e:	4293      	cmp	r3, r2
24005b50:	d005      	beq.n	24005b5e <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
24005b52:	4a7f      	ldr	r2, [pc, #508]	; (24005d50 <HAL_SPI_MspInit+0x220>)
24005b54:	4293      	cmp	r3, r2
24005b56:	f000 8095 	beq.w	24005c84 <HAL_SPI_MspInit+0x154>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24005b5a:	b03d      	add	sp, #244	; 0xf4
24005b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24005b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24005b62:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005b64:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24005b66:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005b6a:	f004 fe37 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
24005b6e:	2800      	cmp	r0, #0
24005b70:	f040 80e2 	bne.w	24005d38 <HAL_SPI_MspInit+0x208>
    __HAL_RCC_SPI1_CLK_ENABLE();
24005b74:	4b77      	ldr	r3, [pc, #476]	; (24005d54 <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005b76:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24005b78:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005b7a:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
24005b7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24005b80:	4875      	ldr	r0, [pc, #468]	; (24005d58 <HAL_SPI_MspInit+0x228>)
    __HAL_RCC_SPI1_CLK_ENABLE();
24005b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24005b86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
24005b8a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24005b8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24005b92:	9201      	str	r2, [sp, #4]
24005b94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24005b96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005b9a:	f042 0202 	orr.w	r2, r2, #2
24005b9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24005ba2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005ba6:	f002 0202 	and.w	r2, r2, #2
24005baa:	9202      	str	r2, [sp, #8]
24005bac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24005bae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24005bb6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005bba:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
24005bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24005bc0:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
24005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
24005bc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005bc8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
24005bca:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24005bcc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005bce:	e9cd 2306 	strd	r2, r3, [sp, #24]
24005bd2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24005bd6:	f002 f99f 	bl	24007f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24005bda:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24005bde:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24005be0:	a906      	add	r1, sp, #24
24005be2:	485e      	ldr	r0, [pc, #376]	; (24005d5c <HAL_SPI_MspInit+0x22c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24005be4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24005be6:	e9cd 2306 	strd	r2, r3, [sp, #24]
24005bea:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24005bee:	f002 f993 	bl	24007f18 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
24005bf2:	4e5b      	ldr	r6, [pc, #364]	; (24005d60 <HAL_SPI_MspInit+0x230>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24005bf4:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
24005bf6:	495b      	ldr	r1, [pc, #364]	; (24005d64 <HAL_SPI_MspInit+0x234>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24005bf8:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24005bfa:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24005bfc:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24005bfe:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24005c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
24005c06:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24005c0a:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
24005c0e:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
24005c10:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005c14:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24005c16:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
24005c1a:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005c1e:	e9c6 1208 	strd	r1, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24005c22:	f000 fc3b 	bl	2400649c <HAL_DMA_Init>
24005c26:	2800      	cmp	r0, #0
24005c28:	f040 8083 	bne.w	24005d32 <HAL_SPI_MspInit+0x202>
    hdma_spi1_tx.Instance = DMA1_Stream0;
24005c2c:	4d4e      	ldr	r5, [pc, #312]	; (24005d68 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24005c2e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
24005c30:	494e      	ldr	r1, [pc, #312]	; (24005d6c <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24005c32:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24005c34:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24005c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24005c3a:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24005c3c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24005c3e:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
24005c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24005c44:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24005c46:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
24005c4a:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005c4c:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24005c4e:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24005c50:	67e6      	str	r6, [r4, #124]	; 0x7c
24005c52:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24005c54:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24005c56:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24005c58:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24005c5a:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24005c5c:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24005c5e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24005c60:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005c62:	626a      	str	r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24005c64:	f000 fc1a 	bl	2400649c <HAL_DMA_Init>
24005c68:	2800      	cmp	r0, #0
24005c6a:	d15f      	bne.n	24005d2c <HAL_SPI_MspInit+0x1fc>
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
24005c6c:	2200      	movs	r2, #0
24005c6e:	2103      	movs	r1, #3
24005c70:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
24005c72:	67a5      	str	r5, [r4, #120]	; 0x78
24005c74:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
24005c76:	f000 fa55 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24005c7a:	2023      	movs	r0, #35	; 0x23
24005c7c:	f000 fa90 	bl	240061a0 <HAL_NVIC_EnableIRQ>
}
24005c80:	b03d      	add	sp, #244	; 0xf4
24005c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24005c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24005c88:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005c8a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24005c8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005c90:	f004 fda4 	bl	2400a7dc <HAL_RCCEx_PeriphCLKConfig>
24005c94:	2800      	cmp	r0, #0
24005c96:	d152      	bne.n	24005d3e <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI6_CLK_ENABLE();
24005c98:	4b2e      	ldr	r3, [pc, #184]	; (24005d54 <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24005c9a:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24005c9c:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
24005c9e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24005ca2:	f042 0220 	orr.w	r2, r2, #32
24005ca6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24005caa:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24005cae:	f002 0220 	and.w	r2, r2, #32
24005cb2:	9204      	str	r2, [sp, #16]
24005cb4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24005cb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005cba:	f042 0201 	orr.w	r2, r2, #1
24005cbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
24005cc2:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
24005cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24005cc8:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
24005cca:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24005cce:	4828      	ldr	r0, [pc, #160]	; (24005d70 <HAL_SPI_MspInit+0x240>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
24005cd0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
24005cd2:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
24005cd4:	9d05      	ldr	r5, [sp, #20]
    hdma_spi6_rx.Instance = BDMA_Channel0;
24005cd6:	4d27      	ldr	r5, [pc, #156]	; (24005d74 <HAL_SPI_MspInit+0x244>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
24005cd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
24005cdc:	2200      	movs	r2, #0
24005cde:	2302      	movs	r3, #2
24005ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24005ce4:	f002 f918 	bl	24007f18 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24005ce8:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24005cea:	4923      	ldr	r1, [pc, #140]	; (24005d78 <HAL_SPI_MspInit+0x248>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24005cec:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
24005cee:	4628      	mov	r0, r5
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24005cf0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24005cf4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24005cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
24005cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24005d00:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24005d04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24005d08:	6129      	str	r1, [r5, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24005d0a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
24005d0e:	f000 fbc5 	bl	2400649c <HAL_DMA_Init>
24005d12:	b9b8      	cbnz	r0, 24005d44 <HAL_SPI_MspInit+0x214>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
24005d14:	2200      	movs	r2, #0
24005d16:	2105      	movs	r1, #5
24005d18:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24005d1a:	67e5      	str	r5, [r4, #124]	; 0x7c
24005d1c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
24005d1e:	f000 fa01 	bl	24006124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
24005d22:	2056      	movs	r0, #86	; 0x56
24005d24:	f000 fa3c 	bl	240061a0 <HAL_NVIC_EnableIRQ>
}
24005d28:	b03d      	add	sp, #244	; 0xf4
24005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24005d2c:	f7ff fc3c 	bl	240055a8 <Error_Handler>
24005d30:	e79c      	b.n	24005c6c <HAL_SPI_MspInit+0x13c>
      Error_Handler();
24005d32:	f7ff fc39 	bl	240055a8 <Error_Handler>
24005d36:	e779      	b.n	24005c2c <HAL_SPI_MspInit+0xfc>
      Error_Handler();
24005d38:	f7ff fc36 	bl	240055a8 <Error_Handler>
24005d3c:	e71a      	b.n	24005b74 <HAL_SPI_MspInit+0x44>
      Error_Handler();
24005d3e:	f7ff fc33 	bl	240055a8 <Error_Handler>
24005d42:	e7a9      	b.n	24005c98 <HAL_SPI_MspInit+0x168>
      Error_Handler();
24005d44:	f7ff fc30 	bl	240055a8 <Error_Handler>
24005d48:	e7e4      	b.n	24005d14 <HAL_SPI_MspInit+0x1e4>
24005d4a:	bf00      	nop
24005d4c:	40013000 	.word	0x40013000
24005d50:	58001400 	.word	0x58001400
24005d54:	58024400 	.word	0x58024400
24005d58:	58020400 	.word	0x58020400
24005d5c:	58021800 	.word	0x58021800
24005d60:	2001e010 	.word	0x2001e010
24005d64:	400200a0 	.word	0x400200a0
24005d68:	2001e088 	.word	0x2001e088
24005d6c:	40020010 	.word	0x40020010
24005d70:	58020000 	.word	0x58020000
24005d74:	2001e100 	.word	0x2001e100
24005d78:	58025408 	.word	0x58025408

24005d7c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24005d7c:	e7fe      	b.n	24005d7c <Default_Handler>
24005d7e:	bf00      	nop

24005d80 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24005d80:	f8df d060 	ldr.w	sp, [pc, #96]	; 24005de4 <Reset_Handler+0x64>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24005d84:	480f      	ldr	r0, [pc, #60]	; (24005dc4 <Reset_Handler+0x44>)
24005d86:	4a10      	ldr	r2, [pc, #64]	; (24005dc8 <Reset_Handler+0x48>)
24005d88:	4290      	cmp	r0, r2
24005d8a:	d003      	beq.n	24005d94 <Reset_Handler+0x14>
		*pDest = *pSource;
24005d8c:	1a12      	subs	r2, r2, r0
24005d8e:	490f      	ldr	r1, [pc, #60]	; (24005dcc <Reset_Handler+0x4c>)
24005d90:	f014 fe24 	bl	2401a9dc <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24005d94:	480e      	ldr	r0, [pc, #56]	; (24005dd0 <Reset_Handler+0x50>)
24005d96:	4a0f      	ldr	r2, [pc, #60]	; (24005dd4 <Reset_Handler+0x54>)
24005d98:	4290      	cmp	r0, r2
24005d9a:	d003      	beq.n	24005da4 <Reset_Handler+0x24>
		*pDest = 0;
24005d9c:	1a12      	subs	r2, r2, r0
24005d9e:	2100      	movs	r1, #0
24005da0:	f014 fe2a 	bl	2401a9f8 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24005da4:	480c      	ldr	r0, [pc, #48]	; (24005dd8 <Reset_Handler+0x58>)
24005da6:	4a0d      	ldr	r2, [pc, #52]	; (24005ddc <Reset_Handler+0x5c>)
24005da8:	4290      	cmp	r0, r2
24005daa:	d003      	beq.n	24005db4 <Reset_Handler+0x34>
		*pDest = *pSource;
24005dac:	1a12      	subs	r2, r2, r0
24005dae:	490c      	ldr	r1, [pc, #48]	; (24005de0 <Reset_Handler+0x60>)
24005db0:	f014 fe14 	bl	2401a9dc <memcpy>
	SystemInit();
24005db4:	f000 f8ac 	bl	24005f10 <SystemInit>
	__libc_init_array();
24005db8:	f014 fdd2 	bl	2401a960 <__libc_init_array>
	(void)main();
24005dbc:	f7fe ff66 	bl	24004c8c <main>
	for (;;) ;
24005dc0:	e7fe      	b.n	24005dc0 <Reset_Handler+0x40>
24005dc2:	bf00      	nop
24005dc4:	20000000 	.word	0x20000000
24005dc8:	20000848 	.word	0x20000848
24005dcc:	24035fd0 	.word	0x24035fd0
24005dd0:	20000848 	.word	0x20000848
24005dd4:	2001e954 	.word	0x2001e954
24005dd8:	00000400 	.word	0x00000400
24005ddc:	00005c60 	.word	0x00005c60
24005de0:	24036818 	.word	0x24036818
24005de4:	20020000 	.word	0x20020000

24005de8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24005de8:	4b07      	ldr	r3, [pc, #28]	; (24005e08 <HAL_MspInit+0x20>)
{
24005dea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24005dec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24005df0:	f042 0202 	orr.w	r2, r2, #2
24005df4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24005df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24005dfc:	f003 0302 	and.w	r3, r3, #2
24005e00:	9301      	str	r3, [sp, #4]
24005e02:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24005e04:	b002      	add	sp, #8
24005e06:	4770      	bx	lr
24005e08:	58024400 	.word	0x58024400

24005e0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24005e0c:	e7fe      	b.n	24005e0c <NMI_Handler>
24005e0e:	bf00      	nop

24005e10 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24005e10:	e7fe      	b.n	24005e10 <HardFault_Handler>
24005e12:	bf00      	nop

24005e14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24005e14:	e7fe      	b.n	24005e14 <MemManage_Handler>
24005e16:	bf00      	nop

24005e18 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24005e18:	e7fe      	b.n	24005e18 <BusFault_Handler>
24005e1a:	bf00      	nop

24005e1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24005e1c:	e7fe      	b.n	24005e1c <UsageFault_Handler>
24005e1e:	bf00      	nop

24005e20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24005e20:	4770      	bx	lr
24005e22:	bf00      	nop

24005e24 <DebugMon_Handler>:
24005e24:	4770      	bx	lr
24005e26:	bf00      	nop

24005e28 <PendSV_Handler>:
24005e28:	4770      	bx	lr
24005e2a:	bf00      	nop

24005e2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24005e2c:	f000 b93e 	b.w	240060ac <HAL_IncTick>

24005e30 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
24005e30:	2008      	movs	r0, #8
24005e32:	f002 b9cf 	b.w	240081d4 <HAL_GPIO_EXTI_IRQHandler>
24005e36:	bf00      	nop

24005e38 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24005e38:	4801      	ldr	r0, [pc, #4]	; (24005e40 <DMA1_Stream0_IRQHandler+0x8>)
24005e3a:	f001 bb99 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e3e:	bf00      	nop
24005e40:	2001e088 	.word	0x2001e088

24005e44 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24005e44:	4801      	ldr	r0, [pc, #4]	; (24005e4c <DMA1_Stream1_IRQHandler+0x8>)
24005e46:	f001 bb93 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e4a:	bf00      	nop
24005e4c:	2001dd74 	.word	0x2001dd74

24005e50 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24005e50:	4801      	ldr	r0, [pc, #4]	; (24005e58 <DMA1_Stream2_IRQHandler+0x8>)
24005e52:	f001 bb8d 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e56:	bf00      	nop
24005e58:	2001ddec 	.word	0x2001ddec

24005e5c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24005e5c:	4801      	ldr	r0, [pc, #4]	; (24005e64 <DMA1_Stream3_IRQHandler+0x8>)
24005e5e:	f001 bb87 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e62:	bf00      	nop
24005e64:	20017ae0 	.word	0x20017ae0

24005e68 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
24005e68:	4801      	ldr	r0, [pc, #4]	; (24005e70 <DMA1_Stream4_IRQHandler+0x8>)
24005e6a:	f001 bb81 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e6e:	bf00      	nop
24005e70:	20017b58 	.word	0x20017b58

24005e74 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
24005e74:	4801      	ldr	r0, [pc, #4]	; (24005e7c <DMA1_Stream6_IRQHandler+0x8>)
24005e76:	f001 bb7b 	b.w	24007570 <HAL_DMA_IRQHandler>
24005e7a:	bf00      	nop
24005e7c:	2001e010 	.word	0x2001e010

24005e80 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
24005e80:	4801      	ldr	r0, [pc, #4]	; (24005e88 <I2C1_EV_IRQHandler+0x8>)
24005e82:	f002 bdbf 	b.w	24008a04 <HAL_I2C_EV_IRQHandler>
24005e86:	bf00      	nop
24005e88:	20017bd0 	.word	0x20017bd0

24005e8c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24005e8c:	4801      	ldr	r0, [pc, #4]	; (24005e94 <I2C1_ER_IRQHandler+0x8>)
24005e8e:	f003 bcb5 	b.w	240097fc <HAL_I2C_ER_IRQHandler>
24005e92:	bf00      	nop
24005e94:	20017bd0 	.word	0x20017bd0

24005e98 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24005e98:	4801      	ldr	r0, [pc, #4]	; (24005ea0 <I2C2_EV_IRQHandler+0x8>)
24005e9a:	f002 bdb3 	b.w	24008a04 <HAL_I2C_EV_IRQHandler>
24005e9e:	bf00      	nop
24005ea0:	20017c24 	.word	0x20017c24

24005ea4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
24005ea4:	4801      	ldr	r0, [pc, #4]	; (24005eac <I2C2_ER_IRQHandler+0x8>)
24005ea6:	f003 bca9 	b.w	240097fc <HAL_I2C_ER_IRQHandler>
24005eaa:	bf00      	nop
24005eac:	20017c24 	.word	0x20017c24

24005eb0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24005eb0:	4801      	ldr	r0, [pc, #4]	; (24005eb8 <SPI1_IRQHandler+0x8>)
24005eb2:	f008 b909 	b.w	2400e0c8 <HAL_SPI_IRQHandler>
24005eb6:	bf00      	nop
24005eb8:	2001e178 	.word	0x2001e178

24005ebc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
24005ebc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
24005ec0:	f002 b988 	b.w	240081d4 <HAL_GPIO_EXTI_IRQHandler>

24005ec4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
24005ec4:	4801      	ldr	r0, [pc, #4]	; (24005ecc <SDMMC1_IRQHandler+0x8>)
24005ec6:	f007 bb6b 	b.w	2400d5a0 <HAL_SD_IRQHandler>
24005eca:	bf00      	nop
24005ecc:	2001df94 	.word	0x2001df94

24005ed0 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24005ed0:	4801      	ldr	r0, [pc, #4]	; (24005ed8 <SPI6_IRQHandler+0x8>)
24005ed2:	f008 b8f9 	b.w	2400e0c8 <HAL_SPI_IRQHandler>
24005ed6:	bf00      	nop
24005ed8:	2001e218 	.word	0x2001e218

24005edc <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)
{
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24005edc:	4804      	ldr	r0, [pc, #16]	; (24005ef0 <SAI1_IRQHandler+0x14>)
{
24005ede:	b508      	push	{r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24005ee0:	f006 fba4 	bl	2400c62c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
24005ee4:	4803      	ldr	r0, [pc, #12]	; (24005ef4 <SAI1_IRQHandler+0x18>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
24005ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
24005eea:	f006 bb9f 	b.w	2400c62c <HAL_SAI_IRQHandler>
24005eee:	bf00      	nop
24005ef0:	2001de64 	.word	0x2001de64
24005ef4:	2001defc 	.word	0x2001defc

24005ef8 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24005ef8:	4801      	ldr	r0, [pc, #4]	; (24005f00 <DMAMUX1_OVR_IRQHandler+0x8>)
24005efa:	f001 bfdd 	b.w	24007eb8 <HAL_DMAEx_MUX_IRQHandler>
24005efe:	bf00      	nop
24005f00:	2001dd74 	.word	0x2001dd74

24005f04 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24005f04:	4801      	ldr	r0, [pc, #4]	; (24005f0c <BDMA_Channel0_IRQHandler+0x8>)
24005f06:	f001 bb33 	b.w	24007570 <HAL_DMA_IRQHandler>
24005f0a:	bf00      	nop
24005f0c:	2001e100 	.word	0x2001e100

24005f10 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24005f10:	4930      	ldr	r1, [pc, #192]	; (24005fd4 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24005f12:	4a31      	ldr	r2, [pc, #196]	; (24005fd8 <SystemInit+0xc8>)
{
24005f14:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24005f16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
24005f1a:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24005f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24005f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24005f24:	6813      	ldr	r3, [r2, #0]
24005f26:	f003 030f 	and.w	r3, r3, #15
24005f2a:	2b06      	cmp	r3, #6
24005f2c:	d805      	bhi.n	24005f3a <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24005f2e:	6813      	ldr	r3, [r2, #0]
24005f30:	f023 030f 	bic.w	r3, r3, #15
24005f34:	f043 0307 	orr.w	r3, r3, #7
24005f38:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24005f3a:	4b28      	ldr	r3, [pc, #160]	; (24005fdc <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24005f3c:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24005f3e:	4a28      	ldr	r2, [pc, #160]	; (24005fe0 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
24005f40:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24005f42:	4825      	ldr	r0, [pc, #148]	; (24005fd8 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24005f44:	f041 0101 	orr.w	r1, r1, #1
24005f48:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
24005f4a:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
24005f4c:	6819      	ldr	r1, [r3, #0]
24005f4e:	400a      	ands	r2, r1
24005f50:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24005f52:	6803      	ldr	r3, [r0, #0]
24005f54:	071b      	lsls	r3, r3, #28
24005f56:	d505      	bpl.n	24005f64 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24005f58:	6803      	ldr	r3, [r0, #0]
24005f5a:	f023 030f 	bic.w	r3, r3, #15
24005f5e:	f043 0307 	orr.w	r3, r3, #7
24005f62:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24005f64:	4b1d      	ldr	r3, [pc, #116]	; (24005fdc <SystemInit+0xcc>)
24005f66:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24005f68:	491e      	ldr	r1, [pc, #120]	; (24005fe4 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
24005f6a:	4c1f      	ldr	r4, [pc, #124]	; (24005fe8 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24005f6c:	481f      	ldr	r0, [pc, #124]	; (24005fec <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
24005f6e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24005f70:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24005f72:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24005f74:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24005f76:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24005f78:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24005f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24005f7c:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24005f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24005f80:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24005f82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24005f84:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005f86:	4c1a      	ldr	r4, [pc, #104]	; (24005ff0 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24005f88:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005f8c:	4919      	ldr	r1, [pc, #100]	; (24005ff4 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
24005f8e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
24005f90:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005f92:	6823      	ldr	r3, [r4, #0]
24005f94:	4019      	ands	r1, r3
24005f96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005f9a:	d203      	bcs.n	24005fa4 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24005f9c:	4b16      	ldr	r3, [pc, #88]	; (24005ff8 <SystemInit+0xe8>)
24005f9e:	2201      	movs	r2, #1
24005fa0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005fa4:	4b0d      	ldr	r3, [pc, #52]	; (24005fdc <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24005fa6:	f243 04d2 	movw	r4, #12498	; 0x30d2
24005faa:	4814      	ldr	r0, [pc, #80]	; (24005ffc <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005fac:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005fb0:	4908      	ldr	r1, [pc, #32]	; (24005fd4 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005fb2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
24005fb6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
24005fba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24005fbe:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005fc0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
24005fc4:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24005fc6:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005fc8:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24005fca:	b003      	add	sp, #12
24005fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
24005fd0:	4770      	bx	lr
24005fd2:	bf00      	nop
24005fd4:	e000ed00 	.word	0xe000ed00
24005fd8:	52002000 	.word	0x52002000
24005fdc:	58024400 	.word	0x58024400
24005fe0:	eaf6ed7f 	.word	0xeaf6ed7f
24005fe4:	01010280 	.word	0x01010280
24005fe8:	02020200 	.word	0x02020200
24005fec:	01ff0000 	.word	0x01ff0000
24005ff0:	5c001000 	.word	0x5c001000
24005ff4:	ffff0000 	.word	0xffff0000
24005ff8:	51008000 	.word	0x51008000
24005ffc:	52004000 	.word	0x52004000

24006000 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24006000:	4b0f      	ldr	r3, [pc, #60]	; (24006040 <HAL_InitTick+0x40>)
24006002:	781b      	ldrb	r3, [r3, #0]
24006004:	b90b      	cbnz	r3, 2400600a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24006006:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24006008:	4770      	bx	lr
{
2400600a:	b510      	push	{r4, lr}
2400600c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400600e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24006012:	4a0c      	ldr	r2, [pc, #48]	; (24006044 <HAL_InitTick+0x44>)
24006014:	fbb0 f3f3 	udiv	r3, r0, r3
24006018:	6810      	ldr	r0, [r2, #0]
2400601a:	fbb0 f0f3 	udiv	r0, r0, r3
2400601e:	f000 f8f3 	bl	24006208 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24006022:	2c0f      	cmp	r4, #15
24006024:	d800      	bhi.n	24006028 <HAL_InitTick+0x28>
24006026:	b108      	cbz	r0, 2400602c <HAL_InitTick+0x2c>
    return HAL_ERROR;
24006028:	2001      	movs	r0, #1
}
2400602a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2400602c:	2200      	movs	r2, #0
2400602e:	4621      	mov	r1, r4
24006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24006034:	f000 f876 	bl	24006124 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24006038:	4b03      	ldr	r3, [pc, #12]	; (24006048 <HAL_InitTick+0x48>)
2400603a:	2000      	movs	r0, #0
2400603c:	601c      	str	r4, [r3, #0]
}
2400603e:	bd10      	pop	{r4, pc}
24006040:	20000758 	.word	0x20000758
24006044:	20000750 	.word	0x20000750
24006048:	2000075c 	.word	0x2000075c

2400604c <HAL_Init>:
{
2400604c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400604e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24006050:	4c12      	ldr	r4, [pc, #72]	; (2400609c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24006052:	f000 f855 	bl	24006100 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24006056:	f004 f871 	bl	2400a13c <HAL_RCC_GetSysClockFreq>
2400605a:	4b11      	ldr	r3, [pc, #68]	; (240060a0 <HAL_Init+0x54>)
2400605c:	4911      	ldr	r1, [pc, #68]	; (240060a4 <HAL_Init+0x58>)
2400605e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24006060:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24006062:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24006066:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400606a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400606c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400606e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24006072:	490d      	ldr	r1, [pc, #52]	; (240060a8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24006074:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24006078:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400607a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
2400607e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24006080:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24006082:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24006084:	f7ff ffbc 	bl	24006000 <HAL_InitTick>
24006088:	b110      	cbz	r0, 24006090 <HAL_Init+0x44>
    return HAL_ERROR;
2400608a:	2401      	movs	r4, #1
}
2400608c:	4620      	mov	r0, r4
2400608e:	bd10      	pop	{r4, pc}
24006090:	4604      	mov	r4, r0
  HAL_MspInit();
24006092:	f7ff fea9 	bl	24005de8 <HAL_MspInit>
}
24006096:	4620      	mov	r0, r4
24006098:	bd10      	pop	{r4, pc}
2400609a:	bf00      	nop
2400609c:	20000754 	.word	0x20000754
240060a0:	58024400 	.word	0x58024400
240060a4:	2401d08c 	.word	0x2401d08c
240060a8:	20000750 	.word	0x20000750

240060ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
240060ac:	4a03      	ldr	r2, [pc, #12]	; (240060bc <HAL_IncTick+0x10>)
240060ae:	4b04      	ldr	r3, [pc, #16]	; (240060c0 <HAL_IncTick+0x14>)
240060b0:	6811      	ldr	r1, [r2, #0]
240060b2:	781b      	ldrb	r3, [r3, #0]
240060b4:	440b      	add	r3, r1
240060b6:	6013      	str	r3, [r2, #0]
}
240060b8:	4770      	bx	lr
240060ba:	bf00      	nop
240060bc:	2001e2b4 	.word	0x2001e2b4
240060c0:	20000758 	.word	0x20000758

240060c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
240060c4:	4b01      	ldr	r3, [pc, #4]	; (240060cc <HAL_GetTick+0x8>)
240060c6:	6818      	ldr	r0, [r3, #0]
}
240060c8:	4770      	bx	lr
240060ca:	bf00      	nop
240060cc:	2001e2b4 	.word	0x2001e2b4

240060d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240060d0:	b538      	push	{r3, r4, r5, lr}
240060d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240060d4:	f7ff fff6 	bl	240060c4 <HAL_GetTick>
240060d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240060da:	1c63      	adds	r3, r4, #1
240060dc:	d002      	beq.n	240060e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
240060de:	4b04      	ldr	r3, [pc, #16]	; (240060f0 <HAL_Delay+0x20>)
240060e0:	781b      	ldrb	r3, [r3, #0]
240060e2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240060e4:	f7ff ffee 	bl	240060c4 <HAL_GetTick>
240060e8:	1b43      	subs	r3, r0, r5
240060ea:	42a3      	cmp	r3, r4
240060ec:	d3fa      	bcc.n	240060e4 <HAL_Delay+0x14>
  {
  }
}
240060ee:	bd38      	pop	{r3, r4, r5, pc}
240060f0:	20000758 	.word	0x20000758

240060f4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
240060f4:	4b01      	ldr	r3, [pc, #4]	; (240060fc <HAL_GetREVID+0x8>)
240060f6:	6818      	ldr	r0, [r3, #0]
}
240060f8:	0c00      	lsrs	r0, r0, #16
240060fa:	4770      	bx	lr
240060fc:	5c001000 	.word	0x5c001000

24006100 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24006100:	4906      	ldr	r1, [pc, #24]	; (2400611c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24006102:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24006106:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24006108:	4b05      	ldr	r3, [pc, #20]	; (24006120 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2400610a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2400610c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24006110:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24006114:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24006116:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24006118:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
2400611a:	4770      	bx	lr
2400611c:	e000ed00 	.word	0xe000ed00
24006120:	05fa0000 	.word	0x05fa0000

24006124 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24006124:	4b1b      	ldr	r3, [pc, #108]	; (24006194 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24006126:	b500      	push	{lr}
24006128:	68db      	ldr	r3, [r3, #12]
2400612a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2400612e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24006132:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24006136:	f1be 0f04 	cmp.w	lr, #4
2400613a:	bf28      	it	cs
2400613c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24006140:	f1bc 0f06 	cmp.w	ip, #6
24006144:	d91a      	bls.n	2400617c <HAL_NVIC_SetPriority+0x58>
24006146:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24006148:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400614c:	fa0c fc03 	lsl.w	ip, ip, r3
24006150:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24006154:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24006158:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2400615a:	fa0c fc0e 	lsl.w	ip, ip, lr
2400615e:	ea21 010c 	bic.w	r1, r1, ip
24006162:	fa01 f103 	lsl.w	r1, r1, r3
24006166:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
2400616a:	db0a      	blt.n	24006182 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400616c:	0109      	lsls	r1, r1, #4
2400616e:	4b0a      	ldr	r3, [pc, #40]	; (24006198 <HAL_NVIC_SetPriority+0x74>)
24006170:	b2c9      	uxtb	r1, r1
24006172:	4403      	add	r3, r0
24006174:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24006178:	f85d fb04 	ldr.w	pc, [sp], #4
2400617c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400617e:	4613      	mov	r3, r2
24006180:	e7e8      	b.n	24006154 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24006182:	f000 000f 	and.w	r0, r0, #15
24006186:	0109      	lsls	r1, r1, #4
24006188:	4b04      	ldr	r3, [pc, #16]	; (2400619c <HAL_NVIC_SetPriority+0x78>)
2400618a:	b2c9      	uxtb	r1, r1
2400618c:	4403      	add	r3, r0
2400618e:	7619      	strb	r1, [r3, #24]
24006190:	f85d fb04 	ldr.w	pc, [sp], #4
24006194:	e000ed00 	.word	0xe000ed00
24006198:	e000e100 	.word	0xe000e100
2400619c:	e000ecfc 	.word	0xe000ecfc

240061a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
240061a0:	2800      	cmp	r0, #0
240061a2:	db07      	blt.n	240061b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240061a4:	2301      	movs	r3, #1
240061a6:	f000 011f 	and.w	r1, r0, #31
240061aa:	4a03      	ldr	r2, [pc, #12]	; (240061b8 <HAL_NVIC_EnableIRQ+0x18>)
240061ac:	0940      	lsrs	r0, r0, #5
240061ae:	408b      	lsls	r3, r1
240061b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
240061b4:	4770      	bx	lr
240061b6:	bf00      	nop
240061b8:	e000e100 	.word	0xe000e100

240061bc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
240061bc:	2800      	cmp	r0, #0
240061be:	db0d      	blt.n	240061dc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240061c0:	0943      	lsrs	r3, r0, #5
240061c2:	2201      	movs	r2, #1
240061c4:	f000 001f 	and.w	r0, r0, #31
240061c8:	4905      	ldr	r1, [pc, #20]	; (240061e0 <HAL_NVIC_DisableIRQ+0x24>)
240061ca:	3320      	adds	r3, #32
240061cc:	fa02 f000 	lsl.w	r0, r2, r0
240061d0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
240061d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240061d8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
240061dc:	4770      	bx	lr
240061de:	bf00      	nop
240061e0:	e000e100 	.word	0xe000e100

240061e4 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
240061e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
240061e8:	4905      	ldr	r1, [pc, #20]	; (24006200 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
240061ea:	4b06      	ldr	r3, [pc, #24]	; (24006204 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
240061ec:	68ca      	ldr	r2, [r1, #12]
240061ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
240061f2:	4313      	orrs	r3, r2
240061f4:	60cb      	str	r3, [r1, #12]
240061f6:	f3bf 8f4f 	dsb	sy
    __NOP();
240061fa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
240061fc:	e7fd      	b.n	240061fa <HAL_NVIC_SystemReset+0x16>
240061fe:	bf00      	nop
24006200:	e000ed00 	.word	0xe000ed00
24006204:	05fa0004 	.word	0x05fa0004

24006208 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24006208:	1e43      	subs	r3, r0, #1
2400620a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400620e:	d20c      	bcs.n	2400622a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24006210:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24006214:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24006216:	4906      	ldr	r1, [pc, #24]	; (24006230 <HAL_SYSTICK_Config+0x28>)
24006218:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2400621c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2400621e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24006220:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24006224:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24006226:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24006228:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
2400622a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
2400622c:	4770      	bx	lr
2400622e:	bf00      	nop
24006230:	e000ed00 	.word	0xe000ed00

24006234 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24006234:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24006238:	4b04      	ldr	r3, [pc, #16]	; (2400624c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
2400623a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2400623c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400623e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24006242:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24006244:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24006248:	4770      	bx	lr
2400624a:	bf00      	nop
2400624c:	e000ed00 	.word	0xe000ed00

24006250 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24006250:	4b06      	ldr	r3, [pc, #24]	; (2400626c <HAL_MPU_Enable+0x1c>)
24006252:	f040 0001 	orr.w	r0, r0, #1
24006256:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
2400625a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400625c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24006260:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24006262:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24006266:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2400626a:	4770      	bx	lr
2400626c:	e000ed00 	.word	0xe000ed00

24006270 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24006270:	7843      	ldrb	r3, [r0, #1]
24006272:	4a16      	ldr	r2, [pc, #88]	; (240062cc <HAL_MPU_ConfigRegion+0x5c>)
24006274:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24006278:	7803      	ldrb	r3, [r0, #0]
2400627a:	b313      	cbz	r3, 240062c2 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
2400627c:	6843      	ldr	r3, [r0, #4]
2400627e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24006282:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24006284:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24006288:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
2400628a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400628c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24006290:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24006294:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24006296:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24006298:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
2400629c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240062a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
240062a4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240062a6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
240062aa:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240062ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240062b2:	7a01      	ldrb	r1, [r0, #8]
240062b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
240062b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
240062bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
240062c0:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
240062c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
240062c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
240062ca:	4770      	bx	lr
240062cc:	e000ed00 	.word	0xe000ed00

240062d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240062d0:	4b34      	ldr	r3, [pc, #208]	; (240063a4 <DMA_CalcBaseAndBitshift+0xd4>)
240062d2:	4935      	ldr	r1, [pc, #212]	; (240063a8 <DMA_CalcBaseAndBitshift+0xd8>)
{
240062d4:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240062d6:	4d35      	ldr	r5, [pc, #212]	; (240063ac <DMA_CalcBaseAndBitshift+0xdc>)
240062d8:	6802      	ldr	r2, [r0, #0]
240062da:	4c35      	ldr	r4, [pc, #212]	; (240063b0 <DMA_CalcBaseAndBitshift+0xe0>)
240062dc:	42aa      	cmp	r2, r5
240062de:	bf18      	it	ne
240062e0:	429a      	cmpne	r2, r3
240062e2:	bf0c      	ite	eq
240062e4:	2301      	moveq	r3, #1
240062e6:	2300      	movne	r3, #0
240062e8:	428a      	cmp	r2, r1
240062ea:	bf08      	it	eq
240062ec:	f043 0301 	orreq.w	r3, r3, #1
240062f0:	3130      	adds	r1, #48	; 0x30
240062f2:	42a2      	cmp	r2, r4
240062f4:	bf08      	it	eq
240062f6:	f043 0301 	orreq.w	r3, r3, #1
240062fa:	3430      	adds	r4, #48	; 0x30
240062fc:	428a      	cmp	r2, r1
240062fe:	bf08      	it	eq
24006300:	f043 0301 	orreq.w	r3, r3, #1
24006304:	3130      	adds	r1, #48	; 0x30
24006306:	42a2      	cmp	r2, r4
24006308:	bf08      	it	eq
2400630a:	f043 0301 	orreq.w	r3, r3, #1
2400630e:	3430      	adds	r4, #48	; 0x30
24006310:	428a      	cmp	r2, r1
24006312:	bf08      	it	eq
24006314:	f043 0301 	orreq.w	r3, r3, #1
24006318:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400631c:	42a2      	cmp	r2, r4
2400631e:	bf08      	it	eq
24006320:	f043 0301 	orreq.w	r3, r3, #1
24006324:	f504 745c 	add.w	r4, r4, #880	; 0x370
24006328:	428a      	cmp	r2, r1
2400632a:	bf08      	it	eq
2400632c:	f043 0301 	orreq.w	r3, r3, #1
24006330:	3130      	adds	r1, #48	; 0x30
24006332:	42a2      	cmp	r2, r4
24006334:	bf08      	it	eq
24006336:	f043 0301 	orreq.w	r3, r3, #1
2400633a:	3430      	adds	r4, #48	; 0x30
2400633c:	428a      	cmp	r2, r1
2400633e:	bf08      	it	eq
24006340:	f043 0301 	orreq.w	r3, r3, #1
24006344:	3130      	adds	r1, #48	; 0x30
24006346:	42a2      	cmp	r2, r4
24006348:	bf08      	it	eq
2400634a:	f043 0301 	orreq.w	r3, r3, #1
2400634e:	3430      	adds	r4, #48	; 0x30
24006350:	428a      	cmp	r2, r1
24006352:	bf08      	it	eq
24006354:	f043 0301 	orreq.w	r3, r3, #1
24006358:	3130      	adds	r1, #48	; 0x30
2400635a:	42a2      	cmp	r2, r4
2400635c:	bf08      	it	eq
2400635e:	f043 0301 	orreq.w	r3, r3, #1
24006362:	428a      	cmp	r2, r1
24006364:	bf08      	it	eq
24006366:	f043 0301 	orreq.w	r3, r3, #1
2400636a:	b913      	cbnz	r3, 24006372 <DMA_CalcBaseAndBitshift+0xa2>
2400636c:	4b11      	ldr	r3, [pc, #68]	; (240063b4 <DMA_CalcBaseAndBitshift+0xe4>)
2400636e:	429a      	cmp	r2, r3
24006370:	d113      	bne.n	2400639a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006372:	b2d3      	uxtb	r3, r2
24006374:	4910      	ldr	r1, [pc, #64]	; (240063b8 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24006376:	4c11      	ldr	r4, [pc, #68]	; (240063bc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006378:	3b10      	subs	r3, #16
2400637a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
2400637e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24006380:	4b0f      	ldr	r3, [pc, #60]	; (240063c0 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24006382:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24006386:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400638a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2400638c:	bf88      	it	hi
2400638e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24006390:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24006392:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24006394:	4618      	mov	r0, r3
24006396:	bc30      	pop	{r4, r5}
24006398:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
2400639a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
2400639e:	6583      	str	r3, [r0, #88]	; 0x58
240063a0:	e7f8      	b.n	24006394 <DMA_CalcBaseAndBitshift+0xc4>
240063a2:	bf00      	nop
240063a4:	40020010 	.word	0x40020010
240063a8:	40020040 	.word	0x40020040
240063ac:	40020028 	.word	0x40020028
240063b0:	40020058 	.word	0x40020058
240063b4:	400204b8 	.word	0x400204b8
240063b8:	aaaaaaab 	.word	0xaaaaaaab
240063bc:	2401d09c 	.word	0x2401d09c
240063c0:	fffffc00 	.word	0xfffffc00

240063c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240063c4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240063c6:	4a29      	ldr	r2, [pc, #164]	; (2400646c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
240063c8:	4929      	ldr	r1, [pc, #164]	; (24006470 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
240063ca:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240063cc:	4d29      	ldr	r5, [pc, #164]	; (24006474 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
240063ce:	4c2a      	ldr	r4, [pc, #168]	; (24006478 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
240063d0:	42ab      	cmp	r3, r5
240063d2:	bf18      	it	ne
240063d4:	4293      	cmpne	r3, r2
240063d6:	bf0c      	ite	eq
240063d8:	2201      	moveq	r2, #1
240063da:	2200      	movne	r2, #0
240063dc:	428b      	cmp	r3, r1
240063de:	bf08      	it	eq
240063e0:	f042 0201 	orreq.w	r2, r2, #1
240063e4:	3128      	adds	r1, #40	; 0x28
240063e6:	42a3      	cmp	r3, r4
240063e8:	bf08      	it	eq
240063ea:	f042 0201 	orreq.w	r2, r2, #1
240063ee:	3428      	adds	r4, #40	; 0x28
240063f0:	428b      	cmp	r3, r1
240063f2:	bf08      	it	eq
240063f4:	f042 0201 	orreq.w	r2, r2, #1
240063f8:	3128      	adds	r1, #40	; 0x28
240063fa:	42a3      	cmp	r3, r4
240063fc:	bf08      	it	eq
240063fe:	f042 0201 	orreq.w	r2, r2, #1
24006402:	428b      	cmp	r3, r1
24006404:	bf08      	it	eq
24006406:	f042 0201 	orreq.w	r2, r2, #1
2400640a:	b912      	cbnz	r2, 24006412 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
2400640c:	4a1b      	ldr	r2, [pc, #108]	; (2400647c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
2400640e:	4293      	cmp	r3, r2
24006410:	d113      	bne.n	2400643a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24006412:	b2db      	uxtb	r3, r3
24006414:	4c1a      	ldr	r4, [pc, #104]	; (24006480 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24006416:	4a1b      	ldr	r2, [pc, #108]	; (24006484 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006418:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400641a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
2400641c:	4d1a      	ldr	r5, [pc, #104]	; (24006488 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400641e:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24006422:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24006424:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006428:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2400642c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400642e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24006432:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006434:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24006436:	bc30      	pop	{r4, r5}
24006438:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400643a:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2400643c:	4913      	ldr	r1, [pc, #76]	; (2400648c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400643e:	4c14      	ldr	r4, [pc, #80]	; (24006490 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24006440:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006442:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24006444:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006446:	fba4 2302 	umull	r2, r3, r4, r2
2400644a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2400644e:	d800      	bhi.n	24006452 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24006450:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006452:	4a10      	ldr	r2, [pc, #64]	; (24006494 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006454:	f003 051f 	and.w	r5, r3, #31
24006458:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
2400645a:	4c0f      	ldr	r4, [pc, #60]	; (24006498 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2400645c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400645e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24006460:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006462:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006464:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006466:	6602      	str	r2, [r0, #96]	; 0x60
}
24006468:	e7e5      	b.n	24006436 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
2400646a:	bf00      	nop
2400646c:	58025408 	.word	0x58025408
24006470:	58025430 	.word	0x58025430
24006474:	5802541c 	.word	0x5802541c
24006478:	58025444 	.word	0x58025444
2400647c:	58025494 	.word	0x58025494
24006480:	cccccccd 	.word	0xcccccccd
24006484:	16009600 	.word	0x16009600
24006488:	58025880 	.word	0x58025880
2400648c:	bffdfbf0 	.word	0xbffdfbf0
24006490:	aaaaaaab 	.word	0xaaaaaaab
24006494:	10008200 	.word	0x10008200
24006498:	40020880 	.word	0x40020880

2400649c <HAL_DMA_Init>:
{
2400649c:	b538      	push	{r3, r4, r5, lr}
2400649e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240064a0:	f7ff fe10 	bl	240060c4 <HAL_GetTick>
  if(hdma == NULL)
240064a4:	2c00      	cmp	r4, #0
240064a6:	f000 816b 	beq.w	24006780 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240064aa:	6822      	ldr	r2, [r4, #0]
240064ac:	4605      	mov	r5, r0
240064ae:	4ba3      	ldr	r3, [pc, #652]	; (2400673c <HAL_DMA_Init+0x2a0>)
240064b0:	429a      	cmp	r2, r3
240064b2:	d048      	beq.n	24006546 <HAL_DMA_Init+0xaa>
240064b4:	3318      	adds	r3, #24
240064b6:	429a      	cmp	r2, r3
240064b8:	d045      	beq.n	24006546 <HAL_DMA_Init+0xaa>
240064ba:	3330      	adds	r3, #48	; 0x30
240064bc:	49a0      	ldr	r1, [pc, #640]	; (24006740 <HAL_DMA_Init+0x2a4>)
240064be:	428a      	cmp	r2, r1
240064c0:	bf18      	it	ne
240064c2:	429a      	cmpne	r2, r3
240064c4:	f101 0130 	add.w	r1, r1, #48	; 0x30
240064c8:	bf0c      	ite	eq
240064ca:	2301      	moveq	r3, #1
240064cc:	2300      	movne	r3, #0
240064ce:	428a      	cmp	r2, r1
240064d0:	bf08      	it	eq
240064d2:	f043 0301 	orreq.w	r3, r3, #1
240064d6:	3118      	adds	r1, #24
240064d8:	428a      	cmp	r2, r1
240064da:	bf08      	it	eq
240064dc:	f043 0301 	orreq.w	r3, r3, #1
240064e0:	3118      	adds	r1, #24
240064e2:	428a      	cmp	r2, r1
240064e4:	bf08      	it	eq
240064e6:	f043 0301 	orreq.w	r3, r3, #1
240064ea:	3118      	adds	r1, #24
240064ec:	428a      	cmp	r2, r1
240064ee:	bf08      	it	eq
240064f0:	f043 0301 	orreq.w	r3, r3, #1
240064f4:	f501 7156 	add.w	r1, r1, #856	; 0x358
240064f8:	428a      	cmp	r2, r1
240064fa:	bf08      	it	eq
240064fc:	f043 0301 	orreq.w	r3, r3, #1
24006500:	3118      	adds	r1, #24
24006502:	428a      	cmp	r2, r1
24006504:	bf08      	it	eq
24006506:	f043 0301 	orreq.w	r3, r3, #1
2400650a:	3118      	adds	r1, #24
2400650c:	428a      	cmp	r2, r1
2400650e:	bf08      	it	eq
24006510:	f043 0301 	orreq.w	r3, r3, #1
24006514:	3118      	adds	r1, #24
24006516:	428a      	cmp	r2, r1
24006518:	bf08      	it	eq
2400651a:	f043 0301 	orreq.w	r3, r3, #1
2400651e:	3118      	adds	r1, #24
24006520:	428a      	cmp	r2, r1
24006522:	bf08      	it	eq
24006524:	f043 0301 	orreq.w	r3, r3, #1
24006528:	3118      	adds	r1, #24
2400652a:	428a      	cmp	r2, r1
2400652c:	bf08      	it	eq
2400652e:	f043 0301 	orreq.w	r3, r3, #1
24006532:	3118      	adds	r1, #24
24006534:	428a      	cmp	r2, r1
24006536:	bf08      	it	eq
24006538:	f043 0301 	orreq.w	r3, r3, #1
2400653c:	b91b      	cbnz	r3, 24006546 <HAL_DMA_Init+0xaa>
2400653e:	4b81      	ldr	r3, [pc, #516]	; (24006744 <HAL_DMA_Init+0x2a8>)
24006540:	429a      	cmp	r2, r3
24006542:	f040 8184 	bne.w	2400684e <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
24006546:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24006548:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
2400654a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
2400654e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24006552:	6813      	ldr	r3, [r2, #0]
24006554:	f023 0301 	bic.w	r3, r3, #1
24006558:	6013      	str	r3, [r2, #0]
2400655a:	e005      	b.n	24006568 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400655c:	f7ff fdb2 	bl	240060c4 <HAL_GetTick>
24006560:	1b43      	subs	r3, r0, r5
24006562:	2b05      	cmp	r3, #5
24006564:	f200 80fe 	bhi.w	24006764 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006568:	6823      	ldr	r3, [r4, #0]
2400656a:	681a      	ldr	r2, [r3, #0]
2400656c:	07d0      	lsls	r0, r2, #31
2400656e:	d4f5      	bmi.n	2400655c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24006570:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24006574:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24006576:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24006578:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400657a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400657c:	430a      	orrs	r2, r1
2400657e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24006580:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24006582:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24006586:	69a1      	ldr	r1, [r4, #24]
24006588:	ea42 0201 	orr.w	r2, r2, r1
2400658c:	69e1      	ldr	r1, [r4, #28]
2400658e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24006592:	6a21      	ldr	r1, [r4, #32]
24006594:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24006598:	496b      	ldr	r1, [pc, #428]	; (24006748 <HAL_DMA_Init+0x2ac>)
2400659a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
2400659e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240065a2:	d103      	bne.n	240065ac <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
240065a4:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
240065a8:	4301      	orrs	r1, r0
240065aa:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
240065ac:	4867      	ldr	r0, [pc, #412]	; (2400674c <HAL_DMA_Init+0x2b0>)
240065ae:	4968      	ldr	r1, [pc, #416]	; (24006750 <HAL_DMA_Init+0x2b4>)
240065b0:	6800      	ldr	r0, [r0, #0]
240065b2:	4001      	ands	r1, r0
240065b4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240065b8:	d30a      	bcc.n	240065d0 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240065ba:	6861      	ldr	r1, [r4, #4]
240065bc:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
240065c0:	281f      	cmp	r0, #31
240065c2:	f240 80d6 	bls.w	24006772 <HAL_DMA_Init+0x2d6>
240065c6:	394f      	subs	r1, #79	; 0x4f
240065c8:	2903      	cmp	r1, #3
240065ca:	d801      	bhi.n	240065d0 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
240065cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240065d0:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240065d2:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
240065d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240065d6:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240065d8:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240065da:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
240065de:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240065e2:	d10e      	bne.n	24006602 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240065e4:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
240065e8:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240065ea:	b150      	cbz	r0, 24006602 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240065ec:	69a5      	ldr	r5, [r4, #24]
240065ee:	2d00      	cmp	r5, #0
240065f0:	f040 8108 	bne.w	24006804 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
240065f4:	2a01      	cmp	r2, #1
240065f6:	f000 8125 	beq.w	24006844 <HAL_DMA_Init+0x3a8>
240065fa:	f032 0202 	bics.w	r2, r2, #2
240065fe:	f000 8109 	beq.w	24006814 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24006602:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24006604:	4620      	mov	r0, r4
24006606:	f7ff fe63 	bl	240062d0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400660a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
2400660c:	233f      	movs	r3, #63	; 0x3f
2400660e:	f002 021f 	and.w	r2, r2, #31
24006612:	4093      	lsls	r3, r2
24006614:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006616:	6822      	ldr	r2, [r4, #0]
24006618:	4b48      	ldr	r3, [pc, #288]	; (2400673c <HAL_DMA_Init+0x2a0>)
2400661a:	484e      	ldr	r0, [pc, #312]	; (24006754 <HAL_DMA_Init+0x2b8>)
2400661c:	4948      	ldr	r1, [pc, #288]	; (24006740 <HAL_DMA_Init+0x2a4>)
2400661e:	4282      	cmp	r2, r0
24006620:	bf18      	it	ne
24006622:	429a      	cmpne	r2, r3
24006624:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006628:	bf0c      	ite	eq
2400662a:	2301      	moveq	r3, #1
2400662c:	2300      	movne	r3, #0
2400662e:	428a      	cmp	r2, r1
24006630:	bf08      	it	eq
24006632:	f043 0301 	orreq.w	r3, r3, #1
24006636:	3130      	adds	r1, #48	; 0x30
24006638:	4282      	cmp	r2, r0
2400663a:	bf08      	it	eq
2400663c:	f043 0301 	orreq.w	r3, r3, #1
24006640:	3030      	adds	r0, #48	; 0x30
24006642:	428a      	cmp	r2, r1
24006644:	bf08      	it	eq
24006646:	f043 0301 	orreq.w	r3, r3, #1
2400664a:	3130      	adds	r1, #48	; 0x30
2400664c:	4282      	cmp	r2, r0
2400664e:	bf08      	it	eq
24006650:	f043 0301 	orreq.w	r3, r3, #1
24006654:	3030      	adds	r0, #48	; 0x30
24006656:	428a      	cmp	r2, r1
24006658:	bf08      	it	eq
2400665a:	f043 0301 	orreq.w	r3, r3, #1
2400665e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006662:	4282      	cmp	r2, r0
24006664:	bf08      	it	eq
24006666:	f043 0301 	orreq.w	r3, r3, #1
2400666a:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400666e:	428a      	cmp	r2, r1
24006670:	bf08      	it	eq
24006672:	f043 0301 	orreq.w	r3, r3, #1
24006676:	3130      	adds	r1, #48	; 0x30
24006678:	4282      	cmp	r2, r0
2400667a:	bf08      	it	eq
2400667c:	f043 0301 	orreq.w	r3, r3, #1
24006680:	3030      	adds	r0, #48	; 0x30
24006682:	428a      	cmp	r2, r1
24006684:	bf08      	it	eq
24006686:	f043 0301 	orreq.w	r3, r3, #1
2400668a:	3130      	adds	r1, #48	; 0x30
2400668c:	4282      	cmp	r2, r0
2400668e:	bf08      	it	eq
24006690:	f043 0301 	orreq.w	r3, r3, #1
24006694:	3030      	adds	r0, #48	; 0x30
24006696:	428a      	cmp	r2, r1
24006698:	bf08      	it	eq
2400669a:	f043 0301 	orreq.w	r3, r3, #1
2400669e:	3130      	adds	r1, #48	; 0x30
240066a0:	4282      	cmp	r2, r0
240066a2:	bf08      	it	eq
240066a4:	f043 0301 	orreq.w	r3, r3, #1
240066a8:	3030      	adds	r0, #48	; 0x30
240066aa:	428a      	cmp	r2, r1
240066ac:	bf08      	it	eq
240066ae:	f043 0301 	orreq.w	r3, r3, #1
240066b2:	4929      	ldr	r1, [pc, #164]	; (24006758 <HAL_DMA_Init+0x2bc>)
240066b4:	4282      	cmp	r2, r0
240066b6:	bf08      	it	eq
240066b8:	f043 0301 	orreq.w	r3, r3, #1
240066bc:	4827      	ldr	r0, [pc, #156]	; (2400675c <HAL_DMA_Init+0x2c0>)
240066be:	428a      	cmp	r2, r1
240066c0:	bf08      	it	eq
240066c2:	f043 0301 	orreq.w	r3, r3, #1
240066c6:	3128      	adds	r1, #40	; 0x28
240066c8:	4282      	cmp	r2, r0
240066ca:	bf08      	it	eq
240066cc:	f043 0301 	orreq.w	r3, r3, #1
240066d0:	3028      	adds	r0, #40	; 0x28
240066d2:	428a      	cmp	r2, r1
240066d4:	bf08      	it	eq
240066d6:	f043 0301 	orreq.w	r3, r3, #1
240066da:	3128      	adds	r1, #40	; 0x28
240066dc:	4282      	cmp	r2, r0
240066de:	bf08      	it	eq
240066e0:	f043 0301 	orreq.w	r3, r3, #1
240066e4:	3028      	adds	r0, #40	; 0x28
240066e6:	428a      	cmp	r2, r1
240066e8:	bf08      	it	eq
240066ea:	f043 0301 	orreq.w	r3, r3, #1
240066ee:	3128      	adds	r1, #40	; 0x28
240066f0:	4282      	cmp	r2, r0
240066f2:	bf08      	it	eq
240066f4:	f043 0301 	orreq.w	r3, r3, #1
240066f8:	428a      	cmp	r2, r1
240066fa:	bf08      	it	eq
240066fc:	f043 0301 	orreq.w	r3, r3, #1
24006700:	b913      	cbnz	r3, 24006708 <HAL_DMA_Init+0x26c>
24006702:	4b17      	ldr	r3, [pc, #92]	; (24006760 <HAL_DMA_Init+0x2c4>)
24006704:	429a      	cmp	r2, r3
24006706:	d113      	bne.n	24006730 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24006708:	4620      	mov	r0, r4
2400670a:	f7ff fe5b 	bl	240063c4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2400670e:	68a3      	ldr	r3, [r4, #8]
24006710:	2b80      	cmp	r3, #128	; 0x80
24006712:	d037      	beq.n	24006784 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24006714:	7922      	ldrb	r2, [r4, #4]
24006716:	6e23      	ldr	r3, [r4, #96]	; 0x60
24006718:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400671a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
2400671e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24006720:	6861      	ldr	r1, [r4, #4]
24006722:	1e4b      	subs	r3, r1, #1
24006724:	2b07      	cmp	r3, #7
24006726:	d931      	bls.n	2400678c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
24006728:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
2400672a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
2400672e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006730:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24006732:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006734:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24006736:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
2400673a:	bd38      	pop	{r3, r4, r5, pc}
2400673c:	40020010 	.word	0x40020010
24006740:	40020040 	.word	0x40020040
24006744:	400204b8 	.word	0x400204b8
24006748:	fe10803f 	.word	0xfe10803f
2400674c:	5c001000 	.word	0x5c001000
24006750:	ffff0000 	.word	0xffff0000
24006754:	40020028 	.word	0x40020028
24006758:	58025408 	.word	0x58025408
2400675c:	5802541c 	.word	0x5802541c
24006760:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24006764:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24006766:	2303      	movs	r3, #3
        return HAL_ERROR;
24006768:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400676a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
2400676c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24006770:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24006772:	496a      	ldr	r1, [pc, #424]	; (2400691c <HAL_DMA_Init+0x480>)
24006774:	fa21 f000 	lsr.w	r0, r1, r0
24006778:	07c1      	lsls	r1, r0, #31
2400677a:	f57f af29 	bpl.w	240065d0 <HAL_DMA_Init+0x134>
2400677e:	e725      	b.n	240065cc <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24006780:	2001      	movs	r0, #1
}
24006782:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24006784:	2300      	movs	r3, #0
24006786:	461a      	mov	r2, r3
24006788:	6063      	str	r3, [r4, #4]
2400678a:	e7c4      	b.n	24006716 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400678c:	6820      	ldr	r0, [r4, #0]
2400678e:	4a64      	ldr	r2, [pc, #400]	; (24006920 <HAL_DMA_Init+0x484>)
24006790:	4d64      	ldr	r5, [pc, #400]	; (24006924 <HAL_DMA_Init+0x488>)
24006792:	42a8      	cmp	r0, r5
24006794:	bf18      	it	ne
24006796:	4290      	cmpne	r0, r2
24006798:	f105 0514 	add.w	r5, r5, #20
2400679c:	bf0c      	ite	eq
2400679e:	2201      	moveq	r2, #1
240067a0:	2200      	movne	r2, #0
240067a2:	42a8      	cmp	r0, r5
240067a4:	bf08      	it	eq
240067a6:	f042 0201 	orreq.w	r2, r2, #1
240067aa:	3514      	adds	r5, #20
240067ac:	42a8      	cmp	r0, r5
240067ae:	bf08      	it	eq
240067b0:	f042 0201 	orreq.w	r2, r2, #1
240067b4:	3514      	adds	r5, #20
240067b6:	42a8      	cmp	r0, r5
240067b8:	bf08      	it	eq
240067ba:	f042 0201 	orreq.w	r2, r2, #1
240067be:	3514      	adds	r5, #20
240067c0:	42a8      	cmp	r0, r5
240067c2:	bf08      	it	eq
240067c4:	f042 0201 	orreq.w	r2, r2, #1
240067c8:	3514      	adds	r5, #20
240067ca:	42a8      	cmp	r0, r5
240067cc:	bf08      	it	eq
240067ce:	f042 0201 	orreq.w	r2, r2, #1
240067d2:	b93a      	cbnz	r2, 240067e4 <HAL_DMA_Init+0x348>
240067d4:	4a54      	ldr	r2, [pc, #336]	; (24006928 <HAL_DMA_Init+0x48c>)
240067d6:	4290      	cmp	r0, r2
240067d8:	d004      	beq.n	240067e4 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
240067da:	4a54      	ldr	r2, [pc, #336]	; (2400692c <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
240067dc:	4854      	ldr	r0, [pc, #336]	; (24006930 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
240067de:	440a      	add	r2, r1
240067e0:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
240067e2:	e003      	b.n	240067ec <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
240067e4:	4a53      	ldr	r2, [pc, #332]	; (24006934 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
240067e6:	4854      	ldr	r0, [pc, #336]	; (24006938 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
240067e8:	440a      	add	r2, r1
240067ea:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240067ec:	2101      	movs	r1, #1
240067ee:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
240067f2:	2100      	movs	r1, #0
240067f4:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240067f8:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
240067fa:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240067fc:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24006800:	605a      	str	r2, [r3, #4]
24006802:	e795      	b.n	24006730 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24006804:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24006808:	d00e      	beq.n	24006828 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
2400680a:	2a02      	cmp	r2, #2
2400680c:	d905      	bls.n	2400681a <HAL_DMA_Init+0x37e>
2400680e:	2a03      	cmp	r2, #3
24006810:	f47f aef7 	bne.w	24006602 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24006814:	01c2      	lsls	r2, r0, #7
24006816:	f57f aef4 	bpl.w	24006602 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
2400681a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400681c:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
2400681e:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24006820:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24006822:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24006826:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24006828:	2a03      	cmp	r2, #3
2400682a:	f63f aeea 	bhi.w	24006602 <HAL_DMA_Init+0x166>
2400682e:	a501      	add	r5, pc, #4	; (adr r5, 24006834 <HAL_DMA_Init+0x398>)
24006830:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24006834:	2400681b 	.word	0x2400681b
24006838:	24006815 	.word	0x24006815
2400683c:	2400681b 	.word	0x2400681b
24006840:	24006845 	.word	0x24006845
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24006844:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24006848:	f47f aedb 	bne.w	24006602 <HAL_DMA_Init+0x166>
2400684c:	e7e5      	b.n	2400681a <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400684e:	4b34      	ldr	r3, [pc, #208]	; (24006920 <HAL_DMA_Init+0x484>)
24006850:	4834      	ldr	r0, [pc, #208]	; (24006924 <HAL_DMA_Init+0x488>)
24006852:	493a      	ldr	r1, [pc, #232]	; (2400693c <HAL_DMA_Init+0x4a0>)
24006854:	4282      	cmp	r2, r0
24006856:	bf18      	it	ne
24006858:	429a      	cmpne	r2, r3
2400685a:	f100 0028 	add.w	r0, r0, #40	; 0x28
2400685e:	bf0c      	ite	eq
24006860:	2301      	moveq	r3, #1
24006862:	2300      	movne	r3, #0
24006864:	428a      	cmp	r2, r1
24006866:	bf08      	it	eq
24006868:	f043 0301 	orreq.w	r3, r3, #1
2400686c:	3128      	adds	r1, #40	; 0x28
2400686e:	4282      	cmp	r2, r0
24006870:	bf08      	it	eq
24006872:	f043 0301 	orreq.w	r3, r3, #1
24006876:	3028      	adds	r0, #40	; 0x28
24006878:	428a      	cmp	r2, r1
2400687a:	bf08      	it	eq
2400687c:	f043 0301 	orreq.w	r3, r3, #1
24006880:	3128      	adds	r1, #40	; 0x28
24006882:	4282      	cmp	r2, r0
24006884:	bf08      	it	eq
24006886:	f043 0301 	orreq.w	r3, r3, #1
2400688a:	428a      	cmp	r2, r1
2400688c:	bf08      	it	eq
2400688e:	f043 0301 	orreq.w	r3, r3, #1
24006892:	b913      	cbnz	r3, 2400689a <HAL_DMA_Init+0x3fe>
24006894:	4b24      	ldr	r3, [pc, #144]	; (24006928 <HAL_DMA_Init+0x48c>)
24006896:	429a      	cmp	r2, r3
24006898:	d139      	bne.n	2400690e <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
2400689a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
2400689c:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2400689e:	4928      	ldr	r1, [pc, #160]	; (24006940 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
240068a0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240068a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240068a8:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240068aa:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240068ac:	68a3      	ldr	r3, [r4, #8]
240068ae:	2b40      	cmp	r3, #64	; 0x40
240068b0:	d02b      	beq.n	2400690a <HAL_DMA_Init+0x46e>
240068b2:	2b80      	cmp	r3, #128	; 0x80
240068b4:	bf0c      	ite	eq
240068b6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
240068ba:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240068bc:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
240068c0:	08db      	lsrs	r3, r3, #3
240068c2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240068c6:	6965      	ldr	r5, [r4, #20]
240068c8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240068cc:	69a5      	ldr	r5, [r4, #24]
240068ce:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240068d2:	69e5      	ldr	r5, [r4, #28]
240068d4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240068d8:	6a25      	ldr	r5, [r4, #32]
240068da:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
240068de:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240068e0:	4918      	ldr	r1, [pc, #96]	; (24006944 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240068e2:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240068e4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240068e6:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240068e8:	6822      	ldr	r2, [r4, #0]
240068ea:	4b17      	ldr	r3, [pc, #92]	; (24006948 <HAL_DMA_Init+0x4ac>)
240068ec:	4411      	add	r1, r2
240068ee:	fba3 2301 	umull	r2, r3, r3, r1
240068f2:	091b      	lsrs	r3, r3, #4
240068f4:	009b      	lsls	r3, r3, #2
240068f6:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240068f8:	f7ff fcea 	bl	240062d0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240068fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240068fe:	2301      	movs	r3, #1
24006900:	f002 021f 	and.w	r2, r2, #31
24006904:	4093      	lsls	r3, r2
24006906:	6043      	str	r3, [r0, #4]
24006908:	e685      	b.n	24006616 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400690a:	2010      	movs	r0, #16
2400690c:	e7d6      	b.n	240068bc <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400690e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24006910:	2303      	movs	r3, #3
    return HAL_ERROR;
24006912:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24006914:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24006916:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
2400691a:	bd38      	pop	{r3, r4, r5, pc}
2400691c:	c3c0003f 	.word	0xc3c0003f
24006920:	58025408 	.word	0x58025408
24006924:	5802541c 	.word	0x5802541c
24006928:	58025494 	.word	0x58025494
2400692c:	1000823f 	.word	0x1000823f
24006930:	40020940 	.word	0x40020940
24006934:	1600963f 	.word	0x1600963f
24006938:	58025940 	.word	0x58025940
2400693c:	58025430 	.word	0x58025430
24006940:	fffe000f 	.word	0xfffe000f
24006944:	a7fdabf8 	.word	0xa7fdabf8
24006948:	cccccccd 	.word	0xcccccccd

2400694c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
2400694c:	2800      	cmp	r0, #0
2400694e:	f000 8270 	beq.w	24006e32 <HAL_DMA_Start_IT+0x4e6>
24006952:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24006954:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24006958:	2801      	cmp	r0, #1
2400695a:	f000 826c 	beq.w	24006e36 <HAL_DMA_Start_IT+0x4ea>
2400695e:	2001      	movs	r0, #1
{
24006960:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
24006962:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24006966:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
2400696a:	4284      	cmp	r4, r0
2400696c:	d008      	beq.n	24006980 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400696e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24006972:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006974:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24006978:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
2400697c:	bc70      	pop	{r4, r5, r6}
2400697e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
24006980:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24006982:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006986:	4ea2      	ldr	r6, [pc, #648]	; (24006c10 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24006988:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400698c:	2000      	movs	r0, #0
2400698e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24006992:	6820      	ldr	r0, [r4, #0]
24006994:	f020 0001 	bic.w	r0, r0, #1
24006998:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400699a:	489e      	ldr	r0, [pc, #632]	; (24006c14 <HAL_DMA_Start_IT+0x2c8>)
2400699c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240069a0:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240069a4:	42b4      	cmp	r4, r6
240069a6:	bf18      	it	ne
240069a8:	4284      	cmpne	r4, r0
240069aa:	f106 0618 	add.w	r6, r6, #24
240069ae:	bf0c      	ite	eq
240069b0:	2001      	moveq	r0, #1
240069b2:	2000      	movne	r0, #0
240069b4:	42b4      	cmp	r4, r6
240069b6:	bf08      	it	eq
240069b8:	f040 0001 	orreq.w	r0, r0, #1
240069bc:	3618      	adds	r6, #24
240069be:	42b4      	cmp	r4, r6
240069c0:	bf08      	it	eq
240069c2:	f040 0001 	orreq.w	r0, r0, #1
240069c6:	3618      	adds	r6, #24
240069c8:	42b4      	cmp	r4, r6
240069ca:	bf08      	it	eq
240069cc:	f040 0001 	orreq.w	r0, r0, #1
240069d0:	3618      	adds	r6, #24
240069d2:	42b4      	cmp	r4, r6
240069d4:	bf08      	it	eq
240069d6:	f040 0001 	orreq.w	r0, r0, #1
240069da:	3618      	adds	r6, #24
240069dc:	42b4      	cmp	r4, r6
240069de:	bf08      	it	eq
240069e0:	f040 0001 	orreq.w	r0, r0, #1
240069e4:	3618      	adds	r6, #24
240069e6:	42b4      	cmp	r4, r6
240069e8:	bf08      	it	eq
240069ea:	f040 0001 	orreq.w	r0, r0, #1
240069ee:	f506 7656 	add.w	r6, r6, #856	; 0x358
240069f2:	42b4      	cmp	r4, r6
240069f4:	bf08      	it	eq
240069f6:	f040 0001 	orreq.w	r0, r0, #1
240069fa:	3618      	adds	r6, #24
240069fc:	42b4      	cmp	r4, r6
240069fe:	bf08      	it	eq
24006a00:	f040 0001 	orreq.w	r0, r0, #1
24006a04:	3618      	adds	r6, #24
24006a06:	42b4      	cmp	r4, r6
24006a08:	bf08      	it	eq
24006a0a:	f040 0001 	orreq.w	r0, r0, #1
24006a0e:	3618      	adds	r6, #24
24006a10:	42b4      	cmp	r4, r6
24006a12:	bf08      	it	eq
24006a14:	f040 0001 	orreq.w	r0, r0, #1
24006a18:	3618      	adds	r6, #24
24006a1a:	42b4      	cmp	r4, r6
24006a1c:	bf08      	it	eq
24006a1e:	f040 0001 	orreq.w	r0, r0, #1
24006a22:	3618      	adds	r6, #24
24006a24:	42b4      	cmp	r4, r6
24006a26:	bf08      	it	eq
24006a28:	f040 0001 	orreq.w	r0, r0, #1
24006a2c:	3618      	adds	r6, #24
24006a2e:	42b4      	cmp	r4, r6
24006a30:	bf08      	it	eq
24006a32:	f040 0001 	orreq.w	r0, r0, #1
24006a36:	3618      	adds	r6, #24
24006a38:	42b4      	cmp	r4, r6
24006a3a:	bf08      	it	eq
24006a3c:	f040 0001 	orreq.w	r0, r0, #1
24006a40:	4e75      	ldr	r6, [pc, #468]	; (24006c18 <HAL_DMA_Start_IT+0x2cc>)
24006a42:	42b4      	cmp	r4, r6
24006a44:	bf08      	it	eq
24006a46:	f040 0001 	orreq.w	r0, r0, #1
24006a4a:	3614      	adds	r6, #20
24006a4c:	42b4      	cmp	r4, r6
24006a4e:	bf08      	it	eq
24006a50:	f040 0001 	orreq.w	r0, r0, #1
24006a54:	3614      	adds	r6, #20
24006a56:	42b4      	cmp	r4, r6
24006a58:	bf08      	it	eq
24006a5a:	f040 0001 	orreq.w	r0, r0, #1
24006a5e:	3614      	adds	r6, #20
24006a60:	42b4      	cmp	r4, r6
24006a62:	bf08      	it	eq
24006a64:	f040 0001 	orreq.w	r0, r0, #1
24006a68:	3614      	adds	r6, #20
24006a6a:	42b4      	cmp	r4, r6
24006a6c:	bf08      	it	eq
24006a6e:	f040 0001 	orreq.w	r0, r0, #1
24006a72:	3614      	adds	r6, #20
24006a74:	42b4      	cmp	r4, r6
24006a76:	bf08      	it	eq
24006a78:	f040 0001 	orreq.w	r0, r0, #1
24006a7c:	3614      	adds	r6, #20
24006a7e:	42b4      	cmp	r4, r6
24006a80:	bf08      	it	eq
24006a82:	f040 0001 	orreq.w	r0, r0, #1
24006a86:	b910      	cbnz	r0, 24006a8e <HAL_DMA_Start_IT+0x142>
24006a88:	4864      	ldr	r0, [pc, #400]	; (24006c1c <HAL_DMA_Start_IT+0x2d0>)
24006a8a:	4284      	cmp	r4, r0
24006a8c:	d10a      	bne.n	24006aa4 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006a8e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
24006a92:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24006a94:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24006a98:	b110      	cbz	r0, 24006aa0 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006a9a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
24006a9e:	6044      	str	r4, [r0, #4]
24006aa0:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006aa4:	485b      	ldr	r0, [pc, #364]	; (24006c14 <HAL_DMA_Start_IT+0x2c8>)
24006aa6:	4e5a      	ldr	r6, [pc, #360]	; (24006c10 <HAL_DMA_Start_IT+0x2c4>)
24006aa8:	42b4      	cmp	r4, r6
24006aaa:	bf18      	it	ne
24006aac:	4284      	cmpne	r4, r0
24006aae:	f106 0618 	add.w	r6, r6, #24
24006ab2:	bf0c      	ite	eq
24006ab4:	2001      	moveq	r0, #1
24006ab6:	2000      	movne	r0, #0
24006ab8:	42b4      	cmp	r4, r6
24006aba:	bf08      	it	eq
24006abc:	f040 0001 	orreq.w	r0, r0, #1
24006ac0:	3618      	adds	r6, #24
24006ac2:	42b4      	cmp	r4, r6
24006ac4:	bf08      	it	eq
24006ac6:	f040 0001 	orreq.w	r0, r0, #1
24006aca:	3618      	adds	r6, #24
24006acc:	42b4      	cmp	r4, r6
24006ace:	bf08      	it	eq
24006ad0:	f040 0001 	orreq.w	r0, r0, #1
24006ad4:	3618      	adds	r6, #24
24006ad6:	42b4      	cmp	r4, r6
24006ad8:	bf08      	it	eq
24006ada:	f040 0001 	orreq.w	r0, r0, #1
24006ade:	3618      	adds	r6, #24
24006ae0:	42b4      	cmp	r4, r6
24006ae2:	bf08      	it	eq
24006ae4:	f040 0001 	orreq.w	r0, r0, #1
24006ae8:	3618      	adds	r6, #24
24006aea:	42b4      	cmp	r4, r6
24006aec:	bf08      	it	eq
24006aee:	f040 0001 	orreq.w	r0, r0, #1
24006af2:	f506 7656 	add.w	r6, r6, #856	; 0x358
24006af6:	42b4      	cmp	r4, r6
24006af8:	bf08      	it	eq
24006afa:	f040 0001 	orreq.w	r0, r0, #1
24006afe:	3618      	adds	r6, #24
24006b00:	42b4      	cmp	r4, r6
24006b02:	bf08      	it	eq
24006b04:	f040 0001 	orreq.w	r0, r0, #1
24006b08:	3618      	adds	r6, #24
24006b0a:	42b4      	cmp	r4, r6
24006b0c:	bf08      	it	eq
24006b0e:	f040 0001 	orreq.w	r0, r0, #1
24006b12:	3618      	adds	r6, #24
24006b14:	42b4      	cmp	r4, r6
24006b16:	bf08      	it	eq
24006b18:	f040 0001 	orreq.w	r0, r0, #1
24006b1c:	3618      	adds	r6, #24
24006b1e:	42b4      	cmp	r4, r6
24006b20:	bf08      	it	eq
24006b22:	f040 0001 	orreq.w	r0, r0, #1
24006b26:	3618      	adds	r6, #24
24006b28:	42b4      	cmp	r4, r6
24006b2a:	bf08      	it	eq
24006b2c:	f040 0001 	orreq.w	r0, r0, #1
24006b30:	3618      	adds	r6, #24
24006b32:	42b4      	cmp	r4, r6
24006b34:	bf08      	it	eq
24006b36:	f040 0001 	orreq.w	r0, r0, #1
24006b3a:	b918      	cbnz	r0, 24006b44 <HAL_DMA_Start_IT+0x1f8>
24006b3c:	4838      	ldr	r0, [pc, #224]	; (24006c20 <HAL_DMA_Start_IT+0x2d4>)
24006b3e:	4284      	cmp	r4, r0
24006b40:	f040 817b 	bne.w	24006e3a <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006b44:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24006b48:	f000 041f 	and.w	r4, r0, #31
24006b4c:	203f      	movs	r0, #63	; 0x3f
24006b4e:	40a0      	lsls	r0, r4
24006b50:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24006b52:	f8dc 4000 	ldr.w	r4, [ip]
24006b56:	6820      	ldr	r0, [r4, #0]
24006b58:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
24006b5c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006b5e:	f8dc 0000 	ldr.w	r0, [ip]
24006b62:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006b64:	f8dc 3008 	ldr.w	r3, [ip, #8]
24006b68:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006b6a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006b6e:	f000 815b 	beq.w	24006e28 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24006b72:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24006b74:	f8dc 3000 	ldr.w	r3, [ip]
24006b78:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006b7a:	f8dc 4000 	ldr.w	r4, [ip]
24006b7e:	4b25      	ldr	r3, [pc, #148]	; (24006c14 <HAL_DMA_Start_IT+0x2c8>)
24006b80:	4923      	ldr	r1, [pc, #140]	; (24006c10 <HAL_DMA_Start_IT+0x2c4>)
24006b82:	4a28      	ldr	r2, [pc, #160]	; (24006c24 <HAL_DMA_Start_IT+0x2d8>)
24006b84:	428c      	cmp	r4, r1
24006b86:	bf18      	it	ne
24006b88:	429c      	cmpne	r4, r3
24006b8a:	f101 0130 	add.w	r1, r1, #48	; 0x30
24006b8e:	bf0c      	ite	eq
24006b90:	2301      	moveq	r3, #1
24006b92:	2300      	movne	r3, #0
24006b94:	4294      	cmp	r4, r2
24006b96:	bf08      	it	eq
24006b98:	f043 0301 	orreq.w	r3, r3, #1
24006b9c:	3230      	adds	r2, #48	; 0x30
24006b9e:	428c      	cmp	r4, r1
24006ba0:	bf08      	it	eq
24006ba2:	f043 0301 	orreq.w	r3, r3, #1
24006ba6:	3130      	adds	r1, #48	; 0x30
24006ba8:	4294      	cmp	r4, r2
24006baa:	bf08      	it	eq
24006bac:	f043 0301 	orreq.w	r3, r3, #1
24006bb0:	3230      	adds	r2, #48	; 0x30
24006bb2:	428c      	cmp	r4, r1
24006bb4:	bf08      	it	eq
24006bb6:	f043 0301 	orreq.w	r3, r3, #1
24006bba:	3130      	adds	r1, #48	; 0x30
24006bbc:	4294      	cmp	r4, r2
24006bbe:	bf08      	it	eq
24006bc0:	f043 0301 	orreq.w	r3, r3, #1
24006bc4:	f502 725c 	add.w	r2, r2, #880	; 0x370
24006bc8:	428c      	cmp	r4, r1
24006bca:	bf08      	it	eq
24006bcc:	f043 0301 	orreq.w	r3, r3, #1
24006bd0:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006bd4:	4294      	cmp	r4, r2
24006bd6:	bf08      	it	eq
24006bd8:	f043 0301 	orreq.w	r3, r3, #1
24006bdc:	3230      	adds	r2, #48	; 0x30
24006bde:	428c      	cmp	r4, r1
24006be0:	bf08      	it	eq
24006be2:	f043 0301 	orreq.w	r3, r3, #1
24006be6:	3130      	adds	r1, #48	; 0x30
24006be8:	4294      	cmp	r4, r2
24006bea:	bf08      	it	eq
24006bec:	f043 0301 	orreq.w	r3, r3, #1
24006bf0:	3230      	adds	r2, #48	; 0x30
24006bf2:	428c      	cmp	r4, r1
24006bf4:	bf08      	it	eq
24006bf6:	f043 0301 	orreq.w	r3, r3, #1
24006bfa:	3130      	adds	r1, #48	; 0x30
24006bfc:	4294      	cmp	r4, r2
24006bfe:	bf08      	it	eq
24006c00:	f043 0301 	orreq.w	r3, r3, #1
24006c04:	3230      	adds	r2, #48	; 0x30
24006c06:	428c      	cmp	r4, r1
24006c08:	bf08      	it	eq
24006c0a:	f043 0301 	orreq.w	r3, r3, #1
24006c0e:	e00b      	b.n	24006c28 <HAL_DMA_Start_IT+0x2dc>
24006c10:	40020028 	.word	0x40020028
24006c14:	40020010 	.word	0x40020010
24006c18:	58025408 	.word	0x58025408
24006c1c:	58025494 	.word	0x58025494
24006c20:	400204b8 	.word	0x400204b8
24006c24:	40020040 	.word	0x40020040
24006c28:	4294      	cmp	r4, r2
24006c2a:	bf08      	it	eq
24006c2c:	f043 0301 	orreq.w	r3, r3, #1
24006c30:	b91b      	cbnz	r3, 24006c3a <HAL_DMA_Start_IT+0x2ee>
24006c32:	4b9b      	ldr	r3, [pc, #620]	; (24006ea0 <HAL_DMA_Start_IT+0x554>)
24006c34:	429c      	cmp	r4, r3
24006c36:	f040 8143 	bne.w	24006ec0 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24006c3a:	6823      	ldr	r3, [r4, #0]
24006c3c:	f023 031e 	bic.w	r3, r3, #30
24006c40:	f043 0316 	orr.w	r3, r3, #22
24006c44:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24006c46:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24006c4a:	b12b      	cbz	r3, 24006c58 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24006c4c:	f8dc 2000 	ldr.w	r2, [ip]
24006c50:	6813      	ldr	r3, [r2, #0]
24006c52:	f043 0308 	orr.w	r3, r3, #8
24006c56:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006c58:	f8dc 4000 	ldr.w	r4, [ip]
24006c5c:	4b91      	ldr	r3, [pc, #580]	; (24006ea4 <HAL_DMA_Start_IT+0x558>)
24006c5e:	4992      	ldr	r1, [pc, #584]	; (24006ea8 <HAL_DMA_Start_IT+0x55c>)
24006c60:	4a92      	ldr	r2, [pc, #584]	; (24006eac <HAL_DMA_Start_IT+0x560>)
24006c62:	428c      	cmp	r4, r1
24006c64:	bf18      	it	ne
24006c66:	429c      	cmpne	r4, r3
24006c68:	f101 0130 	add.w	r1, r1, #48	; 0x30
24006c6c:	bf0c      	ite	eq
24006c6e:	2301      	moveq	r3, #1
24006c70:	2300      	movne	r3, #0
24006c72:	4294      	cmp	r4, r2
24006c74:	bf08      	it	eq
24006c76:	f043 0301 	orreq.w	r3, r3, #1
24006c7a:	3230      	adds	r2, #48	; 0x30
24006c7c:	428c      	cmp	r4, r1
24006c7e:	bf08      	it	eq
24006c80:	f043 0301 	orreq.w	r3, r3, #1
24006c84:	3130      	adds	r1, #48	; 0x30
24006c86:	4294      	cmp	r4, r2
24006c88:	bf08      	it	eq
24006c8a:	f043 0301 	orreq.w	r3, r3, #1
24006c8e:	3230      	adds	r2, #48	; 0x30
24006c90:	428c      	cmp	r4, r1
24006c92:	bf08      	it	eq
24006c94:	f043 0301 	orreq.w	r3, r3, #1
24006c98:	3130      	adds	r1, #48	; 0x30
24006c9a:	4294      	cmp	r4, r2
24006c9c:	bf08      	it	eq
24006c9e:	f043 0301 	orreq.w	r3, r3, #1
24006ca2:	f502 725c 	add.w	r2, r2, #880	; 0x370
24006ca6:	428c      	cmp	r4, r1
24006ca8:	bf08      	it	eq
24006caa:	f043 0301 	orreq.w	r3, r3, #1
24006cae:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006cb2:	4294      	cmp	r4, r2
24006cb4:	bf08      	it	eq
24006cb6:	f043 0301 	orreq.w	r3, r3, #1
24006cba:	3230      	adds	r2, #48	; 0x30
24006cbc:	428c      	cmp	r4, r1
24006cbe:	bf08      	it	eq
24006cc0:	f043 0301 	orreq.w	r3, r3, #1
24006cc4:	3130      	adds	r1, #48	; 0x30
24006cc6:	4294      	cmp	r4, r2
24006cc8:	bf08      	it	eq
24006cca:	f043 0301 	orreq.w	r3, r3, #1
24006cce:	3230      	adds	r2, #48	; 0x30
24006cd0:	428c      	cmp	r4, r1
24006cd2:	bf08      	it	eq
24006cd4:	f043 0301 	orreq.w	r3, r3, #1
24006cd8:	3130      	adds	r1, #48	; 0x30
24006cda:	4294      	cmp	r4, r2
24006cdc:	bf08      	it	eq
24006cde:	f043 0301 	orreq.w	r3, r3, #1
24006ce2:	3230      	adds	r2, #48	; 0x30
24006ce4:	428c      	cmp	r4, r1
24006ce6:	bf08      	it	eq
24006ce8:	f043 0301 	orreq.w	r3, r3, #1
24006cec:	3130      	adds	r1, #48	; 0x30
24006cee:	4294      	cmp	r4, r2
24006cf0:	bf08      	it	eq
24006cf2:	f043 0301 	orreq.w	r3, r3, #1
24006cf6:	4a6e      	ldr	r2, [pc, #440]	; (24006eb0 <HAL_DMA_Start_IT+0x564>)
24006cf8:	428c      	cmp	r4, r1
24006cfa:	bf08      	it	eq
24006cfc:	f043 0301 	orreq.w	r3, r3, #1
24006d00:	496c      	ldr	r1, [pc, #432]	; (24006eb4 <HAL_DMA_Start_IT+0x568>)
24006d02:	4294      	cmp	r4, r2
24006d04:	bf08      	it	eq
24006d06:	f043 0301 	orreq.w	r3, r3, #1
24006d0a:	3228      	adds	r2, #40	; 0x28
24006d0c:	428c      	cmp	r4, r1
24006d0e:	bf08      	it	eq
24006d10:	f043 0301 	orreq.w	r3, r3, #1
24006d14:	3128      	adds	r1, #40	; 0x28
24006d16:	4294      	cmp	r4, r2
24006d18:	bf08      	it	eq
24006d1a:	f043 0301 	orreq.w	r3, r3, #1
24006d1e:	3228      	adds	r2, #40	; 0x28
24006d20:	428c      	cmp	r4, r1
24006d22:	bf08      	it	eq
24006d24:	f043 0301 	orreq.w	r3, r3, #1
24006d28:	3128      	adds	r1, #40	; 0x28
24006d2a:	4294      	cmp	r4, r2
24006d2c:	bf08      	it	eq
24006d2e:	f043 0301 	orreq.w	r3, r3, #1
24006d32:	3228      	adds	r2, #40	; 0x28
24006d34:	428c      	cmp	r4, r1
24006d36:	bf08      	it	eq
24006d38:	f043 0301 	orreq.w	r3, r3, #1
24006d3c:	4294      	cmp	r4, r2
24006d3e:	bf08      	it	eq
24006d40:	f043 0301 	orreq.w	r3, r3, #1
24006d44:	b913      	cbnz	r3, 24006d4c <HAL_DMA_Start_IT+0x400>
24006d46:	4b5c      	ldr	r3, [pc, #368]	; (24006eb8 <HAL_DMA_Start_IT+0x56c>)
24006d48:	429c      	cmp	r4, r3
24006d4a:	d111      	bne.n	24006d70 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24006d4c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24006d50:	681a      	ldr	r2, [r3, #0]
24006d52:	03d2      	lsls	r2, r2, #15
24006d54:	d503      	bpl.n	24006d5e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24006d56:	681a      	ldr	r2, [r3, #0]
24006d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24006d5c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
24006d5e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
24006d62:	b11b      	cbz	r3, 24006d6c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24006d64:	681a      	ldr	r2, [r3, #0]
24006d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24006d6a:	601a      	str	r2, [r3, #0]
24006d6c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
24006d70:	4b4c      	ldr	r3, [pc, #304]	; (24006ea4 <HAL_DMA_Start_IT+0x558>)
24006d72:	494d      	ldr	r1, [pc, #308]	; (24006ea8 <HAL_DMA_Start_IT+0x55c>)
24006d74:	4a4d      	ldr	r2, [pc, #308]	; (24006eac <HAL_DMA_Start_IT+0x560>)
24006d76:	428c      	cmp	r4, r1
24006d78:	bf18      	it	ne
24006d7a:	429c      	cmpne	r4, r3
24006d7c:	484f      	ldr	r0, [pc, #316]	; (24006ebc <HAL_DMA_Start_IT+0x570>)
24006d7e:	f101 0160 	add.w	r1, r1, #96	; 0x60
24006d82:	bf0c      	ite	eq
24006d84:	2301      	moveq	r3, #1
24006d86:	2300      	movne	r3, #0
24006d88:	4294      	cmp	r4, r2
24006d8a:	bf08      	it	eq
24006d8c:	f043 0301 	orreq.w	r3, r3, #1
24006d90:	3230      	adds	r2, #48	; 0x30
24006d92:	4284      	cmp	r4, r0
24006d94:	bf08      	it	eq
24006d96:	f043 0301 	orreq.w	r3, r3, #1
24006d9a:	3060      	adds	r0, #96	; 0x60
24006d9c:	4294      	cmp	r4, r2
24006d9e:	bf08      	it	eq
24006da0:	f043 0301 	orreq.w	r3, r3, #1
24006da4:	3230      	adds	r2, #48	; 0x30
24006da6:	428c      	cmp	r4, r1
24006da8:	bf08      	it	eq
24006daa:	f043 0301 	orreq.w	r3, r3, #1
24006dae:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
24006db2:	4294      	cmp	r4, r2
24006db4:	bf08      	it	eq
24006db6:	f043 0301 	orreq.w	r3, r3, #1
24006dba:	f502 725c 	add.w	r2, r2, #880	; 0x370
24006dbe:	4284      	cmp	r4, r0
24006dc0:	bf08      	it	eq
24006dc2:	f043 0301 	orreq.w	r3, r3, #1
24006dc6:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
24006dca:	4294      	cmp	r4, r2
24006dcc:	bf08      	it	eq
24006dce:	f043 0301 	orreq.w	r3, r3, #1
24006dd2:	3230      	adds	r2, #48	; 0x30
24006dd4:	428c      	cmp	r4, r1
24006dd6:	bf08      	it	eq
24006dd8:	f043 0301 	orreq.w	r3, r3, #1
24006ddc:	3160      	adds	r1, #96	; 0x60
24006dde:	4294      	cmp	r4, r2
24006de0:	bf08      	it	eq
24006de2:	f043 0301 	orreq.w	r3, r3, #1
24006de6:	3230      	adds	r2, #48	; 0x30
24006de8:	4284      	cmp	r4, r0
24006dea:	bf08      	it	eq
24006dec:	f043 0301 	orreq.w	r3, r3, #1
24006df0:	4294      	cmp	r4, r2
24006df2:	bf08      	it	eq
24006df4:	f043 0301 	orreq.w	r3, r3, #1
24006df8:	3230      	adds	r2, #48	; 0x30
24006dfa:	428c      	cmp	r4, r1
24006dfc:	bf08      	it	eq
24006dfe:	f043 0301 	orreq.w	r3, r3, #1
24006e02:	4294      	cmp	r4, r2
24006e04:	bf08      	it	eq
24006e06:	f043 0301 	orreq.w	r3, r3, #1
24006e0a:	b933      	cbnz	r3, 24006e1a <HAL_DMA_Start_IT+0x4ce>
24006e0c:	3060      	adds	r0, #96	; 0x60
24006e0e:	1a20      	subs	r0, r4, r0
24006e10:	fab0 f080 	clz	r0, r0
24006e14:	0940      	lsrs	r0, r0, #5
24006e16:	2800      	cmp	r0, #0
24006e18:	d03d      	beq.n	24006e96 <HAL_DMA_Start_IT+0x54a>
24006e1a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006e1c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
24006e1e:	f043 0301 	orr.w	r3, r3, #1
24006e22:	6023      	str	r3, [r4, #0]
}
24006e24:	bc70      	pop	{r4, r5, r6}
24006e26:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006e28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24006e2a:	f8dc 3000 	ldr.w	r3, [ip]
24006e2e:	60d9      	str	r1, [r3, #12]
24006e30:	e6a3      	b.n	24006b7a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
24006e32:	2001      	movs	r0, #1
24006e34:	4770      	bx	lr
  __HAL_LOCK(hdma);
24006e36:	2002      	movs	r0, #2
}
24006e38:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24006e3a:	481d      	ldr	r0, [pc, #116]	; (24006eb0 <HAL_DMA_Start_IT+0x564>)
24006e3c:	4e1d      	ldr	r6, [pc, #116]	; (24006eb4 <HAL_DMA_Start_IT+0x568>)
24006e3e:	42b4      	cmp	r4, r6
24006e40:	bf18      	it	ne
24006e42:	4284      	cmpne	r4, r0
24006e44:	f106 0614 	add.w	r6, r6, #20
24006e48:	bf0c      	ite	eq
24006e4a:	2001      	moveq	r0, #1
24006e4c:	2000      	movne	r0, #0
24006e4e:	42b4      	cmp	r4, r6
24006e50:	bf08      	it	eq
24006e52:	f040 0001 	orreq.w	r0, r0, #1
24006e56:	3614      	adds	r6, #20
24006e58:	42b4      	cmp	r4, r6
24006e5a:	bf08      	it	eq
24006e5c:	f040 0001 	orreq.w	r0, r0, #1
24006e60:	3614      	adds	r6, #20
24006e62:	42b4      	cmp	r4, r6
24006e64:	bf08      	it	eq
24006e66:	f040 0001 	orreq.w	r0, r0, #1
24006e6a:	3614      	adds	r6, #20
24006e6c:	42b4      	cmp	r4, r6
24006e6e:	bf08      	it	eq
24006e70:	f040 0001 	orreq.w	r0, r0, #1
24006e74:	3614      	adds	r6, #20
24006e76:	42b4      	cmp	r4, r6
24006e78:	bf08      	it	eq
24006e7a:	f040 0001 	orreq.w	r0, r0, #1
24006e7e:	b910      	cbnz	r0, 24006e86 <HAL_DMA_Start_IT+0x53a>
24006e80:	480d      	ldr	r0, [pc, #52]	; (24006eb8 <HAL_DMA_Start_IT+0x56c>)
24006e82:	4284      	cmp	r4, r0
24006e84:	d11c      	bne.n	24006ec0 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006e86:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24006e8a:	f000 041f 	and.w	r4, r0, #31
24006e8e:	2001      	movs	r0, #1
24006e90:	40a0      	lsls	r0, r4
24006e92:	6068      	str	r0, [r5, #4]
24006e94:	e663      	b.n	24006b5e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
24006e96:	6823      	ldr	r3, [r4, #0]
24006e98:	f043 0301 	orr.w	r3, r3, #1
24006e9c:	6023      	str	r3, [r4, #0]
24006e9e:	e56d      	b.n	2400697c <HAL_DMA_Start_IT+0x30>
24006ea0:	400204b8 	.word	0x400204b8
24006ea4:	40020010 	.word	0x40020010
24006ea8:	40020028 	.word	0x40020028
24006eac:	40020040 	.word	0x40020040
24006eb0:	58025408 	.word	0x58025408
24006eb4:	5802541c 	.word	0x5802541c
24006eb8:	58025494 	.word	0x58025494
24006ebc:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24006ec0:	6823      	ldr	r3, [r4, #0]
24006ec2:	f023 030e 	bic.w	r3, r3, #14
24006ec6:	f043 030a 	orr.w	r3, r3, #10
24006eca:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24006ecc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24006ed0:	2b00      	cmp	r3, #0
24006ed2:	f43f aec1 	beq.w	24006c58 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24006ed6:	f8dc 2000 	ldr.w	r2, [ip]
24006eda:	6813      	ldr	r3, [r2, #0]
24006edc:	f043 0304 	orr.w	r3, r3, #4
24006ee0:	6013      	str	r3, [r2, #0]
24006ee2:	e6b9      	b.n	24006c58 <HAL_DMA_Start_IT+0x30c>

24006ee4 <HAL_DMA_Abort>:
{
24006ee4:	b570      	push	{r4, r5, r6, lr}
24006ee6:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
24006ee8:	f7ff f8ec 	bl	240060c4 <HAL_GetTick>
  if(hdma == NULL)
24006eec:	2e00      	cmp	r6, #0
24006eee:	f000 81ef 	beq.w	240072d0 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
24006ef2:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
24006ef6:	2b02      	cmp	r3, #2
24006ef8:	f040 81d9 	bne.w	240072ae <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006efc:	6832      	ldr	r2, [r6, #0]
24006efe:	4604      	mov	r4, r0
24006f00:	4b6e      	ldr	r3, [pc, #440]	; (240070bc <HAL_DMA_Abort+0x1d8>)
24006f02:	496f      	ldr	r1, [pc, #444]	; (240070c0 <HAL_DMA_Abort+0x1dc>)
24006f04:	428a      	cmp	r2, r1
24006f06:	bf18      	it	ne
24006f08:	429a      	cmpne	r2, r3
24006f0a:	f101 0118 	add.w	r1, r1, #24
24006f0e:	bf0c      	ite	eq
24006f10:	2301      	moveq	r3, #1
24006f12:	2300      	movne	r3, #0
24006f14:	428a      	cmp	r2, r1
24006f16:	bf08      	it	eq
24006f18:	f043 0301 	orreq.w	r3, r3, #1
24006f1c:	3118      	adds	r1, #24
24006f1e:	428a      	cmp	r2, r1
24006f20:	bf08      	it	eq
24006f22:	f043 0301 	orreq.w	r3, r3, #1
24006f26:	3118      	adds	r1, #24
24006f28:	428a      	cmp	r2, r1
24006f2a:	bf08      	it	eq
24006f2c:	f043 0301 	orreq.w	r3, r3, #1
24006f30:	3118      	adds	r1, #24
24006f32:	428a      	cmp	r2, r1
24006f34:	bf08      	it	eq
24006f36:	f043 0301 	orreq.w	r3, r3, #1
24006f3a:	3118      	adds	r1, #24
24006f3c:	428a      	cmp	r2, r1
24006f3e:	bf08      	it	eq
24006f40:	f043 0301 	orreq.w	r3, r3, #1
24006f44:	3118      	adds	r1, #24
24006f46:	428a      	cmp	r2, r1
24006f48:	bf08      	it	eq
24006f4a:	f043 0301 	orreq.w	r3, r3, #1
24006f4e:	f501 7156 	add.w	r1, r1, #856	; 0x358
24006f52:	428a      	cmp	r2, r1
24006f54:	bf08      	it	eq
24006f56:	f043 0301 	orreq.w	r3, r3, #1
24006f5a:	3118      	adds	r1, #24
24006f5c:	428a      	cmp	r2, r1
24006f5e:	bf08      	it	eq
24006f60:	f043 0301 	orreq.w	r3, r3, #1
24006f64:	3118      	adds	r1, #24
24006f66:	428a      	cmp	r2, r1
24006f68:	bf08      	it	eq
24006f6a:	f043 0301 	orreq.w	r3, r3, #1
24006f6e:	3118      	adds	r1, #24
24006f70:	428a      	cmp	r2, r1
24006f72:	bf08      	it	eq
24006f74:	f043 0301 	orreq.w	r3, r3, #1
24006f78:	3118      	adds	r1, #24
24006f7a:	428a      	cmp	r2, r1
24006f7c:	bf08      	it	eq
24006f7e:	f043 0301 	orreq.w	r3, r3, #1
24006f82:	3118      	adds	r1, #24
24006f84:	428a      	cmp	r2, r1
24006f86:	bf08      	it	eq
24006f88:	f043 0301 	orreq.w	r3, r3, #1
24006f8c:	3118      	adds	r1, #24
24006f8e:	428a      	cmp	r2, r1
24006f90:	bf08      	it	eq
24006f92:	f043 0301 	orreq.w	r3, r3, #1
24006f96:	b91b      	cbnz	r3, 24006fa0 <HAL_DMA_Abort+0xbc>
24006f98:	4b4a      	ldr	r3, [pc, #296]	; (240070c4 <HAL_DMA_Abort+0x1e0>)
24006f9a:	429a      	cmp	r2, r3
24006f9c:	f040 81a2 	bne.w	240072e4 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24006fa0:	6813      	ldr	r3, [r2, #0]
24006fa2:	f023 031e 	bic.w	r3, r3, #30
24006fa6:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24006fa8:	6832      	ldr	r2, [r6, #0]
24006faa:	6953      	ldr	r3, [r2, #20]
24006fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006fb0:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24006fb2:	6832      	ldr	r2, [r6, #0]
24006fb4:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006fb6:	4b41      	ldr	r3, [pc, #260]	; (240070bc <HAL_DMA_Abort+0x1d8>)
24006fb8:	4941      	ldr	r1, [pc, #260]	; (240070c0 <HAL_DMA_Abort+0x1dc>)
24006fba:	428a      	cmp	r2, r1
24006fbc:	bf18      	it	ne
24006fbe:	429a      	cmpne	r2, r3
24006fc0:	f101 0118 	add.w	r1, r1, #24
24006fc4:	bf0c      	ite	eq
24006fc6:	2301      	moveq	r3, #1
24006fc8:	2300      	movne	r3, #0
24006fca:	428a      	cmp	r2, r1
24006fcc:	bf08      	it	eq
24006fce:	f043 0301 	orreq.w	r3, r3, #1
24006fd2:	3118      	adds	r1, #24
24006fd4:	428a      	cmp	r2, r1
24006fd6:	bf08      	it	eq
24006fd8:	f043 0301 	orreq.w	r3, r3, #1
24006fdc:	3118      	adds	r1, #24
24006fde:	428a      	cmp	r2, r1
24006fe0:	bf08      	it	eq
24006fe2:	f043 0301 	orreq.w	r3, r3, #1
24006fe6:	3118      	adds	r1, #24
24006fe8:	428a      	cmp	r2, r1
24006fea:	bf08      	it	eq
24006fec:	f043 0301 	orreq.w	r3, r3, #1
24006ff0:	3118      	adds	r1, #24
24006ff2:	428a      	cmp	r2, r1
24006ff4:	bf08      	it	eq
24006ff6:	f043 0301 	orreq.w	r3, r3, #1
24006ffa:	3118      	adds	r1, #24
24006ffc:	428a      	cmp	r2, r1
24006ffe:	bf08      	it	eq
24007000:	f043 0301 	orreq.w	r3, r3, #1
24007004:	f501 7156 	add.w	r1, r1, #856	; 0x358
24007008:	428a      	cmp	r2, r1
2400700a:	bf08      	it	eq
2400700c:	f043 0301 	orreq.w	r3, r3, #1
24007010:	3118      	adds	r1, #24
24007012:	428a      	cmp	r2, r1
24007014:	bf08      	it	eq
24007016:	f043 0301 	orreq.w	r3, r3, #1
2400701a:	3118      	adds	r1, #24
2400701c:	428a      	cmp	r2, r1
2400701e:	bf08      	it	eq
24007020:	f043 0301 	orreq.w	r3, r3, #1
24007024:	3118      	adds	r1, #24
24007026:	428a      	cmp	r2, r1
24007028:	bf08      	it	eq
2400702a:	f043 0301 	orreq.w	r3, r3, #1
2400702e:	3118      	adds	r1, #24
24007030:	428a      	cmp	r2, r1
24007032:	bf08      	it	eq
24007034:	f043 0301 	orreq.w	r3, r3, #1
24007038:	3118      	adds	r1, #24
2400703a:	428a      	cmp	r2, r1
2400703c:	bf08      	it	eq
2400703e:	f043 0301 	orreq.w	r3, r3, #1
24007042:	3118      	adds	r1, #24
24007044:	428a      	cmp	r2, r1
24007046:	bf08      	it	eq
24007048:	f043 0301 	orreq.w	r3, r3, #1
2400704c:	3118      	adds	r1, #24
2400704e:	428a      	cmp	r2, r1
24007050:	bf08      	it	eq
24007052:	f043 0301 	orreq.w	r3, r3, #1
24007056:	491c      	ldr	r1, [pc, #112]	; (240070c8 <HAL_DMA_Abort+0x1e4>)
24007058:	428a      	cmp	r2, r1
2400705a:	bf08      	it	eq
2400705c:	f043 0301 	orreq.w	r3, r3, #1
24007060:	3114      	adds	r1, #20
24007062:	428a      	cmp	r2, r1
24007064:	bf08      	it	eq
24007066:	f043 0301 	orreq.w	r3, r3, #1
2400706a:	3114      	adds	r1, #20
2400706c:	428a      	cmp	r2, r1
2400706e:	bf08      	it	eq
24007070:	f043 0301 	orreq.w	r3, r3, #1
24007074:	3114      	adds	r1, #20
24007076:	428a      	cmp	r2, r1
24007078:	bf08      	it	eq
2400707a:	f043 0301 	orreq.w	r3, r3, #1
2400707e:	3114      	adds	r1, #20
24007080:	428a      	cmp	r2, r1
24007082:	bf08      	it	eq
24007084:	f043 0301 	orreq.w	r3, r3, #1
24007088:	3114      	adds	r1, #20
2400708a:	428a      	cmp	r2, r1
2400708c:	bf08      	it	eq
2400708e:	f043 0301 	orreq.w	r3, r3, #1
24007092:	3114      	adds	r1, #20
24007094:	428a      	cmp	r2, r1
24007096:	bf08      	it	eq
24007098:	f043 0301 	orreq.w	r3, r3, #1
2400709c:	b913      	cbnz	r3, 240070a4 <HAL_DMA_Abort+0x1c0>
2400709e:	4b0b      	ldr	r3, [pc, #44]	; (240070cc <HAL_DMA_Abort+0x1e8>)
240070a0:	429a      	cmp	r2, r3
240070a2:	d105      	bne.n	240070b0 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240070a4:	6e32      	ldr	r2, [r6, #96]	; 0x60
240070a6:	6813      	ldr	r3, [r2, #0]
240070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240070ac:	6013      	str	r3, [r2, #0]
240070ae:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
240070b0:	6813      	ldr	r3, [r2, #0]
240070b2:	f023 0301 	bic.w	r3, r3, #1
240070b6:	6013      	str	r3, [r2, #0]
240070b8:	e010      	b.n	240070dc <HAL_DMA_Abort+0x1f8>
240070ba:	bf00      	nop
240070bc:	40020010 	.word	0x40020010
240070c0:	40020028 	.word	0x40020028
240070c4:	400204b8 	.word	0x400204b8
240070c8:	58025408 	.word	0x58025408
240070cc:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240070d0:	f7fe fff8 	bl	240060c4 <HAL_GetTick>
240070d4:	1b00      	subs	r0, r0, r4
240070d6:	2805      	cmp	r0, #5
240070d8:	f200 80f0 	bhi.w	240072bc <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240070dc:	682b      	ldr	r3, [r5, #0]
240070de:	07db      	lsls	r3, r3, #31
240070e0:	d4f6      	bmi.n	240070d0 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240070e2:	6832      	ldr	r2, [r6, #0]
240070e4:	4b83      	ldr	r3, [pc, #524]	; (240072f4 <HAL_DMA_Abort+0x410>)
240070e6:	4884      	ldr	r0, [pc, #528]	; (240072f8 <HAL_DMA_Abort+0x414>)
240070e8:	4984      	ldr	r1, [pc, #528]	; (240072fc <HAL_DMA_Abort+0x418>)
240070ea:	4282      	cmp	r2, r0
240070ec:	bf18      	it	ne
240070ee:	429a      	cmpne	r2, r3
240070f0:	f100 0030 	add.w	r0, r0, #48	; 0x30
240070f4:	bf0c      	ite	eq
240070f6:	2301      	moveq	r3, #1
240070f8:	2300      	movne	r3, #0
240070fa:	428a      	cmp	r2, r1
240070fc:	bf08      	it	eq
240070fe:	f043 0301 	orreq.w	r3, r3, #1
24007102:	3130      	adds	r1, #48	; 0x30
24007104:	4282      	cmp	r2, r0
24007106:	bf08      	it	eq
24007108:	f043 0301 	orreq.w	r3, r3, #1
2400710c:	3030      	adds	r0, #48	; 0x30
2400710e:	428a      	cmp	r2, r1
24007110:	bf08      	it	eq
24007112:	f043 0301 	orreq.w	r3, r3, #1
24007116:	3130      	adds	r1, #48	; 0x30
24007118:	4282      	cmp	r2, r0
2400711a:	bf08      	it	eq
2400711c:	f043 0301 	orreq.w	r3, r3, #1
24007120:	3030      	adds	r0, #48	; 0x30
24007122:	428a      	cmp	r2, r1
24007124:	bf08      	it	eq
24007126:	f043 0301 	orreq.w	r3, r3, #1
2400712a:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400712e:	4282      	cmp	r2, r0
24007130:	bf08      	it	eq
24007132:	f043 0301 	orreq.w	r3, r3, #1
24007136:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400713a:	428a      	cmp	r2, r1
2400713c:	bf08      	it	eq
2400713e:	f043 0301 	orreq.w	r3, r3, #1
24007142:	3130      	adds	r1, #48	; 0x30
24007144:	4282      	cmp	r2, r0
24007146:	bf08      	it	eq
24007148:	f043 0301 	orreq.w	r3, r3, #1
2400714c:	3030      	adds	r0, #48	; 0x30
2400714e:	428a      	cmp	r2, r1
24007150:	bf08      	it	eq
24007152:	f043 0301 	orreq.w	r3, r3, #1
24007156:	3130      	adds	r1, #48	; 0x30
24007158:	4282      	cmp	r2, r0
2400715a:	bf08      	it	eq
2400715c:	f043 0301 	orreq.w	r3, r3, #1
24007160:	3030      	adds	r0, #48	; 0x30
24007162:	428a      	cmp	r2, r1
24007164:	bf08      	it	eq
24007166:	f043 0301 	orreq.w	r3, r3, #1
2400716a:	3130      	adds	r1, #48	; 0x30
2400716c:	4282      	cmp	r2, r0
2400716e:	bf08      	it	eq
24007170:	f043 0301 	orreq.w	r3, r3, #1
24007174:	428a      	cmp	r2, r1
24007176:	bf08      	it	eq
24007178:	f043 0301 	orreq.w	r3, r3, #1
2400717c:	b91b      	cbnz	r3, 24007186 <HAL_DMA_Abort+0x2a2>
2400717e:	4b60      	ldr	r3, [pc, #384]	; (24007300 <HAL_DMA_Abort+0x41c>)
24007180:	429a      	cmp	r2, r3
24007182:	f040 80a7 	bne.w	240072d4 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007186:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24007188:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400718a:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400718c:	f002 021f 	and.w	r2, r2, #31
24007190:	4093      	lsls	r3, r2
24007192:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24007194:	6832      	ldr	r2, [r6, #0]
24007196:	4b57      	ldr	r3, [pc, #348]	; (240072f4 <HAL_DMA_Abort+0x410>)
24007198:	4857      	ldr	r0, [pc, #348]	; (240072f8 <HAL_DMA_Abort+0x414>)
2400719a:	4958      	ldr	r1, [pc, #352]	; (240072fc <HAL_DMA_Abort+0x418>)
2400719c:	4282      	cmp	r2, r0
2400719e:	bf18      	it	ne
240071a0:	429a      	cmpne	r2, r3
240071a2:	f100 0030 	add.w	r0, r0, #48	; 0x30
240071a6:	bf0c      	ite	eq
240071a8:	2301      	moveq	r3, #1
240071aa:	2300      	movne	r3, #0
240071ac:	428a      	cmp	r2, r1
240071ae:	bf08      	it	eq
240071b0:	f043 0301 	orreq.w	r3, r3, #1
240071b4:	3130      	adds	r1, #48	; 0x30
240071b6:	4282      	cmp	r2, r0
240071b8:	bf08      	it	eq
240071ba:	f043 0301 	orreq.w	r3, r3, #1
240071be:	3030      	adds	r0, #48	; 0x30
240071c0:	428a      	cmp	r2, r1
240071c2:	bf08      	it	eq
240071c4:	f043 0301 	orreq.w	r3, r3, #1
240071c8:	3130      	adds	r1, #48	; 0x30
240071ca:	4282      	cmp	r2, r0
240071cc:	bf08      	it	eq
240071ce:	f043 0301 	orreq.w	r3, r3, #1
240071d2:	3030      	adds	r0, #48	; 0x30
240071d4:	428a      	cmp	r2, r1
240071d6:	bf08      	it	eq
240071d8:	f043 0301 	orreq.w	r3, r3, #1
240071dc:	f501 715c 	add.w	r1, r1, #880	; 0x370
240071e0:	4282      	cmp	r2, r0
240071e2:	bf08      	it	eq
240071e4:	f043 0301 	orreq.w	r3, r3, #1
240071e8:	f500 705c 	add.w	r0, r0, #880	; 0x370
240071ec:	428a      	cmp	r2, r1
240071ee:	bf08      	it	eq
240071f0:	f043 0301 	orreq.w	r3, r3, #1
240071f4:	3130      	adds	r1, #48	; 0x30
240071f6:	4282      	cmp	r2, r0
240071f8:	bf08      	it	eq
240071fa:	f043 0301 	orreq.w	r3, r3, #1
240071fe:	3030      	adds	r0, #48	; 0x30
24007200:	428a      	cmp	r2, r1
24007202:	bf08      	it	eq
24007204:	f043 0301 	orreq.w	r3, r3, #1
24007208:	3130      	adds	r1, #48	; 0x30
2400720a:	4282      	cmp	r2, r0
2400720c:	bf08      	it	eq
2400720e:	f043 0301 	orreq.w	r3, r3, #1
24007212:	3030      	adds	r0, #48	; 0x30
24007214:	428a      	cmp	r2, r1
24007216:	bf08      	it	eq
24007218:	f043 0301 	orreq.w	r3, r3, #1
2400721c:	3130      	adds	r1, #48	; 0x30
2400721e:	4282      	cmp	r2, r0
24007220:	bf08      	it	eq
24007222:	f043 0301 	orreq.w	r3, r3, #1
24007226:	3030      	adds	r0, #48	; 0x30
24007228:	428a      	cmp	r2, r1
2400722a:	bf08      	it	eq
2400722c:	f043 0301 	orreq.w	r3, r3, #1
24007230:	4934      	ldr	r1, [pc, #208]	; (24007304 <HAL_DMA_Abort+0x420>)
24007232:	4282      	cmp	r2, r0
24007234:	bf08      	it	eq
24007236:	f043 0301 	orreq.w	r3, r3, #1
2400723a:	4833      	ldr	r0, [pc, #204]	; (24007308 <HAL_DMA_Abort+0x424>)
2400723c:	428a      	cmp	r2, r1
2400723e:	bf08      	it	eq
24007240:	f043 0301 	orreq.w	r3, r3, #1
24007244:	3128      	adds	r1, #40	; 0x28
24007246:	4282      	cmp	r2, r0
24007248:	bf08      	it	eq
2400724a:	f043 0301 	orreq.w	r3, r3, #1
2400724e:	3028      	adds	r0, #40	; 0x28
24007250:	428a      	cmp	r2, r1
24007252:	bf08      	it	eq
24007254:	f043 0301 	orreq.w	r3, r3, #1
24007258:	3128      	adds	r1, #40	; 0x28
2400725a:	4282      	cmp	r2, r0
2400725c:	bf08      	it	eq
2400725e:	f043 0301 	orreq.w	r3, r3, #1
24007262:	3028      	adds	r0, #40	; 0x28
24007264:	428a      	cmp	r2, r1
24007266:	bf08      	it	eq
24007268:	f043 0301 	orreq.w	r3, r3, #1
2400726c:	3128      	adds	r1, #40	; 0x28
2400726e:	4282      	cmp	r2, r0
24007270:	bf08      	it	eq
24007272:	f043 0301 	orreq.w	r3, r3, #1
24007276:	428a      	cmp	r2, r1
24007278:	bf08      	it	eq
2400727a:	f043 0301 	orreq.w	r3, r3, #1
2400727e:	b913      	cbnz	r3, 24007286 <HAL_DMA_Abort+0x3a2>
24007280:	4b22      	ldr	r3, [pc, #136]	; (2400730c <HAL_DMA_Abort+0x428>)
24007282:	429a      	cmp	r2, r3
24007284:	d10b      	bne.n	2400729e <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007286:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
2400728a:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
2400728c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
2400728e:	b133      	cbz	r3, 2400729e <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007290:	681a      	ldr	r2, [r3, #0]
24007292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007296:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007298:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
2400729c:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
2400729e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
240072a0:	2201      	movs	r2, #1
  return HAL_OK;
240072a2:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
240072a4:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240072a8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
240072ac:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240072ae:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
240072b0:	2300      	movs	r3, #0
    return HAL_ERROR;
240072b2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240072b4:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
240072b6:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
240072ba:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240072bc:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
240072be:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
240072c0:	2300      	movs	r3, #0
        return HAL_ERROR;
240072c2:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240072c4:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
240072c6:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
240072ca:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
240072ce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
240072d0:	2001      	movs	r0, #1
}
240072d2:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240072d4:	6df2      	ldr	r2, [r6, #92]	; 0x5c
240072d6:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240072d8:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240072da:	f002 021f 	and.w	r2, r2, #31
240072de:	4093      	lsls	r3, r2
240072e0:	604b      	str	r3, [r1, #4]
240072e2:	e757      	b.n	24007194 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240072e4:	6813      	ldr	r3, [r2, #0]
240072e6:	f023 030e 	bic.w	r3, r3, #14
240072ea:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
240072ec:	6832      	ldr	r2, [r6, #0]
240072ee:	4615      	mov	r5, r2
240072f0:	e661      	b.n	24006fb6 <HAL_DMA_Abort+0xd2>
240072f2:	bf00      	nop
240072f4:	40020010 	.word	0x40020010
240072f8:	40020028 	.word	0x40020028
240072fc:	40020040 	.word	0x40020040
24007300:	400204b8 	.word	0x400204b8
24007304:	58025408 	.word	0x58025408
24007308:	5802541c 	.word	0x5802541c
2400730c:	58025494 	.word	0x58025494

24007310 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24007310:	2800      	cmp	r0, #0
24007312:	d065      	beq.n	240073e0 <HAL_DMA_Abort_IT+0xd0>
{
24007314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
24007318:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
2400731c:	4603      	mov	r3, r0
2400731e:	2a02      	cmp	r2, #2
24007320:	d159      	bne.n	240073d6 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007322:	6801      	ldr	r1, [r0, #0]
24007324:	4883      	ldr	r0, [pc, #524]	; (24007534 <HAL_DMA_Abort_IT+0x224>)
24007326:	4281      	cmp	r1, r0
24007328:	d04b      	beq.n	240073c2 <HAL_DMA_Abort_IT+0xb2>
2400732a:	4c83      	ldr	r4, [pc, #524]	; (24007538 <HAL_DMA_Abort_IT+0x228>)
2400732c:	42a1      	cmp	r1, r4
2400732e:	d048      	beq.n	240073c2 <HAL_DMA_Abort_IT+0xb2>
24007330:	f8df a228 	ldr.w	sl, [pc, #552]	; 2400755c <HAL_DMA_Abort_IT+0x24c>
24007334:	f8df b214 	ldr.w	fp, [pc, #532]	; 2400754c <HAL_DMA_Abort_IT+0x23c>
24007338:	f8df 9224 	ldr.w	r9, [pc, #548]	; 24007560 <HAL_DMA_Abort_IT+0x250>
2400733c:	4559      	cmp	r1, fp
2400733e:	bf18      	it	ne
24007340:	4551      	cmpne	r1, sl
24007342:	f8df 8220 	ldr.w	r8, [pc, #544]	; 24007564 <HAL_DMA_Abort_IT+0x254>
24007346:	f8df e220 	ldr.w	lr, [pc, #544]	; 24007568 <HAL_DMA_Abort_IT+0x258>
2400734a:	bf0c      	ite	eq
2400734c:	2201      	moveq	r2, #1
2400734e:	2200      	movne	r2, #0
24007350:	f8df c218 	ldr.w	ip, [pc, #536]	; 2400756c <HAL_DMA_Abort_IT+0x25c>
24007354:	4549      	cmp	r1, r9
24007356:	bf08      	it	eq
24007358:	f042 0201 	orreq.w	r2, r2, #1
2400735c:	4d77      	ldr	r5, [pc, #476]	; (2400753c <HAL_DMA_Abort_IT+0x22c>)
2400735e:	4f78      	ldr	r7, [pc, #480]	; (24007540 <HAL_DMA_Abort_IT+0x230>)
24007360:	4541      	cmp	r1, r8
24007362:	bf08      	it	eq
24007364:	f042 0201 	orreq.w	r2, r2, #1
24007368:	4e76      	ldr	r6, [pc, #472]	; (24007544 <HAL_DMA_Abort_IT+0x234>)
2400736a:	4571      	cmp	r1, lr
2400736c:	bf08      	it	eq
2400736e:	f042 0201 	orreq.w	r2, r2, #1
24007372:	4561      	cmp	r1, ip
24007374:	bf08      	it	eq
24007376:	f042 0201 	orreq.w	r2, r2, #1
2400737a:	42a9      	cmp	r1, r5
2400737c:	bf08      	it	eq
2400737e:	f042 0201 	orreq.w	r2, r2, #1
24007382:	3518      	adds	r5, #24
24007384:	42a9      	cmp	r1, r5
24007386:	bf08      	it	eq
24007388:	f042 0201 	orreq.w	r2, r2, #1
2400738c:	3518      	adds	r5, #24
2400738e:	42a9      	cmp	r1, r5
24007390:	bf08      	it	eq
24007392:	f042 0201 	orreq.w	r2, r2, #1
24007396:	3518      	adds	r5, #24
24007398:	42a9      	cmp	r1, r5
2400739a:	bf08      	it	eq
2400739c:	f042 0201 	orreq.w	r2, r2, #1
240073a0:	3548      	adds	r5, #72	; 0x48
240073a2:	42b9      	cmp	r1, r7
240073a4:	bf08      	it	eq
240073a6:	f042 0201 	orreq.w	r2, r2, #1
240073aa:	42b1      	cmp	r1, r6
240073ac:	bf08      	it	eq
240073ae:	f042 0201 	orreq.w	r2, r2, #1
240073b2:	42a9      	cmp	r1, r5
240073b4:	bf08      	it	eq
240073b6:	f042 0201 	orreq.w	r2, r2, #1
240073ba:	b912      	cbnz	r2, 240073c2 <HAL_DMA_Abort_IT+0xb2>
240073bc:	4a62      	ldr	r2, [pc, #392]	; (24007548 <HAL_DMA_Abort_IT+0x238>)
240073be:	4291      	cmp	r1, r2
240073c0:	d110      	bne.n	240073e4 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
240073c2:	2204      	movs	r2, #4
  return HAL_OK;
240073c4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
240073c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
240073ca:	680b      	ldr	r3, [r1, #0]
240073cc:	f023 0301 	bic.w	r3, r3, #1
240073d0:	600b      	str	r3, [r1, #0]
}
240073d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240073d6:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
240073d8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240073da:	655a      	str	r2, [r3, #84]	; 0x54
}
240073dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
240073e0:	2001      	movs	r0, #1
}
240073e2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240073e4:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240073e6:	4c54      	ldr	r4, [pc, #336]	; (24007538 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240073e8:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240073ec:	4857      	ldr	r0, [pc, #348]	; (2400754c <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240073ee:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
240073f0:	6819      	ldr	r1, [r3, #0]
240073f2:	680a      	ldr	r2, [r1, #0]
240073f4:	f022 0201 	bic.w	r2, r2, #1
240073f8:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240073fa:	4a4e      	ldr	r2, [pc, #312]	; (24007534 <HAL_DMA_Abort_IT+0x224>)
240073fc:	6819      	ldr	r1, [r3, #0]
240073fe:	42a1      	cmp	r1, r4
24007400:	bf18      	it	ne
24007402:	4291      	cmpne	r1, r2
24007404:	f104 0430 	add.w	r4, r4, #48	; 0x30
24007408:	bf0c      	ite	eq
2400740a:	2201      	moveq	r2, #1
2400740c:	2200      	movne	r2, #0
2400740e:	4281      	cmp	r1, r0
24007410:	bf08      	it	eq
24007412:	f042 0201 	orreq.w	r2, r2, #1
24007416:	3030      	adds	r0, #48	; 0x30
24007418:	42a1      	cmp	r1, r4
2400741a:	bf08      	it	eq
2400741c:	f042 0201 	orreq.w	r2, r2, #1
24007420:	3430      	adds	r4, #48	; 0x30
24007422:	4281      	cmp	r1, r0
24007424:	bf08      	it	eq
24007426:	f042 0201 	orreq.w	r2, r2, #1
2400742a:	3030      	adds	r0, #48	; 0x30
2400742c:	42a1      	cmp	r1, r4
2400742e:	bf08      	it	eq
24007430:	f042 0201 	orreq.w	r2, r2, #1
24007434:	3430      	adds	r4, #48	; 0x30
24007436:	4281      	cmp	r1, r0
24007438:	bf08      	it	eq
2400743a:	f042 0201 	orreq.w	r2, r2, #1
2400743e:	f500 705c 	add.w	r0, r0, #880	; 0x370
24007442:	42a1      	cmp	r1, r4
24007444:	bf08      	it	eq
24007446:	f042 0201 	orreq.w	r2, r2, #1
2400744a:	f504 745c 	add.w	r4, r4, #880	; 0x370
2400744e:	4281      	cmp	r1, r0
24007450:	bf08      	it	eq
24007452:	f042 0201 	orreq.w	r2, r2, #1
24007456:	3030      	adds	r0, #48	; 0x30
24007458:	42a1      	cmp	r1, r4
2400745a:	bf08      	it	eq
2400745c:	f042 0201 	orreq.w	r2, r2, #1
24007460:	3430      	adds	r4, #48	; 0x30
24007462:	4281      	cmp	r1, r0
24007464:	bf08      	it	eq
24007466:	f042 0201 	orreq.w	r2, r2, #1
2400746a:	3030      	adds	r0, #48	; 0x30
2400746c:	42a1      	cmp	r1, r4
2400746e:	bf08      	it	eq
24007470:	f042 0201 	orreq.w	r2, r2, #1
24007474:	3430      	adds	r4, #48	; 0x30
24007476:	4281      	cmp	r1, r0
24007478:	bf08      	it	eq
2400747a:	f042 0201 	orreq.w	r2, r2, #1
2400747e:	3030      	adds	r0, #48	; 0x30
24007480:	42a1      	cmp	r1, r4
24007482:	bf08      	it	eq
24007484:	f042 0201 	orreq.w	r2, r2, #1
24007488:	3430      	adds	r4, #48	; 0x30
2400748a:	4281      	cmp	r1, r0
2400748c:	bf08      	it	eq
2400748e:	f042 0201 	orreq.w	r2, r2, #1
24007492:	482f      	ldr	r0, [pc, #188]	; (24007550 <HAL_DMA_Abort_IT+0x240>)
24007494:	42a1      	cmp	r1, r4
24007496:	bf08      	it	eq
24007498:	f042 0201 	orreq.w	r2, r2, #1
2400749c:	4c2d      	ldr	r4, [pc, #180]	; (24007554 <HAL_DMA_Abort_IT+0x244>)
2400749e:	4281      	cmp	r1, r0
240074a0:	bf08      	it	eq
240074a2:	f042 0201 	orreq.w	r2, r2, #1
240074a6:	3028      	adds	r0, #40	; 0x28
240074a8:	42a1      	cmp	r1, r4
240074aa:	bf08      	it	eq
240074ac:	f042 0201 	orreq.w	r2, r2, #1
240074b0:	3428      	adds	r4, #40	; 0x28
240074b2:	4281      	cmp	r1, r0
240074b4:	bf08      	it	eq
240074b6:	f042 0201 	orreq.w	r2, r2, #1
240074ba:	3028      	adds	r0, #40	; 0x28
240074bc:	42a1      	cmp	r1, r4
240074be:	bf08      	it	eq
240074c0:	f042 0201 	orreq.w	r2, r2, #1
240074c4:	3428      	adds	r4, #40	; 0x28
240074c6:	4281      	cmp	r1, r0
240074c8:	bf08      	it	eq
240074ca:	f042 0201 	orreq.w	r2, r2, #1
240074ce:	3028      	adds	r0, #40	; 0x28
240074d0:	42a1      	cmp	r1, r4
240074d2:	bf08      	it	eq
240074d4:	f042 0201 	orreq.w	r2, r2, #1
240074d8:	4281      	cmp	r1, r0
240074da:	bf08      	it	eq
240074dc:	f042 0201 	orreq.w	r2, r2, #1
240074e0:	b912      	cbnz	r2, 240074e8 <HAL_DMA_Abort_IT+0x1d8>
240074e2:	4a1d      	ldr	r2, [pc, #116]	; (24007558 <HAL_DMA_Abort_IT+0x248>)
240074e4:	4291      	cmp	r1, r2
240074e6:	d117      	bne.n	24007518 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240074e8:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240074ea:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240074ec:	6801      	ldr	r1, [r0, #0]
240074ee:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240074f2:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240074f4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240074f8:	f001 011f 	and.w	r1, r1, #31
240074fc:	408a      	lsls	r2, r1
240074fe:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007500:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24007504:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24007506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24007508:	b132      	cbz	r2, 24007518 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2400750a:	6811      	ldr	r1, [r2, #0]
2400750c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24007510:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007512:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
24007516:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
24007518:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
2400751a:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
2400751c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
2400751e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24007522:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24007526:	b11a      	cbz	r2, 24007530 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
24007528:	4618      	mov	r0, r3
2400752a:	4790      	blx	r2
  return HAL_OK;
2400752c:	4620      	mov	r0, r4
2400752e:	e755      	b.n	240073dc <HAL_DMA_Abort_IT+0xcc>
24007530:	4610      	mov	r0, r2
24007532:	e753      	b.n	240073dc <HAL_DMA_Abort_IT+0xcc>
24007534:	40020010 	.word	0x40020010
24007538:	40020028 	.word	0x40020028
2400753c:	40020410 	.word	0x40020410
24007540:	40020470 	.word	0x40020470
24007544:	40020488 	.word	0x40020488
24007548:	400204b8 	.word	0x400204b8
2400754c:	40020040 	.word	0x40020040
24007550:	58025408 	.word	0x58025408
24007554:	5802541c 	.word	0x5802541c
24007558:	58025494 	.word	0x58025494
2400755c:	40020058 	.word	0x40020058
24007560:	40020070 	.word	0x40020070
24007564:	40020088 	.word	0x40020088
24007568:	400200a0 	.word	0x400200a0
2400756c:	400200b8 	.word	0x400200b8

24007570 <HAL_DMA_IRQHandler>:
{
24007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
24007574:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24007576:	4b9e      	ldr	r3, [pc, #632]	; (240077f0 <HAL_DMA_IRQHandler+0x280>)
{
24007578:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400757a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
2400757c:	681e      	ldr	r6, [r3, #0]
{
2400757e:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
24007580:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24007582:	6803      	ldr	r3, [r0, #0]
24007584:	4a9b      	ldr	r2, [pc, #620]	; (240077f4 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
24007586:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24007588:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
2400758a:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400758c:	d048      	beq.n	24007620 <HAL_DMA_IRQHandler+0xb0>
2400758e:	3218      	adds	r2, #24
24007590:	4293      	cmp	r3, r2
24007592:	d045      	beq.n	24007620 <HAL_DMA_IRQHandler+0xb0>
24007594:	3218      	adds	r2, #24
24007596:	4f98      	ldr	r7, [pc, #608]	; (240077f8 <HAL_DMA_IRQHandler+0x288>)
24007598:	42bb      	cmp	r3, r7
2400759a:	bf18      	it	ne
2400759c:	4293      	cmpne	r3, r2
2400759e:	f107 0718 	add.w	r7, r7, #24
240075a2:	bf0c      	ite	eq
240075a4:	2201      	moveq	r2, #1
240075a6:	2200      	movne	r2, #0
240075a8:	42bb      	cmp	r3, r7
240075aa:	bf08      	it	eq
240075ac:	f042 0201 	orreq.w	r2, r2, #1
240075b0:	3718      	adds	r7, #24
240075b2:	42bb      	cmp	r3, r7
240075b4:	bf08      	it	eq
240075b6:	f042 0201 	orreq.w	r2, r2, #1
240075ba:	3718      	adds	r7, #24
240075bc:	42bb      	cmp	r3, r7
240075be:	bf08      	it	eq
240075c0:	f042 0201 	orreq.w	r2, r2, #1
240075c4:	3718      	adds	r7, #24
240075c6:	42bb      	cmp	r3, r7
240075c8:	bf08      	it	eq
240075ca:	f042 0201 	orreq.w	r2, r2, #1
240075ce:	f507 7756 	add.w	r7, r7, #856	; 0x358
240075d2:	42bb      	cmp	r3, r7
240075d4:	bf08      	it	eq
240075d6:	f042 0201 	orreq.w	r2, r2, #1
240075da:	3718      	adds	r7, #24
240075dc:	42bb      	cmp	r3, r7
240075de:	bf08      	it	eq
240075e0:	f042 0201 	orreq.w	r2, r2, #1
240075e4:	3718      	adds	r7, #24
240075e6:	42bb      	cmp	r3, r7
240075e8:	bf08      	it	eq
240075ea:	f042 0201 	orreq.w	r2, r2, #1
240075ee:	3718      	adds	r7, #24
240075f0:	42bb      	cmp	r3, r7
240075f2:	bf08      	it	eq
240075f4:	f042 0201 	orreq.w	r2, r2, #1
240075f8:	3718      	adds	r7, #24
240075fa:	42bb      	cmp	r3, r7
240075fc:	bf08      	it	eq
240075fe:	f042 0201 	orreq.w	r2, r2, #1
24007602:	3718      	adds	r7, #24
24007604:	42bb      	cmp	r3, r7
24007606:	bf08      	it	eq
24007608:	f042 0201 	orreq.w	r2, r2, #1
2400760c:	3718      	adds	r7, #24
2400760e:	42bb      	cmp	r3, r7
24007610:	bf08      	it	eq
24007612:	f042 0201 	orreq.w	r2, r2, #1
24007616:	b91a      	cbnz	r2, 24007620 <HAL_DMA_IRQHandler+0xb0>
24007618:	4a78      	ldr	r2, [pc, #480]	; (240077fc <HAL_DMA_IRQHandler+0x28c>)
2400761a:	4293      	cmp	r3, r2
2400761c:	f040 82b3 	bne.w	24007b86 <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007620:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
24007624:	2208      	movs	r2, #8
24007626:	f000 011f 	and.w	r1, r0, #31
2400762a:	408a      	lsls	r2, r1
2400762c:	4222      	tst	r2, r4
2400762e:	f040 81a5 	bne.w	2400797c <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007632:	fa24 f201 	lsr.w	r2, r4, r1
24007636:	07d2      	lsls	r2, r2, #31
24007638:	d511      	bpl.n	2400765e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
2400763a:	695a      	ldr	r2, [r3, #20]
2400763c:	0612      	lsls	r2, r2, #24
2400763e:	f140 8269 	bpl.w	24007b14 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24007642:	2301      	movs	r3, #1
24007644:	fa03 f101 	lsl.w	r1, r3, r1
24007648:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2400764a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400764e:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24007652:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007656:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2400765a:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400765e:	f04f 0c04 	mov.w	ip, #4
24007662:	fa0c fc01 	lsl.w	ip, ip, r1
24007666:	ea1c 0f04 	tst.w	ip, r4
2400766a:	d062      	beq.n	24007732 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400766c:	f8d8 2000 	ldr.w	r2, [r8]
24007670:	4f60      	ldr	r7, [pc, #384]	; (240077f4 <HAL_DMA_IRQHandler+0x284>)
24007672:	4b63      	ldr	r3, [pc, #396]	; (24007800 <HAL_DMA_IRQHandler+0x290>)
24007674:	429a      	cmp	r2, r3
24007676:	bf18      	it	ne
24007678:	42ba      	cmpne	r2, r7
2400767a:	f103 0318 	add.w	r3, r3, #24
2400767e:	bf0c      	ite	eq
24007680:	2701      	moveq	r7, #1
24007682:	2700      	movne	r7, #0
24007684:	429a      	cmp	r2, r3
24007686:	bf08      	it	eq
24007688:	f047 0701 	orreq.w	r7, r7, #1
2400768c:	3318      	adds	r3, #24
2400768e:	429a      	cmp	r2, r3
24007690:	bf08      	it	eq
24007692:	f047 0701 	orreq.w	r7, r7, #1
24007696:	3318      	adds	r3, #24
24007698:	429a      	cmp	r2, r3
2400769a:	bf08      	it	eq
2400769c:	f047 0701 	orreq.w	r7, r7, #1
240076a0:	3318      	adds	r3, #24
240076a2:	429a      	cmp	r2, r3
240076a4:	bf08      	it	eq
240076a6:	f047 0701 	orreq.w	r7, r7, #1
240076aa:	3318      	adds	r3, #24
240076ac:	429a      	cmp	r2, r3
240076ae:	bf08      	it	eq
240076b0:	f047 0701 	orreq.w	r7, r7, #1
240076b4:	3318      	adds	r3, #24
240076b6:	429a      	cmp	r2, r3
240076b8:	bf08      	it	eq
240076ba:	f047 0701 	orreq.w	r7, r7, #1
240076be:	f503 7356 	add.w	r3, r3, #856	; 0x358
240076c2:	429a      	cmp	r2, r3
240076c4:	bf08      	it	eq
240076c6:	f047 0701 	orreq.w	r7, r7, #1
240076ca:	3318      	adds	r3, #24
240076cc:	429a      	cmp	r2, r3
240076ce:	bf08      	it	eq
240076d0:	f047 0701 	orreq.w	r7, r7, #1
240076d4:	3318      	adds	r3, #24
240076d6:	429a      	cmp	r2, r3
240076d8:	bf08      	it	eq
240076da:	f047 0701 	orreq.w	r7, r7, #1
240076de:	3318      	adds	r3, #24
240076e0:	429a      	cmp	r2, r3
240076e2:	bf08      	it	eq
240076e4:	f047 0701 	orreq.w	r7, r7, #1
240076e8:	3318      	adds	r3, #24
240076ea:	429a      	cmp	r2, r3
240076ec:	bf08      	it	eq
240076ee:	f047 0701 	orreq.w	r7, r7, #1
240076f2:	3318      	adds	r3, #24
240076f4:	429a      	cmp	r2, r3
240076f6:	bf08      	it	eq
240076f8:	f047 0701 	orreq.w	r7, r7, #1
240076fc:	3318      	adds	r3, #24
240076fe:	429a      	cmp	r2, r3
24007700:	bf08      	it	eq
24007702:	f047 0701 	orreq.w	r7, r7, #1
24007706:	4613      	mov	r3, r2
24007708:	b91f      	cbnz	r7, 24007712 <HAL_DMA_IRQHandler+0x1a2>
2400770a:	4f3c      	ldr	r7, [pc, #240]	; (240077fc <HAL_DMA_IRQHandler+0x28c>)
2400770c:	42ba      	cmp	r2, r7
2400770e:	f040 8277 	bne.w	24007c00 <HAL_DMA_IRQHandler+0x690>
24007712:	681a      	ldr	r2, [r3, #0]
24007714:	0797      	lsls	r7, r2, #30
24007716:	f140 8209 	bpl.w	24007b2c <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400771a:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400771e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007722:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24007726:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400772a:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400772e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007732:	f04f 0c10 	mov.w	ip, #16
24007736:	fa0c fc01 	lsl.w	ip, ip, r1
2400773a:	ea1c 0f04 	tst.w	ip, r4
2400773e:	d079      	beq.n	24007834 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24007740:	f8d8 2000 	ldr.w	r2, [r8]
24007744:	4f2b      	ldr	r7, [pc, #172]	; (240077f4 <HAL_DMA_IRQHandler+0x284>)
24007746:	4b2e      	ldr	r3, [pc, #184]	; (24007800 <HAL_DMA_IRQHandler+0x290>)
24007748:	429a      	cmp	r2, r3
2400774a:	bf18      	it	ne
2400774c:	42ba      	cmpne	r2, r7
2400774e:	f103 0318 	add.w	r3, r3, #24
24007752:	bf0c      	ite	eq
24007754:	2701      	moveq	r7, #1
24007756:	2700      	movne	r7, #0
24007758:	429a      	cmp	r2, r3
2400775a:	bf08      	it	eq
2400775c:	f047 0701 	orreq.w	r7, r7, #1
24007760:	3318      	adds	r3, #24
24007762:	429a      	cmp	r2, r3
24007764:	bf08      	it	eq
24007766:	f047 0701 	orreq.w	r7, r7, #1
2400776a:	3318      	adds	r3, #24
2400776c:	429a      	cmp	r2, r3
2400776e:	bf08      	it	eq
24007770:	f047 0701 	orreq.w	r7, r7, #1
24007774:	3318      	adds	r3, #24
24007776:	429a      	cmp	r2, r3
24007778:	bf08      	it	eq
2400777a:	f047 0701 	orreq.w	r7, r7, #1
2400777e:	3318      	adds	r3, #24
24007780:	429a      	cmp	r2, r3
24007782:	bf08      	it	eq
24007784:	f047 0701 	orreq.w	r7, r7, #1
24007788:	3318      	adds	r3, #24
2400778a:	429a      	cmp	r2, r3
2400778c:	bf08      	it	eq
2400778e:	f047 0701 	orreq.w	r7, r7, #1
24007792:	f503 7356 	add.w	r3, r3, #856	; 0x358
24007796:	429a      	cmp	r2, r3
24007798:	bf08      	it	eq
2400779a:	f047 0701 	orreq.w	r7, r7, #1
2400779e:	3318      	adds	r3, #24
240077a0:	429a      	cmp	r2, r3
240077a2:	bf08      	it	eq
240077a4:	f047 0701 	orreq.w	r7, r7, #1
240077a8:	3318      	adds	r3, #24
240077aa:	429a      	cmp	r2, r3
240077ac:	bf08      	it	eq
240077ae:	f047 0701 	orreq.w	r7, r7, #1
240077b2:	3318      	adds	r3, #24
240077b4:	429a      	cmp	r2, r3
240077b6:	bf08      	it	eq
240077b8:	f047 0701 	orreq.w	r7, r7, #1
240077bc:	3318      	adds	r3, #24
240077be:	429a      	cmp	r2, r3
240077c0:	bf08      	it	eq
240077c2:	f047 0701 	orreq.w	r7, r7, #1
240077c6:	3318      	adds	r3, #24
240077c8:	429a      	cmp	r2, r3
240077ca:	bf08      	it	eq
240077cc:	f047 0701 	orreq.w	r7, r7, #1
240077d0:	3318      	adds	r3, #24
240077d2:	429a      	cmp	r2, r3
240077d4:	bf08      	it	eq
240077d6:	f047 0701 	orreq.w	r7, r7, #1
240077da:	4613      	mov	r3, r2
240077dc:	b91f      	cbnz	r7, 240077e6 <HAL_DMA_IRQHandler+0x276>
240077de:	4f07      	ldr	r7, [pc, #28]	; (240077fc <HAL_DMA_IRQHandler+0x28c>)
240077e0:	42ba      	cmp	r2, r7
240077e2:	f040 814b 	bne.w	24007a7c <HAL_DMA_IRQHandler+0x50c>
240077e6:	681a      	ldr	r2, [r3, #0]
240077e8:	0710      	lsls	r0, r2, #28
240077ea:	f140 818c 	bpl.w	24007b06 <HAL_DMA_IRQHandler+0x596>
240077ee:	e009      	b.n	24007804 <HAL_DMA_IRQHandler+0x294>
240077f0:	20000750 	.word	0x20000750
240077f4:	40020010 	.word	0x40020010
240077f8:	40020058 	.word	0x40020058
240077fc:	400204b8 	.word	0x400204b8
24007800:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24007804:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24007808:	f8d8 3000 	ldr.w	r3, [r8]
2400780c:	681a      	ldr	r2, [r3, #0]
2400780e:	0352      	lsls	r2, r2, #13
24007810:	f100 8195 	bmi.w	24007b3e <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24007814:	681a      	ldr	r2, [r3, #0]
24007816:	05d7      	lsls	r7, r2, #23
24007818:	d403      	bmi.n	24007822 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2400781a:	681a      	ldr	r2, [r3, #0]
2400781c:	f022 0208 	bic.w	r2, r2, #8
24007820:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24007822:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24007826:	b10b      	cbz	r3, 2400782c <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
24007828:	4640      	mov	r0, r8
2400782a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400782c:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
24007830:	f001 011f 	and.w	r1, r1, #31
24007834:	2320      	movs	r3, #32
24007836:	fa03 f101 	lsl.w	r1, r3, r1
2400783a:	4221      	tst	r1, r4
2400783c:	d069      	beq.n	24007912 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
2400783e:	f8d8 3000 	ldr.w	r3, [r8]
24007842:	4a97      	ldr	r2, [pc, #604]	; (24007aa0 <HAL_DMA_IRQHandler+0x530>)
24007844:	4c97      	ldr	r4, [pc, #604]	; (24007aa4 <HAL_DMA_IRQHandler+0x534>)
24007846:	42a3      	cmp	r3, r4
24007848:	bf18      	it	ne
2400784a:	4293      	cmpne	r3, r2
2400784c:	f104 0418 	add.w	r4, r4, #24
24007850:	bf0c      	ite	eq
24007852:	2201      	moveq	r2, #1
24007854:	2200      	movne	r2, #0
24007856:	42a3      	cmp	r3, r4
24007858:	bf08      	it	eq
2400785a:	f042 0201 	orreq.w	r2, r2, #1
2400785e:	3418      	adds	r4, #24
24007860:	42a3      	cmp	r3, r4
24007862:	bf08      	it	eq
24007864:	f042 0201 	orreq.w	r2, r2, #1
24007868:	3418      	adds	r4, #24
2400786a:	42a3      	cmp	r3, r4
2400786c:	bf08      	it	eq
2400786e:	f042 0201 	orreq.w	r2, r2, #1
24007872:	3418      	adds	r4, #24
24007874:	42a3      	cmp	r3, r4
24007876:	bf08      	it	eq
24007878:	f042 0201 	orreq.w	r2, r2, #1
2400787c:	3418      	adds	r4, #24
2400787e:	42a3      	cmp	r3, r4
24007880:	bf08      	it	eq
24007882:	f042 0201 	orreq.w	r2, r2, #1
24007886:	3418      	adds	r4, #24
24007888:	42a3      	cmp	r3, r4
2400788a:	bf08      	it	eq
2400788c:	f042 0201 	orreq.w	r2, r2, #1
24007890:	f504 7456 	add.w	r4, r4, #856	; 0x358
24007894:	42a3      	cmp	r3, r4
24007896:	bf08      	it	eq
24007898:	f042 0201 	orreq.w	r2, r2, #1
2400789c:	3418      	adds	r4, #24
2400789e:	42a3      	cmp	r3, r4
240078a0:	bf08      	it	eq
240078a2:	f042 0201 	orreq.w	r2, r2, #1
240078a6:	3418      	adds	r4, #24
240078a8:	42a3      	cmp	r3, r4
240078aa:	bf08      	it	eq
240078ac:	f042 0201 	orreq.w	r2, r2, #1
240078b0:	3418      	adds	r4, #24
240078b2:	42a3      	cmp	r3, r4
240078b4:	bf08      	it	eq
240078b6:	f042 0201 	orreq.w	r2, r2, #1
240078ba:	3418      	adds	r4, #24
240078bc:	42a3      	cmp	r3, r4
240078be:	bf08      	it	eq
240078c0:	f042 0201 	orreq.w	r2, r2, #1
240078c4:	3418      	adds	r4, #24
240078c6:	42a3      	cmp	r3, r4
240078c8:	bf08      	it	eq
240078ca:	f042 0201 	orreq.w	r2, r2, #1
240078ce:	3418      	adds	r4, #24
240078d0:	42a3      	cmp	r3, r4
240078d2:	bf08      	it	eq
240078d4:	f042 0201 	orreq.w	r2, r2, #1
240078d8:	b91a      	cbnz	r2, 240078e2 <HAL_DMA_IRQHandler+0x372>
240078da:	4a73      	ldr	r2, [pc, #460]	; (24007aa8 <HAL_DMA_IRQHandler+0x538>)
240078dc:	4293      	cmp	r3, r2
240078de:	f040 80da 	bne.w	24007a96 <HAL_DMA_IRQHandler+0x526>
240078e2:	681b      	ldr	r3, [r3, #0]
240078e4:	06dc      	lsls	r4, r3, #27
240078e6:	d514      	bpl.n	24007912 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
240078e8:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
240078ea:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
240078ee:	2b04      	cmp	r3, #4
240078f0:	f000 80de 	beq.w	24007ab0 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240078f4:	f8d8 3000 	ldr.w	r3, [r8]
240078f8:	681a      	ldr	r2, [r3, #0]
240078fa:	0352      	lsls	r2, r2, #13
240078fc:	f140 8129 	bpl.w	24007b52 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24007900:	681b      	ldr	r3, [r3, #0]
24007902:	031b      	lsls	r3, r3, #12
24007904:	f140 8134 	bpl.w	24007b70 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
24007908:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
2400790c:	b10b      	cbz	r3, 24007912 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
2400790e:	4640      	mov	r0, r8
24007910:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24007912:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24007916:	2b00      	cmp	r3, #0
24007918:	f000 80f2 	beq.w	24007b00 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2400791c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24007920:	07df      	lsls	r7, r3, #31
24007922:	d521      	bpl.n	24007968 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
24007924:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
24007928:	2104      	movs	r1, #4
2400792a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
2400792e:	6813      	ldr	r3, [r2, #0]
24007930:	f023 0301 	bic.w	r3, r3, #1
24007934:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24007936:	4b5d      	ldr	r3, [pc, #372]	; (24007aac <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24007938:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
2400793c:	fba3 3606 	umull	r3, r6, r3, r6
24007940:	0ab6      	lsrs	r6, r6, #10
24007942:	e002      	b.n	2400794a <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24007944:	6813      	ldr	r3, [r2, #0]
24007946:	07dd      	lsls	r5, r3, #31
24007948:	d504      	bpl.n	24007954 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
2400794a:	9b01      	ldr	r3, [sp, #4]
2400794c:	3301      	adds	r3, #1
2400794e:	42b3      	cmp	r3, r6
24007950:	9301      	str	r3, [sp, #4]
24007952:	d9f7      	bls.n	24007944 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24007954:	6813      	ldr	r3, [r2, #0]
24007956:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24007958:	bf4c      	ite	mi
2400795a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
2400795c:	2301      	movpl	r3, #1
2400795e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24007962:	2300      	movs	r3, #0
24007964:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24007968:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
2400796c:	2b00      	cmp	r3, #0
2400796e:	f000 80c7 	beq.w	24007b00 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
24007972:	4640      	mov	r0, r8
}
24007974:	b002      	add	sp, #8
24007976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
2400797a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
2400797c:	681a      	ldr	r2, [r3, #0]
2400797e:	0752      	lsls	r2, r2, #29
24007980:	d514      	bpl.n	240079ac <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24007982:	681a      	ldr	r2, [r3, #0]
24007984:	f022 0204 	bic.w	r2, r2, #4
24007988:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400798a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
2400798e:	f003 021f 	and.w	r2, r3, #31
24007992:	2308      	movs	r3, #8
24007994:	4093      	lsls	r3, r2
24007996:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24007998:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400799c:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240079a0:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240079a4:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240079a8:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240079ac:	fa24 f301 	lsr.w	r3, r4, r1
240079b0:	07df      	lsls	r7, r3, #31
240079b2:	f57f ae54 	bpl.w	2400765e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240079b6:	f8d8 2000 	ldr.w	r2, [r8]
240079ba:	4f39      	ldr	r7, [pc, #228]	; (24007aa0 <HAL_DMA_IRQHandler+0x530>)
240079bc:	4b39      	ldr	r3, [pc, #228]	; (24007aa4 <HAL_DMA_IRQHandler+0x534>)
240079be:	429a      	cmp	r2, r3
240079c0:	bf18      	it	ne
240079c2:	42ba      	cmpne	r2, r7
240079c4:	f103 0318 	add.w	r3, r3, #24
240079c8:	bf0c      	ite	eq
240079ca:	2701      	moveq	r7, #1
240079cc:	2700      	movne	r7, #0
240079ce:	429a      	cmp	r2, r3
240079d0:	bf08      	it	eq
240079d2:	f047 0701 	orreq.w	r7, r7, #1
240079d6:	3318      	adds	r3, #24
240079d8:	429a      	cmp	r2, r3
240079da:	bf08      	it	eq
240079dc:	f047 0701 	orreq.w	r7, r7, #1
240079e0:	3318      	adds	r3, #24
240079e2:	429a      	cmp	r2, r3
240079e4:	bf08      	it	eq
240079e6:	f047 0701 	orreq.w	r7, r7, #1
240079ea:	3318      	adds	r3, #24
240079ec:	429a      	cmp	r2, r3
240079ee:	bf08      	it	eq
240079f0:	f047 0701 	orreq.w	r7, r7, #1
240079f4:	3318      	adds	r3, #24
240079f6:	429a      	cmp	r2, r3
240079f8:	bf08      	it	eq
240079fa:	f047 0701 	orreq.w	r7, r7, #1
240079fe:	3318      	adds	r3, #24
24007a00:	429a      	cmp	r2, r3
24007a02:	bf08      	it	eq
24007a04:	f047 0701 	orreq.w	r7, r7, #1
24007a08:	f503 7356 	add.w	r3, r3, #856	; 0x358
24007a0c:	429a      	cmp	r2, r3
24007a0e:	bf08      	it	eq
24007a10:	f047 0701 	orreq.w	r7, r7, #1
24007a14:	3318      	adds	r3, #24
24007a16:	429a      	cmp	r2, r3
24007a18:	bf08      	it	eq
24007a1a:	f047 0701 	orreq.w	r7, r7, #1
24007a1e:	3318      	adds	r3, #24
24007a20:	429a      	cmp	r2, r3
24007a22:	bf08      	it	eq
24007a24:	f047 0701 	orreq.w	r7, r7, #1
24007a28:	3318      	adds	r3, #24
24007a2a:	429a      	cmp	r2, r3
24007a2c:	bf08      	it	eq
24007a2e:	f047 0701 	orreq.w	r7, r7, #1
24007a32:	3318      	adds	r3, #24
24007a34:	429a      	cmp	r2, r3
24007a36:	bf08      	it	eq
24007a38:	f047 0701 	orreq.w	r7, r7, #1
24007a3c:	3318      	adds	r3, #24
24007a3e:	429a      	cmp	r2, r3
24007a40:	bf08      	it	eq
24007a42:	f047 0701 	orreq.w	r7, r7, #1
24007a46:	3318      	adds	r3, #24
24007a48:	429a      	cmp	r2, r3
24007a4a:	bf08      	it	eq
24007a4c:	f047 0701 	orreq.w	r7, r7, #1
24007a50:	4613      	mov	r3, r2
24007a52:	2f00      	cmp	r7, #0
24007a54:	f47f adf1 	bne.w	2400763a <HAL_DMA_IRQHandler+0xca>
24007a58:	4f13      	ldr	r7, [pc, #76]	; (24007aa8 <HAL_DMA_IRQHandler+0x538>)
24007a5a:	42ba      	cmp	r2, r7
24007a5c:	f43f aded 	beq.w	2400763a <HAL_DMA_IRQHandler+0xca>
24007a60:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007a62:	2304      	movs	r3, #4
24007a64:	408b      	lsls	r3, r1
24007a66:	4223      	tst	r3, r4
24007a68:	f040 80ca 	bne.w	24007c00 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007a6c:	f04f 0c10 	mov.w	ip, #16
24007a70:	fa0c fc01 	lsl.w	ip, ip, r1
24007a74:	ea14 0f0c 	tst.w	r4, ip
24007a78:	f43f aedc 	beq.w	24007834 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24007a7c:	6813      	ldr	r3, [r2, #0]
24007a7e:	0759      	lsls	r1, r3, #29
24007a80:	f53f aec0 	bmi.w	24007804 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007a84:	f000 0e1f 	and.w	lr, r0, #31
24007a88:	2120      	movs	r1, #32
24007a8a:	fa01 f10e 	lsl.w	r1, r1, lr
24007a8e:	420c      	tst	r4, r1
24007a90:	f43f af3f 	beq.w	24007912 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24007a94:	4613      	mov	r3, r2
24007a96:	681b      	ldr	r3, [r3, #0]
24007a98:	0798      	lsls	r0, r3, #30
24007a9a:	f57f af3a 	bpl.w	24007912 <HAL_DMA_IRQHandler+0x3a2>
24007a9e:	e723      	b.n	240078e8 <HAL_DMA_IRQHandler+0x378>
24007aa0:	40020010 	.word	0x40020010
24007aa4:	40020028 	.word	0x40020028
24007aa8:	400204b8 	.word	0x400204b8
24007aac:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24007ab0:	f8d8 2000 	ldr.w	r2, [r8]
24007ab4:	6813      	ldr	r3, [r2, #0]
24007ab6:	f023 0316 	bic.w	r3, r3, #22
24007aba:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24007abc:	f8d8 2000 	ldr.w	r2, [r8]
24007ac0:	6953      	ldr	r3, [r2, #20]
24007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24007ac6:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24007ac8:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24007acc:	2b00      	cmp	r3, #0
24007ace:	d055      	beq.n	24007b7c <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24007ad0:	f8d8 2000 	ldr.w	r2, [r8]
24007ad4:	6813      	ldr	r3, [r2, #0]
24007ad6:	f023 0308 	bic.w	r3, r3, #8
24007ada:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007adc:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
24007ae0:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24007ae2:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007ae4:	f002 021f 	and.w	r2, r2, #31
24007ae8:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24007aea:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007aec:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
24007aee:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24007af2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24007af6:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24007afa:	2b00      	cmp	r3, #0
24007afc:	f47f af39 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
}
24007b00:	b002      	add	sp, #8
24007b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007b06:	2220      	movs	r2, #32
24007b08:	fa02 f101 	lsl.w	r1, r2, r1
24007b0c:	420c      	tst	r4, r1
24007b0e:	f47f aee8 	bne.w	240078e2 <HAL_DMA_IRQHandler+0x372>
24007b12:	e6fe      	b.n	24007912 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007b14:	f04f 0c04 	mov.w	ip, #4
24007b18:	fa0c fc01 	lsl.w	ip, ip, r1
24007b1c:	ea14 0f0c 	tst.w	r4, ip
24007b20:	f43f ae07 	beq.w	24007732 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24007b24:	681a      	ldr	r2, [r3, #0]
24007b26:	0797      	lsls	r7, r2, #30
24007b28:	f53f adf7 	bmi.w	2400771a <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007b2c:	f04f 0c10 	mov.w	ip, #16
24007b30:	fa0c fc01 	lsl.w	ip, ip, r1
24007b34:	ea14 0f0c 	tst.w	r4, ip
24007b38:	f47f ae55 	bne.w	240077e6 <HAL_DMA_IRQHandler+0x276>
24007b3c:	e67a      	b.n	24007834 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24007b3e:	681b      	ldr	r3, [r3, #0]
24007b40:	031b      	lsls	r3, r3, #12
24007b42:	f57f ae6e 	bpl.w	24007822 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
24007b46:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24007b4a:	2b00      	cmp	r3, #0
24007b4c:	f47f ae6c 	bne.w	24007828 <HAL_DMA_IRQHandler+0x2b8>
24007b50:	e66c      	b.n	2400782c <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24007b52:	681a      	ldr	r2, [r3, #0]
24007b54:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24007b58:	f47f aed6 	bne.w	24007908 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24007b5c:	6819      	ldr	r1, [r3, #0]
24007b5e:	f021 0110 	bic.w	r1, r1, #16
24007b62:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24007b64:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24007b66:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24007b6a:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24007b6e:	e6cb      	b.n	24007908 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
24007b70:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24007b74:	2b00      	cmp	r3, #0
24007b76:	f47f aeca 	bne.w	2400790e <HAL_DMA_IRQHandler+0x39e>
24007b7a:	e6ca      	b.n	24007912 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24007b7c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24007b80:	2b00      	cmp	r3, #0
24007b82:	d1a5      	bne.n	24007ad0 <HAL_DMA_IRQHandler+0x560>
24007b84:	e7aa      	b.n	24007adc <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24007b86:	4aa0      	ldr	r2, [pc, #640]	; (24007e08 <HAL_DMA_IRQHandler+0x898>)
24007b88:	4ca0      	ldr	r4, [pc, #640]	; (24007e0c <HAL_DMA_IRQHandler+0x89c>)
24007b8a:	42a3      	cmp	r3, r4
24007b8c:	bf18      	it	ne
24007b8e:	4293      	cmpne	r3, r2
24007b90:	f104 0414 	add.w	r4, r4, #20
24007b94:	bf0c      	ite	eq
24007b96:	2201      	moveq	r2, #1
24007b98:	2200      	movne	r2, #0
24007b9a:	42a3      	cmp	r3, r4
24007b9c:	bf08      	it	eq
24007b9e:	f042 0201 	orreq.w	r2, r2, #1
24007ba2:	3414      	adds	r4, #20
24007ba4:	42a3      	cmp	r3, r4
24007ba6:	bf08      	it	eq
24007ba8:	f042 0201 	orreq.w	r2, r2, #1
24007bac:	3414      	adds	r4, #20
24007bae:	42a3      	cmp	r3, r4
24007bb0:	bf08      	it	eq
24007bb2:	f042 0201 	orreq.w	r2, r2, #1
24007bb6:	3414      	adds	r4, #20
24007bb8:	42a3      	cmp	r3, r4
24007bba:	bf08      	it	eq
24007bbc:	f042 0201 	orreq.w	r2, r2, #1
24007bc0:	3414      	adds	r4, #20
24007bc2:	42a3      	cmp	r3, r4
24007bc4:	bf08      	it	eq
24007bc6:	f042 0201 	orreq.w	r2, r2, #1
24007bca:	b912      	cbnz	r2, 24007bd2 <HAL_DMA_IRQHandler+0x662>
24007bcc:	4a90      	ldr	r2, [pc, #576]	; (24007e10 <HAL_DMA_IRQHandler+0x8a0>)
24007bce:	4293      	cmp	r3, r2
24007bd0:	d196      	bne.n	24007b00 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24007bd2:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
24007bd6:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24007bd8:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24007bda:	f004 041f 	and.w	r4, r4, #31
24007bde:	40a6      	lsls	r6, r4
24007be0:	420e      	tst	r6, r1
24007be2:	d019      	beq.n	24007c18 <HAL_DMA_IRQHandler+0x6a8>
24007be4:	0750      	lsls	r0, r2, #29
24007be6:	d517      	bpl.n	24007c18 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007be8:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24007bea:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007bec:	d549      	bpl.n	24007c82 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24007bee:	03d2      	lsls	r2, r2, #15
24007bf0:	f100 809f 	bmi.w	24007d32 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
24007bf4:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24007bf8:	2b00      	cmp	r3, #0
24007bfa:	f47f aeba 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
24007bfe:	e77f      	b.n	24007b00 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007c00:	f000 011f 	and.w	r1, r0, #31
24007c04:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24007c08:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24007c0a:	fa0c fc01 	lsl.w	ip, ip, r1
24007c0e:	ea14 0f0c 	tst.w	r4, ip
24007c12:	f47f af33 	bne.w	24007a7c <HAL_DMA_IRQHandler+0x50c>
24007c16:	e60d      	b.n	24007834 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24007c18:	2602      	movs	r6, #2
24007c1a:	40a6      	lsls	r6, r4
24007c1c:	420e      	tst	r6, r1
24007c1e:	d00e      	beq.n	24007c3e <HAL_DMA_IRQHandler+0x6ce>
24007c20:	0797      	lsls	r7, r2, #30
24007c22:	d50c      	bpl.n	24007c3e <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24007c24:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007c26:	0415      	lsls	r5, r2, #16
24007c28:	f140 8089 	bpl.w	24007d3e <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24007c2c:	03d4      	lsls	r4, r2, #15
24007c2e:	f100 80e4 	bmi.w	24007dfa <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
24007c32:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24007c36:	2b00      	cmp	r3, #0
24007c38:	f47f ae9b 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
24007c3c:	e760      	b.n	24007b00 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24007c3e:	2608      	movs	r6, #8
24007c40:	fa06 f404 	lsl.w	r4, r6, r4
24007c44:	420c      	tst	r4, r1
24007c46:	f43f af5b 	beq.w	24007b00 <HAL_DMA_IRQHandler+0x590>
24007c4a:	0711      	lsls	r1, r2, #28
24007c4c:	f57f af58 	bpl.w	24007b00 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24007c50:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007c52:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24007c54:	f021 010e 	bic.w	r1, r1, #14
24007c58:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24007c5a:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007c5c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24007c60:	f003 031f 	and.w	r3, r3, #31
24007c64:	fa02 f303 	lsl.w	r3, r2, r3
24007c68:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
24007c6a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24007c6e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24007c72:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24007c76:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24007c7a:	2b00      	cmp	r3, #0
24007c7c:	f47f ae79 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
24007c80:	e73e      	b.n	24007b00 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24007c82:	0693      	lsls	r3, r2, #26
24007c84:	d455      	bmi.n	24007d32 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24007c86:	f8d8 2000 	ldr.w	r2, [r8]
24007c8a:	4b62      	ldr	r3, [pc, #392]	; (24007e14 <HAL_DMA_IRQHandler+0x8a4>)
24007c8c:	4c62      	ldr	r4, [pc, #392]	; (24007e18 <HAL_DMA_IRQHandler+0x8a8>)
24007c8e:	4963      	ldr	r1, [pc, #396]	; (24007e1c <HAL_DMA_IRQHandler+0x8ac>)
24007c90:	42a2      	cmp	r2, r4
24007c92:	bf18      	it	ne
24007c94:	429a      	cmpne	r2, r3
24007c96:	f104 0430 	add.w	r4, r4, #48	; 0x30
24007c9a:	bf0c      	ite	eq
24007c9c:	2301      	moveq	r3, #1
24007c9e:	2300      	movne	r3, #0
24007ca0:	428a      	cmp	r2, r1
24007ca2:	bf08      	it	eq
24007ca4:	f043 0301 	orreq.w	r3, r3, #1
24007ca8:	3130      	adds	r1, #48	; 0x30
24007caa:	42a2      	cmp	r2, r4
24007cac:	bf08      	it	eq
24007cae:	f043 0301 	orreq.w	r3, r3, #1
24007cb2:	3430      	adds	r4, #48	; 0x30
24007cb4:	428a      	cmp	r2, r1
24007cb6:	bf08      	it	eq
24007cb8:	f043 0301 	orreq.w	r3, r3, #1
24007cbc:	3130      	adds	r1, #48	; 0x30
24007cbe:	42a2      	cmp	r2, r4
24007cc0:	bf08      	it	eq
24007cc2:	f043 0301 	orreq.w	r3, r3, #1
24007cc6:	3430      	adds	r4, #48	; 0x30
24007cc8:	428a      	cmp	r2, r1
24007cca:	bf08      	it	eq
24007ccc:	f043 0301 	orreq.w	r3, r3, #1
24007cd0:	f501 715c 	add.w	r1, r1, #880	; 0x370
24007cd4:	42a2      	cmp	r2, r4
24007cd6:	bf08      	it	eq
24007cd8:	f043 0301 	orreq.w	r3, r3, #1
24007cdc:	f504 745c 	add.w	r4, r4, #880	; 0x370
24007ce0:	428a      	cmp	r2, r1
24007ce2:	bf08      	it	eq
24007ce4:	f043 0301 	orreq.w	r3, r3, #1
24007ce8:	3130      	adds	r1, #48	; 0x30
24007cea:	42a2      	cmp	r2, r4
24007cec:	bf08      	it	eq
24007cee:	f043 0301 	orreq.w	r3, r3, #1
24007cf2:	3430      	adds	r4, #48	; 0x30
24007cf4:	428a      	cmp	r2, r1
24007cf6:	bf08      	it	eq
24007cf8:	f043 0301 	orreq.w	r3, r3, #1
24007cfc:	3130      	adds	r1, #48	; 0x30
24007cfe:	42a2      	cmp	r2, r4
24007d00:	bf08      	it	eq
24007d02:	f043 0301 	orreq.w	r3, r3, #1
24007d06:	3430      	adds	r4, #48	; 0x30
24007d08:	428a      	cmp	r2, r1
24007d0a:	bf08      	it	eq
24007d0c:	f043 0301 	orreq.w	r3, r3, #1
24007d10:	3130      	adds	r1, #48	; 0x30
24007d12:	42a2      	cmp	r2, r4
24007d14:	bf08      	it	eq
24007d16:	f043 0301 	orreq.w	r3, r3, #1
24007d1a:	428a      	cmp	r2, r1
24007d1c:	bf08      	it	eq
24007d1e:	f043 0301 	orreq.w	r3, r3, #1
24007d22:	b913      	cbnz	r3, 24007d2a <HAL_DMA_IRQHandler+0x7ba>
24007d24:	4b3e      	ldr	r3, [pc, #248]	; (24007e20 <HAL_DMA_IRQHandler+0x8b0>)
24007d26:	429a      	cmp	r2, r3
24007d28:	d17c      	bne.n	24007e24 <HAL_DMA_IRQHandler+0x8b4>
24007d2a:	6813      	ldr	r3, [r2, #0]
24007d2c:	f023 0308 	bic.w	r3, r3, #8
24007d30:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24007d32:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24007d36:	2b00      	cmp	r3, #0
24007d38:	f47f ae1b 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
24007d3c:	e6e0      	b.n	24007b00 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24007d3e:	0690      	lsls	r0, r2, #26
24007d40:	d45b      	bmi.n	24007dfa <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24007d42:	f8d8 2000 	ldr.w	r2, [r8]
24007d46:	4b33      	ldr	r3, [pc, #204]	; (24007e14 <HAL_DMA_IRQHandler+0x8a4>)
24007d48:	4c33      	ldr	r4, [pc, #204]	; (24007e18 <HAL_DMA_IRQHandler+0x8a8>)
24007d4a:	4934      	ldr	r1, [pc, #208]	; (24007e1c <HAL_DMA_IRQHandler+0x8ac>)
24007d4c:	42a2      	cmp	r2, r4
24007d4e:	bf18      	it	ne
24007d50:	429a      	cmpne	r2, r3
24007d52:	f104 0430 	add.w	r4, r4, #48	; 0x30
24007d56:	bf0c      	ite	eq
24007d58:	2301      	moveq	r3, #1
24007d5a:	2300      	movne	r3, #0
24007d5c:	428a      	cmp	r2, r1
24007d5e:	bf08      	it	eq
24007d60:	f043 0301 	orreq.w	r3, r3, #1
24007d64:	3130      	adds	r1, #48	; 0x30
24007d66:	42a2      	cmp	r2, r4
24007d68:	bf08      	it	eq
24007d6a:	f043 0301 	orreq.w	r3, r3, #1
24007d6e:	3430      	adds	r4, #48	; 0x30
24007d70:	428a      	cmp	r2, r1
24007d72:	bf08      	it	eq
24007d74:	f043 0301 	orreq.w	r3, r3, #1
24007d78:	3130      	adds	r1, #48	; 0x30
24007d7a:	42a2      	cmp	r2, r4
24007d7c:	bf08      	it	eq
24007d7e:	f043 0301 	orreq.w	r3, r3, #1
24007d82:	3430      	adds	r4, #48	; 0x30
24007d84:	428a      	cmp	r2, r1
24007d86:	bf08      	it	eq
24007d88:	f043 0301 	orreq.w	r3, r3, #1
24007d8c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24007d90:	42a2      	cmp	r2, r4
24007d92:	bf08      	it	eq
24007d94:	f043 0301 	orreq.w	r3, r3, #1
24007d98:	f504 745c 	add.w	r4, r4, #880	; 0x370
24007d9c:	428a      	cmp	r2, r1
24007d9e:	bf08      	it	eq
24007da0:	f043 0301 	orreq.w	r3, r3, #1
24007da4:	3130      	adds	r1, #48	; 0x30
24007da6:	42a2      	cmp	r2, r4
24007da8:	bf08      	it	eq
24007daa:	f043 0301 	orreq.w	r3, r3, #1
24007dae:	3430      	adds	r4, #48	; 0x30
24007db0:	428a      	cmp	r2, r1
24007db2:	bf08      	it	eq
24007db4:	f043 0301 	orreq.w	r3, r3, #1
24007db8:	3130      	adds	r1, #48	; 0x30
24007dba:	42a2      	cmp	r2, r4
24007dbc:	bf08      	it	eq
24007dbe:	f043 0301 	orreq.w	r3, r3, #1
24007dc2:	3430      	adds	r4, #48	; 0x30
24007dc4:	428a      	cmp	r2, r1
24007dc6:	bf08      	it	eq
24007dc8:	f043 0301 	orreq.w	r3, r3, #1
24007dcc:	3130      	adds	r1, #48	; 0x30
24007dce:	42a2      	cmp	r2, r4
24007dd0:	bf08      	it	eq
24007dd2:	f043 0301 	orreq.w	r3, r3, #1
24007dd6:	428a      	cmp	r2, r1
24007dd8:	bf08      	it	eq
24007dda:	f043 0301 	orreq.w	r3, r3, #1
24007dde:	b913      	cbnz	r3, 24007de6 <HAL_DMA_IRQHandler+0x876>
24007de0:	4b0f      	ldr	r3, [pc, #60]	; (24007e20 <HAL_DMA_IRQHandler+0x8b0>)
24007de2:	429a      	cmp	r2, r3
24007de4:	d123      	bne.n	24007e2e <HAL_DMA_IRQHandler+0x8be>
24007de6:	6813      	ldr	r3, [r2, #0]
24007de8:	f023 0314 	bic.w	r3, r3, #20
24007dec:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
24007dee:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
24007df0:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24007df2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24007df6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24007dfa:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24007dfe:	2b00      	cmp	r3, #0
24007e00:	f47f adb7 	bne.w	24007972 <HAL_DMA_IRQHandler+0x402>
24007e04:	e67c      	b.n	24007b00 <HAL_DMA_IRQHandler+0x590>
24007e06:	bf00      	nop
24007e08:	58025408 	.word	0x58025408
24007e0c:	5802541c 	.word	0x5802541c
24007e10:	58025494 	.word	0x58025494
24007e14:	40020010 	.word	0x40020010
24007e18:	40020028 	.word	0x40020028
24007e1c:	40020040 	.word	0x40020040
24007e20:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24007e24:	6813      	ldr	r3, [r2, #0]
24007e26:	f023 0304 	bic.w	r3, r3, #4
24007e2a:	6013      	str	r3, [r2, #0]
24007e2c:	e781      	b.n	24007d32 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24007e2e:	6813      	ldr	r3, [r2, #0]
24007e30:	f023 030a 	bic.w	r3, r3, #10
24007e34:	6013      	str	r3, [r2, #0]
24007e36:	e7da      	b.n	24007dee <HAL_DMA_IRQHandler+0x87e>

24007e38 <HAL_DMA_GetState>:
  return hdma->State;
24007e38:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24007e3c:	4770      	bx	lr
24007e3e:	bf00      	nop

24007e40 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24007e40:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24007e42:	4770      	bx	lr

24007e44 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24007e44:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24007e46:	7a0a      	ldrb	r2, [r1, #8]
{
24007e48:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24007e4a:	2a01      	cmp	r2, #1
24007e4c:	d02e      	beq.n	24007eac <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24007e4e:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24007e50:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24007e52:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
24007e56:	2801      	cmp	r0, #1
24007e58:	b2c2      	uxtb	r2, r0
24007e5a:	d122      	bne.n	24007ea2 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24007e5c:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
24007e60:	2801      	cmp	r0, #1
24007e62:	d026      	beq.n	24007eb2 <HAL_DMAEx_ConfigMuxSync+0x6e>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007e64:	6e18      	ldr	r0, [r3, #96]	; 0x60
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24007e66:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hdma);
24007e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007e6e:	6802      	ldr	r2, [r0, #0]
24007e70:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24007e74:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007e76:	68ca      	ldr	r2, [r1, #12]
24007e78:	6e1e      	ldr	r6, [r3, #96]	; 0x60
24007e7a:	1e50      	subs	r0, r2, #1
24007e7c:	7a0a      	ldrb	r2, [r1, #8]
24007e7e:	f891 e009 	ldrb.w	lr, [r1, #9]
24007e82:	0412      	lsls	r2, r2, #16
24007e84:	6831      	ldr	r1, [r6, #0]
24007e86:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
24007e8a:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007e8c:	b2c9      	uxtb	r1, r1
24007e8e:	430a      	orrs	r2, r1
24007e90:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24007e94:	4322      	orrs	r2, r4
24007e96:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
24007e9a:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24007e9c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24007ea0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
24007ea6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007ea8:	655a      	str	r2, [r3, #84]	; 0x54
}
24007eaa:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24007eac:	e9d1 5400 	ldrd	r5, r4, [r1]
24007eb0:	e7cf      	b.n	24007e52 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24007eb2:	2002      	movs	r0, #2
}
24007eb4:	bd70      	pop	{r4, r5, r6, pc}
24007eb6:	bf00      	nop

24007eb8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24007eb8:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007eba:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
24007ebe:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007ec0:	6812      	ldr	r2, [r2, #0]
24007ec2:	421a      	tst	r2, r3
24007ec4:	d00e      	beq.n	24007ee4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24007ec6:	6e02      	ldr	r2, [r0, #96]	; 0x60
24007ec8:	6813      	ldr	r3, [r2, #0]
24007eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24007ece:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007ed0:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24007ed4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007ed6:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24007ed8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24007ede:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
24007ee0:	b102      	cbz	r2, 24007ee4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24007ee2:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24007ee4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24007ee6:	b1ab      	cbz	r3, 24007f14 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24007ee8:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
24007eec:	6809      	ldr	r1, [r1, #0]
24007eee:	4211      	tst	r1, r2
24007ef0:	d010      	beq.n	24007f14 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007ef2:	681a      	ldr	r2, [r3, #0]
24007ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007ef8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007efa:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24007efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007f00:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24007f02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24007f08:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
24007f0a:	b11a      	cbz	r2, 24007f14 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007f0c:	4620      	mov	r0, r4
      }
    }
  }
}
24007f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
24007f12:	4710      	bx	r2
}
24007f14:	bd10      	pop	{r4, pc}
24007f16:	bf00      	nop

24007f18 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24007f18:	680b      	ldr	r3, [r1, #0]
24007f1a:	2b00      	cmp	r3, #0
24007f1c:	f000 811a 	beq.w	24008154 <HAL_GPIO_Init+0x23c>
24007f20:	f04f 0c00 	mov.w	ip, #0
{
24007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24007f28:	4662      	mov	r2, ip
{
24007f2a:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007f2c:	4d94      	ldr	r5, [pc, #592]	; (24008180 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007f2e:	4f95      	ldr	r7, [pc, #596]	; (24008184 <HAL_GPIO_Init+0x26c>)
24007f30:	f8df 8268 	ldr.w	r8, [pc, #616]	; 2400819c <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24007f34:	f04f 0901 	mov.w	r9, #1
24007f38:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24007f3c:	ea19 0e03 	ands.w	lr, r9, r3
24007f40:	f000 80c2 	beq.w	240080c8 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24007f44:	684b      	ldr	r3, [r1, #4]
24007f46:	f003 0303 	and.w	r3, r3, #3
24007f4a:	1e5c      	subs	r4, r3, #1
24007f4c:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007f4e:	f04f 0403 	mov.w	r4, #3
24007f52:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24007f56:	f240 80c1 	bls.w	240080dc <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007f5a:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007f5c:	2b03      	cmp	r3, #3
24007f5e:	d026      	beq.n	24007fae <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24007f60:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24007f62:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24007f66:	688b      	ldr	r3, [r1, #8]
24007f68:	fa03 f30c 	lsl.w	r3, r3, ip
24007f6c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24007f70:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24007f72:	684b      	ldr	r3, [r1, #4]
24007f74:	f003 0303 	and.w	r3, r3, #3
24007f78:	2b02      	cmp	r3, #2
24007f7a:	d118      	bne.n	24007fae <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24007f7c:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
24007f80:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24007f84:	ea4f 0b83 	mov.w	fp, r3, lsl #2
24007f88:	230f      	movs	r3, #15
24007f8a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
24007f8e:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
24007f92:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24007f96:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24007f9a:	690b      	ldr	r3, [r1, #16]
24007f9c:	fa03 f30b 	lsl.w	r3, r3, fp
24007fa0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
24007fa4:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24007fa8:	684b      	ldr	r3, [r1, #4]
24007faa:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
24007fae:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24007fb2:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24007fb6:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24007fba:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
24007fbc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24007fbe:	684b      	ldr	r3, [r1, #4]
24007fc0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
24007fc4:	d07f      	beq.n	240080c6 <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007fc6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
24007fca:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007fce:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007fd2:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007fd4:	f043 0302 	orr.w	r3, r3, #2
24007fd8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007fdc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007fe0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
24007fe4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24007fe8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
24007fec:	f003 0302 	and.w	r3, r3, #2
24007ff0:	9301      	str	r3, [sp, #4]
24007ff2:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007ff4:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
24007ff8:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007ffc:	fa03 f309 	lsl.w	r3, r3, r9
24008000:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24008004:	d02b      	beq.n	2400805e <HAL_GPIO_Init+0x146>
24008006:	4540      	cmp	r0, r8
24008008:	f000 8088 	beq.w	2400811c <HAL_GPIO_Init+0x204>
2400800c:	4e5e      	ldr	r6, [pc, #376]	; (24008188 <HAL_GPIO_Init+0x270>)
2400800e:	42b0      	cmp	r0, r6
24008010:	f000 808b 	beq.w	2400812a <HAL_GPIO_Init+0x212>
24008014:	4e5d      	ldr	r6, [pc, #372]	; (2400818c <HAL_GPIO_Init+0x274>)
24008016:	42b0      	cmp	r0, r6
24008018:	d079      	beq.n	2400810e <HAL_GPIO_Init+0x1f6>
2400801a:	4e5d      	ldr	r6, [pc, #372]	; (24008190 <HAL_GPIO_Init+0x278>)
2400801c:	42b0      	cmp	r0, r6
2400801e:	f000 8092 	beq.w	24008146 <HAL_GPIO_Init+0x22e>
24008022:	4e5c      	ldr	r6, [pc, #368]	; (24008194 <HAL_GPIO_Init+0x27c>)
24008024:	42b0      	cmp	r0, r6
24008026:	f000 8096 	beq.w	24008156 <HAL_GPIO_Init+0x23e>
2400802a:	4e5b      	ldr	r6, [pc, #364]	; (24008198 <HAL_GPIO_Init+0x280>)
2400802c:	42b0      	cmp	r0, r6
2400802e:	f000 8083 	beq.w	24008138 <HAL_GPIO_Init+0x220>
24008032:	f8df a16c 	ldr.w	sl, [pc, #364]	; 240081a0 <HAL_GPIO_Init+0x288>
24008036:	4550      	cmp	r0, sl
24008038:	f000 8094 	beq.w	24008164 <HAL_GPIO_Init+0x24c>
2400803c:	f8df a164 	ldr.w	sl, [pc, #356]	; 240081a4 <HAL_GPIO_Init+0x28c>
24008040:	4550      	cmp	r0, sl
24008042:	f000 8096 	beq.w	24008172 <HAL_GPIO_Init+0x25a>
24008046:	f8df a160 	ldr.w	sl, [pc, #352]	; 240081a8 <HAL_GPIO_Init+0x290>
2400804a:	4550      	cmp	r0, sl
2400804c:	bf0c      	ite	eq
2400804e:	f04f 0a09 	moveq.w	sl, #9
24008052:	f04f 0a0a 	movne.w	sl, #10
24008056:	fa0a f909 	lsl.w	r9, sl, r9
2400805a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
2400805e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24008060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24008064:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
24008066:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
2400806a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
2400806c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24008070:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24008072:	bf54      	ite	pl
24008074:	4023      	andpl	r3, r4
          temp |= iocurrent;
24008076:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
2400807a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400807e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
24008080:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24008084:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24008088:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
2400808a:	bf54      	ite	pl
2400808c:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400808e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24008092:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24008096:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
24008098:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400809c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240080a0:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
240080a2:	bf54      	ite	pl
240080a4:	4023      	andpl	r3, r4
          temp |= iocurrent;
240080a6:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
240080aa:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240080ae:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
240080b0:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240080b4:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
240080b6:	bf54      	ite	pl
240080b8:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
240080ba:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
240080be:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240080c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240080c6:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
240080c8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240080ca:	f10c 0c02 	add.w	ip, ip, #2
240080ce:	fa33 f402 	lsrs.w	r4, r3, r2
240080d2:	f47f af2f 	bne.w	24007f34 <HAL_GPIO_Init+0x1c>
  }
}
240080d6:	b003      	add	sp, #12
240080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
240080dc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240080de:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240080e2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240080e4:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240080e6:	fa03 f30c 	lsl.w	r3, r3, ip
240080ea:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
240080ee:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240080f0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
240080f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240080f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240080fa:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240080fe:	4093      	lsls	r3, r2
24008100:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24008104:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24008106:	684b      	ldr	r3, [r1, #4]
24008108:	f003 0303 	and.w	r3, r3, #3
2400810c:	e726      	b.n	24007f5c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400810e:	f04f 0a03 	mov.w	sl, #3
24008112:	fa0a f909 	lsl.w	r9, sl, r9
24008116:	ea43 0309 	orr.w	r3, r3, r9
2400811a:	e7a0      	b.n	2400805e <HAL_GPIO_Init+0x146>
2400811c:	f04f 0a01 	mov.w	sl, #1
24008120:	fa0a f909 	lsl.w	r9, sl, r9
24008124:	ea43 0309 	orr.w	r3, r3, r9
24008128:	e799      	b.n	2400805e <HAL_GPIO_Init+0x146>
2400812a:	f04f 0a02 	mov.w	sl, #2
2400812e:	fa0a f909 	lsl.w	r9, sl, r9
24008132:	ea43 0309 	orr.w	r3, r3, r9
24008136:	e792      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008138:	f04f 0a06 	mov.w	sl, #6
2400813c:	fa0a f909 	lsl.w	r9, sl, r9
24008140:	ea43 0309 	orr.w	r3, r3, r9
24008144:	e78b      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008146:	f04f 0a04 	mov.w	sl, #4
2400814a:	fa0a f909 	lsl.w	r9, sl, r9
2400814e:	ea43 0309 	orr.w	r3, r3, r9
24008152:	e784      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008154:	4770      	bx	lr
24008156:	f04f 0a05 	mov.w	sl, #5
2400815a:	fa0a f909 	lsl.w	r9, sl, r9
2400815e:	ea43 0309 	orr.w	r3, r3, r9
24008162:	e77c      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008164:	f04f 0a07 	mov.w	sl, #7
24008168:	fa0a f909 	lsl.w	r9, sl, r9
2400816c:	ea43 0309 	orr.w	r3, r3, r9
24008170:	e775      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008172:	f04f 0a08 	mov.w	sl, #8
24008176:	fa0a f909 	lsl.w	r9, sl, r9
2400817a:	ea43 0309 	orr.w	r3, r3, r9
2400817e:	e76e      	b.n	2400805e <HAL_GPIO_Init+0x146>
24008180:	58024400 	.word	0x58024400
24008184:	58020000 	.word	0x58020000
24008188:	58020800 	.word	0x58020800
2400818c:	58020c00 	.word	0x58020c00
24008190:	58021000 	.word	0x58021000
24008194:	58021400 	.word	0x58021400
24008198:	58021800 	.word	0x58021800
2400819c:	58020400 	.word	0x58020400
240081a0:	58021c00 	.word	0x58021c00
240081a4:	58022000 	.word	0x58022000
240081a8:	58022400 	.word	0x58022400

240081ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
240081ac:	6903      	ldr	r3, [r0, #16]
240081ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
240081b0:	bf14      	ite	ne
240081b2:	2001      	movne	r0, #1
240081b4:	2000      	moveq	r0, #0
240081b6:	4770      	bx	lr

240081b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240081b8:	b902      	cbnz	r2, 240081bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240081ba:	0409      	lsls	r1, r1, #16
240081bc:	6181      	str	r1, [r0, #24]
  }
}
240081be:	4770      	bx	lr

240081c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
240081c0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
240081c2:	ea01 0203 	and.w	r2, r1, r3
240081c6:	ea21 0103 	bic.w	r1, r1, r3
240081ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
240081ce:	6181      	str	r1, [r0, #24]
}
240081d0:	4770      	bx	lr
240081d2:	bf00      	nop

240081d4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240081d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240081d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240081dc:	4201      	tst	r1, r0
240081de:	d100      	bne.n	240081e2 <HAL_GPIO_EXTI_IRQHandler+0xe>
240081e0:	4770      	bx	lr
{
240081e2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240081e4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240081e8:	f7fd f936 	bl	24005458 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240081ec:	bd08      	pop	{r3, pc}
240081ee:	bf00      	nop

240081f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240081f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240081f4:	6803      	ldr	r3, [r0, #0]
{
240081f6:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240081f8:	699a      	ldr	r2, [r3, #24]
240081fa:	0694      	lsls	r4, r2, #26
240081fc:	d46d      	bmi.n	240082da <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
240081fe:	4605      	mov	r5, r0
24008200:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008202:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
24008206:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24008208:	f014 0410 	ands.w	r4, r4, #16
2400820c:	d068      	beq.n	240082e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
2400820e:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008210:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24008214:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008216:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24008218:	46b2      	mov	sl, r6
2400821a:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400821c:	699a      	ldr	r2, [r3, #24]
2400821e:	d161      	bne.n	240082e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
24008220:	0690      	lsls	r0, r2, #26
24008222:	f100 8085 	bmi.w	24008330 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24008226:	f1ba 0f00 	cmp.w	sl, #0
2400822a:	d105      	bne.n	24008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
2400822c:	699c      	ldr	r4, [r3, #24]
2400822e:	06a1      	lsls	r1, r4, #26
24008230:	d5fc      	bpl.n	2400822c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008232:	2220      	movs	r2, #32
24008234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24008236:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24008238:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
2400823c:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
2400823e:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24008240:	05d0      	lsls	r0, r2, #23
24008242:	d535      	bpl.n	240082b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24008244:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24008248:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400824a:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400824e:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24008250:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24008252:	d505      	bpl.n	24008260 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24008254:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24008258:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400825c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400825e:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24008260:	0597      	lsls	r7, r2, #22
24008262:	d505      	bpl.n	24008270 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24008264:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24008268:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400826c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400826e:	682b      	ldr	r3, [r5, #0]
24008270:	699a      	ldr	r2, [r3, #24]
24008272:	0790      	lsls	r0, r2, #30
24008274:	d502      	bpl.n	2400827c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24008276:	2200      	movs	r2, #0
24008278:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400827a:	682b      	ldr	r3, [r5, #0]
2400827c:	699a      	ldr	r2, [r3, #24]
2400827e:	07d1      	lsls	r1, r2, #31
24008280:	d404      	bmi.n	2400828c <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24008282:	699a      	ldr	r2, [r3, #24]
24008284:	f042 0201 	orr.w	r2, r2, #1
24008288:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400828a:	682b      	ldr	r3, [r5, #0]
2400828c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400828e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24008290:	4835      	ldr	r0, [pc, #212]	; (24008368 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
24008292:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24008294:	4002      	ands	r2, r0
      return HAL_ERROR;
24008296:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24008298:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
2400829a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400829c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240082a0:	431c      	orrs	r4, r3
240082a2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240082a4:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240082a8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
240082ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240082b0:	0550      	lsls	r0, r2, #21
240082b2:	d4cf      	bmi.n	24008254 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240082b4:	0596      	lsls	r6, r2, #22
240082b6:	d4d5      	bmi.n	24008264 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
240082b8:	2900      	cmp	r1, #0
240082ba:	d1d9      	bne.n	24008270 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240082bc:	f7fd ff02 	bl	240060c4 <HAL_GetTick>
240082c0:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240082c4:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240082c6:	42b8      	cmp	r0, r7
240082c8:	d800      	bhi.n	240082cc <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
240082ca:	b91f      	cbnz	r7, 240082d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240082cc:	699a      	ldr	r2, [r3, #24]
240082ce:	f012 0220 	ands.w	r2, r2, #32
240082d2:	d032      	beq.n	2400833a <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240082d4:	699a      	ldr	r2, [r3, #24]
240082d6:	0692      	lsls	r2, r2, #26
240082d8:	d595      	bpl.n	24008206 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
240082da:	2000      	movs	r0, #0
}
240082dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
240082e0:	4621      	mov	r1, r4
240082e2:	e7ac      	b.n	2400823e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240082e4:	0692      	lsls	r2, r2, #26
240082e6:	d423      	bmi.n	24008330 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240082e8:	f1ba 0f00 	cmp.w	sl, #0
240082ec:	d1a4      	bne.n	24008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240082ee:	f7fd fee9 	bl	240060c4 <HAL_GetTick>
240082f2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240082f4:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240082f6:	4287      	cmp	r7, r0
240082f8:	d301      	bcc.n	240082fe <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
240082fa:	2f00      	cmp	r7, #0
240082fc:	d18d      	bne.n	2400821a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240082fe:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24008300:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24008304:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24008306:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24008308:	0409      	lsls	r1, r1, #16
2400830a:	d503      	bpl.n	24008314 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
2400830c:	0441      	lsls	r1, r0, #17
2400830e:	d401      	bmi.n	24008314 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24008310:	2a20      	cmp	r2, #32
24008312:	d11f      	bne.n	24008354 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24008314:	699a      	ldr	r2, [r3, #24]
24008316:	0690      	lsls	r0, r2, #26
24008318:	f53f af7f 	bmi.w	2400821a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400831c:	f7fd fed2 	bl	240060c4 <HAL_GetTick>
24008320:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008322:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24008324:	2819      	cmp	r0, #25
24008326:	d9f5      	bls.n	24008314 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24008328:	2620      	movs	r6, #32
              status = HAL_ERROR;
2400832a:	f04f 0a01 	mov.w	sl, #1
2400832e:	e774      	b.n	2400821a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24008330:	f1ba 0f00 	cmp.w	sl, #0
24008334:	f43f af7d 	beq.w	24008232 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24008338:	e77e      	b.n	24008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400833a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400833c:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
2400833e:	2001      	movs	r0, #1
24008340:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008344:	430b      	orrs	r3, r1
24008346:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008348:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400834c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24008354:	685a      	ldr	r2, [r3, #4]
24008356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400835a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
2400835c:	f7fd feb2 	bl	240060c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24008360:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24008362:	4604      	mov	r4, r0
24008364:	e7d6      	b.n	24008314 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24008366:	bf00      	nop
24008368:	fe00e800 	.word	0xfe00e800

2400836c <HAL_I2C_Init>:
  if (hi2c == NULL)
2400836c:	2800      	cmp	r0, #0
2400836e:	d056      	beq.n	2400841e <HAL_I2C_Init+0xb2>
{
24008370:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24008372:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008376:	4604      	mov	r4, r0
24008378:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400837c:	2b00      	cmp	r3, #0
2400837e:	d049      	beq.n	24008414 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24008380:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24008382:	2324      	movs	r3, #36	; 0x24
24008384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24008388:	6813      	ldr	r3, [r2, #0]
2400838a:	f023 0301 	bic.w	r3, r3, #1
2400838e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24008390:	e9d4 2300 	ldrd	r2, r3, [r4]
24008394:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24008398:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400839a:	6822      	ldr	r2, [r4, #0]
2400839c:	6893      	ldr	r3, [r2, #8]
2400839e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240083a2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240083a4:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240083a6:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240083a8:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240083aa:	68a3      	ldr	r3, [r4, #8]
240083ac:	bf0c      	ite	eq
240083ae:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
240083b2:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
240083b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240083b8:	68e3      	ldr	r3, [r4, #12]
240083ba:	2b02      	cmp	r3, #2
240083bc:	d103      	bne.n	240083c6 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
240083be:	6823      	ldr	r3, [r4, #0]
240083c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240083c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240083c6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240083c8:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240083cc:	4b15      	ldr	r3, [pc, #84]	; (24008424 <HAL_I2C_Init+0xb8>)
240083ce:	6851      	ldr	r1, [r2, #4]
240083d0:	430b      	orrs	r3, r1
240083d2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
240083d4:	6822      	ldr	r2, [r4, #0]
240083d6:	68d3      	ldr	r3, [r2, #12]
240083d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240083dc:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
240083de:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240083e0:	6821      	ldr	r1, [r4, #0]
240083e2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
240083e6:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240083e8:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240083ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
240083ee:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240083f0:	6821      	ldr	r1, [r4, #0]
240083f2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
240083f6:	4303      	orrs	r3, r0
  return HAL_OK;
240083f8:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240083fa:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
240083fc:	6821      	ldr	r1, [r4, #0]
240083fe:	680b      	ldr	r3, [r1, #0]
24008400:	f043 0301 	orr.w	r3, r3, #1
24008404:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24008406:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24008408:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400840c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400840e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24008412:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24008414:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24008418:	f7fb ff66 	bl	240042e8 <HAL_I2C_MspInit>
2400841c:	e7b0      	b.n	24008380 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
2400841e:	2001      	movs	r0, #1
}
24008420:	4770      	bx	lr
24008422:	bf00      	nop
24008424:	02008000 	.word	0x02008000

24008428 <HAL_I2C_Master_Transmit>:
{
24008428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400842c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
2400842e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24008432:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24008434:	2b20      	cmp	r3, #32
24008436:	d12c      	bne.n	24008492 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24008438:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2400843c:	4683      	mov	fp, r0
2400843e:	2b01      	cmp	r3, #1
24008440:	d027      	beq.n	24008492 <HAL_I2C_Master_Transmit+0x6a>
24008442:	2301      	movs	r3, #1
24008444:	468a      	mov	sl, r1
24008446:	4616      	mov	r6, r2
24008448:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
2400844c:	f7fd fe3a 	bl	240060c4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24008450:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24008454:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24008456:	699a      	ldr	r2, [r3, #24]
24008458:	0417      	lsls	r7, r2, #16
2400845a:	d51d      	bpl.n	24008498 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400845c:	f7fd fe32 	bl	240060c4 <HAL_GetTick>
24008460:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24008464:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24008468:	2819      	cmp	r0, #25
2400846a:	d9f4      	bls.n	24008456 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400846c:	699a      	ldr	r2, [r3, #24]
2400846e:	0410      	lsls	r0, r2, #16
24008470:	d5f1      	bpl.n	24008456 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008472:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008476:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24008478:	2200      	movs	r2, #0
      return HAL_ERROR;
2400847a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400847c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
2400847e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008482:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008486:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400848a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
2400848e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24008492:	2002      	movs	r0, #2
}
24008494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24008498:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400849a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
2400849c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240084a0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240084a4:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
240084a6:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240084aa:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240084ae:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
240084b2:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240084b6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
240084ba:	b292      	uxth	r2, r2
240084bc:	2aff      	cmp	r2, #255	; 0xff
240084be:	d87e      	bhi.n	240085be <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
240084c0:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240084c4:	48ad      	ldr	r0, [pc, #692]	; (2400877c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
240084c6:	b292      	uxth	r2, r2
240084c8:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240084cc:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
240084ce:	6859      	ldr	r1, [r3, #4]
240084d0:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240084d2:	f3ca 0109 	ubfx	r1, sl, #0, #10
240084d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240084da:	4301      	orrs	r1, r0
240084dc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
240084e0:	49a7      	ldr	r1, [pc, #668]	; (24008780 <HAL_I2C_Master_Transmit+0x358>)
240084e2:	4311      	orrs	r1, r2
240084e4:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240084e6:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
240084ea:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240084ee:	b29b      	uxth	r3, r3
240084f0:	2b00      	cmp	r3, #0
240084f2:	f000 8107 	beq.w	24008704 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240084f6:	f8db 3000 	ldr.w	r3, [fp]
240084fa:	699c      	ldr	r4, [r3, #24]
240084fc:	f014 0402 	ands.w	r4, r4, #2
24008500:	f040 80c5 	bne.w	2400868e <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24008504:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24008506:	f012 0210 	ands.w	r2, r2, #16
2400850a:	f000 808d 	beq.w	24008628 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400850e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24008510:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24008512:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008514:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008516:	f8db 3000 	ldr.w	r3, [fp]
2400851a:	1c69      	adds	r1, r5, #1
2400851c:	699a      	ldr	r2, [r3, #24]
2400851e:	f040 8085 	bne.w	2400862c <HAL_I2C_Master_Transmit+0x204>
24008522:	0690      	lsls	r0, r2, #26
24008524:	f100 8106 	bmi.w	24008734 <HAL_I2C_Master_Transmit+0x30c>
24008528:	b937      	cbnz	r7, 24008538 <HAL_I2C_Master_Transmit+0x110>
2400852a:	699a      	ldr	r2, [r3, #24]
2400852c:	0691      	lsls	r1, r2, #26
2400852e:	d5fc      	bpl.n	2400852a <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008530:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24008534:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24008538:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
2400853c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
2400853e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24008540:	05ce      	lsls	r6, r1, #23
24008542:	d54b      	bpl.n	240085dc <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24008544:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24008548:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400854a:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400854e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24008550:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24008554:	d506      	bpl.n	24008564 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24008556:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
2400855a:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400855e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24008560:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24008564:	0589      	lsls	r1, r1, #22
24008566:	d506      	bpl.n	24008576 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24008568:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
2400856c:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24008570:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24008572:	f8db 3000 	ldr.w	r3, [fp]
24008576:	6999      	ldr	r1, [r3, #24]
24008578:	078e      	lsls	r6, r1, #30
2400857a:	d503      	bpl.n	24008584 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
2400857c:	2100      	movs	r1, #0
2400857e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24008580:	f8db 3000 	ldr.w	r3, [fp]
24008584:	6999      	ldr	r1, [r3, #24]
24008586:	07cd      	lsls	r5, r1, #31
24008588:	d405      	bmi.n	24008596 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400858a:	6999      	ldr	r1, [r3, #24]
2400858c:	f041 0101 	orr.w	r1, r1, #1
24008590:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24008592:	f8db 3000 	ldr.w	r3, [fp]
24008596:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24008598:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
2400859a:	487a      	ldr	r0, [pc, #488]	; (24008784 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
2400859c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
2400859e:	4001      	ands	r1, r0
        return HAL_ERROR;
240085a0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240085a2:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
240085a4:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
240085a8:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240085ac:	431a      	orrs	r2, r3
240085ae:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240085b2:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240085b6:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
240085ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
240085be:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240085c0:	496e      	ldr	r1, [pc, #440]	; (2400877c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
240085c2:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240085c6:	685a      	ldr	r2, [r3, #4]
240085c8:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240085ca:	f3ca 0109 	ubfx	r1, sl, #0, #10
240085ce:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240085d2:	4311      	orrs	r1, r2
240085d4:	4a6c      	ldr	r2, [pc, #432]	; (24008788 <HAL_I2C_Master_Transmit+0x360>)
240085d6:	430a      	orrs	r2, r1
240085d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240085da:	e784      	b.n	240084e6 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240085dc:	054c      	lsls	r4, r1, #21
240085de:	d4ba      	bmi.n	24008556 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240085e0:	058f      	lsls	r7, r1, #22
240085e2:	d4c1      	bmi.n	24008568 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
240085e4:	2800      	cmp	r0, #0
240085e6:	d1c6      	bne.n	24008576 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
240085e8:	1c6a      	adds	r2, r5, #1
240085ea:	d086      	beq.n	240084fa <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240085ec:	f7fd fd6a 	bl	240060c4 <HAL_GetTick>
240085f0:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
240085f4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240085f8:	4285      	cmp	r5, r0
240085fa:	d302      	bcc.n	24008602 <HAL_I2C_Master_Transmit+0x1da>
240085fc:	2d00      	cmp	r5, #0
240085fe:	f47f af7c 	bne.w	240084fa <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24008602:	699a      	ldr	r2, [r3, #24]
24008604:	f012 0202 	ands.w	r2, r2, #2
24008608:	f47f af77 	bne.w	240084fa <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400860c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008610:	2120      	movs	r1, #32
        return HAL_ERROR;
24008612:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24008614:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24008618:	430b      	orrs	r3, r1
2400861a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400861e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24008622:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
24008626:	e735      	b.n	24008494 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24008628:	4610      	mov	r0, r2
2400862a:	e788      	b.n	2400853e <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400862c:	0692      	lsls	r2, r2, #26
2400862e:	f100 8081 	bmi.w	24008734 <HAL_I2C_Master_Transmit+0x30c>
24008632:	2f00      	cmp	r7, #0
24008634:	d180      	bne.n	24008538 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008636:	f7fd fd45 	bl	240060c4 <HAL_GetTick>
2400863a:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400863c:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008640:	4285      	cmp	r5, r0
24008642:	d302      	bcc.n	2400864a <HAL_I2C_Master_Transmit+0x222>
24008644:	2d00      	cmp	r5, #0
24008646:	f47f af68 	bne.w	2400851a <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400864a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
2400864c:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24008650:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24008652:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24008654:	0409      	lsls	r1, r1, #16
24008656:	d50c      	bpl.n	24008672 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24008658:	0441      	lsls	r1, r0, #17
2400865a:	d40a      	bmi.n	24008672 <HAL_I2C_Master_Transmit+0x24a>
2400865c:	2a20      	cmp	r2, #32
2400865e:	d008      	beq.n	24008672 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24008660:	685a      	ldr	r2, [r3, #4]
24008662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24008666:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24008668:	f7fd fd2c 	bl	240060c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400866c:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24008670:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24008672:	699a      	ldr	r2, [r3, #24]
24008674:	0690      	lsls	r0, r2, #26
24008676:	f53f af50 	bmi.w	2400851a <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400867a:	f7fd fd23 	bl	240060c4 <HAL_GetTick>
2400867e:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24008680:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24008684:	2819      	cmp	r0, #25
24008686:	d9f4      	bls.n	24008672 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24008688:	2420      	movs	r4, #32
              status = HAL_ERROR;
2400868a:	2701      	movs	r7, #1
2400868c:	e745      	b.n	2400851a <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400868e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
24008692:	7812      	ldrb	r2, [r2, #0]
24008694:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24008696:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
2400869a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
2400869e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
240086a0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
240086a4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
240086a6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
240086a8:	3101      	adds	r1, #1
      hi2c->XferSize--;
240086aa:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
240086ac:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240086b0:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
240086b4:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240086b8:	b292      	uxth	r2, r2
      hi2c->XferSize--;
240086ba:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240086be:	2a00      	cmp	r2, #0
240086c0:	f43f af13 	beq.w	240084ea <HAL_I2C_Master_Transmit+0xc2>
240086c4:	2b00      	cmp	r3, #0
240086c6:	f47f af10 	bne.w	240084ea <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240086ca:	f8db 2000 	ldr.w	r2, [fp]
240086ce:	1c6c      	adds	r4, r5, #1
240086d0:	d134      	bne.n	2400873c <HAL_I2C_Master_Transmit+0x314>
240086d2:	6993      	ldr	r3, [r2, #24]
240086d4:	0618      	lsls	r0, r3, #24
240086d6:	d5fc      	bpl.n	240086d2 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240086d8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240086dc:	b29b      	uxth	r3, r3
240086de:	2bff      	cmp	r3, #255	; 0xff
240086e0:	d958      	bls.n	24008794 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
240086e2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240086e4:	4929      	ldr	r1, [pc, #164]	; (2400878c <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
240086e6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240086ea:	6853      	ldr	r3, [r2, #4]
240086ec:	400b      	ands	r3, r1
240086ee:	4928      	ldr	r1, [pc, #160]	; (24008790 <HAL_I2C_Master_Transmit+0x368>)
240086f0:	ea4a 0303 	orr.w	r3, sl, r3
240086f4:	4319      	orrs	r1, r3
240086f6:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
240086f8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240086fc:	b29b      	uxth	r3, r3
240086fe:	2b00      	cmp	r3, #0
24008700:	f47f aef9 	bne.w	240084f6 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24008704:	4642      	mov	r2, r8
24008706:	4629      	mov	r1, r5
24008708:	4658      	mov	r0, fp
2400870a:	f7ff fd71 	bl	240081f0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400870e:	2800      	cmp	r0, #0
24008710:	d151      	bne.n	240087b6 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008712:	f8db 3000 	ldr.w	r3, [fp]
24008716:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24008718:	4c1a      	ldr	r4, [pc, #104]	; (24008784 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400871a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
2400871c:	f8db 1000 	ldr.w	r1, [fp]
24008720:	684b      	ldr	r3, [r1, #4]
24008722:	4023      	ands	r3, r4
24008724:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24008726:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400872a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400872e:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24008732:	e6af      	b.n	24008494 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24008734:	2f00      	cmp	r7, #0
24008736:	f43f aefb 	beq.w	24008530 <HAL_I2C_Master_Transmit+0x108>
2400873a:	e6fd      	b.n	24008538 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400873c:	6993      	ldr	r3, [r2, #24]
2400873e:	0619      	lsls	r1, r3, #24
24008740:	d4ca      	bmi.n	240086d8 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24008742:	f7fd fcbf 	bl	240060c4 <HAL_GetTick>
24008746:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400874a:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400874e:	4285      	cmp	r5, r0
24008750:	d301      	bcc.n	24008756 <HAL_I2C_Master_Transmit+0x32e>
24008752:	2d00      	cmp	r5, #0
24008754:	d1bb      	bne.n	240086ce <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24008756:	6993      	ldr	r3, [r2, #24]
24008758:	f013 0380 	ands.w	r3, r3, #128	; 0x80
2400875c:	d1b7      	bne.n	240086ce <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400875e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008762:	2120      	movs	r1, #32
          return HAL_ERROR;
24008764:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24008766:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400876a:	430a      	orrs	r2, r1
2400876c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24008770:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24008774:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24008778:	e68c      	b.n	24008494 <HAL_I2C_Master_Transmit+0x6c>
2400877a:	bf00      	nop
2400877c:	fc009800 	.word	0xfc009800
24008780:	02002000 	.word	0x02002000
24008784:	fe00e800 	.word	0xfe00e800
24008788:	01ff2000 	.word	0x01ff2000
2400878c:	fc009c00 	.word	0xfc009c00
24008790:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
24008794:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24008798:	4808      	ldr	r0, [pc, #32]	; (240087bc <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
2400879a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400879c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
2400879e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240087a2:	6853      	ldr	r3, [r2, #4]
240087a4:	4003      	ands	r3, r0
240087a6:	ea4a 0303 	orr.w	r3, sl, r3
240087aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240087ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240087b2:	6053      	str	r3, [r2, #4]
}
240087b4:	e699      	b.n	240084ea <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
240087b6:	2001      	movs	r0, #1
240087b8:	e66c      	b.n	24008494 <HAL_I2C_Master_Transmit+0x6c>
240087ba:	bf00      	nop
240087bc:	fc009c00 	.word	0xfc009c00

240087c0 <HAL_I2C_Master_Transmit_DMA>:
{
240087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240087c2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
240087c4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
240087c8:	2820      	cmp	r0, #32
240087ca:	d13d      	bne.n	24008848 <HAL_I2C_Master_Transmit_DMA+0x88>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
240087cc:	6820      	ldr	r0, [r4, #0]
240087ce:	460d      	mov	r5, r1
240087d0:	6981      	ldr	r1, [r0, #24]
240087d2:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
240087d6:	d137      	bne.n	24008848 <HAL_I2C_Master_Transmit_DMA+0x88>
    __HAL_LOCK(hi2c);
240087d8:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
240087dc:	f1bc 0f01 	cmp.w	ip, #1
240087e0:	d032      	beq.n	24008848 <HAL_I2C_Master_Transmit_DMA+0x88>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
240087e2:	2621      	movs	r6, #33	; 0x21
    hi2c->pBuffPtr    = pData;
240087e4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
240087e6:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
240087ea:	2610      	movs	r6, #16
240087ec:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
240087f0:	2601      	movs	r6, #1
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240087f2:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
240087f4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240087f6:	4b41      	ldr	r3, [pc, #260]	; (240088fc <HAL_I2C_Master_Transmit_DMA+0x13c>)
    __HAL_LOCK(hi2c);
240087f8:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240087fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240087fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
24008800:	4e3f      	ldr	r6, [pc, #252]	; (24008900 <HAL_I2C_Master_Transmit_DMA+0x140>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24008802:	b29b      	uxth	r3, r3
    hi2c->XferISR     = I2C_Master_ISR_DMA;
24008804:	6366      	str	r6, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24008806:	2bff      	cmp	r3, #255	; 0xff
24008808:	d820      	bhi.n	2400884c <HAL_I2C_Master_Transmit_DMA+0x8c>
      hi2c->XferSize = hi2c->XferCount;
2400880a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400880c:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
2400880e:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
24008810:	2b00      	cmp	r3, #0
24008812:	d162      	bne.n	240088da <HAL_I2C_Master_Transmit_DMA+0x11a>
      hi2c->XferISR = I2C_Master_ISR_IT;
24008814:	4b3b      	ldr	r3, [pc, #236]	; (24008904 <HAL_I2C_Master_Transmit_DMA+0x144>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24008816:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
2400881a:	4a3b      	ldr	r2, [pc, #236]	; (24008908 <HAL_I2C_Master_Transmit_DMA+0x148>)
      hi2c->XferISR = I2C_Master_ISR_IT;
2400881c:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
2400881e:	6843      	ldr	r3, [r0, #4]
24008820:	4013      	ands	r3, r2
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24008822:	4a3a      	ldr	r2, [pc, #232]	; (2400890c <HAL_I2C_Master_Transmit_DMA+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, \
24008824:	431d      	orrs	r5, r3
24008826:	4b3a      	ldr	r3, [pc, #232]	; (24008910 <HAL_I2C_Master_Transmit_DMA+0x150>)
24008828:	432b      	orrs	r3, r5
2400882a:	6043      	str	r3, [r0, #4]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400882c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
2400882e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24008832:	4293      	cmp	r3, r2
24008834:	d002      	beq.n	2400883c <HAL_I2C_Master_Transmit_DMA+0x7c>
24008836:	42b3      	cmp	r3, r6
24008838:	bf18      	it	ne
2400883a:	21f2      	movne	r1, #242	; 0xf2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400883c:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
2400883e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24008840:	6813      	ldr	r3, [r2, #0]
24008842:	4319      	orrs	r1, r3
24008844:	6011      	str	r1, [r2, #0]
}
24008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
24008848:	2002      	movs	r0, #2
}
2400884a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400884c:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
2400884e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
24008852:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmatx != NULL)
24008854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24008856:	2b00      	cmp	r3, #0
24008858:	d042      	beq.n	240088e0 <HAL_I2C_Master_Transmit_DMA+0x120>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400885a:	4611      	mov	r1, r2
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400885c:	4a2d      	ldr	r2, [pc, #180]	; (24008914 <HAL_I2C_Master_Transmit_DMA+0x154>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400885e:	2600      	movs	r6, #0
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
24008860:	63da      	str	r2, [r3, #60]	; 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
24008862:	4a2d      	ldr	r2, [pc, #180]	; (24008918 <HAL_I2C_Master_Transmit_DMA+0x158>)
24008864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24008866:	64da      	str	r2, [r3, #76]	; 0x4c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
24008868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400886a:	641e      	str	r6, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400886c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400886e:	651e      	str	r6, [r3, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
24008870:	6822      	ldr	r2, [r4, #0]
24008872:	8d23      	ldrh	r3, [r4, #40]	; 0x28
24008874:	3228      	adds	r2, #40	; 0x28
24008876:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24008878:	f7fe f868 	bl	2400694c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
2400887c:	bb00      	cbnz	r0, 240088c0 <HAL_I2C_Master_Transmit_DMA+0x100>
  MODIFY_REG(hi2c->Instance->CR2, \
2400887e:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24008880:	f3c5 0309 	ubfx	r3, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24008884:	4920      	ldr	r1, [pc, #128]	; (24008908 <HAL_I2C_Master_Transmit_DMA+0x148>)
24008886:	6855      	ldr	r5, [r2, #4]
24008888:	433b      	orrs	r3, r7
2400888a:	400d      	ands	r5, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400888c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24008890:	432b      	orrs	r3, r5
24008892:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24008896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2400889a:	6053      	str	r3, [r2, #4]
        hi2c->XferCount -= hi2c->XferSize;
2400889c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400889e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240088a0:	6822      	ldr	r2, [r4, #0]
        hi2c->XferCount -= hi2c->XferSize;
240088a2:	1a5b      	subs	r3, r3, r1
        __HAL_UNLOCK(hi2c);
240088a4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        hi2c->XferCount -= hi2c->XferSize;
240088a8:	b29b      	uxth	r3, r3
240088aa:	8563      	strh	r3, [r4, #42]	; 0x2a
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240088ac:	6813      	ldr	r3, [r2, #0]
240088ae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
240088b2:	6013      	str	r3, [r2, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
240088b4:	6822      	ldr	r2, [r4, #0]
240088b6:	6813      	ldr	r3, [r2, #0]
240088b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240088bc:	6013      	str	r3, [r2, #0]
}
240088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->State     = HAL_I2C_STATE_READY;
240088c0:	2320      	movs	r3, #32
        return HAL_ERROR;
240088c2:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
240088c4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        hi2c->State     = HAL_I2C_STATE_READY;
240088c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
240088cc:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
240088d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
240088d2:	f043 0310 	orr.w	r3, r3, #16
240088d6:	6463      	str	r3, [r4, #68]	; 0x44
}
240088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      xfermode = I2C_AUTOEND_MODE;
240088da:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
240088de:	e7b9      	b.n	24008854 <HAL_I2C_Master_Transmit_DMA+0x94>
        hi2c->State     = HAL_I2C_STATE_READY;
240088e0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
240088e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
240088e6:	2001      	movs	r0, #1
        hi2c->State     = HAL_I2C_STATE_READY;
240088e8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
240088ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
240088f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
240088f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240088f6:	6463      	str	r3, [r4, #68]	; 0x44
}
240088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240088fa:	bf00      	nop
240088fc:	ffff0000 	.word	0xffff0000
24008900:	24009555 	.word	0x24009555
24008904:	240091ad 	.word	0x240091ad
24008908:	fc009800 	.word	0xfc009800
2400890c:	240093c9 	.word	0x240093c9
24008910:	02002000 	.word	0x02002000
24008914:	24009761 	.word	0x24009761
24008918:	24009719 	.word	0x24009719

2400891c <HAL_I2C_Slave_Receive_DMA>:
  if (hi2c->State == HAL_I2C_STATE_READY)
2400891c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008920:	2b20      	cmp	r3, #32
24008922:	d149      	bne.n	240089b8 <HAL_I2C_Slave_Receive_DMA+0x9c>
{
24008924:	b570      	push	{r4, r5, r6, lr}
24008926:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
24008928:	2900      	cmp	r1, #0
2400892a:	d040      	beq.n	240089ae <HAL_I2C_Slave_Receive_DMA+0x92>
2400892c:	fab2 f582 	clz	r5, r2
24008930:	096d      	lsrs	r5, r5, #5
24008932:	2a00      	cmp	r2, #0
24008934:	d03b      	beq.n	240089ae <HAL_I2C_Slave_Receive_DMA+0x92>
24008936:	b2d8      	uxtb	r0, r3
    __HAL_LOCK(hi2c);
24008938:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
2400893c:	2b01      	cmp	r3, #1
2400893e:	d057      	beq.n	240089f0 <HAL_I2C_Slave_Receive_DMA+0xd4>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24008940:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(hi2c);
24008942:	2601      	movs	r6, #1
    hi2c->pBuffPtr    = pData;
24008944:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24008946:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400894a:	4b2a      	ldr	r3, [pc, #168]	; (240089f4 <HAL_I2C_Slave_Receive_DMA+0xd8>)
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400894c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24008950:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
24008952:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
24008954:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008956:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
24008958:	4b27      	ldr	r3, [pc, #156]	; (240089f8 <HAL_I2C_Slave_Receive_DMA+0xdc>)
    hi2c->XferSize    = hi2c->XferCount;
2400895a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400895c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
2400895e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    __HAL_LOCK(hi2c);
24008960:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    if (hi2c->hdmarx != NULL)
24008964:	2b00      	cmp	r3, #0
24008966:	d036      	beq.n	240089d6 <HAL_I2C_Slave_Receive_DMA+0xba>
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
24008968:	460a      	mov	r2, r1
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400896a:	4924      	ldr	r1, [pc, #144]	; (240089fc <HAL_I2C_Slave_Receive_DMA+0xe0>)
2400896c:	63d9      	str	r1, [r3, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400896e:	4924      	ldr	r1, [pc, #144]	; (24008a00 <HAL_I2C_Slave_Receive_DMA+0xe4>)
24008970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008972:	64d9      	str	r1, [r3, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
24008974:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008976:	641d      	str	r5, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
24008978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400897a:	651d      	str	r5, [r3, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400897c:	6821      	ldr	r1, [r4, #0]
2400897e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
24008980:	3124      	adds	r1, #36	; 0x24
24008982:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008984:	f7fd ffe2 	bl	2400694c <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
24008988:	b9c0      	cbnz	r0, 240089bc <HAL_I2C_Slave_Receive_DMA+0xa0>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400898a:	6822      	ldr	r2, [r4, #0]
2400898c:	6853      	ldr	r3, [r2, #4]
2400898e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24008992:	6053      	str	r3, [r2, #4]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24008994:	6822      	ldr	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
24008996:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400899a:	6813      	ldr	r3, [r2, #0]
2400899c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
240089a0:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
240089a2:	6822      	ldr	r2, [r4, #0]
240089a4:	6813      	ldr	r3, [r2, #0]
240089a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240089aa:	6013      	str	r3, [r2, #0]
}
240089ac:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
240089ae:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
240089b2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
240089b4:	6463      	str	r3, [r4, #68]	; 0x44
}
240089b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
240089b8:	2002      	movs	r0, #2
}
240089ba:	4770      	bx	lr
      hi2c->State     = HAL_I2C_STATE_LISTEN;
240089bc:	2328      	movs	r3, #40	; 0x28
      return HAL_ERROR;
240089be:	4630      	mov	r0, r6
      __HAL_UNLOCK(hi2c);
240089c0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->State     = HAL_I2C_STATE_LISTEN;
240089c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
240089c8:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
240089cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
240089ce:	f043 0310 	orr.w	r3, r3, #16
240089d2:	6463      	str	r3, [r4, #68]	; 0x44
}
240089d4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
240089d6:	2228      	movs	r2, #40	; 0x28
      __HAL_UNLOCK(hi2c);
240089d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
240089dc:	4630      	mov	r0, r6
      hi2c->State     = HAL_I2C_STATE_LISTEN;
240089de:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
240089e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
240089e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
240089e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240089ec:	6463      	str	r3, [r4, #68]	; 0x44
}
240089ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
240089f0:	2002      	movs	r0, #2
}
240089f2:	bd70      	pop	{r4, r5, r6, pc}
240089f4:	ffff0000 	.word	0xffff0000
240089f8:	240093c9 	.word	0x240093c9
240089fc:	24008ac5 	.word	0x24008ac5
24008a00:	24009719 	.word	0x24009719

24008a04 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24008a04:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
24008a06:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24008a08:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24008a0a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24008a0c:	b103      	cbz	r3, 24008a10 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24008a0e:	4718      	bx	r3
}
24008a10:	4770      	bx	lr
24008a12:	bf00      	nop

24008a14 <HAL_I2C_MasterRxCpltCallback>:
24008a14:	4770      	bx	lr
24008a16:	bf00      	nop

24008a18 <HAL_I2C_SlaveTxCpltCallback>:
24008a18:	4770      	bx	lr
24008a1a:	bf00      	nop

24008a1c <I2C_ITSlaveSeqCplt>:
{
24008a1c:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008a1e:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008a20:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008a22:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008a24:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24008a28:	0451      	lsls	r1, r2, #17
24008a2a:	d50c      	bpl.n	24008a46 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24008a2c:	681a      	ldr	r2, [r3, #0]
24008a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24008a32:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24008a34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008a38:	2b29      	cmp	r3, #41	; 0x29
24008a3a:	d00e      	beq.n	24008a5a <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24008a3c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008a40:	2b2a      	cmp	r3, #42	; 0x2a
24008a42:	d024      	beq.n	24008a8e <I2C_ITSlaveSeqCplt+0x72>
}
24008a44:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24008a46:	0412      	lsls	r2, r2, #16
24008a48:	d5f4      	bpl.n	24008a34 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008a4a:	681a      	ldr	r2, [r3, #0]
24008a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008a50:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24008a52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008a56:	2b29      	cmp	r3, #41	; 0x29
24008a58:	d1f0      	bne.n	24008a3c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008a5a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24008a5c:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008a5e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24008a60:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008a64:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24008a68:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008a6a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008a6e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008a70:	f002 0228 	and.w	r2, r2, #40	; 0x28
24008a74:	2a28      	cmp	r2, #40	; 0x28
24008a76:	bf0c      	ite	eq
24008a78:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24008a7c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008a80:	4013      	ands	r3, r2
24008a82:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24008a84:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24008a88:	f7ff ffc6 	bl	24008a18 <HAL_I2C_SlaveTxCpltCallback>
}
24008a8c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008a8e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24008a90:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008a92:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24008a94:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008a98:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24008a9c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008a9e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008aa2:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008aa4:	f002 0228 	and.w	r2, r2, #40	; 0x28
24008aa8:	2a28      	cmp	r2, #40	; 0x28
24008aaa:	bf0c      	ite	eq
24008aac:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24008ab0:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008ab4:	4013      	ands	r3, r2
24008ab6:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24008ab8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24008abc:	f7fc fca8 	bl	24005410 <HAL_I2C_SlaveRxCpltCallback>
}
24008ac0:	bd08      	pop	{r3, pc}
24008ac2:	bf00      	nop

24008ac4 <I2C_DMASlaveReceiveCplt>:
{
24008ac4:	b470      	push	{r4, r5, r6}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24008ac6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
24008ac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  uint32_t tmpoptions = hi2c->XferOptions;
24008aca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
24008acc:	6812      	ldr	r2, [r2, #0]
24008ace:	6853      	ldr	r3, [r2, #4]
24008ad0:	b913      	cbnz	r3, 24008ad8 <I2C_DMASlaveReceiveCplt+0x14>
24008ad2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
24008ad6:	d101      	bne.n	24008adc <I2C_DMASlaveReceiveCplt+0x18>
}
24008ad8:	bc70      	pop	{r4, r5, r6}
24008ada:	4770      	bx	lr
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008adc:	6802      	ldr	r2, [r0, #0]
24008ade:	6813      	ldr	r3, [r2, #0]
24008ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24008ae4:	6013      	str	r3, [r2, #0]
}
24008ae6:	bc70      	pop	{r4, r5, r6}
    I2C_ITSlaveSeqCplt(hi2c);
24008ae8:	f7ff bf98 	b.w	24008a1c <I2C_ITSlaveSeqCplt>

24008aec <HAL_I2C_AddrCallback>:
}
24008aec:	4770      	bx	lr
24008aee:	bf00      	nop

24008af0 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24008af0:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24008af2:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24008af4:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24008af6:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24008af8:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24008afa:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24008afc:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24008afe:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24008b00:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24008b04:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24008b08:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24008b0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24008b0e:	d10f      	bne.n	24008b30 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24008b10:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24008b14:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24008b18:	f013 0306 	ands.w	r3, r3, #6
24008b1c:	d106      	bne.n	24008b2c <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24008b1e:	6c85      	ldr	r5, [r0, #72]	; 0x48
24008b20:	3501      	adds	r5, #1
24008b22:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24008b24:	6c85      	ldr	r5, [r0, #72]	; 0x48
24008b26:	2d02      	cmp	r5, #2
24008b28:	d00c      	beq.n	24008b44 <I2C_ITAddrCplt.part.0+0x54>
}
24008b2a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24008b2c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008b30:	6823      	ldr	r3, [r4, #0]
24008b32:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24008b36:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24008b38:	2300      	movs	r3, #0
24008b3a:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24008b3e:	f7ff ffd5 	bl	24008aec <HAL_I2C_AddrCallback>
}
24008b42:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24008b44:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24008b46:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24008b48:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24008b4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24008b4e:	f7ff ffcd 	bl	24008aec <HAL_I2C_AddrCallback>
}
24008b52:	bd70      	pop	{r4, r5, r6, pc}

24008b54 <HAL_I2C_ListenCpltCallback>:
24008b54:	4770      	bx	lr
24008b56:	bf00      	nop

24008b58 <HAL_I2C_MemTxCpltCallback>:
24008b58:	4770      	bx	lr
24008b5a:	bf00      	nop

24008b5c <HAL_I2C_MemRxCpltCallback>:
24008b5c:	4770      	bx	lr
24008b5e:	bf00      	nop

24008b60 <HAL_I2C_AbortCpltCallback>:
24008b60:	4770      	bx	lr
24008b62:	bf00      	nop

24008b64 <I2C_DMAAbort>:
{
24008b64:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24008b66:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24008b68:	6b83      	ldr	r3, [r0, #56]	; 0x38
24008b6a:	b10b      	cbz	r3, 24008b70 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24008b6c:	2200      	movs	r2, #0
24008b6e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24008b70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24008b72:	b10b      	cbz	r3, 24008b78 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24008b74:	2200      	movs	r2, #0
24008b76:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008b78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24008b7c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24008b7e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008b82:	d005      	beq.n	24008b90 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24008b84:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24008b86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24008b8a:	f7fc fc57 	bl	2400543c <HAL_I2C_ErrorCallback>
}
24008b8e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24008b90:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24008b92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24008b96:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24008b9a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24008b9c:	f7ff ffe0 	bl	24008b60 <HAL_I2C_AbortCpltCallback>
}
24008ba0:	bd08      	pop	{r3, pc}
24008ba2:	bf00      	nop

24008ba4 <I2C_ITError>:
{
24008ba4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24008ba6:	4a5d      	ldr	r2, [pc, #372]	; (24008d1c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24008ba8:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24008baa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24008bae:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24008bb0:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24008bb4:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24008bb6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24008bb8:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24008bba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24008bbc:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24008bbe:	ea41 0102 	orr.w	r1, r1, r2
24008bc2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24008bc4:	d874      	bhi.n	24008cb0 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bc6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bca:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bce:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008bd2:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bd4:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bd8:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008bda:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bdc:	bf14      	ite	ne
24008bde:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24008be2:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008be6:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008be8:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008bec:	bf18      	it	ne
24008bee:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008bf2:	4013      	ands	r3, r2
24008bf4:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24008bf6:	4b4a      	ldr	r3, [pc, #296]	; (24008d20 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24008bf8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24008bfc:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24008bfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24008c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24008c02:	b118      	cbz	r0, 24008c0c <I2C_ITError+0x68>
24008c04:	2b11      	cmp	r3, #17
24008c06:	d01e      	beq.n	24008c46 <I2C_ITError+0xa2>
24008c08:	2b21      	cmp	r3, #33	; 0x21
24008c0a:	d01c      	beq.n	24008c46 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24008c0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008c0e:	b118      	cbz	r0, 24008c18 <I2C_ITError+0x74>
24008c10:	2b12      	cmp	r3, #18
24008c12:	d030      	beq.n	24008c76 <I2C_ITError+0xd2>
24008c14:	2b22      	cmp	r3, #34	; 0x22
24008c16:	d02e      	beq.n	24008c76 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008c18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24008c1c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24008c1e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24008c22:	d006      	beq.n	24008c32 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24008c24:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24008c26:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24008c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24008c2c:	f7fc fc06 	bl	2400543c <HAL_I2C_ErrorCallback>
}
24008c30:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24008c32:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24008c34:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24008c36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24008c3a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24008c3e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24008c40:	f7ff ff8e 	bl	24008b60 <HAL_I2C_AbortCpltCallback>
}
24008c44:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24008c46:	6823      	ldr	r3, [r4, #0]
24008c48:	681a      	ldr	r2, [r3, #0]
24008c4a:	0451      	lsls	r1, r2, #17
24008c4c:	d460      	bmi.n	24008d10 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24008c4e:	f7ff f8f3 	bl	24007e38 <HAL_DMA_GetState>
24008c52:	2801      	cmp	r0, #1
24008c54:	d0e0      	beq.n	24008c18 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24008c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24008c58:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24008c5a:	4932      	ldr	r1, [pc, #200]	; (24008d24 <I2C_ITError+0x180>)
24008c5c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24008c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24008c62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24008c64:	f7fe fb54 	bl	24007310 <HAL_DMA_Abort_IT>
24008c68:	2800      	cmp	r0, #0
24008c6a:	d0e1      	beq.n	24008c30 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24008c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24008c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24008c72:	6d03      	ldr	r3, [r0, #80]	; 0x50
24008c74:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24008c76:	6823      	ldr	r3, [r4, #0]
24008c78:	681a      	ldr	r2, [r3, #0]
24008c7a:	0412      	lsls	r2, r2, #16
24008c7c:	d504      	bpl.n	24008c88 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008c7e:	681a      	ldr	r2, [r3, #0]
24008c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008c84:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24008c86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008c88:	f7ff f8d6 	bl	24007e38 <HAL_DMA_GetState>
24008c8c:	2801      	cmp	r0, #1
24008c8e:	d0c3      	beq.n	24008c18 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24008c90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24008c92:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24008c94:	4923      	ldr	r1, [pc, #140]	; (24008d24 <I2C_ITError+0x180>)
24008c96:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24008c98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24008c9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008c9e:	f7fe fb37 	bl	24007310 <HAL_DMA_Abort_IT>
24008ca2:	2800      	cmp	r0, #0
24008ca4:	d0c4      	beq.n	24008c30 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24008ca6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24008ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24008cac:	6d03      	ldr	r3, [r0, #80]	; 0x50
24008cae:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008cb0:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008cb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008cb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008cba:	6813      	ldr	r3, [r2, #0]
24008cbc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24008cc0:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24008cc2:	6803      	ldr	r3, [r0, #0]
24008cc4:	699a      	ldr	r2, [r3, #24]
24008cc6:	0792      	lsls	r2, r2, #30
24008cc8:	d501      	bpl.n	24008cce <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24008cca:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24008ccc:	6803      	ldr	r3, [r0, #0]
24008cce:	699a      	ldr	r2, [r3, #24]
24008cd0:	07d6      	lsls	r6, r2, #31
24008cd2:	d403      	bmi.n	24008cdc <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24008cd4:	699a      	ldr	r2, [r3, #24]
24008cd6:	f042 0201 	orr.w	r2, r2, #1
24008cda:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24008cdc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24008ce0:	2b60      	cmp	r3, #96	; 0x60
24008ce2:	d012      	beq.n	24008d0a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24008ce4:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24008ce6:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
24008ce8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24008cec:	699a      	ldr	r2, [r3, #24]
24008cee:	0695      	lsls	r5, r2, #26
24008cf0:	d50b      	bpl.n	24008d0a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24008cf2:	699a      	ldr	r2, [r3, #24]
24008cf4:	06d0      	lsls	r0, r2, #27
24008cf6:	d506      	bpl.n	24008d06 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008cf8:	2210      	movs	r2, #16
24008cfa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24008cfc:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008cfe:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24008d00:	f042 0204 	orr.w	r2, r2, #4
24008d04:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008d06:	2220      	movs	r2, #32
24008d08:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24008d0a:	2300      	movs	r3, #0
24008d0c:	6363      	str	r3, [r4, #52]	; 0x34
24008d0e:	e776      	b.n	24008bfe <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24008d10:	681a      	ldr	r2, [r3, #0]
24008d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24008d16:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24008d18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24008d1a:	e798      	b.n	24008c4e <I2C_ITError+0xaa>
24008d1c:	ffff0000 	.word	0xffff0000
24008d20:	24008ed1 	.word	0x24008ed1
24008d24:	24008b65 	.word	0x24008b65

24008d28 <I2C_ITSlaveCplt>:
{
24008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008d2a:	6802      	ldr	r2, [r0, #0]
{
24008d2c:	460d      	mov	r5, r1
24008d2e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24008d30:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24008d32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008d36:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24008d38:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24008d3c:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24008d3e:	2b21      	cmp	r3, #33	; 0x21
24008d40:	d16f      	bne.n	24008e22 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008d42:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008d44:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008d48:	6802      	ldr	r2, [r0, #0]
24008d4a:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
24008d4e:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24008d50:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24008d52:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
24008d54:	485c      	ldr	r0, [pc, #368]	; (24008ec8 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24008d56:	6853      	ldr	r3, [r2, #4]
24008d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24008d5c:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24008d5e:	6822      	ldr	r2, [r4, #0]
24008d60:	6853      	ldr	r3, [r2, #4]
24008d62:	4003      	ands	r3, r0
24008d64:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24008d66:	6823      	ldr	r3, [r4, #0]
24008d68:	699a      	ldr	r2, [r3, #24]
24008d6a:	0797      	lsls	r7, r2, #30
24008d6c:	d502      	bpl.n	24008d74 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
24008d6e:	2200      	movs	r2, #0
24008d70:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24008d72:	6823      	ldr	r3, [r4, #0]
24008d74:	699a      	ldr	r2, [r3, #24]
24008d76:	07d6      	lsls	r6, r2, #31
24008d78:	d403      	bmi.n	24008d82 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24008d7a:	699a      	ldr	r2, [r3, #24]
24008d7c:	f042 0201 	orr.w	r2, r2, #1
24008d80:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24008d82:	0448      	lsls	r0, r1, #17
24008d84:	d558      	bpl.n	24008e38 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24008d86:	6822      	ldr	r2, [r4, #0]
24008d88:	6813      	ldr	r3, [r2, #0]
24008d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24008d8e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24008d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24008d92:	b11b      	cbz	r3, 24008d9c <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24008d94:	681a      	ldr	r2, [r3, #0]
24008d96:	6853      	ldr	r3, [r2, #4]
24008d98:	b29b      	uxth	r3, r3
24008d9a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24008d9c:	076a      	lsls	r2, r5, #29
24008d9e:	d50a      	bpl.n	24008db6 <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008da0:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
24008da2:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
24008daa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24008dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008dae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24008db0:	3301      	adds	r3, #1
24008db2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008db4:	bb72      	cbnz	r2, 24008e14 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
24008db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008db8:	b29b      	uxth	r3, r3
24008dba:	b11b      	cbz	r3, 24008dc4 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24008dbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
24008dbe:	f043 0304 	orr.w	r3, r3, #4
24008dc2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008dc4:	2700      	movs	r7, #0
24008dc6:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24008dca:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24008dcc:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24008dce:	2e00      	cmp	r6, #0
24008dd0:	d13d      	bne.n	24008e4e <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24008dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008dd4:	4d3d      	ldr	r5, [pc, #244]	; (24008ecc <I2C_ITSlaveCplt+0x1a4>)
24008dd6:	42ab      	cmp	r3, r5
24008dd8:	d10e      	bne.n	24008df8 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24008dda:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24008dde:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24008de0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24008de4:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24008de6:	f04f 0320 	mov.w	r3, #32
24008dea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24008dee:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24008df0:	d066      	beq.n	24008ec0 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24008df2:	f7ff fe11 	bl	24008a18 <HAL_I2C_SlaveTxCpltCallback>
}
24008df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24008df8:	4620      	mov	r0, r4
24008dfa:	f7ff fe0f 	bl	24008a1c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24008dfe:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008e00:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24008e02:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24008e04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24008e08:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24008e0c:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24008e0e:	f7ff fea1 	bl	24008b54 <HAL_I2C_ListenCpltCallback>
}
24008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
24008e14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24008e16:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24008e18:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24008e1a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008e1c:	b29b      	uxth	r3, r3
24008e1e:	8563      	strh	r3, [r4, #42]	; 0x2a
24008e20:	e7c9      	b.n	24008db6 <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24008e22:	2b22      	cmp	r3, #34	; 0x22
24008e24:	d195      	bne.n	24008d52 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008e26:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008e28:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008e2c:	6802      	ldr	r2, [r0, #0]
24008e2e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24008e32:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24008e34:	6323      	str	r3, [r4, #48]	; 0x30
24008e36:	e78c      	b.n	24008d52 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24008e38:	0409      	lsls	r1, r1, #16
24008e3a:	d5af      	bpl.n	24008d9c <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24008e3c:	6822      	ldr	r2, [r4, #0]
24008e3e:	6813      	ldr	r3, [r2, #0]
24008e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24008e44:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24008e46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008e48:	2b00      	cmp	r3, #0
24008e4a:	d1a3      	bne.n	24008d94 <I2C_ITSlaveCplt+0x6c>
24008e4c:	e7a6      	b.n	24008d9c <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24008e4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
24008e50:	4620      	mov	r0, r4
24008e52:	f7ff fea7 	bl	24008ba4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24008e56:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24008e5a:	2b28      	cmp	r3, #40	; 0x28
24008e5c:	d1cb      	bne.n	24008df6 <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
24008e5e:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008e60:	4a1a      	ldr	r2, [pc, #104]	; (24008ecc <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
24008e62:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24008e64:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24008e66:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24008e68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24008e6c:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
24008e6e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24008e72:	d512      	bpl.n	24008e9a <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008e74:	6822      	ldr	r2, [r4, #0]
24008e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
24008e7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24008e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008e7e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24008e80:	3301      	adds	r3, #1
24008e82:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24008e84:	b14a      	cbz	r2, 24008e9a <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
24008e86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24008e88:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24008e8a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24008e8c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008e8e:	b29b      	uxth	r3, r3
24008e90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24008e92:	6c63      	ldr	r3, [r4, #68]	; 0x44
24008e94:	f043 0304 	orr.w	r3, r3, #4
24008e98:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008e9a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008e9c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008e9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24008ea2:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24008ea4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24008ea8:	6813      	ldr	r3, [r2, #0]
24008eaa:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24008eae:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008eb0:	6823      	ldr	r3, [r4, #0]
24008eb2:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24008eb4:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24008eb6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24008eba:	f7ff fe4b 	bl	24008b54 <HAL_I2C_ListenCpltCallback>
}
24008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24008ec0:	f7fc faa6 	bl	24005410 <HAL_I2C_SlaveRxCpltCallback>
}
24008ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24008ec6:	bf00      	nop
24008ec8:	fe00e800 	.word	0xfe00e800
24008ecc:	ffff0000 	.word	0xffff0000

24008ed0 <I2C_Slave_ISR_IT>:
{
24008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24008ed2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24008ed6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24008ed8:	2b01      	cmp	r3, #1
24008eda:	d07f      	beq.n	24008fdc <I2C_Slave_ISR_IT+0x10c>
24008edc:	4617      	mov	r7, r2
24008ede:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24008ee0:	068a      	lsls	r2, r1, #26
24008ee2:	4604      	mov	r4, r0
24008ee4:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24008ee6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24008eea:	d501      	bpl.n	24008ef0 <I2C_Slave_ISR_IT+0x20>
24008eec:	06bb      	lsls	r3, r7, #26
24008eee:	d461      	bmi.n	24008fb4 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24008ef0:	06ea      	lsls	r2, r5, #27
24008ef2:	d51b      	bpl.n	24008f2c <I2C_Slave_ISR_IT+0x5c>
24008ef4:	06fb      	lsls	r3, r7, #27
24008ef6:	d519      	bpl.n	24008f2c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
24008ef8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008efa:	b29b      	uxth	r3, r3
24008efc:	2b00      	cmp	r3, #0
24008efe:	d15e      	bne.n	24008fbe <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24008f00:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24008f04:	2a28      	cmp	r2, #40	; 0x28
24008f06:	d102      	bne.n	24008f0e <I2C_Slave_ISR_IT+0x3e>
24008f08:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24008f0c:	d07f      	beq.n	2400900e <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24008f0e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008f12:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24008f14:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008f16:	6823      	ldr	r3, [r4, #0]
24008f18:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24008f1a:	d102      	bne.n	24008f22 <I2C_Slave_ISR_IT+0x52>
24008f1c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24008f20:	d162      	bne.n	24008fe8 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
24008f22:	2300      	movs	r3, #0
  return HAL_OK;
24008f24:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24008f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24008f2c:	076a      	lsls	r2, r5, #29
24008f2e:	d40d      	bmi.n	24008f4c <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24008f30:	0728      	lsls	r0, r5, #28
24008f32:	d529      	bpl.n	24008f88 <I2C_Slave_ISR_IT+0xb8>
24008f34:	0739      	lsls	r1, r7, #28
24008f36:	d527      	bpl.n	24008f88 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24008f38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24008f3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
24008f40:	2b28      	cmp	r3, #40	; 0x28
24008f42:	d060      	beq.n	24009006 <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24008f44:	6823      	ldr	r3, [r4, #0]
24008f46:	2208      	movs	r2, #8
24008f48:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24008f4a:	e7ea      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24008f4c:	077b      	lsls	r3, r7, #29
24008f4e:	d5ef      	bpl.n	24008f30 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
24008f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008f52:	b29b      	uxth	r3, r3
24008f54:	b16b      	cbz	r3, 24008f72 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24008f56:	6822      	ldr	r2, [r4, #0]
24008f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
24008f5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
24008f5c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24008f5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24008f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24008f62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008f64:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24008f66:	3101      	adds	r1, #1
      hi2c->XferSize--;
24008f68:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24008f6a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24008f6c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24008f6e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008f70:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24008f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008f74:	b29b      	uxth	r3, r3
24008f76:	2b00      	cmp	r3, #0
24008f78:	d1d3      	bne.n	24008f22 <I2C_Slave_ISR_IT+0x52>
24008f7a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24008f7e:	d0d0      	beq.n	24008f22 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
24008f80:	4620      	mov	r0, r4
24008f82:	f7ff fd4b 	bl	24008a1c <I2C_ITSlaveSeqCplt>
24008f86:	e7cc      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24008f88:	07aa      	lsls	r2, r5, #30
24008f8a:	d5ca      	bpl.n	24008f22 <I2C_Slave_ISR_IT+0x52>
24008f8c:	07bb      	lsls	r3, r7, #30
24008f8e:	d5c8      	bpl.n	24008f22 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
24008f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24008f92:	b29b      	uxth	r3, r3
24008f94:	b323      	cbz	r3, 24008fe0 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24008f96:	6a62      	ldr	r2, [r4, #36]	; 0x24
24008f98:	6823      	ldr	r3, [r4, #0]
24008f9a:	7812      	ldrb	r2, [r2, #0]
24008f9c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24008f9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24008fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24008fa2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008fa4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24008fa6:	3101      	adds	r1, #1
      hi2c->XferSize--;
24008fa8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24008faa:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24008fac:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24008fae:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24008fb0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24008fb2:	e7b6      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24008fb4:	f7ff feb8 	bl	24008d28 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24008fb8:	06ea      	lsls	r2, r5, #27
24008fba:	d5b7      	bpl.n	24008f2c <I2C_Slave_ISR_IT+0x5c>
24008fbc:	e79a      	b.n	24008ef4 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24008fbe:	6823      	ldr	r3, [r4, #0]
24008fc0:	2210      	movs	r2, #16
24008fc2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24008fc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
24008fc6:	f043 0304 	orr.w	r3, r3, #4
24008fca:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24008fcc:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24008fd0:	d1a7      	bne.n	24008f22 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24008fd2:	6c61      	ldr	r1, [r4, #68]	; 0x44
24008fd4:	4620      	mov	r0, r4
24008fd6:	f7ff fde5 	bl	24008ba4 <I2C_ITError>
24008fda:	e7a2      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
24008fdc:	2002      	movs	r0, #2
}
24008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24008fe0:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24008fe4:	d19d      	bne.n	24008f22 <I2C_Slave_ISR_IT+0x52>
24008fe6:	e7cb      	b.n	24008f80 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24008fe8:	6823      	ldr	r3, [r4, #0]
24008fea:	699a      	ldr	r2, [r3, #24]
24008fec:	0790      	lsls	r0, r2, #30
24008fee:	d502      	bpl.n	24008ff6 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
24008ff0:	2200      	movs	r2, #0
24008ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24008ff4:	6823      	ldr	r3, [r4, #0]
24008ff6:	699a      	ldr	r2, [r3, #24]
24008ff8:	07d1      	lsls	r1, r2, #31
24008ffa:	d4c1      	bmi.n	24008f80 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24008ffc:	699a      	ldr	r2, [r3, #24]
24008ffe:	f042 0201 	orr.w	r2, r2, #1
24009002:	619a      	str	r2, [r3, #24]
24009004:	e7bc      	b.n	24008f80 <I2C_Slave_ISR_IT+0xb0>
24009006:	4620      	mov	r0, r4
24009008:	f7ff fd72 	bl	24008af0 <I2C_ITAddrCplt.part.0>
2400900c:	e789      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400900e:	4918      	ldr	r1, [pc, #96]	; (24009070 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
24009010:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24009012:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24009014:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24009016:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24009018:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400901a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400901e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24009022:	d512      	bpl.n	2400904a <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24009024:	6822      	ldr	r2, [r4, #0]
24009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
24009028:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400902a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
2400902c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400902e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24009030:	3301      	adds	r3, #1
24009032:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24009034:	b14a      	cbz	r2, 2400904a <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
24009036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24009038:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400903a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
2400903c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400903e:	b29b      	uxth	r3, r3
24009040:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24009042:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009044:	f043 0304 	orr.w	r3, r3, #4
24009048:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400904a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400904c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400904e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24009052:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009054:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009058:	6813      	ldr	r3, [r2, #0]
2400905a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400905e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009060:	6823      	ldr	r3, [r4, #0]
24009062:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24009064:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24009066:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
2400906a:	f7ff fd73 	bl	24008b54 <HAL_I2C_ListenCpltCallback>
}
2400906e:	e758      	b.n	24008f22 <I2C_Slave_ISR_IT+0x52>
24009070:	ffff0000 	.word	0xffff0000

24009074 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24009074:	6803      	ldr	r3, [r0, #0]
24009076:	2220      	movs	r2, #32
{
24009078:	b530      	push	{r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400907a:	61da      	str	r2, [r3, #28]
{
2400907c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400907e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24009082:	2b21      	cmp	r3, #33	; 0x21
24009084:	d058      	beq.n	24009138 <I2C_ITMasterCplt+0xc4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24009086:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400908a:	2b22      	cmp	r3, #34	; 0x22
2400908c:	d03c      	beq.n	24009108 <I2C_ITMasterCplt+0x94>
  I2C_RESET_CR2(hi2c);
2400908e:	6802      	ldr	r2, [r0, #0]
  hi2c->XferISR       = NULL;
24009090:	2400      	movs	r4, #0
  I2C_RESET_CR2(hi2c);
24009092:	4d44      	ldr	r5, [pc, #272]	; (240091a4 <I2C_ITMasterCplt+0x130>)
24009094:	6853      	ldr	r3, [r2, #4]
24009096:	402b      	ands	r3, r5
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
24009098:	06cd      	lsls	r5, r1, #27
  I2C_RESET_CR2(hi2c);
2400909a:	6053      	str	r3, [r2, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400909c:	4b42      	ldr	r3, [pc, #264]	; (240091a8 <I2C_ITMasterCplt+0x134>)
  hi2c->XferISR       = NULL;
2400909e:	6344      	str	r4, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
240090a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
240090a2:	d506      	bpl.n	240090b2 <I2C_ITMasterCplt+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240090a4:	6803      	ldr	r3, [r0, #0]
240090a6:	2210      	movs	r2, #16
240090a8:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240090aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
240090ac:	f043 0304 	orr.w	r3, r3, #4
240090b0:	6443      	str	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
240090b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240090b6:	2b60      	cmp	r3, #96	; 0x60
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
240090b8:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
240090ba:	d036      	beq.n	2400912a <I2C_ITMasterCplt+0xb6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240090bc:	699a      	ldr	r2, [r3, #24]
240090be:	0791      	lsls	r1, r2, #30
240090c0:	d502      	bpl.n	240090c8 <I2C_ITMasterCplt+0x54>
    hi2c->Instance->TXDR = 0x00U;
240090c2:	2200      	movs	r2, #0
240090c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240090c6:	6803      	ldr	r3, [r0, #0]
240090c8:	699a      	ldr	r2, [r3, #24]
240090ca:	07d2      	lsls	r2, r2, #31
240090cc:	d403      	bmi.n	240090d6 <I2C_ITMasterCplt+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240090ce:	699a      	ldr	r2, [r3, #24]
240090d0:	f042 0201 	orr.w	r2, r2, #1
240090d4:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
240090d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
240090d8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240090dc:	2a60      	cmp	r2, #96	; 0x60
240090de:	d00d      	beq.n	240090fc <I2C_ITMasterCplt+0x88>
240090e0:	1e1a      	subs	r2, r3, #0
240090e2:	bf18      	it	ne
240090e4:	2201      	movne	r2, #1
240090e6:	b94b      	cbnz	r3, 240090fc <I2C_ITMasterCplt+0x88>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
240090e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240090ec:	2b21      	cmp	r3, #33	; 0x21
240090ee:	d043      	beq.n	24009178 <I2C_ITMasterCplt+0x104>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
240090f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240090f4:	2b22      	cmp	r3, #34	; 0x22
240090f6:	d030      	beq.n	2400915a <I2C_ITMasterCplt+0xe6>
}
240090f8:	b003      	add	sp, #12
240090fa:	bd30      	pop	{r4, r5, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
240090fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
240090fe:	b003      	add	sp, #12
24009100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
24009104:	f7ff bd4e 	b.w	24008ba4 <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009108:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400910c:	6804      	ldr	r4, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400910e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009112:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009114:	2a28      	cmp	r2, #40	; 0x28
24009116:	bf0c      	ite	eq
24009118:	f06f 0244 	mvneq.w	r2, #68	; 0x44
2400911c:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009120:	4013      	ands	r3, r2
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
24009122:	2212      	movs	r2, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009124:	6023      	str	r3, [r4, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
24009126:	6302      	str	r2, [r0, #48]	; 0x30
24009128:	e7b1      	b.n	2400908e <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400912a:	074c      	lsls	r4, r1, #29
2400912c:	d5c6      	bpl.n	240090bc <I2C_ITMasterCplt+0x48>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400912e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24009130:	b2d2      	uxtb	r2, r2
24009132:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
24009134:	9a01      	ldr	r2, [sp, #4]
24009136:	e7c1      	b.n	240090bc <I2C_ITMasterCplt+0x48>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009138:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400913c:	6804      	ldr	r4, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400913e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009142:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009144:	2a28      	cmp	r2, #40	; 0x28
24009146:	bf0c      	ite	eq
24009148:	f06f 0242 	mvneq.w	r2, #66	; 0x42
2400914c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009150:	4013      	ands	r3, r2
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
24009152:	2211      	movs	r2, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009154:	6023      	str	r3, [r4, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
24009156:	6302      	str	r2, [r0, #48]	; 0x30
24009158:	e799      	b.n	2400908e <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
2400915a:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
2400915c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24009160:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24009164:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
24009166:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400916a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400916e:	2b40      	cmp	r3, #64	; 0x40
24009170:	d014      	beq.n	2400919c <I2C_ITMasterCplt+0x128>
      HAL_I2C_MasterRxCpltCallback(hi2c);
24009172:	f7ff fc4f 	bl	24008a14 <HAL_I2C_MasterRxCpltCallback>
}
24009176:	e7bf      	b.n	240090f8 <I2C_ITMasterCplt+0x84>
    hi2c->State = HAL_I2C_STATE_READY;
24009178:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
2400917a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
2400917e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24009182:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
24009184:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
24009188:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400918c:	2b40      	cmp	r3, #64	; 0x40
2400918e:	d002      	beq.n	24009196 <I2C_ITMasterCplt+0x122>
      HAL_I2C_MasterTxCpltCallback(hi2c);
24009190:	f7fc f94e 	bl	24005430 <HAL_I2C_MasterTxCpltCallback>
24009194:	e7b0      	b.n	240090f8 <I2C_ITMasterCplt+0x84>
      HAL_I2C_MemTxCpltCallback(hi2c);
24009196:	f7ff fcdf 	bl	24008b58 <HAL_I2C_MemTxCpltCallback>
2400919a:	e7ad      	b.n	240090f8 <I2C_ITMasterCplt+0x84>
      HAL_I2C_MemRxCpltCallback(hi2c);
2400919c:	f7ff fcde 	bl	24008b5c <HAL_I2C_MemRxCpltCallback>
240091a0:	e7aa      	b.n	240090f8 <I2C_ITMasterCplt+0x84>
240091a2:	bf00      	nop
240091a4:	fe00e800 	.word	0xfe00e800
240091a8:	ffff0000 	.word	0xffff0000

240091ac <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
240091ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240091b0:	2b01      	cmp	r3, #1
240091b2:	f000 80b4 	beq.w	2400931e <I2C_Master_ISR_IT+0x172>
240091b6:	2301      	movs	r3, #1
{
240091b8:	b5f0      	push	{r4, r5, r6, r7, lr}
240091ba:	460d      	mov	r5, r1
240091bc:	b083      	sub	sp, #12
240091be:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
240091c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
240091c4:	06e9      	lsls	r1, r5, #27
240091c6:	d51d      	bpl.n	24009204 <I2C_Master_ISR_IT+0x58>
240091c8:	06d3      	lsls	r3, r2, #27
240091ca:	d51b      	bpl.n	24009204 <I2C_Master_ISR_IT+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240091cc:	6803      	ldr	r3, [r0, #0]
240091ce:	2110      	movs	r1, #16
240091d0:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240091d2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240091d4:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240091d6:	f041 0104 	orr.w	r1, r1, #4
240091da:	6441      	str	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240091dc:	6999      	ldr	r1, [r3, #24]
240091de:	078f      	lsls	r7, r1, #30
240091e0:	d502      	bpl.n	240091e8 <I2C_Master_ISR_IT+0x3c>
    hi2c->Instance->TXDR = 0x00U;
240091e2:	2100      	movs	r1, #0
240091e4:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240091e6:	6803      	ldr	r3, [r0, #0]
240091e8:	6999      	ldr	r1, [r3, #24]
240091ea:	07ce      	lsls	r6, r1, #31
240091ec:	d55a      	bpl.n	240092a4 <I2C_Master_ISR_IT+0xf8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
240091ee:	06a9      	lsls	r1, r5, #26
240091f0:	d502      	bpl.n	240091f8 <I2C_Master_ISR_IT+0x4c>
240091f2:	0693      	lsls	r3, r2, #26
240091f4:	f100 8089 	bmi.w	2400930a <I2C_Master_ISR_IT+0x15e>
  __HAL_UNLOCK(hi2c);
240091f8:	2300      	movs	r3, #0
  return HAL_OK;
240091fa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
240091fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24009200:	b003      	add	sp, #12
24009202:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24009204:	0768      	lsls	r0, r5, #29
24009206:	d408      	bmi.n	2400921a <I2C_Master_ISR_IT+0x6e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24009208:	07ab      	lsls	r3, r5, #30
2400920a:	d519      	bpl.n	24009240 <I2C_Master_ISR_IT+0x94>
2400920c:	0790      	lsls	r0, r2, #30
2400920e:	d517      	bpl.n	24009240 <I2C_Master_ISR_IT+0x94>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24009210:	6a61      	ldr	r1, [r4, #36]	; 0x24
24009212:	6823      	ldr	r3, [r4, #0]
24009214:	7809      	ldrb	r1, [r1, #0]
24009216:	6299      	str	r1, [r3, #40]	; 0x28
24009218:	e007      	b.n	2400922a <I2C_Master_ISR_IT+0x7e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400921a:	0751      	lsls	r1, r2, #29
2400921c:	d5f4      	bpl.n	24009208 <I2C_Master_ISR_IT+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400921e:	6821      	ldr	r1, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
24009220:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24009224:	6a63      	ldr	r3, [r4, #36]	; 0x24
24009226:	6a49      	ldr	r1, [r1, #36]	; 0x24
24009228:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
2400922a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
2400922c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
2400922e:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
24009230:	3101      	adds	r1, #1
    hi2c->XferCount--;
24009232:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
24009234:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
24009236:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
24009238:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
2400923a:	1e4b      	subs	r3, r1, #1
2400923c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
2400923e:	e7d6      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
24009240:	0629      	lsls	r1, r5, #24
24009242:	d416      	bmi.n	24009272 <I2C_Master_ISR_IT+0xc6>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
24009244:	066f      	lsls	r7, r5, #25
24009246:	d5d2      	bpl.n	240091ee <I2C_Master_ISR_IT+0x42>
24009248:	0650      	lsls	r0, r2, #25
2400924a:	d5d0      	bpl.n	240091ee <I2C_Master_ISR_IT+0x42>
    if (hi2c->XferCount == 0U)
2400924c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400924e:	b29b      	uxth	r3, r3
24009250:	2b00      	cmp	r3, #0
24009252:	d153      	bne.n	240092fc <I2C_Master_ISR_IT+0x150>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
24009254:	6821      	ldr	r1, [r4, #0]
24009256:	684b      	ldr	r3, [r1, #4]
24009258:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
2400925c:	d1c7      	bne.n	240091ee <I2C_Master_ISR_IT+0x42>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400925e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24009260:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
24009264:	f040 8087 	bne.w	24009376 <I2C_Master_ISR_IT+0x1ca>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
24009268:	684b      	ldr	r3, [r1, #4]
2400926a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400926e:	604b      	str	r3, [r1, #4]
24009270:	e7bd      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
24009272:	0653      	lsls	r3, r2, #25
24009274:	d5bb      	bpl.n	240091ee <I2C_Master_ISR_IT+0x42>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24009276:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24009278:	b29b      	uxth	r3, r3
2400927a:	b1c3      	cbz	r3, 240092ae <I2C_Master_ISR_IT+0x102>
2400927c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
2400927e:	b9b3      	cbnz	r3, 240092ae <I2C_Master_ISR_IT+0x102>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
24009280:	6820      	ldr	r0, [r4, #0]
24009282:	6841      	ldr	r1, [r0, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
24009284:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
24009286:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400928a:	b29b      	uxth	r3, r3
2400928c:	2bff      	cmp	r3, #255	; 0xff
2400928e:	d95e      	bls.n	2400934e <I2C_Master_ISR_IT+0x1a2>
        hi2c->XferSize = MAX_NBYTE_SIZE;
24009290:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24009292:	4e4b      	ldr	r6, [pc, #300]	; (240093c0 <I2C_Master_ISR_IT+0x214>)
        hi2c->XferSize = MAX_NBYTE_SIZE;
24009294:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24009296:	6843      	ldr	r3, [r0, #4]
24009298:	4033      	ands	r3, r6
2400929a:	4319      	orrs	r1, r3
2400929c:	4b49      	ldr	r3, [pc, #292]	; (240093c4 <I2C_Master_ISR_IT+0x218>)
2400929e:	430b      	orrs	r3, r1
240092a0:	6043      	str	r3, [r0, #4]
}
240092a2:	e7a4      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240092a4:	6999      	ldr	r1, [r3, #24]
240092a6:	f041 0101 	orr.w	r1, r1, #1
240092aa:	6199      	str	r1, [r3, #24]
240092ac:	e79f      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
240092ae:	6821      	ldr	r1, [r4, #0]
240092b0:	684b      	ldr	r3, [r1, #4]
240092b2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
240092b6:	d121      	bne.n	240092fc <I2C_Master_ISR_IT+0x150>
  hi2c->Mode = HAL_I2C_MODE_NONE;
240092b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
240092bc:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
240092c0:	9201      	str	r2, [sp, #4]
240092c2:	2821      	cmp	r0, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
240092c4:	f04f 0020 	mov.w	r0, #32
    hi2c->XferISR       = NULL;
240092c8:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
240092ca:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
240092ce:	d028      	beq.n	24009322 <I2C_Master_ISR_IT+0x176>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
240092d0:	2012      	movs	r0, #18
240092d2:	6320      	str	r0, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240092d4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240092d8:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240092da:	f000 0028 	and.w	r0, r0, #40	; 0x28
240092de:	2828      	cmp	r0, #40	; 0x28
    HAL_I2C_MasterRxCpltCallback(hi2c);
240092e0:	4620      	mov	r0, r4
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240092e2:	bf0c      	ite	eq
240092e4:	f06f 0644 	mvneq.w	r6, #68	; 0x44
240092e8:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240092ec:	403e      	ands	r6, r7
240092ee:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
240092f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
240092f4:	f7ff fb8e 	bl	24008a14 <HAL_I2C_MasterRxCpltCallback>
240092f8:	9a01      	ldr	r2, [sp, #4]
240092fa:	e778      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
240092fc:	2140      	movs	r1, #64	; 0x40
240092fe:	4620      	mov	r0, r4
24009300:	9201      	str	r2, [sp, #4]
24009302:	f7ff fc4f 	bl	24008ba4 <I2C_ITError>
24009306:	9a01      	ldr	r2, [sp, #4]
24009308:	e771      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400930a:	4620      	mov	r0, r4
2400930c:	4629      	mov	r1, r5
2400930e:	f7ff feb1 	bl	24009074 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
24009312:	2300      	movs	r3, #0
  return HAL_OK;
24009314:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24009316:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2400931a:	b003      	add	sp, #12
2400931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hi2c);
2400931e:	2002      	movs	r0, #2
}
24009320:	4770      	bx	lr
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
24009322:	2011      	movs	r0, #17
24009324:	6320      	str	r0, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009326:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400932a:	680e      	ldr	r6, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400932c:	f000 0028 	and.w	r0, r0, #40	; 0x28
24009330:	2828      	cmp	r0, #40	; 0x28
    HAL_I2C_MasterTxCpltCallback(hi2c);
24009332:	4620      	mov	r0, r4
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009334:	bf0c      	ite	eq
24009336:	f06f 0742 	mvneq.w	r7, #66	; 0x42
2400933a:	f06f 07f2 	mvnne.w	r7, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400933e:	403e      	ands	r6, r7
24009340:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
24009342:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
24009346:	f7fc f873 	bl	24005430 <HAL_I2C_MasterTxCpltCallback>
}
2400934a:	9a01      	ldr	r2, [sp, #4]
2400934c:	e74f      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
        hi2c->XferSize = hi2c->XferCount;
2400934e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24009350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
24009352:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24009354:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
24009358:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400935a:	b2db      	uxtb	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400935c:	d026      	beq.n	240093ac <I2C_Master_ISR_IT+0x200>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400935e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24009360:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
24009364:	4e16      	ldr	r6, [pc, #88]	; (240093c0 <I2C_Master_ISR_IT+0x214>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24009366:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
24009368:	6841      	ldr	r1, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400936a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
2400936e:	4031      	ands	r1, r6
24009370:	430b      	orrs	r3, r1
24009372:	6043      	str	r3, [r0, #4]
}
24009374:	e73b      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
  hi2c->Mode = HAL_I2C_MODE_NONE;
24009376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400937a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
2400937e:	9201      	str	r2, [sp, #4]
24009380:	2821      	cmp	r0, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
24009382:	f04f 0020 	mov.w	r0, #32
    hi2c->XferISR       = NULL;
24009386:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
24009388:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400938c:	d1a0      	bne.n	240092d0 <I2C_Master_ISR_IT+0x124>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400938e:	2011      	movs	r0, #17
24009390:	6320      	str	r0, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009392:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009396:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009398:	f000 0028 	and.w	r0, r0, #40	; 0x28
2400939c:	2828      	cmp	r0, #40	; 0x28
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400939e:	4620      	mov	r0, r4
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240093a0:	bf0c      	ite	eq
240093a2:	f06f 0642 	mvneq.w	r6, #66	; 0x42
240093a6:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
240093aa:	e7c8      	b.n	2400933e <I2C_Master_ISR_IT+0x192>
  MODIFY_REG(hi2c->Instance->CR2, \
240093ac:	6846      	ldr	r6, [r0, #4]
240093ae:	4f04      	ldr	r7, [pc, #16]	; (240093c0 <I2C_Master_ISR_IT+0x214>)
240093b0:	403e      	ands	r6, r7
240093b2:	4331      	orrs	r1, r6
240093b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
240093b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240093bc:	6043      	str	r3, [r0, #4]
}
240093be:	e716      	b.n	240091ee <I2C_Master_ISR_IT+0x42>
240093c0:	fc009c00 	.word	0xfc009c00
240093c4:	01ff0000 	.word	0x01ff0000

240093c8 <I2C_Slave_ISR_DMA>:
{
240093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
240093ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
240093ce:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
240093d0:	2b01      	cmp	r3, #1
240093d2:	f000 8085 	beq.w	240094e0 <I2C_Slave_ISR_DMA+0x118>
240093d6:	4617      	mov	r7, r2
240093d8:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
240093da:	068a      	lsls	r2, r1, #26
240093dc:	4604      	mov	r4, r0
240093de:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
240093e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
240093e4:	d501      	bpl.n	240093ea <I2C_Slave_ISR_DMA+0x22>
240093e6:	06bb      	lsls	r3, r7, #26
240093e8:	d428      	bmi.n	2400943c <I2C_Slave_ISR_DMA+0x74>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
240093ea:	06ea      	lsls	r2, r5, #27
240093ec:	d514      	bpl.n	24009418 <I2C_Slave_ISR_DMA+0x50>
240093ee:	06fb      	lsls	r3, r7, #27
240093f0:	d512      	bpl.n	24009418 <I2C_Slave_ISR_DMA+0x50>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
240093f2:	0bfb      	lsrs	r3, r7, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
240093f4:	f3c7 3180 	ubfx	r1, r7, #14, #1
240093f8:	ea43 3297 	orr.w	r2, r3, r7, lsr #14
240093fc:	f012 0201 	ands.w	r2, r2, #1
24009400:	d021      	beq.n	24009446 <I2C_Slave_ISR_DMA+0x7e>
      if (hi2c->hdmarx != NULL)
24009402:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24009404:	b338      	cbz	r0, 24009456 <I2C_Slave_ISR_DMA+0x8e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
24009406:	07df      	lsls	r7, r3, #31
24009408:	d525      	bpl.n	24009456 <I2C_Slave_ISR_DMA+0x8e>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400940a:	6800      	ldr	r0, [r0, #0]
2400940c:	6843      	ldr	r3, [r0, #4]
2400940e:	bb13      	cbnz	r3, 24009456 <I2C_Slave_ISR_DMA+0x8e>
      if (hi2c->hdmatx != NULL)
24009410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24009412:	b343      	cbz	r3, 24009466 <I2C_Slave_ISR_DMA+0x9e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
24009414:	bb19      	cbnz	r1, 2400945e <I2C_Slave_ISR_DMA+0x96>
24009416:	e026      	b.n	24009466 <I2C_Slave_ISR_DMA+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
24009418:	072a      	lsls	r2, r5, #28
2400941a:	d50a      	bpl.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
2400941c:	073b      	lsls	r3, r7, #28
2400941e:	d508      	bpl.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24009420:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24009424:	f003 0328 	and.w	r3, r3, #40	; 0x28
24009428:	2b28      	cmp	r3, #40	; 0x28
2400942a:	d05b      	beq.n	240094e4 <I2C_Slave_ISR_DMA+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400942c:	6823      	ldr	r3, [r4, #0]
2400942e:	2208      	movs	r2, #8
24009430:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
24009432:	2300      	movs	r3, #0
  return HAL_OK;
24009434:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24009436:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2400943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400943c:	f7ff fc74 	bl	24008d28 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
24009440:	06ea      	lsls	r2, r5, #27
24009442:	d5e9      	bpl.n	24009418 <I2C_Slave_ISR_DMA+0x50>
24009444:	e7d3      	b.n	240093ee <I2C_Slave_ISR_DMA+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009446:	6823      	ldr	r3, [r4, #0]
24009448:	2210      	movs	r2, #16
2400944a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
2400944c:	2300      	movs	r3, #0
  return HAL_OK;
2400944e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24009450:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
24009454:	e7f1      	b.n	2400943a <I2C_Slave_ISR_DMA+0x72>
      if (hi2c->hdmatx != NULL)
24009456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24009458:	b34b      	cbz	r3, 240094ae <I2C_Slave_ISR_DMA+0xe6>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400945a:	b341      	cbz	r1, 240094ae <I2C_Slave_ISR_DMA+0xe6>
2400945c:	2200      	movs	r2, #0
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400945e:	6819      	ldr	r1, [r3, #0]
24009460:	684b      	ldr	r3, [r1, #4]
24009462:	b103      	cbz	r3, 24009466 <I2C_Slave_ISR_DMA+0x9e>
      if (treatdmanack == 1U)
24009464:	b31a      	cbz	r2, 240094ae <I2C_Slave_ISR_DMA+0xe6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24009466:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400946a:	2b28      	cmp	r3, #40	; 0x28
2400946c:	d102      	bne.n	24009474 <I2C_Slave_ISR_DMA+0xac>
2400946e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24009472:	d03b      	beq.n	240094ec <I2C_Slave_ISR_DMA+0x124>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24009474:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24009478:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
2400947c:	b2db      	uxtb	r3, r3
2400947e:	d0e2      	beq.n	24009446 <I2C_Slave_ISR_DMA+0x7e>
24009480:	2b29      	cmp	r3, #41	; 0x29
24009482:	d1e0      	bne.n	24009446 <I2C_Slave_ISR_DMA+0x7e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009484:	6823      	ldr	r3, [r4, #0]
24009486:	2210      	movs	r2, #16
24009488:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400948a:	6823      	ldr	r3, [r4, #0]
2400948c:	699a      	ldr	r2, [r3, #24]
2400948e:	0790      	lsls	r0, r2, #30
24009490:	d502      	bpl.n	24009498 <I2C_Slave_ISR_DMA+0xd0>
    hi2c->Instance->TXDR = 0x00U;
24009492:	2200      	movs	r2, #0
24009494:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24009496:	6823      	ldr	r3, [r4, #0]
24009498:	699a      	ldr	r2, [r3, #24]
2400949a:	07d1      	lsls	r1, r2, #31
2400949c:	d403      	bmi.n	240094a6 <I2C_Slave_ISR_DMA+0xde>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400949e:	699a      	ldr	r2, [r3, #24]
240094a0:	f042 0201 	orr.w	r2, r2, #1
240094a4:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
240094a6:	4620      	mov	r0, r4
240094a8:	f7ff fab8 	bl	24008a1c <I2C_ITSlaveSeqCplt>
240094ac:	e7c1      	b.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240094ae:	6823      	ldr	r3, [r4, #0]
240094b0:	2210      	movs	r2, #16
240094b2:	61da      	str	r2, [r3, #28]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
240094b4:	f036 7280 	bics.w	r2, r6, #16777216	; 0x1000000
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240094b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
240094ba:	f043 0304 	orr.w	r3, r3, #4
240094be:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
240094c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240094c4:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
240094c6:	d1b4      	bne.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
240094c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
240094cc:	2b21      	cmp	r3, #33	; 0x21
240094ce:	d001      	beq.n	240094d4 <I2C_Slave_ISR_DMA+0x10c>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
240094d0:	2b22      	cmp	r3, #34	; 0x22
240094d2:	d100      	bne.n	240094d6 <I2C_Slave_ISR_DMA+0x10e>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
240094d4:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
240094d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
240094d8:	4620      	mov	r0, r4
240094da:	f7ff fb63 	bl	24008ba4 <I2C_ITError>
240094de:	e7a8      	b.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
  __HAL_LOCK(hi2c);
240094e0:	2002      	movs	r0, #2
}
240094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240094e4:	4620      	mov	r0, r4
240094e6:	f7ff fb03 	bl	24008af0 <I2C_ITAddrCplt.part.0>
240094ea:	e7a2      	b.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
  hi2c->PreviousState = I2C_STATE_NONE;
240094ec:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240094ee:	4918      	ldr	r1, [pc, #96]	; (24009550 <I2C_Slave_ISR_DMA+0x188>)
  hi2c->State = HAL_I2C_STATE_READY;
240094f0:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
240094f2:	076d      	lsls	r5, r5, #29
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240094f4:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->XferISR = NULL;
240094f6:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->PreviousState = I2C_STATE_NONE;
240094f8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
240094fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
240094fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24009502:	d512      	bpl.n	2400952a <I2C_Slave_ISR_DMA+0x162>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24009504:	6822      	ldr	r2, [r4, #0]
24009506:	6a63      	ldr	r3, [r4, #36]	; 0x24
24009508:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400950a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
2400950c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400950e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24009510:	3301      	adds	r3, #1
24009512:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24009514:	b14a      	cbz	r2, 2400952a <I2C_Slave_ISR_DMA+0x162>
      hi2c->XferCount--;
24009516:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24009518:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400951a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
2400951c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400951e:	b29b      	uxth	r3, r3
24009520:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24009522:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009524:	f043 0304 	orr.w	r3, r3, #4
24009528:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400952a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400952c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400952e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24009532:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009534:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24009538:	6813      	ldr	r3, [r2, #0]
2400953a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400953e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009540:	6823      	ldr	r3, [r4, #0]
24009542:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24009544:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24009546:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
2400954a:	f7ff fb03 	bl	24008b54 <HAL_I2C_ListenCpltCallback>
}
2400954e:	e770      	b.n	24009432 <I2C_Slave_ISR_DMA+0x6a>
24009550:	ffff0000 	.word	0xffff0000

24009554 <I2C_Master_ISR_DMA>:
{
24009554:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
24009556:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2400955a:	2b01      	cmp	r3, #1
2400955c:	f000 8088 	beq.w	24009670 <I2C_Master_ISR_DMA+0x11c>
24009560:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
24009562:	06cd      	lsls	r5, r1, #27
24009564:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
24009566:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400956a:	d527      	bpl.n	240095bc <I2C_Master_ISR_DMA+0x68>
2400956c:	06d0      	lsls	r0, r2, #27
2400956e:	d525      	bpl.n	240095bc <I2C_Master_ISR_DMA+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009570:	6823      	ldr	r3, [r4, #0]
24009572:	2210      	movs	r2, #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24009574:	4965      	ldr	r1, [pc, #404]	; (2400970c <I2C_Master_ISR_DMA+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24009576:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24009578:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400957a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400957c:	f043 0304 	orr.w	r3, r3, #4
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24009580:	428a      	cmp	r2, r1
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24009582:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24009584:	d072      	beq.n	2400966c <I2C_Master_ISR_DMA+0x118>
24009586:	4b62      	ldr	r3, [pc, #392]	; (24009710 <I2C_Master_ISR_DMA+0x1bc>)
24009588:	429a      	cmp	r2, r3
2400958a:	d06f      	beq.n	2400966c <I2C_Master_ISR_DMA+0x118>
      tmpisr |= I2C_IT_STOPI;
2400958c:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400958e:	6822      	ldr	r2, [r4, #0]
24009590:	6813      	ldr	r3, [r2, #0]
24009592:	430b      	orrs	r3, r1
24009594:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24009596:	6823      	ldr	r3, [r4, #0]
24009598:	699a      	ldr	r2, [r3, #24]
2400959a:	0792      	lsls	r2, r2, #30
2400959c:	d502      	bpl.n	240095a4 <I2C_Master_ISR_DMA+0x50>
    hi2c->Instance->TXDR = 0x00U;
2400959e:	2200      	movs	r2, #0
240095a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240095a2:	6823      	ldr	r3, [r4, #0]
240095a4:	699a      	ldr	r2, [r3, #24]
240095a6:	07d5      	lsls	r5, r2, #31
240095a8:	d403      	bmi.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240095aa:	699a      	ldr	r2, [r3, #24]
240095ac:	f042 0201 	orr.w	r2, r2, #1
240095b0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
240095b2:	2300      	movs	r3, #0
  return HAL_OK;
240095b4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
240095b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
240095ba:	bd38      	pop	{r3, r4, r5, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
240095bc:	0608      	lsls	r0, r1, #24
240095be:	d537      	bpl.n	24009630 <I2C_Master_ISR_DMA+0xdc>
240095c0:	0653      	lsls	r3, r2, #25
240095c2:	d54b      	bpl.n	2400965c <I2C_Master_ISR_DMA+0x108>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
240095c4:	6822      	ldr	r2, [r4, #0]
240095c6:	6813      	ldr	r3, [r2, #0]
240095c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
240095cc:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
240095ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240095d0:	b29b      	uxth	r3, r3
240095d2:	2b00      	cmp	r3, #0
240095d4:	d04e      	beq.n	24009674 <I2C_Master_ISR_DMA+0x120>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
240095d6:	6821      	ldr	r1, [r4, #0]
240095d8:	6848      	ldr	r0, [r1, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
240095da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
240095dc:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
240095e0:	b292      	uxth	r2, r2
240095e2:	2aff      	cmp	r2, #255	; 0xff
240095e4:	d86f      	bhi.n	240096c6 <I2C_Master_ISR_DMA+0x172>
        hi2c->XferSize = hi2c->XferCount;
240095e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
240095e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
240095ea:	b292      	uxth	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
240095ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
240095f0:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240095f2:	b2d2      	uxtb	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
240095f4:	f000 8086 	beq.w	24009704 <I2C_Master_ISR_DMA+0x1b0>
          xfermode = hi2c->XferOptions;
240095f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240095fa:	0412      	lsls	r2, r2, #16
240095fc:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
240095fe:	4d45      	ldr	r5, [pc, #276]	; (24009714 <I2C_Master_ISR_DMA+0x1c0>)
24009600:	684a      	ldr	r2, [r1, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24009602:	4303      	orrs	r3, r0
  MODIFY_REG(hi2c->Instance->CR2, \
24009604:	402a      	ands	r2, r5
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24009606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
2400960a:	4313      	orrs	r3, r2
2400960c:	604b      	str	r3, [r1, #4]
      hi2c->XferCount -= hi2c->XferSize;
2400960e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24009610:	8d22      	ldrh	r2, [r4, #40]	; 0x28
24009612:	1a9b      	subs	r3, r3, r2
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
24009614:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount -= hi2c->XferSize;
24009616:	b29b      	uxth	r3, r3
24009618:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400961a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400961e:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
24009620:	6813      	ldr	r3, [r2, #0]
24009622:	bf0c      	ite	eq
24009624:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
24009628:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
2400962c:	6013      	str	r3, [r2, #0]
2400962e:	e7c0      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
24009630:	064d      	lsls	r5, r1, #25
24009632:	d513      	bpl.n	2400965c <I2C_Master_ISR_DMA+0x108>
24009634:	0650      	lsls	r0, r2, #25
24009636:	d511      	bpl.n	2400965c <I2C_Master_ISR_DMA+0x108>
    if (hi2c->XferCount == 0U)
24009638:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400963a:	b29b      	uxth	r3, r3
2400963c:	2b00      	cmp	r3, #0
2400963e:	d13d      	bne.n	240096bc <I2C_Master_ISR_DMA+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
24009640:	6822      	ldr	r2, [r4, #0]
24009642:	6853      	ldr	r3, [r2, #4]
24009644:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
24009648:	d1b3      	bne.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400964a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400964c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
24009650:	d115      	bne.n	2400967e <I2C_Master_ISR_DMA+0x12a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
24009652:	6853      	ldr	r3, [r2, #4]
24009654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24009658:	6053      	str	r3, [r2, #4]
2400965a:	e7aa      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400965c:	068b      	lsls	r3, r1, #26
2400965e:	d5a8      	bpl.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
24009660:	0692      	lsls	r2, r2, #26
24009662:	d5a6      	bpl.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
    I2C_ITMasterCplt(hi2c, ITFlags);
24009664:	4620      	mov	r0, r4
24009666:	f7ff fd05 	bl	24009074 <I2C_ITMasterCplt>
2400966a:	e7a2      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
2400966c:	2160      	movs	r1, #96	; 0x60
2400966e:	e78e      	b.n	2400958e <I2C_Master_ISR_DMA+0x3a>
  __HAL_LOCK(hi2c);
24009670:	2002      	movs	r0, #2
}
24009672:	bd38      	pop	{r3, r4, r5, pc}
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
24009674:	6822      	ldr	r2, [r4, #0]
24009676:	6853      	ldr	r3, [r2, #4]
24009678:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
2400967c:	d11e      	bne.n	240096bc <I2C_Master_ISR_DMA+0x168>
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400967e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
24009682:	2020      	movs	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
24009684:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
24009688:	2921      	cmp	r1, #33	; 0x21
2400968a:	d023      	beq.n	240096d4 <I2C_Master_ISR_DMA+0x180>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400968c:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
2400968e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
24009692:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
24009694:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24009696:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400969a:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400969c:	f000 0028 	and.w	r0, r0, #40	; 0x28
240096a0:	2828      	cmp	r0, #40	; 0x28
240096a2:	bf0c      	ite	eq
240096a4:	f06f 0044 	mvneq.w	r0, #68	; 0x44
240096a8:	f06f 00f4 	mvnne.w	r0, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240096ac:	4001      	ands	r1, r0
    HAL_I2C_MasterRxCpltCallback(hi2c);
240096ae:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240096b0:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
240096b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
240096b6:	f7ff f9ad 	bl	24008a14 <HAL_I2C_MasterRxCpltCallback>
240096ba:	e77a      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
240096bc:	2140      	movs	r1, #64	; 0x40
240096be:	4620      	mov	r0, r4
240096c0:	f7ff fa70 	bl	24008ba4 <I2C_ITError>
240096c4:	e775      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
        hi2c->XferSize = MAX_NBYTE_SIZE;
240096c6:	23ff      	movs	r3, #255	; 0xff
240096c8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
240096cc:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
240096ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240096d2:	e793      	b.n	240095fc <I2C_Master_ISR_DMA+0xa8>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
240096d4:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
240096d6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
240096da:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
240096dc:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240096de:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240096e2:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240096e4:	f000 0028 	and.w	r0, r0, #40	; 0x28
240096e8:	2828      	cmp	r0, #40	; 0x28
240096ea:	bf0c      	ite	eq
240096ec:	f06f 0042 	mvneq.w	r0, #66	; 0x42
240096f0:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240096f4:	4001      	ands	r1, r0
    HAL_I2C_MasterTxCpltCallback(hi2c);
240096f6:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240096f8:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
240096fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
240096fe:	f7fb fe97 	bl	24005430 <HAL_I2C_MasterTxCpltCallback>
}
24009702:	e756      	b.n	240095b2 <I2C_Master_ISR_DMA+0x5e>
          xfermode = I2C_AUTOEND_MODE;
24009704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24009708:	0412      	lsls	r2, r2, #16
2400970a:	e777      	b.n	240095fc <I2C_Master_ISR_DMA+0xa8>
2400970c:	240093c9 	.word	0x240093c9
24009710:	24009555 	.word	0x24009555
24009714:	fc009c00 	.word	0xfc009c00

24009718 <I2C_DMAError>:
{
24009718:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400971a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
2400971c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
2400971e:	b125      	cbz	r5, 2400972a <I2C_DMAError+0x12>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
24009720:	682a      	ldr	r2, [r5, #0]
24009722:	6855      	ldr	r5, [r2, #4]
24009724:	fab5 f585 	clz	r5, r5
24009728:	096d      	lsrs	r5, r5, #5
  if (hi2c->hdmarx != NULL)
2400972a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400972c:	b18b      	cbz	r3, 24009752 <I2C_DMAError+0x3a>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400972e:	681a      	ldr	r2, [r3, #0]
24009730:	6853      	ldr	r3, [r2, #4]
24009732:	b973      	cbnz	r3, 24009752 <I2C_DMAError+0x3a>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
24009734:	f7fe fb84 	bl	24007e40 <HAL_DMA_GetError>
24009738:	2802      	cmp	r0, #2
2400973a:	d010      	beq.n	2400975e <I2C_DMAError+0x46>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400973c:	6822      	ldr	r2, [r4, #0]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400973e:	4620      	mov	r0, r4
24009740:	2110      	movs	r1, #16
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
24009742:	6853      	ldr	r3, [r2, #4]
24009744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24009748:	6053      	str	r3, [r2, #4]
}
2400974a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400974e:	f7ff ba29 	b.w	24008ba4 <I2C_ITError>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
24009752:	f7fe fb75 	bl	24007e40 <HAL_DMA_GetError>
24009756:	2802      	cmp	r0, #2
24009758:	d001      	beq.n	2400975e <I2C_DMAError+0x46>
2400975a:	2d00      	cmp	r5, #0
2400975c:	d1ee      	bne.n	2400973c <I2C_DMAError+0x24>
}
2400975e:	bd38      	pop	{r3, r4, r5, pc}

24009760 <I2C_DMAMasterTransmitCplt>:
{
24009760:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24009762:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24009764:	6822      	ldr	r2, [r4, #0]
24009766:	6813      	ldr	r3, [r2, #0]
24009768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400976c:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
2400976e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24009770:	b29b      	uxth	r3, r3
24009772:	b963      	cbnz	r3, 2400978e <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
24009774:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009776:	4a1f      	ldr	r2, [pc, #124]	; (240097f4 <I2C_DMAMasterTransmitCplt+0x94>)
24009778:	4293      	cmp	r3, r2
2400977a:	d02c      	beq.n	240097d6 <I2C_DMAMasterTransmitCplt+0x76>
2400977c:	4a1e      	ldr	r2, [pc, #120]	; (240097f8 <I2C_DMAMasterTransmitCplt+0x98>)
2400977e:	4293      	cmp	r3, r2
24009780:	d029      	beq.n	240097d6 <I2C_DMAMasterTransmitCplt+0x76>
      tmpisr |= I2C_IT_STOPI;
24009782:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24009784:	6822      	ldr	r2, [r4, #0]
24009786:	6813      	ldr	r3, [r2, #0]
24009788:	430b      	orrs	r3, r1
2400978a:	6013      	str	r3, [r2, #0]
}
2400978c:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400978e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
24009790:	6a61      	ldr	r1, [r4, #36]	; 0x24
24009792:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24009794:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
24009796:	4411      	add	r1, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24009798:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
2400979a:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400979c:	d818      	bhi.n	240097d0 <I2C_DMAMasterTransmitCplt+0x70>
      hi2c->XferSize = hi2c->XferCount;
2400979e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
240097a0:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
240097a2:	4603      	mov	r3, r0
240097a4:	6822      	ldr	r2, [r4, #0]
240097a6:	8520      	strh	r0, [r4, #40]	; 0x28
240097a8:	3228      	adds	r2, #40	; 0x28
240097aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
240097ac:	f7fd f8ce 	bl	2400694c <HAL_DMA_Start_IT>
240097b0:	b9c8      	cbnz	r0, 240097e6 <I2C_DMAMasterTransmitCplt+0x86>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
240097b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
240097b4:	4a10      	ldr	r2, [pc, #64]	; (240097f8 <I2C_DMAMasterTransmitCplt+0x98>)
240097b6:	4293      	cmp	r3, r2
240097b8:	d00f      	beq.n	240097da <I2C_DMAMasterTransmitCplt+0x7a>
240097ba:	4a0e      	ldr	r2, [pc, #56]	; (240097f4 <I2C_DMAMasterTransmitCplt+0x94>)
240097bc:	1a9b      	subs	r3, r3, r2
240097be:	fab3 f383 	clz	r3, r3
240097c2:	095b      	lsrs	r3, r3, #5
240097c4:	b94b      	cbnz	r3, 240097da <I2C_DMAMasterTransmitCplt+0x7a>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240097c6:	6821      	ldr	r1, [r4, #0]
240097c8:	680a      	ldr	r2, [r1, #0]
240097ca:	4313      	orrs	r3, r2
240097cc:	600b      	str	r3, [r1, #0]
}
240097ce:	bd10      	pop	{r4, pc}
240097d0:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
240097d2:	4618      	mov	r0, r3
240097d4:	e7e6      	b.n	240097a4 <I2C_DMAMasterTransmitCplt+0x44>
240097d6:	2160      	movs	r1, #96	; 0x60
240097d8:	e7d4      	b.n	24009784 <I2C_DMAMasterTransmitCplt+0x24>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240097da:	6821      	ldr	r1, [r4, #0]
      tmpisr |= I2C_IT_TCI;
240097dc:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240097de:	680a      	ldr	r2, [r1, #0]
240097e0:	4313      	orrs	r3, r2
240097e2:	600b      	str	r3, [r1, #0]
240097e4:	e7f3      	b.n	240097ce <I2C_DMAMasterTransmitCplt+0x6e>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
240097e6:	4620      	mov	r0, r4
240097e8:	2110      	movs	r1, #16
}
240097ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
240097ee:	f7ff b9d9 	b.w	24008ba4 <I2C_ITError>
240097f2:	bf00      	nop
240097f4:	240093c9 	.word	0x240093c9
240097f8:	24009555 	.word	0x24009555

240097fc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
240097fc:	6803      	ldr	r3, [r0, #0]
{
240097fe:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24009800:	699a      	ldr	r2, [r3, #24]
24009802:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24009804:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24009806:	f412 7f80 	tst.w	r2, #256	; 0x100
2400980a:	d032      	beq.n	24009872 <HAL_I2C_ER_IRQHandler+0x76>
2400980c:	f011 0f80 	tst.w	r1, #128	; 0x80
24009810:	d021      	beq.n	24009856 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24009812:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24009814:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24009818:	f041 0101 	orr.w	r1, r1, #1
2400981c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400981e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24009820:	0553      	lsls	r3, r2, #21
24009822:	d507      	bpl.n	24009834 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24009824:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24009826:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24009828:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400982c:	f041 0108 	orr.w	r1, r1, #8
24009830:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24009832:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24009834:	0592      	lsls	r2, r2, #22
24009836:	d507      	bpl.n	24009848 <HAL_I2C_ER_IRQHandler+0x4c>
24009838:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400983a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400983c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24009840:	f043 0302 	orr.w	r3, r3, #2
24009844:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24009846:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24009848:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400984a:	f011 0f0b 	tst.w	r1, #11
2400984e:	d10c      	bne.n	2400986a <HAL_I2C_ER_IRQHandler+0x6e>
}
24009850:	f85d 4b04 	ldr.w	r4, [sp], #4
24009854:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24009856:	0553      	lsls	r3, r2, #21
24009858:	d4f6      	bmi.n	24009848 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400985a:	0593      	lsls	r3, r2, #22
2400985c:	d5f4      	bpl.n	24009848 <HAL_I2C_ER_IRQHandler+0x4c>
2400985e:	060a      	lsls	r2, r1, #24
24009860:	d4eb      	bmi.n	2400983a <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
24009862:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24009864:	f011 0f0b 	tst.w	r1, #11
24009868:	d0f2      	beq.n	24009850 <HAL_I2C_ER_IRQHandler+0x54>
}
2400986a:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
2400986e:	f7ff b999 	b.w	24008ba4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24009872:	f412 6f80 	tst.w	r2, #1024	; 0x400
24009876:	d0f0      	beq.n	2400985a <HAL_I2C_ER_IRQHandler+0x5e>
24009878:	0609      	lsls	r1, r1, #24
2400987a:	d5e5      	bpl.n	24009848 <HAL_I2C_ER_IRQHandler+0x4c>
2400987c:	e7d3      	b.n	24009826 <HAL_I2C_ER_IRQHandler+0x2a>
2400987e:	bf00      	nop

24009880 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24009880:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24009884:	2a20      	cmp	r2, #32
24009886:	d129      	bne.n	240098dc <HAL_I2CEx_ConfigAnalogFilter+0x5c>
24009888:	4603      	mov	r3, r0
{
2400988a:	b500      	push	{lr}
2400988c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24009890:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24009894:	2a01      	cmp	r2, #1
24009896:	d023      	beq.n	240098e0 <HAL_I2CEx_ConfigAnalogFilter+0x60>
24009898:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400989a:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400989c:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240098a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240098a4:	2224      	movs	r2, #36	; 0x24
240098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240098aa:	6802      	ldr	r2, [r0, #0]
240098ac:	f022 0201 	bic.w	r2, r2, #1
240098b0:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240098b2:	6818      	ldr	r0, [r3, #0]
240098b4:	6802      	ldr	r2, [r0, #0]
240098b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
240098ba:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
240098bc:	6818      	ldr	r0, [r3, #0]
240098be:	6802      	ldr	r2, [r0, #0]
240098c0:	4311      	orrs	r1, r2
240098c2:	6001      	str	r1, [r0, #0]

    return HAL_OK;
240098c4:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
240098c6:	6819      	ldr	r1, [r3, #0]
240098c8:	680a      	ldr	r2, [r1, #0]
240098ca:	f042 0201 	orr.w	r2, r2, #1
240098ce:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
240098d0:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240098d4:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
240098d8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
240098dc:	2002      	movs	r0, #2
}
240098de:	4770      	bx	lr
    return HAL_BUSY;
240098e0:	2002      	movs	r0, #2
}
240098e2:	f85d fb04 	ldr.w	pc, [sp], #4
240098e6:	bf00      	nop

240098e8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240098e8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240098ec:	2a20      	cmp	r2, #32
240098ee:	d127      	bne.n	24009940 <HAL_I2CEx_ConfigDigitalFilter+0x58>
240098f0:	4603      	mov	r3, r0
{
240098f2:	b500      	push	{lr}
240098f4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240098f8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240098fc:	2a01      	cmp	r2, #1
240098fe:	d021      	beq.n	24009944 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
24009900:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24009902:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24009904:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
2400990c:	2224      	movs	r2, #36	; 0x24
2400990e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24009912:	6802      	ldr	r2, [r0, #0]
24009914:	f022 0201 	bic.w	r2, r2, #1
24009918:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
2400991a:	6818      	ldr	r0, [r3, #0]
2400991c:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
2400991e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
24009922:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
24009926:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24009928:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
2400992a:	6819      	ldr	r1, [r3, #0]
2400992c:	680a      	ldr	r2, [r1, #0]
2400992e:	f042 0201 	orr.w	r2, r2, #1
24009932:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24009934:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24009938:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
2400993c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24009940:	2002      	movs	r0, #2
}
24009942:	4770      	bx	lr
    return HAL_BUSY;
24009944:	2002      	movs	r0, #2
}
24009946:	f85d fb04 	ldr.w	pc, [sp], #4
2400994a:	bf00      	nop

2400994c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
2400994c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2400994e:	4c10      	ldr	r4, [pc, #64]	; (24009990 <HAL_PWREx_ConfigSupply+0x44>)
24009950:	68e3      	ldr	r3, [r4, #12]
24009952:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24009956:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24009958:	d105      	bne.n	24009966 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2400995a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2400995e:	1a18      	subs	r0, r3, r0
24009960:	bf18      	it	ne
24009962:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24009964:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24009966:	f023 0307 	bic.w	r3, r3, #7
2400996a:	4318      	orrs	r0, r3
2400996c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
2400996e:	f7fc fba9 	bl	240060c4 <HAL_GetTick>
24009972:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24009974:	e005      	b.n	24009982 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24009976:	f7fc fba5 	bl	240060c4 <HAL_GetTick>
2400997a:	1b40      	subs	r0, r0, r5
2400997c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24009980:	d804      	bhi.n	2400998c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24009982:	6863      	ldr	r3, [r4, #4]
24009984:	049b      	lsls	r3, r3, #18
24009986:	d5f6      	bpl.n	24009976 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24009988:	2000      	movs	r0, #0
}
2400998a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
2400998c:	2001      	movs	r0, #1
}
2400998e:	bd38      	pop	{r3, r4, r5, pc}
24009990:	58024800 	.word	0x58024800

24009994 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24009994:	b570      	push	{r4, r5, r6, lr}
24009996:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24009998:	f7fc fb94 	bl	240060c4 <HAL_GetTick>

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
2400999c:	2c00      	cmp	r4, #0
2400999e:	d051      	beq.n	24009a44 <HAL_QSPI_Init+0xb0>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
240099a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240099a4:	4606      	mov	r6, r0
240099a6:	2b00      	cmp	r3, #0
240099a8:	d045      	beq.n	24009a36 <HAL_QSPI_Init+0xa2>
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
240099aa:	6821      	ldr	r1, [r4, #0]
240099ac:	68a2      	ldr	r2, [r4, #8]
240099ae:	680b      	ldr	r3, [r1, #0]
240099b0:	3a01      	subs	r2, #1
240099b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
240099b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
240099ba:	600b      	str	r3, [r1, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
240099bc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240099be:	1c68      	adds	r0, r5, #1
240099c0:	6822      	ldr	r2, [r4, #0]
240099c2:	d126      	bne.n	24009a12 <HAL_QSPI_Init+0x7e>
240099c4:	6893      	ldr	r3, [r2, #8]
240099c6:	0699      	lsls	r1, r3, #26
240099c8:	d4fc      	bmi.n	240099c4 <HAL_QSPI_Init+0x30>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
240099ca:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
240099ce:	68e3      	ldr	r3, [r4, #12]
240099d0:	6810      	ldr	r0, [r2, #0]
240099d2:	432b      	orrs	r3, r5
240099d4:	430b      	orrs	r3, r1
240099d6:	6861      	ldr	r1, [r4, #4]
240099d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
240099dc:	491a      	ldr	r1, [pc, #104]	; (24009a48 <HAL_QSPI_Init+0xb4>)
240099de:	4001      	ands	r1, r0
240099e0:	430b      	orrs	r3, r1
240099e2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
240099e4:	6821      	ldr	r1, [r4, #0]
240099e6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
240099ea:	6848      	ldr	r0, [r1, #4]
240099ec:	4313      	orrs	r3, r2
240099ee:	6922      	ldr	r2, [r4, #16]
240099f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
240099f4:	4a15      	ldr	r2, [pc, #84]	; (24009a4c <HAL_QSPI_Init+0xb8>)
240099f6:	4002      	ands	r2, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240099f8:	2000      	movs	r0, #0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
240099fa:	4313      	orrs	r3, r2
240099fc:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
240099fe:	6822      	ldr	r2, [r4, #0]
24009a00:	6813      	ldr	r3, [r2, #0]
24009a02:	f043 0301 	orr.w	r3, r3, #1
24009a06:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
24009a08:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24009a0a:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
24009a0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
24009a10:	bd70      	pop	{r4, r5, r6, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24009a12:	6893      	ldr	r3, [r2, #8]
24009a14:	069b      	lsls	r3, r3, #26
24009a16:	d5d8      	bpl.n	240099ca <HAL_QSPI_Init+0x36>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24009a18:	f7fc fb54 	bl	240060c4 <HAL_GetTick>
24009a1c:	1b80      	subs	r0, r0, r6
24009a1e:	4285      	cmp	r5, r0
24009a20:	d301      	bcc.n	24009a26 <HAL_QSPI_Init+0x92>
24009a22:	2d00      	cmp	r5, #0
24009a24:	d1cb      	bne.n	240099be <HAL_QSPI_Init+0x2a>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24009a26:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24009a28:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24009a2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24009a2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009a30:	4303      	orrs	r3, r0
24009a32:	6463      	str	r3, [r4, #68]	; 0x44
}
24009a34:	bd70      	pop	{r4, r5, r6, pc}
    HAL_QSPI_MspInit(hqspi);
24009a36:	4620      	mov	r0, r4
24009a38:	f7fb fdd4 	bl	240055e4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
24009a3c:	f241 3388 	movw	r3, #5000	; 0x1388
24009a40:	64a3      	str	r3, [r4, #72]	; 0x48
}
24009a42:	e7b2      	b.n	240099aa <HAL_QSPI_Init+0x16>
    return HAL_ERROR;
24009a44:	2001      	movs	r0, #1
}
24009a46:	bd70      	pop	{r4, r5, r6, pc}
24009a48:	00ffff2f 	.word	0x00ffff2f
24009a4c:	ffe0f8fe 	.word	0xffe0f8fe

24009a50 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009a50:	4b3b      	ldr	r3, [pc, #236]	; (24009b40 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
24009a52:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24009a56:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24009a58:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24009a5a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24009a60:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24009a64:	d038      	beq.n	24009ad8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009a66:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24009a6a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009a6e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009a72:	fb05 f101 	mul.w	r1, r5, r1
24009a76:	2a01      	cmp	r2, #1
24009a78:	ee07 1a90 	vmov	s15, r1
24009a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24009a80:	d002      	beq.n	24009a88 <HAL_RCC_GetSysClockFreq.part.0+0x38>
24009a82:	2a02      	cmp	r2, #2
24009a84:	d04e      	beq.n	24009b24 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
24009a86:	b34a      	cbz	r2, 24009adc <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009a88:	ee07 0a90 	vmov	s15, r0
24009a8c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 24009b44 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
24009a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009a96:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24009a9a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24009b48 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009aa2:	ee06 3a90 	vmov	s13, r3
24009aa6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24009aaa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009aae:	ee76 6a85 	vadd.f32	s13, s13, s10
24009ab2:	eee7 6a25 	vfma.f32	s13, s14, s11
24009ab6:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24009aba:	4b21      	ldr	r3, [pc, #132]	; (24009b40 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
24009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009abe:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009ac2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24009ac4:	ee07 3a90 	vmov	s15, r3
24009ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24009acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009ad4:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24009ad8:	bc30      	pop	{r4, r5}
24009ada:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009adc:	681a      	ldr	r2, [r3, #0]
24009ade:	0692      	lsls	r2, r2, #26
24009ae0:	d527      	bpl.n	24009b32 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009ae2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009ae4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009ae8:	4a18      	ldr	r2, [pc, #96]	; (24009b4c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009aea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009af0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009af8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24009b48 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24009afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009b00:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009b02:	ee06 3a90 	vmov	s13, r3
24009b06:	ee05 2a90 	vmov	s11, r2
24009b0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009b0e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009b12:	ee76 6a86 	vadd.f32	s13, s13, s12
24009b16:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24009b1a:	eee7 6a05 	vfma.f32	s13, s14, s10
24009b1e:	ee66 6a26 	vmul.f32	s13, s12, s13
24009b22:	e7ca      	b.n	24009aba <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009b24:	ee07 0a90 	vmov	s15, r0
24009b28:	eddf 6a09 	vldr	s13, [pc, #36]	; 24009b50 <HAL_RCC_GetSysClockFreq.part.0+0x100>
24009b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009b30:	e7b0      	b.n	24009a94 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009b32:	ee07 0a90 	vmov	s15, r0
24009b36:	eddf 6a07 	vldr	s13, [pc, #28]	; 24009b54 <HAL_RCC_GetSysClockFreq.part.0+0x104>
24009b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009b3e:	e7a9      	b.n	24009a94 <HAL_RCC_GetSysClockFreq.part.0+0x44>
24009b40:	58024400 	.word	0x58024400
24009b44:	4a742400 	.word	0x4a742400
24009b48:	39000000 	.word	0x39000000
24009b4c:	03d09000 	.word	0x03d09000
24009b50:	4b742400 	.word	0x4b742400
24009b54:	4c742400 	.word	0x4c742400

24009b58 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24009b58:	2800      	cmp	r0, #0
24009b5a:	f000 81ef 	beq.w	24009f3c <HAL_RCC_OscConfig+0x3e4>
{
24009b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24009b60:	6803      	ldr	r3, [r0, #0]
24009b62:	4604      	mov	r4, r0
24009b64:	07d9      	lsls	r1, r3, #31
24009b66:	d52e      	bpl.n	24009bc6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24009b68:	49a4      	ldr	r1, [pc, #656]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009b6a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24009b6c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24009b6e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24009b72:	2a10      	cmp	r2, #16
24009b74:	f000 8107 	beq.w	24009d86 <HAL_RCC_OscConfig+0x22e>
24009b78:	2a18      	cmp	r2, #24
24009b7a:	f000 80ff 	beq.w	24009d7c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24009b7e:	6863      	ldr	r3, [r4, #4]
24009b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009b84:	f000 812a 	beq.w	24009ddc <HAL_RCC_OscConfig+0x284>
24009b88:	2b00      	cmp	r3, #0
24009b8a:	f040 8188 	bne.w	24009e9e <HAL_RCC_OscConfig+0x346>
24009b8e:	4b9b      	ldr	r3, [pc, #620]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009b90:	681a      	ldr	r2, [r3, #0]
24009b92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24009b96:	601a      	str	r2, [r3, #0]
24009b98:	681a      	ldr	r2, [r3, #0]
24009b9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24009b9e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24009ba0:	6863      	ldr	r3, [r4, #4]
24009ba2:	2b00      	cmp	r3, #0
24009ba4:	f000 815c 	beq.w	24009e60 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
24009ba8:	f7fc fa8c 	bl	240060c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24009bac:	4e93      	ldr	r6, [pc, #588]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
24009bae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24009bb0:	e005      	b.n	24009bbe <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24009bb2:	f7fc fa87 	bl	240060c4 <HAL_GetTick>
24009bb6:	1b40      	subs	r0, r0, r5
24009bb8:	2864      	cmp	r0, #100	; 0x64
24009bba:	f200 814f 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24009bbe:	6833      	ldr	r3, [r6, #0]
24009bc0:	039b      	lsls	r3, r3, #14
24009bc2:	d5f6      	bpl.n	24009bb2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24009bc4:	6823      	ldr	r3, [r4, #0]
24009bc6:	079d      	lsls	r5, r3, #30
24009bc8:	f100 808a 	bmi.w	24009ce0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24009bcc:	06d9      	lsls	r1, r3, #27
24009bce:	d533      	bpl.n	24009c38 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24009bd0:	4a8a      	ldr	r2, [pc, #552]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009bd2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24009bd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24009bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24009bda:	2b08      	cmp	r3, #8
24009bdc:	f000 80e3 	beq.w	24009da6 <HAL_RCC_OscConfig+0x24e>
24009be0:	2b18      	cmp	r3, #24
24009be2:	f000 80db 	beq.w	24009d9c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24009be6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24009be8:	4d84      	ldr	r5, [pc, #528]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24009bea:	2b00      	cmp	r3, #0
24009bec:	f000 8176 	beq.w	24009edc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
24009bf0:	682b      	ldr	r3, [r5, #0]
24009bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24009bf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009bf8:	f7fc fa64 	bl	240060c4 <HAL_GetTick>
24009bfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24009bfe:	e005      	b.n	24009c0c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24009c00:	f7fc fa60 	bl	240060c4 <HAL_GetTick>
24009c04:	1b80      	subs	r0, r0, r6
24009c06:	2802      	cmp	r0, #2
24009c08:	f200 8128 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24009c0c:	682b      	ldr	r3, [r5, #0]
24009c0e:	05db      	lsls	r3, r3, #23
24009c10:	d5f6      	bpl.n	24009c00 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24009c12:	f7fc fa6f 	bl	240060f4 <HAL_GetREVID>
24009c16:	f241 0303 	movw	r3, #4099	; 0x1003
24009c1a:	4298      	cmp	r0, r3
24009c1c:	f200 8266 	bhi.w	2400a0ec <HAL_RCC_OscConfig+0x594>
24009c20:	6a22      	ldr	r2, [r4, #32]
24009c22:	686b      	ldr	r3, [r5, #4]
24009c24:	2a20      	cmp	r2, #32
24009c26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24009c2a:	bf0c      	ite	eq
24009c2c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24009c30:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24009c34:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24009c36:	6823      	ldr	r3, [r4, #0]
24009c38:	071d      	lsls	r5, r3, #28
24009c3a:	d516      	bpl.n	24009c6a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24009c3c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
24009c3e:	4d6f      	ldr	r5, [pc, #444]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24009c40:	2b00      	cmp	r3, #0
24009c42:	f000 811b 	beq.w	24009e7c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
24009c46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24009c48:	f043 0301 	orr.w	r3, r3, #1
24009c4c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24009c4e:	f7fc fa39 	bl	240060c4 <HAL_GetTick>
24009c52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24009c54:	e005      	b.n	24009c62 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24009c56:	f7fc fa35 	bl	240060c4 <HAL_GetTick>
24009c5a:	1b80      	subs	r0, r0, r6
24009c5c:	2802      	cmp	r0, #2
24009c5e:	f200 80fd 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24009c62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24009c64:	0798      	lsls	r0, r3, #30
24009c66:	d5f6      	bpl.n	24009c56 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24009c68:	6823      	ldr	r3, [r4, #0]
24009c6a:	069a      	lsls	r2, r3, #26
24009c6c:	d516      	bpl.n	24009c9c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24009c6e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24009c70:	4d62      	ldr	r5, [pc, #392]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24009c72:	2b00      	cmp	r3, #0
24009c74:	f000 8121 	beq.w	24009eba <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
24009c78:	682b      	ldr	r3, [r5, #0]
24009c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24009c7e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24009c80:	f7fc fa20 	bl	240060c4 <HAL_GetTick>
24009c84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24009c86:	e005      	b.n	24009c94 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24009c88:	f7fc fa1c 	bl	240060c4 <HAL_GetTick>
24009c8c:	1b80      	subs	r0, r0, r6
24009c8e:	2802      	cmp	r0, #2
24009c90:	f200 80e4 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24009c94:	682b      	ldr	r3, [r5, #0]
24009c96:	049f      	lsls	r7, r3, #18
24009c98:	d5f6      	bpl.n	24009c88 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24009c9a:	6823      	ldr	r3, [r4, #0]
24009c9c:	0759      	lsls	r1, r3, #29
24009c9e:	f100 80a3 	bmi.w	24009de8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24009ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
24009ca4:	b1d0      	cbz	r0, 24009cdc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24009ca6:	4d55      	ldr	r5, [pc, #340]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009ca8:	692b      	ldr	r3, [r5, #16]
24009caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
24009cae:	2b18      	cmp	r3, #24
24009cb0:	f000 81b6 	beq.w	2400a020 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24009cb4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24009cb6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24009cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24009cbc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24009cbe:	f000 8149 	beq.w	24009f54 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
24009cc2:	f7fc f9ff 	bl	240060c4 <HAL_GetTick>
24009cc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24009cc8:	e005      	b.n	24009cd6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24009cca:	f7fc f9fb 	bl	240060c4 <HAL_GetTick>
24009cce:	1b00      	subs	r0, r0, r4
24009cd0:	2802      	cmp	r0, #2
24009cd2:	f200 80c3 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24009cd6:	682b      	ldr	r3, [r5, #0]
24009cd8:	019b      	lsls	r3, r3, #6
24009cda:	d4f6      	bmi.n	24009cca <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24009cdc:	2000      	movs	r0, #0
}
24009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24009ce0:	4a46      	ldr	r2, [pc, #280]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009ce2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24009ce4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24009ce6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24009cea:	d12d      	bne.n	24009d48 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24009cec:	4b43      	ldr	r3, [pc, #268]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009cee:	68e2      	ldr	r2, [r4, #12]
24009cf0:	681b      	ldr	r3, [r3, #0]
24009cf2:	0759      	lsls	r1, r3, #29
24009cf4:	d501      	bpl.n	24009cfa <HAL_RCC_OscConfig+0x1a2>
24009cf6:	2a00      	cmp	r2, #0
24009cf8:	d04e      	beq.n	24009d98 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24009cfa:	4d40      	ldr	r5, [pc, #256]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009cfc:	682b      	ldr	r3, [r5, #0]
24009cfe:	f023 0319 	bic.w	r3, r3, #25
24009d02:	4313      	orrs	r3, r2
24009d04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009d06:	f7fc f9dd 	bl	240060c4 <HAL_GetTick>
24009d0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24009d0c:	e005      	b.n	24009d1a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24009d0e:	f7fc f9d9 	bl	240060c4 <HAL_GetTick>
24009d12:	1b80      	subs	r0, r0, r6
24009d14:	2802      	cmp	r0, #2
24009d16:	f200 80a1 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24009d1a:	682b      	ldr	r3, [r5, #0]
24009d1c:	075b      	lsls	r3, r3, #29
24009d1e:	d5f6      	bpl.n	24009d0e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24009d20:	f7fc f9e8 	bl	240060f4 <HAL_GetREVID>
24009d24:	f241 0303 	movw	r3, #4099	; 0x1003
24009d28:	4298      	cmp	r0, r3
24009d2a:	f200 80fe 	bhi.w	24009f2a <HAL_RCC_OscConfig+0x3d2>
24009d2e:	6922      	ldr	r2, [r4, #16]
24009d30:	686b      	ldr	r3, [r5, #4]
24009d32:	2a40      	cmp	r2, #64	; 0x40
24009d34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24009d38:	bf0c      	ite	eq
24009d3a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
24009d3e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24009d42:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24009d44:	6823      	ldr	r3, [r4, #0]
24009d46:	e741      	b.n	24009bcc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24009d48:	2b18      	cmp	r3, #24
24009d4a:	f000 80ea 	beq.w	24009f22 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24009d4e:	4d2b      	ldr	r5, [pc, #172]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24009d50:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24009d52:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24009d54:	2a00      	cmp	r2, #0
24009d56:	f000 80d3 	beq.w	24009f00 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24009d5a:	f023 0319 	bic.w	r3, r3, #25
24009d5e:	4313      	orrs	r3, r2
24009d60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009d62:	f7fc f9af 	bl	240060c4 <HAL_GetTick>
24009d66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24009d68:	e004      	b.n	24009d74 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24009d6a:	f7fc f9ab 	bl	240060c4 <HAL_GetTick>
24009d6e:	1b80      	subs	r0, r0, r6
24009d70:	2802      	cmp	r0, #2
24009d72:	d873      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24009d74:	682b      	ldr	r3, [r5, #0]
24009d76:	075f      	lsls	r7, r3, #29
24009d78:	d5f7      	bpl.n	24009d6a <HAL_RCC_OscConfig+0x212>
24009d7a:	e7d1      	b.n	24009d20 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24009d7c:	f001 0103 	and.w	r1, r1, #3
24009d80:	2902      	cmp	r1, #2
24009d82:	f47f aefc 	bne.w	24009b7e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24009d86:	4a1d      	ldr	r2, [pc, #116]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009d88:	6812      	ldr	r2, [r2, #0]
24009d8a:	0392      	lsls	r2, r2, #14
24009d8c:	f57f af1b 	bpl.w	24009bc6 <HAL_RCC_OscConfig+0x6e>
24009d90:	6862      	ldr	r2, [r4, #4]
24009d92:	2a00      	cmp	r2, #0
24009d94:	f47f af17 	bne.w	24009bc6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24009d98:	2001      	movs	r0, #1
}
24009d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24009d9c:	f002 0203 	and.w	r2, r2, #3
24009da0:	2a01      	cmp	r2, #1
24009da2:	f47f af20 	bne.w	24009be6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24009da6:	4b15      	ldr	r3, [pc, #84]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009da8:	681b      	ldr	r3, [r3, #0]
24009daa:	05da      	lsls	r2, r3, #23
24009dac:	d502      	bpl.n	24009db4 <HAL_RCC_OscConfig+0x25c>
24009dae:	69e3      	ldr	r3, [r4, #28]
24009db0:	2b80      	cmp	r3, #128	; 0x80
24009db2:	d1f1      	bne.n	24009d98 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24009db4:	f7fc f99e 	bl	240060f4 <HAL_GetREVID>
24009db8:	f241 0303 	movw	r3, #4099	; 0x1003
24009dbc:	4298      	cmp	r0, r3
24009dbe:	f200 80bf 	bhi.w	24009f40 <HAL_RCC_OscConfig+0x3e8>
24009dc2:	6a22      	ldr	r2, [r4, #32]
24009dc4:	2a20      	cmp	r2, #32
24009dc6:	f000 81ad 	beq.w	2400a124 <HAL_RCC_OscConfig+0x5cc>
24009dca:	490c      	ldr	r1, [pc, #48]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009dcc:	684b      	ldr	r3, [r1, #4]
24009dce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24009dd2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24009dd6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24009dd8:	6823      	ldr	r3, [r4, #0]
24009dda:	e72d      	b.n	24009c38 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24009ddc:	4a07      	ldr	r2, [pc, #28]	; (24009dfc <HAL_RCC_OscConfig+0x2a4>)
24009dde:	6813      	ldr	r3, [r2, #0]
24009de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009de4:	6013      	str	r3, [r2, #0]
24009de6:	e6db      	b.n	24009ba0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24009de8:	4d05      	ldr	r5, [pc, #20]	; (24009e00 <HAL_RCC_OscConfig+0x2a8>)
24009dea:	682b      	ldr	r3, [r5, #0]
24009dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24009df0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24009df2:	f7fc f967 	bl	240060c4 <HAL_GetTick>
24009df6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24009df8:	e009      	b.n	24009e0e <HAL_RCC_OscConfig+0x2b6>
24009dfa:	bf00      	nop
24009dfc:	58024400 	.word	0x58024400
24009e00:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24009e04:	f7fc f95e 	bl	240060c4 <HAL_GetTick>
24009e08:	1b80      	subs	r0, r0, r6
24009e0a:	2864      	cmp	r0, #100	; 0x64
24009e0c:	d826      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24009e0e:	682b      	ldr	r3, [r5, #0]
24009e10:	05da      	lsls	r2, r3, #23
24009e12:	d5f7      	bpl.n	24009e04 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24009e14:	68a3      	ldr	r3, [r4, #8]
24009e16:	2b01      	cmp	r3, #1
24009e18:	f000 8171 	beq.w	2400a0fe <HAL_RCC_OscConfig+0x5a6>
24009e1c:	2b00      	cmp	r3, #0
24009e1e:	f040 8174 	bne.w	2400a10a <HAL_RCC_OscConfig+0x5b2>
24009e22:	4baa      	ldr	r3, [pc, #680]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
24009e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24009e26:	f022 0201 	bic.w	r2, r2, #1
24009e2a:	671a      	str	r2, [r3, #112]	; 0x70
24009e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24009e2e:	f022 0204 	bic.w	r2, r2, #4
24009e32:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24009e34:	68a3      	ldr	r3, [r4, #8]
24009e36:	2b00      	cmp	r3, #0
24009e38:	f000 8140 	beq.w	2400a0bc <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
24009e3c:	f7fc f942 	bl	240060c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009e40:	4ea2      	ldr	r6, [pc, #648]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009e42:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24009e46:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009e48:	e004      	b.n	24009e54 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009e4a:	f7fc f93b 	bl	240060c4 <HAL_GetTick>
24009e4e:	1b40      	subs	r0, r0, r5
24009e50:	42b8      	cmp	r0, r7
24009e52:	d803      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009e54:	6f33      	ldr	r3, [r6, #112]	; 0x70
24009e56:	079b      	lsls	r3, r3, #30
24009e58:	d5f7      	bpl.n	24009e4a <HAL_RCC_OscConfig+0x2f2>
24009e5a:	e722      	b.n	24009ca2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24009e5c:	2003      	movs	r0, #3
}
24009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
24009e60:	f7fc f930 	bl	240060c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24009e64:	4e99      	ldr	r6, [pc, #612]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
24009e66:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24009e68:	e004      	b.n	24009e74 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24009e6a:	f7fc f92b 	bl	240060c4 <HAL_GetTick>
24009e6e:	1b40      	subs	r0, r0, r5
24009e70:	2864      	cmp	r0, #100	; 0x64
24009e72:	d8f3      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24009e74:	6833      	ldr	r3, [r6, #0]
24009e76:	039f      	lsls	r7, r3, #14
24009e78:	d4f7      	bmi.n	24009e6a <HAL_RCC_OscConfig+0x312>
24009e7a:	e6a3      	b.n	24009bc4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24009e7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24009e7e:	f023 0301 	bic.w	r3, r3, #1
24009e82:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24009e84:	f7fc f91e 	bl	240060c4 <HAL_GetTick>
24009e88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24009e8a:	e004      	b.n	24009e96 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24009e8c:	f7fc f91a 	bl	240060c4 <HAL_GetTick>
24009e90:	1b80      	subs	r0, r0, r6
24009e92:	2802      	cmp	r0, #2
24009e94:	d8e2      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24009e96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24009e98:	0799      	lsls	r1, r3, #30
24009e9a:	d4f7      	bmi.n	24009e8c <HAL_RCC_OscConfig+0x334>
24009e9c:	e6e4      	b.n	24009c68 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24009e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009ea2:	4b8a      	ldr	r3, [pc, #552]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
24009ea4:	681a      	ldr	r2, [r3, #0]
24009ea6:	f47f ae74 	bne.w	24009b92 <HAL_RCC_OscConfig+0x3a>
24009eaa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24009eae:	601a      	str	r2, [r3, #0]
24009eb0:	681a      	ldr	r2, [r3, #0]
24009eb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24009eb6:	601a      	str	r2, [r3, #0]
24009eb8:	e672      	b.n	24009ba0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24009eba:	682b      	ldr	r3, [r5, #0]
24009ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24009ec0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24009ec2:	f7fc f8ff 	bl	240060c4 <HAL_GetTick>
24009ec6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24009ec8:	e004      	b.n	24009ed4 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24009eca:	f7fc f8fb 	bl	240060c4 <HAL_GetTick>
24009ece:	1b80      	subs	r0, r0, r6
24009ed0:	2802      	cmp	r0, #2
24009ed2:	d8c3      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24009ed4:	682b      	ldr	r3, [r5, #0]
24009ed6:	0498      	lsls	r0, r3, #18
24009ed8:	d4f7      	bmi.n	24009eca <HAL_RCC_OscConfig+0x372>
24009eda:	e6de      	b.n	24009c9a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24009edc:	682b      	ldr	r3, [r5, #0]
24009ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24009ee2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009ee4:	f7fc f8ee 	bl	240060c4 <HAL_GetTick>
24009ee8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24009eea:	e004      	b.n	24009ef6 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24009eec:	f7fc f8ea 	bl	240060c4 <HAL_GetTick>
24009ef0:	1b80      	subs	r0, r0, r6
24009ef2:	2802      	cmp	r0, #2
24009ef4:	d8b2      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24009ef6:	682b      	ldr	r3, [r5, #0]
24009ef8:	05df      	lsls	r7, r3, #23
24009efa:	d4f7      	bmi.n	24009eec <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24009efc:	6823      	ldr	r3, [r4, #0]
24009efe:	e69b      	b.n	24009c38 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
24009f00:	f023 0301 	bic.w	r3, r3, #1
24009f04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24009f06:	f7fc f8dd 	bl	240060c4 <HAL_GetTick>
24009f0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24009f0c:	e004      	b.n	24009f18 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24009f0e:	f7fc f8d9 	bl	240060c4 <HAL_GetTick>
24009f12:	1b80      	subs	r0, r0, r6
24009f14:	2802      	cmp	r0, #2
24009f16:	d8a1      	bhi.n	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24009f18:	682b      	ldr	r3, [r5, #0]
24009f1a:	0758      	lsls	r0, r3, #29
24009f1c:	d4f7      	bmi.n	24009f0e <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24009f1e:	6823      	ldr	r3, [r4, #0]
24009f20:	e654      	b.n	24009bcc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24009f22:	0790      	lsls	r0, r2, #30
24009f24:	f47f af13 	bne.w	24009d4e <HAL_RCC_OscConfig+0x1f6>
24009f28:	e6e0      	b.n	24009cec <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24009f2a:	686b      	ldr	r3, [r5, #4]
24009f2c:	6922      	ldr	r2, [r4, #16]
24009f2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24009f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24009f36:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24009f38:	6823      	ldr	r3, [r4, #0]
24009f3a:	e647      	b.n	24009bcc <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24009f3c:	2001      	movs	r0, #1
}
24009f3e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24009f40:	4a62      	ldr	r2, [pc, #392]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
24009f42:	6a21      	ldr	r1, [r4, #32]
24009f44:	68d3      	ldr	r3, [r2, #12]
24009f46:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24009f4a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24009f4e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24009f50:	6823      	ldr	r3, [r4, #0]
24009f52:	e671      	b.n	24009c38 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24009f54:	f7fc f8b6 	bl	240060c4 <HAL_GetTick>
24009f58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24009f5a:	e005      	b.n	24009f68 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24009f5c:	f7fc f8b2 	bl	240060c4 <HAL_GetTick>
24009f60:	1b80      	subs	r0, r0, r6
24009f62:	2802      	cmp	r0, #2
24009f64:	f63f af7a 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24009f68:	682b      	ldr	r3, [r5, #0]
24009f6a:	0199      	lsls	r1, r3, #6
24009f6c:	d4f6      	bmi.n	24009f5c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24009f6e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24009f70:	4b57      	ldr	r3, [pc, #348]	; (2400a0d0 <HAL_RCC_OscConfig+0x578>)
24009f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24009f74:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24009f76:	4957      	ldr	r1, [pc, #348]	; (2400a0d4 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24009f78:	4e54      	ldr	r6, [pc, #336]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24009f7a:	4313      	orrs	r3, r2
24009f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24009f7e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24009f82:	62ab      	str	r3, [r5, #40]	; 0x28
24009f84:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24009f88:	3b01      	subs	r3, #1
24009f8a:	3a01      	subs	r2, #1
24009f8c:	025b      	lsls	r3, r3, #9
24009f8e:	0412      	lsls	r2, r2, #16
24009f90:	b29b      	uxth	r3, r3
24009f92:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24009f96:	4313      	orrs	r3, r2
24009f98:	6b22      	ldr	r2, [r4, #48]	; 0x30
24009f9a:	3a01      	subs	r2, #1
24009f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
24009fa0:	4313      	orrs	r3, r2
24009fa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24009fa4:	3a01      	subs	r2, #1
24009fa6:	0612      	lsls	r2, r2, #24
24009fa8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24009fac:	4313      	orrs	r3, r2
24009fae:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24009fb0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fb2:	f023 0301 	bic.w	r3, r3, #1
24009fb6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24009fb8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24009fba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24009fbc:	4011      	ands	r1, r2
24009fbe:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
24009fc2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24009fc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
24009fc8:	f023 030c 	bic.w	r3, r3, #12
24009fcc:	4313      	orrs	r3, r2
24009fce:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24009fd0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fd2:	6c62      	ldr	r2, [r4, #68]	; 0x44
24009fd4:	f023 0302 	bic.w	r3, r3, #2
24009fd8:	4313      	orrs	r3, r2
24009fda:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24009fdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009fe2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009fe4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009fea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24009fec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24009ff2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24009ff4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24009ff6:	f043 0301 	orr.w	r3, r3, #1
24009ffa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24009ffc:	682b      	ldr	r3, [r5, #0]
24009ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400a002:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400a004:	f7fc f85e 	bl	240060c4 <HAL_GetTick>
2400a008:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400a00a:	e005      	b.n	2400a018 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400a00c:	f7fc f85a 	bl	240060c4 <HAL_GetTick>
2400a010:	1b00      	subs	r0, r0, r4
2400a012:	2802      	cmp	r0, #2
2400a014:	f63f af22 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400a018:	6833      	ldr	r3, [r6, #0]
2400a01a:	019a      	lsls	r2, r3, #6
2400a01c:	d5f6      	bpl.n	2400a00c <HAL_RCC_OscConfig+0x4b4>
2400a01e:	e65d      	b.n	24009cdc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400a020:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
2400a022:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
2400a024:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400a026:	f43f ae5a 	beq.w	24009cde <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400a02a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400a02e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400a030:	428b      	cmp	r3, r1
2400a032:	f47f aeb1 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400a036:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2400a03a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400a03c:	429a      	cmp	r2, r3
2400a03e:	f47f aeab 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400a042:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400a044:	f3c6 0208 	ubfx	r2, r6, #0, #9
2400a048:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400a04a:	429a      	cmp	r2, r3
2400a04c:	f47f aea4 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400a050:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a052:	f3c6 2246 	ubfx	r2, r6, #9, #7
2400a056:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400a058:	429a      	cmp	r2, r3
2400a05a:	f47f ae9d 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400a05e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a060:	f3c6 4206 	ubfx	r2, r6, #16, #7
2400a064:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400a066:	429a      	cmp	r2, r3
2400a068:	f47f ae96 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2400a06c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400a06e:	f3c6 6606 	ubfx	r6, r6, #24, #7
2400a072:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400a074:	429e      	cmp	r6, r3
2400a076:	f47f ae8f 	bne.w	24009d98 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400a07a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2400a07c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400a07e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2400a082:	429a      	cmp	r2, r3
2400a084:	f43f ae2a 	beq.w	24009cdc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
2400a088:	4a10      	ldr	r2, [pc, #64]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
2400a08a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400a08c:	f023 0301 	bic.w	r3, r3, #1
2400a090:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
2400a092:	f7fc f817 	bl	240060c4 <HAL_GetTick>
2400a096:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2400a098:	f7fc f814 	bl	240060c4 <HAL_GetTick>
2400a09c:	42a8      	cmp	r0, r5
2400a09e:	d0fb      	beq.n	2400a098 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400a0a0:	4a0a      	ldr	r2, [pc, #40]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
2400a0a2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400a0a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400a0a6:	4b0b      	ldr	r3, [pc, #44]	; (2400a0d4 <HAL_RCC_OscConfig+0x57c>)
2400a0a8:	6b54      	ldr	r4, [r2, #52]	; 0x34
2400a0aa:	4023      	ands	r3, r4
2400a0ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
2400a0b0:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400a0b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400a0b4:	f043 0301 	orr.w	r3, r3, #1
2400a0b8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400a0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
2400a0bc:	f7fc f802 	bl	240060c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400a0c0:	4e02      	ldr	r6, [pc, #8]	; (2400a0cc <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400a0c2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
2400a0c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400a0c8:	e00c      	b.n	2400a0e4 <HAL_RCC_OscConfig+0x58c>
2400a0ca:	bf00      	nop
2400a0cc:	58024400 	.word	0x58024400
2400a0d0:	fffffc0c 	.word	0xfffffc0c
2400a0d4:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400a0d8:	f7fb fff4 	bl	240060c4 <HAL_GetTick>
2400a0dc:	1b40      	subs	r0, r0, r5
2400a0de:	42b8      	cmp	r0, r7
2400a0e0:	f63f aebc 	bhi.w	24009e5c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400a0e4:	6f33      	ldr	r3, [r6, #112]	; 0x70
2400a0e6:	0798      	lsls	r0, r3, #30
2400a0e8:	d4f6      	bmi.n	2400a0d8 <HAL_RCC_OscConfig+0x580>
2400a0ea:	e5da      	b.n	24009ca2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400a0ec:	68eb      	ldr	r3, [r5, #12]
2400a0ee:	6a22      	ldr	r2, [r4, #32]
2400a0f0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
2400a0f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400a0f8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400a0fa:	6823      	ldr	r3, [r4, #0]
2400a0fc:	e59c      	b.n	24009c38 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400a0fe:	4a0e      	ldr	r2, [pc, #56]	; (2400a138 <HAL_RCC_OscConfig+0x5e0>)
2400a100:	6f13      	ldr	r3, [r2, #112]	; 0x70
2400a102:	f043 0301 	orr.w	r3, r3, #1
2400a106:	6713      	str	r3, [r2, #112]	; 0x70
2400a108:	e694      	b.n	24009e34 <HAL_RCC_OscConfig+0x2dc>
2400a10a:	2b05      	cmp	r3, #5
2400a10c:	4b0a      	ldr	r3, [pc, #40]	; (2400a138 <HAL_RCC_OscConfig+0x5e0>)
2400a10e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400a110:	f47f ae89 	bne.w	24009e26 <HAL_RCC_OscConfig+0x2ce>
2400a114:	f042 0204 	orr.w	r2, r2, #4
2400a118:	671a      	str	r2, [r3, #112]	; 0x70
2400a11a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400a11c:	f042 0201 	orr.w	r2, r2, #1
2400a120:	671a      	str	r2, [r3, #112]	; 0x70
2400a122:	e687      	b.n	24009e34 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400a124:	4a04      	ldr	r2, [pc, #16]	; (2400a138 <HAL_RCC_OscConfig+0x5e0>)
2400a126:	6853      	ldr	r3, [r2, #4]
2400a128:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400a12c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
2400a130:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400a132:	6823      	ldr	r3, [r4, #0]
2400a134:	e580      	b.n	24009c38 <HAL_RCC_OscConfig+0xe0>
2400a136:	bf00      	nop
2400a138:	58024400 	.word	0x58024400

2400a13c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a13c:	4a47      	ldr	r2, [pc, #284]	; (2400a25c <HAL_RCC_GetSysClockFreq+0x120>)
2400a13e:	6913      	ldr	r3, [r2, #16]
2400a140:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400a144:	2b10      	cmp	r3, #16
2400a146:	d004      	beq.n	2400a152 <HAL_RCC_GetSysClockFreq+0x16>
2400a148:	2b18      	cmp	r3, #24
2400a14a:	d00d      	beq.n	2400a168 <HAL_RCC_GetSysClockFreq+0x2c>
2400a14c:	b11b      	cbz	r3, 2400a156 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
2400a14e:	4844      	ldr	r0, [pc, #272]	; (2400a260 <HAL_RCC_GetSysClockFreq+0x124>)
2400a150:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a152:	4844      	ldr	r0, [pc, #272]	; (2400a264 <HAL_RCC_GetSysClockFreq+0x128>)
2400a154:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a156:	6813      	ldr	r3, [r2, #0]
2400a158:	0699      	lsls	r1, r3, #26
2400a15a:	d54a      	bpl.n	2400a1f2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a15c:	6813      	ldr	r3, [r2, #0]
2400a15e:	4842      	ldr	r0, [pc, #264]	; (2400a268 <HAL_RCC_GetSysClockFreq+0x12c>)
2400a160:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400a164:	40d8      	lsrs	r0, r3
2400a166:	4770      	bx	lr
{
2400a168:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a16a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400a16c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400a16e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
2400a170:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a174:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400a176:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
2400a17a:	d038      	beq.n	2400a1ee <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a17c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400a180:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a184:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400a188:	fb05 f101 	mul.w	r1, r5, r1
2400a18c:	2b01      	cmp	r3, #1
2400a18e:	ee07 1a90 	vmov	s15, r1
2400a192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
2400a196:	d002      	beq.n	2400a19e <HAL_RCC_GetSysClockFreq+0x62>
2400a198:	2b02      	cmp	r3, #2
2400a19a:	d02c      	beq.n	2400a1f6 <HAL_RCC_GetSysClockFreq+0xba>
2400a19c:	b393      	cbz	r3, 2400a204 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a19e:	ee07 0a90 	vmov	s15, r0
2400a1a2:	eddf 6a32 	vldr	s13, [pc, #200]	; 2400a26c <HAL_RCC_GetSysClockFreq+0x130>
2400a1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a1aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400a1ac:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400a1b0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 2400a270 <HAL_RCC_GetSysClockFreq+0x134>
2400a1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a1b8:	ee06 3a90 	vmov	s13, r3
2400a1bc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400a1c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a1c4:	ee76 6a85 	vadd.f32	s13, s13, s10
2400a1c8:	eee7 6a25 	vfma.f32	s13, s14, s11
2400a1cc:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400a1d0:	4b22      	ldr	r3, [pc, #136]	; (2400a25c <HAL_RCC_GetSysClockFreq+0x120>)
2400a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a1d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400a1d8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400a1da:	ee07 3a90 	vmov	s15, r3
2400a1de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400a1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a1ea:	ee17 0a90 	vmov	r0, s15
}
2400a1ee:	bc30      	pop	{r4, r5}
2400a1f0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
2400a1f2:	481d      	ldr	r0, [pc, #116]	; (2400a268 <HAL_RCC_GetSysClockFreq+0x12c>)
}
2400a1f4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a1f6:	ee07 0a90 	vmov	s15, r0
2400a1fa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 2400a274 <HAL_RCC_GetSysClockFreq+0x138>
2400a1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a202:	e7d2      	b.n	2400a1aa <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a204:	6813      	ldr	r3, [r2, #0]
2400a206:	069b      	lsls	r3, r3, #26
2400a208:	d520      	bpl.n	2400a24c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a20a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a20c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a210:	4915      	ldr	r1, [pc, #84]	; (2400a268 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a212:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400a216:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a218:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a220:	ed9f 5a13 	vldr	s10, [pc, #76]	; 2400a270 <HAL_RCC_GetSysClockFreq+0x134>
2400a224:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a228:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a22a:	ee06 3a90 	vmov	s13, r3
2400a22e:	ee05 1a90 	vmov	s11, r1
2400a232:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400a236:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400a23a:	ee76 6a86 	vadd.f32	s13, s13, s12
2400a23e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400a242:	eee7 6a05 	vfma.f32	s13, s14, s10
2400a246:	ee66 6a26 	vmul.f32	s13, s12, s13
2400a24a:	e7c1      	b.n	2400a1d0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400a24c:	ee07 0a90 	vmov	s15, r0
2400a250:	eddf 6a09 	vldr	s13, [pc, #36]	; 2400a278 <HAL_RCC_GetSysClockFreq+0x13c>
2400a254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400a258:	e7a7      	b.n	2400a1aa <HAL_RCC_GetSysClockFreq+0x6e>
2400a25a:	bf00      	nop
2400a25c:	58024400 	.word	0x58024400
2400a260:	003d0900 	.word	0x003d0900
2400a264:	00f42400 	.word	0x00f42400
2400a268:	03d09000 	.word	0x03d09000
2400a26c:	4a742400 	.word	0x4a742400
2400a270:	39000000 	.word	0x39000000
2400a274:	4b742400 	.word	0x4b742400
2400a278:	4c742400 	.word	0x4c742400

2400a27c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
2400a27c:	2800      	cmp	r0, #0
2400a27e:	f000 811a 	beq.w	2400a4b6 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400a282:	4a92      	ldr	r2, [pc, #584]	; (2400a4cc <HAL_RCC_ClockConfig+0x250>)
{
2400a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400a288:	6813      	ldr	r3, [r2, #0]
2400a28a:	4604      	mov	r4, r0
2400a28c:	460d      	mov	r5, r1
2400a28e:	f003 030f 	and.w	r3, r3, #15
2400a292:	428b      	cmp	r3, r1
2400a294:	d20c      	bcs.n	2400a2b0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400a296:	6813      	ldr	r3, [r2, #0]
2400a298:	f023 030f 	bic.w	r3, r3, #15
2400a29c:	430b      	orrs	r3, r1
2400a29e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2400a2a0:	6813      	ldr	r3, [r2, #0]
2400a2a2:	f003 030f 	and.w	r3, r3, #15
2400a2a6:	428b      	cmp	r3, r1
2400a2a8:	d002      	beq.n	2400a2b0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
2400a2aa:	2001      	movs	r0, #1
}
2400a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2400a2b0:	6823      	ldr	r3, [r4, #0]
2400a2b2:	075f      	lsls	r7, r3, #29
2400a2b4:	d50c      	bpl.n	2400a2d0 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400a2b6:	4986      	ldr	r1, [pc, #536]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a2b8:	6920      	ldr	r0, [r4, #16]
2400a2ba:	698a      	ldr	r2, [r1, #24]
2400a2bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400a2c0:	4290      	cmp	r0, r2
2400a2c2:	d905      	bls.n	2400a2d0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2400a2c4:	698b      	ldr	r3, [r1, #24]
2400a2c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a2ca:	4303      	orrs	r3, r0
2400a2cc:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400a2ce:	6823      	ldr	r3, [r4, #0]
2400a2d0:	071e      	lsls	r6, r3, #28
2400a2d2:	d50c      	bpl.n	2400a2ee <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400a2d4:	497e      	ldr	r1, [pc, #504]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a2d6:	6960      	ldr	r0, [r4, #20]
2400a2d8:	69ca      	ldr	r2, [r1, #28]
2400a2da:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400a2de:	4290      	cmp	r0, r2
2400a2e0:	d905      	bls.n	2400a2ee <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400a2e2:	69cb      	ldr	r3, [r1, #28]
2400a2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a2e8:	4303      	orrs	r3, r0
2400a2ea:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400a2ec:	6823      	ldr	r3, [r4, #0]
2400a2ee:	06d8      	lsls	r0, r3, #27
2400a2f0:	d50c      	bpl.n	2400a30c <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400a2f2:	4977      	ldr	r1, [pc, #476]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a2f4:	69a0      	ldr	r0, [r4, #24]
2400a2f6:	69ca      	ldr	r2, [r1, #28]
2400a2f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
2400a2fc:	4290      	cmp	r0, r2
2400a2fe:	d905      	bls.n	2400a30c <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400a300:	69cb      	ldr	r3, [r1, #28]
2400a302:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
2400a306:	4303      	orrs	r3, r0
2400a308:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2400a30a:	6823      	ldr	r3, [r4, #0]
2400a30c:	0699      	lsls	r1, r3, #26
2400a30e:	d50c      	bpl.n	2400a32a <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2400a310:	496f      	ldr	r1, [pc, #444]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a312:	69e0      	ldr	r0, [r4, #28]
2400a314:	6a0a      	ldr	r2, [r1, #32]
2400a316:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400a31a:	4290      	cmp	r0, r2
2400a31c:	d905      	bls.n	2400a32a <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2400a31e:	6a0b      	ldr	r3, [r1, #32]
2400a320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a324:	4303      	orrs	r3, r0
2400a326:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400a328:	6823      	ldr	r3, [r4, #0]
2400a32a:	079a      	lsls	r2, r3, #30
2400a32c:	f140 8083 	bpl.w	2400a436 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400a330:	4867      	ldr	r0, [pc, #412]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a332:	68e1      	ldr	r1, [r4, #12]
2400a334:	6982      	ldr	r2, [r0, #24]
2400a336:	f002 020f 	and.w	r2, r2, #15
2400a33a:	4291      	cmp	r1, r2
2400a33c:	f240 80a9 	bls.w	2400a492 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400a340:	6983      	ldr	r3, [r0, #24]
2400a342:	f023 030f 	bic.w	r3, r3, #15
2400a346:	4319      	orrs	r1, r3
2400a348:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400a34a:	6823      	ldr	r3, [r4, #0]
2400a34c:	07df      	lsls	r7, r3, #31
2400a34e:	d474      	bmi.n	2400a43a <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400a350:	079f      	lsls	r7, r3, #30
2400a352:	d507      	bpl.n	2400a364 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400a354:	4a5e      	ldr	r2, [pc, #376]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a356:	68e1      	ldr	r1, [r4, #12]
2400a358:	6993      	ldr	r3, [r2, #24]
2400a35a:	f003 030f 	and.w	r3, r3, #15
2400a35e:	428b      	cmp	r3, r1
2400a360:	f200 80a0 	bhi.w	2400a4a4 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2400a364:	4a59      	ldr	r2, [pc, #356]	; (2400a4cc <HAL_RCC_ClockConfig+0x250>)
2400a366:	6813      	ldr	r3, [r2, #0]
2400a368:	f003 030f 	and.w	r3, r3, #15
2400a36c:	42ab      	cmp	r3, r5
2400a36e:	d909      	bls.n	2400a384 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400a370:	6813      	ldr	r3, [r2, #0]
2400a372:	f023 030f 	bic.w	r3, r3, #15
2400a376:	432b      	orrs	r3, r5
2400a378:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2400a37a:	6813      	ldr	r3, [r2, #0]
2400a37c:	f003 030f 	and.w	r3, r3, #15
2400a380:	42ab      	cmp	r3, r5
2400a382:	d192      	bne.n	2400a2aa <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2400a384:	6823      	ldr	r3, [r4, #0]
2400a386:	075e      	lsls	r6, r3, #29
2400a388:	d50c      	bpl.n	2400a3a4 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400a38a:	4951      	ldr	r1, [pc, #324]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a38c:	6920      	ldr	r0, [r4, #16]
2400a38e:	698a      	ldr	r2, [r1, #24]
2400a390:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400a394:	4290      	cmp	r0, r2
2400a396:	d205      	bcs.n	2400a3a4 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2400a398:	698b      	ldr	r3, [r1, #24]
2400a39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a39e:	4303      	orrs	r3, r0
2400a3a0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400a3a2:	6823      	ldr	r3, [r4, #0]
2400a3a4:	071d      	lsls	r5, r3, #28
2400a3a6:	d50c      	bpl.n	2400a3c2 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400a3a8:	4949      	ldr	r1, [pc, #292]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a3aa:	6960      	ldr	r0, [r4, #20]
2400a3ac:	69ca      	ldr	r2, [r1, #28]
2400a3ae:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400a3b2:	4290      	cmp	r0, r2
2400a3b4:	d205      	bcs.n	2400a3c2 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400a3b6:	69cb      	ldr	r3, [r1, #28]
2400a3b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a3bc:	4303      	orrs	r3, r0
2400a3be:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400a3c0:	6823      	ldr	r3, [r4, #0]
2400a3c2:	06d8      	lsls	r0, r3, #27
2400a3c4:	d50c      	bpl.n	2400a3e0 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400a3c6:	4942      	ldr	r1, [pc, #264]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a3c8:	69a0      	ldr	r0, [r4, #24]
2400a3ca:	69ca      	ldr	r2, [r1, #28]
2400a3cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
2400a3d0:	4290      	cmp	r0, r2
2400a3d2:	d205      	bcs.n	2400a3e0 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400a3d4:	69cb      	ldr	r3, [r1, #28]
2400a3d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
2400a3da:	4303      	orrs	r3, r0
2400a3dc:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2400a3de:	6823      	ldr	r3, [r4, #0]
2400a3e0:	0699      	lsls	r1, r3, #26
2400a3e2:	d50b      	bpl.n	2400a3fc <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2400a3e4:	4a3a      	ldr	r2, [pc, #232]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a3e6:	69e1      	ldr	r1, [r4, #28]
2400a3e8:	6a13      	ldr	r3, [r2, #32]
2400a3ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
2400a3ee:	4299      	cmp	r1, r3
2400a3f0:	d204      	bcs.n	2400a3fc <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2400a3f2:	6a13      	ldr	r3, [r2, #32]
2400a3f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400a3f8:	430b      	orrs	r3, r1
2400a3fa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400a3fc:	f7ff fe9e 	bl	2400a13c <HAL_RCC_GetSysClockFreq>
2400a400:	4a33      	ldr	r2, [pc, #204]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a402:	4603      	mov	r3, r0
2400a404:	4833      	ldr	r0, [pc, #204]	; (2400a4d4 <HAL_RCC_ClockConfig+0x258>)
2400a406:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a408:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400a40a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
2400a40e:	4d32      	ldr	r5, [pc, #200]	; (2400a4d8 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a410:	f002 020f 	and.w	r2, r2, #15
2400a414:	4c31      	ldr	r4, [pc, #196]	; (2400a4dc <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400a416:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a418:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400a41a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
2400a41e:	4830      	ldr	r0, [pc, #192]	; (2400a4e0 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a420:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400a424:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
2400a426:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
2400a428:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a42a:	40d3      	lsrs	r3, r2
2400a42c:	6023      	str	r3, [r4, #0]
}
2400a42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
2400a432:	f7fb bde5 	b.w	24006000 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400a436:	07db      	lsls	r3, r3, #31
2400a438:	d594      	bpl.n	2400a364 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
2400a43a:	4a25      	ldr	r2, [pc, #148]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a43c:	68a1      	ldr	r1, [r4, #8]
2400a43e:	6993      	ldr	r3, [r2, #24]
2400a440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2400a444:	430b      	orrs	r3, r1
2400a446:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2400a448:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400a44a:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2400a44c:	2902      	cmp	r1, #2
2400a44e:	d034      	beq.n	2400a4ba <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2400a450:	2903      	cmp	r1, #3
2400a452:	d02d      	beq.n	2400a4b0 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2400a454:	2901      	cmp	r1, #1
2400a456:	d035      	beq.n	2400a4c4 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400a458:	075b      	lsls	r3, r3, #29
2400a45a:	f57f af26 	bpl.w	2400a2aa <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2400a45e:	4e1c      	ldr	r6, [pc, #112]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2400a460:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2400a464:	6933      	ldr	r3, [r6, #16]
2400a466:	f023 0307 	bic.w	r3, r3, #7
2400a46a:	430b      	orrs	r3, r1
2400a46c:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
2400a46e:	f7fb fe29 	bl	240060c4 <HAL_GetTick>
2400a472:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2400a474:	e004      	b.n	2400a480 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2400a476:	f7fb fe25 	bl	240060c4 <HAL_GetTick>
2400a47a:	1bc0      	subs	r0, r0, r7
2400a47c:	4540      	cmp	r0, r8
2400a47e:	d81f      	bhi.n	2400a4c0 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2400a480:	6933      	ldr	r3, [r6, #16]
2400a482:	6862      	ldr	r2, [r4, #4]
2400a484:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400a488:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
2400a48c:	d1f3      	bne.n	2400a476 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400a48e:	6823      	ldr	r3, [r4, #0]
2400a490:	e75e      	b.n	2400a350 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400a492:	07da      	lsls	r2, r3, #31
2400a494:	d4d1      	bmi.n	2400a43a <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400a496:	4a0e      	ldr	r2, [pc, #56]	; (2400a4d0 <HAL_RCC_ClockConfig+0x254>)
2400a498:	6993      	ldr	r3, [r2, #24]
2400a49a:	f003 030f 	and.w	r3, r3, #15
2400a49e:	428b      	cmp	r3, r1
2400a4a0:	f67f af60 	bls.w	2400a364 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400a4a4:	6993      	ldr	r3, [r2, #24]
2400a4a6:	f023 030f 	bic.w	r3, r3, #15
2400a4aa:	4319      	orrs	r1, r3
2400a4ac:	6191      	str	r1, [r2, #24]
2400a4ae:	e759      	b.n	2400a364 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400a4b0:	0198      	lsls	r0, r3, #6
2400a4b2:	d4d4      	bmi.n	2400a45e <HAL_RCC_ClockConfig+0x1e2>
2400a4b4:	e6f9      	b.n	2400a2aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
2400a4b6:	2001      	movs	r0, #1
}
2400a4b8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400a4ba:	039e      	lsls	r6, r3, #14
2400a4bc:	d4cf      	bmi.n	2400a45e <HAL_RCC_ClockConfig+0x1e2>
2400a4be:	e6f4      	b.n	2400a2aa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
2400a4c0:	2003      	movs	r0, #3
2400a4c2:	e6f3      	b.n	2400a2ac <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400a4c4:	05da      	lsls	r2, r3, #23
2400a4c6:	d4ca      	bmi.n	2400a45e <HAL_RCC_ClockConfig+0x1e2>
2400a4c8:	e6ef      	b.n	2400a2aa <HAL_RCC_ClockConfig+0x2e>
2400a4ca:	bf00      	nop
2400a4cc:	52002000 	.word	0x52002000
2400a4d0:	58024400 	.word	0x58024400
2400a4d4:	2401d08c 	.word	0x2401d08c
2400a4d8:	20000750 	.word	0x20000750
2400a4dc:	20000754 	.word	0x20000754
2400a4e0:	2000075c 	.word	0x2000075c

2400a4e4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a4e4:	4a18      	ldr	r2, [pc, #96]	; (2400a548 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2400a4e6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a4e8:	6913      	ldr	r3, [r2, #16]
2400a4ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400a4ee:	2b10      	cmp	r3, #16
2400a4f0:	d01a      	beq.n	2400a528 <HAL_RCC_GetHCLKFreq+0x44>
2400a4f2:	2b18      	cmp	r3, #24
2400a4f4:	d023      	beq.n	2400a53e <HAL_RCC_GetHCLKFreq+0x5a>
2400a4f6:	b1cb      	cbz	r3, 2400a52c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
2400a4f8:	4814      	ldr	r0, [pc, #80]	; (2400a54c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a4fa:	4b13      	ldr	r3, [pc, #76]	; (2400a548 <HAL_RCC_GetHCLKFreq+0x64>)
2400a4fc:	4914      	ldr	r1, [pc, #80]	; (2400a550 <HAL_RCC_GetHCLKFreq+0x6c>)
2400a4fe:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a500:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a502:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a506:	4c13      	ldr	r4, [pc, #76]	; (2400a554 <HAL_RCC_GetHCLKFreq+0x70>)
2400a508:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400a50c:	4d12      	ldr	r5, [pc, #72]	; (2400a558 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a50e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a510:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a512:	f002 021f 	and.w	r2, r2, #31
2400a516:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a51a:	f003 001f 	and.w	r0, r3, #31
2400a51e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
2400a522:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a524:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
2400a526:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a528:	480c      	ldr	r0, [pc, #48]	; (2400a55c <HAL_RCC_GetHCLKFreq+0x78>)
2400a52a:	e7e6      	b.n	2400a4fa <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a52c:	6813      	ldr	r3, [r2, #0]
2400a52e:	069b      	lsls	r3, r3, #26
2400a530:	d508      	bpl.n	2400a544 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a532:	6812      	ldr	r2, [r2, #0]
2400a534:	480a      	ldr	r0, [pc, #40]	; (2400a560 <HAL_RCC_GetHCLKFreq+0x7c>)
2400a536:	f3c2 02c1 	ubfx	r2, r2, #3, #2
2400a53a:	40d0      	lsrs	r0, r2
2400a53c:	e7dd      	b.n	2400a4fa <HAL_RCC_GetHCLKFreq+0x16>
2400a53e:	f7ff fa87 	bl	24009a50 <HAL_RCC_GetSysClockFreq.part.0>
2400a542:	e7da      	b.n	2400a4fa <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400a544:	4806      	ldr	r0, [pc, #24]	; (2400a560 <HAL_RCC_GetHCLKFreq+0x7c>)
2400a546:	e7d8      	b.n	2400a4fa <HAL_RCC_GetHCLKFreq+0x16>
2400a548:	58024400 	.word	0x58024400
2400a54c:	003d0900 	.word	0x003d0900
2400a550:	2401d08c 	.word	0x2401d08c
2400a554:	20000754 	.word	0x20000754
2400a558:	20000750 	.word	0x20000750
2400a55c:	00f42400 	.word	0x00f42400
2400a560:	03d09000 	.word	0x03d09000

2400a564 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a564:	4a1c      	ldr	r2, [pc, #112]	; (2400a5d8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2400a566:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a568:	6913      	ldr	r3, [r2, #16]
2400a56a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400a56e:	2b10      	cmp	r3, #16
2400a570:	d021      	beq.n	2400a5b6 <HAL_RCC_GetPCLK1Freq+0x52>
2400a572:	2b18      	cmp	r3, #24
2400a574:	d02b      	beq.n	2400a5ce <HAL_RCC_GetPCLK1Freq+0x6a>
2400a576:	b303      	cbz	r3, 2400a5ba <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
2400a578:	4818      	ldr	r0, [pc, #96]	; (2400a5dc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a57a:	4a17      	ldr	r2, [pc, #92]	; (2400a5d8 <HAL_RCC_GetPCLK1Freq+0x74>)
2400a57c:	4918      	ldr	r1, [pc, #96]	; (2400a5e0 <HAL_RCC_GetPCLK1Freq+0x7c>)
2400a57e:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
2400a580:	4d18      	ldr	r5, [pc, #96]	; (2400a5e4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a582:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a586:	4c18      	ldr	r4, [pc, #96]	; (2400a5e8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a588:	5ccb      	ldrb	r3, [r1, r3]
2400a58a:	f003 031f 	and.w	r3, r3, #31
2400a58e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a592:	6990      	ldr	r0, [r2, #24]
2400a594:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
2400a598:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a59a:	5c08      	ldrb	r0, [r1, r0]
2400a59c:	f000 001f 	and.w	r0, r0, #31
2400a5a0:	40c3      	lsrs	r3, r0
2400a5a2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
2400a5a4:	69d2      	ldr	r2, [r2, #28]
2400a5a6:	f3c2 1202 	ubfx	r2, r2, #4, #3
2400a5aa:	5c88      	ldrb	r0, [r1, r2]
2400a5ac:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
2400a5b0:	fa23 f000 	lsr.w	r0, r3, r0
2400a5b4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400a5b6:	480d      	ldr	r0, [pc, #52]	; (2400a5ec <HAL_RCC_GetPCLK1Freq+0x88>)
2400a5b8:	e7df      	b.n	2400a57a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a5ba:	6813      	ldr	r3, [r2, #0]
2400a5bc:	069b      	lsls	r3, r3, #26
2400a5be:	d509      	bpl.n	2400a5d4 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a5c0:	6810      	ldr	r0, [r2, #0]
2400a5c2:	4b0b      	ldr	r3, [pc, #44]	; (2400a5f0 <HAL_RCC_GetPCLK1Freq+0x8c>)
2400a5c4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
2400a5c8:	fa23 f000 	lsr.w	r0, r3, r0
2400a5cc:	e7d5      	b.n	2400a57a <HAL_RCC_GetPCLK1Freq+0x16>
2400a5ce:	f7ff fa3f 	bl	24009a50 <HAL_RCC_GetSysClockFreq.part.0>
2400a5d2:	e7d2      	b.n	2400a57a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400a5d4:	4806      	ldr	r0, [pc, #24]	; (2400a5f0 <HAL_RCC_GetPCLK1Freq+0x8c>)
2400a5d6:	e7d0      	b.n	2400a57a <HAL_RCC_GetPCLK1Freq+0x16>
2400a5d8:	58024400 	.word	0x58024400
2400a5dc:	003d0900 	.word	0x003d0900
2400a5e0:	2401d08c 	.word	0x2401d08c
2400a5e4:	20000750 	.word	0x20000750
2400a5e8:	20000754 	.word	0x20000754
2400a5ec:	00f42400 	.word	0x00f42400
2400a5f0:	03d09000 	.word	0x03d09000

2400a5f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2400a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400a5f6:	4c3a      	ldr	r4, [pc, #232]	; (2400a6e0 <RCCEx_PLL2_Config+0xec>)
2400a5f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400a5fa:	f003 0303 	and.w	r3, r3, #3
2400a5fe:	2b03      	cmp	r3, #3
2400a600:	d067      	beq.n	2400a6d2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2400a602:	6823      	ldr	r3, [r4, #0]
2400a604:	4606      	mov	r6, r0
2400a606:	460f      	mov	r7, r1
2400a608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2400a60c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a60e:	f7fb fd59 	bl	240060c4 <HAL_GetTick>
2400a612:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400a614:	e004      	b.n	2400a620 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400a616:	f7fb fd55 	bl	240060c4 <HAL_GetTick>
2400a61a:	1b43      	subs	r3, r0, r5
2400a61c:	2b02      	cmp	r3, #2
2400a61e:	d856      	bhi.n	2400a6ce <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400a620:	6823      	ldr	r3, [r4, #0]
2400a622:	011a      	lsls	r2, r3, #4
2400a624:	d4f7      	bmi.n	2400a616 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2400a626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400a628:	6832      	ldr	r2, [r6, #0]
2400a62a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
2400a62e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400a632:	62a3      	str	r3, [r4, #40]	; 0x28
2400a634:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400a638:	3b01      	subs	r3, #1
2400a63a:	3a01      	subs	r2, #1
2400a63c:	025b      	lsls	r3, r3, #9
2400a63e:	0412      	lsls	r2, r2, #16
2400a640:	b29b      	uxth	r3, r3
2400a642:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400a646:	4313      	orrs	r3, r2
2400a648:	6872      	ldr	r2, [r6, #4]
2400a64a:	3a01      	subs	r2, #1
2400a64c:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400a650:	4313      	orrs	r3, r2
2400a652:	6932      	ldr	r2, [r6, #16]
2400a654:	3a01      	subs	r2, #1
2400a656:	0612      	lsls	r2, r2, #24
2400a658:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
2400a65c:	4313      	orrs	r3, r2
2400a65e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2400a660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400a662:	6972      	ldr	r2, [r6, #20]
2400a664:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
2400a668:	4313      	orrs	r3, r2
2400a66a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2400a66c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400a66e:	69b3      	ldr	r3, [r6, #24]
2400a670:	f022 0220 	bic.w	r2, r2, #32
2400a674:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400a676:	4b1b      	ldr	r3, [pc, #108]	; (2400a6e4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2400a678:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
2400a67a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400a67c:	f022 0210 	bic.w	r2, r2, #16
2400a680:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400a682:	6be1      	ldr	r1, [r4, #60]	; 0x3c
2400a684:	69f2      	ldr	r2, [r6, #28]
2400a686:	400b      	ands	r3, r1
2400a688:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
2400a68c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2400a68e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400a690:	f043 0310 	orr.w	r3, r3, #16
2400a694:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400a696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
2400a698:	b1ef      	cbz	r7, 2400a6d6 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2400a69a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2400a69c:	bf0c      	ite	eq
2400a69e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2400a6a2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
2400a6a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2400a6a8:	4c0d      	ldr	r4, [pc, #52]	; (2400a6e0 <RCCEx_PLL2_Config+0xec>)
2400a6aa:	6823      	ldr	r3, [r4, #0]
2400a6ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2400a6b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a6b2:	f7fb fd07 	bl	240060c4 <HAL_GetTick>
2400a6b6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400a6b8:	e004      	b.n	2400a6c4 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400a6ba:	f7fb fd03 	bl	240060c4 <HAL_GetTick>
2400a6be:	1b40      	subs	r0, r0, r5
2400a6c0:	2802      	cmp	r0, #2
2400a6c2:	d804      	bhi.n	2400a6ce <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400a6c4:	6823      	ldr	r3, [r4, #0]
2400a6c6:	011b      	lsls	r3, r3, #4
2400a6c8:	d5f7      	bpl.n	2400a6ba <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
2400a6ca:	2000      	movs	r0, #0
}
2400a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400a6ce:	2003      	movs	r0, #3
}
2400a6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400a6d2:	2001      	movs	r0, #1
}
2400a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400a6d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400a6da:	62e3      	str	r3, [r4, #44]	; 0x2c
2400a6dc:	e7e4      	b.n	2400a6a8 <RCCEx_PLL2_Config+0xb4>
2400a6de:	bf00      	nop
2400a6e0:	58024400 	.word	0x58024400
2400a6e4:	ffff0007 	.word	0xffff0007

2400a6e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2400a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400a6ea:	4c3a      	ldr	r4, [pc, #232]	; (2400a7d4 <RCCEx_PLL3_Config+0xec>)
2400a6ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400a6ee:	f003 0303 	and.w	r3, r3, #3
2400a6f2:	2b03      	cmp	r3, #3
2400a6f4:	d067      	beq.n	2400a7c6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2400a6f6:	6823      	ldr	r3, [r4, #0]
2400a6f8:	4606      	mov	r6, r0
2400a6fa:	460f      	mov	r7, r1
2400a6fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400a700:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a702:	f7fb fcdf 	bl	240060c4 <HAL_GetTick>
2400a706:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400a708:	e004      	b.n	2400a714 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400a70a:	f7fb fcdb 	bl	240060c4 <HAL_GetTick>
2400a70e:	1b43      	subs	r3, r0, r5
2400a710:	2b02      	cmp	r3, #2
2400a712:	d856      	bhi.n	2400a7c2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400a714:	6823      	ldr	r3, [r4, #0]
2400a716:	009a      	lsls	r2, r3, #2
2400a718:	d4f7      	bmi.n	2400a70a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2400a71a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400a71c:	6832      	ldr	r2, [r6, #0]
2400a71e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
2400a722:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400a726:	62a3      	str	r3, [r4, #40]	; 0x28
2400a728:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400a72c:	3b01      	subs	r3, #1
2400a72e:	3a01      	subs	r2, #1
2400a730:	025b      	lsls	r3, r3, #9
2400a732:	0412      	lsls	r2, r2, #16
2400a734:	b29b      	uxth	r3, r3
2400a736:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400a73a:	4313      	orrs	r3, r2
2400a73c:	6872      	ldr	r2, [r6, #4]
2400a73e:	3a01      	subs	r2, #1
2400a740:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400a744:	4313      	orrs	r3, r2
2400a746:	6932      	ldr	r2, [r6, #16]
2400a748:	3a01      	subs	r2, #1
2400a74a:	0612      	lsls	r2, r2, #24
2400a74c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
2400a750:	4313      	orrs	r3, r2
2400a752:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2400a754:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400a756:	6972      	ldr	r2, [r6, #20]
2400a758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
2400a75c:	4313      	orrs	r3, r2
2400a75e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2400a760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400a762:	69b3      	ldr	r3, [r6, #24]
2400a764:	f422 7200 	bic.w	r2, r2, #512	; 0x200
2400a768:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2400a76a:	4b1b      	ldr	r3, [pc, #108]	; (2400a7d8 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2400a76c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
2400a76e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400a770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400a774:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2400a776:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a778:	69f2      	ldr	r2, [r6, #28]
2400a77a:	400b      	ands	r3, r1
2400a77c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
2400a780:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2400a782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400a784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400a788:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400a78a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
2400a78c:	b1ef      	cbz	r7, 2400a7ca <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2400a78e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2400a790:	bf0c      	ite	eq
2400a792:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2400a796:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
2400a79a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2400a79c:	4c0d      	ldr	r4, [pc, #52]	; (2400a7d4 <RCCEx_PLL3_Config+0xec>)
2400a79e:	6823      	ldr	r3, [r4, #0]
2400a7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a7a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a7a6:	f7fb fc8d 	bl	240060c4 <HAL_GetTick>
2400a7aa:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400a7ac:	e004      	b.n	2400a7b8 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400a7ae:	f7fb fc89 	bl	240060c4 <HAL_GetTick>
2400a7b2:	1b40      	subs	r0, r0, r5
2400a7b4:	2802      	cmp	r0, #2
2400a7b6:	d804      	bhi.n	2400a7c2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400a7b8:	6823      	ldr	r3, [r4, #0]
2400a7ba:	009b      	lsls	r3, r3, #2
2400a7bc:	d5f7      	bpl.n	2400a7ae <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
2400a7be:	2000      	movs	r0, #0
}
2400a7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400a7c2:	2003      	movs	r0, #3
}
2400a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400a7c6:	2001      	movs	r0, #1
}
2400a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400a7ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400a7ce:	62e3      	str	r3, [r4, #44]	; 0x2c
2400a7d0:	e7e4      	b.n	2400a79c <RCCEx_PLL3_Config+0xb4>
2400a7d2:	bf00      	nop
2400a7d4:	58024400 	.word	0x58024400
2400a7d8:	ffff0007 	.word	0xffff0007

2400a7dc <HAL_RCCEx_PeriphCLKConfig>:
{
2400a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400a7e0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
2400a7e4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400a7e6:	011d      	lsls	r5, r3, #4
2400a7e8:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
2400a7ec:	d521      	bpl.n	2400a832 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400a7ee:	6e81      	ldr	r1, [r0, #104]	; 0x68
2400a7f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400a7f4:	f000 8572 	beq.w	2400b2dc <HAL_RCCEx_PeriphCLKConfig+0xb00>
2400a7f8:	d80e      	bhi.n	2400a818 <HAL_RCCEx_PeriphCLKConfig+0x3c>
2400a7fa:	2900      	cmp	r1, #0
2400a7fc:	f000 85cd 	beq.w	2400b39a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
2400a800:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2400a804:	f040 85c6 	bne.w	2400b394 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400a808:	2102      	movs	r1, #2
2400a80a:	3008      	adds	r0, #8
2400a80c:	f7ff fef2 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a810:	4606      	mov	r6, r0
    if (ret == HAL_OK)
2400a812:	b966      	cbnz	r6, 2400a82e <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400a814:	6ea1      	ldr	r1, [r4, #104]	; 0x68
2400a816:	e003      	b.n	2400a820 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400a818:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400a81c:	f040 85ba 	bne.w	2400b394 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400a820:	4aa3      	ldr	r2, [pc, #652]	; (2400aab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400a822:	2600      	movs	r6, #0
2400a824:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a826:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400a82a:	4319      	orrs	r1, r3
2400a82c:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400a82e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a832:	05d8      	lsls	r0, r3, #23
2400a834:	d50a      	bpl.n	2400a84c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
2400a836:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a838:	2904      	cmp	r1, #4
2400a83a:	d806      	bhi.n	2400a84a <HAL_RCCEx_PeriphCLKConfig+0x6e>
2400a83c:	e8df f011 	tbh	[pc, r1, lsl #1]
2400a840:	055f0558 	.word	0x055f0558
2400a844:	030e0576 	.word	0x030e0576
2400a848:	030e      	.short	0x030e
2400a84a:	2601      	movs	r6, #1
2400a84c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400a84e:	0599      	lsls	r1, r3, #22
2400a850:	d517      	bpl.n	2400a882 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
2400a852:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400a854:	2980      	cmp	r1, #128	; 0x80
2400a856:	f000 8570 	beq.w	2400b33a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
2400a85a:	f200 80e1 	bhi.w	2400aa20 <HAL_RCCEx_PeriphCLKConfig+0x244>
2400a85e:	2900      	cmp	r1, #0
2400a860:	f000 8442 	beq.w	2400b0e8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
2400a864:	2940      	cmp	r1, #64	; 0x40
2400a866:	f040 80e2 	bne.w	2400aa2e <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a86a:	2100      	movs	r1, #0
2400a86c:	f104 0008 	add.w	r0, r4, #8
2400a870:	f7ff fec0 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a874:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a876:	2d00      	cmp	r5, #0
2400a878:	f000 83f4 	beq.w	2400b064 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400a87c:	462e      	mov	r6, r5
2400a87e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a882:	055f      	lsls	r7, r3, #21
2400a884:	d51a      	bpl.n	2400a8bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
2400a886:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400a88a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400a88e:	f000 851d 	beq.w	2400b2cc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
2400a892:	f200 80cf 	bhi.w	2400aa34 <HAL_RCCEx_PeriphCLKConfig+0x258>
2400a896:	2900      	cmp	r1, #0
2400a898:	f000 842d 	beq.w	2400b0f6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
2400a89c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400a8a0:	f040 80d0 	bne.w	2400aa44 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a8a4:	2100      	movs	r1, #0
2400a8a6:	f104 0008 	add.w	r0, r4, #8
2400a8aa:	f7ff fea3 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a8ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a8b0:	2d00      	cmp	r5, #0
2400a8b2:	f000 83f6 	beq.w	2400b0a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400a8b6:	462e      	mov	r6, r5
2400a8b8:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a8bc:	0518      	lsls	r0, r3, #20
2400a8be:	d51a      	bpl.n	2400a8f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
2400a8c0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
2400a8c4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
2400a8c8:	f000 8528 	beq.w	2400b31c <HAL_RCCEx_PeriphCLKConfig+0xb40>
2400a8cc:	f200 80bd 	bhi.w	2400aa4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
2400a8d0:	2900      	cmp	r1, #0
2400a8d2:	f000 8403 	beq.w	2400b0dc <HAL_RCCEx_PeriphCLKConfig+0x900>
2400a8d6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
2400a8da:	f040 80be 	bne.w	2400aa5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a8de:	2100      	movs	r1, #0
2400a8e0:	f104 0008 	add.w	r0, r4, #8
2400a8e4:	f7ff fe86 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a8e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a8ea:	2d00      	cmp	r5, #0
2400a8ec:	f000 83af 	beq.w	2400b04e <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400a8f0:	462e      	mov	r6, r5
2400a8f2:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a8f6:	0199      	lsls	r1, r3, #6
2400a8f8:	d51a      	bpl.n	2400a930 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
2400a8fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400a8fc:	2920      	cmp	r1, #32
2400a8fe:	f000 84b0 	beq.w	2400b262 <HAL_RCCEx_PeriphCLKConfig+0xa86>
2400a902:	f200 80ad 	bhi.w	2400aa60 <HAL_RCCEx_PeriphCLKConfig+0x284>
2400a906:	b139      	cbz	r1, 2400a918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
2400a908:	2910      	cmp	r1, #16
2400a90a:	f040 80ac 	bne.w	2400aa66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400a90e:	4a68      	ldr	r2, [pc, #416]	; (2400aab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400a910:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400a912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a916:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400a918:	2d00      	cmp	r5, #0
2400a91a:	f040 8414 	bne.w	2400b146 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
2400a91e:	4a64      	ldr	r2, [pc, #400]	; (2400aab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400a920:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400a922:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400a924:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400a928:	430b      	orrs	r3, r1
2400a92a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400a92c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a930:	04df      	lsls	r7, r3, #19
2400a932:	d519      	bpl.n	2400a968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
2400a934:	6e21      	ldr	r1, [r4, #96]	; 0x60
2400a936:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
2400a93a:	f000 84e7 	beq.w	2400b30c <HAL_RCCEx_PeriphCLKConfig+0xb30>
2400a93e:	f200 8095 	bhi.w	2400aa6c <HAL_RCCEx_PeriphCLKConfig+0x290>
2400a942:	2900      	cmp	r1, #0
2400a944:	f000 83c4 	beq.w	2400b0d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
2400a948:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
2400a94c:	f040 8096 	bne.w	2400aa7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400a950:	2100      	movs	r1, #0
2400a952:	f104 0008 	add.w	r0, r4, #8
2400a956:	f7ff fe4d 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a95a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a95c:	2d00      	cmp	r5, #0
2400a95e:	f000 838b 	beq.w	2400b078 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400a962:	462e      	mov	r6, r5
2400a964:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a968:	0498      	lsls	r0, r3, #18
2400a96a:	d51d      	bpl.n	2400a9a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
2400a96c:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400a96e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400a972:	f000 8462 	beq.w	2400b23a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
2400a976:	f200 8084 	bhi.w	2400aa82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
2400a97a:	b149      	cbz	r1, 2400a990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400a97c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400a980:	f040 8088 	bne.w	2400aa94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400a984:	2101      	movs	r1, #1
2400a986:	f104 0008 	add.w	r0, r4, #8
2400a98a:	f7ff fe33 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a98e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a990:	2d00      	cmp	r5, #0
2400a992:	f040 83e7 	bne.w	2400b164 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2400a996:	4a46      	ldr	r2, [pc, #280]	; (2400aab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400a998:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400a99a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a99c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
2400a9a0:	430b      	orrs	r3, r1
2400a9a2:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400a9a4:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a9a8:	0459      	lsls	r1, r3, #17
2400a9aa:	d51d      	bpl.n	2400a9e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
2400a9ac:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
2400a9b0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400a9b4:	f000 844b 	beq.w	2400b24e <HAL_RCCEx_PeriphCLKConfig+0xa72>
2400a9b8:	d86f      	bhi.n	2400aa9a <HAL_RCCEx_PeriphCLKConfig+0x2be>
2400a9ba:	b141      	cbz	r1, 2400a9ce <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400a9bc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400a9c0:	d173      	bne.n	2400aaaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400a9c2:	2101      	movs	r1, #1
2400a9c4:	f104 0008 	add.w	r0, r4, #8
2400a9c8:	f7ff fe14 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400a9cc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400a9ce:	2d00      	cmp	r5, #0
2400a9d0:	f040 83d0 	bne.w	2400b174 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2400a9d4:	4a36      	ldr	r2, [pc, #216]	; (2400aab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400a9d6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
2400a9da:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a9dc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400a9e0:	430b      	orrs	r3, r1
2400a9e2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2400a9e4:	e9d4 3200 	ldrd	r3, r2, [r4]
2400a9e8:	041f      	lsls	r7, r3, #16
2400a9ea:	d50d      	bpl.n	2400aa08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
2400a9ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400a9ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400a9f2:	f000 8419 	beq.w	2400b228 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
2400a9f6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400a9fa:	f000 8237 	beq.w	2400ae6c <HAL_RCCEx_PeriphCLKConfig+0x690>
2400a9fe:	2900      	cmp	r1, #0
2400aa00:	f000 823a 	beq.w	2400ae78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
2400aa04:	2601      	movs	r6, #1
2400aa06:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400aa08:	01d8      	lsls	r0, r3, #7
2400aa0a:	d55f      	bpl.n	2400aacc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
2400aa0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400aa0e:	2903      	cmp	r1, #3
2400aa10:	f200 84ee 	bhi.w	2400b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
2400aa14:	e8df f011 	tbh	[pc, r1, lsl #1]
2400aa18:	04390054 	.word	0x04390054
2400aa1c:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
2400aa20:	29c0      	cmp	r1, #192	; 0xc0
2400aa22:	f43f af28 	beq.w	2400a876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
2400aa26:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400aa2a:	f43f af24 	beq.w	2400a876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
2400aa2e:	2601      	movs	r6, #1
2400aa30:	4635      	mov	r5, r6
2400aa32:	e726      	b.n	2400a882 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
2400aa34:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
2400aa38:	f43f af3a 	beq.w	2400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
2400aa3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2400aa40:	f43f af36 	beq.w	2400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
2400aa44:	2601      	movs	r6, #1
2400aa46:	4635      	mov	r5, r6
2400aa48:	e738      	b.n	2400a8bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
2400aa4a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
2400aa4e:	f43f af4c 	beq.w	2400a8ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
2400aa52:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400aa56:	f43f af48 	beq.w	2400a8ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
2400aa5a:	2601      	movs	r6, #1
2400aa5c:	4635      	mov	r5, r6
2400aa5e:	e74a      	b.n	2400a8f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
2400aa60:	2930      	cmp	r1, #48	; 0x30
2400aa62:	f43f af59 	beq.w	2400a918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
2400aa66:	2601      	movs	r6, #1
2400aa68:	4635      	mov	r5, r6
2400aa6a:	e761      	b.n	2400a930 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
2400aa6c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
2400aa70:	f43f af74 	beq.w	2400a95c <HAL_RCCEx_PeriphCLKConfig+0x180>
2400aa74:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400aa78:	f43f af70 	beq.w	2400a95c <HAL_RCCEx_PeriphCLKConfig+0x180>
2400aa7c:	2601      	movs	r6, #1
2400aa7e:	4635      	mov	r5, r6
2400aa80:	e772      	b.n	2400a968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
2400aa82:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
2400aa86:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
2400aa8a:	d081      	beq.n	2400a990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400aa8c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
2400aa90:	f43f af7e 	beq.w	2400a990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400aa94:	2601      	movs	r6, #1
2400aa96:	4635      	mov	r5, r6
2400aa98:	e786      	b.n	2400a9a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
2400aa9a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400aa9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
2400aaa2:	d094      	beq.n	2400a9ce <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400aaa4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
2400aaa8:	d091      	beq.n	2400a9ce <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400aaaa:	2601      	movs	r6, #1
2400aaac:	4635      	mov	r5, r6
2400aaae:	e79b      	b.n	2400a9e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
2400aab0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400aab4:	2102      	movs	r1, #2
2400aab6:	f104 0008 	add.w	r0, r4, #8
2400aaba:	f7ff fd9b 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400aabe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400aac0:	2d00      	cmp	r5, #0
2400aac2:	f000 8345 	beq.w	2400b150 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400aac6:	462e      	mov	r6, r5
2400aac8:	e9d4 3200 	ldrd	r3, r2, [r4]
2400aacc:	0259      	lsls	r1, r3, #9
2400aace:	f100 826c 	bmi.w	2400afaa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400aad2:	07d8      	lsls	r0, r3, #31
2400aad4:	d52f      	bpl.n	2400ab36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
2400aad6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400aad8:	2928      	cmp	r1, #40	; 0x28
2400aada:	d82a      	bhi.n	2400ab32 <HAL_RCCEx_PeriphCLKConfig+0x356>
2400aadc:	e8df f011 	tbh	[pc, r1, lsl #1]
2400aae0:	0029020a 	.word	0x0029020a
2400aae4:	00290029 	.word	0x00290029
2400aae8:	00290029 	.word	0x00290029
2400aaec:	00290029 	.word	0x00290029
2400aaf0:	0029044a 	.word	0x0029044a
2400aaf4:	00290029 	.word	0x00290029
2400aaf8:	00290029 	.word	0x00290029
2400aafc:	00290029 	.word	0x00290029
2400ab00:	00290204 	.word	0x00290204
2400ab04:	00290029 	.word	0x00290029
2400ab08:	00290029 	.word	0x00290029
2400ab0c:	00290029 	.word	0x00290029
2400ab10:	0029020a 	.word	0x0029020a
2400ab14:	00290029 	.word	0x00290029
2400ab18:	00290029 	.word	0x00290029
2400ab1c:	00290029 	.word	0x00290029
2400ab20:	0029020a 	.word	0x0029020a
2400ab24:	00290029 	.word	0x00290029
2400ab28:	00290029 	.word	0x00290029
2400ab2c:	00290029 	.word	0x00290029
2400ab30:	020a      	.short	0x020a
2400ab32:	2601      	movs	r6, #1
2400ab34:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400ab36:	0799      	lsls	r1, r3, #30
2400ab38:	d517      	bpl.n	2400ab6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400ab3a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400ab3c:	2905      	cmp	r1, #5
2400ab3e:	f200 845f 	bhi.w	2400b400 <HAL_RCCEx_PeriphCLKConfig+0xc24>
2400ab42:	e8df f011 	tbh	[pc, r1, lsl #1]
2400ab46:	000c      	.short	0x000c
2400ab48:	0006040c 	.word	0x0006040c
2400ab4c:	000c000c 	.word	0x000c000c
2400ab50:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400ab52:	2101      	movs	r1, #1
2400ab54:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400ab58:	f7ff fdc6 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400ab5c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400ab5e:	2d00      	cmp	r5, #0
2400ab60:	f000 82d8 	beq.w	2400b114 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400ab64:	462e      	mov	r6, r5
2400ab66:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ab6a:	075f      	lsls	r7, r3, #29
2400ab6c:	d518      	bpl.n	2400aba0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400ab6e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
2400ab72:	2905      	cmp	r1, #5
2400ab74:	f200 8440 	bhi.w	2400b3f8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
2400ab78:	e8df f011 	tbh	[pc, r1, lsl #1]
2400ab7c:	03e7000c 	.word	0x03e7000c
2400ab80:	000c0006 	.word	0x000c0006
2400ab84:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400ab88:	2101      	movs	r1, #1
2400ab8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400ab8e:	f7ff fdab 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400ab92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400ab94:	2d00      	cmp	r5, #0
2400ab96:	f000 82c7 	beq.w	2400b128 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400ab9a:	462e      	mov	r6, r5
2400ab9c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400aba0:	0698      	lsls	r0, r3, #26
2400aba2:	d51f      	bpl.n	2400abe4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
2400aba4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
2400aba8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400abac:	f000 8363 	beq.w	2400b276 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
2400abb0:	f200 811c 	bhi.w	2400adec <HAL_RCCEx_PeriphCLKConfig+0x610>
2400abb4:	b149      	cbz	r1, 2400abca <HAL_RCCEx_PeriphCLKConfig+0x3ee>
2400abb6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400abba:	f040 8121 	bne.w	2400ae00 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400abbe:	2100      	movs	r1, #0
2400abc0:	f104 0008 	add.w	r0, r4, #8
2400abc4:	f7ff fd16 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400abc8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400abca:	2d00      	cmp	r5, #0
2400abcc:	f040 82b7 	bne.w	2400b13e <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2400abd0:	4ab0      	ldr	r2, [pc, #704]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400abd2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
2400abd6:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400abd8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400abdc:	430b      	orrs	r3, r1
2400abde:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400abe0:	e9d4 3200 	ldrd	r3, r2, [r4]
2400abe4:	0659      	lsls	r1, r3, #25
2400abe6:	d51f      	bpl.n	2400ac28 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
2400abe8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
2400abec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
2400abf0:	f000 8306 	beq.w	2400b200 <HAL_RCCEx_PeriphCLKConfig+0xa24>
2400abf4:	f200 8107 	bhi.w	2400ae06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
2400abf8:	b149      	cbz	r1, 2400ac0e <HAL_RCCEx_PeriphCLKConfig+0x432>
2400abfa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
2400abfe:	f040 810c 	bne.w	2400ae1a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400ac02:	2100      	movs	r1, #0
2400ac04:	f104 0008 	add.w	r0, r4, #8
2400ac08:	f7ff fcf4 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400ac0c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400ac0e:	2d00      	cmp	r5, #0
2400ac10:	f040 82b4 	bne.w	2400b17c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2400ac14:	4a9f      	ldr	r2, [pc, #636]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ac16:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
2400ac1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400ac1c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
2400ac20:	430b      	orrs	r3, r1
2400ac22:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400ac24:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ac28:	061f      	lsls	r7, r3, #24
2400ac2a:	d51f      	bpl.n	2400ac6c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
2400ac2c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
2400ac30:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400ac34:	f000 82ee 	beq.w	2400b214 <HAL_RCCEx_PeriphCLKConfig+0xa38>
2400ac38:	f200 80f2 	bhi.w	2400ae20 <HAL_RCCEx_PeriphCLKConfig+0x644>
2400ac3c:	b149      	cbz	r1, 2400ac52 <HAL_RCCEx_PeriphCLKConfig+0x476>
2400ac3e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
2400ac42:	f040 80f7 	bne.w	2400ae34 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400ac46:	2100      	movs	r1, #0
2400ac48:	f104 0008 	add.w	r0, r4, #8
2400ac4c:	f7ff fcd2 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400ac50:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400ac52:	2d00      	cmp	r5, #0
2400ac54:	f040 828a 	bne.w	2400b16c <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2400ac58:	4a8e      	ldr	r2, [pc, #568]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ac5a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
2400ac5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400ac60:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
2400ac64:	430b      	orrs	r3, r1
2400ac66:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400ac68:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ac6c:	0718      	lsls	r0, r3, #28
2400ac6e:	d50d      	bpl.n	2400ac8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2400ac70:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400ac74:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
2400ac78:	f000 8310 	beq.w	2400b29c <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2400ac7c:	4985      	ldr	r1, [pc, #532]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ac7e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
2400ac80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
2400ac84:	4313      	orrs	r3, r2
2400ac86:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2400ac88:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ac8c:	06d9      	lsls	r1, r3, #27
2400ac8e:	d50d      	bpl.n	2400acac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2400ac90:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
2400ac94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400ac98:	f000 830c 	beq.w	2400b2b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2400ac9c:	497d      	ldr	r1, [pc, #500]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ac9e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
2400aca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400aca4:	4313      	orrs	r3, r2
2400aca6:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2400aca8:	e9d4 3200 	ldrd	r3, r2, [r4]
2400acac:	031f      	lsls	r7, r3, #12
2400acae:	d50e      	bpl.n	2400acce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
2400acb0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
2400acb4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400acb8:	f000 8102 	beq.w	2400aec0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
2400acbc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400acc0:	f000 8104 	beq.w	2400aecc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
2400acc4:	2900      	cmp	r1, #0
2400acc6:	f000 8290 	beq.w	2400b1ea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
2400acca:	2601      	movs	r6, #1
2400accc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400acce:	0358      	lsls	r0, r3, #13
2400acd0:	d50f      	bpl.n	2400acf2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
2400acd2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400acd6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400acda:	f000 80dd 	beq.w	2400ae98 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
2400acde:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400ace2:	f000 80df 	beq.w	2400aea4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
2400ace6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2400acea:	f000 8275 	beq.w	2400b1d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
2400acee:	2601      	movs	r6, #1
2400acf0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400acf2:	03d9      	lsls	r1, r3, #15
2400acf4:	d509      	bpl.n	2400ad0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
2400acf6:	6d21      	ldr	r1, [r4, #80]	; 0x50
2400acf8:	2900      	cmp	r1, #0
2400acfa:	f000 8258 	beq.w	2400b1ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
2400acfe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400ad02:	f000 81d9 	beq.w	2400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
2400ad06:	2601      	movs	r6, #1
2400ad08:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400ad0a:	009f      	lsls	r7, r3, #2
2400ad0c:	f100 80ff 	bmi.w	2400af0e <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400ad10:	0398      	lsls	r0, r3, #14
2400ad12:	d50e      	bpl.n	2400ad32 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
2400ad14:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
2400ad18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400ad1c:	f000 823e 	beq.w	2400b19c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
2400ad20:	f240 808b 	bls.w	2400ae3a <HAL_RCCEx_PeriphCLKConfig+0x65e>
2400ad24:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400ad28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400ad2c:	f000 8088 	beq.w	2400ae40 <HAL_RCCEx_PeriphCLKConfig+0x664>
2400ad30:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400ad32:	02d9      	lsls	r1, r3, #11
2400ad34:	d508      	bpl.n	2400ad48 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2400ad36:	4a57      	ldr	r2, [pc, #348]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ad38:	6f61      	ldr	r1, [r4, #116]	; 0x74
2400ad3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ad3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400ad40:	430b      	orrs	r3, r1
2400ad42:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
2400ad44:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ad48:	00df      	lsls	r7, r3, #3
2400ad4a:	d509      	bpl.n	2400ad60 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
2400ad4c:	4a51      	ldr	r2, [pc, #324]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ad4e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
2400ad52:	6913      	ldr	r3, [r2, #16]
2400ad54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400ad58:	430b      	orrs	r3, r1
2400ad5a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2400ad5c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ad60:	029d      	lsls	r5, r3, #10
2400ad62:	d508      	bpl.n	2400ad76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2400ad64:	4a4b      	ldr	r2, [pc, #300]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ad66:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
2400ad68:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ad6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400ad6e:	430b      	orrs	r3, r1
2400ad70:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2400ad72:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ad76:	0058      	lsls	r0, r3, #1
2400ad78:	d50b      	bpl.n	2400ad92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2400ad7a:	4b46      	ldr	r3, [pc, #280]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ad7c:	691a      	ldr	r2, [r3, #16]
2400ad7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ad82:	611a      	str	r2, [r3, #16]
2400ad84:	691a      	ldr	r2, [r3, #16]
2400ad86:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
2400ad8a:	430a      	orrs	r2, r1
2400ad8c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2400ad8e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ad92:	2b00      	cmp	r3, #0
2400ad94:	da08      	bge.n	2400ada8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2400ad96:	4a3f      	ldr	r2, [pc, #252]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ad98:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400ad9a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400ad9c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400ada0:	430b      	orrs	r3, r1
2400ada2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2400ada4:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ada8:	0219      	lsls	r1, r3, #8
2400adaa:	d508      	bpl.n	2400adbe <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2400adac:	4a39      	ldr	r2, [pc, #228]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400adae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
2400adb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400adb4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
2400adb8:	430b      	orrs	r3, r1
2400adba:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2400adbc:	6862      	ldr	r2, [r4, #4]
2400adbe:	07d3      	lsls	r3, r2, #31
2400adc0:	f100 80b1 	bmi.w	2400af26 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400adc4:	0797      	lsls	r7, r2, #30
2400adc6:	f100 80bb 	bmi.w	2400af40 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400adca:	0755      	lsls	r5, r2, #29
2400adcc:	f100 80c5 	bmi.w	2400af5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400add0:	0710      	lsls	r0, r2, #28
2400add2:	f100 80cf 	bmi.w	2400af74 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400add6:	06d1      	lsls	r1, r2, #27
2400add8:	f100 80d9 	bmi.w	2400af8e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400addc:	0692      	lsls	r2, r2, #26
2400adde:	f100 812a 	bmi.w	2400b036 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
2400ade2:	1e30      	subs	r0, r6, #0
2400ade4:	bf18      	it	ne
2400ade6:	2001      	movne	r0, #1
}
2400ade8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
2400adec:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400adf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
2400adf4:	f43f aee9 	beq.w	2400abca <HAL_RCCEx_PeriphCLKConfig+0x3ee>
2400adf8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
2400adfc:	f43f aee5 	beq.w	2400abca <HAL_RCCEx_PeriphCLKConfig+0x3ee>
2400ae00:	2601      	movs	r6, #1
2400ae02:	4635      	mov	r5, r6
2400ae04:	e6ee      	b.n	2400abe4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
2400ae06:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
2400ae0a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400ae0e:	f43f aefe 	beq.w	2400ac0e <HAL_RCCEx_PeriphCLKConfig+0x432>
2400ae12:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
2400ae16:	f43f aefa 	beq.w	2400ac0e <HAL_RCCEx_PeriphCLKConfig+0x432>
2400ae1a:	2601      	movs	r6, #1
2400ae1c:	4635      	mov	r5, r6
2400ae1e:	e703      	b.n	2400ac28 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
2400ae20:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
2400ae24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
2400ae28:	f43f af13 	beq.w	2400ac52 <HAL_RCCEx_PeriphCLKConfig+0x476>
2400ae2c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
2400ae30:	f43f af0f 	beq.w	2400ac52 <HAL_RCCEx_PeriphCLKConfig+0x476>
2400ae34:	2601      	movs	r6, #1
2400ae36:	4635      	mov	r5, r6
2400ae38:	e718      	b.n	2400ac6c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
2400ae3a:	2900      	cmp	r1, #0
2400ae3c:	f47f af78 	bne.w	2400ad30 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
2400ae40:	2d00      	cmp	r5, #0
2400ae42:	f040 81c5 	bne.w	2400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2400ae46:	4a13      	ldr	r2, [pc, #76]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ae48:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
2400ae4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400ae4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400ae52:	430b      	orrs	r3, r1
2400ae54:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400ae56:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ae5a:	e76a      	b.n	2400ad32 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
2400ae5c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
2400ae5e:	2d00      	cmp	r5, #0
2400ae60:	f000 8114 	beq.w	2400b08c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400ae64:	462e      	mov	r6, r5
2400ae66:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ae6a:	e4f0      	b.n	2400a84e <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400ae6c:	2101      	movs	r1, #1
2400ae6e:	f104 0008 	add.w	r0, r4, #8
2400ae72:	f7ff fbbf 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400ae76:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400ae78:	2d00      	cmp	r5, #0
2400ae7a:	f040 8147 	bne.w	2400b10c <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400ae7e:	4a05      	ldr	r2, [pc, #20]	; (2400ae94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400ae80:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400ae82:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ae84:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400ae88:	430b      	orrs	r3, r1
2400ae8a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400ae8c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400ae90:	e5ba      	b.n	2400aa08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
2400ae92:	bf00      	nop
2400ae94:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400ae98:	2101      	movs	r1, #1
2400ae9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400ae9e:	f7ff fc23 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400aea2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400aea4:	2d00      	cmp	r5, #0
2400aea6:	f040 8171 	bne.w	2400b18c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2400aeaa:	4aba      	ldr	r2, [pc, #744]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400aeac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400aeb0:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400aeb2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400aeb6:	430b      	orrs	r3, r1
2400aeb8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400aeba:	e9d4 3200 	ldrd	r3, r2, [r4]
2400aebe:	e718      	b.n	2400acf2 <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400aec0:	2102      	movs	r1, #2
2400aec2:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400aec6:	f7ff fc0f 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400aeca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400aecc:	2d00      	cmp	r5, #0
2400aece:	f040 8159 	bne.w	2400b184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400aed2:	4ab0      	ldr	r2, [pc, #704]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400aed4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
2400aed8:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400aeda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
2400aede:	430b      	orrs	r3, r1
2400aee0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400aee2:	e9d4 3200 	ldrd	r3, r2, [r4]
2400aee6:	e6f2      	b.n	2400acce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400aee8:	2101      	movs	r1, #1
2400aeea:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400aeee:	f7ff fbfb 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400aef2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400aef4:	2d00      	cmp	r5, #0
2400aef6:	f040 8105 	bne.w	2400b104 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2400aefa:	4aa6      	ldr	r2, [pc, #664]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400aefc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400aefe:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400af00:	f023 0338 	bic.w	r3, r3, #56	; 0x38
2400af04:	430b      	orrs	r3, r1
2400af06:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400af08:	e9d4 3200 	ldrd	r3, r2, [r4]
2400af0c:	e613      	b.n	2400ab36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400af0e:	2102      	movs	r1, #2
2400af10:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400af14:	f7ff fbe8 	bl	2400a6e8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400af18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400af1c:	2800      	cmp	r0, #0
2400af1e:	f43f aef7 	beq.w	2400ad10 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
2400af22:	2601      	movs	r6, #1
2400af24:	e6f4      	b.n	2400ad10 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400af26:	2100      	movs	r1, #0
2400af28:	f104 0008 	add.w	r0, r4, #8
2400af2c:	f7ff fb62 	bl	2400a5f4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400af30:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400af32:	2800      	cmp	r0, #0
2400af34:	f43f af46 	beq.w	2400adc4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400af38:	0797      	lsls	r7, r2, #30
2400af3a:	4606      	mov	r6, r0
2400af3c:	f57f af45 	bpl.w	2400adca <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400af40:	2101      	movs	r1, #1
2400af42:	f104 0008 	add.w	r0, r4, #8
2400af46:	f7ff fb55 	bl	2400a5f4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400af4a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400af4c:	2800      	cmp	r0, #0
2400af4e:	f43f af3c 	beq.w	2400adca <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400af52:	0755      	lsls	r5, r2, #29
2400af54:	4606      	mov	r6, r0
2400af56:	f57f af3b 	bpl.w	2400add0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400af5a:	2102      	movs	r1, #2
2400af5c:	f104 0008 	add.w	r0, r4, #8
2400af60:	f7ff fb48 	bl	2400a5f4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400af64:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400af66:	2800      	cmp	r0, #0
2400af68:	f43f af32 	beq.w	2400add0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400af6c:	4606      	mov	r6, r0
2400af6e:	0710      	lsls	r0, r2, #28
2400af70:	f57f af31 	bpl.w	2400add6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400af74:	2100      	movs	r1, #0
2400af76:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400af7a:	f7ff fbb5 	bl	2400a6e8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400af7e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400af80:	2800      	cmp	r0, #0
2400af82:	f43f af28 	beq.w	2400add6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400af86:	06d1      	lsls	r1, r2, #27
2400af88:	4606      	mov	r6, r0
2400af8a:	f57f af27 	bpl.w	2400addc <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400af8e:	f104 0528 	add.w	r5, r4, #40	; 0x28
2400af92:	2101      	movs	r1, #1
2400af94:	4628      	mov	r0, r5
2400af96:	f7ff fba7 	bl	2400a6e8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400af9a:	2800      	cmp	r0, #0
2400af9c:	f000 812e 	beq.w	2400b1fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400afa0:	6863      	ldr	r3, [r4, #4]
2400afa2:	069b      	lsls	r3, r3, #26
2400afa4:	d550      	bpl.n	2400b048 <HAL_RCCEx_PeriphCLKConfig+0x86c>
2400afa6:	4606      	mov	r6, r0
2400afa8:	e047      	b.n	2400b03a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400afaa:	4f7b      	ldr	r7, [pc, #492]	; (2400b198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
2400afac:	683b      	ldr	r3, [r7, #0]
2400afae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400afb2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
2400afb4:	f7fb f886 	bl	240060c4 <HAL_GetTick>
2400afb8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400afba:	e006      	b.n	2400afca <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2400afbc:	f7fb f882 	bl	240060c4 <HAL_GetTick>
2400afc0:	eba0 0008 	sub.w	r0, r0, r8
2400afc4:	2864      	cmp	r0, #100	; 0x64
2400afc6:	f200 81df 	bhi.w	2400b388 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400afca:	683b      	ldr	r3, [r7, #0]
2400afcc:	05da      	lsls	r2, r3, #23
2400afce:	d5f5      	bpl.n	2400afbc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
2400afd0:	2d00      	cmp	r5, #0
2400afd2:	f040 8208 	bne.w	2400b3e6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2400afd6:	4b6f      	ldr	r3, [pc, #444]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400afd8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400afdc:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400afde:	4051      	eors	r1, r2
2400afe0:	f411 7f40 	tst.w	r1, #768	; 0x300
2400afe4:	d00d      	beq.n	2400b002 <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400afe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
2400afe8:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400afea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
2400afee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
2400aff2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2400aff4:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400aff6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
2400affa:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
2400affc:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2400affe:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400b002:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400b006:	f000 81d0 	beq.w	2400b3aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400b00a:	f402 7340 	and.w	r3, r2, #768	; 0x300
2400b00e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2400b012:	f000 81de 	beq.w	2400b3d2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
2400b016:	4a5f      	ldr	r2, [pc, #380]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b018:	6913      	ldr	r3, [r2, #16]
2400b01a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2400b01e:	6113      	str	r3, [r2, #16]
2400b020:	4a5c      	ldr	r2, [pc, #368]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b022:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
2400b026:	6f11      	ldr	r1, [r2, #112]	; 0x70
2400b028:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400b02c:	430b      	orrs	r3, r1
2400b02e:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400b030:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b034:	e54d      	b.n	2400aad2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b036:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b03a:	2102      	movs	r1, #2
2400b03c:	4628      	mov	r0, r5
2400b03e:	f7ff fb53 	bl	2400a6e8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400b042:	2800      	cmp	r0, #0
2400b044:	f43f aecd 	beq.w	2400ade2 <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
2400b048:	2001      	movs	r0, #1
}
2400b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
2400b04e:	4a51      	ldr	r2, [pc, #324]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b050:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
2400b054:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400b056:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
2400b05a:	430b      	orrs	r3, r1
2400b05c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400b05e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b062:	e448      	b.n	2400a8f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
2400b064:	4a4b      	ldr	r2, [pc, #300]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b066:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b068:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b06a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
2400b06e:	430b      	orrs	r3, r1
2400b070:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400b072:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b076:	e404      	b.n	2400a882 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2400b078:	4a46      	ldr	r2, [pc, #280]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b07a:	6e21      	ldr	r1, [r4, #96]	; 0x60
2400b07c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
2400b082:	430b      	orrs	r3, r1
2400b084:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400b086:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b08a:	e46d      	b.n	2400a968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2400b08c:	4a41      	ldr	r2, [pc, #260]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b08e:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b090:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b092:	f023 0307 	bic.w	r3, r3, #7
2400b096:	430b      	orrs	r3, r1
2400b098:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400b09a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b09e:	f7ff bbd6 	b.w	2400a84e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2400b0a2:	4a3c      	ldr	r2, [pc, #240]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b0a4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400b0a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400b0aa:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
2400b0ae:	430b      	orrs	r3, r1
2400b0b0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400b0b2:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b0b6:	e401      	b.n	2400a8bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400b0b8:	2102      	movs	r1, #2
2400b0ba:	f104 0008 	add.w	r0, r4, #8
2400b0be:	f7ff fa99 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b0c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b0c4:	2d00      	cmp	r5, #0
2400b0c6:	d079      	beq.n	2400b1bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400b0c8:	462e      	mov	r6, r5
2400b0ca:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b0ce:	e61c      	b.n	2400ad0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b0d0:	4a30      	ldr	r2, [pc, #192]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b0d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b0d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400b0da:	e43f      	b.n	2400a95c <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b0dc:	4a2d      	ldr	r2, [pc, #180]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b0de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b0e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b0e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400b0e6:	e400      	b.n	2400a8ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b0e8:	4a2a      	ldr	r2, [pc, #168]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b0ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b0ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400b0f2:	f7ff bbc0 	b.w	2400a876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b0f6:	4a27      	ldr	r2, [pc, #156]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b0f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b0fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b0fe:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400b100:	f7ff bbd6 	b.w	2400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400b104:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b108:	462e      	mov	r6, r5
2400b10a:	e514      	b.n	2400ab36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400b10c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b110:	462e      	mov	r6, r5
2400b112:	e479      	b.n	2400aa08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2400b114:	4a1f      	ldr	r2, [pc, #124]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b116:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b118:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400b11a:	f023 0307 	bic.w	r3, r3, #7
2400b11e:	430b      	orrs	r3, r1
2400b120:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400b122:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b126:	e520      	b.n	2400ab6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2400b128:	4a1a      	ldr	r2, [pc, #104]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b12a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
2400b12e:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400b130:	f023 0307 	bic.w	r3, r3, #7
2400b134:	430b      	orrs	r3, r1
2400b136:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400b138:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b13c:	e530      	b.n	2400aba0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400b13e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b142:	462e      	mov	r6, r5
2400b144:	e54e      	b.n	2400abe4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400b146:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b14a:	462e      	mov	r6, r5
2400b14c:	f7ff bbf0 	b.w	2400a930 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2400b150:	4a10      	ldr	r2, [pc, #64]	; (2400b194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400b152:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b154:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400b156:	f023 0303 	bic.w	r3, r3, #3
2400b15a:	430b      	orrs	r3, r1
2400b15c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400b15e:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b162:	e4b3      	b.n	2400aacc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400b164:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b168:	462e      	mov	r6, r5
2400b16a:	e41d      	b.n	2400a9a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400b16c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b170:	462e      	mov	r6, r5
2400b172:	e57b      	b.n	2400ac6c <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2400b174:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b178:	462e      	mov	r6, r5
2400b17a:	e435      	b.n	2400a9e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400b17c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b180:	462e      	mov	r6, r5
2400b182:	e551      	b.n	2400ac28 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400b184:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b188:	462e      	mov	r6, r5
2400b18a:	e5a0      	b.n	2400acce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400b18c:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b190:	462e      	mov	r6, r5
2400b192:	e5ae      	b.n	2400acf2 <HAL_RCCEx_PeriphCLKConfig+0x516>
2400b194:	58024400 	.word	0x58024400
2400b198:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b19c:	4a9a      	ldr	r2, [pc, #616]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b19e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b1a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b1a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400b1a6:	2d00      	cmp	r5, #0
2400b1a8:	f43f ae4d 	beq.w	2400ae46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
2400b1ac:	e010      	b.n	2400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b1ae:	4a96      	ldr	r2, [pc, #600]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b1b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b1b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400b1b8:	2d00      	cmp	r5, #0
2400b1ba:	d185      	bne.n	2400b0c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2400b1bc:	4a92      	ldr	r2, [pc, #584]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b1be:	6d21      	ldr	r1, [r4, #80]	; 0x50
2400b1c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400b1c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400b1c6:	430b      	orrs	r3, r1
2400b1c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400b1ca:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b1ce:	e59c      	b.n	2400ad0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400b1d0:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b1d4:	462e      	mov	r6, r5
2400b1d6:	e5ac      	b.n	2400ad32 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b1d8:	4a8b      	ldr	r2, [pc, #556]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b1da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b1dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b1e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400b1e2:	2d00      	cmp	r5, #0
2400b1e4:	f43f ae61 	beq.w	2400aeaa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
2400b1e8:	e7d0      	b.n	2400b18c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400b1ea:	f104 0008 	add.w	r0, r4, #8
2400b1ee:	f7ff fa01 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b1f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b1f4:	2d00      	cmp	r5, #0
2400b1f6:	f43f ae6c 	beq.w	2400aed2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
2400b1fa:	e7c3      	b.n	2400b184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400b1fc:	6862      	ldr	r2, [r4, #4]
2400b1fe:	e5ed      	b.n	2400addc <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b200:	2102      	movs	r1, #2
2400b202:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b206:	f7ff fa6f 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b20a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b20c:	2d00      	cmp	r5, #0
2400b20e:	f43f ad01 	beq.w	2400ac14 <HAL_RCCEx_PeriphCLKConfig+0x438>
2400b212:	e7b3      	b.n	2400b17c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b214:	2102      	movs	r1, #2
2400b216:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b21a:	f7ff fa65 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b21e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b220:	2d00      	cmp	r5, #0
2400b222:	f43f ad19 	beq.w	2400ac58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
2400b226:	e7a1      	b.n	2400b16c <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b228:	4a77      	ldr	r2, [pc, #476]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b22a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b22c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b230:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400b232:	2d00      	cmp	r5, #0
2400b234:	f43f ae23 	beq.w	2400ae7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
2400b238:	e768      	b.n	2400b10c <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400b23a:	2101      	movs	r1, #1
2400b23c:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b240:	f7ff fa52 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b244:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b246:	2d00      	cmp	r5, #0
2400b248:	f43f aba5 	beq.w	2400a996 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
2400b24c:	e78a      	b.n	2400b164 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400b24e:	2101      	movs	r1, #1
2400b250:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b254:	f7ff fa48 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b258:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b25a:	2d00      	cmp	r5, #0
2400b25c:	f43f abba 	beq.w	2400a9d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
2400b260:	e788      	b.n	2400b174 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400b262:	2102      	movs	r1, #2
2400b264:	f104 0008 	add.w	r0, r4, #8
2400b268:	f7ff f9c4 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b26c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b26e:	2d00      	cmp	r5, #0
2400b270:	f43f ab55 	beq.w	2400a91e <HAL_RCCEx_PeriphCLKConfig+0x142>
2400b274:	e767      	b.n	2400b146 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b276:	2102      	movs	r1, #2
2400b278:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b27c:	f7ff fa34 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b280:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b282:	2d00      	cmp	r5, #0
2400b284:	f43f aca4 	beq.w	2400abd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
2400b288:	e759      	b.n	2400b13e <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b28a:	4a5f      	ldr	r2, [pc, #380]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b28c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b292:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400b294:	2d00      	cmp	r5, #0
2400b296:	f43f af5b 	beq.w	2400b150 <HAL_RCCEx_PeriphCLKConfig+0x974>
2400b29a:	e414      	b.n	2400aac6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400b29c:	2102      	movs	r1, #2
2400b29e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b2a2:	f7ff fa21 	bl	2400a6e8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2400b2a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400b2aa:	2800      	cmp	r0, #0
2400b2ac:	f43f ace6 	beq.w	2400ac7c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
2400b2b0:	2601      	movs	r6, #1
2400b2b2:	e4e3      	b.n	2400ac7c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400b2b4:	2102      	movs	r1, #2
2400b2b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b2ba:	f7ff fa15 	bl	2400a6e8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2400b2be:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400b2c2:	2800      	cmp	r0, #0
2400b2c4:	f43f acea 	beq.w	2400ac9c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
2400b2c8:	2601      	movs	r6, #1
2400b2ca:	e4e7      	b.n	2400ac9c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400b2cc:	2100      	movs	r1, #0
2400b2ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b2d2:	f7ff fa09 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b2d6:	4605      	mov	r5, r0
        break;
2400b2d8:	f7ff baea 	b.w	2400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400b2dc:	2102      	movs	r1, #2
2400b2de:	3028      	adds	r0, #40	; 0x28
2400b2e0:	f7ff fa02 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b2e4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
2400b2e6:	2e00      	cmp	r6, #0
2400b2e8:	f43f aa94 	beq.w	2400a814 <HAL_RCCEx_PeriphCLKConfig+0x38>
2400b2ec:	f7ff ba9f 	b.w	2400a82e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b2f0:	4a45      	ldr	r2, [pc, #276]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
2400b2f2:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b2f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b2fa:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400b2fc:	e5af      	b.n	2400ae5e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400b2fe:	2100      	movs	r1, #0
2400b300:	f104 0008 	add.w	r0, r4, #8
2400b304:	f7ff f976 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b308:	4605      	mov	r5, r0
        break;
2400b30a:	e5a8      	b.n	2400ae5e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400b30c:	2100      	movs	r1, #0
2400b30e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b312:	f7ff f9e9 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b316:	4605      	mov	r5, r0
        break;
2400b318:	f7ff bb20 	b.w	2400a95c <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400b31c:	2100      	movs	r1, #0
2400b31e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b322:	f7ff f9e1 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b326:	4605      	mov	r5, r0
        break;
2400b328:	f7ff badf 	b.w	2400a8ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400b32c:	2100      	movs	r1, #0
2400b32e:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b332:	f7ff f9d9 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b336:	4605      	mov	r5, r0
        break;
2400b338:	e591      	b.n	2400ae5e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400b33a:	2100      	movs	r1, #0
2400b33c:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400b340:	f7ff f9d2 	bl	2400a6e8 <RCCEx_PLL3_Config>
2400b344:	4605      	mov	r5, r0
        break;
2400b346:	f7ff ba96 	b.w	2400a876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400b34a:	2101      	movs	r1, #1
2400b34c:	f104 0008 	add.w	r0, r4, #8
2400b350:	f7ff f950 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b354:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b356:	2d00      	cmp	r5, #0
2400b358:	f43f aee6 	beq.w	2400b128 <HAL_RCCEx_PeriphCLKConfig+0x94c>
2400b35c:	e41d      	b.n	2400ab9a <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400b35e:	2101      	movs	r1, #1
2400b360:	f104 0008 	add.w	r0, r4, #8
2400b364:	f7ff f946 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b368:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b36a:	2d00      	cmp	r5, #0
2400b36c:	f43f aed2 	beq.w	2400b114 <HAL_RCCEx_PeriphCLKConfig+0x938>
2400b370:	f7ff bbf8 	b.w	2400ab64 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400b374:	2101      	movs	r1, #1
2400b376:	f104 0008 	add.w	r0, r4, #8
2400b37a:	f7ff f93b 	bl	2400a5f4 <RCCEx_PLL2_Config>
2400b37e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400b380:	2d00      	cmp	r5, #0
2400b382:	f43f adba 	beq.w	2400aefa <HAL_RCCEx_PeriphCLKConfig+0x71e>
2400b386:	e6bd      	b.n	2400b104 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
2400b388:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400b38a:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
2400b38e:	4635      	mov	r5, r6
2400b390:	f7ff bb9f 	b.w	2400aad2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400b394:	2601      	movs	r6, #1
2400b396:	f7ff ba4c 	b.w	2400a832 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400b39a:	4a1b      	ldr	r2, [pc, #108]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b39c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400b39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400b3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400b3a4:	6e81      	ldr	r1, [r0, #104]	; 0x68
2400b3a6:	f7ff ba3b 	b.w	2400a820 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
2400b3aa:	f7fa fe8b 	bl	240060c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400b3ae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
2400b3b2:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400b3b4:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400b3b8:	e004      	b.n	2400b3c4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400b3ba:	f7fa fe83 	bl	240060c4 <HAL_GetTick>
2400b3be:	1bc0      	subs	r0, r0, r7
2400b3c0:	4548      	cmp	r0, r9
2400b3c2:	d8e1      	bhi.n	2400b388 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400b3c4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
2400b3c8:	079b      	lsls	r3, r3, #30
2400b3ca:	d5f6      	bpl.n	2400b3ba <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400b3cc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400b3d0:	e61b      	b.n	2400b00a <HAL_RCCEx_PeriphCLKConfig+0x82e>
2400b3d2:	490d      	ldr	r1, [pc, #52]	; (2400b408 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400b3d4:	4b0d      	ldr	r3, [pc, #52]	; (2400b40c <HAL_RCCEx_PeriphCLKConfig+0xc30>)
2400b3d6:	ea03 1312 	and.w	r3, r3, r2, lsr #4
2400b3da:	690a      	ldr	r2, [r1, #16]
2400b3dc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
2400b3e0:	4313      	orrs	r3, r2
2400b3e2:	610b      	str	r3, [r1, #16]
2400b3e4:	e61c      	b.n	2400b020 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400b3e6:	e9d4 3200 	ldrd	r3, r2, [r4]
2400b3ea:	462e      	mov	r6, r5
2400b3ec:	f7ff bb71 	b.w	2400aad2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
2400b3f0:	2601      	movs	r6, #1
2400b3f2:	4635      	mov	r5, r6
2400b3f4:	f7ff bb6a 	b.w	2400aacc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400b3f8:	2601      	movs	r6, #1
2400b3fa:	4635      	mov	r5, r6
2400b3fc:	f7ff bbd0 	b.w	2400aba0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400b400:	2601      	movs	r6, #1
2400b402:	4635      	mov	r5, r6
2400b404:	f7ff bbb1 	b.w	2400ab6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
2400b408:	58024400 	.word	0x58024400
2400b40c:	00ffffcf 	.word	0x00ffffcf

2400b410 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b410:	4b4f      	ldr	r3, [pc, #316]	; (2400b550 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
2400b412:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b414:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400b416:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2400b418:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
2400b41a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400b41e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400b422:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
2400b424:	d05c      	beq.n	2400b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400b426:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2400b42a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b42e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400b432:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400b436:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400b438:	ee07 4a90 	vmov	s15, r4
2400b43c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400b440:	d003      	beq.n	2400b44a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
2400b442:	2902      	cmp	r1, #2
2400b444:	d075      	beq.n	2400b532 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
2400b446:	2900      	cmp	r1, #0
2400b448:	d04f      	beq.n	2400b4ea <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b44a:	ee07 2a90 	vmov	s15, r2
2400b44e:	eddf 6a41 	vldr	s13, [pc, #260]	; 2400b554 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
2400b452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b458:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400b45c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 2400b558 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400b460:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400b464:	ee06 3a90 	vmov	s13, r3
2400b468:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400b46c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b470:	ee76 6a85 	vadd.f32	s13, s13, s10
2400b474:	eee7 6a25 	vfma.f32	s13, s14, s11
2400b478:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400b47c:	4a34      	ldr	r2, [pc, #208]	; (2400b550 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
2400b47e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b482:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400b484:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400b488:	ee07 3a10 	vmov	s14, r3
2400b48c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
2400b490:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400b492:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b496:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b49e:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2400b4a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400b4a4:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400b4a8:	ee07 3a10 	vmov	s14, r3
2400b4ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400b4b0:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b4bc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2400b4c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400b4c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400b4c6:	ee07 3a90 	vmov	s15, r3
2400b4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b4ce:	ee77 7a86 	vadd.f32	s15, s15, s12
2400b4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400b4d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400b4da:	ed80 7a02 	vstr	s14, [r0, #8]
}
2400b4de:	4770      	bx	lr
2400b4e0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2400b4e2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2400b4e6:	6082      	str	r2, [r0, #8]
}
2400b4e8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400b4ea:	6819      	ldr	r1, [r3, #0]
2400b4ec:	0689      	lsls	r1, r1, #26
2400b4ee:	d527      	bpl.n	2400b540 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b4f0:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b4f2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b4f6:	4919      	ldr	r1, [pc, #100]	; (2400b55c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b4f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b4fe:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b506:	ed9f 5a14 	vldr	s10, [pc, #80]	; 2400b558 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400b50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b50e:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b510:	ee06 3a90 	vmov	s13, r3
2400b514:	ee05 1a90 	vmov	s11, r1
2400b518:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b51c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400b520:	ee76 6a86 	vadd.f32	s13, s13, s12
2400b524:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400b528:	eee7 6a05 	vfma.f32	s13, s14, s10
2400b52c:	ee66 6a26 	vmul.f32	s13, s12, s13
2400b530:	e7a4      	b.n	2400b47c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b532:	ee07 2a90 	vmov	s15, r2
2400b536:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2400b560 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
2400b53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b53e:	e78a      	b.n	2400b456 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400b540:	ee07 2a90 	vmov	s15, r2
2400b544:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400b564 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
2400b548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b54c:	e783      	b.n	2400b456 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
2400b54e:	bf00      	nop
2400b550:	58024400 	.word	0x58024400
2400b554:	4a742400 	.word	0x4a742400
2400b558:	39000000 	.word	0x39000000
2400b55c:	03d09000 	.word	0x03d09000
2400b560:	4b742400 	.word	0x4b742400
2400b564:	4c742400 	.word	0x4c742400

2400b568 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b568:	4b4f      	ldr	r3, [pc, #316]	; (2400b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
2400b56a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b56c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400b56e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400b570:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
2400b572:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400b576:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400b57a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
2400b57c:	d05c      	beq.n	2400b638 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400b57e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400b582:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b586:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400b58a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400b58e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400b590:	ee07 4a90 	vmov	s15, r4
2400b594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400b598:	d003      	beq.n	2400b5a2 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
2400b59a:	2902      	cmp	r1, #2
2400b59c:	d075      	beq.n	2400b68a <HAL_RCCEx_GetPLL3ClockFreq+0x122>
2400b59e:	2900      	cmp	r1, #0
2400b5a0:	d04f      	beq.n	2400b642 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b5a2:	ee07 2a90 	vmov	s15, r2
2400b5a6:	eddf 6a41 	vldr	s13, [pc, #260]	; 2400b6ac <HAL_RCCEx_GetPLL3ClockFreq+0x144>
2400b5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400b5b0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400b5b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 2400b6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400b5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400b5bc:	ee06 3a90 	vmov	s13, r3
2400b5c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400b5c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b5c8:	ee76 6a85 	vadd.f32	s13, s13, s10
2400b5cc:	eee7 6a25 	vfma.f32	s13, s14, s11
2400b5d0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400b5d4:	4a34      	ldr	r2, [pc, #208]	; (2400b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
2400b5d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b5da:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400b5dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400b5e0:	ee07 3a10 	vmov	s14, r3
2400b5e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
2400b5e8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400b5ea:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b5ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b5f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b5f6:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2400b5fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400b5fc:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400b600:	ee07 3a10 	vmov	s14, r3
2400b604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400b608:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b614:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2400b618:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400b61a:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400b61e:	ee07 3a90 	vmov	s15, r3
2400b622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b626:	ee77 7a86 	vadd.f32	s15, s15, s12
2400b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400b62e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400b632:	ed80 7a02 	vstr	s14, [r0, #8]
}
2400b636:	4770      	bx	lr
2400b638:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2400b63a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400b63e:	6082      	str	r2, [r0, #8]
}
2400b640:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400b642:	6819      	ldr	r1, [r3, #0]
2400b644:	0689      	lsls	r1, r1, #26
2400b646:	d527      	bpl.n	2400b698 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b648:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b64a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b64e:	4919      	ldr	r1, [pc, #100]	; (2400b6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b650:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b656:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b65a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b65e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 2400b6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400b662:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b666:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b668:	ee06 3a90 	vmov	s13, r3
2400b66c:	ee05 1a90 	vmov	s11, r1
2400b670:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b674:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400b678:	ee76 6a86 	vadd.f32	s13, s13, s12
2400b67c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400b680:	eee7 6a05 	vfma.f32	s13, s14, s10
2400b684:	ee66 6a26 	vmul.f32	s13, s12, s13
2400b688:	e7a4      	b.n	2400b5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b68a:	ee07 2a90 	vmov	s15, r2
2400b68e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2400b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
2400b692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b696:	e78a      	b.n	2400b5ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400b698:	ee07 2a90 	vmov	s15, r2
2400b69c:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400b6bc <HAL_RCCEx_GetPLL3ClockFreq+0x154>
2400b6a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b6a4:	e783      	b.n	2400b5ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
2400b6a6:	bf00      	nop
2400b6a8:	58024400 	.word	0x58024400
2400b6ac:	4a742400 	.word	0x4a742400
2400b6b0:	39000000 	.word	0x39000000
2400b6b4:	03d09000 	.word	0x03d09000
2400b6b8:	4b742400 	.word	0x4b742400
2400b6bc:	4c742400 	.word	0x4c742400

2400b6c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b6c0:	4b4f      	ldr	r3, [pc, #316]	; (2400b800 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
2400b6c2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b6c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400b6c6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400b6c8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
2400b6ca:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400b6ce:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400b6d2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
2400b6d4:	d05c      	beq.n	2400b790 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400b6d6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400b6da:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400b6de:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400b6e2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400b6e6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400b6e8:	ee07 4a90 	vmov	s15, r4
2400b6ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400b6f0:	d07e      	beq.n	2400b7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
2400b6f2:	2902      	cmp	r1, #2
2400b6f4:	d075      	beq.n	2400b7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
2400b6f6:	2900      	cmp	r1, #0
2400b6f8:	d04f      	beq.n	2400b79a <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b6fa:	ee07 2a90 	vmov	s15, r2
2400b6fe:	eddf 6a41 	vldr	s13, [pc, #260]	; 2400b804 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
2400b702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b708:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400b70c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 2400b808 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
2400b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400b714:	ee06 3a90 	vmov	s13, r3
2400b718:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400b71c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b720:	ee76 6a85 	vadd.f32	s13, s13, s10
2400b724:	eee7 6a25 	vfma.f32	s13, s14, s11
2400b728:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400b72c:	4a34      	ldr	r2, [pc, #208]	; (2400b800 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
2400b72e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b732:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400b734:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400b738:	ee07 3a10 	vmov	s14, r3
2400b73c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
2400b740:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400b742:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b746:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b74a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b74e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2400b752:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400b754:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400b758:	ee07 3a10 	vmov	s14, r3
2400b75c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400b760:	ee37 7a06 	vadd.f32	s14, s14, s12
2400b764:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400b768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400b76c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400b770:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400b772:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400b776:	ee07 3a90 	vmov	s15, r3
2400b77a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b77e:	ee77 7a86 	vadd.f32	s15, s15, s12
2400b782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400b786:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400b78a:	ed80 7a02 	vstr	s14, [r0, #8]
}
2400b78e:	4770      	bx	lr
2400b790:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2400b792:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2400b796:	6082      	str	r2, [r0, #8]
}
2400b798:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400b79a:	6819      	ldr	r1, [r3, #0]
2400b79c:	0689      	lsls	r1, r1, #26
2400b79e:	d5ac      	bpl.n	2400b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b7a0:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7a2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b7a6:	4919      	ldr	r1, [pc, #100]	; (2400b80c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b7ae:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b7b6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 2400b808 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
2400b7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b7be:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7c0:	ee06 3a90 	vmov	s13, r3
2400b7c4:	ee05 1a90 	vmov	s11, r1
2400b7c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400b7cc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400b7d0:	ee76 6a86 	vadd.f32	s13, s13, s12
2400b7d4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400b7d8:	eee7 6a05 	vfma.f32	s13, s14, s10
2400b7dc:	ee66 6a26 	vmul.f32	s13, s12, s13
2400b7e0:	e7a4      	b.n	2400b72c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7e2:	ee07 2a90 	vmov	s15, r2
2400b7e6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2400b810 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
2400b7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b7ee:	e78a      	b.n	2400b706 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400b7f0:	ee07 2a90 	vmov	s15, r2
2400b7f4:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400b814 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
2400b7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400b7fc:	e783      	b.n	2400b706 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
2400b7fe:	bf00      	nop
2400b800:	58024400 	.word	0x58024400
2400b804:	4c742400 	.word	0x4c742400
2400b808:	39000000 	.word	0x39000000
2400b80c:	03d09000 	.word	0x03d09000
2400b810:	4b742400 	.word	0x4b742400
2400b814:	4a742400 	.word	0x4a742400

2400b818 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400b818:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
2400b81c:	430b      	orrs	r3, r1
{
2400b81e:	b500      	push	{lr}
2400b820:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400b822:	f000 8084 	beq.w	2400b92e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
2400b826:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
2400b82a:	430b      	orrs	r3, r1
2400b82c:	d039      	beq.n	2400b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400b82e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400b832:	430b      	orrs	r3, r1
2400b834:	f000 80e6 	beq.w	2400ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
2400b838:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
2400b83c:	430b      	orrs	r3, r1
2400b83e:	f000 8089 	beq.w	2400b954 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400b842:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
2400b846:	430b      	orrs	r3, r1
2400b848:	d061      	beq.n	2400b90e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2400b84a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400b84e:	430b      	orrs	r3, r1
2400b850:	f000 8112 	beq.w	2400ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2400b854:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
2400b858:	430b      	orrs	r3, r1
2400b85a:	f000 80a3 	beq.w	2400b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400b85e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400b862:	430b      	orrs	r3, r1
2400b864:	f000 80fa 	beq.w	2400ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2400b868:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
2400b86c:	430b      	orrs	r3, r1
2400b86e:	f000 8143 	beq.w	2400baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400b872:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
2400b876:	ea50 0301 	orrs.w	r3, r0, r1
2400b87a:	d137      	bne.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2400b87c:	4a99      	ldr	r2, [pc, #612]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b87e:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
2400b884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400b888:	f000 8083 	beq.w	2400b992 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400b88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400b890:	f000 8156 	beq.w	2400bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400b894:	bb53      	cbnz	r3, 2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2400b896:	6810      	ldr	r0, [r2, #0]
2400b898:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400b89c:	d044      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
2400b89e:	4892      	ldr	r0, [pc, #584]	; (2400bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
2400b8a0:	e042      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
2400b8a2:	4a90      	ldr	r2, [pc, #576]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b8a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b8a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
2400b8aa:	2b80      	cmp	r3, #128	; 0x80
2400b8ac:	f000 80a5 	beq.w	2400b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400b8b0:	d920      	bls.n	2400b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
2400b8b2:	2bc0      	cmp	r3, #192	; 0xc0
2400b8b4:	d037      	beq.n	2400b926 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400b8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b8ba:	d117      	bne.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400b8bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400b8be:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400b8c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400b8c4:	0749      	lsls	r1, r1, #29
2400b8c6:	d502      	bpl.n	2400b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
2400b8c8:	2b00      	cmp	r3, #0
2400b8ca:	f000 80c1 	beq.w	2400ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400b8ce:	4a85      	ldr	r2, [pc, #532]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b8d0:	6812      	ldr	r2, [r2, #0]
2400b8d2:	05d0      	lsls	r0, r2, #23
2400b8d4:	d503      	bpl.n	2400b8de <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
2400b8d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400b8da:	f000 8101 	beq.w	2400bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400b8de:	4a81      	ldr	r2, [pc, #516]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b8e0:	6812      	ldr	r2, [r2, #0]
2400b8e2:	0391      	lsls	r1, r2, #14
2400b8e4:	d502      	bpl.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400b8e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400b8ea:	d0d8      	beq.n	2400b89e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
2400b8ec:	2000      	movs	r0, #0
}
2400b8ee:	b005      	add	sp, #20
2400b8f0:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
2400b8f4:	2b00      	cmp	r3, #0
2400b8f6:	d04c      	beq.n	2400b992 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400b8f8:	2b40      	cmp	r3, #64	; 0x40
2400b8fa:	d1f7      	bne.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400b8fc:	6810      	ldr	r0, [r2, #0]
2400b8fe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400b902:	d011      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400b904:	a801      	add	r0, sp, #4
2400b906:	f7ff fd83 	bl	2400b410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400b90a:	9801      	ldr	r0, [sp, #4]
2400b90c:	e00c      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400b90e:	4a75      	ldr	r2, [pc, #468]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b910:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b912:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
2400b916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b91a:	d06e      	beq.n	2400b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400b91c:	d937      	bls.n	2400b98e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
2400b91e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2400b922:	f040 8087 	bne.w	2400ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
2400b926:	4871      	ldr	r0, [pc, #452]	; (2400baec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
2400b928:	b005      	add	sp, #20
2400b92a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2400b92e:	4b6d      	ldr	r3, [pc, #436]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400b932:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
2400b936:	2b04      	cmp	r3, #4
2400b938:	d8d8      	bhi.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400b93a:	a201      	add	r2, pc, #4	; (adr r2, 2400b940 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
2400b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400b940:	2400b9e3 	.word	0x2400b9e3
2400b944:	2400b9bf 	.word	0x2400b9bf
2400b948:	2400b9cf 	.word	0x2400b9cf
2400b94c:	2400b927 	.word	0x2400b927
2400b950:	2400b9cb 	.word	0x2400b9cb
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
2400b954:	4a63      	ldr	r2, [pc, #396]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b956:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400b958:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
2400b95c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400b960:	d04b      	beq.n	2400b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400b962:	d944      	bls.n	2400b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
2400b964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2400b968:	d0dd      	beq.n	2400b926 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400b96a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400b96e:	d1bd      	bne.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400b970:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400b972:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400b974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400b978:	0752      	lsls	r2, r2, #29
2400b97a:	d5a8      	bpl.n	2400b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
2400b97c:	2b00      	cmp	r3, #0
2400b97e:	d1a6      	bne.n	2400b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400b980:	4b58      	ldr	r3, [pc, #352]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b982:	485b      	ldr	r0, [pc, #364]	; (2400baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2400b984:	681b      	ldr	r3, [r3, #0]
2400b986:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400b98a:	40d8      	lsrs	r0, r3
2400b98c:	e7cc      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
2400b98e:	2b00      	cmp	r3, #0
2400b990:	d154      	bne.n	2400ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400b992:	6810      	ldr	r0, [r2, #0]
2400b994:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400b998:	d0c6      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2400b99a:	a801      	add	r0, sp, #4
2400b99c:	f7ff fe90 	bl	2400b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400b9a0:	9802      	ldr	r0, [sp, #8]
2400b9a2:	e7c1      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2400b9a4:	4a4f      	ldr	r2, [pc, #316]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b9a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400b9a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
2400b9ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400b9b0:	f000 80d0 	beq.w	2400bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
2400b9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400b9b8:	d0da      	beq.n	2400b970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400b9ba:	2b00      	cmp	r3, #0
2400b9bc:	d196      	bne.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400b9be:	4b49      	ldr	r3, [pc, #292]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b9c0:	6818      	ldr	r0, [r3, #0]
2400b9c2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400b9c6:	d0af      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400b9c8:	e79c      	b.n	2400b904 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400b9ca:	4a46      	ldr	r2, [pc, #280]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b9cc:	e776      	b.n	2400b8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400b9ce:	4b45      	ldr	r3, [pc, #276]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b9d0:	6818      	ldr	r0, [r3, #0]
2400b9d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400b9d6:	d0a7      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400b9d8:	a801      	add	r0, sp, #4
2400b9da:	f7ff fdc5 	bl	2400b568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400b9de:	9801      	ldr	r0, [sp, #4]
2400b9e0:	e7a2      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400b9e2:	4b40      	ldr	r3, [pc, #256]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400b9e4:	6818      	ldr	r0, [r3, #0]
2400b9e6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400b9ea:	d09d      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400b9ec:	e7d5      	b.n	2400b99a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400b9ee:	2b00      	cmp	r3, #0
2400b9f0:	d0cf      	beq.n	2400b992 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400b9f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400b9f6:	d081      	beq.n	2400b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
2400b9f8:	e778      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400b9fa:	6810      	ldr	r0, [r2, #0]
2400b9fc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400ba00:	d092      	beq.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400ba02:	e7e9      	b.n	2400b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
2400ba04:	4a37      	ldr	r2, [pc, #220]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400ba06:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400ba08:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
2400ba0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400ba10:	d0f3      	beq.n	2400b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400ba12:	d806      	bhi.n	2400ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
2400ba14:	2b00      	cmp	r3, #0
2400ba16:	d0bc      	beq.n	2400b992 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400ba18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2400ba1c:	f43f af6e 	beq.w	2400b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
2400ba20:	e764      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400ba22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400ba26:	f43f af7e 	beq.w	2400b926 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400ba2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400ba2e:	f43f af45 	beq.w	2400b8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
2400ba32:	e75b      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
2400ba34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ba38:	d09a      	beq.n	2400b970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400ba3a:	e757      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400ba3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400ba40:	f43f af5c 	beq.w	2400b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
2400ba44:	e752      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400ba46:	6810      	ldr	r0, [r2, #0]
2400ba48:	f010 0004 	ands.w	r0, r0, #4
2400ba4c:	f43f af6c 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400ba50:	6813      	ldr	r3, [r2, #0]
2400ba52:	4827      	ldr	r0, [pc, #156]	; (2400baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2400ba54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400ba58:	40d8      	lsrs	r0, r3
2400ba5a:	e765      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2400ba5c:	4b21      	ldr	r3, [pc, #132]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400ba5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
2400ba60:	03d2      	lsls	r2, r2, #15
2400ba62:	d5bf      	bpl.n	2400b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400ba64:	6818      	ldr	r0, [r3, #0]
2400ba66:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400ba6a:	f43f af5d 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400ba6e:	a801      	add	r0, sp, #4
2400ba70:	f7ff fcce 	bl	2400b410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2400ba74:	9803      	ldr	r0, [sp, #12]
2400ba76:	e757      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2400ba78:	4a1a      	ldr	r2, [pc, #104]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400ba7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ba7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400ba80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2400ba84:	d0df      	beq.n	2400ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
2400ba86:	d810      	bhi.n	2400baaa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
2400ba88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400ba8c:	d058      	beq.n	2400bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400ba8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400ba92:	d118      	bne.n	2400bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400ba94:	4b13      	ldr	r3, [pc, #76]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400ba96:	6818      	ldr	r0, [r3, #0]
2400ba98:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400ba9c:	f43f af44 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400baa0:	a801      	add	r0, sp, #4
2400baa2:	f7ff fd61 	bl	2400b568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2400baa6:	9802      	ldr	r0, [sp, #8]
2400baa8:	e73e      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
2400baaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400baae:	d012      	beq.n	2400bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
2400bab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400bab4:	f47f af1a 	bne.w	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2400bab8:	4b0a      	ldr	r3, [pc, #40]	; (2400bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400baba:	6818      	ldr	r0, [r3, #0]
2400babc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400bac0:	f43f af32 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400bac4:	e6eb      	b.n	2400b89e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
2400bac6:	2b00      	cmp	r3, #0
2400bac8:	f47f af10 	bne.w	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
2400bacc:	b005      	add	sp, #20
2400bace:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
2400bad2:	f7fe bd47 	b.w	2400a564 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400bad6:	6810      	ldr	r0, [r2, #0]
2400bad8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400badc:	f43f af24 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
2400bae0:	4804      	ldr	r0, [pc, #16]	; (2400baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2400bae2:	e721      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400bae4:	58024400 	.word	0x58024400
2400bae8:	00f42400 	.word	0x00f42400
2400baec:	00bb8000 	.word	0x00bb8000
2400baf0:	03d09000 	.word	0x03d09000
2400baf4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2400baf8:	4b28      	ldr	r3, [pc, #160]	; (2400bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400bafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400bafc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
2400bb00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400bb04:	d037      	beq.n	2400bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
2400bb06:	d814      	bhi.n	2400bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
2400bb08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400bb0c:	d03f      	beq.n	2400bb8e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
2400bb0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400bb12:	d0bf      	beq.n	2400ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
2400bb14:	2b00      	cmp	r3, #0
2400bb16:	f47f aee9 	bne.w	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
2400bb1a:	f7fe fce3 	bl	2400a4e4 <HAL_RCC_GetHCLKFreq>
2400bb1e:	4b1f      	ldr	r3, [pc, #124]	; (2400bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400bb20:	4a1f      	ldr	r2, [pc, #124]	; (2400bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
2400bb22:	6a1b      	ldr	r3, [r3, #32]
2400bb24:	f3c3 1302 	ubfx	r3, r3, #4, #3
2400bb28:	5cd3      	ldrb	r3, [r2, r3]
2400bb2a:	f003 031f 	and.w	r3, r3, #31
2400bb2e:	40d8      	lsrs	r0, r3
        break;
2400bb30:	e6fa      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
2400bb32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400bb36:	d017      	beq.n	2400bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
2400bb38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2400bb3c:	d0bc      	beq.n	2400bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400bb3e:	e6d5      	b.n	2400b8ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400bb40:	6810      	ldr	r0, [r2, #0]
2400bb42:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400bb46:	f43f aeef 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400bb4a:	a801      	add	r0, sp, #4
2400bb4c:	f7ff fc60 	bl	2400b410 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2400bb50:	9802      	ldr	r0, [sp, #8]
2400bb52:	e6e9      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400bb54:	6810      	ldr	r0, [r2, #0]
2400bb56:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400bb5a:	f43f aee5 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400bb5e:	a801      	add	r0, sp, #4
2400bb60:	f7ff fd02 	bl	2400b568 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2400bb64:	9803      	ldr	r0, [sp, #12]
2400bb66:	e6df      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400bb68:	4b0c      	ldr	r3, [pc, #48]	; (2400bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400bb6a:	6818      	ldr	r0, [r3, #0]
2400bb6c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400bb70:	f43f aeda 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400bb74:	e7b4      	b.n	2400bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400bb76:	4b09      	ldr	r3, [pc, #36]	; (2400bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400bb78:	6818      	ldr	r0, [r3, #0]
2400bb7a:	f010 0004 	ands.w	r0, r0, #4
2400bb7e:	f43f aed3 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400bb82:	681b      	ldr	r3, [r3, #0]
2400bb84:	4807      	ldr	r0, [pc, #28]	; (2400bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
2400bb86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400bb8a:	40d8      	lsrs	r0, r3
2400bb8c:	e6cc      	b.n	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400bb8e:	4b03      	ldr	r3, [pc, #12]	; (2400bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400bb90:	6818      	ldr	r0, [r3, #0]
2400bb92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400bb96:	f43f aec7 	beq.w	2400b928 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400bb9a:	e7d6      	b.n	2400bb4a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2400bb9c:	58024400 	.word	0x58024400
2400bba0:	2401d08c 	.word	0x2401d08c
2400bba4:	03d09000 	.word	0x03d09000

2400bba8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
2400bba8:	2800      	cmp	r0, #0
2400bbaa:	d03c      	beq.n	2400bc26 <HAL_RNG_Init+0x7e>
{
2400bbac:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400bbae:	7a43      	ldrb	r3, [r0, #9]
2400bbb0:	4604      	mov	r4, r0
2400bbb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400bbb6:	2b00      	cmp	r3, #0
2400bbb8:	d031      	beq.n	2400bc1e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400bbba:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
2400bbbc:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400bbbe:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
2400bbc0:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400bbc2:	6813      	ldr	r3, [r2, #0]
2400bbc4:	f023 0320 	bic.w	r3, r3, #32
2400bbc8:	430b      	orrs	r3, r1
2400bbca:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
2400bbcc:	6822      	ldr	r2, [r4, #0]
2400bbce:	6813      	ldr	r3, [r2, #0]
2400bbd0:	f043 0304 	orr.w	r3, r3, #4
2400bbd4:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
2400bbd6:	6823      	ldr	r3, [r4, #0]
2400bbd8:	685b      	ldr	r3, [r3, #4]
2400bbda:	0658      	lsls	r0, r3, #25
2400bbdc:	d503      	bpl.n	2400bbe6 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400bbde:	2304      	movs	r3, #4
    return HAL_ERROR;
2400bbe0:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
2400bbe2:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
2400bbe4:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
2400bbe6:	f7fa fa6d 	bl	240060c4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400bbea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
2400bbec:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400bbee:	685b      	ldr	r3, [r3, #4]
2400bbf0:	0759      	lsls	r1, r3, #29
2400bbf2:	d50e      	bpl.n	2400bc12 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400bbf4:	f7fa fa66 	bl	240060c4 <HAL_GetTick>
2400bbf8:	1b43      	subs	r3, r0, r5
2400bbfa:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400bbfc:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400bbfe:	d9f6      	bls.n	2400bbee <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400bc00:	685a      	ldr	r2, [r3, #4]
2400bc02:	0752      	lsls	r2, r2, #29
2400bc04:	d5f3      	bpl.n	2400bbee <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
2400bc06:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400bc08:	2302      	movs	r3, #2
        return HAL_ERROR;
2400bc0a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
2400bc0c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400bc0e:	60e3      	str	r3, [r4, #12]
}
2400bc10:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400bc12:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
2400bc14:	2201      	movs	r2, #1
  return HAL_OK;
2400bc16:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
2400bc18:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400bc1a:	60e3      	str	r3, [r4, #12]
}
2400bc1c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400bc1e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400bc20:	f7f9 fd6a 	bl	240056f8 <HAL_RNG_MspInit>
2400bc24:	e7c9      	b.n	2400bbba <HAL_RNG_Init+0x12>
    return HAL_ERROR;
2400bc26:	2001      	movs	r0, #1
}
2400bc28:	4770      	bx	lr
2400bc2a:	bf00      	nop

2400bc2c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
2400bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400bc2e:	7a03      	ldrb	r3, [r0, #8]
2400bc30:	2b01      	cmp	r3, #1
2400bc32:	d027      	beq.n	2400bc84 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
2400bc34:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
2400bc36:	2201      	movs	r2, #1
2400bc38:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
2400bc3a:	4293      	cmp	r3, r2
2400bc3c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400bc3e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
2400bc40:	d006      	beq.n	2400bc50 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400bc42:	2304      	movs	r3, #4
    status = HAL_ERROR;
2400bc44:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400bc46:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
2400bc48:	2300      	movs	r3, #0
2400bc4a:	7223      	strb	r3, [r4, #8]

  return status;
}
2400bc4c:	4630      	mov	r0, r6
2400bc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
2400bc50:	2302      	movs	r3, #2
2400bc52:	460d      	mov	r5, r1
2400bc54:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
2400bc56:	f7fa fa35 	bl	240060c4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400bc5a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
2400bc5c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400bc5e:	685a      	ldr	r2, [r3, #4]
2400bc60:	07d2      	lsls	r2, r2, #31
2400bc62:	d412      	bmi.n	2400bc8a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400bc64:	f7fa fa2e 	bl	240060c4 <HAL_GetTick>
2400bc68:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400bc6a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400bc6c:	2802      	cmp	r0, #2
2400bc6e:	d9f6      	bls.n	2400bc5e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400bc70:	685a      	ldr	r2, [r3, #4]
2400bc72:	f012 0201 	ands.w	r2, r2, #1
2400bc76:	d1f2      	bne.n	2400bc5e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
2400bc78:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400bc7a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
2400bc7c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400bc7e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400bc80:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
2400bc82:	e7e3      	b.n	2400bc4c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
2400bc84:	2602      	movs	r6, #2
}
2400bc86:	4630      	mov	r0, r6
2400bc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
2400bc8a:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
2400bc8c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400bc8e:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
2400bc90:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
2400bc92:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
2400bc94:	7262      	strb	r2, [r4, #9]
2400bc96:	e7d7      	b.n	2400bc48 <HAL_RNG_GenerateRandomNumber+0x1c>

2400bc98 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400bc9a:	4ba6      	ldr	r3, [pc, #664]	; (2400bf34 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400bc9c:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400bc9e:	6802      	ldr	r2, [r0, #0]
2400bca0:	429a      	cmp	r2, r3
2400bca2:	d01c      	beq.n	2400bcde <HAL_SAI_Init.part.0+0x46>
2400bca4:	3320      	adds	r3, #32
2400bca6:	429a      	cmp	r2, r3
2400bca8:	d019      	beq.n	2400bcde <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400bcaa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400bcae:	429a      	cmp	r2, r3
2400bcb0:	d04d      	beq.n	2400bd4e <HAL_SAI_Init.part.0+0xb6>
2400bcb2:	3320      	adds	r3, #32
2400bcb4:	429a      	cmp	r2, r3
2400bcb6:	d04a      	beq.n	2400bd4e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400bcb8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400bcbc:	429a      	cmp	r2, r3
2400bcbe:	f000 8134 	beq.w	2400bf2a <HAL_SAI_Init.part.0+0x292>
2400bcc2:	3320      	adds	r3, #32
2400bcc4:	429a      	cmp	r2, r3
2400bcc6:	f000 8130 	beq.w	2400bf2a <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
2400bcca:	4b9b      	ldr	r3, [pc, #620]	; (2400bf38 <HAL_SAI_Init.part.0+0x2a0>)
2400bccc:	429a      	cmp	r2, r3
2400bcce:	f000 812e 	beq.w	2400bf2e <HAL_SAI_Init.part.0+0x296>
2400bcd2:	3320      	adds	r3, #32
2400bcd4:	429a      	cmp	r2, r3
2400bcd6:	f000 812a 	beq.w	2400bf2e <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2400bcda:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
2400bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400bcde:	4e97      	ldr	r6, [pc, #604]	; (2400bf3c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
2400bce0:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400bce4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400bce8:	2b00      	cmp	r3, #0
2400bcea:	d037      	beq.n	2400bd5c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400bcec:	4b94      	ldr	r3, [pc, #592]	; (2400bf40 <HAL_SAI_Init.part.0+0x2a8>)
2400bcee:	4995      	ldr	r1, [pc, #596]	; (2400bf44 <HAL_SAI_Init.part.0+0x2ac>)
2400bcf0:	681b      	ldr	r3, [r3, #0]
2400bcf2:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
2400bcf6:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400bcf8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400bcfa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400bcfe:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400bd00:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2400bd02:	2b00      	cmp	r3, #0
2400bd04:	d031      	beq.n	2400bd6a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400bd06:	6822      	ldr	r2, [r4, #0]
    count--;
2400bd08:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400bd0a:	6815      	ldr	r5, [r2, #0]
2400bd0c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
2400bd10:	d1f7      	bne.n	2400bd02 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
2400bd12:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
2400bd14:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
2400bd16:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
2400bd18:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
2400bd1c:	f000 8156 	beq.w	2400bfcc <HAL_SAI_Init.part.0+0x334>
2400bd20:	4293      	cmp	r3, r2
2400bd22:	bf19      	ittee	ne
2400bd24:	4610      	movne	r0, r2
2400bd26:	2103      	movne	r1, #3
2400bd28:	2123      	moveq	r1, #35	; 0x23
2400bd2a:	2022      	moveq	r0, #34	; 0x22
2400bd2c:	bf15      	itete	ne
2400bd2e:	2701      	movne	r7, #1
2400bd30:	2721      	moveq	r7, #33	; 0x21
2400bd32:	2200      	movne	r2, #0
2400bd34:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
2400bd36:	68a3      	ldr	r3, [r4, #8]
2400bd38:	3b01      	subs	r3, #1
2400bd3a:	2b04      	cmp	r3, #4
2400bd3c:	f200 8181 	bhi.w	2400c042 <HAL_SAI_Init.part.0+0x3aa>
2400bd40:	e8df f013 	tbh	[pc, r3, lsl #1]
2400bd44:	001c00e8 	.word	0x001c00e8
2400bd48:	001b00ef 	.word	0x001b00ef
2400bd4c:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
2400bd4e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
2400bd52:	4e7d      	ldr	r6, [pc, #500]	; (2400bf48 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
2400bd54:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400bd58:	2b00      	cmp	r3, #0
2400bd5a:	d1c7      	bne.n	2400bcec <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
2400bd5c:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
2400bd5e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
2400bd62:	f7f9 fd31 	bl	240057c8 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
2400bd66:	6822      	ldr	r2, [r4, #0]
2400bd68:	e7c0      	b.n	2400bcec <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400bd6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
2400bd6e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400bd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bd74:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400bd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
2400bd7a:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400bd7c:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
2400bd80:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2400bd82:	6a23      	ldr	r3, [r4, #32]
2400bd84:	2b00      	cmp	r3, #0
2400bd86:	d04a      	beq.n	2400be1e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400bd88:	6823      	ldr	r3, [r4, #0]
2400bd8a:	4a6a      	ldr	r2, [pc, #424]	; (2400bf34 <HAL_SAI_Init.part.0+0x29c>)
2400bd8c:	4293      	cmp	r3, r2
2400bd8e:	f000 8131 	beq.w	2400bff4 <HAL_SAI_Init.part.0+0x35c>
2400bd92:	486e      	ldr	r0, [pc, #440]	; (2400bf4c <HAL_SAI_Init.part.0+0x2b4>)
2400bd94:	1a18      	subs	r0, r3, r0
2400bd96:	fab0 f080 	clz	r0, r0
2400bd9a:	0940      	lsrs	r0, r0, #5
2400bd9c:	2800      	cmp	r0, #0
2400bd9e:	f040 8129 	bne.w	2400bff4 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400bda2:	4a6b      	ldr	r2, [pc, #428]	; (2400bf50 <HAL_SAI_Init.part.0+0x2b8>)
2400bda4:	4293      	cmp	r3, r2
2400bda6:	f000 8133 	beq.w	2400c010 <HAL_SAI_Init.part.0+0x378>
2400bdaa:	3220      	adds	r2, #32
2400bdac:	4293      	cmp	r3, r2
2400bdae:	f000 812f 	beq.w	2400c010 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400bdb2:	4a68      	ldr	r2, [pc, #416]	; (2400bf54 <HAL_SAI_Init.part.0+0x2bc>)
2400bdb4:	4293      	cmp	r3, r2
2400bdb6:	f000 8124 	beq.w	2400c002 <HAL_SAI_Init.part.0+0x36a>
2400bdba:	3220      	adds	r2, #32
2400bdbc:	4293      	cmp	r3, r2
2400bdbe:	f000 8120 	beq.w	2400c002 <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
2400bdc2:	4a5d      	ldr	r2, [pc, #372]	; (2400bf38 <HAL_SAI_Init.part.0+0x2a0>)
2400bdc4:	4293      	cmp	r3, r2
2400bdc6:	f000 8133 	beq.w	2400c030 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
2400bdca:	4a63      	ldr	r2, [pc, #396]	; (2400bf58 <HAL_SAI_Init.part.0+0x2c0>)
2400bdcc:	4293      	cmp	r3, r2
2400bdce:	f000 8129 	beq.w	2400c024 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2400bdd2:	69a3      	ldr	r3, [r4, #24]
2400bdd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2400bdd8:	f000 80fd 	beq.w	2400bfd6 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400bddc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400bdde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400bde2:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400bde4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400bde8:	ea4f 0340 	mov.w	r3, r0, lsl #1
2400bdec:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400bdee:	bf0c      	ite	eq
2400bdf0:	2202      	moveq	r2, #2
2400bdf2:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400bdf4:	fb00 f202 	mul.w	r2, r0, r2
2400bdf8:	0212      	lsls	r2, r2, #8
2400bdfa:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400bdfe:	4a57      	ldr	r2, [pc, #348]	; (2400bf5c <HAL_SAI_Init.part.0+0x2c4>)
2400be00:	fba2 0203 	umull	r0, r2, r2, r3
2400be04:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
2400be06:	eb02 0082 	add.w	r0, r2, r2, lsl #2
2400be0a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400be0e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
2400be10:	bf08      	it	eq
2400be12:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400be14:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
2400be16:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400be18:	d101      	bne.n	2400be1e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2400be1a:	0852      	lsrs	r2, r2, #1
2400be1c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400be1e:	6863      	ldr	r3, [r4, #4]
2400be20:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400be24:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400be26:	f040 80cc 	bne.w	2400bfc2 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400be2a:	2b01      	cmp	r3, #1
2400be2c:	bf14      	ite	ne
2400be2e:	f44f 7500 	movne.w	r5, #512	; 0x200
2400be32:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400be34:	f7fa f95e 	bl	240060f4 <HAL_GetREVID>
2400be38:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400be3c:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400be3e:	f0c0 80ac 	bcc.w	2400bf9a <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400be42:	6811      	ldr	r1, [r2, #0]
2400be44:	4b46      	ldr	r3, [pc, #280]	; (2400bf60 <HAL_SAI_Init.part.0+0x2c8>)
2400be46:	400b      	ands	r3, r1
2400be48:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400be4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400be4c:	e9d4 1300 	ldrd	r1, r3, [r4]
2400be50:	431a      	orrs	r2, r3
2400be52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2400be54:	431a      	orrs	r2, r3
2400be56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
2400be58:	431a      	orrs	r2, r3
2400be5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400be5c:	431a      	orrs	r2, r3
2400be5e:	6963      	ldr	r3, [r4, #20]
2400be60:	431a      	orrs	r2, r3
2400be62:	69a3      	ldr	r3, [r4, #24]
2400be64:	431a      	orrs	r2, r3
2400be66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400be68:	431a      	orrs	r2, r3
2400be6a:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400be6c:	431a      	orrs	r2, r3
2400be6e:	680b      	ldr	r3, [r1, #0]
2400be70:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400be72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400be74:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400be78:	4b3a      	ldr	r3, [pc, #232]	; (2400bf64 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400be7a:	433a      	orrs	r2, r7
2400be7c:	432a      	orrs	r2, r5
2400be7e:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400be80:	6822      	ldr	r2, [r4, #0]
2400be82:	6851      	ldr	r1, [r2, #4]
2400be84:	400b      	ands	r3, r1
2400be86:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2400be88:	6b21      	ldr	r1, [r4, #48]	; 0x30
2400be8a:	69e3      	ldr	r3, [r4, #28]
2400be8c:	6822      	ldr	r2, [r4, #0]
2400be8e:	430b      	orrs	r3, r1
2400be90:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400be92:	430b      	orrs	r3, r1
2400be94:	6851      	ldr	r1, [r2, #4]
2400be96:	430b      	orrs	r3, r1
2400be98:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400be9a:	6822      	ldr	r2, [r4, #0]
2400be9c:	4b32      	ldr	r3, [pc, #200]	; (2400bf68 <HAL_SAI_Init.part.0+0x2d0>)
2400be9e:	6891      	ldr	r1, [r2, #8]
2400bea0:	400b      	ands	r3, r1
2400bea2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400bea4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
2400bea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400bea8:	6821      	ldr	r1, [r4, #0]
2400beaa:	4313      	orrs	r3, r2
2400beac:	6e22      	ldr	r2, [r4, #96]	; 0x60
2400beae:	6888      	ldr	r0, [r1, #8]
2400beb0:	4313      	orrs	r3, r2
2400beb2:	6d62      	ldr	r2, [r4, #84]	; 0x54
2400beb4:	4303      	orrs	r3, r0
2400beb6:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400beb8:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400bebc:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2400bebe:	6da2      	ldr	r2, [r4, #88]	; 0x58
2400bec0:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400bec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400bec6:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400bec8:	6822      	ldr	r2, [r4, #0]
2400beca:	68d3      	ldr	r3, [r2, #12]
2400becc:	4003      	ands	r3, r0
2400bece:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400bed0:	6821      	ldr	r1, [r4, #0]
2400bed2:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
2400bed6:	68ca      	ldr	r2, [r1, #12]
2400bed8:	4303      	orrs	r3, r0
2400beda:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400bedc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400bede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400bee2:	6f22      	ldr	r2, [r4, #112]	; 0x70
2400bee4:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400bee6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400beea:	4a12      	ldr	r2, [pc, #72]	; (2400bf34 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400beec:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400beee:	6823      	ldr	r3, [r4, #0]
2400bef0:	4293      	cmp	r3, r2
2400bef2:	d03f      	beq.n	2400bf74 <HAL_SAI_Init.part.0+0x2dc>
2400bef4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400bef8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400befc:	4293      	cmp	r3, r2
2400befe:	d039      	beq.n	2400bf74 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400bf00:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400bf02:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400bf04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
2400bf08:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
2400bf0a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400bf0e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400bf14:	f44f 6780 	mov.w	r7, #1024	; 0x400
2400bf18:	e732      	b.n	2400bd80 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
2400bf1a:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400bf1c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400bf20:	e72e      	b.n	2400bd80 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400bf22:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400bf24:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400bf28:	e72a      	b.n	2400bd80 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
2400bf2a:	4e10      	ldr	r6, [pc, #64]	; (2400bf6c <HAL_SAI_Init.part.0+0x2d4>)
2400bf2c:	e6d8      	b.n	2400bce0 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
2400bf2e:	4e10      	ldr	r6, [pc, #64]	; (2400bf70 <HAL_SAI_Init.part.0+0x2d8>)
2400bf30:	e6d6      	b.n	2400bce0 <HAL_SAI_Init.part.0+0x48>
2400bf32:	bf00      	nop
2400bf34:	40015804 	.word	0x40015804
2400bf38:	58005404 	.word	0x58005404
2400bf3c:	40015800 	.word	0x40015800
2400bf40:	20000750 	.word	0x20000750
2400bf44:	95cbec1b 	.word	0x95cbec1b
2400bf48:	40015c00 	.word	0x40015c00
2400bf4c:	40015824 	.word	0x40015824
2400bf50:	40015c04 	.word	0x40015c04
2400bf54:	40016004 	.word	0x40016004
2400bf58:	58005424 	.word	0x58005424
2400bf5c:	cccccccd 	.word	0xcccccccd
2400bf60:	f005c010 	.word	0xf005c010
2400bf64:	ffff1ff0 	.word	0xffff1ff0
2400bf68:	fff88000 	.word	0xfff88000
2400bf6c:	40016000 	.word	0x40016000
2400bf70:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400bf74:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400bf76:	f023 0301 	bic.w	r3, r3, #1
2400bf7a:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2400bf7c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400bf80:	2b01      	cmp	r3, #1
2400bf82:	d1bd      	bne.n	2400bf00 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400bf84:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400bf88:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400bf8a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400bf8e:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400bf90:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400bf92:	f043 0301 	orr.w	r3, r3, #1
2400bf96:	6473      	str	r3, [r6, #68]	; 0x44
2400bf98:	e7b2      	b.n	2400bf00 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400bf9a:	6811      	ldr	r1, [r2, #0]
2400bf9c:	4b2a      	ldr	r3, [pc, #168]	; (2400c048 <HAL_SAI_Init.part.0+0x3b0>)
2400bf9e:	400b      	ands	r3, r1
2400bfa0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400bfa2:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400bfa4:	e9d4 1300 	ldrd	r1, r3, [r4]
2400bfa8:	431a      	orrs	r2, r3
2400bfaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2400bfac:	431a      	orrs	r2, r3
2400bfae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
2400bfb0:	431a      	orrs	r2, r3
2400bfb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400bfb4:	431a      	orrs	r2, r3
2400bfb6:	6963      	ldr	r3, [r4, #20]
2400bfb8:	431a      	orrs	r2, r3
2400bfba:	69a3      	ldr	r3, [r4, #24]
2400bfbc:	431a      	orrs	r2, r3
2400bfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400bfc0:	e754      	b.n	2400be6c <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400bfc2:	2b01      	cmp	r3, #1
2400bfc4:	bf08      	it	eq
2400bfc6:	f44f 7500 	moveq.w	r5, #512	; 0x200
2400bfca:	e733      	b.n	2400be34 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
2400bfcc:	2113      	movs	r1, #19
2400bfce:	2012      	movs	r0, #18
2400bfd0:	2711      	movs	r7, #17
2400bfd2:	2210      	movs	r2, #16
2400bfd4:	e6af      	b.n	2400bd36 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400bfd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400bfd8:	2904      	cmp	r1, #4
2400bfda:	d030      	beq.n	2400c03e <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400bfdc:	2908      	cmp	r1, #8
2400bfde:	d01e      	beq.n	2400c01e <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
2400bfe0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400bfe2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
2400bfe6:	0043      	lsls	r3, r0, #1
2400bfe8:	6a20      	ldr	r0, [r4, #32]
2400bfea:	fb00 f202 	mul.w	r2, r0, r2
2400bfee:	fbb3 f3f2 	udiv	r3, r3, r2
2400bff2:	e704      	b.n	2400bdfe <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400bff4:	f44f 7080 	mov.w	r0, #256	; 0x100
2400bff8:	2100      	movs	r1, #0
2400bffa:	f7ff fc0d 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400bffe:	6823      	ldr	r3, [r4, #0]
2400c000:	e6cf      	b.n	2400bda2 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400c002:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c006:	2100      	movs	r1, #0
2400c008:	f7ff fc06 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
2400c00c:	6823      	ldr	r3, [r4, #0]
2400c00e:	e6d8      	b.n	2400bdc2 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400c010:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c014:	2100      	movs	r1, #0
2400c016:	f7ff fbff 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400c01a:	6823      	ldr	r3, [r4, #0]
2400c01c:	e6c9      	b.n	2400bdb2 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400c01e:	f44f 7280 	mov.w	r2, #256	; 0x100
2400c022:	e7de      	b.n	2400bfe2 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400c024:	2100      	movs	r1, #0
2400c026:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c02a:	f7ff fbf5 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
2400c02e:	e6d0      	b.n	2400bdd2 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400c030:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c034:	2100      	movs	r1, #0
2400c036:	f7ff fbef 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400c03a:	6823      	ldr	r3, [r4, #0]
2400c03c:	e6c5      	b.n	2400bdca <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400c03e:	2240      	movs	r2, #64	; 0x40
2400c040:	e7cf      	b.n	2400bfe2 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
2400c042:	2700      	movs	r7, #0
2400c044:	e69c      	b.n	2400bd80 <HAL_SAI_Init.part.0+0xe8>
2400c046:	bf00      	nop
2400c048:	f805c010 	.word	0xf805c010

2400c04c <HAL_SAI_InitProtocol>:
  switch (protocol)
2400c04c:	2902      	cmp	r1, #2
{
2400c04e:	b538      	push	{r3, r4, r5, lr}
2400c050:	4604      	mov	r4, r0
  switch (protocol)
2400c052:	d935      	bls.n	2400c0c0 <HAL_SAI_InitProtocol+0x74>
2400c054:	1ec8      	subs	r0, r1, #3
2400c056:	2801      	cmp	r0, #1
2400c058:	d830      	bhi.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400c05a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400c05c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400c05e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400c060:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400c062:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400c064:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400c066:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400c06a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c06c:	6860      	ldr	r0, [r4, #4]
2400c06e:	f030 0002 	bics.w	r0, r0, #2
2400c072:	bf0c      	ite	eq
2400c074:	2501      	moveq	r5, #1
2400c076:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
2400c078:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400c07a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400c07e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400c080:	bf0c      	ite	eq
2400c082:	2001      	moveq	r0, #1
2400c084:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400c086:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2400c088:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400c08c:	65a0      	str	r0, [r4, #88]	; 0x58
2400c08e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400c090:	2a03      	cmp	r2, #3
2400c092:	d813      	bhi.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
2400c094:	e8df f002 	tbb	[pc, r2]
2400c098:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400c09c:	6823      	ldr	r3, [r4, #0]
2400c09e:	4a47      	ldr	r2, [pc, #284]	; (2400c1bc <HAL_SAI_InitProtocol+0x170>)
2400c0a0:	4293      	cmp	r3, r2
2400c0a2:	d005      	beq.n	2400c0b0 <HAL_SAI_InitProtocol+0x64>
2400c0a4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400c0a8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400c0ac:	4293      	cmp	r3, r2
2400c0ae:	d105      	bne.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
2400c0b0:	6863      	ldr	r3, [r4, #4]
2400c0b2:	2b01      	cmp	r3, #1
2400c0b4:	d102      	bne.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400c0b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400c0b8:	2b00      	cmp	r3, #0
2400c0ba:	d037      	beq.n	2400c12c <HAL_SAI_InitProtocol+0xe0>
}
2400c0bc:	2001      	movs	r0, #1
2400c0be:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400c0c0:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400c0c2:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400c0c4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400c0c6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
2400c0c8:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c0ca:	6860      	ldr	r0, [r4, #4]
2400c0cc:	f030 0002 	bics.w	r0, r0, #2
2400c0d0:	bf14      	ite	ne
2400c0d2:	2001      	movne	r0, #1
2400c0d4:	2000      	moveq	r0, #0
2400c0d6:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2400c0d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400c0dc:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400c0de:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400c0e2:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
2400c0e4:	f013 0001 	ands.w	r0, r3, #1
2400c0e8:	d1e8      	bne.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
2400c0ea:	b949      	cbnz	r1, 2400c100 <HAL_SAI_InitProtocol+0xb4>
2400c0ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c0f0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
2400c0f4:	2a03      	cmp	r2, #3
2400c0f6:	d8e1      	bhi.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
2400c0f8:	e8df f002 	tbb	[pc, r2]
2400c0fc:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400c100:	6660      	str	r0, [r4, #100]	; 0x64
2400c102:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c106:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
2400c108:	2a03      	cmp	r2, #3
2400c10a:	d8d7      	bhi.n	2400c0bc <HAL_SAI_InitProtocol+0x70>
2400c10c:	e8df f002 	tbb	[pc, r2]
2400c110:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c114:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400c116:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400c118:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c11a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400c11c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400c11e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400c120:	f7f9 ffe8 	bl	240060f4 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400c124:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400c128:	2b01      	cmp	r3, #1
2400c12a:	d0b7      	beq.n	2400c09c <HAL_SAI_InitProtocol+0x50>
2400c12c:	4620      	mov	r0, r4
}
2400c12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400c132:	f7ff bdb1 	b.w	2400bc98 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c136:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400c138:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c13a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400c13c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c13e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400c140:	e7ee      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400c142:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400c144:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c146:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400c148:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400c14a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c14c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400c14e:	e7e7      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400c150:	21e0      	movs	r1, #224	; 0xe0
2400c152:	e7f7      	b.n	2400c144 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c154:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400c156:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c158:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c15a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400c15c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c15e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c160:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c162:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c166:	e7db      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c168:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400c16a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c16c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c16e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c170:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400c174:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c176:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c17a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c17c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c17e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c180:	d1ce      	bne.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400c182:	2308      	movs	r3, #8
2400c184:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400c186:	e7cb      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c188:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c18a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c18c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400c18e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c192:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c194:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400c198:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400c19a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c19e:	d1bf      	bne.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
2400c1a0:	2310      	movs	r3, #16
2400c1a2:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400c1a4:	e7bc      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400c1a6:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c1a8:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400c1aa:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400c1ac:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400c1ae:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400c1b0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400c1b2:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400c1b4:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400c1b8:	e7b2      	b.n	2400c120 <HAL_SAI_InitProtocol+0xd4>
2400c1ba:	bf00      	nop
2400c1bc:	40015804 	.word	0x40015804

2400c1c0 <HAL_SAI_Abort>:
{
2400c1c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
2400c1c2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
2400c1c6:	2b01      	cmp	r3, #1
2400c1c8:	d06d      	beq.n	2400c2a6 <HAL_SAI_Abort+0xe6>
2400c1ca:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c1cc:	6803      	ldr	r3, [r0, #0]
2400c1ce:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
2400c1d0:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c1d4:	681d      	ldr	r5, [r3, #0]
2400c1d6:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
2400c1da:	d00d      	beq.n	2400c1f8 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400c1dc:	681a      	ldr	r2, [r3, #0]
2400c1de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2400c1e2:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2400c1e4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
2400c1e8:	2b12      	cmp	r3, #18
2400c1ea:	d031      	beq.n	2400c250 <HAL_SAI_Abort+0x90>
  HAL_StatusTypeDef status = HAL_OK;
2400c1ec:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2400c1ee:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400c1f2:	2b22      	cmp	r3, #34	; 0x22
2400c1f4:	d041      	beq.n	2400c27a <HAL_SAI_Abort+0xba>
  hsai->Instance->IMR = 0;
2400c1f6:	6823      	ldr	r3, [r4, #0]
2400c1f8:	2100      	movs	r1, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  hsai->Instance->IMR = 0;
2400c1fe:	6119      	str	r1, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c200:	6823      	ldr	r3, [r4, #0]
2400c202:	619a      	str	r2, [r3, #24]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c204:	4b29      	ldr	r3, [pc, #164]	; (2400c2ac <HAL_SAI_Abort+0xec>)
  __HAL_SAI_DISABLE(hsai);
2400c206:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c208:	4a29      	ldr	r2, [pc, #164]	; (2400c2b0 <HAL_SAI_Abort+0xf0>)
2400c20a:	681b      	ldr	r3, [r3, #0]
2400c20c:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
2400c210:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c212:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400c214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c218:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400c21a:	600a      	str	r2, [r1, #0]
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c21c:	6821      	ldr	r1, [r4, #0]
    if (count == 0U)
2400c21e:	b17b      	cbz	r3, 2400c240 <HAL_SAI_Abort+0x80>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c220:	680a      	ldr	r2, [r1, #0]
    count--;
2400c222:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c224:	03d2      	lsls	r2, r2, #15
2400c226:	d4fa      	bmi.n	2400c21e <HAL_SAI_Abort+0x5e>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400c228:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
2400c22a:	2201      	movs	r2, #1
}
2400c22c:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400c22e:	f043 0308 	orr.w	r3, r3, #8
2400c232:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hsai);
2400c234:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400c236:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400c23a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400c23e:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c240:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
2400c244:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c24a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
2400c24e:	e7eb      	b.n	2400c228 <HAL_SAI_Abort+0x68>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2400c250:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
2400c254:	2800      	cmp	r0, #0
2400c256:	d0c9      	beq.n	2400c1ec <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2400c258:	f7fa fe44 	bl	24006ee4 <HAL_DMA_Abort>
2400c25c:	2800      	cmp	r0, #0
2400c25e:	d0c5      	beq.n	2400c1ec <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2400c260:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400c266:	2b80      	cmp	r3, #128	; 0x80
2400c268:	d0c0      	beq.n	2400c1ec <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c26a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
2400c26e:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c274:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
2400c278:	e7b9      	b.n	2400c1ee <HAL_SAI_Abort+0x2e>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2400c27a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400c27e:	2800      	cmp	r0, #0
2400c280:	d0b9      	beq.n	2400c1f6 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2400c282:	f7fa fe2f 	bl	24006ee4 <HAL_DMA_Abort>
2400c286:	2800      	cmp	r0, #0
2400c288:	d0b5      	beq.n	2400c1f6 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2400c28a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400c290:	2b80      	cmp	r3, #128	; 0x80
2400c292:	d0b0      	beq.n	2400c1f6 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c294:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
          status = HAL_ERROR;
2400c298:	2501      	movs	r5, #1
  hsai->Instance->IMR = 0;
2400c29a:	6823      	ldr	r3, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c29c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400c2a0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
2400c2a4:	e7a8      	b.n	2400c1f8 <HAL_SAI_Abort+0x38>
  __HAL_LOCK(hsai);
2400c2a6:	2502      	movs	r5, #2
}
2400c2a8:	4628      	mov	r0, r5
2400c2aa:	bd70      	pop	{r4, r5, r6, pc}
2400c2ac:	20000750 	.word	0x20000750
2400c2b0:	95cbec1b 	.word	0x95cbec1b

2400c2b4 <HAL_SAI_Transmit_DMA>:
{
2400c2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400c2b8:	460f      	mov	r7, r1
2400c2ba:	4604      	mov	r4, r0
2400c2bc:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
2400c2be:	f7f9 ff01 	bl	240060c4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
2400c2c2:	2f00      	cmp	r7, #0
2400c2c4:	d06b      	beq.n	2400c39e <HAL_SAI_Transmit_DMA+0xea>
2400c2c6:	fab5 f885 	clz	r8, r5
2400c2ca:	ea4f 1858 	mov.w	r8, r8, lsr #5
2400c2ce:	2d00      	cmp	r5, #0
2400c2d0:	d065      	beq.n	2400c39e <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
2400c2d2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400c2d6:	2b01      	cmp	r3, #1
2400c2d8:	fa5f f983 	uxtb.w	r9, r3
2400c2dc:	d15a      	bne.n	2400c394 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
2400c2de:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400c2e2:	2b01      	cmp	r3, #1
2400c2e4:	d056      	beq.n	2400c394 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
2400c2e6:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400c2e8:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400c2ec:	4a3c      	ldr	r2, [pc, #240]	; (2400c3e0 <HAL_SAI_Transmit_DMA+0x12c>)
2400c2ee:	4606      	mov	r6, r0
    hsai->XferSize = Size;
2400c2f0:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
2400c2f4:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
2400c2f6:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
2400c2fa:	f365 431f 	bfi	r3, r5, #16, #16
2400c2fe:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400c300:	2312      	movs	r3, #18
2400c302:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400c306:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c30a:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2400c30c:	4a35      	ldr	r2, [pc, #212]	; (2400c3e4 <HAL_SAI_Transmit_DMA+0x130>)
2400c30e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c312:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400c314:	4a34      	ldr	r2, [pc, #208]	; (2400c3e8 <HAL_SAI_Transmit_DMA+0x134>)
2400c316:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c31a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
2400c31c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c320:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400c324:	6822      	ldr	r2, [r4, #0]
2400c326:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
2400c32a:	321c      	adds	r2, #28
2400c32c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400c32e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400c332:	f7fa fb0b 	bl	2400694c <HAL_DMA_Start_IT>
2400c336:	2800      	cmp	r0, #0
2400c338:	d13f      	bne.n	2400c3ba <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c33a:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400c33c:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c33e:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c340:	d032      	beq.n	2400c3a8 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c342:	2205      	movs	r2, #5
2400c344:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c346:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400c348:	2b01      	cmp	r3, #1
2400c34a:	bf98      	it	ls
2400c34c:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c34e:	6821      	ldr	r1, [r4, #0]
2400c350:	690b      	ldr	r3, [r1, #16]
2400c352:	4313      	orrs	r3, r2
2400c354:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400c356:	6822      	ldr	r2, [r4, #0]
2400c358:	6813      	ldr	r3, [r2, #0]
2400c35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400c35e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400c360:	e005      	b.n	2400c36e <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400c362:	f7f9 feaf 	bl	240060c4 <HAL_GetTick>
2400c366:	1b83      	subs	r3, r0, r6
2400c368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400c36c:	d82a      	bhi.n	2400c3c4 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400c36e:	6822      	ldr	r2, [r4, #0]
2400c370:	6955      	ldr	r5, [r2, #20]
2400c372:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400c376:	d0f4      	beq.n	2400c362 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400c378:	6813      	ldr	r3, [r2, #0]
2400c37a:	03db      	lsls	r3, r3, #15
2400c37c:	d403      	bmi.n	2400c386 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
2400c37e:	6813      	ldr	r3, [r2, #0]
2400c380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400c384:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400c386:	2300      	movs	r3, #0
    return HAL_OK;
2400c388:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
2400c38a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400c38e:	4648      	mov	r0, r9
2400c390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
2400c394:	f04f 0902 	mov.w	r9, #2
}
2400c398:	4648      	mov	r0, r9
2400c39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
2400c39e:	f04f 0901 	mov.w	r9, #1
}
2400c3a2:	4648      	mov	r0, r9
2400c3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c3a8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c3ac:	2a01      	cmp	r2, #1
2400c3ae:	bf0b      	itete	eq
2400c3b0:	2215      	moveq	r2, #21
2400c3b2:	2205      	movne	r2, #5
2400c3b4:	2171      	moveq	r1, #113	; 0x71
2400c3b6:	2161      	movne	r1, #97	; 0x61
2400c3b8:	e7c5      	b.n	2400c346 <HAL_SAI_Transmit_DMA+0x92>
}
2400c3ba:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
2400c3bc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
2400c3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c3c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
2400c3c8:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
2400c3cc:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
2400c3d4:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c3d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400c3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400c3de:	bf00      	nop
2400c3e0:	2400c539 	.word	0x2400c539
2400c3e4:	2400c4d5 	.word	0x2400c4d5
2400c3e8:	2400c5bd 	.word	0x2400c5bd

2400c3ec <HAL_SAI_Receive_DMA>:
{
2400c3ec:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
2400c3ee:	2900      	cmp	r1, #0
2400c3f0:	d059      	beq.n	2400c4a6 <HAL_SAI_Receive_DMA+0xba>
2400c3f2:	fab2 f582 	clz	r5, r2
2400c3f6:	096d      	lsrs	r5, r5, #5
2400c3f8:	2a00      	cmp	r2, #0
2400c3fa:	d054      	beq.n	2400c4a6 <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
2400c3fc:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
2400c400:	4604      	mov	r4, r0
2400c402:	2b01      	cmp	r3, #1
2400c404:	b2de      	uxtb	r6, r3
2400c406:	d14b      	bne.n	2400c4a0 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
2400c408:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
2400c40c:	2b01      	cmp	r3, #1
2400c40e:	d047      	beq.n	2400c4a0 <HAL_SAI_Receive_DMA+0xb4>
    hsai->XferSize = Size;
2400c410:	462b      	mov	r3, r5
    hsai->pBuffPtr = pData;
2400c412:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400c414:	2122      	movs	r1, #34	; 0x22
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400c416:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
2400c41a:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
2400c41e:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400c422:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
2400c426:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400c42a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    hsai->XferSize = Size;
2400c42e:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400c430:	4b25      	ldr	r3, [pc, #148]	; (2400c4c8 <HAL_SAI_Receive_DMA+0xdc>)
2400c432:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400c434:	4a25      	ldr	r2, [pc, #148]	; (2400c4cc <HAL_SAI_Receive_DMA+0xe0>)
2400c436:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400c43a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400c43c:	4a24      	ldr	r2, [pc, #144]	; (2400c4d0 <HAL_SAI_Receive_DMA+0xe4>)
2400c43e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400c442:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
2400c444:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400c448:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400c44a:	6801      	ldr	r1, [r0, #0]
2400c44c:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
2400c450:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400c452:	311c      	adds	r1, #28
2400c454:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
2400c458:	f7fa fa78 	bl	2400694c <HAL_DMA_Start_IT>
2400c45c:	bb30      	cbnz	r0, 2400c4ac <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c45e:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400c460:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c462:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c464:	d026      	beq.n	2400c4b4 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c466:	2205      	movs	r2, #5
2400c468:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c46a:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c46c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400c46e:	2b01      	cmp	r3, #1
2400c470:	bf98      	it	ls
2400c472:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c474:	690b      	ldr	r3, [r1, #16]
2400c476:	4313      	orrs	r3, r2
2400c478:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400c47a:	6822      	ldr	r2, [r4, #0]
2400c47c:	6813      	ldr	r3, [r2, #0]
2400c47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400c482:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400c484:	6823      	ldr	r3, [r4, #0]
2400c486:	681a      	ldr	r2, [r3, #0]
2400c488:	03d2      	lsls	r2, r2, #15
2400c48a:	d403      	bmi.n	2400c494 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
2400c48c:	681a      	ldr	r2, [r3, #0]
2400c48e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400c492:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400c494:	2300      	movs	r3, #0
    return HAL_OK;
2400c496:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400c498:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400c49c:	4630      	mov	r0, r6
2400c49e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
2400c4a0:	2602      	movs	r6, #2
}
2400c4a2:	4630      	mov	r0, r6
2400c4a4:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
2400c4a6:	2601      	movs	r6, #1
}
2400c4a8:	4630      	mov	r0, r6
2400c4aa:	bd70      	pop	{r4, r5, r6, pc}
2400c4ac:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400c4ae:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400c4b2:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c4b4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c4b8:	2a01      	cmp	r2, #1
2400c4ba:	bf0b      	itete	eq
2400c4bc:	2215      	moveq	r2, #21
2400c4be:	2205      	movne	r2, #5
2400c4c0:	2071      	moveq	r0, #113	; 0x71
2400c4c2:	2061      	movne	r0, #97	; 0x61
2400c4c4:	e7d1      	b.n	2400c46a <HAL_SAI_Receive_DMA+0x7e>
2400c4c6:	bf00      	nop
2400c4c8:	2400c5b1 	.word	0x2400c5b1
2400c4cc:	2400c549 	.word	0x2400c549
2400c4d0:	2400c5bd 	.word	0x2400c5bd

2400c4d4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400c4d4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400c4d6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c4d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400c4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400c4de:	d01b      	beq.n	2400c518 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400c4e0:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400c4e2:	2300      	movs	r3, #0
2400c4e4:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400c4e8:	6813      	ldr	r3, [r2, #0]
2400c4ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400c4ee:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c4f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400c4f2:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c4f4:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c4f6:	d012      	beq.n	2400c51e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c4f8:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400c4fc:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c500:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c502:	3b02      	subs	r3, #2
2400c504:	2b01      	cmp	r3, #1
2400c506:	bf98      	it	ls
2400c508:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c50a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400c50c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c510:	4013      	ands	r3, r2
2400c512:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400c514:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400c518:	f029 fd36 	bl	24035f88 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400c51c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c51e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c522:	2a01      	cmp	r2, #1
2400c524:	bf0b      	itete	eq
2400c526:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400c52a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400c52e:	f06f 0215 	mvneq.w	r2, #21
2400c532:	f06f 0205 	mvnne.w	r2, #5
2400c536:	e7e3      	b.n	2400c500 <SAI_DMATxCplt+0x2c>

2400c538 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400c538:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400c53a:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400c53c:	f029 fd34 	bl	24035fa8 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400c540:	bd08      	pop	{r3, pc}
2400c542:	bf00      	nop

2400c544 <HAL_SAI_RxCpltCallback>:
2400c544:	4770      	bx	lr
2400c546:	bf00      	nop

2400c548 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400c548:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400c54a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c54c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400c54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400c552:	d01b      	beq.n	2400c58c <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400c554:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400c556:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400c558:	6813      	ldr	r3, [r2, #0]
2400c55a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400c55e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c560:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
2400c562:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c566:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c568:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c56a:	d012      	beq.n	2400c592 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c56c:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400c570:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c574:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400c576:	3b02      	subs	r3, #2
2400c578:	2b01      	cmp	r3, #1
2400c57a:	bf98      	it	ls
2400c57c:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c57e:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400c580:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400c584:	4013      	ands	r3, r2
2400c586:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400c588:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400c58c:	f7ff ffda 	bl	2400c544 <HAL_SAI_RxCpltCallback>
#endif
}
2400c590:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400c592:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400c596:	2a01      	cmp	r2, #1
2400c598:	bf0b      	itete	eq
2400c59a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400c59e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400c5a2:	f06f 0215 	mvneq.w	r2, #21
2400c5a6:	f06f 0205 	mvnne.w	r2, #5
2400c5aa:	e7e3      	b.n	2400c574 <SAI_DMARxCplt+0x2c>

2400c5ac <HAL_SAI_RxHalfCpltCallback>:
2400c5ac:	4770      	bx	lr
2400c5ae:	bf00      	nop

2400c5b0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400c5b0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400c5b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400c5b4:	f7ff fffa 	bl	2400c5ac <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400c5b8:	bd08      	pop	{r3, pc}
2400c5ba:	bf00      	nop

2400c5bc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400c5bc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c5be:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400c5c0:	f7fb fc3e 	bl	24007e40 <HAL_DMA_GetError>
2400c5c4:	2802      	cmp	r0, #2
2400c5c6:	d025      	beq.n	2400c614 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c5c8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400c5cc:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c5ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c5d2:	4b14      	ldr	r3, [pc, #80]	; (2400c624 <SAI_DMAError+0x68>)
2400c5d4:	4814      	ldr	r0, [pc, #80]	; (2400c628 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c5d6:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400c5da:	680a      	ldr	r2, [r1, #0]
2400c5dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2400c5e0:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c5e2:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
2400c5e4:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c5e6:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
2400c5ea:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c5ec:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400c5ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c5f2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400c5f4:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400c5f6:	b173      	cbz	r3, 2400c616 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c5f8:	6822      	ldr	r2, [r4, #0]
    count--;
2400c5fa:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c5fc:	6812      	ldr	r2, [r2, #0]
2400c5fe:	03d2      	lsls	r2, r2, #15
2400c600:	d4f9      	bmi.n	2400c5f6 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400c602:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400c604:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400c606:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400c608:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400c60c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400c610:	f7f7 faba 	bl	24003b88 <HAL_SAI_ErrorCallback>
#endif
  }
}
2400c614:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c616:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400c61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c61e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400c622:	e7ee      	b.n	2400c602 <SAI_DMAError+0x46>
2400c624:	20000750 	.word	0x20000750
2400c628:	95cbec1b 	.word	0x95cbec1b

2400c62c <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
2400c62c:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
2400c630:	b903      	cbnz	r3, 2400c634 <HAL_SAI_IRQHandler+0x8>
2400c632:	4770      	bx	lr
{
2400c634:	b570      	push	{r4, r5, r6, lr}
    uint32_t itflags = hsai->Instance->SR;
2400c636:	6803      	ldr	r3, [r0, #0]
2400c638:	4604      	mov	r4, r0
2400c63a:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
2400c63c:	6919      	ldr	r1, [r3, #16]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2400c63e:	0716      	lsls	r6, r2, #28
    uint32_t cr1config = hsai->Instance->CR1;
2400c640:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2400c642:	d506      	bpl.n	2400c652 <HAL_SAI_IRQHandler+0x26>
2400c644:	070e      	lsls	r6, r1, #28
2400c646:	d504      	bpl.n	2400c652 <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
2400c648:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
2400c64c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
2400c650:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2400c652:	07d6      	lsls	r6, r2, #31
2400c654:	d514      	bpl.n	2400c680 <HAL_SAI_IRQHandler+0x54>
2400c656:	f011 0c01 	ands.w	ip, r1, #1
2400c65a:	d011      	beq.n	2400c680 <HAL_SAI_IRQHandler+0x54>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2400c65c:	2201      	movs	r2, #1
      HAL_SAI_ErrorCallback(hsai);
2400c65e:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2400c660:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2400c662:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
2400c666:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2400c66a:	2a22      	cmp	r2, #34	; 0x22
2400c66c:	bf18      	it	ne
2400c66e:	f04f 0c02 	movne.w	ip, #2
      hsai->ErrorCode |= tmperror;
2400c672:	ea43 030c 	orr.w	r3, r3, ip
2400c676:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400c67a:	f7f7 fa85 	bl	24003b88 <HAL_SAI_ErrorCallback>
}
2400c67e:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2400c680:	0790      	lsls	r0, r2, #30
2400c682:	d50a      	bpl.n	2400c69a <HAL_SAI_IRQHandler+0x6e>
2400c684:	078e      	lsls	r6, r1, #30
2400c686:	d508      	bpl.n	2400c69a <HAL_SAI_IRQHandler+0x6e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2400c688:	2202      	movs	r2, #2
2400c68a:	619a      	str	r2, [r3, #24]
      if (hsai->mutecallback != NULL)
2400c68c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
2400c690:	2b00      	cmp	r3, #0
2400c692:	d0f4      	beq.n	2400c67e <HAL_SAI_IRQHandler+0x52>
}
2400c694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
2400c698:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2400c69a:	0690      	lsls	r0, r2, #26
2400c69c:	d534      	bpl.n	2400c708 <HAL_SAI_IRQHandler+0xdc>
2400c69e:	068e      	lsls	r6, r1, #26
2400c6a0:	d532      	bpl.n	2400c708 <HAL_SAI_IRQHandler+0xdc>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2400c6a2:	2220      	movs	r2, #32
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c6a4:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2400c6a6:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2400c6a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400c6ac:	f043 0304 	orr.w	r3, r3, #4
2400c6b0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c6b4:	d536      	bpl.n	2400c724 <HAL_SAI_IRQHandler+0xf8>
        if (hsai->hdmatx != NULL)
2400c6b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400c6ba:	b17b      	cbz	r3, 2400c6dc <HAL_SAI_IRQHandler+0xb0>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2400c6bc:	4a33      	ldr	r2, [pc, #204]	; (2400c78c <HAL_SAI_IRQHandler+0x160>)
2400c6be:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2400c6c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400c6c4:	f7fa fe24 	bl	24007310 <HAL_DMA_Abort_IT>
2400c6c8:	b140      	cbz	r0, 2400c6dc <HAL_SAI_IRQHandler+0xb0>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c6ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400c6ce:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c6d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400c6d8:	f7f7 fa56 	bl	24003b88 <HAL_SAI_ErrorCallback>
        if (hsai->hdmarx != NULL)
2400c6dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c6e0:	2b00      	cmp	r3, #0
2400c6e2:	d0cc      	beq.n	2400c67e <HAL_SAI_IRQHandler+0x52>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2400c6e4:	4a29      	ldr	r2, [pc, #164]	; (2400c78c <HAL_SAI_IRQHandler+0x160>)
2400c6e6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2400c6e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400c6ec:	f7fa fe10 	bl	24007310 <HAL_DMA_Abort_IT>
2400c6f0:	2800      	cmp	r0, #0
2400c6f2:	d0c4      	beq.n	2400c67e <HAL_SAI_IRQHandler+0x52>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c6f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400c6f8:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400c6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c6fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400c702:	f7f7 fa41 	bl	24003b88 <HAL_SAI_ErrorCallback>
}
2400c706:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2400c708:	0650      	lsls	r0, r2, #25
2400c70a:	d512      	bpl.n	2400c732 <HAL_SAI_IRQHandler+0x106>
2400c70c:	064e      	lsls	r6, r1, #25
2400c70e:	d510      	bpl.n	2400c732 <HAL_SAI_IRQHandler+0x106>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2400c710:	2240      	movs	r2, #64	; 0x40
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c712:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2400c714:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2400c716:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400c71a:	f043 0308 	orr.w	r3, r3, #8
2400c71e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c722:	d4c8      	bmi.n	2400c6b6 <HAL_SAI_IRQHandler+0x8a>
        (void) HAL_SAI_Abort(hsai);
2400c724:	4620      	mov	r0, r4
2400c726:	f7ff fd4b 	bl	2400c1c0 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
2400c72a:	4620      	mov	r0, r4
2400c72c:	f7f7 fa2c 	bl	24003b88 <HAL_SAI_ErrorCallback>
}
2400c730:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2400c732:	0750      	lsls	r0, r2, #29
2400c734:	d51b      	bpl.n	2400c76e <HAL_SAI_IRQHandler+0x142>
2400c736:	074e      	lsls	r6, r1, #29
2400c738:	d519      	bpl.n	2400c76e <HAL_SAI_IRQHandler+0x142>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2400c73a:	2204      	movs	r2, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c73c:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2400c740:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2400c742:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400c746:	f043 0320 	orr.w	r3, r3, #32
2400c74a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400c74e:	d1b2      	bne.n	2400c6b6 <HAL_SAI_IRQHandler+0x8a>
        hsai->Instance->IMR = 0U;
2400c750:	6822      	ldr	r2, [r4, #0]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
2400c756:	2301      	movs	r3, #1
        HAL_SAI_ErrorCallback(hsai);
2400c758:	4620      	mov	r0, r4
        hsai->Instance->IMR = 0U;
2400c75a:	6115      	str	r5, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c75c:	6822      	ldr	r2, [r4, #0]
2400c75e:	6191      	str	r1, [r2, #24]
        hsai->State = HAL_SAI_STATE_READY;
2400c760:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
2400c764:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
2400c768:	f7f7 fa0e 	bl	24003b88 <HAL_SAI_ErrorCallback>
}
2400c76c:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2400c76e:	06d0      	lsls	r0, r2, #27
2400c770:	d585      	bpl.n	2400c67e <HAL_SAI_IRQHandler+0x52>
2400c772:	06ca      	lsls	r2, r1, #27
2400c774:	d583      	bpl.n	2400c67e <HAL_SAI_IRQHandler+0x52>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400c776:	2210      	movs	r2, #16
      HAL_SAI_ErrorCallback(hsai);
2400c778:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400c77a:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2400c77c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400c780:	4313      	orrs	r3, r2
2400c782:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400c786:	f7f7 f9ff 	bl	24003b88 <HAL_SAI_ErrorCallback>
}
2400c78a:	bd70      	pop	{r4, r5, r6, pc}
2400c78c:	2400c791 	.word	0x2400c791

2400c790 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
2400c790:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c792:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
2400c794:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400c79a:	6802      	ldr	r2, [r0, #0]
2400c79c:	6813      	ldr	r3, [r2, #0]
2400c79e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400c7a2:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
2400c7a4:	6803      	ldr	r3, [r0, #0]
2400c7a6:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400c7a8:	6803      	ldr	r3, [r0, #0]
2400c7aa:	6199      	str	r1, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2400c7ac:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
2400c7b0:	2b20      	cmp	r3, #32
2400c7b2:	d015      	beq.n	2400c7e0 <SAI_DMAAbort+0x50>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c7b4:	4b12      	ldr	r3, [pc, #72]	; (2400c800 <SAI_DMAAbort+0x70>)
  __HAL_SAI_DISABLE(hsai);
2400c7b6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c7b8:	681b      	ldr	r3, [r3, #0]
2400c7ba:	4c12      	ldr	r4, [pc, #72]	; (2400c804 <SAI_DMAAbort+0x74>)
  __HAL_SAI_DISABLE(hsai);
2400c7bc:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c7be:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
2400c7c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c7c6:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400c7c8:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400c7ca:	009b      	lsls	r3, r3, #2
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c7cc:	6801      	ldr	r1, [r0, #0]
    if (count == 0U)
2400c7ce:	b183      	cbz	r3, 2400c7f2 <SAI_DMAAbort+0x62>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c7d0:	680a      	ldr	r2, [r1, #0]
    count--;
2400c7d2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400c7d4:	03d2      	lsls	r2, r2, #15
2400c7d6:	d4fa      	bmi.n	2400c7ce <SAI_DMAAbort+0x3e>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400c7d8:	684b      	ldr	r3, [r1, #4]
2400c7da:	f043 0308 	orr.w	r3, r3, #8
2400c7de:	604b      	str	r3, [r1, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2400c7e0:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
2400c7e2:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400c7e4:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
  hsai->XferCount = 0U;
2400c7e8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
2400c7ec:	f7f7 f9cc 	bl	24003b88 <HAL_SAI_ErrorCallback>
#endif
}
2400c7f0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400c7f2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
2400c7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c7fa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      break;
2400c7fe:	e7eb      	b.n	2400c7d8 <SAI_DMAAbort+0x48>
2400c800:	20000750 	.word	0x20000750
2400c804:	95cbec1b 	.word	0x95cbec1b

2400c808 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
2400c808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400c80c:	4605      	mov	r5, r0
2400c80e:	b086      	sub	sp, #24
2400c810:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400c812:	f7f9 fc57 	bl	240060c4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400c816:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400c818:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400c81a:	6828      	ldr	r0, [r5, #0]
2400c81c:	f001 fe8a 	bl	2400e534 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c820:	4604      	mov	r4, r0
2400c822:	b118      	cbz	r0, 2400c82c <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400c824:	4620      	mov	r0, r4
2400c826:	b006      	add	sp, #24
2400c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400c82c:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400c82e:	6828      	ldr	r0, [r5, #0]
2400c830:	0409      	lsls	r1, r1, #16
2400c832:	f002 fbd9 	bl	2400efe8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c836:	4604      	mov	r4, r0
2400c838:	2800      	cmp	r0, #0
2400c83a:	d1f3      	bne.n	2400c824 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400c83c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400c840:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400c842:	4669      	mov	r1, sp
2400c844:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400c846:	e9cd 2300 	strd	r2, r3, [sp]
2400c84a:	2230      	movs	r2, #48	; 0x30
2400c84c:	2302      	movs	r3, #2
2400c84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400c852:	2200      	movs	r2, #0
2400c854:	2301      	movs	r3, #1
2400c856:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400c85a:	f001 fe55 	bl	2400e508 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400c85e:	6828      	ldr	r0, [r5, #0]
2400c860:	f002 fd48 	bl	2400f2f4 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c864:	4604      	mov	r4, r0
2400c866:	2800      	cmp	r0, #0
2400c868:	d1dc      	bne.n	2400c824 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400c86a:	4682      	mov	sl, r0
2400c86c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400c86e:	f240 582a 	movw	r8, #1322	; 0x52a
2400c872:	e004      	b.n	2400c87e <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400c874:	f7f9 fc26 	bl	240060c4 <HAL_GetTick>
2400c878:	1b83      	subs	r3, r0, r6
2400c87a:	3301      	adds	r3, #1
2400c87c:	d024      	beq.n	2400c8c8 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400c87e:	6828      	ldr	r0, [r5, #0]
2400c880:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c882:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400c886:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400c888:	d10c      	bne.n	2400c8a4 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400c88a:	0319      	lsls	r1, r3, #12
2400c88c:	d4f2      	bmi.n	2400c874 <SD_FindSCR+0x6c>
2400c88e:	2c00      	cmp	r4, #0
2400c890:	d1f0      	bne.n	2400c874 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400c892:	f001 fe1f 	bl	2400e4d4 <SDMMC_ReadFIFO>
2400c896:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400c898:	6828      	ldr	r0, [r5, #0]
      index++;
2400c89a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400c89c:	f001 fe1a 	bl	2400e4d4 <SDMMC_ReadFIFO>
2400c8a0:	4682      	mov	sl, r0
      index++;
2400c8a2:	e7e7      	b.n	2400c874 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400c8a4:	071a      	lsls	r2, r3, #28
2400c8a6:	d416      	bmi.n	2400c8d6 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400c8a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c8aa:	079b      	lsls	r3, r3, #30
2400c8ac:	d40f      	bmi.n	2400c8ce <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400c8ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400c8b0:	f014 0420 	ands.w	r4, r4, #32
2400c8b4:	d113      	bne.n	2400c8de <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400c8b6:	fa9a f28a 	rev.w	r2, sl
2400c8ba:	fa99 f389 	rev.w	r3, r9
2400c8be:	490a      	ldr	r1, [pc, #40]	; (2400c8e8 <SD_FindSCR+0xe0>)
2400c8c0:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400c8c2:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400c8c6:	e7ad      	b.n	2400c824 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400c8c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400c8cc:	e7aa      	b.n	2400c824 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400c8ce:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400c8d0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400c8d2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400c8d4:	e7a6      	b.n	2400c824 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400c8d6:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400c8d8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400c8da:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400c8dc:	e7a2      	b.n	2400c824 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400c8de:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400c8e0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400c8e2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400c8e4:	e79e      	b.n	2400c824 <SD_FindSCR+0x1c>
2400c8e6:	bf00      	nop
2400c8e8:	18000f3a 	.word	0x18000f3a

2400c8ec <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400c8f0:	4604      	mov	r4, r0
2400c8f2:	b096      	sub	sp, #88	; 0x58
2400c8f4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
2400c8f6:	f7f9 fbe5 	bl	240060c4 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c8fa:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400c8fc:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400c8fe:	6820      	ldr	r0, [r4, #0]
2400c900:	f001 fdfe 	bl	2400e500 <SDMMC_GetResponse>
2400c904:	0182      	lsls	r2, r0, #6
2400c906:	d45c      	bmi.n	2400c9c2 <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400c908:	2140      	movs	r1, #64	; 0x40
2400c90a:	6820      	ldr	r0, [r4, #0]
2400c90c:	f001 fe12 	bl	2400e534 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c910:	4603      	mov	r3, r0
2400c912:	b1e8      	cbz	r0, 2400c950 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400c914:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400c916:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c918:	6820      	ldr	r0, [r4, #0]
2400c91a:	4956      	ldr	r1, [pc, #344]	; (2400ca74 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
2400c91c:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c91e:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
2400c920:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
2400c922:	6b60      	ldr	r0, [r4, #52]	; 0x34
2400c924:	4303      	orrs	r3, r0
2400c926:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400c928:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400c92c:	f44f 7100 	mov.w	r1, #512	; 0x200
2400c930:	6820      	ldr	r0, [r4, #0]
2400c932:	f001 fdff 	bl	2400e534 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c936:	b138      	cbz	r0, 2400c948 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
2400c938:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c93a:	6822      	ldr	r2, [r4, #0]
2400c93c:	494d      	ldr	r1, [pc, #308]	; (2400ca74 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
2400c93e:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c940:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400c942:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400c944:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400c948:	4630      	mov	r0, r6
2400c94a:	b016      	add	sp, #88	; 0x58
2400c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400c950:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400c952:	6820      	ldr	r0, [r4, #0]
2400c954:	0409      	lsls	r1, r1, #16
2400c956:	f002 fb47 	bl	2400efe8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c95a:	4603      	mov	r3, r0
2400c95c:	2800      	cmp	r0, #0
2400c95e:	d1d9      	bne.n	2400c914 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400c960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400c964:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400c966:	4669      	mov	r1, sp
2400c968:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400c96a:	e9cd 2300 	strd	r2, r3, [sp]
2400c96e:	2260      	movs	r2, #96	; 0x60
2400c970:	2302      	movs	r3, #2
2400c972:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400c976:	2301      	movs	r3, #1
2400c978:	2200      	movs	r2, #0
2400c97a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400c97e:	f001 fdc3 	bl	2400e508 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400c982:	6820      	ldr	r0, [r4, #0]
2400c984:	f002 feda 	bl	2400f73c <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400c988:	4603      	mov	r3, r0
2400c98a:	2800      	cmp	r0, #0
2400c98c:	d1c2      	bne.n	2400c914 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
2400c98e:	ae06      	add	r6, sp, #24
2400c990:	e004      	b.n	2400c99c <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400c992:	f7f9 fb97 	bl	240060c4 <HAL_GetTick>
2400c996:	1bc0      	subs	r0, r0, r7
2400c998:	3001      	adds	r0, #1
2400c99a:	d016      	beq.n	2400c9ca <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400c99c:	6820      	ldr	r0, [r4, #0]
2400c99e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c9a0:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400c9a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400c9a6:	d113      	bne.n	2400c9d0 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400c9a8:	041b      	lsls	r3, r3, #16
2400c9aa:	d5f2      	bpl.n	2400c992 <HAL_SD_GetCardStatus.part.0+0xa6>
2400c9ac:	f106 0820 	add.w	r8, r6, #32
2400c9b0:	e000      	b.n	2400c9b4 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400c9b2:	6820      	ldr	r0, [r4, #0]
2400c9b4:	f001 fd8e 	bl	2400e4d4 <SDMMC_ReadFIFO>
2400c9b8:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400c9bc:	4546      	cmp	r6, r8
2400c9be:	d1f8      	bne.n	2400c9b2 <HAL_SD_GetCardStatus.part.0+0xc6>
2400c9c0:	e7e7      	b.n	2400c992 <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400c9c2:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400c9c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c9c8:	e7a7      	b.n	2400c91a <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
2400c9ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400c9ce:	e7a3      	b.n	2400c918 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400c9d0:	0719      	lsls	r1, r3, #28
2400c9d2:	d448      	bmi.n	2400ca66 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400c9d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c9d6:	079a      	lsls	r2, r3, #30
2400c9d8:	d447      	bmi.n	2400ca6a <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400c9da:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c9dc:	069b      	lsls	r3, r3, #26
2400c9de:	d50a      	bpl.n	2400c9f6 <HAL_SD_GetCardStatus.part.0+0x10a>
2400c9e0:	e045      	b.n	2400ca6e <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400c9e2:	f001 fd77 	bl	2400e4d4 <SDMMC_ReadFIFO>
2400c9e6:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400c9ea:	f7f9 fb6b 	bl	240060c4 <HAL_GetTick>
2400c9ee:	1bc0      	subs	r0, r0, r7
2400c9f0:	3001      	adds	r0, #1
2400c9f2:	d0ea      	beq.n	2400c9ca <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400c9f4:	6820      	ldr	r0, [r4, #0]
2400c9f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c9f8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
2400c9fc:	d1f1      	bne.n	2400c9e2 <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400c9fe:	4a1e      	ldr	r2, [pc, #120]	; (2400ca78 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
2400ca00:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400ca02:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ca04:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400ca06:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400ca0a:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400ca0c:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400ca10:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400ca12:	0a1a      	lsrs	r2, r3, #8
2400ca14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400ca18:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400ca1c:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400ca20:	b292      	uxth	r2, r2
2400ca22:	ba09      	rev	r1, r1
2400ca24:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ca26:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400ca28:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ca2a:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ca2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ca30:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ca34:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ca36:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ca3a:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ca3c:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ca3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400ca40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400ca44:	b2d0      	uxtb	r0, r2
2400ca46:	4303      	orrs	r3, r0
2400ca48:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400ca4a:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400ca4e:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400ca50:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400ca54:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ca56:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ca5a:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ca5e:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ca60:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ca62:	74a9      	strb	r1, [r5, #18]
2400ca64:	e762      	b.n	2400c92c <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ca66:	2308      	movs	r3, #8
2400ca68:	e757      	b.n	2400c91a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ca6a:	2302      	movs	r3, #2
2400ca6c:	e755      	b.n	2400c91a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
2400ca6e:	2320      	movs	r3, #32
2400ca70:	e753      	b.n	2400c91a <HAL_SD_GetCardStatus.part.0+0x2e>
2400ca72:	bf00      	nop
2400ca74:	1fe00fff 	.word	0x1fe00fff
2400ca78:	18000f3a 	.word	0x18000f3a

2400ca7c <HAL_SD_ReadBlocks>:
{
2400ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ca80:	460d      	mov	r5, r1
2400ca82:	b087      	sub	sp, #28
2400ca84:	4604      	mov	r4, r0
2400ca86:	4692      	mov	sl, r2
2400ca88:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
2400ca8a:	f7f9 fb1b 	bl	240060c4 <HAL_GetTick>
  if (NULL == pData)
2400ca8e:	2d00      	cmp	r5, #0
2400ca90:	f000 8093 	beq.w	2400cbba <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
2400ca94:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ca98:	2b01      	cmp	r3, #1
2400ca9a:	fa5f f983 	uxtb.w	r9, r3
2400ca9e:	d17b      	bne.n	2400cb98 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400caa0:	eb0a 0307 	add.w	r3, sl, r7
2400caa4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400caa6:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400caa8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400caaa:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400caac:	f200 808f 	bhi.w	2400cbce <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
2400cab0:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400cab2:	f04f 0b02 	mov.w	fp, #2
2400cab6:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400cab8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400cabc:	6823      	ldr	r3, [r4, #0]
2400cabe:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400cac0:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400cac2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400cac4:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400cac6:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400cac8:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400cacc:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400cad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400cad4:	bf18      	it	ne
2400cad6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400cada:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400cadc:	027b      	lsls	r3, r7, #9
2400cade:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400cae0:	2390      	movs	r3, #144	; 0x90
2400cae2:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400cae6:	f001 fd0f 	bl	2400e508 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400caea:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400caec:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400caee:	68d3      	ldr	r3, [r2, #12]
2400caf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400caf4:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400caf6:	d959      	bls.n	2400cbac <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400caf8:	4651      	mov	r1, sl
2400cafa:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400cafc:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400cb00:	f001 fe64 	bl	2400e7cc <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400cb04:	2800      	cmp	r0, #0
2400cb06:	d16a      	bne.n	2400cbde <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
2400cb08:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400cb0c:	e005      	b.n	2400cb1a <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cb0e:	f7f9 fad9 	bl	240060c4 <HAL_GetTick>
2400cb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400cb14:	1b80      	subs	r0, r0, r6
2400cb16:	4298      	cmp	r0, r3
2400cb18:	d22c      	bcs.n	2400cb74 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400cb1a:	6820      	ldr	r0, [r4, #0]
2400cb1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cb1e:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400cb22:	d168      	bne.n	2400cbf6 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400cb24:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cb26:	041a      	lsls	r2, r3, #16
2400cb28:	d5f1      	bpl.n	2400cb0e <HAL_SD_ReadBlocks+0x92>
2400cb2a:	f1bb 0f1f 	cmp.w	fp, #31
2400cb2e:	d9ee      	bls.n	2400cb0e <HAL_SD_ReadBlocks+0x92>
2400cb30:	f105 0804 	add.w	r8, r5, #4
2400cb34:	f105 0a24 	add.w	sl, r5, #36	; 0x24
2400cb38:	e000      	b.n	2400cb3c <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400cb3a:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
2400cb3c:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
2400cb40:	f001 fcc8 	bl	2400e4d4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400cb44:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400cb48:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
2400cb4a:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400cb4c:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
2400cb50:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400cb54:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400cb58:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400cb5c:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
2400cb60:	d1eb      	bne.n	2400cb3a <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cb62:	f7f9 faaf 	bl	240060c4 <HAL_GetTick>
2400cb66:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400cb68:	1b80      	subs	r0, r0, r6
          tempbuff++;
2400cb6a:	3520      	adds	r5, #32
        dataremaining -= 32U;
2400cb6c:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cb70:	4298      	cmp	r0, r3
2400cb72:	d3d2      	bcc.n	2400cb1a <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cb74:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
2400cb76:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cb7a:	4842      	ldr	r0, [pc, #264]	; (2400cc84 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
2400cb7c:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400cb7e:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cb80:	6398      	str	r0, [r3, #56]	; 0x38
}
2400cb82:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400cb84:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cb86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400cb8a:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400cb8c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400cb90:	62e2      	str	r2, [r4, #44]	; 0x2c
}
2400cb92:	b007      	add	sp, #28
2400cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400cb98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400cb9a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400cb9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400cba2:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cba4:	4648      	mov	r0, r9
2400cba6:	b007      	add	sp, #28
2400cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400cbac:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400cbae:	4651      	mov	r1, sl
2400cbb0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400cbb2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400cbb4:	f001 fd64 	bl	2400e680 <SDMMC_CmdReadSingleBlock>
2400cbb8:	e7a4      	b.n	2400cb04 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cbba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400cbbc:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cbc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400cbc4:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cbc6:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cbc8:	b007      	add	sp, #28
2400cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400cbce:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400cbd0:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400cbd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400cbd6:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cbd8:	b007      	add	sp, #28
2400cbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cbde:	6823      	ldr	r3, [r4, #0]
2400cbe0:	4a28      	ldr	r2, [pc, #160]	; (2400cc84 <HAL_SD_ReadBlocks+0x208>)
2400cbe2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400cbe4:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400cbe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cbe8:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400cbea:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400cbec:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400cbee:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400cbf2:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400cbf4:	e7d6      	b.n	2400cba4 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400cbf6:	68c3      	ldr	r3, [r0, #12]
2400cbf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400cbfc:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400cbfe:	6820      	ldr	r0, [r4, #0]
2400cc00:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc02:	05db      	lsls	r3, r3, #23
2400cc04:	d509      	bpl.n	2400cc1a <HAL_SD_ReadBlocks+0x19e>
2400cc06:	2f01      	cmp	r7, #1
2400cc08:	d907      	bls.n	2400cc1a <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400cc0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400cc0c:	2b03      	cmp	r3, #3
2400cc0e:	d004      	beq.n	2400cc1a <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400cc10:	f001 ffce 	bl	2400ebb0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400cc14:	2800      	cmp	r0, #0
2400cc16:	d1e2      	bne.n	2400cbde <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400cc18:	6820      	ldr	r0, [r4, #0]
2400cc1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc1c:	f013 0308 	ands.w	r3, r3, #8
2400cc20:	d112      	bne.n	2400cc48 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400cc22:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400cc24:	f012 0202 	ands.w	r2, r2, #2
2400cc28:	d11a      	bne.n	2400cc60 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400cc2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc2c:	f013 0320 	ands.w	r3, r3, #32
2400cc30:	d021      	beq.n	2400cc76 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc32:	4b14      	ldr	r3, [pc, #80]	; (2400cc84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400cc34:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc36:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400cc38:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cc3a:	f043 0320 	orr.w	r3, r3, #32
2400cc3e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400cc40:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400cc44:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400cc46:	e7ad      	b.n	2400cba4 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc48:	4b0e      	ldr	r3, [pc, #56]	; (2400cc84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400cc4a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc4c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400cc4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cc50:	f043 0308 	orr.w	r3, r3, #8
2400cc54:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400cc56:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400cc58:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400cc5c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400cc5e:	e7a1      	b.n	2400cba4 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc60:	4a08      	ldr	r2, [pc, #32]	; (2400cc84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400cc62:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cc64:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400cc66:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400cc68:	f042 0202 	orr.w	r2, r2, #2
2400cc6c:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400cc6e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400cc72:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400cc74:	e796      	b.n	2400cba4 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400cc76:	4904      	ldr	r1, [pc, #16]	; (2400cc88 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
2400cc78:	2201      	movs	r2, #1
    return HAL_OK;
2400cc7a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400cc7c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400cc7e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400cc82:	e78f      	b.n	2400cba4 <HAL_SD_ReadBlocks+0x128>
2400cc84:	1fe00fff 	.word	0x1fe00fff
2400cc88:	18000f3a 	.word	0x18000f3a

2400cc8c <HAL_SD_WriteBlocks>:
{
2400cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400cc90:	460d      	mov	r5, r1
2400cc92:	b089      	sub	sp, #36	; 0x24
2400cc94:	4604      	mov	r4, r0
2400cc96:	4692      	mov	sl, r2
2400cc98:	461f      	mov	r7, r3
2400cc9a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400cc9e:	f7f9 fa11 	bl	240060c4 <HAL_GetTick>
  if (NULL == pData)
2400cca2:	2d00      	cmp	r5, #0
2400cca4:	d07c      	beq.n	2400cda0 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
2400cca6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ccaa:	2b01      	cmp	r3, #1
2400ccac:	fa5f f983 	uxtb.w	r9, r3
2400ccb0:	d166      	bne.n	2400cd80 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ccb2:	eb0a 0307 	add.w	r3, sl, r7
2400ccb6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ccb8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ccba:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ccbc:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ccbe:	d879      	bhi.n	2400cdb4 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
2400ccc0:	2303      	movs	r3, #3
2400ccc2:	4606      	mov	r6, r0
2400ccc4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400ccc8:	6823      	ldr	r3, [r4, #0]
2400ccca:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400cccc:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400ccce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ccd0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400ccd2:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400ccd4:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400ccd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400ccdc:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400ccde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400cce2:	bf18      	it	ne
2400cce4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400cce8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400ccea:	027b      	lsls	r3, r7, #9
2400ccec:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400ccee:	2390      	movs	r3, #144	; 0x90
2400ccf0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ccf2:	f001 fc09 	bl	2400e508 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400ccf6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400ccf8:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400ccfa:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400ccfc:	68d3      	ldr	r3, [r2, #12]
2400ccfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400cd02:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400cd04:	d946      	bls.n	2400cd94 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400cd06:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400cd08:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400cd0a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400cd0c:	f001 feaa 	bl	2400ea64 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400cd10:	2800      	cmp	r0, #0
2400cd12:	d157      	bne.n	2400cdc4 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
2400cd14:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400cd18:	e004      	b.n	2400cd24 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cd1a:	f7f9 f9d3 	bl	240060c4 <HAL_GetTick>
2400cd1e:	1b80      	subs	r0, r0, r6
2400cd20:	4540      	cmp	r0, r8
2400cd22:	d21d      	bcs.n	2400cd60 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400cd24:	6820      	ldr	r0, [r4, #0]
2400cd26:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cd28:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400cd2c:	d156      	bne.n	2400cddc <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400cd2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cd30:	045a      	lsls	r2, r3, #17
2400cd32:	d5f2      	bpl.n	2400cd1a <HAL_SD_WriteBlocks+0x8e>
2400cd34:	f1bb 0f1f 	cmp.w	fp, #31
2400cd38:	d9ef      	bls.n	2400cd1a <HAL_SD_WriteBlocks+0x8e>
2400cd3a:	f105 0a20 	add.w	sl, r5, #32
2400cd3e:	e000      	b.n	2400cd42 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400cd40:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400cd42:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400cd46:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400cd48:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400cd4a:	f001 fbc7 	bl	2400e4dc <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400cd4e:	4555      	cmp	r5, sl
2400cd50:	d1f6      	bne.n	2400cd40 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cd52:	f7f9 f9b7 	bl	240060c4 <HAL_GetTick>
2400cd56:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
2400cd58:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400cd5c:	4540      	cmp	r0, r8
2400cd5e:	d3e1      	bcc.n	2400cd24 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cd60:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
2400cd62:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cd66:	4841      	ldr	r0, [pc, #260]	; (2400ce6c <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
2400cd68:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
2400cd6a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cd6c:	6388      	str	r0, [r1, #56]	; 0x38
}
2400cd6e:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
2400cd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400cd72:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400cd74:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400cd78:	62e3      	str	r3, [r4, #44]	; 0x2c
}
2400cd7a:	b009      	add	sp, #36	; 0x24
2400cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400cd80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400cd82:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400cd86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400cd8a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cd8c:	4648      	mov	r0, r9
2400cd8e:	b009      	add	sp, #36	; 0x24
2400cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400cd94:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400cd96:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400cd98:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400cd9a:	f001 fdbd 	bl	2400e918 <SDMMC_CmdWriteSingleBlock>
2400cd9e:	e7b7      	b.n	2400cd10 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cda0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400cda2:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cda6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400cdaa:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400cdac:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cdae:	b009      	add	sp, #36	; 0x24
2400cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400cdb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400cdb6:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400cdb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400cdbc:	6363      	str	r3, [r4, #52]	; 0x34
}
2400cdbe:	b009      	add	sp, #36	; 0x24
2400cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400cdc4:	6823      	ldr	r3, [r4, #0]
2400cdc6:	4a29      	ldr	r2, [pc, #164]	; (2400ce6c <HAL_SD_WriteBlocks+0x1e0>)
2400cdc8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400cdca:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400cdcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cdce:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400cdd0:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400cdd2:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400cdd4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400cdd8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400cdda:	e7d7      	b.n	2400cd8c <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400cddc:	68c3      	ldr	r3, [r0, #12]
2400cdde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400cde2:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400cde4:	6820      	ldr	r0, [r4, #0]
2400cde6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cde8:	05db      	lsls	r3, r3, #23
2400cdea:	d509      	bpl.n	2400ce00 <HAL_SD_WriteBlocks+0x174>
2400cdec:	2f01      	cmp	r7, #1
2400cdee:	d907      	bls.n	2400ce00 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400cdf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400cdf2:	2b03      	cmp	r3, #3
2400cdf4:	d004      	beq.n	2400ce00 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400cdf6:	f001 fedb 	bl	2400ebb0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400cdfa:	2800      	cmp	r0, #0
2400cdfc:	d1e2      	bne.n	2400cdc4 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400cdfe:	6820      	ldr	r0, [r4, #0]
2400ce00:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ce02:	f013 0308 	ands.w	r3, r3, #8
2400ce06:	d112      	bne.n	2400ce2e <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400ce08:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400ce0a:	f012 0202 	ands.w	r2, r2, #2
2400ce0e:	d11a      	bne.n	2400ce46 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400ce10:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ce12:	f013 0310 	ands.w	r3, r3, #16
2400ce16:	d021      	beq.n	2400ce5c <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce18:	4b14      	ldr	r3, [pc, #80]	; (2400ce6c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400ce1a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce1c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400ce1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ce20:	f043 0310 	orr.w	r3, r3, #16
2400ce24:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ce26:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ce2a:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ce2c:	e7ae      	b.n	2400cd8c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce2e:	4b0f      	ldr	r3, [pc, #60]	; (2400ce6c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400ce30:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce32:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400ce34:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ce36:	f043 0308 	orr.w	r3, r3, #8
2400ce3a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400ce3c:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400ce3e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ce42:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ce44:	e7a2      	b.n	2400cd8c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce46:	4a09      	ldr	r2, [pc, #36]	; (2400ce6c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400ce48:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ce4a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400ce4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400ce4e:	f042 0202 	orr.w	r2, r2, #2
2400ce52:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ce54:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ce58:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ce5a:	e797      	b.n	2400cd8c <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ce5c:	4904      	ldr	r1, [pc, #16]	; (2400ce70 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
2400ce5e:	2201      	movs	r2, #1
    return HAL_OK;
2400ce60:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ce62:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400ce64:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400ce68:	e790      	b.n	2400cd8c <HAL_SD_WriteBlocks+0x100>
2400ce6a:	bf00      	nop
2400ce6c:	1fe00fff 	.word	0x1fe00fff
2400ce70:	18000f3a 	.word	0x18000f3a

2400ce74 <HAL_SD_ErrorCallback>:
2400ce74:	4770      	bx	lr
2400ce76:	bf00      	nop

2400ce78 <HAL_SD_GetCardCSD>:
{
2400ce78:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400ce7a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400ce7c:	f04f 0c00 	mov.w	ip, #0
{
2400ce80:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400ce82:	0f92      	lsrs	r2, r2, #30
2400ce84:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400ce86:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400ce88:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400ce8c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400ce8e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400ce92:	f002 0203 	and.w	r2, r2, #3
2400ce96:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400ce98:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400ce9c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400ce9e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400cea2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400cea4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400cea8:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400ceaa:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ceac:	0d12      	lsrs	r2, r2, #20
2400ceae:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400ceb0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400ceb4:	f002 020f 	and.w	r2, r2, #15
2400ceb8:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400ceba:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400cebc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400cec0:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400cec2:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400cec4:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400cec8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400ceca:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400cecc:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400ced0:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400ced2:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ced4:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400ced8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400ceda:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400cede:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400cee0:	2a00      	cmp	r2, #0
2400cee2:	f040 808a 	bne.w	2400cffa <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400cee6:	f640 72fc 	movw	r2, #4092	; 0xffc
2400ceea:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
2400ceee:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400cef2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400cef6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400cef8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cefa:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400cefe:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400cf00:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400cf04:	f002 0207 	and.w	r2, r2, #7
2400cf08:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400cf0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cf0c:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400cf10:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400cf12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cf14:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400cf18:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400cf1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cf1c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400cf20:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400cf22:	690a      	ldr	r2, [r1, #16]
2400cf24:	3201      	adds	r2, #1
2400cf26:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400cf28:	7e08      	ldrb	r0, [r1, #24]
2400cf2a:	f000 0007 	and.w	r0, r0, #7
2400cf2e:	3002      	adds	r0, #2
2400cf30:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400cf32:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400cf34:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400cf36:	f891 c008 	ldrb.w	ip, [r1, #8]
2400cf3a:	f00c 0c0f 	and.w	ip, ip, #15
2400cf3e:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400cf42:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400cf46:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
2400cf48:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400cf4c:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
2400cf50:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400cf54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
2400cf56:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400cf58:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400cf5c:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400cf60:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400cf62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cf64:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400cf68:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400cf6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400cf6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400cf70:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400cf72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cf74:	0fd2      	lsrs	r2, r2, #31
2400cf76:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400cf78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cf7a:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400cf7e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400cf80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cf82:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400cf86:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400cf88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cf8a:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400cf8e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400cf90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cf92:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400cf96:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400cf9a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400cf9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400cfa2:	ea02 020c 	and.w	r2, r2, ip
2400cfa6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400cfaa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfac:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400cfb0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400cfb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfb6:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400cfba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400cfbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfc0:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400cfc4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400cfc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfca:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400cfce:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400cfd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfd4:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400cfd8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400cfdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400cfde:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400cfe2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400cfe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400cfe8:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400cfec:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400cff0:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400cff4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cff8:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400cffa:	2a01      	cmp	r2, #1
2400cffc:	d112      	bne.n	2400d024 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400cffe:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400d000:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400d004:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400d008:	0412      	lsls	r2, r2, #16
2400d00a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400d00e:	ea42 020c 	orr.w	r2, r2, ip
2400d012:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400d014:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400d016:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400d018:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400d01a:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400d01c:	0292      	lsls	r2, r2, #10
2400d01e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400d020:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400d022:	e797      	b.n	2400cf54 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d024:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400d026:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d028:	4805      	ldr	r0, [pc, #20]	; (2400d040 <HAL_SD_GetCardCSD+0x1c8>)
2400d02a:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400d02c:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400d02e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400d030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400d034:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400d036:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400d03a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d03e:	4770      	bx	lr
2400d040:	1fe00fff 	.word	0x1fe00fff

2400d044 <HAL_SD_InitCard>:
{
2400d044:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400d046:	2200      	movs	r2, #0
{
2400d048:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400d04a:	2300      	movs	r3, #0
{
2400d04c:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400d04e:	2100      	movs	r1, #0
2400d050:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400d054:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400d058:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400d05c:	f7fe fbdc 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400d060:	b940      	cbnz	r0, 2400d074 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400d062:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400d064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400d068:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400d06c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400d06e:	4630      	mov	r0, r6
2400d070:	b015      	add	sp, #84	; 0x54
2400d072:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400d074:	0a06      	lsrs	r6, r0, #8
2400d076:	4b8f      	ldr	r3, [pc, #572]	; (2400d2b4 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400d078:	aa07      	add	r2, sp, #28
2400d07a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400d07c:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400d080:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400d082:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400d084:	9608      	str	r6, [sp, #32]
2400d086:	e892 0003 	ldmia.w	r2, {r0, r1}
2400d08a:	e88d 0003 	stmia.w	sp, {r0, r1}
2400d08e:	cb0e      	ldmia	r3, {r1, r2, r3}
2400d090:	6820      	ldr	r0, [r4, #0]
2400d092:	f001 fa03 	bl	2400e49c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400d096:	6820      	ldr	r0, [r4, #0]
2400d098:	f001 fa26 	bl	2400e4e8 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400d09c:	4b86      	ldr	r3, [pc, #536]	; (2400d2b8 <HAL_SD_InitCard+0x274>)
2400d09e:	429d      	cmp	r5, r3
2400d0a0:	d902      	bls.n	2400d0a8 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400d0a2:	0076      	lsls	r6, r6, #1
2400d0a4:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400d0a8:	4884      	ldr	r0, [pc, #528]	; (2400d2bc <HAL_SD_InitCard+0x278>)
2400d0aa:	fbb0 f0f5 	udiv	r0, r0, r5
2400d0ae:	3001      	adds	r0, #1
2400d0b0:	f7f9 f80e 	bl	240060d0 <HAL_Delay>
  __IO uint32_t count = 0U;
2400d0b4:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400d0b6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400d0b8:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400d0ba:	f001 ff29 	bl	2400ef10 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d0be:	4605      	mov	r5, r0
2400d0c0:	b140      	cbz	r0, 2400d0d4 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400d0c2:	2601      	movs	r6, #1
2400d0c4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400d0c8:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400d0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d0cc:	431d      	orrs	r5, r3
2400d0ce:	6365      	str	r5, [r4, #52]	; 0x34
}
2400d0d0:	b015      	add	sp, #84	; 0x54
2400d0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400d0d4:	6820      	ldr	r0, [r4, #0]
2400d0d6:	f001 ff47 	bl	2400ef68 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400d0da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400d0de:	d06c      	beq.n	2400d1ba <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400d0e0:	2301      	movs	r3, #1
2400d0e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400d0e4:	2100      	movs	r1, #0
2400d0e6:	6820      	ldr	r0, [r4, #0]
2400d0e8:	f001 ff7e 	bl	2400efe8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d0ec:	bb08      	cbnz	r0, 2400d132 <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400d0ee:	9b03      	ldr	r3, [sp, #12]
2400d0f0:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400d0f4:	42b3      	cmp	r3, r6
2400d0f6:	f200 80d6 	bhi.w	2400d2a6 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400d0fa:	4f71      	ldr	r7, [pc, #452]	; (2400d2c0 <HAL_SD_InitCard+0x27c>)
2400d0fc:	e00b      	b.n	2400d116 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d0fe:	6820      	ldr	r0, [r4, #0]
2400d100:	f001 f9fe 	bl	2400e500 <SDMMC_GetResponse>
    count++;
2400d104:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400d106:	2800      	cmp	r0, #0
    count++;
2400d108:	f103 0301 	add.w	r3, r3, #1
2400d10c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400d10e:	9b03      	ldr	r3, [sp, #12]
2400d110:	db12      	blt.n	2400d138 <HAL_SD_InitCard+0xf4>
2400d112:	42b3      	cmp	r3, r6
2400d114:	d810      	bhi.n	2400d138 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400d116:	2100      	movs	r1, #0
2400d118:	6820      	ldr	r0, [r4, #0]
2400d11a:	f001 ff65 	bl	2400efe8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400d11e:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400d120:	4605      	mov	r5, r0
2400d122:	2800      	cmp	r0, #0
2400d124:	d1cd      	bne.n	2400d0c2 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400d126:	6820      	ldr	r0, [r4, #0]
2400d128:	f002 f804 	bl	2400f134 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d12c:	4601      	mov	r1, r0
2400d12e:	2800      	cmp	r0, #0
2400d130:	d0e5      	beq.n	2400d0fe <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400d132:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400d136:	e7c4      	b.n	2400d0c2 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400d138:	9a03      	ldr	r2, [sp, #12]
2400d13a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400d13e:	429a      	cmp	r2, r3
2400d140:	f200 80ab 	bhi.w	2400d29a <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400d144:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
2400d148:	d043      	beq.n	2400d1d2 <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400d14a:	2301      	movs	r3, #1
2400d14c:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400d14e:	2300      	movs	r3, #0
2400d150:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400d154:	f7f8 ffb6 	bl	240060c4 <HAL_GetTick>
2400d158:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400d15a:	6820      	ldr	r0, [r4, #0]
2400d15c:	f001 f9cc 	bl	2400e4f8 <SDMMC_GetPowerState>
2400d160:	2800      	cmp	r0, #0
2400d162:	d038      	beq.n	2400d1d6 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400d166:	2b03      	cmp	r3, #3
2400d168:	d140      	bne.n	2400d1ec <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400d16a:	2104      	movs	r1, #4
2400d16c:	6820      	ldr	r0, [r4, #0]
2400d16e:	f001 f9c7 	bl	2400e500 <SDMMC_GetResponse>
2400d172:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400d174:	a909      	add	r1, sp, #36	; 0x24
2400d176:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400d178:	0d1b      	lsrs	r3, r3, #20
2400d17a:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400d17c:	f7ff fe7c 	bl	2400ce78 <HAL_SD_GetCardCSD>
2400d180:	4606      	mov	r6, r0
2400d182:	2800      	cmp	r0, #0
2400d184:	f040 808c 	bne.w	2400d2a0 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400d188:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400d18a:	6820      	ldr	r0, [r4, #0]
2400d18c:	0409      	lsls	r1, r1, #16
2400d18e:	f001 fe19 	bl	2400edc4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d192:	bb10      	cbnz	r0, 2400d1da <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400d194:	f44f 7100 	mov.w	r1, #512	; 0x200
2400d198:	6820      	ldr	r0, [r4, #0]
2400d19a:	f001 f9cb 	bl	2400e534 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d19e:	2800      	cmp	r0, #0
2400d1a0:	f43f af65 	beq.w	2400d06e <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d1a4:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400d1a6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d1a8:	4946      	ldr	r1, [pc, #280]	; (2400d2c4 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400d1aa:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d1ac:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400d1ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400d1b0:	4310      	orrs	r0, r2
2400d1b2:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400d1b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400d1b8:	e759      	b.n	2400d06e <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400d1ba:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400d1bc:	6820      	ldr	r0, [r4, #0]
2400d1be:	f001 fea7 	bl	2400ef10 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d1c2:	4605      	mov	r5, r0
2400d1c4:	2800      	cmp	r0, #0
2400d1c6:	f47f af7c 	bne.w	2400d0c2 <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400d1ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400d1cc:	2b01      	cmp	r3, #1
2400d1ce:	d18e      	bne.n	2400d0ee <HAL_SD_InitCard+0xaa>
2400d1d0:	e788      	b.n	2400d0e4 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
2400d1d2:	63a0      	str	r0, [r4, #56]	; 0x38
2400d1d4:	e7bb      	b.n	2400d14e <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400d1d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400d1da:	2601      	movs	r6, #1
2400d1dc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400d1e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d1e2:	4318      	orrs	r0, r3
2400d1e4:	6360      	str	r0, [r4, #52]	; 0x34
}
2400d1e6:	4630      	mov	r0, r6
2400d1e8:	b015      	add	sp, #84	; 0x54
2400d1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400d1ec:	6820      	ldr	r0, [r4, #0]
2400d1ee:	f002 f929 	bl	2400f444 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d1f2:	2800      	cmp	r0, #0
2400d1f4:	d1f1      	bne.n	2400d1da <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d1f6:	4601      	mov	r1, r0
2400d1f8:	6820      	ldr	r0, [r4, #0]
2400d1fa:	f001 f981 	bl	2400e500 <SDMMC_GetResponse>
2400d1fe:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d200:	2104      	movs	r1, #4
2400d202:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d204:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d206:	f001 f97b 	bl	2400e500 <SDMMC_GetResponse>
2400d20a:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d20c:	2108      	movs	r1, #8
2400d20e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d210:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d212:	f001 f975 	bl	2400e500 <SDMMC_GetResponse>
2400d216:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400d218:	210c      	movs	r1, #12
2400d21a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d21c:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400d21e:	f001 f96f 	bl	2400e500 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400d224:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d226:	2b03      	cmp	r3, #3
2400d228:	d09f      	beq.n	2400d16a <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400d22a:	f241 3687 	movw	r6, #4999	; 0x1387
2400d22e:	e009      	b.n	2400d244 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400d230:	6820      	ldr	r0, [r4, #0]
2400d232:	f002 f985 	bl	2400f540 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400d236:	2800      	cmp	r0, #0
2400d238:	d1cf      	bne.n	2400d1da <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400d23a:	f7f8 ff43 	bl	240060c4 <HAL_GetTick>
2400d23e:	1b43      	subs	r3, r0, r5
2400d240:	42b3      	cmp	r3, r6
2400d242:	d827      	bhi.n	2400d294 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
2400d244:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400d248:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400d24c:	2b00      	cmp	r3, #0
2400d24e:	d0ef      	beq.n	2400d230 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d250:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400d252:	2a03      	cmp	r2, #3
2400d254:	d089      	beq.n	2400d16a <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d256:	0419      	lsls	r1, r3, #16
2400d258:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400d25a:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d25c:	f002 f930 	bl	2400f4c0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d260:	2800      	cmp	r0, #0
2400d262:	d1ba      	bne.n	2400d1da <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d264:	4601      	mov	r1, r0
2400d266:	6820      	ldr	r0, [r4, #0]
2400d268:	f001 f94a 	bl	2400e500 <SDMMC_GetResponse>
2400d26c:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d26e:	2104      	movs	r1, #4
2400d270:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d272:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d274:	f001 f944 	bl	2400e500 <SDMMC_GetResponse>
2400d278:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d27a:	2108      	movs	r1, #8
2400d27c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400d27e:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d280:	f001 f93e 	bl	2400e500 <SDMMC_GetResponse>
2400d284:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400d286:	210c      	movs	r1, #12
2400d288:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400d28a:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400d28c:	f001 f938 	bl	2400e500 <SDMMC_GetResponse>
2400d290:	66a0      	str	r0, [r4, #104]	; 0x68
2400d292:	e76a      	b.n	2400d16a <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
2400d294:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400d298:	e79f      	b.n	2400d1da <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400d29a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400d29e:	e710      	b.n	2400d0c2 <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400d2a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400d2a4:	e799      	b.n	2400d1da <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400d2a6:	9b03      	ldr	r3, [sp, #12]
2400d2a8:	42b3      	cmp	r3, r6
2400d2aa:	d8f6      	bhi.n	2400d29a <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
2400d2ac:	2300      	movs	r3, #0
2400d2ae:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400d2b0:	e74d      	b.n	2400d14e <HAL_SD_InitCard+0x10a>
2400d2b2:	bf00      	nop
2400d2b4:	014f8b59 	.word	0x014f8b59
2400d2b8:	000c34ff 	.word	0x000c34ff
2400d2bc:	00012110 	.word	0x00012110
2400d2c0:	c1100000 	.word	0xc1100000
2400d2c4:	1fe00fff 	.word	0x1fe00fff

2400d2c8 <HAL_SD_GetCardInfo>:
{
2400d2c8:	4603      	mov	r3, r0
}
2400d2ca:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400d2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400d2ce:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400d2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400d2d2:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400d2d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400d2d6:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400d2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400d2da:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400d2dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400d2de:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400d2e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400d2e2:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400d2e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400d2e6:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400d2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400d2ea:	61cb      	str	r3, [r1, #28]
}
2400d2ec:	4770      	bx	lr
2400d2ee:	bf00      	nop

2400d2f0 <HAL_SD_ConfigWideBusOperation>:
{
2400d2f0:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400d2f2:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d2f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400d2f6:	b089      	sub	sp, #36	; 0x24
2400d2f8:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d2fa:	4293      	cmp	r3, r2
{
2400d2fc:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400d2fe:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400d302:	d033      	beq.n	2400d36c <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400d304:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400d308:	d030      	beq.n	2400d36c <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400d30a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400d30e:	f000 8084 	beq.w	2400d41a <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400d312:	2900      	cmp	r1, #0
2400d314:	d062      	beq.n	2400d3dc <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400d316:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400d31c:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400d31e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d320:	bb5b      	cbnz	r3, 2400d37a <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400d322:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400d326:	2100      	movs	r1, #0
2400d328:	f7fe fa76 	bl	2400b818 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400d32c:	2800      	cmp	r0, #0
2400d32e:	d03b      	beq.n	2400d3a8 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400d330:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400d332:	4b55      	ldr	r3, [pc, #340]	; (2400d488 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400d334:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400d336:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400d338:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400d33a:	fba3 5300 	umull	r5, r3, r3, r0
2400d33e:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400d340:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400d342:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400d346:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400d348:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400d34c:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400d34e:	d238      	bcs.n	2400d3c2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400d350:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400d352:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400d356:	d034      	beq.n	2400d3c2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400d358:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400d35c:	d07f      	beq.n	2400d45e <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
2400d35e:	bb4a      	cbnz	r2, 2400d3b4 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400d360:	4b4a      	ldr	r3, [pc, #296]	; (2400d48c <HAL_SD_ConfigWideBusOperation+0x19c>)
2400d362:	4298      	cmp	r0, r3
2400d364:	f240 8085 	bls.w	2400d472 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400d368:	9506      	str	r5, [sp, #24]
2400d36a:	e02b      	b.n	2400d3c4 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400d36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d36e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400d372:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400d374:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d376:	2b00      	cmp	r3, #0
2400d378:	d0d3      	beq.n	2400d322 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d37a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400d37c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d37e:	4a44      	ldr	r2, [pc, #272]	; (2400d490 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400d380:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400d382:	f44f 7100 	mov.w	r1, #512	; 0x200
2400d386:	6820      	ldr	r0, [r4, #0]
2400d388:	f001 f8d4 	bl	2400e534 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d38c:	b130      	cbz	r0, 2400d39c <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d38e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400d390:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400d392:	4a3f      	ldr	r2, [pc, #252]	; (2400d490 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400d394:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400d396:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d398:	4318      	orrs	r0, r3
2400d39a:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400d39c:	2301      	movs	r3, #1
}
2400d39e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400d3a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400d3a4:	b009      	add	sp, #36	; 0x24
2400d3a6:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400d3a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400d3aa:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400d3ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400d3b0:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400d3b2:	e7e6      	b.n	2400d382 <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400d3b4:	0053      	lsls	r3, r2, #1
2400d3b6:	fbb0 f0f3 	udiv	r0, r0, r3
2400d3ba:	4b34      	ldr	r3, [pc, #208]	; (2400d48c <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400d3bc:	4298      	cmp	r0, r3
2400d3be:	bf88      	it	hi
2400d3c0:	462a      	movhi	r2, r5
2400d3c2:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400d3c4:	aa05      	add	r2, sp, #20
2400d3c6:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400d3c8:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400d3ca:	e892 0003 	ldmia.w	r2, {r0, r1}
2400d3ce:	e88d 0003 	stmia.w	sp, {r0, r1}
2400d3d2:	cb0e      	ldmia	r3, {r1, r2, r3}
2400d3d4:	6820      	ldr	r0, [r4, #0]
2400d3d6:	f001 f861 	bl	2400e49c <SDMMC_Init>
2400d3da:	e7d2      	b.n	2400d382 <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
2400d3dc:	2200      	movs	r2, #0
2400d3de:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400d3e0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400d3e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400d3e6:	f001 f88b 	bl	2400e500 <SDMMC_GetResponse>
2400d3ea:	0182      	lsls	r2, r0, #6
2400d3ec:	d434      	bmi.n	2400d458 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400d3ee:	a902      	add	r1, sp, #8
2400d3f0:	4620      	mov	r0, r4
2400d3f2:	f7ff fa09 	bl	2400c808 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d3f6:	b960      	cbnz	r0, 2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400d3f8:	9b03      	ldr	r3, [sp, #12]
2400d3fa:	03db      	lsls	r3, r3, #15
2400d3fc:	d536      	bpl.n	2400d46c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d3fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400d400:	6820      	ldr	r0, [r4, #0]
2400d402:	0409      	lsls	r1, r1, #16
2400d404:	f001 fdf0 	bl	2400efe8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d408:	b918      	cbnz	r0, 2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400d40a:	4601      	mov	r1, r0
2400d40c:	6820      	ldr	r0, [r4, #0]
2400d40e:	f001 fecb 	bl	2400f1a8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400d412:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d414:	4318      	orrs	r0, r3
2400d416:	6360      	str	r0, [r4, #52]	; 0x34
2400d418:	e7ac      	b.n	2400d374 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
2400d41a:	2200      	movs	r2, #0
2400d41c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400d41e:	2100      	movs	r1, #0
2400d420:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400d422:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400d426:	f001 f86b 	bl	2400e500 <SDMMC_GetResponse>
2400d42a:	0180      	lsls	r0, r0, #6
2400d42c:	d414      	bmi.n	2400d458 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400d42e:	a902      	add	r1, sp, #8
2400d430:	4620      	mov	r0, r4
2400d432:	f7ff f9e9 	bl	2400c808 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d436:	2800      	cmp	r0, #0
2400d438:	d1eb      	bne.n	2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400d43a:	9b03      	ldr	r3, [sp, #12]
2400d43c:	0359      	lsls	r1, r3, #13
2400d43e:	d515      	bpl.n	2400d46c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d440:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400d442:	6820      	ldr	r0, [r4, #0]
2400d444:	0409      	lsls	r1, r1, #16
2400d446:	f001 fdcf 	bl	2400efe8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d44a:	2800      	cmp	r0, #0
2400d44c:	d1e1      	bne.n	2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400d44e:	2102      	movs	r1, #2
2400d450:	6820      	ldr	r0, [r4, #0]
2400d452:	f001 fea9 	bl	2400f1a8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400d456:	e7dc      	b.n	2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400d458:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d45c:	e7d9      	b.n	2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
2400d45e:	b95a      	cbnz	r2, 2400d478 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400d460:	4a0c      	ldr	r2, [pc, #48]	; (2400d494 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400d462:	4290      	cmp	r0, r2
2400d464:	d905      	bls.n	2400d472 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400d466:	0e5b      	lsrs	r3, r3, #25
2400d468:	9306      	str	r3, [sp, #24]
2400d46a:	e7ab      	b.n	2400d3c4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400d46c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400d470:	e7cf      	b.n	2400d412 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400d472:	2300      	movs	r3, #0
2400d474:	9306      	str	r3, [sp, #24]
2400d476:	e7a5      	b.n	2400d3c4 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400d478:	0051      	lsls	r1, r2, #1
2400d47a:	fbb0 f0f1 	udiv	r0, r0, r1
2400d47e:	4905      	ldr	r1, [pc, #20]	; (2400d494 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400d480:	4288      	cmp	r0, r1
2400d482:	d99e      	bls.n	2400d3c2 <HAL_SD_ConfigWideBusOperation+0xd2>
2400d484:	e7ef      	b.n	2400d466 <HAL_SD_ConfigWideBusOperation+0x176>
2400d486:	bf00      	nop
2400d488:	55e63b89 	.word	0x55e63b89
2400d48c:	017d7840 	.word	0x017d7840
2400d490:	1fe00fff 	.word	0x1fe00fff
2400d494:	02faf080 	.word	0x02faf080

2400d498 <HAL_SD_Init>:
{
2400d498:	b5f0      	push	{r4, r5, r6, r7, lr}
2400d49a:	b087      	sub	sp, #28
  if (hsd == NULL)
2400d49c:	2800      	cmp	r0, #0
2400d49e:	d044      	beq.n	2400d52a <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
2400d4a0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400d4a4:	4604      	mov	r4, r0
2400d4a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400d4aa:	2b00      	cmp	r3, #0
2400d4ac:	d041      	beq.n	2400d532 <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400d4ae:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400d4b0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400d4b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400d4b6:	f7ff fdc5 	bl	2400d044 <HAL_SD_InitCard>
2400d4ba:	2800      	cmp	r0, #0
2400d4bc:	d135      	bne.n	2400d52a <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400d4be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400d4c2:	2b03      	cmp	r3, #3
2400d4c4:	d031      	beq.n	2400d52a <HAL_SD_Init+0x92>
2400d4c6:	a901      	add	r1, sp, #4
2400d4c8:	4620      	mov	r0, r4
2400d4ca:	f7ff fa0f 	bl	2400c8ec <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400d4ce:	bb60      	cbnz	r0, 2400d52a <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400d4d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400d4d2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400d4d6:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400d4d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400d4dc:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
2400d4de:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400d4e0:	d02b      	beq.n	2400d53a <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400d4e2:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400d4e4:	68e1      	ldr	r1, [r4, #12]
2400d4e6:	4620      	mov	r0, r4
2400d4e8:	f7ff ff02 	bl	2400d2f0 <HAL_SD_ConfigWideBusOperation>
2400d4ec:	4606      	mov	r6, r0
2400d4ee:	b9e0      	cbnz	r0, 2400d52a <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
2400d4f0:	f7f8 fde8 	bl	240060c4 <HAL_GetTick>
2400d4f4:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400d4f6:	e00c      	b.n	2400d512 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d4f8:	6820      	ldr	r0, [r4, #0]
2400d4fa:	4629      	mov	r1, r5
2400d4fc:	f001 f800 	bl	2400e500 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400d500:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400d504:	2804      	cmp	r0, #4
2400d506:	d020      	beq.n	2400d54a <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400d508:	f7f8 fddc 	bl	240060c4 <HAL_GetTick>
2400d50c:	1bc3      	subs	r3, r0, r7
2400d50e:	3301      	adds	r3, #1
2400d510:	d021      	beq.n	2400d556 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d512:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400d514:	6820      	ldr	r0, [r4, #0]
2400d516:	0409      	lsls	r1, r1, #16
2400d518:	f002 f86a 	bl	2400f5f0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d51c:	4605      	mov	r5, r0
2400d51e:	2800      	cmp	r0, #0
2400d520:	d0ea      	beq.n	2400d4f8 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
2400d522:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d524:	4303      	orrs	r3, r0
2400d526:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400d528:	e7ee      	b.n	2400d508 <HAL_SD_Init+0x70>
    return HAL_ERROR;
2400d52a:	2601      	movs	r6, #1
}
2400d52c:	4630      	mov	r0, r6
2400d52e:	b007      	add	sp, #28
2400d530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400d532:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400d534:	f7f8 fa3e 	bl	240059b4 <HAL_SD_MspInit>
2400d538:	e7b9      	b.n	2400d4ae <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400d53a:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400d53c:	bf14      	ite	ne
2400d53e:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400d542:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400d546:	65a3      	str	r3, [r4, #88]	; 0x58
2400d548:	e7cc      	b.n	2400d4e4 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400d54a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400d54c:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400d54e:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400d550:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400d554:	e7ea      	b.n	2400d52c <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400d556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400d55a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400d55c:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400d55e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400d560:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400d564:	e7e2      	b.n	2400d52c <HAL_SD_Init+0x94>
2400d566:	bf00      	nop

2400d568 <HAL_SD_GetCardState>:
{
2400d568:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d56a:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400d56c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400d56e:	6800      	ldr	r0, [r0, #0]
2400d570:	0409      	lsls	r1, r1, #16
2400d572:	f002 f83d 	bl	2400f5f0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400d576:	4601      	mov	r1, r0
2400d578:	b120      	cbz	r0, 2400d584 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400d57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d57c:	2000      	movs	r0, #0
2400d57e:	4319      	orrs	r1, r3
2400d580:	6361      	str	r1, [r4, #52]	; 0x34
}
2400d582:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400d584:	6820      	ldr	r0, [r4, #0]
2400d586:	f000 ffbb 	bl	2400e500 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400d58a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400d58e:	bd10      	pop	{r4, pc}

2400d590 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
2400d590:	4770      	bx	lr
2400d592:	bf00      	nop

2400d594 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
2400d594:	4770      	bx	lr
2400d596:	bf00      	nop

2400d598 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
2400d598:	4770      	bx	lr
2400d59a:	bf00      	nop

2400d59c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
2400d59c:	4770      	bx	lr
2400d59e:	bf00      	nop

2400d5a0 <HAL_SD_IRQHandler>:
{
2400d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
2400d5a2:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400d5a4:	6800      	ldr	r0, [r0, #0]
{
2400d5a6:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
2400d5a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400d5aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d5ac:	041b      	lsls	r3, r3, #16
2400d5ae:	d502      	bpl.n	2400d5b6 <HAL_SD_IRQHandler+0x16>
2400d5b0:	072f      	lsls	r7, r5, #28
2400d5b2:	f100 80b7 	bmi.w	2400d724 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
2400d5b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d5b8:	05de      	lsls	r6, r3, #23
2400d5ba:	d529      	bpl.n	2400d610 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400d5bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400d5c0:	4b99      	ldr	r3, [pc, #612]	; (2400d828 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400d5c2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400d5c4:	6822      	ldr	r2, [r4, #0]
2400d5c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
2400d5c8:	400b      	ands	r3, r1
2400d5ca:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400d5cc:	6822      	ldr	r2, [r4, #0]
2400d5ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
2400d5d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400d5d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400d5d6:	6822      	ldr	r2, [r4, #0]
2400d5d8:	68d3      	ldr	r3, [r2, #12]
2400d5da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d5de:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
2400d5e0:	f015 0308 	ands.w	r3, r5, #8
2400d5e4:	d076      	beq.n	2400d6d4 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400d5e6:	f015 0f22 	tst.w	r5, #34	; 0x22
2400d5ea:	f040 80e9 	bne.w	2400d7c0 <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400d5ee:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
2400d5f0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400d5f2:	498e      	ldr	r1, [pc, #568]	; (2400d82c <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400d5f4:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400d5f6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
2400d5f8:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400d5fc:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400d600:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400d602:	f000 80b0 	beq.w	2400d766 <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
2400d606:	4620      	mov	r0, r4
2400d608:	f002 f98c 	bl	2400f924 <HAL_SD_RxCpltCallback>
}
2400d60c:	b003      	add	sp, #12
2400d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400d610:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d612:	045b      	lsls	r3, r3, #17
2400d614:	d502      	bpl.n	2400d61c <HAL_SD_IRQHandler+0x7c>
2400d616:	072f      	lsls	r7, r5, #28
2400d618:	f100 80aa 	bmi.w	2400d770 <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
2400d61c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d61e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
2400d622:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
2400d624:	d06e      	beq.n	2400d704 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
2400d626:	079e      	lsls	r6, r3, #30
2400d628:	d503      	bpl.n	2400d632 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400d62a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d62c:	f043 0302 	orr.w	r3, r3, #2
2400d630:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
2400d632:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d634:	0719      	lsls	r1, r3, #28
2400d636:	d503      	bpl.n	2400d640 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400d638:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d63a:	f043 0308 	orr.w	r3, r3, #8
2400d63e:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
2400d640:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d642:	069a      	lsls	r2, r3, #26
2400d644:	d503      	bpl.n	2400d64e <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400d646:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d648:	f043 0320 	orr.w	r3, r3, #32
2400d64c:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
2400d64e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d650:	06db      	lsls	r3, r3, #27
2400d652:	d503      	bpl.n	2400d65c <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400d654:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d656:	f043 0310 	orr.w	r3, r3, #16
2400d65a:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400d65c:	4b73      	ldr	r3, [pc, #460]	; (2400d82c <HAL_SD_IRQHandler+0x28c>)
2400d65e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400d660:	6822      	ldr	r2, [r4, #0]
2400d662:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
2400d664:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
2400d668:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400d66a:	6822      	ldr	r2, [r4, #0]
2400d66c:	68d3      	ldr	r3, [r2, #12]
2400d66e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d672:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
2400d674:	6822      	ldr	r2, [r4, #0]
2400d676:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400d678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2400d67c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
2400d67e:	6822      	ldr	r2, [r4, #0]
2400d680:	68d3      	ldr	r3, [r2, #12]
2400d682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400d686:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2400d688:	6820      	ldr	r0, [r4, #0]
2400d68a:	f001 fa91 	bl	2400ebb0 <SDMMC_CmdStopTransfer>
2400d68e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
2400d690:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
2400d692:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2400d696:	4318      	orrs	r0, r3
2400d698:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
2400d69a:	68d3      	ldr	r3, [r2, #12]
2400d69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400d6a0:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
2400d6a2:	6823      	ldr	r3, [r4, #0]
2400d6a4:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
2400d6a6:	f015 0308 	ands.w	r3, r5, #8
2400d6aa:	f040 8097 	bne.w	2400d7dc <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
2400d6ae:	062f      	lsls	r7, r5, #24
2400d6b0:	d5ac      	bpl.n	2400d60c <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400d6b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400d6b4:	2a00      	cmp	r2, #0
2400d6b6:	d0a9      	beq.n	2400d60c <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400d6b8:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400d6ba:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
2400d6bc:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400d6be:	6bca      	ldr	r2, [r1, #60]	; 0x3c
2400d6c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
2400d6c4:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
2400d6c6:	6822      	ldr	r2, [r4, #0]
2400d6c8:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
2400d6ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
2400d6ce:	f7ff fbd1 	bl	2400ce74 <HAL_SD_ErrorCallback>
2400d6d2:	e79b      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
2400d6d4:	0629      	lsls	r1, r5, #24
2400d6d6:	d599      	bpl.n	2400d60c <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
2400d6d8:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400d6da:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
2400d6de:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
2400d6e0:	6822      	ldr	r2, [r4, #0]
2400d6e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
2400d6e4:	6822      	ldr	r2, [r4, #0]
2400d6e6:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400d6e8:	f040 8086 	bne.w	2400d7f8 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
2400d6ec:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
2400d6ee:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400d6f0:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
2400d6f4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400d6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400d6fa:	f040 808b 	bne.w	2400d814 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400d6fe:	07aa      	lsls	r2, r5, #30
2400d700:	d084      	beq.n	2400d60c <HAL_SD_IRQHandler+0x6c>
2400d702:	e780      	b.n	2400d606 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
2400d704:	00de      	lsls	r6, r3, #3
2400d706:	d581      	bpl.n	2400d60c <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
2400d708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
2400d70c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
2400d70e:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
2400d710:	6823      	ldr	r3, [r4, #0]
2400d712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400d714:	0759      	lsls	r1, r3, #29
2400d716:	d46a      	bmi.n	2400d7ee <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
2400d718:	06aa      	lsls	r2, r5, #26
2400d71a:	f140 8082 	bpl.w	2400d822 <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
2400d71e:	f7ff ff3d 	bl	2400d59c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
2400d722:	e773      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
2400d724:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400d726:	2b1f      	cmp	r3, #31
2400d728:	f67f af70 	bls.w	2400d60c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
2400d72c:	6a67      	ldr	r7, [r4, #36]	; 0x24
2400d72e:	1d3d      	adds	r5, r7, #4
2400d730:	f107 0624 	add.w	r6, r7, #36	; 0x24
2400d734:	e000      	b.n	2400d738 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
2400d736:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
2400d738:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
2400d73a:	f000 fecb 	bl	2400e4d4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400d73e:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400d740:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
2400d742:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
2400d746:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
2400d748:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400d74c:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400d750:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
2400d754:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
2400d758:	d1ed      	bne.n	2400d736 <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
2400d75a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
2400d75c:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
2400d75e:	3b20      	subs	r3, #32
2400d760:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
2400d764:	e752      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
2400d766:	4620      	mov	r0, r4
2400d768:	f002 f8d6 	bl	2400f918 <HAL_SD_TxCpltCallback>
}
2400d76c:	b003      	add	sp, #12
2400d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
2400d770:	6a23      	ldr	r3, [r4, #32]
2400d772:	2b1f      	cmp	r3, #31
2400d774:	f67f af4a 	bls.w	2400d60c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
2400d778:	69e6      	ldr	r6, [r4, #28]
2400d77a:	1d37      	adds	r7, r6, #4
2400d77c:	f106 0524 	add.w	r5, r6, #36	; 0x24
2400d780:	e000      	b.n	2400d784 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400d782:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
2400d784:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
2400d788:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400d78a:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
2400d78c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
2400d78e:	f817 2c07 	ldrb.w	r2, [r7, #-7]
2400d792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400d796:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
2400d798:	f817 2c06 	ldrb.w	r2, [r7, #-6]
2400d79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
2400d7a0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
2400d7a2:	f817 2c05 	ldrb.w	r2, [r7, #-5]
2400d7a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400d7aa:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400d7ac:	f000 fe96 	bl	2400e4dc <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
2400d7b0:	42bd      	cmp	r5, r7
2400d7b2:	d1e6      	bne.n	2400d782 <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
2400d7b4:	6a23      	ldr	r3, [r4, #32]
      tmp++;
2400d7b6:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
2400d7b8:	3b20      	subs	r3, #32
2400d7ba:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
2400d7be:	e725      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400d7c0:	6820      	ldr	r0, [r4, #0]
2400d7c2:	f001 f9f5 	bl	2400ebb0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400d7c6:	4603      	mov	r3, r0
2400d7c8:	2800      	cmp	r0, #0
2400d7ca:	f43f af10 	beq.w	2400d5ee <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
2400d7ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400d7d0:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
2400d7d2:	4313      	orrs	r3, r2
2400d7d4:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400d7d6:	f7ff fb4d 	bl	2400ce74 <HAL_SD_ErrorCallback>
2400d7da:	e708      	b.n	2400d5ee <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
2400d7dc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
2400d7de:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
2400d7e0:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
2400d7e2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400d7e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
2400d7e8:	f7ff fb44 	bl	2400ce74 <HAL_SD_ErrorCallback>
2400d7ec:	e70e      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
2400d7ee:	06ab      	lsls	r3, r5, #26
2400d7f0:	d514      	bpl.n	2400d81c <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
2400d7f2:	f7ff fed1 	bl	2400d598 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
2400d7f6:	e709      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400d7f8:	6820      	ldr	r0, [r4, #0]
2400d7fa:	f001 f9d9 	bl	2400ebb0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400d7fe:	4603      	mov	r3, r0
2400d800:	2800      	cmp	r0, #0
2400d802:	f43f af73 	beq.w	2400d6ec <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
2400d806:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400d808:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
2400d80a:	4313      	orrs	r3, r2
2400d80c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400d80e:	f7ff fb31 	bl	2400ce74 <HAL_SD_ErrorCallback>
2400d812:	e76b      	b.n	2400d6ec <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
2400d814:	4620      	mov	r0, r4
2400d816:	f002 f87f 	bl	2400f918 <HAL_SD_TxCpltCallback>
2400d81a:	e770      	b.n	2400d6fe <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
2400d81c:	f7ff feb8 	bl	2400d590 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
2400d820:	e6f4      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
2400d822:	f7ff feb7 	bl	2400d594 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
2400d826:	e6f1      	b.n	2400d60c <HAL_SD_IRQHandler+0x6c>
2400d828:	ffff3ec5 	.word	0xffff3ec5
2400d82c:	18000f3a 	.word	0x18000f3a

2400d830 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400d830:	b318      	cbz	r0, 2400d87a <HAL_SDRAM_Init+0x4a>
{
2400d832:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400d834:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400d838:	4604      	mov	r4, r0
2400d83a:	460d      	mov	r5, r1
2400d83c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400d840:	b1b3      	cbz	r3, 2400d870 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400d842:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400d844:	2302      	movs	r3, #2
2400d846:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400d84a:	f851 0b04 	ldr.w	r0, [r1], #4
2400d84e:	f000 fd73 	bl	2400e338 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400d852:	6862      	ldr	r2, [r4, #4]
2400d854:	4629      	mov	r1, r5
2400d856:	6820      	ldr	r0, [r4, #0]
2400d858:	f000 fdac 	bl	2400e3b4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400d85c:	4a08      	ldr	r2, [pc, #32]	; (2400d880 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400d85e:	2101      	movs	r1, #1

  return HAL_OK;
2400d860:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400d862:	6813      	ldr	r3, [r2, #0]
2400d864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400d868:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400d86a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400d86e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400d870:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400d874:	f7f6 fad8 	bl	24003e28 <HAL_SDRAM_MspInit>
2400d878:	e7e3      	b.n	2400d842 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400d87a:	2001      	movs	r0, #1
}
2400d87c:	4770      	bx	lr
2400d87e:	bf00      	nop
2400d880:	52004000 	.word	0x52004000

2400d884 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400d884:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400d886:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400d88a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400d88c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400d88e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400d890:	d004      	beq.n	2400d89c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400d892:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400d896:	2e01      	cmp	r6, #1
2400d898:	d001      	beq.n	2400d89e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400d89a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400d89c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400d89e:	2302      	movs	r3, #2
2400d8a0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400d8a2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400d8a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400d8a8:	f000 fdd2 	bl	2400e450 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400d8ac:	682b      	ldr	r3, [r5, #0]
2400d8ae:	2b02      	cmp	r3, #2
2400d8b0:	d003      	beq.n	2400d8ba <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400d8b2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400d8b4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400d8b8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400d8ba:	2305      	movs	r3, #5
  return HAL_OK;
2400d8bc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400d8be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400d8c2:	bd70      	pop	{r4, r5, r6, pc}

2400d8c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400d8c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400d8c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400d8ca:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400d8cc:	2b02      	cmp	r3, #2
2400d8ce:	b2d8      	uxtb	r0, r3
2400d8d0:	d005      	beq.n	2400d8de <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400d8d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400d8d6:	2b01      	cmp	r3, #1
2400d8d8:	b2dd      	uxtb	r5, r3
2400d8da:	d001      	beq.n	2400d8e0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400d8dc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400d8de:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400d8e0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400d8e2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400d8e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400d8e8:	f000 fdca 	bl	2400e480 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400d8ec:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400d8ee:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400d8f2:	bd38      	pop	{r3, r4, r5, pc}

2400d8f4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400d8f4:	6802      	ldr	r2, [r0, #0]
{
2400d8f6:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400d8f8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400d8fa:	6991      	ldr	r1, [r2, #24]
2400d8fc:	f041 0108 	orr.w	r1, r1, #8
2400d900:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400d902:	6801      	ldr	r1, [r0, #0]
2400d904:	698a      	ldr	r2, [r1, #24]
2400d906:	f042 0210 	orr.w	r2, r2, #16
2400d90a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400d90c:	6801      	ldr	r1, [r0, #0]
2400d90e:	680a      	ldr	r2, [r1, #0]
2400d910:	f022 0201 	bic.w	r2, r2, #1
2400d914:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400d916:	6801      	ldr	r1, [r0, #0]
2400d918:	4a27      	ldr	r2, [pc, #156]	; (2400d9b8 <SPI_CloseTransfer+0xc4>)
2400d91a:	690c      	ldr	r4, [r1, #16]
2400d91c:	4022      	ands	r2, r4
2400d91e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400d920:	6801      	ldr	r1, [r0, #0]
2400d922:	688a      	ldr	r2, [r1, #8]
2400d924:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400d928:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400d92a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400d92e:	2a04      	cmp	r2, #4
2400d930:	d001      	beq.n	2400d936 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400d932:	069c      	lsls	r4, r3, #26
2400d934:	d433      	bmi.n	2400d99e <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400d936:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400d93a:	2a03      	cmp	r2, #3
2400d93c:	d001      	beq.n	2400d942 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400d93e:	0659      	lsls	r1, r3, #25
2400d940:	d421      	bmi.n	2400d986 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400d942:	059a      	lsls	r2, r3, #22
2400d944:	d50a      	bpl.n	2400d95c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400d946:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400d94a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400d94c:	f042 0201 	orr.w	r2, r2, #1
2400d950:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400d954:	698a      	ldr	r2, [r1, #24]
2400d956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400d95a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400d95c:	05db      	lsls	r3, r3, #23
2400d95e:	d50a      	bpl.n	2400d976 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400d960:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400d964:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400d966:	f043 0308 	orr.w	r3, r3, #8
2400d96a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400d96e:	6993      	ldr	r3, [r2, #24]
2400d970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400d974:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400d976:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400d978:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400d97c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400d980:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400d984:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400d986:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400d98a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400d98c:	f042 0204 	orr.w	r2, r2, #4
2400d990:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400d994:	698a      	ldr	r2, [r1, #24]
2400d996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400d99a:	618a      	str	r2, [r1, #24]
2400d99c:	e7d1      	b.n	2400d942 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400d99e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400d9a2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400d9a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400d9a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400d9ac:	698a      	ldr	r2, [r1, #24]
2400d9ae:	f042 0220 	orr.w	r2, r2, #32
2400d9b2:	618a      	str	r2, [r1, #24]
2400d9b4:	e7bf      	b.n	2400d936 <SPI_CloseTransfer+0x42>
2400d9b6:	bf00      	nop
2400d9b8:	fffffc90 	.word	0xfffffc90

2400d9bc <HAL_SPI_Init>:
  if (hspi == NULL)
2400d9bc:	2800      	cmp	r0, #0
2400d9be:	f000 80be 	beq.w	2400db3e <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400d9c2:	4a62      	ldr	r2, [pc, #392]	; (2400db4c <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400d9c4:	2100      	movs	r1, #0
{
2400d9c6:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400d9c8:	6803      	ldr	r3, [r0, #0]
2400d9ca:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400d9cc:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400d9ce:	4293      	cmp	r3, r2
2400d9d0:	d015      	beq.n	2400d9fe <HAL_SPI_Init+0x42>
2400d9d2:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400d9d6:	4293      	cmp	r3, r2
2400d9d8:	d011      	beq.n	2400d9fe <HAL_SPI_Init+0x42>
2400d9da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400d9de:	4293      	cmp	r3, r2
2400d9e0:	68c2      	ldr	r2, [r0, #12]
2400d9e2:	f000 80a5 	beq.w	2400db30 <HAL_SPI_Init+0x174>
2400d9e6:	2a0f      	cmp	r2, #15
2400d9e8:	d807      	bhi.n	2400d9fa <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400d9ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400d9ec:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400d9ee:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400d9f0:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400d9f2:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400d9f6:	2a08      	cmp	r2, #8
2400d9f8:	d914      	bls.n	2400da24 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400d9fa:	2001      	movs	r0, #1
}
2400d9fc:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400d9fe:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400da00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400da02:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400da04:	4d51      	ldr	r5, [pc, #324]	; (2400db4c <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400da06:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
2400da08:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400da0a:	4951      	ldr	r1, [pc, #324]	; (2400db50 <HAL_SPI_Init+0x194>)
2400da0c:	428b      	cmp	r3, r1
2400da0e:	bf18      	it	ne
2400da10:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
2400da12:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400da16:	d003      	beq.n	2400da20 <HAL_SPI_Init+0x64>
2400da18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400da1c:	428b      	cmp	r3, r1
2400da1e:	d101      	bne.n	2400da24 <HAL_SPI_Init+0x68>
2400da20:	2a10      	cmp	r2, #16
2400da22:	d8ea      	bhi.n	2400d9fa <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400da24:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400da28:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400da2c:	2a00      	cmp	r2, #0
2400da2e:	d078      	beq.n	2400db22 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400da30:	2202      	movs	r2, #2
2400da32:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400da36:	681a      	ldr	r2, [r3, #0]
2400da38:	f022 0201 	bic.w	r2, r2, #1
2400da3c:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400da3e:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400da40:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400da42:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400da44:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
2400da48:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400da4a:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400da4e:	d058      	beq.n	2400db02 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400da50:	0258      	lsls	r0, r3, #9
2400da52:	d502      	bpl.n	2400da5a <HAL_SPI_Init+0x9e>
2400da54:	68e3      	ldr	r3, [r4, #12]
2400da56:	2b06      	cmp	r3, #6
2400da58:	d84c      	bhi.n	2400daf4 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400da5a:	6813      	ldr	r3, [r2, #0]
2400da5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400da60:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400da62:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400da64:	69e3      	ldr	r3, [r4, #28]
2400da66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400da68:	432b      	orrs	r3, r5
2400da6a:	6822      	ldr	r2, [r4, #0]
2400da6c:	4303      	orrs	r3, r0
2400da6e:	68e0      	ldr	r0, [r4, #12]
2400da70:	4303      	orrs	r3, r0
2400da72:	430b      	orrs	r3, r1
2400da74:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400da76:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400da78:	69a0      	ldr	r0, [r4, #24]
2400da7a:	6822      	ldr	r2, [r4, #0]
2400da7c:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400da80:	432b      	orrs	r3, r5
2400da82:	430b      	orrs	r3, r1
2400da84:	6921      	ldr	r1, [r4, #16]
2400da86:	4303      	orrs	r3, r0
2400da88:	6960      	ldr	r0, [r4, #20]
2400da8a:	430b      	orrs	r3, r1
2400da8c:	6a21      	ldr	r1, [r4, #32]
2400da8e:	4303      	orrs	r3, r0
2400da90:	6860      	ldr	r0, [r4, #4]
2400da92:	430b      	orrs	r3, r1
2400da94:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400da96:	4303      	orrs	r3, r0
2400da98:	68a0      	ldr	r0, [r4, #8]
2400da9a:	430b      	orrs	r3, r1
2400da9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400da9e:	4303      	orrs	r3, r0
2400daa0:	430b      	orrs	r3, r1
2400daa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400daa4:	430b      	orrs	r3, r1
2400daa6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400daa8:	6863      	ldr	r3, [r4, #4]
2400daaa:	b96b      	cbnz	r3, 2400dac8 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400daac:	6822      	ldr	r2, [r4, #0]
2400daae:	6893      	ldr	r3, [r2, #8]
2400dab0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400dab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400dab8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400daba:	6822      	ldr	r2, [r4, #0]
2400dabc:	6893      	ldr	r3, [r2, #8]
2400dabe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400dac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400dac6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400dac8:	6822      	ldr	r2, [r4, #0]
2400daca:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400dacc:	f023 0301 	bic.w	r3, r3, #1
2400dad0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400dad2:	6863      	ldr	r3, [r4, #4]
2400dad4:	025b      	lsls	r3, r3, #9
2400dad6:	d506      	bpl.n	2400dae6 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400dad8:	6822      	ldr	r2, [r4, #0]
2400dada:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400dadc:	68d3      	ldr	r3, [r2, #12]
2400dade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400dae2:	430b      	orrs	r3, r1
2400dae4:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400dae6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400dae8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400daea:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400daee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400daf2:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400daf4:	6813      	ldr	r3, [r2, #0]
2400daf6:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400daf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400dafc:	4303      	orrs	r3, r0
2400dafe:	6013      	str	r3, [r2, #0]
2400db00:	e7af      	b.n	2400da62 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400db02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400db06:	d01c      	beq.n	2400db42 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400db08:	2b00      	cmp	r3, #0
2400db0a:	d1a1      	bne.n	2400da50 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400db0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400db0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400db12:	d1a2      	bne.n	2400da5a <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400db14:	6813      	ldr	r3, [r2, #0]
2400db16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400db1a:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400db1c:	e9d4 2300 	ldrd	r2, r3, [r4]
2400db20:	e796      	b.n	2400da50 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400db22:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400db24:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400db28:	f7f8 f802 	bl	24005b30 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400db2c:	6823      	ldr	r3, [r4, #0]
2400db2e:	e77f      	b.n	2400da30 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400db30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400db32:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400db34:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400db36:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400db38:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400db3c:	e770      	b.n	2400da20 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400db3e:	2001      	movs	r0, #1
}
2400db40:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400db42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400db44:	2b00      	cmp	r3, #0
2400db46:	d0e5      	beq.n	2400db14 <HAL_SPI_Init+0x158>
2400db48:	e784      	b.n	2400da54 <HAL_SPI_Init+0x98>
2400db4a:	bf00      	nop
2400db4c:	40013000 	.word	0x40013000
2400db50:	40003800 	.word	0x40003800

2400db54 <HAL_SPI_Receive_DMA>:
{
2400db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
2400db56:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400db5a:	2b01      	cmp	r3, #1
2400db5c:	f000 80a9 	beq.w	2400dcb2 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
2400db60:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400db64:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
2400db66:	2201      	movs	r2, #1
2400db68:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
2400db6a:	b2de      	uxtb	r6, r3
2400db6c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
2400db6e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400db72:	f040 8093 	bne.w	2400dc9c <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
2400db76:	2900      	cmp	r1, #0
2400db78:	f000 808b 	beq.w	2400dc92 <HAL_SPI_Receive_DMA+0x13e>
2400db7c:	fab5 f385 	clz	r3, r5
2400db80:	095b      	lsrs	r3, r3, #5
2400db82:	2d00      	cmp	r5, #0
2400db84:	f000 8085 	beq.w	2400dc92 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400db88:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400db8a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400db8c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400db8e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
2400db92:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400db96:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
2400db9a:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400db9c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
2400dba0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
2400dba4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400dba8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
2400dbac:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400dbb0:	d07a      	beq.n	2400dca8 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
2400dbb2:	68d3      	ldr	r3, [r2, #12]
2400dbb4:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400dbb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400dbbc:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400dbbe:	68e3      	ldr	r3, [r4, #12]
2400dbc0:	2b0f      	cmp	r3, #15
2400dbc2:	d861      	bhi.n	2400dc88 <HAL_SPI_Receive_DMA+0x134>
2400dbc4:	2b07      	cmp	r3, #7
2400dbc6:	f200 8092 	bhi.w	2400dcee <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400dbca:	6822      	ldr	r2, [r4, #0]
2400dbcc:	6893      	ldr	r3, [r2, #8]
2400dbce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400dbd2:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400dbd4:	68e3      	ldr	r3, [r4, #12]
2400dbd6:	2b07      	cmp	r3, #7
2400dbd8:	d86e      	bhi.n	2400dcb8 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400dbda:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dbdc:	699a      	ldr	r2, [r3, #24]
2400dbde:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400dbe2:	d107      	bne.n	2400dbf4 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400dbe4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400dbe8:	b292      	uxth	r2, r2
2400dbea:	3201      	adds	r2, #1
2400dbec:	0852      	lsrs	r2, r2, #1
2400dbee:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400dbf2:	699a      	ldr	r2, [r3, #24]
2400dbf4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400dbf8:	d106      	bne.n	2400dc08 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400dbfa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400dbfe:	b292      	uxth	r2, r2
2400dc00:	3203      	adds	r2, #3
2400dc02:	0892      	lsrs	r2, r2, #2
2400dc04:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400dc08:	4a3e      	ldr	r2, [pc, #248]	; (2400dd04 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400dc0a:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400dc0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400dc0e:	4a3e      	ldr	r2, [pc, #248]	; (2400dd08 <HAL_SPI_Receive_DMA+0x1b4>)
2400dc10:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dc12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400dc14:	4a3d      	ldr	r2, [pc, #244]	; (2400dd0c <HAL_SPI_Receive_DMA+0x1b8>)
2400dc16:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dc18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400dc1a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dc1c:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400dc1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400dc22:	6821      	ldr	r1, [r4, #0]
2400dc24:	b29b      	uxth	r3, r3
2400dc26:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400dc28:	3130      	adds	r1, #48	; 0x30
2400dc2a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400dc2c:	f7f8 fe8e 	bl	2400694c <HAL_DMA_Start_IT>
2400dc30:	2800      	cmp	r0, #0
2400dc32:	d150      	bne.n	2400dcd6 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400dc34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400dc36:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400dc38:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400dc3a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400dc3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400dc40:	4b33      	ldr	r3, [pc, #204]	; (2400dd10 <HAL_SPI_Receive_DMA+0x1bc>)
2400dc42:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400dc46:	bf18      	it	ne
2400dc48:	432b      	orrne	r3, r5
2400dc4a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400dc4c:	6822      	ldr	r2, [r4, #0]
2400dc4e:	6893      	ldr	r3, [r2, #8]
2400dc50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400dc54:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400dc56:	6822      	ldr	r2, [r4, #0]
2400dc58:	6913      	ldr	r3, [r2, #16]
2400dc5a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
2400dc5e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400dc60:	6822      	ldr	r2, [r4, #0]
2400dc62:	6813      	ldr	r3, [r2, #0]
2400dc64:	f043 0301 	orr.w	r3, r3, #1
2400dc68:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400dc6a:	6863      	ldr	r3, [r4, #4]
2400dc6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400dc70:	d104      	bne.n	2400dc7c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400dc72:	6822      	ldr	r2, [r4, #0]
2400dc74:	6813      	ldr	r3, [r2, #0]
2400dc76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400dc7a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400dc7c:	2300      	movs	r3, #0
  return errorcode;
2400dc7e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400dc80:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400dc84:	4630      	mov	r0, r6
2400dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400dc88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dc8a:	699b      	ldr	r3, [r3, #24]
2400dc8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400dc90:	d09b      	beq.n	2400dbca <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
2400dc92:	2300      	movs	r3, #0
2400dc94:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400dc98:	4630      	mov	r0, r6
2400dc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400dc9c:	2300      	movs	r3, #0
    return errorcode;
2400dc9e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400dca0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400dca4:	4630      	mov	r0, r6
2400dca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
2400dca8:	6813      	ldr	r3, [r2, #0]
2400dcaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2400dcae:	6013      	str	r3, [r2, #0]
2400dcb0:	e785      	b.n	2400dbbe <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
2400dcb2:	2602      	movs	r6, #2
}
2400dcb4:	4630      	mov	r0, r6
2400dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400dcb8:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400dcba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400dcbc:	d8a4      	bhi.n	2400dc08 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400dcbe:	699a      	ldr	r2, [r3, #24]
2400dcc0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400dcc4:	d1a0      	bne.n	2400dc08 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400dcc6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400dcca:	b292      	uxth	r2, r2
2400dccc:	3201      	adds	r2, #1
2400dcce:	0852      	lsrs	r2, r2, #1
2400dcd0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400dcd4:	e798      	b.n	2400dc08 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400dcd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400dcda:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400dcdc:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400dce0:	f043 0310 	orr.w	r3, r3, #16
2400dce4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400dce8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400dcec:	e7d4      	b.n	2400dc98 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400dcee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dcf0:	699b      	ldr	r3, [r3, #24]
2400dcf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400dcf6:	f43f af68 	beq.w	2400dbca <HAL_SPI_Receive_DMA+0x76>
2400dcfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400dcfe:	d1c8      	bne.n	2400dc92 <HAL_SPI_Receive_DMA+0x13e>
2400dd00:	e763      	b.n	2400dbca <HAL_SPI_Receive_DMA+0x76>
2400dd02:	bf00      	nop
2400dd04:	2400dfa5 	.word	0x2400dfa5
2400dd08:	2400df55 	.word	0x2400df55
2400dd0c:	2400dfc1 	.word	0x2400dfc1
2400dd10:	ffff0000 	.word	0xffff0000

2400dd14 <HAL_SPI_TransmitReceive_DMA>:
{
2400dd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400dd18:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400dd1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400dd1e:	2b01      	cmp	r3, #1
2400dd20:	f000 809a 	beq.w	2400de58 <HAL_SPI_TransmitReceive_DMA+0x144>
2400dd24:	2301      	movs	r3, #1
2400dd26:	4604      	mov	r4, r0
2400dd28:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400dd2c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400dd30:	2b01      	cmp	r3, #1
2400dd32:	b2de      	uxtb	r6, r3
2400dd34:	d158      	bne.n	2400dde8 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400dd36:	2d00      	cmp	r5, #0
2400dd38:	bf18      	it	ne
2400dd3a:	2a00      	cmpne	r2, #0
2400dd3c:	d04e      	beq.n	2400dddc <HAL_SPI_TransmitReceive_DMA+0xc8>
2400dd3e:	fab1 f381 	clz	r3, r1
2400dd42:	095b      	lsrs	r3, r3, #5
2400dd44:	2900      	cmp	r1, #0
2400dd46:	d049      	beq.n	2400dddc <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400dd48:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400dd4a:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400dd4c:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400dd4e:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400dd50:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400dd54:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400dd58:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400dd5c:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400dd60:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400dd64:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400dd68:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400dd6c:	68d3      	ldr	r3, [r2, #12]
2400dd6e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400dd72:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400dd74:	6802      	ldr	r2, [r0, #0]
2400dd76:	6893      	ldr	r3, [r2, #8]
2400dd78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400dd7c:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400dd7e:	68c3      	ldr	r3, [r0, #12]
2400dd80:	2b0f      	cmp	r3, #15
2400dd82:	d938      	bls.n	2400ddf6 <HAL_SPI_TransmitReceive_DMA+0xe2>
2400dd84:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400dd86:	699a      	ldr	r2, [r3, #24]
2400dd88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400dd8c:	d126      	bne.n	2400dddc <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400dd8e:	4a6c      	ldr	r2, [pc, #432]	; (2400df40 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400dd90:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400dd94:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400df4c <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400dd98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400dd9a:	4a6a      	ldr	r2, [pc, #424]	; (2400df44 <HAL_SPI_TransmitReceive_DMA+0x230>)
2400dd9c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dd9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400dda0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dda2:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400dda6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400dda8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400ddac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400ddb0:	6821      	ldr	r1, [r4, #0]
2400ddb2:	b29b      	uxth	r3, r3
2400ddb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400ddb6:	3130      	adds	r1, #48	; 0x30
2400ddb8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400ddba:	f7f8 fdc7 	bl	2400694c <HAL_DMA_Start_IT>
2400ddbe:	4607      	mov	r7, r0
2400ddc0:	2800      	cmp	r0, #0
2400ddc2:	d04d      	beq.n	2400de60 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ddc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ddc8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400ddca:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ddce:	f043 0310 	orr.w	r3, r3, #16
2400ddd2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ddd6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400ddda:	e002      	b.n	2400dde2 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400dddc:	2300      	movs	r3, #0
2400ddde:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400dde2:	4630      	mov	r0, r6
2400dde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400dde8:	2300      	movs	r3, #0
    return errorcode;
2400ddea:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400ddec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400ddf0:	4630      	mov	r0, r6
2400ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400ddf6:	2b07      	cmp	r3, #7
2400ddf8:	d87f      	bhi.n	2400defa <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400ddfa:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400ddfc:	6993      	ldr	r3, [r2, #24]
2400ddfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400de02:	d107      	bne.n	2400de14 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400de04:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400de08:	b29b      	uxth	r3, r3
2400de0a:	3301      	adds	r3, #1
2400de0c:	085b      	lsrs	r3, r3, #1
2400de0e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400de12:	6993      	ldr	r3, [r2, #24]
2400de14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400de18:	d106      	bne.n	2400de28 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400de1a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400de1e:	b29b      	uxth	r3, r3
2400de20:	3303      	adds	r3, #3
2400de22:	089b      	lsrs	r3, r3, #2
2400de24:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400de28:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400de2a:	699a      	ldr	r2, [r3, #24]
2400de2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400de30:	d107      	bne.n	2400de42 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400de32:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400de36:	b292      	uxth	r2, r2
2400de38:	3201      	adds	r2, #1
2400de3a:	0852      	lsrs	r2, r2, #1
2400de3c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400de40:	699a      	ldr	r2, [r3, #24]
2400de42:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400de46:	d1a2      	bne.n	2400dd8e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400de48:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400de4c:	b292      	uxth	r2, r2
2400de4e:	3203      	adds	r2, #3
2400de50:	0892      	lsrs	r2, r2, #2
2400de52:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400de56:	e79a      	b.n	2400dd8e <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400de58:	2602      	movs	r6, #2
}
2400de5a:	4630      	mov	r0, r6
2400de5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400de60:	6822      	ldr	r2, [r4, #0]
2400de62:	6893      	ldr	r3, [r2, #8]
2400de64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400de68:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400de6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400de6c:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400de6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400de70:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400de72:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400de74:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400de76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400de78:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400de7c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400de80:	6822      	ldr	r2, [r4, #0]
2400de82:	b29b      	uxth	r3, r3
2400de84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400de86:	3220      	adds	r2, #32
2400de88:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400de8a:	f7f8 fd5f 	bl	2400694c <HAL_DMA_Start_IT>
2400de8e:	bb40      	cbnz	r0, 2400dee2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400de90:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400de92:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400de94:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400de96:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400de98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400de9c:	4b2a      	ldr	r3, [pc, #168]	; (2400df48 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400de9e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400dea2:	bf18      	it	ne
2400dea4:	432b      	orrne	r3, r5
2400dea6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400dea8:	6822      	ldr	r2, [r4, #0]
2400deaa:	6893      	ldr	r3, [r2, #8]
2400deac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400deb0:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400deb2:	6822      	ldr	r2, [r4, #0]
2400deb4:	6913      	ldr	r3, [r2, #16]
2400deb6:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400deba:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400debc:	6822      	ldr	r2, [r4, #0]
2400debe:	6813      	ldr	r3, [r2, #0]
2400dec0:	f043 0301 	orr.w	r3, r3, #1
2400dec4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400dec6:	6863      	ldr	r3, [r4, #4]
2400dec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400decc:	d104      	bne.n	2400ded8 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400dece:	6822      	ldr	r2, [r4, #0]
2400ded0:	6813      	ldr	r3, [r2, #0]
2400ded2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ded6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400ded8:	2300      	movs	r3, #0
  return errorcode;
2400deda:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400dedc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400dee0:	e77f      	b.n	2400dde2 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400dee2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400dee6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400dee8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400deec:	f043 0310 	orr.w	r3, r3, #16
2400def0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400def4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400def8:	e773      	b.n	2400dde2 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400defa:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400defc:	699a      	ldr	r2, [r3, #24]
2400defe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400df02:	d003      	beq.n	2400df0c <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400df04:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400df08:	f47f af68 	bne.w	2400dddc <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400df0c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400df0e:	6989      	ldr	r1, [r1, #24]
2400df10:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400df14:	d107      	bne.n	2400df26 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400df16:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400df1a:	b292      	uxth	r2, r2
2400df1c:	3201      	adds	r2, #1
2400df1e:	0852      	lsrs	r2, r2, #1
2400df20:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400df24:	699a      	ldr	r2, [r3, #24]
2400df26:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400df2a:	f47f af30 	bne.w	2400dd8e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400df2e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400df32:	b292      	uxth	r2, r2
2400df34:	3201      	adds	r2, #1
2400df36:	0852      	lsrs	r2, r2, #1
2400df38:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400df3c:	e727      	b.n	2400dd8e <HAL_SPI_TransmitReceive_DMA+0x7a>
2400df3e:	bf00      	nop
2400df40:	2400dfb1 	.word	0x2400dfb1
2400df44:	2400df7d 	.word	0x2400df7d
2400df48:	ffff0000 	.word	0xffff0000
2400df4c:	2400dfc1 	.word	0x2400dfc1

2400df50 <HAL_SPI_TxCpltCallback>:
2400df50:	4770      	bx	lr
2400df52:	bf00      	nop

2400df54 <SPI_DMAReceiveCplt>:
{
2400df54:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400df56:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400df58:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400df5c:	2b07      	cmp	r3, #7
2400df5e:	d009      	beq.n	2400df74 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400df60:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400df62:	69db      	ldr	r3, [r3, #28]
2400df64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400df68:	d005      	beq.n	2400df76 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400df6a:	6802      	ldr	r2, [r0, #0]
2400df6c:	6913      	ldr	r3, [r2, #16]
2400df6e:	f043 0308 	orr.w	r3, r3, #8
2400df72:	6113      	str	r3, [r2, #16]
}
2400df74:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400df76:	f7f5 fbe7 	bl	24003748 <HAL_SPI_RxCpltCallback>
}
2400df7a:	bd08      	pop	{r3, pc}

2400df7c <SPI_DMATransmitReceiveCplt>:
{
2400df7c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400df7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400df80:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400df84:	2b07      	cmp	r3, #7
2400df86:	d009      	beq.n	2400df9c <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400df88:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400df8a:	69db      	ldr	r3, [r3, #28]
2400df8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400df90:	d005      	beq.n	2400df9e <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400df92:	6802      	ldr	r2, [r0, #0]
2400df94:	6913      	ldr	r3, [r2, #16]
2400df96:	f043 0308 	orr.w	r3, r3, #8
2400df9a:	6113      	str	r3, [r2, #16]
}
2400df9c:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400df9e:	f7f5 fdb1 	bl	24003b04 <HAL_SPI_TxRxCpltCallback>
}
2400dfa2:	bd08      	pop	{r3, pc}

2400dfa4 <SPI_DMAHalfReceiveCplt>:
{
2400dfa4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400dfa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400dfa8:	f7f5 fcbe 	bl	24003928 <HAL_SPI_RxHalfCpltCallback>
}
2400dfac:	bd08      	pop	{r3, pc}
2400dfae:	bf00      	nop

2400dfb0 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400dfb0:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400dfb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400dfb4:	f7f5 fdc8 	bl	24003b48 <HAL_SPI_TxRxHalfCpltCallback>
}
2400dfb8:	bd08      	pop	{r3, pc}
2400dfba:	bf00      	nop

2400dfbc <HAL_SPI_ErrorCallback>:
2400dfbc:	4770      	bx	lr
2400dfbe:	bf00      	nop

2400dfc0 <SPI_DMAError>:
{
2400dfc0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400dfc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400dfc4:	f7f9 ff3c 	bl	24007e40 <HAL_DMA_GetError>
2400dfc8:	2802      	cmp	r0, #2
2400dfca:	d100      	bne.n	2400dfce <SPI_DMAError+0xe>
}
2400dfcc:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400dfce:	6822      	ldr	r2, [r4, #0]
2400dfd0:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400dfd2:	6991      	ldr	r1, [r2, #24]
2400dfd4:	f041 0108 	orr.w	r1, r1, #8
2400dfd8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400dfda:	6821      	ldr	r1, [r4, #0]
2400dfdc:	698a      	ldr	r2, [r1, #24]
2400dfde:	f042 0210 	orr.w	r2, r2, #16
2400dfe2:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400dfe4:	6821      	ldr	r1, [r4, #0]
2400dfe6:	680a      	ldr	r2, [r1, #0]
2400dfe8:	f022 0201 	bic.w	r2, r2, #1
2400dfec:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400dfee:	6821      	ldr	r1, [r4, #0]
2400dff0:	4a2c      	ldr	r2, [pc, #176]	; (2400e0a4 <SPI_DMAError+0xe4>)
2400dff2:	6908      	ldr	r0, [r1, #16]
2400dff4:	4002      	ands	r2, r0
2400dff6:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400dff8:	6821      	ldr	r1, [r4, #0]
2400dffa:	688a      	ldr	r2, [r1, #8]
2400dffc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400e000:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400e002:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400e006:	2a04      	cmp	r2, #4
2400e008:	d001      	beq.n	2400e00e <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400e00a:	0698      	lsls	r0, r3, #26
2400e00c:	d43d      	bmi.n	2400e08a <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400e00e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400e012:	2a03      	cmp	r2, #3
2400e014:	d001      	beq.n	2400e01a <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400e016:	0659      	lsls	r1, r3, #25
2400e018:	d42b      	bmi.n	2400e072 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400e01a:	059a      	lsls	r2, r3, #22
2400e01c:	d50a      	bpl.n	2400e034 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400e01e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400e022:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400e024:	f042 0201 	orr.w	r2, r2, #1
2400e028:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400e02c:	698a      	ldr	r2, [r1, #24]
2400e02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400e032:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400e034:	05db      	lsls	r3, r3, #23
2400e036:	d50a      	bpl.n	2400e04e <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400e038:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400e03c:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400e03e:	f043 0308 	orr.w	r3, r3, #8
2400e042:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400e046:	6993      	ldr	r3, [r2, #24]
2400e048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400e04c:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400e04e:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400e050:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400e052:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400e054:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400e058:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400e05c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400e060:	f043 0310 	orr.w	r3, r3, #16
2400e064:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400e068:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400e06c:	f7ff ffa6 	bl	2400dfbc <HAL_SPI_ErrorCallback>
}
2400e070:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400e072:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400e076:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400e078:	f042 0204 	orr.w	r2, r2, #4
2400e07c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400e080:	698a      	ldr	r2, [r1, #24]
2400e082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400e086:	618a      	str	r2, [r1, #24]
2400e088:	e7c7      	b.n	2400e01a <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400e08a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400e08e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400e090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400e094:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400e098:	698a      	ldr	r2, [r1, #24]
2400e09a:	f042 0220 	orr.w	r2, r2, #32
2400e09e:	618a      	str	r2, [r1, #24]
2400e0a0:	e7b5      	b.n	2400e00e <SPI_DMAError+0x4e>
2400e0a2:	bf00      	nop
2400e0a4:	fffffc90 	.word	0xfffffc90

2400e0a8 <SPI_DMAAbortOnError>:
{
2400e0a8:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400e0aa:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400e0ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400e0ae:	2300      	movs	r3, #0
2400e0b0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400e0b4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400e0b8:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400e0bc:	f7ff ff7e 	bl	2400dfbc <HAL_SPI_ErrorCallback>
}
2400e0c0:	bd08      	pop	{r3, pc}
2400e0c2:	bf00      	nop

2400e0c4 <HAL_SPI_SuspendCallback>:
2400e0c4:	4770      	bx	lr
2400e0c6:	bf00      	nop

2400e0c8 <HAL_SPI_IRQHandler>:
{
2400e0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
2400e0cc:	6806      	ldr	r6, [r0, #0]
{
2400e0ce:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400e0d0:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400e0d2:	6973      	ldr	r3, [r6, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400e0d4:	f8d6 8008 	ldr.w	r8, [r6, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400e0d8:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400e0da:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400e0de:	ea02 0903 	and.w	r9, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400e0e2:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400e0e4:	d502      	bpl.n	2400e0ec <HAL_SPI_IRQHandler+0x24>
2400e0e6:	0713      	lsls	r3, r2, #28
2400e0e8:	f100 8091 	bmi.w	2400e20e <HAL_SPI_IRQHandler+0x146>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400e0ec:	f009 0364 	and.w	r3, r9, #100	; 0x64
2400e0f0:	2b04      	cmp	r3, #4
2400e0f2:	f000 8084 	beq.w	2400e1fe <HAL_SPI_IRQHandler+0x136>
  uint32_t handled  = 0UL;
2400e0f6:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400e0f8:	f009 0745 	and.w	r7, r9, #69	; 0x45
2400e0fc:	2f01      	cmp	r7, #1
2400e0fe:	d103      	bne.n	2400e108 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
2400e100:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400e102:	4620      	mov	r0, r4
2400e104:	4798      	blx	r3
    handled = 1UL;
2400e106:	463b      	mov	r3, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400e108:	f009 0226 	and.w	r2, r9, #38	; 0x26
2400e10c:	2a02      	cmp	r2, #2
2400e10e:	d066      	beq.n	2400e1de <HAL_SPI_IRQHandler+0x116>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400e110:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400e114:	d144      	bne.n	2400e1a0 <HAL_SPI_IRQHandler+0xd8>
  if (handled != 0UL)
2400e116:	2b00      	cmp	r3, #0
2400e118:	d140      	bne.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400e11a:	f019 0f08 	tst.w	r9, #8
2400e11e:	d03a      	beq.n	2400e196 <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400e120:	6822      	ldr	r2, [r4, #0]
2400e122:	6993      	ldr	r3, [r2, #24]
2400e124:	f043 0308 	orr.w	r3, r3, #8
2400e128:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400e12a:	6822      	ldr	r2, [r4, #0]
2400e12c:	6993      	ldr	r3, [r2, #24]
2400e12e:	f043 0310 	orr.w	r3, r3, #16
2400e132:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400e134:	6822      	ldr	r2, [r4, #0]
2400e136:	6993      	ldr	r3, [r2, #24]
2400e138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400e13c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400e13e:	6822      	ldr	r2, [r4, #0]
2400e140:	6913      	ldr	r3, [r2, #16]
2400e142:	f023 0308 	bic.w	r3, r3, #8
2400e146:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400e148:	6823      	ldr	r3, [r4, #0]
2400e14a:	689b      	ldr	r3, [r3, #8]
2400e14c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400e150:	d12f      	bne.n	2400e1b2 <HAL_SPI_IRQHandler+0xea>
      while (hspi->RxXferCount != 0UL)
2400e152:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400e156:	b29b      	uxth	r3, r3
2400e158:	b35b      	cbz	r3, 2400e1b2 <HAL_SPI_IRQHandler+0xea>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400e15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400e15c:	e00f      	b.n	2400e17e <HAL_SPI_IRQHandler+0xb6>
2400e15e:	6823      	ldr	r3, [r4, #0]
2400e160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400e162:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400e164:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400e166:	3204      	adds	r2, #4
2400e168:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400e16a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400e16e:	3b01      	subs	r3, #1
2400e170:	b29b      	uxth	r3, r3
2400e172:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400e176:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400e17a:	b29b      	uxth	r3, r3
2400e17c:	b1cb      	cbz	r3, 2400e1b2 <HAL_SPI_IRQHandler+0xea>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400e17e:	68e3      	ldr	r3, [r4, #12]
2400e180:	2b0f      	cmp	r3, #15
2400e182:	d8ec      	bhi.n	2400e15e <HAL_SPI_IRQHandler+0x96>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400e184:	2b07      	cmp	r3, #7
2400e186:	f240 80c4 	bls.w	2400e312 <HAL_SPI_IRQHandler+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400e18a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
2400e18c:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400e18e:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400e190:	3202      	adds	r2, #2
2400e192:	6662      	str	r2, [r4, #100]	; 0x64
2400e194:	e7e9      	b.n	2400e16a <HAL_SPI_IRQHandler+0xa2>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400e196:	f419 7f58 	tst.w	r9, #864	; 0x360
2400e19a:	d140      	bne.n	2400e21e <HAL_SPI_IRQHandler+0x156>
}
2400e19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400e1a0:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400e1a2:	2200      	movs	r2, #0
2400e1a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400e1a8:	698a      	ldr	r2, [r1, #24]
2400e1aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400e1ae:	618a      	str	r2, [r1, #24]
2400e1b0:	e7b1      	b.n	2400e116 <HAL_SPI_IRQHandler+0x4e>
    SPI_CloseTransfer(hspi);
2400e1b2:	4620      	mov	r0, r4
2400e1b4:	f7ff fb9e 	bl	2400d8f4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400e1b8:	2301      	movs	r3, #1
2400e1ba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400e1be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400e1c2:	2b00      	cmp	r3, #0
2400e1c4:	f040 80a1 	bne.w	2400e30a <HAL_SPI_IRQHandler+0x242>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400e1c8:	2d05      	cmp	r5, #5
2400e1ca:	f000 80aa 	beq.w	2400e322 <HAL_SPI_IRQHandler+0x25a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400e1ce:	2d04      	cmp	r5, #4
2400e1d0:	f000 80aa 	beq.w	2400e328 <HAL_SPI_IRQHandler+0x260>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400e1d4:	2d03      	cmp	r5, #3
2400e1d6:	d1e1      	bne.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
2400e1d8:	f7ff feba 	bl	2400df50 <HAL_SPI_TxCpltCallback>
2400e1dc:	e7de      	b.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
2400e1de:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400e1e0:	4620      	mov	r0, r4
2400e1e2:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400e1e4:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400e1e8:	d0d8      	beq.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400e1ea:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400e1ec:	2300      	movs	r3, #0
2400e1ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400e1f2:	6993      	ldr	r3, [r2, #24]
2400e1f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400e1f8:	6193      	str	r3, [r2, #24]
}
2400e1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
2400e1fe:	4620      	mov	r0, r4
2400e200:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400e202:	4798      	blx	r3
    hspi->RxISR(hspi);
2400e204:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400e206:	4620      	mov	r0, r4
2400e208:	4798      	blx	r3
    handled = 1UL;
2400e20a:	2301      	movs	r3, #1
2400e20c:	e774      	b.n	2400e0f8 <HAL_SPI_IRQHandler+0x30>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400e20e:	69b3      	ldr	r3, [r6, #24]
2400e210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400e214:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
2400e216:	f7ff ff55 	bl	2400e0c4 <HAL_SPI_SuspendCallback>
}
2400e21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400e21e:	f019 0f40 	tst.w	r9, #64	; 0x40
2400e222:	d00a      	beq.n	2400e23a <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400e224:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400e228:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400e22a:	f043 0304 	orr.w	r3, r3, #4
2400e22e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400e232:	6993      	ldr	r3, [r2, #24]
2400e234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400e238:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400e23a:	f419 7f00 	tst.w	r9, #512	; 0x200
2400e23e:	d00a      	beq.n	2400e256 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400e240:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400e244:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400e246:	f043 0301 	orr.w	r3, r3, #1
2400e24a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400e24e:	6993      	ldr	r3, [r2, #24]
2400e250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400e254:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400e256:	f419 7f80 	tst.w	r9, #256	; 0x100
2400e25a:	d00a      	beq.n	2400e272 <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400e25c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400e260:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400e262:	f043 0308 	orr.w	r3, r3, #8
2400e266:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400e26a:	6993      	ldr	r3, [r2, #24]
2400e26c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400e270:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400e272:	f019 0f20 	tst.w	r9, #32
2400e276:	d00a      	beq.n	2400e28e <HAL_SPI_IRQHandler+0x1c6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400e278:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400e27c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400e27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400e282:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400e286:	6993      	ldr	r3, [r2, #24]
2400e288:	f043 0320 	orr.w	r3, r3, #32
2400e28c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400e28e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400e292:	2b00      	cmp	r3, #0
2400e294:	d082      	beq.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
2400e296:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400e298:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400e29c:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400e29e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400e2a2:	f023 0301 	bic.w	r3, r3, #1
2400e2a6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400e2a8:	6822      	ldr	r2, [r4, #0]
2400e2aa:	4b21      	ldr	r3, [pc, #132]	; (2400e330 <HAL_SPI_IRQHandler+0x268>)
2400e2ac:	6911      	ldr	r1, [r2, #16]
2400e2ae:	ea03 0301 	and.w	r3, r3, r1
2400e2b2:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400e2b4:	d125      	bne.n	2400e302 <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400e2b6:	6822      	ldr	r2, [r4, #0]
2400e2b8:	6893      	ldr	r3, [r2, #8]
2400e2ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400e2be:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400e2c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400e2c2:	b15b      	cbz	r3, 2400e2dc <HAL_SPI_IRQHandler+0x214>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400e2c4:	4a1b      	ldr	r2, [pc, #108]	; (2400e334 <HAL_SPI_IRQHandler+0x26c>)
2400e2c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400e2c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400e2ca:	f7f9 f821 	bl	24007310 <HAL_DMA_Abort_IT>
2400e2ce:	b128      	cbz	r0, 2400e2dc <HAL_SPI_IRQHandler+0x214>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400e2d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400e2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400e2d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400e2dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400e2de:	2b00      	cmp	r3, #0
2400e2e0:	f43f af5c 	beq.w	2400e19c <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400e2e4:	4a13      	ldr	r2, [pc, #76]	; (2400e334 <HAL_SPI_IRQHandler+0x26c>)
2400e2e6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400e2e8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400e2ea:	f7f9 f811 	bl	24007310 <HAL_DMA_Abort_IT>
2400e2ee:	2800      	cmp	r0, #0
2400e2f0:	f43f af54 	beq.w	2400e19c <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400e2f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400e2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400e2fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400e300:	e74c      	b.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
2400e302:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400e304:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400e306:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400e30a:	f7ff fe57 	bl	2400dfbc <HAL_SPI_ErrorCallback>
}
2400e30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400e312:	6823      	ldr	r3, [r4, #0]
2400e314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400e318:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400e31a:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400e31c:	3201      	adds	r2, #1
2400e31e:	6662      	str	r2, [r4, #100]	; 0x64
2400e320:	e723      	b.n	2400e16a <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
2400e322:	f7f5 fbef 	bl	24003b04 <HAL_SPI_TxRxCpltCallback>
2400e326:	e739      	b.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
2400e328:	f7f5 fa0e 	bl	24003748 <HAL_SPI_RxCpltCallback>
2400e32c:	e736      	b.n	2400e19c <HAL_SPI_IRQHandler+0xd4>
2400e32e:	bf00      	nop
2400e330:	fffffc94 	.word	0xfffffc94
2400e334:	2400e0a9 	.word	0x2400e0a9

2400e338 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400e338:	680b      	ldr	r3, [r1, #0]
{
2400e33a:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400e33c:	b9d3      	cbnz	r3, 2400e374 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400e33e:	6804      	ldr	r4, [r0, #0]
2400e340:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400e344:	684a      	ldr	r2, [r1, #4]
2400e346:	4023      	ands	r3, r4
2400e348:	4313      	orrs	r3, r2
2400e34a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400e34e:	4323      	orrs	r3, r4
2400e350:	4313      	orrs	r3, r2
2400e352:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400e356:	4323      	orrs	r3, r4
2400e358:	4313      	orrs	r3, r2
2400e35a:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400e35e:	4323      	orrs	r3, r4
2400e360:	4313      	orrs	r3, r2
2400e362:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400e366:	4323      	orrs	r3, r4
2400e368:	4313      	orrs	r3, r2
2400e36a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400e36c:	2000      	movs	r0, #0
2400e36e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e372:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400e374:	6802      	ldr	r2, [r0, #0]
2400e376:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400e37a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400e37e:	4322      	orrs	r2, r4
2400e380:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400e382:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400e384:	4b0a      	ldr	r3, [pc, #40]	; (2400e3b0 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400e386:	4322      	orrs	r2, r4
2400e388:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400e38a:	6842      	ldr	r2, [r0, #4]
2400e38c:	4013      	ands	r3, r2
2400e38e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400e392:	4323      	orrs	r3, r4
2400e394:	4313      	orrs	r3, r2
2400e396:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400e39a:	4323      	orrs	r3, r4
2400e39c:	4313      	orrs	r3, r2
2400e39e:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400e3a2:	4323      	orrs	r3, r4
2400e3a4:	4313      	orrs	r3, r2
2400e3a6:	6043      	str	r3, [r0, #4]
}
2400e3a8:	2000      	movs	r0, #0
2400e3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e3ae:	4770      	bx	lr
2400e3b0:	ffff8000 	.word	0xffff8000

2400e3b4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400e3b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400e3b6:	bb02      	cbnz	r2, 2400e3fa <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400e3b8:	6883      	ldr	r3, [r0, #8]
2400e3ba:	e9d1 2400 	ldrd	r2, r4, [r1]
2400e3be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400e3c2:	3c01      	subs	r4, #1
2400e3c4:	3a01      	subs	r2, #1
2400e3c6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400e3ca:	4313      	orrs	r3, r2
2400e3cc:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
2400e3d0:	3a01      	subs	r2, #1
2400e3d2:	3c01      	subs	r4, #1
2400e3d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400e3d8:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
2400e3dc:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
2400e3e0:	6989      	ldr	r1, [r1, #24]
2400e3e2:	3b01      	subs	r3, #1
2400e3e4:	3c01      	subs	r4, #1
2400e3e6:	3901      	subs	r1, #1
2400e3e8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
2400e3ec:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
2400e3f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400e3f4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400e3f6:	2000      	movs	r0, #0
2400e3f8:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400e3fa:	6885      	ldr	r5, [r0, #8]
2400e3fc:	68ca      	ldr	r2, [r1, #12]
2400e3fe:	4b13      	ldr	r3, [pc, #76]	; (2400e44c <FMC_SDRAM_Timing_Init+0x98>)
2400e400:	1e54      	subs	r4, r2, #1
2400e402:	694a      	ldr	r2, [r1, #20]
2400e404:	402b      	ands	r3, r5
2400e406:	3a01      	subs	r2, #1
2400e408:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400e40c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400e410:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400e412:	68c3      	ldr	r3, [r0, #12]
2400e414:	e9d1 4200 	ldrd	r4, r2, [r1]
2400e418:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400e41c:	3a01      	subs	r2, #1
2400e41e:	3c01      	subs	r4, #1
2400e420:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400e424:	ea43 0204 	orr.w	r2, r3, r4
2400e428:	688c      	ldr	r4, [r1, #8]
2400e42a:	690b      	ldr	r3, [r1, #16]
2400e42c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
2400e430:	6989      	ldr	r1, [r1, #24]
2400e432:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400e436:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
2400e43a:	3901      	subs	r1, #1
2400e43c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400e440:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400e444:	60c3      	str	r3, [r0, #12]
}
2400e446:	2000      	movs	r0, #0
2400e448:	bd30      	pop	{r4, r5, pc}
2400e44a:	bf00      	nop
2400e44c:	ff0f0fff 	.word	0xff0f0fff

2400e450 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400e450:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400e452:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400e456:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400e458:	6900      	ldr	r0, [r0, #16]
2400e45a:	4323      	orrs	r3, r4
2400e45c:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400e460:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400e464:	4c05      	ldr	r4, [pc, #20]	; (2400e47c <FMC_SDRAM_SendCommand+0x2c>)
2400e466:	3901      	subs	r1, #1
2400e468:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400e46a:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400e46c:	4323      	orrs	r3, r4
2400e46e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400e472:	6113      	str	r3, [r2, #16]
}
2400e474:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e478:	4770      	bx	lr
2400e47a:	bf00      	nop
2400e47c:	ffc00000 	.word	0xffc00000

2400e480 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400e480:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400e482:	4b05      	ldr	r3, [pc, #20]	; (2400e498 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400e484:	2000      	movs	r0, #0
{
2400e486:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400e488:	6954      	ldr	r4, [r2, #20]
2400e48a:	4023      	ands	r3, r4
2400e48c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400e490:	6151      	str	r1, [r2, #20]
}
2400e492:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e496:	4770      	bx	lr
2400e498:	ffffc001 	.word	0xffffc001

2400e49c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400e49c:	b084      	sub	sp, #16
2400e49e:	b410      	push	{r4}
2400e4a0:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400e4a4:	4614      	mov	r4, r2
{
2400e4a6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400e4aa:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400e4ac:	9904      	ldr	r1, [sp, #16]
{
2400e4ae:	4602      	mov	r2, r0
             Init.BusWide             | \
2400e4b0:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400e4b2:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400e4b4:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400e4b6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400e4b8:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400e4ba:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400e4bc:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400e4be:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400e4c0:	4903      	ldr	r1, [pc, #12]	; (2400e4d0 <SDMMC_Init+0x34>)
2400e4c2:	4021      	ands	r1, r4
2400e4c4:	430b      	orrs	r3, r1
2400e4c6:	6053      	str	r3, [r2, #4]
}
2400e4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e4cc:	b004      	add	sp, #16
2400e4ce:	4770      	bx	lr
2400e4d0:	ffc02c00 	.word	0xffc02c00

2400e4d4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400e4d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400e4d8:	4770      	bx	lr
2400e4da:	bf00      	nop

2400e4dc <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400e4dc:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400e4de:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400e4e0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400e4e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400e4e6:	4770      	bx	lr

2400e4e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400e4e8:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400e4ea:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400e4ec:	681a      	ldr	r2, [r3, #0]
2400e4ee:	f042 0203 	orr.w	r2, r2, #3
2400e4f2:	601a      	str	r2, [r3, #0]
}
2400e4f4:	4770      	bx	lr
2400e4f6:	bf00      	nop

2400e4f8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400e4f8:	6800      	ldr	r0, [r0, #0]
}
2400e4fa:	f000 0003 	and.w	r0, r0, #3
2400e4fe:	4770      	bx	lr

2400e500 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400e500:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400e502:	5840      	ldr	r0, [r0, r1]
}
2400e504:	4770      	bx	lr
2400e506:	bf00      	nop

2400e508 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400e508:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400e50a:	680b      	ldr	r3, [r1, #0]
{
2400e50c:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400e50e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400e510:	684b      	ldr	r3, [r1, #4]
2400e512:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400e514:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400e516:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400e518:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400e51c:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400e51e:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400e520:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400e524:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400e526:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400e528:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400e52a:	430b      	orrs	r3, r1
2400e52c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400e52e:	bc30      	pop	{r4, r5}
2400e530:	4770      	bx	lr
2400e532:	bf00      	nop

2400e534 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e534:	4a4c      	ldr	r2, [pc, #304]	; (2400e668 <SDMMC_CmdBlockLength+0x134>)
2400e536:	4b4d      	ldr	r3, [pc, #308]	; (2400e66c <SDMMC_CmdBlockLength+0x138>)
{
2400e538:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e53a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e53c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e53e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e542:	68c1      	ldr	r1, [r0, #12]
2400e544:	4c4a      	ldr	r4, [pc, #296]	; (2400e670 <SDMMC_CmdBlockLength+0x13c>)
2400e546:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e54a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e54c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e54e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e552:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e554:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e558:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
2400e55a:	b14a      	cbz	r2, 2400e570 <SDMMC_CmdBlockLength+0x3c>
2400e55c:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e55e:	4945      	ldr	r1, [pc, #276]	; (2400e674 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
2400e560:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400e562:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e564:	420a      	tst	r2, r1
2400e566:	d001      	beq.n	2400e56c <SDMMC_CmdBlockLength+0x38>
2400e568:	0492      	lsls	r2, r2, #18
2400e56a:	d507      	bpl.n	2400e57c <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
2400e56c:	1c5c      	adds	r4, r3, #1
2400e56e:	d1f7      	bne.n	2400e560 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400e570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400e574:	4618      	mov	r0, r3
2400e576:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e57a:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e57c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e57e:	075c      	lsls	r4, r3, #29
2400e580:	d43d      	bmi.n	2400e5fe <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e582:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e584:	f013 0301 	ands.w	r3, r3, #1
2400e588:	d134      	bne.n	2400e5f4 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e58a:	4b3b      	ldr	r3, [pc, #236]	; (2400e678 <SDMMC_CmdBlockLength+0x144>)
2400e58c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e58e:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e590:	b2db      	uxtb	r3, r3
2400e592:	2b10      	cmp	r3, #16
2400e594:	d131      	bne.n	2400e5fa <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400e596:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e598:	4b38      	ldr	r3, [pc, #224]	; (2400e67c <SDMMC_CmdBlockLength+0x148>)
2400e59a:	4013      	ands	r3, r2
2400e59c:	2b00      	cmp	r3, #0
2400e59e:	d0e9      	beq.n	2400e574 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e5a0:	2a00      	cmp	r2, #0
2400e5a2:	db30      	blt.n	2400e606 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e5a4:	0051      	lsls	r1, r2, #1
2400e5a6:	d431      	bmi.n	2400e60c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e5a8:	0094      	lsls	r4, r2, #2
2400e5aa:	d431      	bmi.n	2400e610 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e5ac:	00d0      	lsls	r0, r2, #3
2400e5ae:	d431      	bmi.n	2400e614 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e5b0:	0111      	lsls	r1, r2, #4
2400e5b2:	d432      	bmi.n	2400e61a <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e5b4:	0154      	lsls	r4, r2, #5
2400e5b6:	d433      	bmi.n	2400e620 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e5b8:	01d0      	lsls	r0, r2, #7
2400e5ba:	d434      	bmi.n	2400e626 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e5bc:	0211      	lsls	r1, r2, #8
2400e5be:	d435      	bmi.n	2400e62c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e5c0:	0254      	lsls	r4, r2, #9
2400e5c2:	d436      	bmi.n	2400e632 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e5c4:	0290      	lsls	r0, r2, #10
2400e5c6:	d440      	bmi.n	2400e64a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e5c8:	02d1      	lsls	r1, r2, #11
2400e5ca:	d43b      	bmi.n	2400e644 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e5cc:	0354      	lsls	r4, r2, #13
2400e5ce:	d436      	bmi.n	2400e63e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e5d0:	0390      	lsls	r0, r2, #14
2400e5d2:	d431      	bmi.n	2400e638 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e5d4:	03d1      	lsls	r1, r2, #15
2400e5d6:	d444      	bmi.n	2400e662 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e5d8:	0414      	lsls	r4, r2, #16
2400e5da:	d43f      	bmi.n	2400e65c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e5dc:	0450      	lsls	r0, r2, #17
2400e5de:	d43a      	bmi.n	2400e656 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e5e0:	0491      	lsls	r1, r2, #18
2400e5e2:	d435      	bmi.n	2400e650 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e5e4:	f012 0f08 	tst.w	r2, #8
2400e5e8:	bf14      	ite	ne
2400e5ea:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400e5ee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400e5f2:	e7bf      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e5f4:	2201      	movs	r2, #1
2400e5f6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e5f8:	e7bc      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e5fa:	2301      	movs	r3, #1
2400e5fc:	e7ba      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e5fe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e600:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e602:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e604:	e7b6      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e60a:	e7b3      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e60c:	2340      	movs	r3, #64	; 0x40
2400e60e:	e7b1      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e610:	2380      	movs	r3, #128	; 0x80
2400e612:	e7af      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e614:	f44f 7380 	mov.w	r3, #256	; 0x100
2400e618:	e7ac      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e61a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400e61e:	e7a9      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e620:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400e624:	e7a6      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e626:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400e62a:	e7a3      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e62c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400e630:	e7a0      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400e636:	e79d      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400e63c:	e79a      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e63e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400e642:	e797      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
2400e644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400e648:	e794      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e64a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400e64e:	e791      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400e650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400e654:	e78e      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e656:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400e65a:	e78b      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e65c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400e660:	e788      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e662:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400e666:	e785      	b.n	2400e574 <SDMMC_CmdBlockLength+0x40>
2400e668:	20000750 	.word	0x20000750
2400e66c:	10624dd3 	.word	0x10624dd3
2400e670:	fffee0c0 	.word	0xfffee0c0
2400e674:	00200045 	.word	0x00200045
2400e678:	002000c5 	.word	0x002000c5
2400e67c:	fdffe008 	.word	0xfdffe008

2400e680 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e680:	4a4c      	ldr	r2, [pc, #304]	; (2400e7b4 <SDMMC_CmdReadSingleBlock+0x134>)
2400e682:	4b4d      	ldr	r3, [pc, #308]	; (2400e7b8 <SDMMC_CmdReadSingleBlock+0x138>)
{
2400e684:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e686:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e688:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e68a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e68e:	68c1      	ldr	r1, [r0, #12]
2400e690:	4c4a      	ldr	r4, [pc, #296]	; (2400e7bc <SDMMC_CmdReadSingleBlock+0x13c>)
2400e692:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e696:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e698:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e69a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e69e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e6a0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e6a4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400e6a6:	b14a      	cbz	r2, 2400e6bc <SDMMC_CmdReadSingleBlock+0x3c>
2400e6a8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e6aa:	4945      	ldr	r1, [pc, #276]	; (2400e7c0 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400e6ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400e6ae:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e6b0:	420a      	tst	r2, r1
2400e6b2:	d001      	beq.n	2400e6b8 <SDMMC_CmdReadSingleBlock+0x38>
2400e6b4:	0492      	lsls	r2, r2, #18
2400e6b6:	d507      	bpl.n	2400e6c8 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
2400e6b8:	1c5c      	adds	r4, r3, #1
2400e6ba:	d1f7      	bne.n	2400e6ac <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400e6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400e6c0:	4618      	mov	r0, r3
2400e6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e6c6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e6c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e6ca:	075c      	lsls	r4, r3, #29
2400e6cc:	d43d      	bmi.n	2400e74a <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e6ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e6d0:	f013 0301 	ands.w	r3, r3, #1
2400e6d4:	d134      	bne.n	2400e740 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e6d6:	4b3b      	ldr	r3, [pc, #236]	; (2400e7c4 <SDMMC_CmdReadSingleBlock+0x144>)
2400e6d8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e6da:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e6dc:	b2db      	uxtb	r3, r3
2400e6de:	2b11      	cmp	r3, #17
2400e6e0:	d131      	bne.n	2400e746 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400e6e2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e6e4:	4b38      	ldr	r3, [pc, #224]	; (2400e7c8 <SDMMC_CmdReadSingleBlock+0x148>)
2400e6e6:	4013      	ands	r3, r2
2400e6e8:	2b00      	cmp	r3, #0
2400e6ea:	d0e9      	beq.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e6ec:	2a00      	cmp	r2, #0
2400e6ee:	db30      	blt.n	2400e752 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e6f0:	0051      	lsls	r1, r2, #1
2400e6f2:	d431      	bmi.n	2400e758 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e6f4:	0094      	lsls	r4, r2, #2
2400e6f6:	d431      	bmi.n	2400e75c <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e6f8:	00d0      	lsls	r0, r2, #3
2400e6fa:	d431      	bmi.n	2400e760 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e6fc:	0111      	lsls	r1, r2, #4
2400e6fe:	d432      	bmi.n	2400e766 <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e700:	0154      	lsls	r4, r2, #5
2400e702:	d433      	bmi.n	2400e76c <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e704:	01d0      	lsls	r0, r2, #7
2400e706:	d434      	bmi.n	2400e772 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e708:	0211      	lsls	r1, r2, #8
2400e70a:	d435      	bmi.n	2400e778 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e70c:	0254      	lsls	r4, r2, #9
2400e70e:	d436      	bmi.n	2400e77e <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e710:	0290      	lsls	r0, r2, #10
2400e712:	d440      	bmi.n	2400e796 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e714:	02d1      	lsls	r1, r2, #11
2400e716:	d43b      	bmi.n	2400e790 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e718:	0354      	lsls	r4, r2, #13
2400e71a:	d436      	bmi.n	2400e78a <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e71c:	0390      	lsls	r0, r2, #14
2400e71e:	d431      	bmi.n	2400e784 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e720:	03d1      	lsls	r1, r2, #15
2400e722:	d444      	bmi.n	2400e7ae <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e724:	0414      	lsls	r4, r2, #16
2400e726:	d43f      	bmi.n	2400e7a8 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e728:	0450      	lsls	r0, r2, #17
2400e72a:	d43a      	bmi.n	2400e7a2 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e72c:	0491      	lsls	r1, r2, #18
2400e72e:	d435      	bmi.n	2400e79c <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e730:	f012 0f08 	tst.w	r2, #8
2400e734:	bf14      	ite	ne
2400e736:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400e73a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400e73e:	e7bf      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e740:	2201      	movs	r2, #1
2400e742:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e744:	e7bc      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e746:	2301      	movs	r3, #1
2400e748:	e7ba      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e74a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e74c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e74e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e750:	e7b6      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e756:	e7b3      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e758:	2340      	movs	r3, #64	; 0x40
2400e75a:	e7b1      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e75c:	2380      	movs	r3, #128	; 0x80
2400e75e:	e7af      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e760:	f44f 7380 	mov.w	r3, #256	; 0x100
2400e764:	e7ac      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e766:	f44f 7300 	mov.w	r3, #512	; 0x200
2400e76a:	e7a9      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400e770:	e7a6      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e772:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400e776:	e7a3      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400e77c:	e7a0      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e77e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400e782:	e79d      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400e788:	e79a      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e78a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400e78e:	e797      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400e790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400e794:	e794      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400e79a:	e791      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400e79c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400e7a0:	e78e      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e7a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400e7a6:	e78b      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e7a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400e7ac:	e788      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e7ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400e7b2:	e785      	b.n	2400e6c0 <SDMMC_CmdReadSingleBlock+0x40>
2400e7b4:	20000750 	.word	0x20000750
2400e7b8:	10624dd3 	.word	0x10624dd3
2400e7bc:	fffee0c0 	.word	0xfffee0c0
2400e7c0:	00200045 	.word	0x00200045
2400e7c4:	002000c5 	.word	0x002000c5
2400e7c8:	fdffe008 	.word	0xfdffe008

2400e7cc <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7cc:	4a4c      	ldr	r2, [pc, #304]	; (2400e900 <SDMMC_CmdReadMultiBlock+0x134>)
2400e7ce:	4b4d      	ldr	r3, [pc, #308]	; (2400e904 <SDMMC_CmdReadMultiBlock+0x138>)
{
2400e7d0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7d2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e7d4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7d6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e7da:	68c1      	ldr	r1, [r0, #12]
2400e7dc:	4c4a      	ldr	r4, [pc, #296]	; (2400e908 <SDMMC_CmdReadMultiBlock+0x13c>)
2400e7de:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e7e4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e7ea:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e7ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e7f0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400e7f2:	b14a      	cbz	r2, 2400e808 <SDMMC_CmdReadMultiBlock+0x3c>
2400e7f4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e7f6:	4945      	ldr	r1, [pc, #276]	; (2400e90c <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400e7f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400e7fa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e7fc:	420a      	tst	r2, r1
2400e7fe:	d001      	beq.n	2400e804 <SDMMC_CmdReadMultiBlock+0x38>
2400e800:	0492      	lsls	r2, r2, #18
2400e802:	d507      	bpl.n	2400e814 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400e804:	1c5c      	adds	r4, r3, #1
2400e806:	d1f7      	bne.n	2400e7f8 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400e808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400e80c:	4618      	mov	r0, r3
2400e80e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e812:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e814:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e816:	075c      	lsls	r4, r3, #29
2400e818:	d43d      	bmi.n	2400e896 <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e81a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e81c:	f013 0301 	ands.w	r3, r3, #1
2400e820:	d134      	bne.n	2400e88c <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e822:	4b3b      	ldr	r3, [pc, #236]	; (2400e910 <SDMMC_CmdReadMultiBlock+0x144>)
2400e824:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e826:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e828:	b2db      	uxtb	r3, r3
2400e82a:	2b12      	cmp	r3, #18
2400e82c:	d131      	bne.n	2400e892 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400e82e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e830:	4b38      	ldr	r3, [pc, #224]	; (2400e914 <SDMMC_CmdReadMultiBlock+0x148>)
2400e832:	4013      	ands	r3, r2
2400e834:	2b00      	cmp	r3, #0
2400e836:	d0e9      	beq.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e838:	2a00      	cmp	r2, #0
2400e83a:	db30      	blt.n	2400e89e <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e83c:	0051      	lsls	r1, r2, #1
2400e83e:	d431      	bmi.n	2400e8a4 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e840:	0094      	lsls	r4, r2, #2
2400e842:	d431      	bmi.n	2400e8a8 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e844:	00d0      	lsls	r0, r2, #3
2400e846:	d431      	bmi.n	2400e8ac <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e848:	0111      	lsls	r1, r2, #4
2400e84a:	d432      	bmi.n	2400e8b2 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e84c:	0154      	lsls	r4, r2, #5
2400e84e:	d433      	bmi.n	2400e8b8 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e850:	01d0      	lsls	r0, r2, #7
2400e852:	d434      	bmi.n	2400e8be <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e854:	0211      	lsls	r1, r2, #8
2400e856:	d435      	bmi.n	2400e8c4 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e858:	0254      	lsls	r4, r2, #9
2400e85a:	d436      	bmi.n	2400e8ca <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e85c:	0290      	lsls	r0, r2, #10
2400e85e:	d440      	bmi.n	2400e8e2 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e860:	02d1      	lsls	r1, r2, #11
2400e862:	d43b      	bmi.n	2400e8dc <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e864:	0354      	lsls	r4, r2, #13
2400e866:	d436      	bmi.n	2400e8d6 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e868:	0390      	lsls	r0, r2, #14
2400e86a:	d431      	bmi.n	2400e8d0 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e86c:	03d1      	lsls	r1, r2, #15
2400e86e:	d444      	bmi.n	2400e8fa <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e870:	0414      	lsls	r4, r2, #16
2400e872:	d43f      	bmi.n	2400e8f4 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e874:	0450      	lsls	r0, r2, #17
2400e876:	d43a      	bmi.n	2400e8ee <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e878:	0491      	lsls	r1, r2, #18
2400e87a:	d435      	bmi.n	2400e8e8 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e87c:	f012 0f08 	tst.w	r2, #8
2400e880:	bf14      	ite	ne
2400e882:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400e886:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400e88a:	e7bf      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e88c:	2201      	movs	r2, #1
2400e88e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e890:	e7bc      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e892:	2301      	movs	r3, #1
2400e894:	e7ba      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e896:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e898:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e89a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e89c:	e7b6      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e89e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e8a2:	e7b3      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e8a4:	2340      	movs	r3, #64	; 0x40
2400e8a6:	e7b1      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e8a8:	2380      	movs	r3, #128	; 0x80
2400e8aa:	e7af      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e8ac:	f44f 7380 	mov.w	r3, #256	; 0x100
2400e8b0:	e7ac      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400e8b6:	e7a9      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400e8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400e8bc:	e7a6      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400e8be:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400e8c2:	e7a3      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400e8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400e8c8:	e7a0      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400e8ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400e8ce:	e79d      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400e8d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400e8d4:	e79a      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400e8d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400e8da:	e797      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400e8dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400e8e0:	e794      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400e8e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400e8e6:	e791      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400e8e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400e8ec:	e78e      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400e8ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400e8f2:	e78b      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400e8f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400e8f8:	e788      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400e8fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400e8fe:	e785      	b.n	2400e80c <SDMMC_CmdReadMultiBlock+0x40>
2400e900:	20000750 	.word	0x20000750
2400e904:	10624dd3 	.word	0x10624dd3
2400e908:	fffee0c0 	.word	0xfffee0c0
2400e90c:	00200045 	.word	0x00200045
2400e910:	002000c5 	.word	0x002000c5
2400e914:	fdffe008 	.word	0xfdffe008

2400e918 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e918:	4a4c      	ldr	r2, [pc, #304]	; (2400ea4c <SDMMC_CmdWriteSingleBlock+0x134>)
2400e91a:	4b4d      	ldr	r3, [pc, #308]	; (2400ea50 <SDMMC_CmdWriteSingleBlock+0x138>)
{
2400e91c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e91e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400e920:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e922:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e926:	68c1      	ldr	r1, [r0, #12]
2400e928:	4c4a      	ldr	r4, [pc, #296]	; (2400ea54 <SDMMC_CmdWriteSingleBlock+0x13c>)
2400e92a:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e92e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e930:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e932:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e936:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400e938:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400e93c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400e93e:	b14a      	cbz	r2, 2400e954 <SDMMC_CmdWriteSingleBlock+0x3c>
2400e940:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400e942:	4945      	ldr	r1, [pc, #276]	; (2400ea58 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400e944:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400e946:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400e948:	420a      	tst	r2, r1
2400e94a:	d001      	beq.n	2400e950 <SDMMC_CmdWriteSingleBlock+0x38>
2400e94c:	0492      	lsls	r2, r2, #18
2400e94e:	d507      	bpl.n	2400e960 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
2400e950:	1c5c      	adds	r4, r3, #1
2400e952:	d1f7      	bne.n	2400e944 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400e954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400e958:	4618      	mov	r0, r3
2400e95a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400e95e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400e960:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e962:	075c      	lsls	r4, r3, #29
2400e964:	d43d      	bmi.n	2400e9e2 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400e966:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400e968:	f013 0301 	ands.w	r3, r3, #1
2400e96c:	d134      	bne.n	2400e9d8 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400e96e:	4b3b      	ldr	r3, [pc, #236]	; (2400ea5c <SDMMC_CmdWriteSingleBlock+0x144>)
2400e970:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400e972:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400e974:	b2db      	uxtb	r3, r3
2400e976:	2b18      	cmp	r3, #24
2400e978:	d131      	bne.n	2400e9de <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400e97a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400e97c:	4b38      	ldr	r3, [pc, #224]	; (2400ea60 <SDMMC_CmdWriteSingleBlock+0x148>)
2400e97e:	4013      	ands	r3, r2
2400e980:	2b00      	cmp	r3, #0
2400e982:	d0e9      	beq.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400e984:	2a00      	cmp	r2, #0
2400e986:	db30      	blt.n	2400e9ea <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400e988:	0051      	lsls	r1, r2, #1
2400e98a:	d431      	bmi.n	2400e9f0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400e98c:	0094      	lsls	r4, r2, #2
2400e98e:	d431      	bmi.n	2400e9f4 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400e990:	00d0      	lsls	r0, r2, #3
2400e992:	d431      	bmi.n	2400e9f8 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400e994:	0111      	lsls	r1, r2, #4
2400e996:	d432      	bmi.n	2400e9fe <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400e998:	0154      	lsls	r4, r2, #5
2400e99a:	d433      	bmi.n	2400ea04 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400e99c:	01d0      	lsls	r0, r2, #7
2400e99e:	d434      	bmi.n	2400ea0a <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400e9a0:	0211      	lsls	r1, r2, #8
2400e9a2:	d435      	bmi.n	2400ea10 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400e9a4:	0254      	lsls	r4, r2, #9
2400e9a6:	d436      	bmi.n	2400ea16 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400e9a8:	0290      	lsls	r0, r2, #10
2400e9aa:	d440      	bmi.n	2400ea2e <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400e9ac:	02d1      	lsls	r1, r2, #11
2400e9ae:	d43b      	bmi.n	2400ea28 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400e9b0:	0354      	lsls	r4, r2, #13
2400e9b2:	d436      	bmi.n	2400ea22 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400e9b4:	0390      	lsls	r0, r2, #14
2400e9b6:	d431      	bmi.n	2400ea1c <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400e9b8:	03d1      	lsls	r1, r2, #15
2400e9ba:	d444      	bmi.n	2400ea46 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400e9bc:	0414      	lsls	r4, r2, #16
2400e9be:	d43f      	bmi.n	2400ea40 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400e9c0:	0450      	lsls	r0, r2, #17
2400e9c2:	d43a      	bmi.n	2400ea3a <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400e9c4:	0491      	lsls	r1, r2, #18
2400e9c6:	d435      	bmi.n	2400ea34 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400e9c8:	f012 0f08 	tst.w	r2, #8
2400e9cc:	bf14      	ite	ne
2400e9ce:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400e9d2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400e9d6:	e7bf      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400e9d8:	2201      	movs	r2, #1
2400e9da:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e9dc:	e7bc      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400e9de:	2301      	movs	r3, #1
2400e9e0:	e7ba      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e9e2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e9e4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400e9e6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400e9e8:	e7b6      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400e9ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400e9ee:	e7b3      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400e9f0:	2340      	movs	r3, #64	; 0x40
2400e9f2:	e7b1      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400e9f4:	2380      	movs	r3, #128	; 0x80
2400e9f6:	e7af      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400e9f8:	f44f 7380 	mov.w	r3, #256	; 0x100
2400e9fc:	e7ac      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400e9fe:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ea02:	e7a9      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ea04:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ea08:	e7a6      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ea0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ea0e:	e7a3      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ea10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ea14:	e7a0      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ea16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ea1a:	e79d      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ea1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ea20:	e79a      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ea22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ea26:	e797      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400ea28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400ea2c:	e794      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ea2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ea32:	e791      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400ea34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ea38:	e78e      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ea3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ea3e:	e78b      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ea40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ea44:	e788      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ea46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ea4a:	e785      	b.n	2400e958 <SDMMC_CmdWriteSingleBlock+0x40>
2400ea4c:	20000750 	.word	0x20000750
2400ea50:	10624dd3 	.word	0x10624dd3
2400ea54:	fffee0c0 	.word	0xfffee0c0
2400ea58:	00200045 	.word	0x00200045
2400ea5c:	002000c5 	.word	0x002000c5
2400ea60:	fdffe008 	.word	0xfdffe008

2400ea64 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea64:	4a4c      	ldr	r2, [pc, #304]	; (2400eb98 <SDMMC_CmdWriteMultiBlock+0x134>)
2400ea66:	4b4d      	ldr	r3, [pc, #308]	; (2400eb9c <SDMMC_CmdWriteMultiBlock+0x138>)
{
2400ea68:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea6a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400ea6c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea6e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ea72:	68c1      	ldr	r1, [r0, #12]
2400ea74:	4c4a      	ldr	r4, [pc, #296]	; (2400eba0 <SDMMC_CmdWriteMultiBlock+0x13c>)
2400ea76:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea7a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ea7c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea7e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ea82:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ea84:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ea88:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400ea8a:	b14a      	cbz	r2, 2400eaa0 <SDMMC_CmdWriteMultiBlock+0x3c>
2400ea8c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ea8e:	4945      	ldr	r1, [pc, #276]	; (2400eba4 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400ea90:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400ea92:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ea94:	420a      	tst	r2, r1
2400ea96:	d001      	beq.n	2400ea9c <SDMMC_CmdWriteMultiBlock+0x38>
2400ea98:	0492      	lsls	r2, r2, #18
2400ea9a:	d507      	bpl.n	2400eaac <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
2400ea9c:	1c5c      	adds	r4, r3, #1
2400ea9e:	d1f7      	bne.n	2400ea90 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400eaa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400eaa4:	4618      	mov	r0, r3
2400eaa6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400eaaa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400eaac:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400eaae:	075c      	lsls	r4, r3, #29
2400eab0:	d43d      	bmi.n	2400eb2e <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400eab2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400eab4:	f013 0301 	ands.w	r3, r3, #1
2400eab8:	d134      	bne.n	2400eb24 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400eaba:	4b3b      	ldr	r3, [pc, #236]	; (2400eba8 <SDMMC_CmdWriteMultiBlock+0x144>)
2400eabc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400eabe:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400eac0:	b2db      	uxtb	r3, r3
2400eac2:	2b19      	cmp	r3, #25
2400eac4:	d131      	bne.n	2400eb2a <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400eac6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400eac8:	4b38      	ldr	r3, [pc, #224]	; (2400ebac <SDMMC_CmdWriteMultiBlock+0x148>)
2400eaca:	4013      	ands	r3, r2
2400eacc:	2b00      	cmp	r3, #0
2400eace:	d0e9      	beq.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ead0:	2a00      	cmp	r2, #0
2400ead2:	db30      	blt.n	2400eb36 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ead4:	0051      	lsls	r1, r2, #1
2400ead6:	d431      	bmi.n	2400eb3c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ead8:	0094      	lsls	r4, r2, #2
2400eada:	d431      	bmi.n	2400eb40 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400eadc:	00d0      	lsls	r0, r2, #3
2400eade:	d431      	bmi.n	2400eb44 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400eae0:	0111      	lsls	r1, r2, #4
2400eae2:	d432      	bmi.n	2400eb4a <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400eae4:	0154      	lsls	r4, r2, #5
2400eae6:	d433      	bmi.n	2400eb50 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400eae8:	01d0      	lsls	r0, r2, #7
2400eaea:	d434      	bmi.n	2400eb56 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400eaec:	0211      	lsls	r1, r2, #8
2400eaee:	d435      	bmi.n	2400eb5c <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400eaf0:	0254      	lsls	r4, r2, #9
2400eaf2:	d436      	bmi.n	2400eb62 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400eaf4:	0290      	lsls	r0, r2, #10
2400eaf6:	d440      	bmi.n	2400eb7a <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400eaf8:	02d1      	lsls	r1, r2, #11
2400eafa:	d43b      	bmi.n	2400eb74 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400eafc:	0354      	lsls	r4, r2, #13
2400eafe:	d436      	bmi.n	2400eb6e <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400eb00:	0390      	lsls	r0, r2, #14
2400eb02:	d431      	bmi.n	2400eb68 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400eb04:	03d1      	lsls	r1, r2, #15
2400eb06:	d444      	bmi.n	2400eb92 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400eb08:	0414      	lsls	r4, r2, #16
2400eb0a:	d43f      	bmi.n	2400eb8c <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400eb0c:	0450      	lsls	r0, r2, #17
2400eb0e:	d43a      	bmi.n	2400eb86 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400eb10:	0491      	lsls	r1, r2, #18
2400eb12:	d435      	bmi.n	2400eb80 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400eb14:	f012 0f08 	tst.w	r2, #8
2400eb18:	bf14      	ite	ne
2400eb1a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400eb1e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400eb22:	e7bf      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400eb24:	2201      	movs	r2, #1
2400eb26:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400eb28:	e7bc      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400eb2a:	2301      	movs	r3, #1
2400eb2c:	e7ba      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400eb2e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400eb30:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400eb32:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400eb34:	e7b6      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400eb36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400eb3a:	e7b3      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400eb3c:	2340      	movs	r3, #64	; 0x40
2400eb3e:	e7b1      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400eb40:	2380      	movs	r3, #128	; 0x80
2400eb42:	e7af      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400eb44:	f44f 7380 	mov.w	r3, #256	; 0x100
2400eb48:	e7ac      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400eb4a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400eb4e:	e7a9      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400eb50:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400eb54:	e7a6      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400eb56:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400eb5a:	e7a3      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400eb5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400eb60:	e7a0      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400eb62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400eb66:	e79d      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400eb68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400eb6c:	e79a      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400eb6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400eb72:	e797      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400eb74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400eb78:	e794      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400eb7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400eb7e:	e791      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400eb80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400eb84:	e78e      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400eb86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400eb8a:	e78b      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400eb8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400eb90:	e788      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400eb92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400eb96:	e785      	b.n	2400eaa4 <SDMMC_CmdWriteMultiBlock+0x40>
2400eb98:	20000750 	.word	0x20000750
2400eb9c:	10624dd3 	.word	0x10624dd3
2400eba0:	fffee0c0 	.word	0xfffee0c0
2400eba4:	00200045 	.word	0x00200045
2400eba8:	002000c5 	.word	0x002000c5
2400ebac:	fdffe008 	.word	0xfdffe008

2400ebb0 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebb0:	4b7d      	ldr	r3, [pc, #500]	; (2400eda8 <SDMMC_CmdStopTransfer+0x1f8>)
2400ebb2:	497e      	ldr	r1, [pc, #504]	; (2400edac <SDMMC_CmdStopTransfer+0x1fc>)
{
2400ebb4:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebb6:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400ebb8:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ebba:	4b7d      	ldr	r3, [pc, #500]	; (2400edb0 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebbc:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ebc0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebc2:	4d7c      	ldr	r5, [pc, #496]	; (2400edb4 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ebc4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebc8:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ebca:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400ebcc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ebce:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400ebd2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
2400ebd6:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ebd8:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400ebdc:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ebde:	68c4      	ldr	r4, [r0, #12]
2400ebe0:	4023      	ands	r3, r4
2400ebe2:	4319      	orrs	r1, r3
2400ebe4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400ebe6:	b14a      	cbz	r2, 2400ebfc <SDMMC_CmdStopTransfer+0x4c>
2400ebe8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ebea:	4973      	ldr	r1, [pc, #460]	; (2400edb8 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
2400ebec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400ebee:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ebf0:	420a      	tst	r2, r1
2400ebf2:	d001      	beq.n	2400ebf8 <SDMMC_CmdStopTransfer+0x48>
2400ebf4:	0492      	lsls	r2, r2, #18
2400ebf6:	d50a      	bpl.n	2400ec0e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400ebf8:	1c5c      	adds	r4, r3, #1
2400ebfa:	d1f7      	bne.n	2400ebec <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ebfc:	68c2      	ldr	r2, [r0, #12]
2400ebfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400ec02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ec06:	60c2      	str	r2, [r0, #12]
}
2400ec08:	4618      	mov	r0, r3
2400ec0a:	bc30      	pop	{r4, r5}
2400ec0c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ec0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ec10:	075b      	lsls	r3, r3, #29
2400ec12:	d454      	bmi.n	2400ecbe <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ec14:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ec16:	f013 0301 	ands.w	r3, r3, #1
2400ec1a:	d13c      	bne.n	2400ec96 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ec1c:	4a67      	ldr	r2, [pc, #412]	; (2400edbc <SDMMC_CmdStopTransfer+0x20c>)
2400ec1e:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ec20:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ec22:	b2d2      	uxtb	r2, r2
2400ec24:	2a0c      	cmp	r2, #12
2400ec26:	d144      	bne.n	2400ecb2 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
2400ec28:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ec2a:	4965      	ldr	r1, [pc, #404]	; (2400edc0 <SDMMC_CmdStopTransfer+0x210>)
2400ec2c:	4011      	ands	r1, r2
2400ec2e:	2900      	cmp	r1, #0
2400ec30:	d038      	beq.n	2400eca4 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ec32:	2a00      	cmp	r2, #0
2400ec34:	db36      	blt.n	2400eca4 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ec36:	0055      	lsls	r5, r2, #1
2400ec38:	d448      	bmi.n	2400eccc <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ec3a:	0094      	lsls	r4, r2, #2
2400ec3c:	d44c      	bmi.n	2400ecd8 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ec3e:	00d1      	lsls	r1, r2, #3
2400ec40:	d450      	bmi.n	2400ece4 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ec42:	0113      	lsls	r3, r2, #4
2400ec44:	d455      	bmi.n	2400ecf2 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ec46:	0155      	lsls	r5, r2, #5
2400ec48:	d45a      	bmi.n	2400ed00 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ec4a:	01d4      	lsls	r4, r2, #7
2400ec4c:	d466      	bmi.n	2400ed1c <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ec4e:	0211      	lsls	r1, r2, #8
2400ec50:	d45d      	bmi.n	2400ed0e <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ec52:	0253      	lsls	r3, r2, #9
2400ec54:	d470      	bmi.n	2400ed38 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ec56:	0295      	lsls	r5, r2, #10
2400ec58:	d467      	bmi.n	2400ed2a <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ec5a:	02d4      	lsls	r4, r2, #11
2400ec5c:	f100 8081 	bmi.w	2400ed62 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ec60:	0351      	lsls	r1, r2, #13
2400ec62:	d477      	bmi.n	2400ed54 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ec64:	0393      	lsls	r3, r2, #14
2400ec66:	d46e      	bmi.n	2400ed46 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ec68:	03d5      	lsls	r5, r2, #15
2400ec6a:	f100 8096 	bmi.w	2400ed9a <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ec6e:	0414      	lsls	r4, r2, #16
2400ec70:	f100 8085 	bmi.w	2400ed7e <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ec74:	0451      	lsls	r1, r2, #17
2400ec76:	d47b      	bmi.n	2400ed70 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ec78:	0493      	lsls	r3, r2, #18
2400ec7a:	f100 8087 	bmi.w	2400ed8c <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400ec7e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ec82:	68c2      	ldr	r2, [r0, #12]
2400ec84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400ec88:	bf14      	ite	ne
2400ec8a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ec8e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ec92:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ec94:	e7b8      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ec96:	2201      	movs	r2, #1
2400ec98:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ec9a:	68c2      	ldr	r2, [r0, #12]
2400ec9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400eca0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400eca2:	e7b1      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400eca4:	68c2      	ldr	r2, [r0, #12]
2400eca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecaa:	60c2      	str	r2, [r0, #12]
}
2400ecac:	4618      	mov	r0, r3
2400ecae:	bc30      	pop	{r4, r5}
2400ecb0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecb2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ecb4:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecba:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ecbc:	e7a4      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ecbe:	2304      	movs	r3, #4
2400ecc0:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecc2:	68c2      	ldr	r2, [r0, #12]
2400ecc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecc8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ecca:	e79d      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400eccc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ecce:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecd4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ecd6:	e797      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecd8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ecda:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ece0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ece2:	e791      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ece4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ece6:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecee:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ecf0:	e78a      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecf2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ecf4:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ecf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ecfc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ecfe:	e783      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed00:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ed02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed0a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed0c:	e77c      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed0e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ed10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed18:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed1a:	e775      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed1c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ed1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed26:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed28:	e76e      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed2a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ed2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed34:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed36:	e767      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed38:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ed3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed42:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed44:	e760      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed46:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ed48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed50:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed52:	e759      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed54:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ed56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed5e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed60:	e752      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed62:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
2400ed64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed6c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed6e:	e74b      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed70:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ed72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed7a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed7c:	e744      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed7e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ed80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed88:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed8a:	e73d      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed8c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400ed8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ed96:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ed98:	e736      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ed9a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ed9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400eda0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400eda4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400eda6:	e72f      	b.n	2400ec08 <SDMMC_CmdStopTransfer+0x58>
2400eda8:	20000750 	.word	0x20000750
2400edac:	10624dd3 	.word	0x10624dd3
2400edb0:	fffee0c0 	.word	0xfffee0c0
2400edb4:	05f5e100 	.word	0x05f5e100
2400edb8:	00200045 	.word	0x00200045
2400edbc:	002000c5 	.word	0x002000c5
2400edc0:	fdffe008 	.word	0xfdffe008

2400edc4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400edc4:	4a4c      	ldr	r2, [pc, #304]	; (2400eef8 <SDMMC_CmdSelDesel+0x134>)
2400edc6:	4b4d      	ldr	r3, [pc, #308]	; (2400eefc <SDMMC_CmdSelDesel+0x138>)
{
2400edc8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400edca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400edcc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400edce:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400edd2:	68c1      	ldr	r1, [r0, #12]
2400edd4:	4c4a      	ldr	r4, [pc, #296]	; (2400ef00 <SDMMC_CmdSelDesel+0x13c>)
2400edd6:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400edda:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400eddc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400edde:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ede2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ede4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ede8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400edea:	b14a      	cbz	r2, 2400ee00 <SDMMC_CmdSelDesel+0x3c>
2400edec:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400edee:	4945      	ldr	r1, [pc, #276]	; (2400ef04 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
2400edf0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400edf2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400edf4:	420a      	tst	r2, r1
2400edf6:	d001      	beq.n	2400edfc <SDMMC_CmdSelDesel+0x38>
2400edf8:	0492      	lsls	r2, r2, #18
2400edfa:	d507      	bpl.n	2400ee0c <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
2400edfc:	1c5c      	adds	r4, r3, #1
2400edfe:	d1f7      	bne.n	2400edf0 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400ee00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400ee04:	4618      	mov	r0, r3
2400ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ee0a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ee0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ee0e:	075c      	lsls	r4, r3, #29
2400ee10:	d43d      	bmi.n	2400ee8e <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ee12:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ee14:	f013 0301 	ands.w	r3, r3, #1
2400ee18:	d134      	bne.n	2400ee84 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ee1a:	4b3b      	ldr	r3, [pc, #236]	; (2400ef08 <SDMMC_CmdSelDesel+0x144>)
2400ee1c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ee1e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ee20:	b2db      	uxtb	r3, r3
2400ee22:	2b07      	cmp	r3, #7
2400ee24:	d131      	bne.n	2400ee8a <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
2400ee26:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ee28:	4b38      	ldr	r3, [pc, #224]	; (2400ef0c <SDMMC_CmdSelDesel+0x148>)
2400ee2a:	4013      	ands	r3, r2
2400ee2c:	2b00      	cmp	r3, #0
2400ee2e:	d0e9      	beq.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ee30:	2a00      	cmp	r2, #0
2400ee32:	db30      	blt.n	2400ee96 <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ee34:	0051      	lsls	r1, r2, #1
2400ee36:	d431      	bmi.n	2400ee9c <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ee38:	0094      	lsls	r4, r2, #2
2400ee3a:	d431      	bmi.n	2400eea0 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ee3c:	00d0      	lsls	r0, r2, #3
2400ee3e:	d431      	bmi.n	2400eea4 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ee40:	0111      	lsls	r1, r2, #4
2400ee42:	d432      	bmi.n	2400eeaa <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ee44:	0154      	lsls	r4, r2, #5
2400ee46:	d433      	bmi.n	2400eeb0 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ee48:	01d0      	lsls	r0, r2, #7
2400ee4a:	d434      	bmi.n	2400eeb6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ee4c:	0211      	lsls	r1, r2, #8
2400ee4e:	d435      	bmi.n	2400eebc <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ee50:	0254      	lsls	r4, r2, #9
2400ee52:	d436      	bmi.n	2400eec2 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ee54:	0290      	lsls	r0, r2, #10
2400ee56:	d440      	bmi.n	2400eeda <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ee58:	02d1      	lsls	r1, r2, #11
2400ee5a:	d43b      	bmi.n	2400eed4 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ee5c:	0354      	lsls	r4, r2, #13
2400ee5e:	d436      	bmi.n	2400eece <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ee60:	0390      	lsls	r0, r2, #14
2400ee62:	d431      	bmi.n	2400eec8 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ee64:	03d1      	lsls	r1, r2, #15
2400ee66:	d444      	bmi.n	2400eef2 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ee68:	0414      	lsls	r4, r2, #16
2400ee6a:	d43f      	bmi.n	2400eeec <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ee6c:	0450      	lsls	r0, r2, #17
2400ee6e:	d43a      	bmi.n	2400eee6 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ee70:	0491      	lsls	r1, r2, #18
2400ee72:	d435      	bmi.n	2400eee0 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ee74:	f012 0f08 	tst.w	r2, #8
2400ee78:	bf14      	ite	ne
2400ee7a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400ee7e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400ee82:	e7bf      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ee84:	2201      	movs	r2, #1
2400ee86:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ee88:	e7bc      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ee8a:	2301      	movs	r3, #1
2400ee8c:	e7ba      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ee8e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ee90:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ee92:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ee94:	e7b6      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400ee96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ee9a:	e7b3      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ee9c:	2340      	movs	r3, #64	; 0x40
2400ee9e:	e7b1      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400eea0:	2380      	movs	r3, #128	; 0x80
2400eea2:	e7af      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400eea4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400eea8:	e7ac      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400eeaa:	f44f 7300 	mov.w	r3, #512	; 0x200
2400eeae:	e7a9      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400eeb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400eeb4:	e7a6      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400eeb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400eeba:	e7a3      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400eebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400eec0:	e7a0      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400eec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400eec6:	e79d      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400eec8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400eecc:	e79a      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400eece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400eed2:	e797      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
2400eed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400eed8:	e794      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400eeda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400eede:	e791      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400eee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400eee4:	e78e      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400eee6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400eeea:	e78b      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400eeec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400eef0:	e788      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400eef2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400eef6:	e785      	b.n	2400ee04 <SDMMC_CmdSelDesel+0x40>
2400eef8:	20000750 	.word	0x20000750
2400eefc:	10624dd3 	.word	0x10624dd3
2400ef00:	fffee0c0 	.word	0xfffee0c0
2400ef04:	00200045 	.word	0x00200045
2400ef08:	002000c5 	.word	0x002000c5
2400ef0c:	fdffe008 	.word	0xfdffe008

2400ef10 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef10:	4b11      	ldr	r3, [pc, #68]	; (2400ef58 <SDMMC_CmdGoIdleState+0x48>)
{
2400ef12:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef14:	4a11      	ldr	r2, [pc, #68]	; (2400ef5c <SDMMC_CmdGoIdleState+0x4c>)
{
2400ef16:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef18:	4c11      	ldr	r4, [pc, #68]	; (2400ef60 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400ef1a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef1c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400ef1e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef20:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef24:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef26:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef2a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef2c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef32:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef36:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef38:	e002      	b.n	2400ef40 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400ef3a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400ef3c:	0612      	lsls	r2, r2, #24
2400ef3e:	d405      	bmi.n	2400ef4c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400ef40:	3b01      	subs	r3, #1
2400ef42:	d2fa      	bcs.n	2400ef3a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400ef44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400ef48:	bc30      	pop	{r4, r5}
2400ef4a:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ef4c:	4b05      	ldr	r3, [pc, #20]	; (2400ef64 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400ef4e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ef50:	638b      	str	r3, [r1, #56]	; 0x38
}
2400ef52:	bc30      	pop	{r4, r5}
2400ef54:	4770      	bx	lr
2400ef56:	bf00      	nop
2400ef58:	20000750 	.word	0x20000750
2400ef5c:	fffee0c0 	.word	0xfffee0c0
2400ef60:	10624dd3 	.word	0x10624dd3
2400ef64:	002000c5 	.word	0x002000c5

2400ef68 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef68:	4a1c      	ldr	r2, [pc, #112]	; (2400efdc <SDMMC_CmdOperCond+0x74>)
{
2400ef6a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400ef6c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef70:	481b      	ldr	r0, [pc, #108]	; (2400efe0 <SDMMC_CmdOperCond+0x78>)
{
2400ef72:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef74:	4c1b      	ldr	r4, [pc, #108]	; (2400efe4 <SDMMC_CmdOperCond+0x7c>)
2400ef76:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400ef78:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef7a:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef7e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef82:	68cc      	ldr	r4, [r1, #12]
2400ef84:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef88:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ef8a:	f241 3088 	movw	r0, #5000	; 0x1388
2400ef8e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ef92:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400ef94:	b14a      	cbz	r2, 2400efaa <SDMMC_CmdOperCond+0x42>
2400ef96:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400ef98:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400ef9a:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ef9c:	f012 0f45 	tst.w	r2, #69	; 0x45
2400efa0:	d001      	beq.n	2400efa6 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400efa2:	0490      	lsls	r0, r2, #18
2400efa4:	d506      	bpl.n	2400efb4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400efa6:	1c5c      	adds	r4, r3, #1
2400efa8:	d1f6      	bne.n	2400ef98 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400efaa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400efae:	f85d 4b04 	ldr.w	r4, [sp], #4
2400efb2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400efb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400efb6:	075a      	lsls	r2, r3, #29
2400efb8:	d40c      	bmi.n	2400efd4 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400efba:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400efbc:	f010 0001 	ands.w	r0, r0, #1
2400efc0:	d105      	bne.n	2400efce <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400efc2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400efc4:	065b      	lsls	r3, r3, #25
2400efc6:	d5f2      	bpl.n	2400efae <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400efc8:	2340      	movs	r3, #64	; 0x40
2400efca:	638b      	str	r3, [r1, #56]	; 0x38
2400efcc:	e7ef      	b.n	2400efae <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400efce:	2301      	movs	r3, #1
2400efd0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400efd2:	e7ec      	b.n	2400efae <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400efd4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400efd6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400efd8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400efda:	e7e8      	b.n	2400efae <SDMMC_CmdOperCond+0x46>
2400efdc:	20000750 	.word	0x20000750
2400efe0:	fffee0c0 	.word	0xfffee0c0
2400efe4:	10624dd3 	.word	0x10624dd3

2400efe8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400efe8:	4a4c      	ldr	r2, [pc, #304]	; (2400f11c <SDMMC_CmdAppCommand+0x134>)
2400efea:	4b4d      	ldr	r3, [pc, #308]	; (2400f120 <SDMMC_CmdAppCommand+0x138>)
{
2400efec:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400efee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400eff0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400eff2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400eff6:	68c1      	ldr	r1, [r0, #12]
2400eff8:	4c4a      	ldr	r4, [pc, #296]	; (2400f124 <SDMMC_CmdAppCommand+0x13c>)
2400effa:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400effe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f000:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f002:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f006:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f008:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f00c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f00e:	b14a      	cbz	r2, 2400f024 <SDMMC_CmdAppCommand+0x3c>
2400f010:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400f012:	4945      	ldr	r1, [pc, #276]	; (2400f128 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
2400f014:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f016:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f018:	420a      	tst	r2, r1
2400f01a:	d001      	beq.n	2400f020 <SDMMC_CmdAppCommand+0x38>
2400f01c:	0492      	lsls	r2, r2, #18
2400f01e:	d507      	bpl.n	2400f030 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
2400f020:	1c5c      	adds	r4, r3, #1
2400f022:	d1f7      	bne.n	2400f014 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400f024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f028:	4618      	mov	r0, r3
2400f02a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f02e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f030:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f032:	075c      	lsls	r4, r3, #29
2400f034:	d43d      	bmi.n	2400f0b2 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f036:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f038:	f013 0301 	ands.w	r3, r3, #1
2400f03c:	d134      	bne.n	2400f0a8 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f03e:	4b3b      	ldr	r3, [pc, #236]	; (2400f12c <SDMMC_CmdAppCommand+0x144>)
2400f040:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400f042:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f044:	b2db      	uxtb	r3, r3
2400f046:	2b37      	cmp	r3, #55	; 0x37
2400f048:	d131      	bne.n	2400f0ae <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
2400f04a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400f04c:	4b38      	ldr	r3, [pc, #224]	; (2400f130 <SDMMC_CmdAppCommand+0x148>)
2400f04e:	4013      	ands	r3, r2
2400f050:	2b00      	cmp	r3, #0
2400f052:	d0e9      	beq.n	2400f028 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400f054:	2a00      	cmp	r2, #0
2400f056:	db30      	blt.n	2400f0ba <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400f058:	0051      	lsls	r1, r2, #1
2400f05a:	d431      	bmi.n	2400f0c0 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400f05c:	0094      	lsls	r4, r2, #2
2400f05e:	d431      	bmi.n	2400f0c4 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400f060:	00d0      	lsls	r0, r2, #3
2400f062:	d431      	bmi.n	2400f0c8 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400f064:	0111      	lsls	r1, r2, #4
2400f066:	d432      	bmi.n	2400f0ce <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400f068:	0154      	lsls	r4, r2, #5
2400f06a:	d433      	bmi.n	2400f0d4 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400f06c:	01d0      	lsls	r0, r2, #7
2400f06e:	d434      	bmi.n	2400f0da <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400f070:	0211      	lsls	r1, r2, #8
2400f072:	d435      	bmi.n	2400f0e0 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400f074:	0254      	lsls	r4, r2, #9
2400f076:	d436      	bmi.n	2400f0e6 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400f078:	0290      	lsls	r0, r2, #10
2400f07a:	d440      	bmi.n	2400f0fe <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400f07c:	02d1      	lsls	r1, r2, #11
2400f07e:	d43b      	bmi.n	2400f0f8 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400f080:	0354      	lsls	r4, r2, #13
2400f082:	d436      	bmi.n	2400f0f2 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400f084:	0390      	lsls	r0, r2, #14
2400f086:	d431      	bmi.n	2400f0ec <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400f088:	03d1      	lsls	r1, r2, #15
2400f08a:	d444      	bmi.n	2400f116 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400f08c:	0414      	lsls	r4, r2, #16
2400f08e:	d43f      	bmi.n	2400f110 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400f090:	0450      	lsls	r0, r2, #17
2400f092:	d43a      	bmi.n	2400f10a <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400f094:	0491      	lsls	r1, r2, #18
2400f096:	d435      	bmi.n	2400f104 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f098:	f012 0f08 	tst.w	r2, #8
2400f09c:	bf14      	ite	ne
2400f09e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400f0a2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f0a6:	e7bf      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f0a8:	2201      	movs	r2, #1
2400f0aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f0ac:	e7bc      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f0ae:	2301      	movs	r3, #1
2400f0b0:	e7ba      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f0b2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f0b4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f0b6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f0b8:	e7b6      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400f0ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f0be:	e7b3      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400f0c0:	2340      	movs	r3, #64	; 0x40
2400f0c2:	e7b1      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400f0c4:	2380      	movs	r3, #128	; 0x80
2400f0c6:	e7af      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400f0c8:	f44f 7380 	mov.w	r3, #256	; 0x100
2400f0cc:	e7ac      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400f0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
2400f0d2:	e7a9      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400f0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400f0d8:	e7a6      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400f0da:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400f0de:	e7a3      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400f0e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400f0e4:	e7a0      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f0e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f0ea:	e79d      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400f0ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400f0f0:	e79a      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400f0f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400f0f6:	e797      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
2400f0f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400f0fc:	e794      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400f0fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400f102:	e791      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400f104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400f108:	e78e      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400f10a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400f10e:	e78b      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400f110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400f114:	e788      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400f116:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400f11a:	e785      	b.n	2400f028 <SDMMC_CmdAppCommand+0x40>
2400f11c:	20000750 	.word	0x20000750
2400f120:	10624dd3 	.word	0x10624dd3
2400f124:	fffee0c0 	.word	0xfffee0c0
2400f128:	00200045 	.word	0x00200045
2400f12c:	002000c5 	.word	0x002000c5
2400f130:	fdffe008 	.word	0xfdffe008

2400f134 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f134:	4a18      	ldr	r2, [pc, #96]	; (2400f198 <SDMMC_CmdAppOperCommand+0x64>)
2400f136:	4b19      	ldr	r3, [pc, #100]	; (2400f19c <SDMMC_CmdAppOperCommand+0x68>)
{
2400f138:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f13a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f13c:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f13e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f142:	68c1      	ldr	r1, [r0, #12]
2400f144:	4c16      	ldr	r4, [pc, #88]	; (2400f1a0 <SDMMC_CmdAppOperCommand+0x6c>)
2400f146:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f14a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f14c:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f14e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f152:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f154:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f158:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f15a:	b14a      	cbz	r2, 2400f170 <SDMMC_CmdAppOperCommand+0x3c>
2400f15c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400f15e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f160:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f162:	f012 0f45 	tst.w	r2, #69	; 0x45
2400f166:	d001      	beq.n	2400f16c <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400f168:	0492      	lsls	r2, r2, #18
2400f16a:	d507      	bpl.n	2400f17c <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
2400f16c:	1c59      	adds	r1, r3, #1
2400f16e:	d1f6      	bne.n	2400f15e <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400f170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f174:	4618      	mov	r0, r3
2400f176:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f17a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f17c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f17e:	f013 0304 	ands.w	r3, r3, #4
2400f182:	d105      	bne.n	2400f190 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f184:	4a07      	ldr	r2, [pc, #28]	; (2400f1a4 <SDMMC_CmdAppOperCommand+0x70>)
2400f186:	6382      	str	r2, [r0, #56]	; 0x38
}
2400f188:	4618      	mov	r0, r3
2400f18a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f18e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f190:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f192:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f194:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f196:	e7ed      	b.n	2400f174 <SDMMC_CmdAppOperCommand+0x40>
2400f198:	20000750 	.word	0x20000750
2400f19c:	10624dd3 	.word	0x10624dd3
2400f1a0:	fffee0c0 	.word	0xfffee0c0
2400f1a4:	002000c5 	.word	0x002000c5

2400f1a8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1a8:	4a4c      	ldr	r2, [pc, #304]	; (2400f2dc <SDMMC_CmdBusWidth+0x134>)
2400f1aa:	4b4d      	ldr	r3, [pc, #308]	; (2400f2e0 <SDMMC_CmdBusWidth+0x138>)
{
2400f1ac:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1ae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f1b0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1b2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f1b6:	68c1      	ldr	r1, [r0, #12]
2400f1b8:	4c4a      	ldr	r4, [pc, #296]	; (2400f2e4 <SDMMC_CmdBusWidth+0x13c>)
2400f1ba:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f1c0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f1c6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f1c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f1cc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f1ce:	b14a      	cbz	r2, 2400f1e4 <SDMMC_CmdBusWidth+0x3c>
2400f1d0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400f1d2:	4945      	ldr	r1, [pc, #276]	; (2400f2e8 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
2400f1d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f1d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f1d8:	420a      	tst	r2, r1
2400f1da:	d001      	beq.n	2400f1e0 <SDMMC_CmdBusWidth+0x38>
2400f1dc:	0492      	lsls	r2, r2, #18
2400f1de:	d507      	bpl.n	2400f1f0 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
2400f1e0:	1c5c      	adds	r4, r3, #1
2400f1e2:	d1f7      	bne.n	2400f1d4 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400f1e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f1e8:	4618      	mov	r0, r3
2400f1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f1ee:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f1f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f1f2:	075c      	lsls	r4, r3, #29
2400f1f4:	d43d      	bmi.n	2400f272 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f1f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f1f8:	f013 0301 	ands.w	r3, r3, #1
2400f1fc:	d134      	bne.n	2400f268 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f1fe:	4b3b      	ldr	r3, [pc, #236]	; (2400f2ec <SDMMC_CmdBusWidth+0x144>)
2400f200:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400f202:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f204:	b2db      	uxtb	r3, r3
2400f206:	2b06      	cmp	r3, #6
2400f208:	d131      	bne.n	2400f26e <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
2400f20a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400f20c:	4b38      	ldr	r3, [pc, #224]	; (2400f2f0 <SDMMC_CmdBusWidth+0x148>)
2400f20e:	4013      	ands	r3, r2
2400f210:	2b00      	cmp	r3, #0
2400f212:	d0e9      	beq.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400f214:	2a00      	cmp	r2, #0
2400f216:	db30      	blt.n	2400f27a <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400f218:	0051      	lsls	r1, r2, #1
2400f21a:	d431      	bmi.n	2400f280 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400f21c:	0094      	lsls	r4, r2, #2
2400f21e:	d431      	bmi.n	2400f284 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400f220:	00d0      	lsls	r0, r2, #3
2400f222:	d431      	bmi.n	2400f288 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400f224:	0111      	lsls	r1, r2, #4
2400f226:	d432      	bmi.n	2400f28e <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400f228:	0154      	lsls	r4, r2, #5
2400f22a:	d433      	bmi.n	2400f294 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400f22c:	01d0      	lsls	r0, r2, #7
2400f22e:	d434      	bmi.n	2400f29a <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400f230:	0211      	lsls	r1, r2, #8
2400f232:	d435      	bmi.n	2400f2a0 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400f234:	0254      	lsls	r4, r2, #9
2400f236:	d436      	bmi.n	2400f2a6 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400f238:	0290      	lsls	r0, r2, #10
2400f23a:	d440      	bmi.n	2400f2be <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400f23c:	02d1      	lsls	r1, r2, #11
2400f23e:	d43b      	bmi.n	2400f2b8 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400f240:	0354      	lsls	r4, r2, #13
2400f242:	d436      	bmi.n	2400f2b2 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400f244:	0390      	lsls	r0, r2, #14
2400f246:	d431      	bmi.n	2400f2ac <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400f248:	03d1      	lsls	r1, r2, #15
2400f24a:	d444      	bmi.n	2400f2d6 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400f24c:	0414      	lsls	r4, r2, #16
2400f24e:	d43f      	bmi.n	2400f2d0 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400f250:	0450      	lsls	r0, r2, #17
2400f252:	d43a      	bmi.n	2400f2ca <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400f254:	0491      	lsls	r1, r2, #18
2400f256:	d435      	bmi.n	2400f2c4 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f258:	f012 0f08 	tst.w	r2, #8
2400f25c:	bf14      	ite	ne
2400f25e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400f262:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f266:	e7bf      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f268:	2201      	movs	r2, #1
2400f26a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f26c:	e7bc      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f26e:	2301      	movs	r3, #1
2400f270:	e7ba      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f272:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f274:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f276:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f278:	e7b6      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400f27a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f27e:	e7b3      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400f280:	2340      	movs	r3, #64	; 0x40
2400f282:	e7b1      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400f284:	2380      	movs	r3, #128	; 0x80
2400f286:	e7af      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400f288:	f44f 7380 	mov.w	r3, #256	; 0x100
2400f28c:	e7ac      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400f28e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400f292:	e7a9      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400f294:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400f298:	e7a6      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400f29a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400f29e:	e7a3      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400f2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400f2a4:	e7a0      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f2a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f2aa:	e79d      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400f2ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400f2b0:	e79a      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400f2b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400f2b6:	e797      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400f2b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400f2bc:	e794      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400f2be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400f2c2:	e791      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400f2c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400f2c8:	e78e      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400f2ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400f2ce:	e78b      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400f2d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400f2d4:	e788      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400f2d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400f2da:	e785      	b.n	2400f1e8 <SDMMC_CmdBusWidth+0x40>
2400f2dc:	20000750 	.word	0x20000750
2400f2e0:	10624dd3 	.word	0x10624dd3
2400f2e4:	fffee0c0 	.word	0xfffee0c0
2400f2e8:	00200045 	.word	0x00200045
2400f2ec:	002000c5 	.word	0x002000c5
2400f2f0:	fdffe008 	.word	0xfdffe008

2400f2f4 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f2f4:	4a4d      	ldr	r2, [pc, #308]	; (2400f42c <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400f2f6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f2f8:	494d      	ldr	r1, [pc, #308]	; (2400f430 <SDMMC_CmdSendSCR+0x13c>)
{
2400f2fa:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f2fc:	4c4d      	ldr	r4, [pc, #308]	; (2400f434 <SDMMC_CmdSendSCR+0x140>)
2400f2fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f300:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f302:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f306:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f30a:	68c4      	ldr	r4, [r0, #12]
2400f30c:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f30e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f310:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f312:	f241 3188 	movw	r1, #5000	; 0x1388
2400f316:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f31a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f31c:	b14a      	cbz	r2, 2400f332 <SDMMC_CmdSendSCR+0x3e>
2400f31e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400f320:	4945      	ldr	r1, [pc, #276]	; (2400f438 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400f322:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f324:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f326:	420a      	tst	r2, r1
2400f328:	d001      	beq.n	2400f32e <SDMMC_CmdSendSCR+0x3a>
2400f32a:	0492      	lsls	r2, r2, #18
2400f32c:	d507      	bpl.n	2400f33e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400f32e:	1c5c      	adds	r4, r3, #1
2400f330:	d1f7      	bne.n	2400f322 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400f332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f336:	4618      	mov	r0, r3
2400f338:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f33c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f33e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f340:	075c      	lsls	r4, r3, #29
2400f342:	d43d      	bmi.n	2400f3c0 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f344:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f346:	f013 0301 	ands.w	r3, r3, #1
2400f34a:	d134      	bne.n	2400f3b6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f34c:	4b3b      	ldr	r3, [pc, #236]	; (2400f43c <SDMMC_CmdSendSCR+0x148>)
2400f34e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400f350:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f352:	b2db      	uxtb	r3, r3
2400f354:	2b33      	cmp	r3, #51	; 0x33
2400f356:	d131      	bne.n	2400f3bc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400f358:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400f35a:	4b39      	ldr	r3, [pc, #228]	; (2400f440 <SDMMC_CmdSendSCR+0x14c>)
2400f35c:	4013      	ands	r3, r2
2400f35e:	2b00      	cmp	r3, #0
2400f360:	d0e9      	beq.n	2400f336 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400f362:	2a00      	cmp	r2, #0
2400f364:	db30      	blt.n	2400f3c8 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400f366:	0051      	lsls	r1, r2, #1
2400f368:	d431      	bmi.n	2400f3ce <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400f36a:	0094      	lsls	r4, r2, #2
2400f36c:	d431      	bmi.n	2400f3d2 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400f36e:	00d0      	lsls	r0, r2, #3
2400f370:	d431      	bmi.n	2400f3d6 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400f372:	0111      	lsls	r1, r2, #4
2400f374:	d432      	bmi.n	2400f3dc <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400f376:	0154      	lsls	r4, r2, #5
2400f378:	d433      	bmi.n	2400f3e2 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400f37a:	01d0      	lsls	r0, r2, #7
2400f37c:	d434      	bmi.n	2400f3e8 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400f37e:	0211      	lsls	r1, r2, #8
2400f380:	d435      	bmi.n	2400f3ee <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400f382:	0254      	lsls	r4, r2, #9
2400f384:	d436      	bmi.n	2400f3f4 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400f386:	0290      	lsls	r0, r2, #10
2400f388:	d440      	bmi.n	2400f40c <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400f38a:	02d1      	lsls	r1, r2, #11
2400f38c:	d43b      	bmi.n	2400f406 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400f38e:	0354      	lsls	r4, r2, #13
2400f390:	d436      	bmi.n	2400f400 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400f392:	0390      	lsls	r0, r2, #14
2400f394:	d431      	bmi.n	2400f3fa <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400f396:	03d1      	lsls	r1, r2, #15
2400f398:	d444      	bmi.n	2400f424 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400f39a:	0414      	lsls	r4, r2, #16
2400f39c:	d43f      	bmi.n	2400f41e <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400f39e:	0450      	lsls	r0, r2, #17
2400f3a0:	d43a      	bmi.n	2400f418 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400f3a2:	0491      	lsls	r1, r2, #18
2400f3a4:	d435      	bmi.n	2400f412 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f3a6:	f012 0f08 	tst.w	r2, #8
2400f3aa:	bf14      	ite	ne
2400f3ac:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400f3b0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f3b4:	e7bf      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f3b6:	2201      	movs	r2, #1
2400f3b8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f3ba:	e7bc      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f3bc:	2301      	movs	r3, #1
2400f3be:	e7ba      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f3c0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f3c2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f3c4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f3c6:	e7b6      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400f3c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f3cc:	e7b3      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400f3ce:	2340      	movs	r3, #64	; 0x40
2400f3d0:	e7b1      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400f3d2:	2380      	movs	r3, #128	; 0x80
2400f3d4:	e7af      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400f3d6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400f3da:	e7ac      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400f3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
2400f3e0:	e7a9      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400f3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400f3e6:	e7a6      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400f3e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400f3ec:	e7a3      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400f3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400f3f2:	e7a0      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f3f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f3f8:	e79d      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400f3fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400f3fe:	e79a      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400f400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400f404:	e797      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400f406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400f40a:	e794      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400f40c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400f410:	e791      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400f412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400f416:	e78e      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400f418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400f41c:	e78b      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400f41e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400f422:	e788      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400f424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400f428:	e785      	b.n	2400f336 <SDMMC_CmdSendSCR+0x42>
2400f42a:	bf00      	nop
2400f42c:	20000750 	.word	0x20000750
2400f430:	fffee0c0 	.word	0xfffee0c0
2400f434:	10624dd3 	.word	0x10624dd3
2400f438:	00200045 	.word	0x00200045
2400f43c:	002000c5 	.word	0x002000c5
2400f440:	fdffe008 	.word	0xfdffe008

2400f444 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f444:	4a1a      	ldr	r2, [pc, #104]	; (2400f4b0 <SDMMC_CmdSendCID+0x6c>)
{
2400f446:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400f448:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f44a:	481a      	ldr	r0, [pc, #104]	; (2400f4b4 <SDMMC_CmdSendCID+0x70>)
{
2400f44c:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f44e:	4c1a      	ldr	r4, [pc, #104]	; (2400f4b8 <SDMMC_CmdSendCID+0x74>)
2400f450:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f452:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f454:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f458:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f45c:	68cc      	ldr	r4, [r1, #12]
2400f45e:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f460:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f462:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f464:	f241 3088 	movw	r0, #5000	; 0x1388
2400f468:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f46c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400f46e:	b14a      	cbz	r2, 2400f484 <SDMMC_CmdSendCID+0x40>
2400f470:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400f472:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400f474:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f476:	f012 0f45 	tst.w	r2, #69	; 0x45
2400f47a:	d001      	beq.n	2400f480 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400f47c:	0492      	lsls	r2, r2, #18
2400f47e:	d506      	bpl.n	2400f48e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400f480:	1c58      	adds	r0, r3, #1
2400f482:	d1f6      	bne.n	2400f472 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400f484:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400f488:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f48c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f48e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400f490:	075b      	lsls	r3, r3, #29
2400f492:	d409      	bmi.n	2400f4a8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f494:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400f496:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f49a:	bf14      	ite	ne
2400f49c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f49e:	4b07      	ldreq	r3, [pc, #28]	; (2400f4bc <SDMMC_CmdSendCID+0x78>)
2400f4a0:	638b      	str	r3, [r1, #56]	; 0x38
}
2400f4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f4a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f4a8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f4aa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f4ac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f4ae:	e7eb      	b.n	2400f488 <SDMMC_CmdSendCID+0x44>
2400f4b0:	20000750 	.word	0x20000750
2400f4b4:	fffee0c0 	.word	0xfffee0c0
2400f4b8:	10624dd3 	.word	0x10624dd3
2400f4bc:	002000c5 	.word	0x002000c5

2400f4c0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4c0:	4a1b      	ldr	r2, [pc, #108]	; (2400f530 <SDMMC_CmdSendCSD+0x70>)
{
2400f4c2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4c4:	4b1b      	ldr	r3, [pc, #108]	; (2400f534 <SDMMC_CmdSendCSD+0x74>)
2400f4c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f4c8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f4d0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400f4d4:	4818      	ldr	r0, [pc, #96]	; (2400f538 <SDMMC_CmdSendCSD+0x78>)
2400f4d6:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f4dc:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4de:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f4e2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f4e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f4e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400f4ec:	1e53      	subs	r3, r2, #1
2400f4ee:	b14a      	cbz	r2, 2400f504 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400f4f0:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400f4f4:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f4f6:	f012 0f45 	tst.w	r2, #69	; 0x45
2400f4fa:	d001      	beq.n	2400f500 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400f4fc:	0492      	lsls	r2, r2, #18
2400f4fe:	d504      	bpl.n	2400f50a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400f500:	1c59      	adds	r1, r3, #1
2400f502:	d1f5      	bne.n	2400f4f0 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400f504:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400f508:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f50a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400f50e:	075b      	lsls	r3, r3, #29
2400f510:	d409      	bmi.n	2400f526 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f512:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400f516:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f51a:	bf14      	ite	ne
2400f51c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f51e:	4b07      	ldreq	r3, [pc, #28]	; (2400f53c <SDMMC_CmdSendCSD+0x7c>)
2400f520:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400f524:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f526:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f528:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f52a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f52e:	4770      	bx	lr
2400f530:	20000750 	.word	0x20000750
2400f534:	10624dd3 	.word	0x10624dd3
2400f538:	fffee0c0 	.word	0xfffee0c0
2400f53c:	002000c5 	.word	0x002000c5

2400f540 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400f540:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f542:	4a27      	ldr	r2, [pc, #156]	; (2400f5e0 <SDMMC_CmdSetRelAdd+0xa0>)
{
2400f544:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400f546:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f548:	4c26      	ldr	r4, [pc, #152]	; (2400f5e4 <SDMMC_CmdSetRelAdd+0xa4>)
2400f54a:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f54c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f54e:	401c      	ands	r4, r3
2400f550:	f241 1303 	movw	r3, #4355	; 0x1103
2400f554:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f556:	4c24      	ldr	r4, [pc, #144]	; (2400f5e8 <SDMMC_CmdSetRelAdd+0xa8>)
2400f558:	fba4 4202 	umull	r4, r2, r4, r2
2400f55c:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f560:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400f562:	0a52      	lsrs	r2, r2, #9
2400f564:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400f568:	b14a      	cbz	r2, 2400f57e <SDMMC_CmdSetRelAdd+0x3e>
2400f56a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400f56c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f56e:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f570:	f012 0f45 	tst.w	r2, #69	; 0x45
2400f574:	d001      	beq.n	2400f57a <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400f576:	0492      	lsls	r2, r2, #18
2400f578:	d507      	bpl.n	2400f58a <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400f57a:	1c5c      	adds	r4, r3, #1
2400f57c:	d1f6      	bne.n	2400f56c <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400f57e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f582:	4618      	mov	r0, r3
2400f584:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f588:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f58a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f58c:	075c      	lsls	r4, r3, #29
2400f58e:	d41c      	bmi.n	2400f5ca <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f590:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f592:	f013 0301 	ands.w	r3, r3, #1
2400f596:	d113      	bne.n	2400f5c0 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400f598:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f59a:	b2db      	uxtb	r3, r3
2400f59c:	2b03      	cmp	r3, #3
2400f59e:	d112      	bne.n	2400f5c6 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f5a0:	4b12      	ldr	r3, [pc, #72]	; (2400f5ec <SDMMC_CmdSetRelAdd+0xac>)
2400f5a2:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400f5a4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400f5a6:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400f5aa:	d015      	beq.n	2400f5d8 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400f5ac:	0451      	lsls	r1, r2, #17
2400f5ae:	d410      	bmi.n	2400f5d2 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f5b0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400f5b4:	bf14      	ite	ne
2400f5b6:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400f5ba:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f5be:	e7e0      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f5c0:	2201      	movs	r2, #1
2400f5c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f5c4:	e7dd      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f5c6:	2301      	movs	r3, #1
2400f5c8:	e7db      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f5ca:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f5cc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f5ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f5d0:	e7d7      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f5d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f5d6:	e7d4      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400f5d8:	0c12      	lsrs	r2, r2, #16
2400f5da:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400f5dc:	e7d1      	b.n	2400f582 <SDMMC_CmdSetRelAdd+0x42>
2400f5de:	bf00      	nop
2400f5e0:	20000750 	.word	0x20000750
2400f5e4:	fffee0c0 	.word	0xfffee0c0
2400f5e8:	10624dd3 	.word	0x10624dd3
2400f5ec:	002000c5 	.word	0x002000c5

2400f5f0 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f5f0:	4a4c      	ldr	r2, [pc, #304]	; (2400f724 <SDMMC_CmdSendStatus+0x134>)
2400f5f2:	4b4d      	ldr	r3, [pc, #308]	; (2400f728 <SDMMC_CmdSendStatus+0x138>)
{
2400f5f4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f5f6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f5f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f5fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f5fe:	68c1      	ldr	r1, [r0, #12]
2400f600:	4c4a      	ldr	r4, [pc, #296]	; (2400f72c <SDMMC_CmdSendStatus+0x13c>)
2400f602:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f606:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f608:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f60a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f60e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f610:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f614:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f616:	b14a      	cbz	r2, 2400f62c <SDMMC_CmdSendStatus+0x3c>
2400f618:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400f61a:	4945      	ldr	r1, [pc, #276]	; (2400f730 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400f61c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f61e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f620:	420a      	tst	r2, r1
2400f622:	d001      	beq.n	2400f628 <SDMMC_CmdSendStatus+0x38>
2400f624:	0492      	lsls	r2, r2, #18
2400f626:	d507      	bpl.n	2400f638 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400f628:	1c5c      	adds	r4, r3, #1
2400f62a:	d1f7      	bne.n	2400f61c <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400f62c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f630:	4618      	mov	r0, r3
2400f632:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f636:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f638:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f63a:	075c      	lsls	r4, r3, #29
2400f63c:	d43d      	bmi.n	2400f6ba <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f63e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f640:	f013 0301 	ands.w	r3, r3, #1
2400f644:	d134      	bne.n	2400f6b0 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f646:	4b3b      	ldr	r3, [pc, #236]	; (2400f734 <SDMMC_CmdSendStatus+0x144>)
2400f648:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400f64a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f64c:	b2db      	uxtb	r3, r3
2400f64e:	2b0d      	cmp	r3, #13
2400f650:	d131      	bne.n	2400f6b6 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400f652:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400f654:	4b38      	ldr	r3, [pc, #224]	; (2400f738 <SDMMC_CmdSendStatus+0x148>)
2400f656:	4013      	ands	r3, r2
2400f658:	2b00      	cmp	r3, #0
2400f65a:	d0e9      	beq.n	2400f630 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400f65c:	2a00      	cmp	r2, #0
2400f65e:	db30      	blt.n	2400f6c2 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400f660:	0051      	lsls	r1, r2, #1
2400f662:	d431      	bmi.n	2400f6c8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400f664:	0094      	lsls	r4, r2, #2
2400f666:	d431      	bmi.n	2400f6cc <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400f668:	00d0      	lsls	r0, r2, #3
2400f66a:	d431      	bmi.n	2400f6d0 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400f66c:	0111      	lsls	r1, r2, #4
2400f66e:	d432      	bmi.n	2400f6d6 <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400f670:	0154      	lsls	r4, r2, #5
2400f672:	d433      	bmi.n	2400f6dc <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400f674:	01d0      	lsls	r0, r2, #7
2400f676:	d434      	bmi.n	2400f6e2 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400f678:	0211      	lsls	r1, r2, #8
2400f67a:	d435      	bmi.n	2400f6e8 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400f67c:	0254      	lsls	r4, r2, #9
2400f67e:	d436      	bmi.n	2400f6ee <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400f680:	0290      	lsls	r0, r2, #10
2400f682:	d440      	bmi.n	2400f706 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400f684:	02d1      	lsls	r1, r2, #11
2400f686:	d43b      	bmi.n	2400f700 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400f688:	0354      	lsls	r4, r2, #13
2400f68a:	d436      	bmi.n	2400f6fa <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400f68c:	0390      	lsls	r0, r2, #14
2400f68e:	d431      	bmi.n	2400f6f4 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400f690:	03d1      	lsls	r1, r2, #15
2400f692:	d444      	bmi.n	2400f71e <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400f694:	0414      	lsls	r4, r2, #16
2400f696:	d43f      	bmi.n	2400f718 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400f698:	0450      	lsls	r0, r2, #17
2400f69a:	d43a      	bmi.n	2400f712 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400f69c:	0491      	lsls	r1, r2, #18
2400f69e:	d435      	bmi.n	2400f70c <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f6a0:	f012 0f08 	tst.w	r2, #8
2400f6a4:	bf14      	ite	ne
2400f6a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400f6aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f6ae:	e7bf      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f6b0:	2201      	movs	r2, #1
2400f6b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f6b4:	e7bc      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f6b6:	2301      	movs	r3, #1
2400f6b8:	e7ba      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f6ba:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f6bc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f6be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f6c0:	e7b6      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400f6c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f6c6:	e7b3      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400f6c8:	2340      	movs	r3, #64	; 0x40
2400f6ca:	e7b1      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400f6cc:	2380      	movs	r3, #128	; 0x80
2400f6ce:	e7af      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400f6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
2400f6d4:	e7ac      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400f6d6:	f44f 7300 	mov.w	r3, #512	; 0x200
2400f6da:	e7a9      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400f6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400f6e0:	e7a6      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400f6e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400f6e6:	e7a3      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400f6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400f6ec:	e7a0      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f6ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f6f2:	e79d      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400f6f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400f6f8:	e79a      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400f6fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400f6fe:	e797      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400f700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400f704:	e794      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400f706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400f70a:	e791      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400f70c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400f710:	e78e      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400f712:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400f716:	e78b      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400f718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400f71c:	e788      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400f71e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400f722:	e785      	b.n	2400f630 <SDMMC_CmdSendStatus+0x40>
2400f724:	20000750 	.word	0x20000750
2400f728:	10624dd3 	.word	0x10624dd3
2400f72c:	fffee0c0 	.word	0xfffee0c0
2400f730:	00200045 	.word	0x00200045
2400f734:	002000c5 	.word	0x002000c5
2400f738:	fdffe008 	.word	0xfdffe008

2400f73c <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f73c:	4a4d      	ldr	r2, [pc, #308]	; (2400f874 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400f73e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f740:	494d      	ldr	r1, [pc, #308]	; (2400f878 <SDMMC_CmdStatusRegister+0x13c>)
{
2400f742:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f744:	4c4d      	ldr	r4, [pc, #308]	; (2400f87c <SDMMC_CmdStatusRegister+0x140>)
2400f746:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400f748:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f74a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f74e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f752:	68c4      	ldr	r4, [r0, #12]
2400f754:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f756:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f758:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400f75a:	f241 3188 	movw	r1, #5000	; 0x1388
2400f75e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400f762:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400f764:	b14a      	cbz	r2, 2400f77a <SDMMC_CmdStatusRegister+0x3e>
2400f766:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400f768:	4945      	ldr	r1, [pc, #276]	; (2400f880 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400f76a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400f76c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400f76e:	420a      	tst	r2, r1
2400f770:	d001      	beq.n	2400f776 <SDMMC_CmdStatusRegister+0x3a>
2400f772:	0492      	lsls	r2, r2, #18
2400f774:	d507      	bpl.n	2400f786 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400f776:	1c5c      	adds	r4, r3, #1
2400f778:	d1f7      	bne.n	2400f76a <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400f77a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400f77e:	4618      	mov	r0, r3
2400f780:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f784:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400f786:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f788:	075c      	lsls	r4, r3, #29
2400f78a:	d43d      	bmi.n	2400f808 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400f78c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400f78e:	f013 0301 	ands.w	r3, r3, #1
2400f792:	d134      	bne.n	2400f7fe <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400f794:	4b3b      	ldr	r3, [pc, #236]	; (2400f884 <SDMMC_CmdStatusRegister+0x148>)
2400f796:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400f798:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400f79a:	b2db      	uxtb	r3, r3
2400f79c:	2b0d      	cmp	r3, #13
2400f79e:	d131      	bne.n	2400f804 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400f7a0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400f7a2:	4b39      	ldr	r3, [pc, #228]	; (2400f888 <SDMMC_CmdStatusRegister+0x14c>)
2400f7a4:	4013      	ands	r3, r2
2400f7a6:	2b00      	cmp	r3, #0
2400f7a8:	d0e9      	beq.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400f7aa:	2a00      	cmp	r2, #0
2400f7ac:	db30      	blt.n	2400f810 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400f7ae:	0051      	lsls	r1, r2, #1
2400f7b0:	d431      	bmi.n	2400f816 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400f7b2:	0094      	lsls	r4, r2, #2
2400f7b4:	d431      	bmi.n	2400f81a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400f7b6:	00d0      	lsls	r0, r2, #3
2400f7b8:	d431      	bmi.n	2400f81e <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400f7ba:	0111      	lsls	r1, r2, #4
2400f7bc:	d432      	bmi.n	2400f824 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400f7be:	0154      	lsls	r4, r2, #5
2400f7c0:	d433      	bmi.n	2400f82a <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400f7c2:	01d0      	lsls	r0, r2, #7
2400f7c4:	d434      	bmi.n	2400f830 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400f7c6:	0211      	lsls	r1, r2, #8
2400f7c8:	d435      	bmi.n	2400f836 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400f7ca:	0254      	lsls	r4, r2, #9
2400f7cc:	d436      	bmi.n	2400f83c <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400f7ce:	0290      	lsls	r0, r2, #10
2400f7d0:	d440      	bmi.n	2400f854 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400f7d2:	02d1      	lsls	r1, r2, #11
2400f7d4:	d43b      	bmi.n	2400f84e <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400f7d6:	0354      	lsls	r4, r2, #13
2400f7d8:	d436      	bmi.n	2400f848 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400f7da:	0390      	lsls	r0, r2, #14
2400f7dc:	d431      	bmi.n	2400f842 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400f7de:	03d1      	lsls	r1, r2, #15
2400f7e0:	d444      	bmi.n	2400f86c <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400f7e2:	0414      	lsls	r4, r2, #16
2400f7e4:	d43f      	bmi.n	2400f866 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400f7e6:	0450      	lsls	r0, r2, #17
2400f7e8:	d43a      	bmi.n	2400f860 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400f7ea:	0491      	lsls	r1, r2, #18
2400f7ec:	d435      	bmi.n	2400f85a <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400f7ee:	f012 0f08 	tst.w	r2, #8
2400f7f2:	bf14      	ite	ne
2400f7f4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400f7f8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400f7fc:	e7bf      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400f7fe:	2201      	movs	r2, #1
2400f800:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f802:	e7bc      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400f804:	2301      	movs	r3, #1
2400f806:	e7ba      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f808:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f80a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400f80c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400f80e:	e7b6      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400f810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400f814:	e7b3      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400f816:	2340      	movs	r3, #64	; 0x40
2400f818:	e7b1      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400f81a:	2380      	movs	r3, #128	; 0x80
2400f81c:	e7af      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400f81e:	f44f 7380 	mov.w	r3, #256	; 0x100
2400f822:	e7ac      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400f824:	f44f 7300 	mov.w	r3, #512	; 0x200
2400f828:	e7a9      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400f82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400f82e:	e7a6      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400f830:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400f834:	e7a3      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400f836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400f83a:	e7a0      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400f83c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400f840:	e79d      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400f842:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400f846:	e79a      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400f848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400f84c:	e797      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400f84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400f852:	e794      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400f854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400f858:	e791      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400f85a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400f85e:	e78e      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400f860:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400f864:	e78b      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400f866:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400f86a:	e788      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400f86c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400f870:	e785      	b.n	2400f77e <SDMMC_CmdStatusRegister+0x42>
2400f872:	bf00      	nop
2400f874:	20000750 	.word	0x20000750
2400f878:	fffee0c0 	.word	0xfffee0c0
2400f87c:	10624dd3 	.word	0x10624dd3
2400f880:	00200045 	.word	0x00200045
2400f884:	002000c5 	.word	0x002000c5
2400f888:	fdffe008 	.word	0xfdffe008

2400f88c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400f88c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400f88e:	4903      	ldr	r1, [pc, #12]	; (2400f89c <MX_FATFS_Init+0x10>)
2400f890:	4803      	ldr	r0, [pc, #12]	; (2400f8a0 <MX_FATFS_Init+0x14>)
2400f892:	f003 f885 	bl	240129a0 <FATFS_LinkDriver>
2400f896:	4b03      	ldr	r3, [pc, #12]	; (2400f8a4 <MX_FATFS_Init+0x18>)
2400f898:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400f89a:	bd08      	pop	{r3, pc}
2400f89c:	2001e718 	.word	0x2001e718
2400f8a0:	2401d0a4 	.word	0x2401d0a4
2400f8a4:	2001e71c 	.word	0x2001e71c

2400f8a8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400f8a8:	2000      	movs	r0, #0
2400f8aa:	4770      	bx	lr

2400f8ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400f8ac:	b510      	push	{r4, lr}
2400f8ae:	4694      	mov	ip, r2
2400f8b0:	b082      	sub	sp, #8
2400f8b2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400f8b4:	460a      	mov	r2, r1
2400f8b6:	4663      	mov	r3, ip
2400f8b8:	4601      	mov	r1, r0
2400f8ba:	9400      	str	r4, [sp, #0]
2400f8bc:	4803      	ldr	r0, [pc, #12]	; (2400f8cc <BSP_SD_ReadBlocks+0x20>)
2400f8be:	f7fd f8dd 	bl	2400ca7c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400f8c2:	3800      	subs	r0, #0
2400f8c4:	bf18      	it	ne
2400f8c6:	2001      	movne	r0, #1
2400f8c8:	b002      	add	sp, #8
2400f8ca:	bd10      	pop	{r4, pc}
2400f8cc:	2001df94 	.word	0x2001df94

2400f8d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400f8d0:	b510      	push	{r4, lr}
2400f8d2:	4694      	mov	ip, r2
2400f8d4:	b082      	sub	sp, #8
2400f8d6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400f8d8:	460a      	mov	r2, r1
2400f8da:	4663      	mov	r3, ip
2400f8dc:	4601      	mov	r1, r0
2400f8de:	9400      	str	r4, [sp, #0]
2400f8e0:	4803      	ldr	r0, [pc, #12]	; (2400f8f0 <BSP_SD_WriteBlocks+0x20>)
2400f8e2:	f7fd f9d3 	bl	2400cc8c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400f8e6:	3800      	subs	r0, #0
2400f8e8:	bf18      	it	ne
2400f8ea:	2001      	movne	r0, #1
2400f8ec:	b002      	add	sp, #8
2400f8ee:	bd10      	pop	{r4, pc}
2400f8f0:	2001df94 	.word	0x2001df94

2400f8f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400f8f4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400f8f6:	4803      	ldr	r0, [pc, #12]	; (2400f904 <BSP_SD_GetCardState+0x10>)
2400f8f8:	f7fd fe36 	bl	2400d568 <HAL_SD_GetCardState>
}
2400f8fc:	3804      	subs	r0, #4
2400f8fe:	bf18      	it	ne
2400f900:	2001      	movne	r0, #1
2400f902:	bd08      	pop	{r3, pc}
2400f904:	2001df94 	.word	0x2001df94

2400f908 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400f908:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400f90a:	4801      	ldr	r0, [pc, #4]	; (2400f910 <BSP_SD_GetCardInfo+0x8>)
2400f90c:	f7fd bcdc 	b.w	2400d2c8 <HAL_SD_GetCardInfo>
2400f910:	2001df94 	.word	0x2001df94

2400f914 <BSP_SD_WriteCpltCallback>:
2400f914:	4770      	bx	lr
2400f916:	bf00      	nop

2400f918 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
2400f918:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
2400f91a:	f7ff fffb 	bl	2400f914 <BSP_SD_WriteCpltCallback>
}
2400f91e:	bd08      	pop	{r3, pc}

2400f920 <BSP_SD_ReadCpltCallback>:
2400f920:	4770      	bx	lr
2400f922:	bf00      	nop

2400f924 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
2400f924:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
2400f926:	f7ff fffb 	bl	2400f920 <BSP_SD_ReadCpltCallback>
}
2400f92a:	bd08      	pop	{r3, pc}

2400f92c <BSP_SD_Init>:
{
2400f92c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400f92e:	f7f4 fee5 	bl	240046fc <BSP_SD_IsDetected>
2400f932:	2801      	cmp	r0, #1
2400f934:	d001      	beq.n	2400f93a <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400f936:	2002      	movs	r0, #2
}
2400f938:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400f93a:	4807      	ldr	r0, [pc, #28]	; (2400f958 <BSP_SD_Init+0x2c>)
2400f93c:	f7fd fdac 	bl	2400d498 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400f940:	2800      	cmp	r0, #0
2400f942:	d1f9      	bne.n	2400f938 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400f944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400f948:	4803      	ldr	r0, [pc, #12]	; (2400f958 <BSP_SD_Init+0x2c>)
2400f94a:	f7fd fcd1 	bl	2400d2f0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400f94e:	3800      	subs	r0, #0
2400f950:	bf18      	it	ne
2400f952:	2001      	movne	r0, #1
}
2400f954:	bd08      	pop	{r3, pc}
2400f956:	bf00      	nop
2400f958:	2001df94 	.word	0x2001df94

2400f95c <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
2400f95c:	2102      	movs	r1, #2
2400f95e:	4804      	ldr	r0, [pc, #16]	; (2400f970 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
2400f960:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
2400f962:	f7f8 fc23 	bl	240081ac <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
2400f966:	fab0 f080 	clz	r0, r0
2400f96a:	0940      	lsrs	r0, r0, #5
2400f96c:	bd08      	pop	{r3, pc}
2400f96e:	bf00      	nop
2400f970:	58020000 	.word	0x58020000

2400f974 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400f974:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400f976:	4c0a      	ldr	r4, [pc, #40]	; (2400f9a0 <SD_initialize+0x2c>)
2400f978:	2501      	movs	r5, #1
2400f97a:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400f97c:	f7ff ffd6 	bl	2400f92c <BSP_SD_Init>
2400f980:	b108      	cbz	r0, 2400f986 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400f982:	7820      	ldrb	r0, [r4, #0]
}
2400f984:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400f986:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400f988:	f7ff ffb4 	bl	2400f8f4 <BSP_SD_GetCardState>
2400f98c:	b918      	cbnz	r0, 2400f996 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400f98e:	7823      	ldrb	r3, [r4, #0]
2400f990:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400f994:	7023      	strb	r3, [r4, #0]
  return Stat;
2400f996:	7823      	ldrb	r3, [r4, #0]
2400f998:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400f99a:	7023      	strb	r3, [r4, #0]
  return Stat;
2400f99c:	7820      	ldrb	r0, [r4, #0]
}
2400f99e:	bd38      	pop	{r3, r4, r5, pc}
2400f9a0:	20000760 	.word	0x20000760

2400f9a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400f9a4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400f9a6:	2301      	movs	r3, #1
2400f9a8:	4c05      	ldr	r4, [pc, #20]	; (2400f9c0 <SD_status+0x1c>)
2400f9aa:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400f9ac:	f7ff ffa2 	bl	2400f8f4 <BSP_SD_GetCardState>
2400f9b0:	b918      	cbnz	r0, 2400f9ba <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400f9b2:	7823      	ldrb	r3, [r4, #0]
2400f9b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400f9b8:	7023      	strb	r3, [r4, #0]
  return Stat;
2400f9ba:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400f9bc:	bd10      	pop	{r4, pc}
2400f9be:	bf00      	nop
2400f9c0:	20000760 	.word	0x20000760

2400f9c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400f9c4:	b508      	push	{r3, lr}
2400f9c6:	4608      	mov	r0, r1
2400f9c8:	4611      	mov	r1, r2
2400f9ca:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400f9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400f9d0:	f7ff ff6c 	bl	2400f8ac <BSP_SD_ReadBlocks>
2400f9d4:	b108      	cbz	r0, 2400f9da <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400f9d6:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400f9d8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400f9da:	f7ff ff8b 	bl	2400f8f4 <BSP_SD_GetCardState>
2400f9de:	2800      	cmp	r0, #0
2400f9e0:	d0fa      	beq.n	2400f9d8 <SD_read+0x14>
2400f9e2:	f7ff ff87 	bl	2400f8f4 <BSP_SD_GetCardState>
2400f9e6:	2800      	cmp	r0, #0
2400f9e8:	d1f7      	bne.n	2400f9da <SD_read+0x16>
2400f9ea:	e7f5      	b.n	2400f9d8 <SD_read+0x14>

2400f9ec <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400f9ec:	4b18      	ldr	r3, [pc, #96]	; (2400fa50 <SD_ioctl+0x64>)
{
2400f9ee:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400f9f0:	7818      	ldrb	r0, [r3, #0]
{
2400f9f2:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400f9f4:	f010 0401 	ands.w	r4, r0, #1
2400f9f8:	d106      	bne.n	2400fa08 <SD_ioctl+0x1c>
2400f9fa:	4615      	mov	r5, r2

  switch (cmd)
2400f9fc:	2903      	cmp	r1, #3
2400f9fe:	d824      	bhi.n	2400fa4a <SD_ioctl+0x5e>
2400fa00:	e8df f001 	tbb	[pc, r1]
2400fa04:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400fa08:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400fa0a:	4620      	mov	r0, r4
2400fa0c:	b00b      	add	sp, #44	; 0x2c
2400fa0e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400fa10:	460c      	mov	r4, r1
}
2400fa12:	4620      	mov	r0, r4
2400fa14:	b00b      	add	sp, #44	; 0x2c
2400fa16:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400fa18:	a801      	add	r0, sp, #4
2400fa1a:	f7ff ff75 	bl	2400f908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400fa1e:	9b07      	ldr	r3, [sp, #28]
}
2400fa20:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400fa22:	602b      	str	r3, [r5, #0]
}
2400fa24:	b00b      	add	sp, #44	; 0x2c
2400fa26:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400fa28:	a801      	add	r0, sp, #4
2400fa2a:	f7ff ff6d 	bl	2400f908 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400fa2e:	9b08      	ldr	r3, [sp, #32]
}
2400fa30:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400fa32:	802b      	strh	r3, [r5, #0]
}
2400fa34:	b00b      	add	sp, #44	; 0x2c
2400fa36:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400fa38:	a801      	add	r0, sp, #4
2400fa3a:	f7ff ff65 	bl	2400f908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400fa3e:	9b08      	ldr	r3, [sp, #32]
}
2400fa40:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400fa42:	0a5b      	lsrs	r3, r3, #9
2400fa44:	602b      	str	r3, [r5, #0]
}
2400fa46:	b00b      	add	sp, #44	; 0x2c
2400fa48:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400fa4a:	2404      	movs	r4, #4
2400fa4c:	e7dd      	b.n	2400fa0a <SD_ioctl+0x1e>
2400fa4e:	bf00      	nop
2400fa50:	20000760 	.word	0x20000760

2400fa54 <SD_write>:
{
2400fa54:	b508      	push	{r3, lr}
2400fa56:	4608      	mov	r0, r1
2400fa58:	4611      	mov	r1, r2
2400fa5a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400fa5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400fa60:	f7ff ff36 	bl	2400f8d0 <BSP_SD_WriteBlocks>
2400fa64:	b108      	cbz	r0, 2400fa6a <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400fa66:	2001      	movs	r0, #1
}
2400fa68:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400fa6a:	f7ff ff43 	bl	2400f8f4 <BSP_SD_GetCardState>
2400fa6e:	2800      	cmp	r0, #0
2400fa70:	d0fa      	beq.n	2400fa68 <SD_write+0x14>
2400fa72:	f7ff ff3f 	bl	2400f8f4 <BSP_SD_GetCardState>
2400fa76:	2800      	cmp	r0, #0
2400fa78:	d1f7      	bne.n	2400fa6a <SD_write+0x16>
2400fa7a:	e7f5      	b.n	2400fa68 <SD_write+0x14>

2400fa7c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400fa7c:	4b03      	ldr	r3, [pc, #12]	; (2400fa8c <disk_status+0x10>)
2400fa7e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400fa82:	4403      	add	r3, r0
2400fa84:	6852      	ldr	r2, [r2, #4]
2400fa86:	7a18      	ldrb	r0, [r3, #8]
2400fa88:	6853      	ldr	r3, [r2, #4]
2400fa8a:	4718      	bx	r3
2400fa8c:	2001e948 	.word	0x2001e948

2400fa90 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400fa90:	4b07      	ldr	r3, [pc, #28]	; (2400fab0 <disk_initialize+0x20>)
2400fa92:	5c1a      	ldrb	r2, [r3, r0]
2400fa94:	b952      	cbnz	r2, 2400faac <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400fa96:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400fa9a:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400fa9c:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400faa0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400faa2:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400faa6:	7a08      	ldrb	r0, [r1, #8]
2400faa8:	6813      	ldr	r3, [r2, #0]
2400faaa:	4718      	bx	r3
  }
  return stat;
}
2400faac:	2000      	movs	r0, #0
2400faae:	4770      	bx	lr
2400fab0:	2001e948 	.word	0x2001e948

2400fab4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400fab4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400fab6:	4c05      	ldr	r4, [pc, #20]	; (2400facc <disk_read+0x18>)
2400fab8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400fabc:	4404      	add	r4, r0
2400fabe:	686d      	ldr	r5, [r5, #4]
2400fac0:	7a20      	ldrb	r0, [r4, #8]
2400fac2:	68ac      	ldr	r4, [r5, #8]
2400fac4:	46a4      	mov	ip, r4
  return res;
}
2400fac6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400fac8:	4760      	bx	ip
2400faca:	bf00      	nop
2400facc:	2001e948 	.word	0x2001e948

2400fad0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400fad0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400fad2:	4c05      	ldr	r4, [pc, #20]	; (2400fae8 <disk_write+0x18>)
2400fad4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400fad8:	4404      	add	r4, r0
2400fada:	686d      	ldr	r5, [r5, #4]
2400fadc:	7a20      	ldrb	r0, [r4, #8]
2400fade:	68ec      	ldr	r4, [r5, #12]
2400fae0:	46a4      	mov	ip, r4
  return res;
}
2400fae2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400fae4:	4760      	bx	ip
2400fae6:	bf00      	nop
2400fae8:	2001e948 	.word	0x2001e948

2400faec <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400faec:	4b04      	ldr	r3, [pc, #16]	; (2400fb00 <disk_ioctl+0x14>)
2400faee:	eb03 0c00 	add.w	ip, r3, r0
2400faf2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400faf6:	685b      	ldr	r3, [r3, #4]
2400faf8:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400fafc:	691b      	ldr	r3, [r3, #16]
2400fafe:	4718      	bx	r3
2400fb00:	2001e948 	.word	0x2001e948

2400fb04 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400fb04:	4b26      	ldr	r3, [pc, #152]	; (2400fba0 <inc_lock+0x9c>)
{
2400fb06:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400fb08:	681a      	ldr	r2, [r3, #0]
2400fb0a:	6805      	ldr	r5, [r0, #0]
2400fb0c:	4295      	cmp	r5, r2
2400fb0e:	d01b      	beq.n	2400fb48 <inc_lock+0x44>
2400fb10:	691c      	ldr	r4, [r3, #16]
2400fb12:	42ac      	cmp	r4, r5
2400fb14:	d006      	beq.n	2400fb24 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400fb16:	b30a      	cbz	r2, 2400fb5c <inc_lock+0x58>
2400fb18:	2c00      	cmp	r4, #0
2400fb1a:	d036      	beq.n	2400fb8a <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400fb1c:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400fb1e:	4620      	mov	r0, r4
2400fb20:	bcf0      	pop	{r4, r5, r6, r7}
2400fb22:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400fb24:	695e      	ldr	r6, [r3, #20]
2400fb26:	6887      	ldr	r7, [r0, #8]
2400fb28:	42be      	cmp	r6, r7
2400fb2a:	d1f4      	bne.n	2400fb16 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400fb2c:	699e      	ldr	r6, [r3, #24]
2400fb2e:	6947      	ldr	r7, [r0, #20]
2400fb30:	42be      	cmp	r6, r7
2400fb32:	d1f0      	bne.n	2400fb16 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400fb34:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400fb36:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400fb3a:	bb49      	cbnz	r1, 2400fb90 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400fb3c:	0111      	lsls	r1, r2, #4
	return i + 1;
2400fb3e:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400fb40:	8982      	ldrh	r2, [r0, #12]
2400fb42:	3201      	adds	r2, #1
2400fb44:	b292      	uxth	r2, r2
2400fb46:	e01b      	b.n	2400fb80 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
2400fb48:	6884      	ldr	r4, [r0, #8]
2400fb4a:	685e      	ldr	r6, [r3, #4]
2400fb4c:	42a6      	cmp	r6, r4
2400fb4e:	d1df      	bne.n	2400fb10 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400fb50:	689c      	ldr	r4, [r3, #8]
2400fb52:	6946      	ldr	r6, [r0, #20]
2400fb54:	42a6      	cmp	r6, r4
2400fb56:	d1db      	bne.n	2400fb10 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400fb58:	2200      	movs	r2, #0
2400fb5a:	e7ec      	b.n	2400fb36 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400fb5c:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400fb5e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400fb60:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400fb64:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400fb68:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400fb6a:	6945      	ldr	r5, [r0, #20]
2400fb6c:	6880      	ldr	r0, [r0, #8]
2400fb6e:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
2400fb72:	f04f 0000 	mov.w	r0, #0
2400fb76:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400fb78:	bf14      	ite	ne
2400fb7a:	f44f 7280 	movne.w	r2, #256	; 0x100
2400fb7e:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400fb80:	440b      	add	r3, r1
}
2400fb82:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400fb84:	819a      	strh	r2, [r3, #12]
}
2400fb86:	bcf0      	pop	{r4, r5, r6, r7}
2400fb88:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400fb8a:	2402      	movs	r4, #2
2400fb8c:	2201      	movs	r2, #1
2400fb8e:	e7e6      	b.n	2400fb5e <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400fb90:	8980      	ldrh	r0, [r0, #12]
2400fb92:	0111      	lsls	r1, r2, #4
2400fb94:	2800      	cmp	r0, #0
2400fb96:	d1c1      	bne.n	2400fb1c <inc_lock+0x18>
	return i + 1;
2400fb98:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400fb9a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400fb9e:	e7ef      	b.n	2400fb80 <inc_lock+0x7c>
2400fba0:	2001e724 	.word	0x2001e724

2400fba4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400fba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400fba8:	440a      	add	r2, r1
2400fbaa:	460d      	mov	r5, r1
2400fbac:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fbae:	4f37      	ldr	r7, [pc, #220]	; (2400fc8c <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400fbb0:	42aa      	cmp	r2, r5
2400fbb2:	d012      	beq.n	2400fbda <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fbb4:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fbb8:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fbbc:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fbc0:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fbc4:	2919      	cmp	r1, #25
2400fbc6:	d9f3      	bls.n	2400fbb0 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fbc8:	2c7f      	cmp	r4, #127	; 0x7f
2400fbca:	bf88      	it	hi
2400fbcc:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400fbd0:	2c00      	cmp	r4, #0
2400fbd2:	d1ed      	bne.n	2400fbb0 <pattern_matching+0xc>
2400fbd4:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400fbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400fbda:	1e1f      	subs	r7, r3, #0
2400fbdc:	f896 8000 	ldrb.w	r8, [r6]
2400fbe0:	bf18      	it	ne
2400fbe2:	2701      	movne	r7, #1
2400fbe4:	f1b8 0f00 	cmp.w	r8, #0
2400fbe8:	d100      	bne.n	2400fbec <pattern_matching+0x48>
2400fbea:	bb8f      	cbnz	r7, 2400fc50 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fbec:	4c27      	ldr	r4, [pc, #156]	; (2400fc8c <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400fbee:	4630      	mov	r0, r6
{
2400fbf0:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400fbf2:	46a9      	mov	r9, r5
2400fbf4:	e010      	b.n	2400fc18 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fbf6:	3a20      	subs	r2, #32
2400fbf8:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fbfa:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fbfe:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fc02:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fc04:	f1bc 0f19 	cmp.w	ip, #25
2400fc08:	d815      	bhi.n	2400fc36 <pattern_matching+0x92>
2400fc0a:	3b20      	subs	r3, #32
2400fc0c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400fc0e:	4293      	cmp	r3, r2
2400fc10:	d118      	bne.n	2400fc44 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400fc12:	b1eb      	cbz	r3, 2400fc50 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400fc14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400fc18:	2b3f      	cmp	r3, #63	; 0x3f
2400fc1a:	d01c      	beq.n	2400fc56 <pattern_matching+0xb2>
2400fc1c:	2b2a      	cmp	r3, #42	; 0x2a
2400fc1e:	d01a      	beq.n	2400fc56 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fc20:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fc24:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fc26:	2919      	cmp	r1, #25
2400fc28:	d9e5      	bls.n	2400fbf6 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fc2a:	2a7f      	cmp	r2, #127	; 0x7f
2400fc2c:	d9e5      	bls.n	2400fbfa <pattern_matching+0x56>
2400fc2e:	4423      	add	r3, r4
2400fc30:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400fc34:	e7e1      	b.n	2400fbfa <pattern_matching+0x56>
2400fc36:	2b7f      	cmp	r3, #127	; 0x7f
2400fc38:	d9e9      	bls.n	2400fc0e <pattern_matching+0x6a>
2400fc3a:	4421      	add	r1, r4
2400fc3c:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400fc40:	4293      	cmp	r3, r2
2400fc42:	d0e6      	beq.n	2400fc12 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fc44:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400fc46:	2b00      	cmp	r3, #0
2400fc48:	d0c4      	beq.n	2400fbd4 <pattern_matching+0x30>
2400fc4a:	2f00      	cmp	r7, #0
2400fc4c:	d1cf      	bne.n	2400fbee <pattern_matching+0x4a>
2400fc4e:	e7c1      	b.n	2400fbd4 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400fc50:	2001      	movs	r0, #1
}
2400fc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400fc56:	4601      	mov	r1, r0
				nm = nx = 0;
2400fc58:	2300      	movs	r3, #0
2400fc5a:	f811 cb01 	ldrb.w	ip, [r1], #1
2400fc5e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400fc60:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400fc64:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400fc66:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400fc6a:	bf0c      	ite	eq
2400fc6c:	3201      	addeq	r2, #1
2400fc6e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400fc70:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400fc74:	d0f4      	beq.n	2400fc60 <pattern_matching+0xbc>
2400fc76:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400fc7a:	d0f1      	beq.n	2400fc60 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400fc7c:	4649      	mov	r1, r9
2400fc7e:	f7ff ff91 	bl	2400fba4 <pattern_matching>
2400fc82:	2800      	cmp	r0, #0
2400fc84:	d1e4      	bne.n	2400fc50 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400fc86:	f899 3000 	ldrb.w	r3, [r9]
2400fc8a:	e7db      	b.n	2400fc44 <pattern_matching+0xa0>
2400fc8c:	2401d0cc 	.word	0x2401d0cc

2400fc90 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400fc90:	2300      	movs	r3, #0
{
2400fc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400fc96:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400fc9a:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400fc9c:	69c2      	ldr	r2, [r0, #28]
2400fc9e:	2a00      	cmp	r2, #0
2400fca0:	d063      	beq.n	2400fd6a <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400fca2:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400fca4:	4604      	mov	r4, r0
2400fca6:	460d      	mov	r5, r1
2400fca8:	3201      	adds	r2, #1
2400fcaa:	d01f      	beq.n	2400fcec <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400fcac:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400fcb0:	8818      	ldrh	r0, [r3, #0]
2400fcb2:	2800      	cmp	r0, #0
2400fcb4:	d063      	beq.n	2400fd7e <get_fileinfo+0xee>
2400fcb6:	f101 0715 	add.w	r7, r1, #21
2400fcba:	2601      	movs	r6, #1
2400fcbc:	e000      	b.n	2400fcc0 <get_fileinfo+0x30>
2400fcbe:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400fcc0:	2100      	movs	r1, #0
2400fcc2:	f002 fe91 	bl	240129e8 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400fcc6:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400fcc8:	2800      	cmp	r0, #0
2400fcca:	d058      	beq.n	2400fd7e <get_fileinfo+0xee>
2400fccc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400fcd0:	d055      	beq.n	2400fd7e <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400fcd2:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400fcd6:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400fcda:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400fcde:	2800      	cmp	r0, #0
2400fce0:	d1ed      	bne.n	2400fcbe <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400fce2:	442e      	add	r6, r5
2400fce4:	2300      	movs	r3, #0
2400fce6:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400fce8:	7da8      	ldrb	r0, [r5, #22]
2400fcea:	e000      	b.n	2400fcee <get_fileinfo+0x5e>
2400fcec:	4618      	mov	r0, r3
	i = j = 0;
2400fcee:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400fcf2:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400fcf4:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400fcf6:	6a21      	ldr	r1, [r4, #32]
2400fcf8:	5c8b      	ldrb	r3, [r1, r2]
2400fcfa:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400fcfc:	2b20      	cmp	r3, #32
2400fcfe:	d01b      	beq.n	2400fd38 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400fd00:	2b05      	cmp	r3, #5
2400fd02:	bf08      	it	eq
2400fd04:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400fd06:	2a09      	cmp	r2, #9
2400fd08:	d031      	beq.n	2400fd6e <get_fileinfo+0xde>
		fno->altname[j] = c;
2400fd0a:	eb05 010c 	add.w	r1, r5, ip
2400fd0e:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400fd10:	b980      	cbnz	r0, 2400fd34 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400fd12:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400fd16:	2e19      	cmp	r6, #25
2400fd18:	d80b      	bhi.n	2400fd32 <get_fileinfo+0xa2>
2400fd1a:	6a26      	ldr	r6, [r4, #32]
2400fd1c:	2a08      	cmp	r2, #8
2400fd1e:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400fd22:	bf8c      	ite	hi
2400fd24:	2610      	movhi	r6, #16
2400fd26:	2608      	movls	r6, #8
2400fd28:	ea1e 0f06 	tst.w	lr, r6
2400fd2c:	d001      	beq.n	2400fd32 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400fd2e:	3320      	adds	r3, #32
2400fd30:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400fd32:	758b      	strb	r3, [r1, #22]
		j++;
2400fd34:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400fd38:	2a0b      	cmp	r2, #11
2400fd3a:	d1dc      	bne.n	2400fcf6 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400fd3c:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400fd40:	b928      	cbnz	r0, 2400fd4e <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400fd42:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400fd44:	6a23      	ldr	r3, [r4, #32]
2400fd46:	7b1b      	ldrb	r3, [r3, #12]
2400fd48:	2b00      	cmp	r3, #0
2400fd4a:	bf08      	it	eq
2400fd4c:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400fd4e:	2300      	movs	r3, #0
2400fd50:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400fd52:	6a23      	ldr	r3, [r4, #32]
2400fd54:	7adb      	ldrb	r3, [r3, #11]
2400fd56:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400fd58:	6a23      	ldr	r3, [r4, #32]
2400fd5a:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400fd5c:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400fd5e:	6a23      	ldr	r3, [r4, #32]
2400fd60:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400fd64:	0c1a      	lsrs	r2, r3, #16
2400fd66:	80eb      	strh	r3, [r5, #6]
2400fd68:	80aa      	strh	r2, [r5, #4]
}
2400fd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400fd6e:	eb05 010c 	add.w	r1, r5, ip
2400fd72:	b900      	cbnz	r0, 2400fd76 <get_fileinfo+0xe6>
2400fd74:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400fd76:	f10c 0c01 	add.w	ip, ip, #1
2400fd7a:	724f      	strb	r7, [r1, #9]
2400fd7c:	e7c5      	b.n	2400fd0a <get_fileinfo+0x7a>
			i = j = 0;
2400fd7e:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400fd80:	2300      	movs	r3, #0
2400fd82:	442e      	add	r6, r5
2400fd84:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400fd86:	7da8      	ldrb	r0, [r5, #22]
2400fd88:	e7b1      	b.n	2400fcee <get_fileinfo+0x5e>
2400fd8a:	bf00      	nop

2400fd8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400fd8c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400fd8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400fd92:	2300      	movs	r3, #0
{
2400fd94:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fd96:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400fd98:	70c3      	strb	r3, [r0, #3]
2400fd9a:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fd9c:	d00c      	beq.n	2400fdb8 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400fd9e:	460d      	mov	r5, r1
2400fda0:	460a      	mov	r2, r1
2400fda2:	2301      	movs	r3, #1
2400fda4:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400fda8:	7840      	ldrb	r0, [r0, #1]
2400fdaa:	f7ff fe83 	bl	2400fab4 <disk_read>
2400fdae:	b110      	cbz	r0, 2400fdb6 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400fdb0:	2004      	movs	r0, #4
			fs->winsect = sector;
2400fdb2:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400fdb4:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400fdb6:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400fdb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400fdbc:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400fdc0:	429a      	cmp	r2, r3
2400fdc2:	d11a      	bne.n	2400fdfa <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400fdc4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400fdc8:	2be9      	cmp	r3, #233	; 0xe9
2400fdca:	d007      	beq.n	2400fddc <check_fs+0x50>
2400fdcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400fdce:	4a0d      	ldr	r2, [pc, #52]	; (2400fe04 <check_fs+0x78>)
2400fdd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400fdd4:	4293      	cmp	r3, r2
2400fdd6:	d001      	beq.n	2400fddc <check_fs+0x50>
	return 2;
2400fdd8:	2002      	movs	r0, #2
}
2400fdda:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400fddc:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400fde0:	4a09      	ldr	r2, [pc, #36]	; (2400fe08 <check_fs+0x7c>)
2400fde2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400fde6:	4293      	cmp	r3, r2
2400fde8:	d009      	beq.n	2400fdfe <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400fdea:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400fdee:	4b07      	ldr	r3, [pc, #28]	; (2400fe0c <check_fs+0x80>)
2400fdf0:	4298      	cmp	r0, r3
2400fdf2:	bf14      	ite	ne
2400fdf4:	2002      	movne	r0, #2
2400fdf6:	2000      	moveq	r0, #0
}
2400fdf8:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400fdfa:	2003      	movs	r0, #3
}
2400fdfc:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400fdfe:	2000      	movs	r0, #0
}
2400fe00:	bd70      	pop	{r4, r5, r6, pc}
2400fe02:	bf00      	nop
2400fe04:	009000eb 	.word	0x009000eb
2400fe08:	00544146 	.word	0x00544146
2400fe0c:	33544146 	.word	0x33544146

2400fe10 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400fe10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fe12:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400fe14:	b083      	sub	sp, #12
2400fe16:	4604      	mov	r4, r0
2400fe18:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fe1a:	b973      	cbnz	r3, 2400fe3a <move_window.part.0+0x2a>
2400fe1c:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400fe20:	2301      	movs	r3, #1
2400fe22:	462a      	mov	r2, r5
2400fe24:	7860      	ldrb	r0, [r4, #1]
2400fe26:	f7ff fe45 	bl	2400fab4 <disk_read>
2400fe2a:	b910      	cbnz	r0, 2400fe32 <move_window.part.0+0x22>
			fs->winsect = sector;
2400fe2c:	6325      	str	r5, [r4, #48]	; 0x30
}
2400fe2e:	b003      	add	sp, #12
2400fe30:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400fe32:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400fe34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400fe38:	e7f8      	b.n	2400fe2c <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400fe3a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fe3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400fe40:	2301      	movs	r3, #1
2400fe42:	7840      	ldrb	r0, [r0, #1]
2400fe44:	4632      	mov	r2, r6
2400fe46:	9101      	str	r1, [sp, #4]
2400fe48:	f7ff fe42 	bl	2400fad0 <disk_write>
2400fe4c:	b9b8      	cbnz	r0, 2400fe7e <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fe4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400fe50:	69e3      	ldr	r3, [r4, #28]
2400fe52:	1ab2      	subs	r2, r6, r2
2400fe54:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400fe56:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fe58:	429a      	cmp	r2, r3
2400fe5a:	d2e1      	bcs.n	2400fe20 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe5c:	78a7      	ldrb	r7, [r4, #2]
2400fe5e:	2f01      	cmp	r7, #1
2400fe60:	d801      	bhi.n	2400fe66 <move_window.part.0+0x56>
2400fe62:	e7dd      	b.n	2400fe20 <move_window.part.0+0x10>
					wsect += fs->fsize;
2400fe64:	69e3      	ldr	r3, [r4, #28]
2400fe66:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe68:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400fe6a:	2301      	movs	r3, #1
2400fe6c:	7860      	ldrb	r0, [r4, #1]
2400fe6e:	4632      	mov	r2, r6
2400fe70:	9101      	str	r1, [sp, #4]
2400fe72:	f7ff fe2d 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe76:	2f01      	cmp	r7, #1
2400fe78:	9901      	ldr	r1, [sp, #4]
2400fe7a:	d1f3      	bne.n	2400fe64 <move_window.part.0+0x54>
2400fe7c:	e7d0      	b.n	2400fe20 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400fe7e:	2001      	movs	r0, #1
}
2400fe80:	b003      	add	sp, #12
2400fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400fe84 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400fe84:	2300      	movs	r3, #0
{
2400fe86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400fe8a:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400fe8c:	6804      	ldr	r4, [r0, #0]
2400fe8e:	b18c      	cbz	r4, 2400feb4 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400fe90:	7825      	ldrb	r5, [r4, #0]
2400fe92:	2d1f      	cmp	r5, #31
2400fe94:	d912      	bls.n	2400febc <find_volume+0x38>
2400fe96:	2d3a      	cmp	r5, #58	; 0x3a
2400fe98:	d010      	beq.n	2400febc <find_volume+0x38>
2400fe9a:	46a4      	mov	ip, r4
2400fe9c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400fea0:	2b1f      	cmp	r3, #31
2400fea2:	d90d      	bls.n	2400fec0 <find_volume+0x3c>
2400fea4:	2b3a      	cmp	r3, #58	; 0x3a
2400fea6:	d1f9      	bne.n	2400fe9c <find_volume+0x18>
			i = *tp++ - '0';
2400fea8:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400feaa:	45a4      	cmp	ip, r4
2400feac:	d102      	bne.n	2400feb4 <find_volume+0x30>
2400feae:	2d30      	cmp	r5, #48	; 0x30
2400feb0:	f000 80da 	beq.w	24010068 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400feb4:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400feb6:	4620      	mov	r0, r4
2400feb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400febc:	462b      	mov	r3, r5
2400febe:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400fec0:	2b3a      	cmp	r3, #58	; 0x3a
2400fec2:	d0f1      	beq.n	2400fea8 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400fec4:	4ba6      	ldr	r3, [pc, #664]	; (24010160 <find_volume+0x2dc>)
2400fec6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400fec8:	2d00      	cmp	r5, #0
2400feca:	f000 80c9 	beq.w	24010060 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400fece:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400fed0:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400fed4:	782b      	ldrb	r3, [r5, #0]
2400fed6:	b17b      	cbz	r3, 2400fef8 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400fed8:	7868      	ldrb	r0, [r5, #1]
2400feda:	f7ff fdcf 	bl	2400fa7c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400fede:	07c1      	lsls	r1, r0, #31
2400fee0:	d40a      	bmi.n	2400fef8 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400fee2:	2c00      	cmp	r4, #0
2400fee4:	f000 80ab 	beq.w	2401003e <find_volume+0x1ba>
2400fee8:	f010 0404 	ands.w	r4, r0, #4
2400feec:	f000 80a7 	beq.w	2401003e <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400fef0:	240a      	movs	r4, #10
}
2400fef2:	4620      	mov	r0, r4
2400fef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400fef8:	2000      	movs	r0, #0
2400fefa:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400fefc:	f7ff fdc8 	bl	2400fa90 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400ff00:	07c2      	lsls	r2, r0, #31
2400ff02:	f100 809f 	bmi.w	24010044 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400ff06:	b10c      	cbz	r4, 2400ff0c <find_volume+0x88>
2400ff08:	0743      	lsls	r3, r0, #29
2400ff0a:	d4f1      	bmi.n	2400fef0 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400ff0c:	2100      	movs	r1, #0
2400ff0e:	4628      	mov	r0, r5
2400ff10:	f7ff ff3c 	bl	2400fd8c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400ff14:	2802      	cmp	r0, #2
2400ff16:	d077      	beq.n	24010008 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400ff18:	2804      	cmp	r0, #4
2400ff1a:	f000 809f 	beq.w	2401005c <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400ff1e:	2801      	cmp	r0, #1
2400ff20:	f200 808c 	bhi.w	2401003c <find_volume+0x1b8>
	bsect = 0;
2400ff24:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400ff26:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400ff2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400ff2e:	f040 8085 	bne.w	2401003c <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400ff32:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400ff36:	b902      	cbnz	r2, 2400ff3a <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400ff38:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400ff3a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400ff3e:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400ff40:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400ff42:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400ff44:	2901      	cmp	r1, #1
2400ff46:	d879      	bhi.n	2401003c <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400ff48:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400ff4c:	b288      	uxth	r0, r1
2400ff4e:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400ff50:	2800      	cmp	r0, #0
2400ff52:	d073      	beq.n	2401003c <find_volume+0x1b8>
2400ff54:	1e48      	subs	r0, r1, #1
2400ff56:	4208      	tst	r0, r1
2400ff58:	d170      	bne.n	2401003c <find_volume+0x1b8>
	rv = ptr[1];
2400ff5a:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400ff5e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400ff62:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400ff66:	d169      	bne.n	2401003c <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400ff68:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400ff6c:	b900      	cbnz	r0, 2400ff70 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400ff6e:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400ff70:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400ff74:	2f00      	cmp	r7, #0
2400ff76:	d061      	beq.n	2401003c <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400ff78:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400ff7c:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400ff80:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400ff82:	42b0      	cmp	r0, r6
2400ff84:	d35a      	bcc.n	2401003c <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400ff86:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400ff8a:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400ff8c:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400ff90:	d354      	bcc.n	2401003c <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400ff92:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400ff96:	4288      	cmp	r0, r1
2400ff98:	f200 8084 	bhi.w	240100a4 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400ff9c:	f640 71f5 	movw	r1, #4085	; 0xff5
2400ffa0:	4288      	cmp	r0, r1
2400ffa2:	f200 80a3 	bhi.w	240100ec <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ffa6:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ffa8:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400ffaa:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400ffac:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ffae:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400ffb0:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ffb2:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400ffb4:	f1bc 0f00 	cmp.w	ip, #0
2400ffb8:	d040      	beq.n	2401003c <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ffba:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400ffbe:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ffc2:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ffc4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400ffc8:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ffca:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400ffcc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400ffd0:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400ffd4:	d332      	bcc.n	2401003c <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ffd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400ffda:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ffdc:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400ffe0:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400ffe2:	4960      	ldr	r1, [pc, #384]	; (24010164 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400ffe4:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400ffe6:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400ffe8:	485f      	ldr	r0, [pc, #380]	; (24010168 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ffea:	4a60      	ldr	r2, [pc, #384]	; (2401016c <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400ffec:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400ffee:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400fff0:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400fff2:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400fff4:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400fff6:	800b      	strh	r3, [r1, #0]
2400fff8:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400fffa:	f000 8086 	beq.w	2401010a <find_volume+0x286>
2400fffe:	6913      	ldr	r3, [r2, #16]
24010000:	429d      	cmp	r5, r3
24010002:	d06f      	beq.n	240100e4 <find_volume+0x260>
	return FR_OK;
24010004:	2400      	movs	r4, #0
24010006:	e01a      	b.n	2401003e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
24010008:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2401000c:	b10e      	cbz	r6, 24010012 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2401000e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
24010012:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
24010016:	b10c      	cbz	r4, 2401001c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
24010018:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2401001c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
24010020:	b303      	cbz	r3, 24010064 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
24010022:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
24010026:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2401002a:	b10f      	cbz	r7, 24010030 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2401002c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
24010030:	b9f6      	cbnz	r6, 24010070 <find_volume+0x1ec>
24010032:	bb2c      	cbnz	r4, 24010080 <find_volume+0x1fc>
24010034:	f1b8 0f00 	cmp.w	r8, #0
24010038:	d12c      	bne.n	24010094 <find_volume+0x210>
2401003a:	b93f      	cbnz	r7, 2401004c <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2401003c:	240d      	movs	r4, #13
}
2401003e:	4620      	mov	r0, r4
24010040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
24010044:	2403      	movs	r4, #3
}
24010046:	4620      	mov	r0, r4
24010048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2401004c:	4639      	mov	r1, r7
2401004e:	4628      	mov	r0, r5
24010050:	f7ff fe9c 	bl	2400fd8c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
24010054:	2801      	cmp	r0, #1
24010056:	d95b      	bls.n	24010110 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
24010058:	2804      	cmp	r0, #4
2401005a:	d1ef      	bne.n	2401003c <find_volume+0x1b8>
2401005c:	2401      	movs	r4, #1
2401005e:	e7ee      	b.n	2401003e <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
24010060:	240c      	movs	r4, #12
24010062:	e7ec      	b.n	2401003e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
24010064:	4698      	mov	r8, r3
24010066:	e7de      	b.n	24010026 <find_volume+0x1a2>
					*path = ++tt;
24010068:	f10c 0301 	add.w	r3, ip, #1
2401006c:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2401006e:	e729      	b.n	2400fec4 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
24010070:	4631      	mov	r1, r6
24010072:	4628      	mov	r0, r5
24010074:	f7ff fe8a 	bl	2400fd8c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
24010078:	2801      	cmp	r0, #1
2401007a:	d8da      	bhi.n	24010032 <find_volume+0x1ae>
2401007c:	4634      	mov	r4, r6
2401007e:	e752      	b.n	2400ff26 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
24010080:	4621      	mov	r1, r4
24010082:	4628      	mov	r0, r5
24010084:	f7ff fe82 	bl	2400fd8c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
24010088:	2801      	cmp	r0, #1
2401008a:	f67f af4c 	bls.w	2400ff26 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2401008e:	f1b8 0f00 	cmp.w	r8, #0
24010092:	d0d2      	beq.n	2401003a <find_volume+0x1b6>
24010094:	4641      	mov	r1, r8
24010096:	4628      	mov	r0, r5
24010098:	f7ff fe78 	bl	2400fd8c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2401009c:	2801      	cmp	r0, #1
2401009e:	d8cc      	bhi.n	2401003a <find_volume+0x1b6>
240100a0:	4644      	mov	r4, r8
240100a2:	e740      	b.n	2400ff26 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
240100a4:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
240100a8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
240100aa:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
240100ac:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
240100ae:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
240100b2:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
240100b4:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
240100b6:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
240100b8:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
240100ba:	d1bf      	bne.n	2401003c <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
240100bc:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
240100be:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
240100c0:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
240100c4:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
240100c6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
240100ca:	d3b7      	bcc.n	2401003c <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
240100cc:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
240100d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
240100d4:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
240100d6:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
240100d8:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
240100da:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
240100de:	d019      	beq.n	24010114 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
240100e0:	2003      	movs	r0, #3
240100e2:	e77e      	b.n	2400ffe2 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
240100e4:	2300      	movs	r3, #0
	return FR_OK;
240100e6:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
240100e8:	6113      	str	r3, [r2, #16]
240100ea:	e7a8      	b.n	2401003e <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
240100ec:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
240100ee:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
240100f0:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
240100f2:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
240100f4:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
240100f6:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
240100f8:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
240100fa:	f1bc 0f00 	cmp.w	ip, #0
240100fe:	d09d      	beq.n	2401003c <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
24010100:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
24010102:	0049      	lsls	r1, r1, #1
24010104:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
24010106:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
24010108:	e760      	b.n	2400ffcc <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2401010a:	2300      	movs	r3, #0
2401010c:	6013      	str	r3, [r2, #0]
2401010e:	e776      	b.n	2400fffe <find_volume+0x17a>
24010110:	463c      	mov	r4, r7
24010112:	e708      	b.n	2400ff26 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
24010114:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
24010116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24010118:	4299      	cmp	r1, r3
2401011a:	d004      	beq.n	24010126 <find_volume+0x2a2>
2401011c:	4628      	mov	r0, r5
2401011e:	f7ff fe77 	bl	2400fe10 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
24010122:	2800      	cmp	r0, #0
24010124:	d1dc      	bne.n	240100e0 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
24010126:	f64a 2355 	movw	r3, #43605	; 0xaa55
2401012a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2401012e:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
24010130:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
24010132:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
24010134:	d1d4      	bne.n	240100e0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
24010136:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
24010138:	4b0d      	ldr	r3, [pc, #52]	; (24010170 <find_volume+0x2ec>)
2401013a:	429a      	cmp	r2, r3
2401013c:	d1d0      	bne.n	240100e0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2401013e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
24010142:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
24010146:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2401014a:	3320      	adds	r3, #32
2401014c:	429a      	cmp	r2, r3
2401014e:	d1c7      	bne.n	240100e0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
24010150:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
24010154:	2003      	movs	r0, #3
24010156:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2401015a:	e9c5 2304 	strd	r2, r3, [r5, #16]
2401015e:	e740      	b.n	2400ffe2 <find_volume+0x15e>
24010160:	2001e720 	.word	0x2001e720
24010164:	2001e744 	.word	0x2001e744
24010168:	2001e748 	.word	0x2001e748
2401016c:	2001e724 	.word	0x2001e724
24010170:	41615252 	.word	0x41615252

24010174 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
24010174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
24010178:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2401017a:	4604      	mov	r4, r0
2401017c:	460d      	mov	r5, r1
2401017e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
24010180:	2b02      	cmp	r3, #2
24010182:	d006      	beq.n	24010192 <put_fat.part.0+0x1e>
24010184:	2b03      	cmp	r3, #3
24010186:	d052      	beq.n	2401022e <put_fat.part.0+0xba>
24010188:	2b01      	cmp	r3, #1
2401018a:	d01b      	beq.n	240101c4 <put_fat.part.0+0x50>
2401018c:	2002      	movs	r0, #2
}
2401018e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
24010192:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010194:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
24010196:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2401019a:	4299      	cmp	r1, r3
2401019c:	d003      	beq.n	240101a6 <put_fat.part.0+0x32>
2401019e:	f7ff fe37 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
240101a2:	2800      	cmp	r0, #0
240101a4:	d1f3      	bne.n	2401018e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
240101a6:	006d      	lsls	r5, r5, #1
240101a8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
240101ac:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
240101b0:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
240101b2:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
240101b6:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
240101b8:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
240101ba:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
240101bc:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
240101be:	70e3      	strb	r3, [r4, #3]
}
240101c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
240101c4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
240101c8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240101ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
240101cc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
240101d0:	4299      	cmp	r1, r3
240101d2:	d003      	beq.n	240101dc <put_fat.part.0+0x68>
240101d4:	f7ff fe1c 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
240101d8:	2800      	cmp	r0, #0
240101da:	d1d8      	bne.n	2401018e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
240101dc:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
240101de:	f107 0801 	add.w	r8, r7, #1
240101e2:	f104 0934 	add.w	r9, r4, #52	; 0x34
240101e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
240101ea:	d542      	bpl.n	24010272 <put_fat.part.0+0xfe>
240101ec:	f819 3007 	ldrb.w	r3, [r9, r7]
240101f0:	f003 030f 	and.w	r3, r3, #15
240101f4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
240101f8:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
240101fc:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
240101fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
24010200:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010202:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
24010206:	6b23      	ldr	r3, [r4, #48]	; 0x30
24010208:	4299      	cmp	r1, r3
2401020a:	d004      	beq.n	24010216 <put_fat.part.0+0xa2>
2401020c:	4620      	mov	r0, r4
2401020e:	f7ff fdff 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
24010212:	2800      	cmp	r0, #0
24010214:	d1bb      	bne.n	2401018e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
24010216:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2401021a:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2401021e:	44c8      	add	r8, r9
			fs->wflag = 1;
24010220:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24010222:	f888 2000 	strb.w	r2, [r8]
			break;
24010226:	2000      	movs	r0, #0
			fs->wflag = 1;
24010228:	70e3      	strb	r3, [r4, #3]
}
2401022a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2401022e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010230:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
24010232:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
24010236:	4299      	cmp	r1, r3
24010238:	d003      	beq.n	24010242 <put_fat.part.0+0xce>
2401023a:	f7ff fde9 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
2401023e:	2800      	cmp	r0, #0
24010240:	d1a5      	bne.n	2401018e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
24010242:	00ad      	lsls	r5, r5, #2
24010244:	f104 0034 	add.w	r0, r4, #52	; 0x34
24010248:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2401024c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24010250:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
24010252:	1941      	adds	r1, r0, r5
24010254:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
24010258:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2401025a:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2401025c:	5542      	strb	r2, [r0, r5]
2401025e:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
24010260:	708b      	strb	r3, [r1, #2]
24010262:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
24010264:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
24010266:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
24010268:	70ca      	strb	r2, [r1, #3]
			break;
2401026a:	2000      	movs	r0, #0
			fs->wflag = 1;
2401026c:	70e3      	strb	r3, [r4, #3]
}
2401026e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
24010272:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
24010276:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
24010278:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2401027a:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2401027c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
24010280:	6b23      	ldr	r3, [r4, #48]	; 0x30
24010282:	4299      	cmp	r1, r3
24010284:	d005      	beq.n	24010292 <put_fat.part.0+0x11e>
24010286:	4620      	mov	r0, r4
24010288:	f7ff fdc2 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
2401028c:	2800      	cmp	r0, #0
2401028e:	f47f af7e 	bne.w	2401018e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
24010292:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24010296:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2401029a:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2401029c:	f898 3000 	ldrb.w	r3, [r8]
240102a0:	f023 060f 	bic.w	r6, r3, #15
240102a4:	4332      	orrs	r2, r6
240102a6:	e7bb      	b.n	24010220 <put_fat.part.0+0xac>

240102a8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
240102a8:	2901      	cmp	r1, #1
240102aa:	d90e      	bls.n	240102ca <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
240102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
240102ae:	6983      	ldr	r3, [r0, #24]
240102b0:	460c      	mov	r4, r1
240102b2:	4605      	mov	r5, r0
240102b4:	4299      	cmp	r1, r3
240102b6:	d206      	bcs.n	240102c6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
240102b8:	7803      	ldrb	r3, [r0, #0]
240102ba:	2b02      	cmp	r3, #2
240102bc:	d03e      	beq.n	2401033c <get_fat.isra.0+0x94>
240102be:	2b03      	cmp	r3, #3
240102c0:	d02b      	beq.n	2401031a <get_fat.isra.0+0x72>
240102c2:	2b01      	cmp	r3, #1
240102c4:	d003      	beq.n	240102ce <get_fat.isra.0+0x26>
240102c6:	2001      	movs	r0, #1
}
240102c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
240102ca:	2001      	movs	r0, #1
}
240102cc:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
240102ce:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240102d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240102d4:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240102d6:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
240102da:	4291      	cmp	r1, r2
240102dc:	d004      	beq.n	240102e8 <get_fat.isra.0+0x40>
240102de:	f7ff fd97 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240102e2:	bba0      	cbnz	r0, 2401034e <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240102e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240102e6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
240102e8:	1c77      	adds	r7, r6, #1
240102ea:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240102ee:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
240102f2:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
240102f4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
240102f6:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
240102fa:	d003      	beq.n	24010304 <get_fat.isra.0+0x5c>
240102fc:	4628      	mov	r0, r5
240102fe:	f7ff fd87 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010302:	bb20      	cbnz	r0, 2401034e <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
24010304:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010308:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2401030a:	443d      	add	r5, r7
2401030c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
24010310:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010314:	d524      	bpl.n	24010360 <get_fat.isra.0+0xb8>
24010316:	0900      	lsrs	r0, r0, #4
}
24010318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2401031a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2401031c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2401031e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
24010322:	4299      	cmp	r1, r3
24010324:	d002      	beq.n	2401032c <get_fat.isra.0+0x84>
24010326:	f7ff fd73 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2401032a:	b980      	cbnz	r0, 2401034e <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2401032c:	00a4      	lsls	r4, r4, #2
2401032e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24010332:	4425      	add	r5, r4
24010334:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24010336:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2401033a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2401033c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2401033e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010340:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
24010344:	4299      	cmp	r1, r3
24010346:	d005      	beq.n	24010354 <get_fat.isra.0+0xac>
24010348:	f7ff fd62 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2401034c:	b110      	cbz	r0, 24010354 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2401034e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
24010352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
24010354:	0064      	lsls	r4, r4, #1
24010356:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2401035a:	4425      	add	r5, r4
2401035c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2401035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010360:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
24010364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010366:	bf00      	nop

24010368 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
24010368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2401036c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2401036e:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010370:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010372:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
24010376:	d22d      	bcs.n	240103d4 <dir_next.constprop.0+0x6c>
24010378:	b363      	cbz	r3, 240103d4 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2401037a:	f3c5 0708 	ubfx	r7, r5, #0, #9
2401037e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
24010380:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010382:	b137      	cbz	r7, 24010392 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010384:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
24010386:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
24010388:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2401038a:	443e      	add	r6, r7
2401038c:	6226      	str	r6, [r4, #32]
}
2401038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
24010392:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
24010394:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
24010396:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
24010398:	b1f9      	cbz	r1, 240103da <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2401039a:	8973      	ldrh	r3, [r6, #10]
2401039c:	3b01      	subs	r3, #1
2401039e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
240103a2:	d1ef      	bne.n	24010384 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
240103a4:	4630      	mov	r0, r6
240103a6:	f7ff ff7f 	bl	240102a8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240103aa:	2801      	cmp	r0, #1
240103ac:	d91d      	bls.n	240103ea <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
240103ae:	1c43      	adds	r3, r0, #1
240103b0:	d01d      	beq.n	240103ee <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
240103b2:	69b3      	ldr	r3, [r6, #24]
240103b4:	4298      	cmp	r0, r3
240103b6:	d214      	bcs.n	240103e2 <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
240103b8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
240103ba:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240103bc:	69b3      	ldr	r3, [r6, #24]
240103be:	3b02      	subs	r3, #2
240103c0:	4298      	cmp	r0, r3
240103c2:	d204      	bcs.n	240103ce <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
240103c4:	f8b6 800a 	ldrh.w	r8, [r6, #10]
240103c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
240103ca:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
240103ce:	f8c4 801c 	str.w	r8, [r4, #28]
240103d2:	e7d7      	b.n	24010384 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
240103d4:	2004      	movs	r0, #4
}
240103d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
240103da:	8933      	ldrh	r3, [r6, #8]
240103dc:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
240103e0:	d8d0      	bhi.n	24010384 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
240103e2:	2300      	movs	r3, #0
240103e4:	2004      	movs	r0, #4
240103e6:	61e3      	str	r3, [r4, #28]
240103e8:	e7d1      	b.n	2401038e <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240103ea:	2002      	movs	r0, #2
240103ec:	e7cf      	b.n	2401038e <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
240103ee:	2001      	movs	r0, #1
240103f0:	e7cd      	b.n	2401038e <dir_next.constprop.0+0x26>
240103f2:	bf00      	nop

240103f4 <dir_read.constprop.0>:
FRESULT dir_read (
240103f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
240103f8:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
240103fa:	b083      	sub	sp, #12
240103fc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
240103fe:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
24010400:	2e00      	cmp	r6, #0
24010402:	d05e      	beq.n	240104c2 <dir_read.constprop.0+0xce>
	BYTE ord = 0xFF, sum = 0xFF;
24010404:	f04f 0aff 	mov.w	sl, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010408:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2401040c:	46d0      	mov	r8, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
2401040e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
24010410:	42b5      	cmp	r5, r6
24010412:	d014      	beq.n	2401043e <dir_read.constprop.0+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
24010414:	78fb      	ldrb	r3, [r7, #3]
24010416:	2b00      	cmp	r3, #0
24010418:	f040 80cb 	bne.w	240105b2 <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2401041c:	2301      	movs	r3, #1
2401041e:	4632      	mov	r2, r6
24010420:	4649      	mov	r1, r9
24010422:	7878      	ldrb	r0, [r7, #1]
24010424:	f7ff fb46 	bl	2400fab4 <disk_read>
24010428:	b140      	cbz	r0, 2401043c <dir_read.constprop.0+0x48>
			fs->winsect = sector;
2401042a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2401042e:	2001      	movs	r0, #1
			fs->winsect = sector;
24010430:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
24010432:	2300      	movs	r3, #0
24010434:	61e3      	str	r3, [r4, #28]
}
24010436:	b003      	add	sp, #12
24010438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2401043c:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2401043e:	6a21      	ldr	r1, [r4, #32]
24010440:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
24010442:	2a00      	cmp	r2, #0
24010444:	d03d      	beq.n	240104c2 <dir_read.constprop.0+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
24010446:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
24010448:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2401044a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401044e:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
24010450:	d005      	beq.n	2401045e <dir_read.constprop.0+0x6a>
24010452:	2a2e      	cmp	r2, #46	; 0x2e
24010454:	d003      	beq.n	2401045e <dir_read.constprop.0+0x6a>
24010456:	f023 0020 	bic.w	r0, r3, #32
2401045a:	2808      	cmp	r0, #8
2401045c:	d138      	bne.n	240104d0 <dir_read.constprop.0+0xdc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2401045e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010462:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010464:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010466:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010468:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2401046c:	d229      	bcs.n	240104c2 <dir_read.constprop.0+0xce>
2401046e:	b346      	cbz	r6, 240104c2 <dir_read.constprop.0+0xce>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010470:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
24010474:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010476:	bb32      	cbnz	r2, 240104c6 <dir_read.constprop.0+0xd2>
		dp->sect++;				/* Next sector */
24010478:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2401047a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2401047c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2401047e:	b961      	cbnz	r1, 2401049a <dir_read.constprop.0+0xa6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
24010480:	891a      	ldrh	r2, [r3, #8]
24010482:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
24010486:	d91c      	bls.n	240104c2 <dir_read.constprop.0+0xce>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010488:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2401048a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2401048c:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2401048e:	2e00      	cmp	r6, #0
24010490:	d1bd      	bne.n	2401040e <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
24010492:	2000      	movs	r0, #0
}
24010494:	b003      	add	sp, #12
24010496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2401049a:	895a      	ldrh	r2, [r3, #10]
2401049c:	3a01      	subs	r2, #1
2401049e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
240104a2:	d1f1      	bne.n	24010488 <dir_read.constprop.0+0x94>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
240104a4:	4618      	mov	r0, r3
240104a6:	9301      	str	r3, [sp, #4]
240104a8:	f7ff fefe 	bl	240102a8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240104ac:	2801      	cmp	r0, #1
240104ae:	f240 80b4 	bls.w	2401061a <dir_read.constprop.0+0x226>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
240104b2:	1c43      	adds	r3, r0, #1
240104b4:	f000 8084 	beq.w	240105c0 <dir_read.constprop.0+0x1cc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
240104b8:	9b01      	ldr	r3, [sp, #4]
240104ba:	699a      	ldr	r2, [r3, #24]
240104bc:	4290      	cmp	r0, r2
240104be:	f0c0 80a0 	bcc.w	24010602 <dir_read.constprop.0+0x20e>
	FRESULT res = FR_NO_FILE;
240104c2:	2004      	movs	r0, #4
240104c4:	e7b5      	b.n	24010432 <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
240104c6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
240104c8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
240104ca:	441a      	add	r2, r3
240104cc:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
240104ce:	e79e      	b.n	2401040e <dir_read.constprop.0+0x1a>
				if (a == AM_LFN) {			/* An LFN entry is found */
240104d0:	2b0f      	cmp	r3, #15
240104d2:	f040 80aa 	bne.w	2401062a <dir_read.constprop.0+0x236>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
240104d6:	0650      	lsls	r0, r2, #25
240104d8:	d574      	bpl.n	240105c4 <dir_read.constprop.0+0x1d0>
						dp->blk_ofs = dp->dptr;
240104da:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
240104dc:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
240104e0:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
240104e4:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
240104e6:	7b4b      	ldrb	r3, [r1, #13]
240104e8:	4553      	cmp	r3, sl
240104ea:	d1b8      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
240104ec:	8b4b      	ldrh	r3, [r1, #26]
240104ee:	2b00      	cmp	r3, #0
240104f0:	d1b5      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
240104f2:	780b      	ldrb	r3, [r1, #0]
240104f4:	f8b1 0001 	ldrh.w	r0, [r1, #1]
240104f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
240104fc:	3b01      	subs	r3, #1
240104fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
24010502:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
24010506:	2bfe      	cmp	r3, #254	; 0xfe
24010508:	d8a9      	bhi.n	2401045e <dir_read.constprop.0+0x6a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2401050a:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2401050c:	1c5a      	adds	r2, r3, #1
2401050e:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
24010512:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
24010516:	2800      	cmp	r0, #0
24010518:	f040 8090 	bne.w	2401063c <dir_read.constprop.0+0x248>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2401051c:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010520:	429e      	cmp	r6, r3
24010522:	d19c      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010524:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010528:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401052c:	459e      	cmp	lr, r3
2401052e:	d196      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010530:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010534:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010538:	459c      	cmp	ip, r3
2401053a:	d190      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2401053c:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010540:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010544:	429e      	cmp	r6, r3
24010546:	d18a      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010548:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2401054c:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010550:	459c      	cmp	ip, r3
24010552:	d184      	bne.n	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010554:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010558:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401055c:	459e      	cmp	lr, r3
2401055e:	f47f af7e 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010562:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010564:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010568:	429e      	cmp	r6, r3
2401056a:	f47f af78 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2401056e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010572:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010576:	459c      	cmp	ip, r3
24010578:	f47f af71 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2401057c:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2401057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010582:	429e      	cmp	r6, r3
24010584:	f47f af6b 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010588:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2401058c:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010590:	459c      	cmp	ip, r3
24010592:	f47f af64 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
24010596:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010598:	f64f 73ff 	movw	r3, #65535	; 0xffff
2401059c:	429e      	cmp	r6, r3
2401059e:	f47f af5e 	bne.w	2401045e <dir_read.constprop.0+0x6a>
	rv = ptr[1];
240105a2:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
240105a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
240105aa:	459c      	cmp	ip, r3
240105ac:	f000 80ca 	beq.w	24010744 <dir_read.constprop.0+0x350>
240105b0:	e755      	b.n	2401045e <dir_read.constprop.0+0x6a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
240105b2:	2301      	movs	r3, #1
240105b4:	462a      	mov	r2, r5
240105b6:	4649      	mov	r1, r9
240105b8:	7878      	ldrb	r0, [r7, #1]
240105ba:	f7ff fa89 	bl	2400fad0 <disk_write>
240105be:	b128      	cbz	r0, 240105cc <dir_read.constprop.0+0x1d8>
	FRESULT res = FR_NO_FILE;
240105c0:	2001      	movs	r0, #1
240105c2:	e736      	b.n	24010432 <dir_read.constprop.0+0x3e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
240105c4:	4542      	cmp	r2, r8
240105c6:	f47f af4a 	bne.w	2401045e <dir_read.constprop.0+0x6a>
240105ca:	e78c      	b.n	240104e6 <dir_read.constprop.0+0xf2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
240105ce:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
240105d0:	1aea      	subs	r2, r5, r3
240105d2:	69fb      	ldr	r3, [r7, #28]
240105d4:	429a      	cmp	r2, r3
240105d6:	f4bf af21 	bcs.w	2401041c <dir_read.constprop.0+0x28>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240105da:	f897 b002 	ldrb.w	fp, [r7, #2]
240105de:	f1bb 0f01 	cmp.w	fp, #1
240105e2:	d801      	bhi.n	240105e8 <dir_read.constprop.0+0x1f4>
240105e4:	e71a      	b.n	2401041c <dir_read.constprop.0+0x28>
					wsect += fs->fsize;
240105e6:	69fb      	ldr	r3, [r7, #28]
240105e8:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240105ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
240105ee:	2301      	movs	r3, #1
240105f0:	4649      	mov	r1, r9
240105f2:	462a      	mov	r2, r5
240105f4:	7878      	ldrb	r0, [r7, #1]
240105f6:	f7ff fa6b 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
240105fa:	f1bb 0f01 	cmp.w	fp, #1
240105fe:	d1f2      	bne.n	240105e6 <dir_read.constprop.0+0x1f2>
24010600:	e70c      	b.n	2401041c <dir_read.constprop.0+0x28>
				dp->clust = clst;		/* Initialize data for new cluster */
24010602:	61a0      	str	r0, [r4, #24]
	clst -= 2;
24010604:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010606:	699a      	ldr	r2, [r3, #24]
24010608:	3a02      	subs	r2, #2
2401060a:	4290      	cmp	r0, r2
2401060c:	d207      	bcs.n	2401061e <dir_read.constprop.0+0x22a>
	return clst * fs->csize + fs->database;
2401060e:	895a      	ldrh	r2, [r3, #10]
24010610:	6ade      	ldr	r6, [r3, #44]	; 0x2c
24010612:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
24010616:	61e6      	str	r6, [r4, #28]
24010618:	e736      	b.n	24010488 <dir_read.constprop.0+0x94>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2401061a:	2002      	movs	r0, #2
2401061c:	e709      	b.n	24010432 <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2401061e:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
24010620:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
24010624:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010626:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
24010628:	e733      	b.n	24010492 <dir_read.constprop.0+0x9e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2401062a:	f1b8 0f00 	cmp.w	r8, #0
2401062e:	f000 8096 	beq.w	2401075e <dir_read.constprop.0+0x36a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
24010632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
24010636:	2000      	movs	r0, #0
24010638:	6323      	str	r3, [r4, #48]	; 0x30
2401063a:	e6fc      	b.n	24010436 <dir_read.constprop.0+0x42>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2401063c:	2aff      	cmp	r2, #255	; 0xff
2401063e:	f000 80d8 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
24010642:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
24010646:	0050      	lsls	r0, r2, #1
24010648:	f8b1 e005 	ldrh.w	lr, [r1, #5]
2401064c:	1c9a      	adds	r2, r3, #2
		if (wc) {
2401064e:	2e00      	cmp	r6, #0
24010650:	f43f af6a 	beq.w	24010528 <dir_read.constprop.0+0x134>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
24010654:	2aff      	cmp	r2, #255	; 0xff
24010656:	f000 80cc 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2401065a:	4428      	add	r0, r5
2401065c:	1cda      	adds	r2, r3, #3
2401065e:	f8a0 e002 	strh.w	lr, [r0, #2]
24010662:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
24010666:	f1be 0f00 	cmp.w	lr, #0
2401066a:	f43f af63 	beq.w	24010534 <dir_read.constprop.0+0x140>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2401066e:	2aff      	cmp	r2, #255	; 0xff
24010670:	f000 80bf 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
24010674:	f8a0 c004 	strh.w	ip, [r0, #4]
24010678:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2401067a:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2401067e:	f1bc 0f00 	cmp.w	ip, #0
24010682:	f43f af5d 	beq.w	24010540 <dir_read.constprop.0+0x14c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
24010686:	2aff      	cmp	r2, #255	; 0xff
24010688:	f000 80b3 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2401068c:	80c6      	strh	r6, [r0, #6]
2401068e:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
24010690:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
24010694:	2e00      	cmp	r6, #0
24010696:	f43f af59 	beq.w	2401054c <dir_read.constprop.0+0x158>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2401069a:	2aff      	cmp	r2, #255	; 0xff
2401069c:	f000 80a9 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
240106a0:	f8a0 c008 	strh.w	ip, [r0, #8]
240106a4:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
240106a6:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
240106aa:	f1bc 0f00 	cmp.w	ip, #0
240106ae:	f43f af53 	beq.w	24010558 <dir_read.constprop.0+0x164>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
240106b2:	2aff      	cmp	r2, #255	; 0xff
240106b4:	f000 809d 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
240106b8:	f8a0 e00a 	strh.w	lr, [r0, #10]
240106bc:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
240106be:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
240106c0:	f1be 0f00 	cmp.w	lr, #0
240106c4:	f43f af4e 	beq.w	24010564 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
240106c8:	2aff      	cmp	r2, #255	; 0xff
240106ca:	f000 8092 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
240106ce:	8186      	strh	r6, [r0, #12]
240106d0:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
240106d4:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
240106d8:	2e00      	cmp	r6, #0
240106da:	f43f af4a 	beq.w	24010572 <dir_read.constprop.0+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
240106de:	2aff      	cmp	r2, #255	; 0xff
240106e0:	f000 8087 	beq.w	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
240106e4:	f8a0 c00e 	strh.w	ip, [r0, #14]
240106e8:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
240106ec:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
240106ee:	f1bc 0f00 	cmp.w	ip, #0
240106f2:	f43f af44 	beq.w	2401057e <dir_read.constprop.0+0x18a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
240106f6:	2aff      	cmp	r2, #255	; 0xff
240106f8:	d07b      	beq.n	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
240106fa:	8206      	strh	r6, [r0, #16]
240106fc:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
24010700:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
24010704:	2e00      	cmp	r6, #0
24010706:	f43f af41 	beq.w	2401058c <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2401070a:	2aff      	cmp	r2, #255	; 0xff
2401070c:	f43f aea7 	beq.w	2401045e <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
24010710:	f8a0 c012 	strh.w	ip, [r0, #18]
24010714:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
24010718:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2401071a:	f1bc 0f00 	cmp.w	ip, #0
2401071e:	f43f af3b 	beq.w	24010598 <dir_read.constprop.0+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
24010722:	2aff      	cmp	r2, #255	; 0xff
24010724:	d065      	beq.n	240107f2 <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
24010726:	8286      	strh	r6, [r0, #20]
24010728:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2401072c:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
24010730:	2e00      	cmp	r6, #0
24010732:	f43f af38 	beq.w	240105a6 <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
24010736:	2aff      	cmp	r2, #255	; 0xff
24010738:	f43f ae91 	beq.w	2401045e <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2401073c:	f103 020d 	add.w	r2, r3, #13
24010740:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
24010744:	780b      	ldrb	r3, [r1, #0]
24010746:	0659      	lsls	r1, r3, #25
24010748:	d504      	bpl.n	24010754 <dir_read.constprop.0+0x360>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2401074a:	2aff      	cmp	r2, #255	; 0xff
2401074c:	d051      	beq.n	240107f2 <dir_read.constprop.0+0x3fe>
		lfnbuf[i] = 0;
2401074e:	2300      	movs	r3, #0
24010750:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010754:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
24010758:	fa5f f888 	uxtb.w	r8, r8
2401075c:	e681      	b.n	24010462 <dir_read.constprop.0+0x6e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2401075e:	780a      	ldrb	r2, [r1, #0]
24010760:	01d3      	lsls	r3, r2, #7
24010762:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
24010766:	784a      	ldrb	r2, [r1, #1]
24010768:	441a      	add	r2, r3
2401076a:	f3c2 0346 	ubfx	r3, r2, #1, #7
2401076e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010772:	788a      	ldrb	r2, [r1, #2]
24010774:	fa52 f283 	uxtab	r2, r2, r3
24010778:	f3c2 0346 	ubfx	r3, r2, #1, #7
2401077c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010780:	78ca      	ldrb	r2, [r1, #3]
24010782:	fa52 f283 	uxtab	r2, r2, r3
24010786:	f3c2 0346 	ubfx	r3, r2, #1, #7
2401078a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2401078e:	790a      	ldrb	r2, [r1, #4]
24010790:	fa52 f283 	uxtab	r2, r2, r3
24010794:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010798:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2401079c:	794a      	ldrb	r2, [r1, #5]
2401079e:	fa52 f283 	uxtab	r2, r2, r3
240107a2:	f3c2 0346 	ubfx	r3, r2, #1, #7
240107a6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
240107aa:	798a      	ldrb	r2, [r1, #6]
240107ac:	fa52 f283 	uxtab	r2, r2, r3
240107b0:	f3c2 0346 	ubfx	r3, r2, #1, #7
240107b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
240107b8:	79ca      	ldrb	r2, [r1, #7]
240107ba:	fa52 f283 	uxtab	r2, r2, r3
240107be:	f3c2 0346 	ubfx	r3, r2, #1, #7
240107c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
240107c6:	7a0a      	ldrb	r2, [r1, #8]
240107c8:	fa52 f283 	uxtab	r2, r2, r3
240107cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
240107d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
240107d4:	7a4a      	ldrb	r2, [r1, #9]
240107d6:	7a89      	ldrb	r1, [r1, #10]
240107d8:	fa52 f283 	uxtab	r2, r2, r3
240107dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
240107e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
240107e4:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
240107e8:	b2db      	uxtb	r3, r3
240107ea:	459a      	cmp	sl, r3
240107ec:	f47f af21 	bne.w	24010632 <dir_read.constprop.0+0x23e>
240107f0:	e64f      	b.n	24010492 <dir_read.constprop.0+0x9e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
240107f2:	4690      	mov	r8, r2
240107f4:	e635      	b.n	24010462 <dir_read.constprop.0+0x6e>
240107f6:	bf00      	nop

240107f8 <sync_fs>:
{
240107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
240107fa:	78c3      	ldrb	r3, [r0, #3]
{
240107fc:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
240107fe:	b95b      	cbnz	r3, 24010818 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
24010800:	7823      	ldrb	r3, [r4, #0]
24010802:	2b03      	cmp	r3, #3
24010804:	d029      	beq.n	2401085a <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
24010806:	2200      	movs	r2, #0
24010808:	7860      	ldrb	r0, [r4, #1]
2401080a:	4611      	mov	r1, r2
2401080c:	f7ff f96e 	bl	2400faec <disk_ioctl>
			res = FR_DISK_ERR;
24010810:	3800      	subs	r0, #0
24010812:	bf18      	it	ne
24010814:	2001      	movne	r0, #1
}
24010816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
24010818:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2401081a:	f100 0734 	add.w	r7, r0, #52	; 0x34
2401081e:	2301      	movs	r3, #1
24010820:	7840      	ldrb	r0, [r0, #1]
24010822:	462a      	mov	r2, r5
24010824:	4639      	mov	r1, r7
24010826:	f7ff f953 	bl	2400fad0 <disk_write>
2401082a:	2800      	cmp	r0, #0
2401082c:	d150      	bne.n	240108d0 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2401082e:	6a62      	ldr	r2, [r4, #36]	; 0x24
24010830:	69e3      	ldr	r3, [r4, #28]
24010832:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
24010834:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24010836:	429a      	cmp	r2, r3
24010838:	d2e2      	bcs.n	24010800 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2401083a:	78a6      	ldrb	r6, [r4, #2]
2401083c:	2e01      	cmp	r6, #1
2401083e:	d801      	bhi.n	24010844 <sync_fs+0x4c>
24010840:	e7de      	b.n	24010800 <sync_fs+0x8>
					wsect += fs->fsize;
24010842:	69e3      	ldr	r3, [r4, #28]
24010844:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010846:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
24010848:	2301      	movs	r3, #1
2401084a:	4639      	mov	r1, r7
2401084c:	462a      	mov	r2, r5
2401084e:	7860      	ldrb	r0, [r4, #1]
24010850:	f7ff f93e 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010854:	2e01      	cmp	r6, #1
24010856:	d1f4      	bne.n	24010842 <sync_fs+0x4a>
24010858:	e7d2      	b.n	24010800 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2401085a:	7925      	ldrb	r5, [r4, #4]
2401085c:	2d01      	cmp	r5, #1
2401085e:	d1d2      	bne.n	24010806 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
24010860:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
24010864:	f44f 7200 	mov.w	r2, #512	; 0x200
24010868:	2100      	movs	r1, #0
2401086a:	4630      	mov	r0, r6
2401086c:	f00a f8c4 	bl	2401a9f8 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
24010870:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
24010874:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
24010876:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
24010878:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2401087c:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2401087e:	4815      	ldr	r0, [pc, #84]	; (240108d4 <sync_fs+0xdc>)
24010880:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
24010884:	6360      	str	r0, [r4, #52]	; 0x34
24010886:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2401088a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2401088e:	3020      	adds	r0, #32
24010890:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
24010894:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
24010896:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2401089a:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2401089c:	0e12      	lsrs	r2, r2, #24
2401089e:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
240108a2:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
240108a4:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
240108a8:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
240108aa:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
240108ac:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
240108b0:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
240108b2:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
240108b6:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
240108b8:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
240108ba:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
240108bc:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
240108c0:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
240108c4:	7860      	ldrb	r0, [r4, #1]
240108c6:	f7ff f903 	bl	2400fad0 <disk_write>
			fs->fsi_flag = 0;
240108ca:	2300      	movs	r3, #0
240108cc:	7123      	strb	r3, [r4, #4]
240108ce:	e79a      	b.n	24010806 <sync_fs+0xe>
			res = FR_DISK_ERR;
240108d0:	2001      	movs	r0, #1
}
240108d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240108d4:	41615252 	.word	0x41615252

240108d8 <create_chain>:
{
240108d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240108dc:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
240108de:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
240108e0:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
240108e4:	2900      	cmp	r1, #0
240108e6:	f040 80b4 	bne.w	24010a52 <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
240108ea:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
240108ee:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
240108f2:	b9ce      	cbnz	r6, 24010928 <create_chain+0x50>
240108f4:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
240108f6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
240108f8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
240108fa:	429c      	cmp	r4, r3
240108fc:	d318      	bcc.n	24010930 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
240108fe:	2e01      	cmp	r6, #1
24010900:	f000 80a3 	beq.w	24010a4a <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
24010904:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
24010908:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2401090a:	69ab      	ldr	r3, [r5, #24]
2401090c:	42a3      	cmp	r3, r4
2401090e:	d907      	bls.n	24010920 <create_chain+0x48>
		switch (fs->fs_type) {
24010910:	782b      	ldrb	r3, [r5, #0]
24010912:	2b02      	cmp	r3, #2
24010914:	f000 8088 	beq.w	24010a28 <create_chain+0x150>
24010918:	2b03      	cmp	r3, #3
2401091a:	d044      	beq.n	240109a6 <create_chain+0xce>
2401091c:	2b01      	cmp	r3, #1
2401091e:	d00c      	beq.n	2401093a <create_chain+0x62>
24010920:	2401      	movs	r4, #1
}
24010922:	4620      	mov	r0, r4
24010924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
24010928:	42b3      	cmp	r3, r6
2401092a:	bf98      	it	ls
2401092c:	2601      	movls	r6, #1
2401092e:	e7e2      	b.n	240108f6 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010930:	2c01      	cmp	r4, #1
24010932:	f8da 5000 	ldr.w	r5, [sl]
24010936:	d9f3      	bls.n	24010920 <create_chain+0x48>
24010938:	e7e7      	b.n	2401090a <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2401093a:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2401093e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010940:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010942:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
24010946:	4291      	cmp	r1, r2
24010948:	d005      	beq.n	24010956 <create_chain+0x7e>
2401094a:	4628      	mov	r0, r5
2401094c:	f7ff fa60 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010950:	bb20      	cbnz	r0, 2401099c <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010954:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
24010956:	f107 0b01 	add.w	fp, r7, #1
2401095a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2401095e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
24010962:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
24010964:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
24010966:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2401096a:	d003      	beq.n	24010974 <create_chain+0x9c>
2401096c:	4628      	mov	r0, r5
2401096e:	f7ff fa4f 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010972:	b998      	cbnz	r0, 2401099c <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
24010974:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010978:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2401097a:	445d      	add	r5, fp
2401097c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
24010980:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010984:	d575      	bpl.n	24010a72 <create_chain+0x19a>
24010986:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
24010988:	b30b      	cbz	r3, 240109ce <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2401098a:	2b01      	cmp	r3, #1
2401098c:	d0c8      	beq.n	24010920 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2401098e:	42a6      	cmp	r6, r4
24010990:	d05b      	beq.n	24010a4a <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
24010992:	f8d9 3018 	ldr.w	r3, [r9, #24]
24010996:	e7af      	b.n	240108f8 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
24010998:	2801      	cmp	r0, #1
2401099a:	d1c1      	bne.n	24010920 <create_chain+0x48>
2401099c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
240109a0:	4620      	mov	r0, r4
240109a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
240109a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240109a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
240109aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
240109ae:	4299      	cmp	r1, r3
240109b0:	d004      	beq.n	240109bc <create_chain+0xe4>
240109b2:	4628      	mov	r0, r5
240109b4:	f7ff fa2c 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
240109b8:	2800      	cmp	r0, #0
240109ba:	d1ef      	bne.n	2401099c <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
240109bc:	00a3      	lsls	r3, r4, #2
240109be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
240109c2:	441d      	add	r5, r3
240109c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
240109c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
240109ca:	2b00      	cmp	r3, #0
240109cc:	d1dd      	bne.n	2401098a <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
240109ce:	f8d9 3018 	ldr.w	r3, [r9, #24]
240109d2:	42a3      	cmp	r3, r4
240109d4:	d9a4      	bls.n	24010920 <create_chain+0x48>
240109d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
240109da:	4621      	mov	r1, r4
240109dc:	4648      	mov	r0, r9
240109de:	f7ff fbc9 	bl	24010174 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
240109e2:	b970      	cbnz	r0, 24010a02 <create_chain+0x12a>
240109e4:	f1b8 0f00 	cmp.w	r8, #0
240109e8:	d00b      	beq.n	24010a02 <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
240109ea:	f1b8 0f01 	cmp.w	r8, #1
240109ee:	d097      	beq.n	24010920 <create_chain+0x48>
240109f0:	f8d9 3018 	ldr.w	r3, [r9, #24]
240109f4:	4598      	cmp	r8, r3
240109f6:	d293      	bcs.n	24010920 <create_chain+0x48>
240109f8:	4622      	mov	r2, r4
240109fa:	4641      	mov	r1, r8
240109fc:	4648      	mov	r0, r9
240109fe:	f7ff fbb9 	bl	24010174 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
24010a02:	2800      	cmp	r0, #0
24010a04:	d1c8      	bne.n	24010998 <create_chain+0xc0>
		fs->last_clst = ncl;
24010a06:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
24010a0a:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
24010a0e:	3b02      	subs	r3, #2
24010a10:	429a      	cmp	r2, r3
24010a12:	d802      	bhi.n	24010a1a <create_chain+0x142>
24010a14:	3a01      	subs	r2, #1
24010a16:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
24010a1a:	f899 3004 	ldrb.w	r3, [r9, #4]
24010a1e:	f043 0301 	orr.w	r3, r3, #1
24010a22:	f889 3004 	strb.w	r3, [r9, #4]
24010a26:	e77c      	b.n	24010922 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010a28:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010a2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010a2c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
24010a30:	4299      	cmp	r1, r3
24010a32:	d004      	beq.n	24010a3e <create_chain+0x166>
24010a34:	4628      	mov	r0, r5
24010a36:	f7ff f9eb 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010a3a:	2800      	cmp	r0, #0
24010a3c:	d1ae      	bne.n	2401099c <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
24010a3e:	0063      	lsls	r3, r4, #1
24010a40:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
24010a44:	441d      	add	r5, r3
24010a46:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
24010a48:	e79e      	b.n	24010988 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
24010a4a:	2400      	movs	r4, #0
}
24010a4c:	4620      	mov	r0, r4
24010a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
24010a52:	4648      	mov	r0, r9
24010a54:	f7ff fc28 	bl	240102a8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
24010a58:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
24010a5a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
24010a5c:	f67f af60 	bls.w	24010920 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
24010a60:	1c41      	adds	r1, r0, #1
24010a62:	d09b      	beq.n	2401099c <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
24010a64:	f8d9 3018 	ldr.w	r3, [r9, #24]
24010a68:	4283      	cmp	r3, r0
24010a6a:	f63f af5a 	bhi.w	24010922 <create_chain+0x4a>
24010a6e:	4646      	mov	r6, r8
24010a70:	e741      	b.n	240108f6 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
24010a76:	e787      	b.n	24010988 <create_chain+0xb0>

24010a78 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
24010a78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24010a7c:	d274      	bcs.n	24010b68 <dir_sdi+0xf0>
24010a7e:	06ca      	lsls	r2, r1, #27
{
24010a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010a84:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
24010a86:	d151      	bne.n	24010b2c <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
24010a88:	6885      	ldr	r5, [r0, #8]
24010a8a:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
24010a8c:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
24010a90:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
24010a92:	2d00      	cmp	r5, #0
24010a94:	d04d      	beq.n	24010b32 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
24010a96:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
24010a9a:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
24010a9e:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
24010aa2:	f0c0 808e 	bcc.w	24010bc2 <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010aa6:	2d01      	cmp	r5, #1
24010aa8:	d040      	beq.n	24010b2c <dir_sdi+0xb4>
24010aaa:	4647      	mov	r7, r8
24010aac:	e03b      	b.n	24010b26 <dir_sdi+0xae>
		switch (fs->fs_type) {
24010aae:	783b      	ldrb	r3, [r7, #0]
24010ab0:	2b02      	cmp	r3, #2
24010ab2:	d073      	beq.n	24010b9c <dir_sdi+0x124>
24010ab4:	2b03      	cmp	r3, #3
24010ab6:	d05f      	beq.n	24010b78 <dir_sdi+0x100>
24010ab8:	2b01      	cmp	r3, #1
24010aba:	d137      	bne.n	24010b2c <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
24010abc:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ac4:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
24010ac8:	4291      	cmp	r1, r2
24010aca:	d006      	beq.n	24010ada <dir_sdi+0x62>
24010acc:	4638      	mov	r0, r7
24010ace:	f7ff f99f 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ad2:	2800      	cmp	r0, #0
24010ad4:	d172      	bne.n	24010bbc <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
24010ada:	f10a 0b01 	add.w	fp, sl, #1
24010ade:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010ae2:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
24010ae6:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
24010ae8:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
24010aea:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
24010aee:	d004      	beq.n	24010afa <dir_sdi+0x82>
24010af0:	4638      	mov	r0, r7
24010af2:	f7ff f98d 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
24010af6:	2800      	cmp	r0, #0
24010af8:	d160      	bne.n	24010bbc <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
24010afa:	f3cb 0b08 	ubfx	fp, fp, #0, #9
24010afe:	445f      	add	r7, fp
24010b00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
24010b04:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010b08:	07eb      	lsls	r3, r5, #31
24010b0a:	d568      	bpl.n	24010bde <dir_sdi+0x166>
24010b0c:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
24010b10:	2d01      	cmp	r5, #1
24010b12:	d90b      	bls.n	24010b2c <dir_sdi+0xb4>
24010b14:	f8d8 3018 	ldr.w	r3, [r8, #24]
24010b18:	42ab      	cmp	r3, r5
24010b1a:	d907      	bls.n	24010b2c <dir_sdi+0xb4>
			ofs -= csz;
24010b1c:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
24010b20:	45a1      	cmp	r9, r4
24010b22:	d850      	bhi.n	24010bc6 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
24010b24:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24010b26:	69bb      	ldr	r3, [r7, #24]
24010b28:	42ab      	cmp	r3, r5
24010b2a:	d8c0      	bhi.n	24010aae <dir_sdi+0x36>
		switch (fs->fs_type) {
24010b2c:	2002      	movs	r0, #2
}
24010b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
24010b32:	f898 3000 	ldrb.w	r3, [r8]
24010b36:	2b02      	cmp	r3, #2
24010b38:	d818      	bhi.n	24010b6c <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
24010b3a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
24010b3e:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
24010b42:	d9f3      	bls.n	24010b2c <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
24010b44:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
24010b48:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
24010b4a:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
24010b4c:	2a00      	cmp	r2, #0
24010b4e:	d0ed      	beq.n	24010b2c <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
24010b50:	f108 0834 	add.w	r8, r8, #52	; 0x34
24010b54:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
24010b58:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
24010b5c:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
24010b5e:	4443      	add	r3, r8
24010b60:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
24010b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
24010b68:	2002      	movs	r0, #2
}
24010b6a:	4770      	bx	lr
		clst = fs->dirbase;
24010b6c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
24010b70:	2b00      	cmp	r3, #0
24010b72:	d0e2      	beq.n	24010b3a <dir_sdi+0xc2>
24010b74:	461d      	mov	r5, r3
24010b76:	e78e      	b.n	24010a96 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
24010b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
24010b7c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
24010b80:	4299      	cmp	r1, r3
24010b82:	d003      	beq.n	24010b8c <dir_sdi+0x114>
24010b84:	4638      	mov	r0, r7
24010b86:	f7ff f943 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
24010b8a:	b9b8      	cbnz	r0, 24010bbc <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24010b8c:	00ad      	lsls	r5, r5, #2
24010b8e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24010b92:	442f      	add	r7, r5
24010b94:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24010b96:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
24010b9a:	e7b9      	b.n	24010b10 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010ba0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
24010ba4:	4299      	cmp	r1, r3
24010ba6:	d003      	beq.n	24010bb0 <dir_sdi+0x138>
24010ba8:	4638      	mov	r0, r7
24010baa:	f7ff f931 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24010bae:	b928      	cbnz	r0, 24010bbc <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
24010bb0:	006d      	lsls	r5, r5, #1
24010bb2:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
24010bb6:	442f      	add	r7, r5
24010bb8:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
24010bba:	e7a9      	b.n	24010b10 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
24010bbc:	2001      	movs	r0, #1
}
24010bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010bc2:	f8d8 3018 	ldr.w	r3, [r8, #24]
24010bc6:	3b02      	subs	r3, #2
	clst -= 2;
24010bc8:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010bca:	4299      	cmp	r1, r3
24010bcc:	d20a      	bcs.n	24010be4 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
24010bce:	f8b8 300a 	ldrh.w	r3, [r8, #10]
24010bd2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
24010bd6:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
24010bda:	61f2      	str	r2, [r6, #28]
24010bdc:	e7b5      	b.n	24010b4a <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24010bde:	f3ca 050b 	ubfx	r5, sl, #0, #12
24010be2:	e795      	b.n	24010b10 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
24010be4:	2300      	movs	r3, #0
24010be6:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
24010bea:	e79f      	b.n	24010b2c <dir_sdi+0xb4>

24010bec <dir_find>:
{
24010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
24010bf0:	2100      	movs	r1, #0
{
24010bf2:	b085      	sub	sp, #20
24010bf4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
24010bf6:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
24010bfa:	f7ff ff3d 	bl	24010a78 <dir_sdi>
	if (res != FR_OK) return res;
24010bfe:	4607      	mov	r7, r0
24010c00:	b9e8      	cbnz	r0, 24010c3e <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
24010c02:	f04f 09ff 	mov.w	r9, #255	; 0xff
24010c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
24010c0a:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010c0c:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
24010c0e:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
24010c10:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
24010c14:	42b5      	cmp	r5, r6
24010c16:	d018      	beq.n	24010c4a <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
24010c18:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010c1c:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
24010c20:	2b00      	cmp	r3, #0
24010c22:	f040 8088 	bne.w	24010d36 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
24010c26:	2301      	movs	r3, #1
24010c28:	4632      	mov	r2, r6
24010c2a:	f898 0001 	ldrb.w	r0, [r8, #1]
24010c2e:	f7fe ff41 	bl	2400fab4 <disk_read>
24010c32:	b140      	cbz	r0, 24010c46 <dir_find+0x5a>
			fs->winsect = sector;
24010c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
24010c38:	2701      	movs	r7, #1
			fs->winsect = sector;
24010c3a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
24010c3e:	4638      	mov	r0, r7
24010c40:	b005      	add	sp, #20
24010c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
24010c46:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
24010c4a:	6a26      	ldr	r6, [r4, #32]
24010c4c:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
24010c4e:	b34d      	cbz	r5, 24010ca4 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
24010c50:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
24010c52:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
24010c54:	f002 033f 	and.w	r3, r2, #63	; 0x3f
24010c58:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
24010c5a:	d004      	beq.n	24010c66 <dir_find+0x7a>
24010c5c:	0717      	lsls	r7, r2, #28
24010c5e:	d526      	bpl.n	24010cae <dir_find+0xc2>
24010c60:	2b0f      	cmp	r3, #15
24010c62:	f000 8094 	beq.w	24010d8e <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
24010c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
24010c6a:	f04f 0aff 	mov.w	sl, #255	; 0xff
24010c6e:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010c70:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010c72:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24010c74:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24010c76:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
24010c7a:	d213      	bcs.n	24010ca4 <dir_find+0xb8>
24010c7c:	b196      	cbz	r6, 24010ca4 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010c7e:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
24010c82:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24010c84:	b94b      	cbnz	r3, 24010c9a <dir_find+0xae>
		dp->sect++;				/* Next sector */
24010c86:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
24010c88:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
24010c8a:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
24010c8c:	2900      	cmp	r1, #0
24010c8e:	d15e      	bne.n	24010d4e <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
24010c90:	893a      	ldrh	r2, [r7, #8]
24010c92:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
24010c96:	f240 8134 	bls.w	24010f02 <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010c9a:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
24010c9c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24010c9e:	443b      	add	r3, r7
24010ca0:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
24010ca2:	e7b5      	b.n	24010c10 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
24010ca4:	2704      	movs	r7, #4
}
24010ca6:	4638      	mov	r0, r7
24010ca8:	b005      	add	sp, #20
24010caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
24010cae:	2b0f      	cmp	r3, #15
24010cb0:	d06d      	beq.n	24010d8e <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
24010cb2:	f1ba 0f00 	cmp.w	sl, #0
24010cb6:	f000 80d6 	beq.w	24010e66 <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
24010cba:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
24010cbe:	f01a 0a01 	ands.w	sl, sl, #1
24010cc2:	d1d0      	bne.n	24010c66 <dir_find+0x7a>
	} while (--cnt && r == 0);
24010cc4:	7832      	ldrb	r2, [r6, #0]
24010cc6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
24010cca:	429a      	cmp	r2, r3
24010ccc:	d1cb      	bne.n	24010c66 <dir_find+0x7a>
24010cce:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24010cd2:	7873      	ldrb	r3, [r6, #1]
24010cd4:	429a      	cmp	r2, r3
24010cd6:	d1c6      	bne.n	24010c66 <dir_find+0x7a>
24010cd8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
24010cdc:	78b3      	ldrb	r3, [r6, #2]
24010cde:	429a      	cmp	r2, r3
24010ce0:	d1c1      	bne.n	24010c66 <dir_find+0x7a>
24010ce2:	78f2      	ldrb	r2, [r6, #3]
24010ce4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
24010ce8:	429a      	cmp	r2, r3
24010cea:	d1bc      	bne.n	24010c66 <dir_find+0x7a>
24010cec:	7932      	ldrb	r2, [r6, #4]
24010cee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
24010cf2:	429a      	cmp	r2, r3
24010cf4:	d1b7      	bne.n	24010c66 <dir_find+0x7a>
24010cf6:	7972      	ldrb	r2, [r6, #5]
24010cf8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
24010cfc:	429a      	cmp	r2, r3
24010cfe:	d1b2      	bne.n	24010c66 <dir_find+0x7a>
24010d00:	79b2      	ldrb	r2, [r6, #6]
24010d02:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
24010d06:	429a      	cmp	r2, r3
24010d08:	d1ad      	bne.n	24010c66 <dir_find+0x7a>
24010d0a:	79f2      	ldrb	r2, [r6, #7]
24010d0c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
24010d10:	429a      	cmp	r2, r3
24010d12:	d1a8      	bne.n	24010c66 <dir_find+0x7a>
24010d14:	7a32      	ldrb	r2, [r6, #8]
24010d16:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
24010d1a:	429a      	cmp	r2, r3
24010d1c:	d1a3      	bne.n	24010c66 <dir_find+0x7a>
24010d1e:	7a72      	ldrb	r2, [r6, #9]
24010d20:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
24010d24:	429a      	cmp	r2, r3
24010d26:	d19e      	bne.n	24010c66 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
24010d28:	7ab2      	ldrb	r2, [r6, #10]
24010d2a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
24010d2e:	429a      	cmp	r2, r3
24010d30:	d199      	bne.n	24010c66 <dir_find+0x7a>
24010d32:	4657      	mov	r7, sl
24010d34:	e783      	b.n	24010c3e <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24010d36:	2301      	movs	r3, #1
24010d38:	462a      	mov	r2, r5
24010d3a:	f898 0001 	ldrb.w	r0, [r8, #1]
24010d3e:	9100      	str	r1, [sp, #0]
24010d40:	f7fe fec6 	bl	2400fad0 <disk_write>
24010d44:	9900      	ldr	r1, [sp, #0]
24010d46:	2800      	cmp	r0, #0
24010d48:	d06d      	beq.n	24010e26 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
24010d4a:	2701      	movs	r7, #1
24010d4c:	e777      	b.n	24010c3e <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
24010d4e:	897a      	ldrh	r2, [r7, #10]
24010d50:	3a01      	subs	r2, #1
24010d52:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
24010d56:	d1a0      	bne.n	24010c9a <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
24010d58:	4638      	mov	r0, r7
24010d5a:	9300      	str	r3, [sp, #0]
24010d5c:	f7ff faa4 	bl	240102a8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
24010d60:	2801      	cmp	r0, #1
24010d62:	f240 80d2 	bls.w	24010f0a <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
24010d66:	1c43      	adds	r3, r0, #1
24010d68:	d0ef      	beq.n	24010d4a <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
24010d6a:	69ba      	ldr	r2, [r7, #24]
24010d6c:	4290      	cmp	r0, r2
24010d6e:	f080 80c8 	bcs.w	24010f02 <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
24010d72:	61a0      	str	r0, [r4, #24]
	clst -= 2;
24010d74:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010d76:	69ba      	ldr	r2, [r7, #24]
24010d78:	9b00      	ldr	r3, [sp, #0]
24010d7a:	3a02      	subs	r2, #2
24010d7c:	4290      	cmp	r0, r2
24010d7e:	f080 80c6 	bcs.w	24010f0e <dir_find+0x322>
	return clst * fs->csize + fs->database;
24010d82:	897a      	ldrh	r2, [r7, #10]
24010d84:	6afe      	ldr	r6, [r7, #44]	; 0x2c
24010d86:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
24010d8a:	61e6      	str	r6, [r4, #28]
24010d8c:	e785      	b.n	24010c9a <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
24010d8e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
24010d92:	0658      	lsls	r0, r3, #25
24010d94:	f53f af6c 	bmi.w	24010c70 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
24010d98:	0669      	lsls	r1, r5, #25
24010d9a:	d53f      	bpl.n	24010e1c <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
24010d9c:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
24010d9e:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
24010da2:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
24010da6:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010da8:	7b73      	ldrb	r3, [r6, #13]
24010daa:	454b      	cmp	r3, r9
24010dac:	d138      	bne.n	24010e20 <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
24010dae:	8b73      	ldrh	r3, [r6, #26]
24010db0:	bbb3      	cbnz	r3, 24010e20 <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
24010db2:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
24010db4:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010db6:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
24010dba:	f007 073f 	and.w	r7, r7, #63	; 0x3f
24010dbe:	f8df a178 	ldr.w	sl, [pc, #376]	; 24010f38 <dir_find+0x34c>
24010dc2:	9502      	str	r5, [sp, #8]
24010dc4:	4615      	mov	r5, r2
24010dc6:	3f01      	subs	r7, #1
24010dc8:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010dcc:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
24010dce:	eb07 0347 	add.w	r3, r7, r7, lsl #1
24010dd2:	f8cd 8000 	str.w	r8, [sp]
24010dd6:	9401      	str	r4, [sp, #4]
24010dd8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
24010ddc:	e010      	b.n	24010e00 <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
24010dde:	2ffe      	cmp	r7, #254	; 0xfe
24010de0:	4620      	mov	r0, r4
24010de2:	d816      	bhi.n	24010e12 <dir_find+0x226>
24010de4:	f001 fe1e 	bl	24012a24 <ff_wtoupper>
24010de8:	4680      	mov	r8, r0
24010dea:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
24010dee:	3701      	adds	r7, #1
24010df0:	f001 fe18 	bl	24012a24 <ff_wtoupper>
24010df4:	4580      	cmp	r8, r0
24010df6:	4621      	mov	r1, r4
24010df8:	d10b      	bne.n	24010e12 <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
24010dfa:	45d3      	cmp	fp, sl
24010dfc:	f000 8089 	beq.w	24010f12 <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
24010e00:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
24010e04:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
24010e06:	2900      	cmp	r1, #0
24010e08:	d1e9      	bne.n	24010dde <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
24010e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
24010e0e:	429c      	cmp	r4, r3
24010e10:	d0f3      	beq.n	24010dfa <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010e12:	e9dd 8400 	ldrd	r8, r4, [sp]
24010e16:	f04f 0aff 	mov.w	sl, #255	; 0xff
24010e1a:	e729      	b.n	24010c70 <dir_find+0x84>
24010e1c:	45aa      	cmp	sl, r5
24010e1e:	d0c3      	beq.n	24010da8 <dir_find+0x1bc>
24010e20:	f04f 0aff 	mov.w	sl, #255	; 0xff
24010e24:	e724      	b.n	24010c70 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24010e26:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
24010e2a:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24010e2e:	1aea      	subs	r2, r5, r3
24010e30:	f8d8 301c 	ldr.w	r3, [r8, #28]
24010e34:	429a      	cmp	r2, r3
24010e36:	f4bf aef6 	bcs.w	24010c26 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010e3a:	f898 7002 	ldrb.w	r7, [r8, #2]
24010e3e:	2f01      	cmp	r7, #1
24010e40:	f67f aef1 	bls.w	24010c26 <dir_find+0x3a>
24010e44:	468b      	mov	fp, r1
24010e46:	e001      	b.n	24010e4c <dir_find+0x260>
					wsect += fs->fsize;
24010e48:	f8d8 301c 	ldr.w	r3, [r8, #28]
24010e4c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010e4e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
24010e50:	2301      	movs	r3, #1
24010e52:	4659      	mov	r1, fp
24010e54:	462a      	mov	r2, r5
24010e56:	f898 0001 	ldrb.w	r0, [r8, #1]
24010e5a:	f7fe fe39 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24010e5e:	2f01      	cmp	r7, #1
24010e60:	d1f2      	bne.n	24010e48 <dir_find+0x25c>
24010e62:	4659      	mov	r1, fp
24010e64:	e6df      	b.n	24010c26 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
24010e66:	7830      	ldrb	r0, [r6, #0]
24010e68:	7872      	ldrb	r2, [r6, #1]
24010e6a:	01c1      	lsls	r1, r0, #7
24010e6c:	78b3      	ldrb	r3, [r6, #2]
24010e6e:	f896 b003 	ldrb.w	fp, [r6, #3]
24010e72:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
24010e76:	7937      	ldrb	r7, [r6, #4]
24010e78:	f896 e005 	ldrb.w	lr, [r6, #5]
24010e7c:	4411      	add	r1, r2
24010e7e:	f896 c006 	ldrb.w	ip, [r6, #6]
24010e82:	7a32      	ldrb	r2, [r6, #8]
24010e84:	f3c1 0046 	ubfx	r0, r1, #1, #7
24010e88:	7a75      	ldrb	r5, [r6, #9]
24010e8a:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
24010e8e:	fa53 f180 	uxtab	r1, r3, r0
24010e92:	79f3      	ldrb	r3, [r6, #7]
24010e94:	f3c1 0046 	ubfx	r0, r1, #1, #7
24010e98:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
24010e9c:	7ab1      	ldrb	r1, [r6, #10]
24010e9e:	fa5b fb80 	uxtab	fp, fp, r0
24010ea2:	f3cb 0046 	ubfx	r0, fp, #1, #7
24010ea6:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
24010eaa:	fa57 f780 	uxtab	r7, r7, r0
24010eae:	f3c7 0046 	ubfx	r0, r7, #1, #7
24010eb2:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
24010eb6:	fa5e f080 	uxtab	r0, lr, r0
24010eba:	f3c0 0746 	ubfx	r7, r0, #1, #7
24010ebe:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
24010ec2:	fa5c f780 	uxtab	r7, ip, r0
24010ec6:	f3c7 0046 	ubfx	r0, r7, #1, #7
24010eca:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
24010ece:	fa53 f080 	uxtab	r0, r3, r0
24010ed2:	f3c0 0346 	ubfx	r3, r0, #1, #7
24010ed6:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
24010eda:	fa52 f383 	uxtab	r3, r2, r3
24010ede:	f3c3 0246 	ubfx	r2, r3, #1, #7
24010ee2:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
24010ee6:	fa55 f283 	uxtab	r2, r5, r3
24010eea:	f3c2 0346 	ubfx	r3, r2, #1, #7
24010eee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24010ef2:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
24010ef6:	b2db      	uxtb	r3, r3
24010ef8:	4599      	cmp	r9, r3
24010efa:	f47f aede 	bne.w	24010cba <dir_find+0xce>
24010efe:	4657      	mov	r7, sl
24010f00:	e69d      	b.n	24010c3e <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
24010f02:	2300      	movs	r3, #0
24010f04:	2704      	movs	r7, #4
24010f06:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
24010f08:	e699      	b.n	24010c3e <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
24010f0a:	2702      	movs	r7, #2
24010f0c:	e697      	b.n	24010c3e <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010f0e:	461e      	mov	r6, r3
24010f10:	e73b      	b.n	24010d8a <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
24010f12:	7833      	ldrb	r3, [r6, #0]
24010f14:	f8dd 8000 	ldr.w	r8, [sp]
24010f18:	065a      	lsls	r2, r3, #25
24010f1a:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
24010f1e:	d500      	bpl.n	24010f22 <dir_find+0x336>
24010f20:	b919      	cbnz	r1, 24010f2a <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
24010f22:	3d01      	subs	r5, #1
24010f24:	fa5f fa85 	uxtb.w	sl, r5
24010f28:	e6a2      	b.n	24010c70 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
24010f2a:	9b03      	ldr	r3, [sp, #12]
24010f2c:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
24010f30:	2b00      	cmp	r3, #0
24010f32:	d0f6      	beq.n	24010f22 <dir_find+0x336>
24010f34:	e774      	b.n	24010e20 <dir_find+0x234>
24010f36:	bf00      	nop
24010f38:	2401d14c 	.word	0x2401d14c

24010f3c <follow_path>:
{
24010f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
24010f40:	780b      	ldrb	r3, [r1, #0]
{
24010f42:	b083      	sub	sp, #12
24010f44:	4688      	mov	r8, r1
24010f46:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
24010f48:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
24010f4a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
24010f4e:	d103      	bne.n	24010f58 <follow_path+0x1c>
24010f50:	f818 3f01 	ldrb.w	r3, [r8, #1]!
24010f54:	2b2f      	cmp	r3, #47	; 0x2f
24010f56:	d0fb      	beq.n	24010f50 <follow_path+0x14>
24010f58:	2b5c      	cmp	r3, #92	; 0x5c
24010f5a:	d0f9      	beq.n	24010f50 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
24010f5c:	2100      	movs	r1, #0
24010f5e:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
24010f60:	f898 3000 	ldrb.w	r3, [r8]
24010f64:	2b1f      	cmp	r3, #31
24010f66:	f240 8148 	bls.w	240111fa <follow_path+0x2be>
24010f6a:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
24010f6c:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
24010f6e:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
24010f70:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
24010f72:	d929      	bls.n	24010fc8 <follow_path+0x8c>
24010f74:	f1a5 0902 	sub.w	r9, r5, #2
24010f78:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
24010f7a:	2401      	movs	r4, #1
24010f7c:	e008      	b.n	24010f90 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
24010f7e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
24010f82:	1c63      	adds	r3, r4, #1
24010f84:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
24010f88:	281f      	cmp	r0, #31
24010f8a:	f240 80f7 	bls.w	2401117c <follow_path+0x240>
		w = p[si++];					/* Get a character */
24010f8e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
24010f90:	282f      	cmp	r0, #47	; 0x2f
24010f92:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
24010f96:	d01d      	beq.n	24010fd4 <follow_path+0x98>
24010f98:	285c      	cmp	r0, #92	; 0x5c
24010f9a:	d01b      	beq.n	24010fd4 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
24010f9c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
24010fa0:	d00e      	beq.n	24010fc0 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
24010fa2:	2101      	movs	r1, #1
24010fa4:	f001 fd20 	bl	240129e8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
24010fa8:	b150      	cbz	r0, 24010fc0 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
24010faa:	287f      	cmp	r0, #127	; 0x7f
24010fac:	d8e7      	bhi.n	24010f7e <follow_path+0x42>
	while (*str && *str != chr) str++;
24010fae:	2322      	movs	r3, #34	; 0x22
24010fb0:	4aa5      	ldr	r2, [pc, #660]	; (24011248 <follow_path+0x30c>)
24010fb2:	e003      	b.n	24010fbc <follow_path+0x80>
24010fb4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
24010fb8:	2b00      	cmp	r3, #0
24010fba:	d0e0      	beq.n	24010f7e <follow_path+0x42>
24010fbc:	4298      	cmp	r0, r3
24010fbe:	d1f9      	bne.n	24010fb4 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
24010fc0:	2006      	movs	r0, #6
}
24010fc2:	b003      	add	sp, #12
24010fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
24010fc8:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
24010fca:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
24010fcc:	802b      	strh	r3, [r5, #0]
}
24010fce:	b003      	add	sp, #12
24010fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
24010fd4:	f818 3004 	ldrb.w	r3, [r8, r4]
24010fd8:	eb08 0204 	add.w	r2, r8, r4
24010fdc:	2b5c      	cmp	r3, #92	; 0x5c
24010fde:	d002      	beq.n	24010fe6 <follow_path+0xaa>
24010fe0:	2b2f      	cmp	r3, #47	; 0x2f
24010fe2:	f040 811f 	bne.w	24011224 <follow_path+0x2e8>
24010fe6:	1c63      	adds	r3, r4, #1
24010fe8:	4443      	add	r3, r8
24010fea:	4698      	mov	r8, r3
24010fec:	f813 2b01 	ldrb.w	r2, [r3], #1
24010ff0:	2a2f      	cmp	r2, #47	; 0x2f
24010ff2:	d0fa      	beq.n	24010fea <follow_path+0xae>
24010ff4:	2a5c      	cmp	r2, #92	; 0x5c
24010ff6:	d0f8      	beq.n	24010fea <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
24010ff8:	f1ba 0f00 	cmp.w	sl, #0
24010ffc:	d0e4      	beq.n	24010fc8 <follow_path+0x8c>
24010ffe:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
24011000:	2400      	movs	r4, #0
24011002:	eb05 024a 	add.w	r2, r5, sl, lsl #1
24011006:	e002      	b.n	2401100e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
24011008:	f1ba 0a01 	subs.w	sl, sl, #1
2401100c:	d0dc      	beq.n	24010fc8 <follow_path+0x8c>
		w = lfn[di - 1];
2401100e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
24011012:	2b20      	cmp	r3, #32
24011014:	d0f8      	beq.n	24011008 <follow_path+0xcc>
24011016:	2b2e      	cmp	r3, #46	; 0x2e
24011018:	d0f6      	beq.n	24011008 <follow_path+0xcc>
		*d++ = (BYTE)val;
2401101a:	2320      	movs	r3, #32
2401101c:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
24011020:	2100      	movs	r1, #0
24011022:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
24011026:	627a      	str	r2, [r7, #36]	; 0x24
24011028:	62ba      	str	r2, [r7, #40]	; 0x28
2401102a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2401102e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
24011032:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
24011036:	8828      	ldrh	r0, [r5, #0]
24011038:	282e      	cmp	r0, #46	; 0x2e
2401103a:	d002      	beq.n	24011042 <follow_path+0x106>
2401103c:	4298      	cmp	r0, r3
2401103e:	f040 80e5 	bne.w	2401120c <follow_path+0x2d0>
24011042:	462a      	mov	r2, r5
24011044:	2300      	movs	r3, #0
24011046:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2401104a:	461c      	mov	r4, r3
2401104c:	3301      	adds	r3, #1
2401104e:	2820      	cmp	r0, #32
24011050:	d0f9      	beq.n	24011046 <follow_path+0x10a>
24011052:	282e      	cmp	r0, #46	; 0x2e
24011054:	d0f7      	beq.n	24011046 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
24011056:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
24011058:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2401105c:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
24011060:	2a2e      	cmp	r2, #46	; 0x2e
24011062:	d002      	beq.n	2401106a <follow_path+0x12e>
24011064:	f1ba 0a01 	subs.w	sl, sl, #1
24011068:	d1f8      	bne.n	2401105c <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2401106a:	b3b0      	cbz	r0, 240110da <follow_path+0x19e>
2401106c:	2208      	movs	r2, #8
2401106e:	4641      	mov	r1, r8
24011070:	2300      	movs	r3, #0
24011072:	46b8      	mov	r8, r7
24011074:	462f      	mov	r7, r5
24011076:	4615      	mov	r5, r2
24011078:	4699      	mov	r9, r3
2401107a:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2401107c:	2820      	cmp	r0, #32
2401107e:	d003      	beq.n	24011088 <follow_path+0x14c>
24011080:	282e      	cmp	r0, #46	; 0x2e
24011082:	d14d      	bne.n	24011120 <follow_path+0x1e4>
24011084:	45a2      	cmp	sl, r4
24011086:	d04b      	beq.n	24011120 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
24011088:	f046 0603 	orr.w	r6, r6, #3
2401108c:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2401108e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
24011092:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
24011094:	2800      	cmp	r0, #0
24011096:	d1f1      	bne.n	2401107c <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
24011098:	4647      	mov	r7, r8
2401109a:	4690      	mov	r8, r2
2401109c:	462a      	mov	r2, r5
2401109e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
240110a2:	29e5      	cmp	r1, #229	; 0xe5
240110a4:	d102      	bne.n	240110ac <follow_path+0x170>
240110a6:	2105      	movs	r1, #5
240110a8:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
240110ac:	2a08      	cmp	r2, #8
240110ae:	f000 8093 	beq.w	240111d8 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
240110b2:	f003 020c 	and.w	r2, r3, #12
240110b6:	2a0c      	cmp	r2, #12
240110b8:	d065      	beq.n	24011186 <follow_path+0x24a>
240110ba:	f003 0303 	and.w	r3, r3, #3
240110be:	2b03      	cmp	r3, #3
240110c0:	d061      	beq.n	24011186 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
240110c2:	07b1      	lsls	r1, r6, #30
240110c4:	d409      	bmi.n	240110da <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
240110c6:	2b01      	cmp	r3, #1
240110c8:	d102      	bne.n	240110d0 <follow_path+0x194>
240110ca:	f046 0610 	orr.w	r6, r6, #16
240110ce:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
240110d0:	2a04      	cmp	r2, #4
240110d2:	d102      	bne.n	240110da <follow_path+0x19e>
240110d4:	f046 0608 	orr.w	r6, r6, #8
240110d8:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
240110da:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
240110dc:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
240110e0:	f7ff fd84 	bl	24010bec <dir_find>
			ns = dp->fn[NSFLAG];
240110e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
240110e8:	2800      	cmp	r0, #0
240110ea:	d158      	bne.n	2401119e <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
240110ec:	075a      	lsls	r2, r3, #29
240110ee:	f53f af68 	bmi.w	24010fc2 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
240110f2:	79bb      	ldrb	r3, [r7, #6]
240110f4:	06db      	lsls	r3, r3, #27
240110f6:	f140 8097 	bpl.w	24011228 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
240110fa:	697a      	ldr	r2, [r7, #20]
240110fc:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
24011100:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
24011104:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
24011108:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2401110a:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2401110c:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2401110e:	d102      	bne.n	24011116 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24011110:	8a9b      	ldrh	r3, [r3, #20]
24011112:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
24011116:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
24011118:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2401111a:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2401111e:	e725      	b.n	24010f6c <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
24011120:	454d      	cmp	r5, r9
24011122:	d91c      	bls.n	2401115e <follow_path+0x222>
24011124:	ebaa 0104 	sub.w	r1, sl, r4
24011128:	fab1 f181 	clz	r1, r1
2401112c:	0949      	lsrs	r1, r1, #5
2401112e:	b9b1      	cbnz	r1, 2401115e <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
24011130:	287f      	cmp	r0, #127	; 0x7f
24011132:	d83c      	bhi.n	240111ae <follow_path+0x272>
	while (*str && *str != chr) str++;
24011134:	212b      	movs	r1, #43	; 0x2b
24011136:	f8df c118 	ldr.w	ip, [pc, #280]	; 24011250 <follow_path+0x314>
2401113a:	e003      	b.n	24011144 <follow_path+0x208>
2401113c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
24011140:	2900      	cmp	r1, #0
24011142:	d052      	beq.n	240111ea <follow_path+0x2ae>
24011144:	4281      	cmp	r1, r0
24011146:	d1f9      	bne.n	2401113c <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
24011148:	f046 0603 	orr.w	r6, r6, #3
2401114c:	205f      	movs	r0, #95	; 0x5f
2401114e:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
24011150:	eb08 0109 	add.w	r1, r8, r9
24011154:	f109 0901 	add.w	r9, r9, #1
24011158:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2401115c:	e797      	b.n	2401108e <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2401115e:	2d0b      	cmp	r5, #11
24011160:	d064      	beq.n	2401122c <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
24011162:	45a2      	cmp	sl, r4
24011164:	d003      	beq.n	2401116e <follow_path+0x232>
24011166:	f046 0603 	orr.w	r6, r6, #3
2401116a:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2401116c:	d394      	bcc.n	24011098 <follow_path+0x15c>
			b <<= 2; continue;
2401116e:	009b      	lsls	r3, r3, #2
24011170:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
24011172:	250b      	movs	r5, #11
24011174:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
24011178:	b2db      	uxtb	r3, r3
2401117a:	e788      	b.n	2401108e <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2401117c:	46a2      	mov	sl, r4
2401117e:	4498      	add	r8, r3
24011180:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
24011182:	2404      	movs	r4, #4
24011184:	e73d      	b.n	24011002 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
24011186:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2401118a:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2401118c:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2401118e:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
24011192:	f7ff fd2b 	bl	24010bec <dir_find>
			ns = dp->fn[NSFLAG];
24011196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2401119a:	2800      	cmp	r0, #0
2401119c:	d0a6      	beq.n	240110ec <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2401119e:	2804      	cmp	r0, #4
240111a0:	f47f af0f 	bne.w	24010fc2 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
240111a4:	f013 0f04 	tst.w	r3, #4
240111a8:	bf08      	it	eq
240111aa:	2005      	moveq	r0, #5
240111ac:	e709      	b.n	24010fc2 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
240111ae:	e9cd 3200 	strd	r3, r2, [sp]
240111b2:	f001 fc19 	bl	240129e8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240111b6:	e9dd 3200 	ldrd	r3, r2, [sp]
240111ba:	b918      	cbnz	r0, 240111c4 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
240111bc:	f046 0602 	orr.w	r6, r6, #2
240111c0:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
240111c2:	e7c1      	b.n	24011148 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240111c4:	4921      	ldr	r1, [pc, #132]	; (2401124c <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
240111c6:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240111ca:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
240111cc:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
240111ce:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
240111d2:	2800      	cmp	r0, #0
240111d4:	d0b8      	beq.n	24011148 <follow_path+0x20c>
240111d6:	e7ad      	b.n	24011134 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
240111d8:	009b      	lsls	r3, r3, #2
240111da:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
240111de:	2a0c      	cmp	r2, #12
240111e0:	d0d1      	beq.n	24011186 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
240111e2:	07b0      	lsls	r0, r6, #30
240111e4:	f57f af74 	bpl.w	240110d0 <follow_path+0x194>
240111e8:	e777      	b.n	240110da <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
240111ea:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
240111ee:	2919      	cmp	r1, #25
240111f0:	d80f      	bhi.n	24011212 <follow_path+0x2d6>
					b |= 2;
240111f2:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
240111f6:	b2c0      	uxtb	r0, r0
240111f8:	e7aa      	b.n	24011150 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
240111fa:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
240111fc:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
240111fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
24011202:	b003      	add	sp, #12
24011204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
24011208:	f7ff bc36 	b.w	24010a78 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2401120c:	4626      	mov	r6, r4
2401120e:	2401      	movs	r4, #1
24011210:	e722      	b.n	24011058 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
24011212:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
24011216:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
24011218:	bf9c      	itt	ls
2401121a:	3820      	subls	r0, #32
2401121c:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
24011220:	b2c0      	uxtb	r0, r0
24011222:	e795      	b.n	24011150 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
24011224:	4690      	mov	r8, r2
24011226:	e6e7      	b.n	24010ff8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
24011228:	2005      	movs	r0, #5
2401122a:	e6ca      	b.n	24010fc2 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2401122c:	4647      	mov	r7, r8
2401122e:	4690      	mov	r8, r2
24011230:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
24011234:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
24011238:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2401123a:	2ae5      	cmp	r2, #229	; 0xe5
2401123c:	f47f af39 	bne.w	240110b2 <follow_path+0x176>
24011240:	2205      	movs	r2, #5
24011242:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
24011246:	e734      	b.n	240110b2 <follow_path+0x176>
24011248:	2401d0b8 	.word	0x2401d0b8
2401124c:	2401d0cc 	.word	0x2401d0cc
24011250:	2401d0c4 	.word	0x2401d0c4

24011254 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
24011254:	2901      	cmp	r1, #1
{
24011256:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2401125a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2401125c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2401125e:	d90f      	bls.n	24011280 <remove_chain+0x2c>
24011260:	69ab      	ldr	r3, [r5, #24]
24011262:	428b      	cmp	r3, r1
24011264:	d90c      	bls.n	24011280 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
24011266:	4606      	mov	r6, r0
24011268:	4611      	mov	r1, r2
2401126a:	b962      	cbnz	r2, 24011286 <remove_chain+0x32>
2401126c:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2401126e:	429c      	cmp	r4, r3
24011270:	d206      	bcs.n	24011280 <remove_chain+0x2c>
		switch (fs->fs_type) {
24011272:	783b      	ldrb	r3, [r7, #0]
24011274:	2b02      	cmp	r3, #2
24011276:	d072      	beq.n	2401135e <remove_chain+0x10a>
24011278:	2b03      	cmp	r3, #3
2401127a:	d05d      	beq.n	24011338 <remove_chain+0xe4>
2401127c:	2b01      	cmp	r3, #1
2401127e:	d010      	beq.n	240112a2 <remove_chain+0x4e>
24011280:	2002      	movs	r0, #2
}
24011282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
24011286:	4293      	cmp	r3, r2
24011288:	d9fa      	bls.n	24011280 <remove_chain+0x2c>
2401128a:	2a01      	cmp	r2, #1
2401128c:	d0f8      	beq.n	24011280 <remove_chain+0x2c>
2401128e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24011292:	4628      	mov	r0, r5
24011294:	f7fe ff6e 	bl	24010174 <put_fat.part.0>
		if (res != FR_OK) return res;
24011298:	2800      	cmp	r0, #0
2401129a:	d1f2      	bne.n	24011282 <remove_chain+0x2e>
2401129c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2401129e:	69bb      	ldr	r3, [r7, #24]
240112a0:	e7e5      	b.n	2401126e <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
240112a2:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240112a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112aa:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
240112ae:	4291      	cmp	r1, r2
240112b0:	d006      	beq.n	240112c0 <remove_chain+0x6c>
240112b2:	4638      	mov	r0, r7
240112b4:	f7fe fdac 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112b8:	2800      	cmp	r0, #0
240112ba:	d161      	bne.n	24011380 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
240112be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
240112c0:	f108 0901 	add.w	r9, r8, #1
240112c4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112c8:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
240112cc:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
240112ce:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
240112d0:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
240112d4:	d004      	beq.n	240112e0 <remove_chain+0x8c>
240112d6:	4638      	mov	r0, r7
240112d8:	f7fe fd9a 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
240112dc:	2800      	cmp	r0, #0
240112de:	d14f      	bne.n	24011380 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
240112e0:	f3c9 0908 	ubfx	r9, r9, #0, #9
240112e4:	444f      	add	r7, r9
240112e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
240112ea:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
240112ee:	07e3      	lsls	r3, r4, #31
240112f0:	d548      	bpl.n	24011384 <remove_chain+0x130>
240112f2:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
240112f6:	f1b8 0f00 	cmp.w	r8, #0
240112fa:	d046      	beq.n	2401138a <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
240112fc:	f1b8 0f01 	cmp.w	r8, #1
24011300:	d0be      	beq.n	24011280 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
24011302:	69ab      	ldr	r3, [r5, #24]
24011304:	42a3      	cmp	r3, r4
24011306:	d9bb      	bls.n	24011280 <remove_chain+0x2c>
24011308:	2200      	movs	r2, #0
2401130a:	4621      	mov	r1, r4
2401130c:	4628      	mov	r0, r5
2401130e:	f7fe ff31 	bl	24010174 <put_fat.part.0>
			if (res != FR_OK) return res;
24011312:	2800      	cmp	r0, #0
24011314:	d1b5      	bne.n	24011282 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
24011316:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2401131a:	1e91      	subs	r1, r2, #2
2401131c:	428b      	cmp	r3, r1
2401131e:	d205      	bcs.n	2401132c <remove_chain+0xd8>
			fs->free_clst++;
24011320:	3301      	adds	r3, #1
24011322:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
24011324:	792b      	ldrb	r3, [r5, #4]
24011326:	f043 0301 	orr.w	r3, r3, #1
2401132a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2401132c:	4542      	cmp	r2, r8
2401132e:	d92c      	bls.n	2401138a <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
24011330:	6837      	ldr	r7, [r6, #0]
24011332:	4644      	mov	r4, r8
24011334:	69bb      	ldr	r3, [r7, #24]
24011336:	e79a      	b.n	2401126e <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
24011338:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2401133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2401133c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
24011340:	4299      	cmp	r1, r3
24011342:	d003      	beq.n	2401134c <remove_chain+0xf8>
24011344:	4638      	mov	r0, r7
24011346:	f7fe fd63 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2401134a:	b9c8      	cbnz	r0, 24011380 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2401134c:	00a3      	lsls	r3, r4, #2
2401134e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
24011352:	441f      	add	r7, r3
24011354:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
24011358:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2401135c:	e7cb      	b.n	240112f6 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2401135e:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24011360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24011362:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
24011366:	4299      	cmp	r1, r3
24011368:	d003      	beq.n	24011372 <remove_chain+0x11e>
2401136a:	4638      	mov	r0, r7
2401136c:	f7fe fd50 	bl	2400fe10 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
24011370:	b930      	cbnz	r0, 24011380 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
24011372:	0063      	lsls	r3, r4, #1
24011374:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
24011378:	441f      	add	r7, r3
2401137a:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2401137e:	e7ba      	b.n	240112f6 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
24011380:	2001      	movs	r0, #1
24011382:	e77e      	b.n	24011282 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24011384:	f3c8 080b 	ubfx	r8, r8, #0, #12
24011388:	e7b5      	b.n	240112f6 <remove_chain+0xa2>
	return FR_OK;
2401138a:	2000      	movs	r0, #0
2401138c:	e779      	b.n	24011282 <remove_chain+0x2e>
2401138e:	bf00      	nop

24011390 <dir_register>:
{
24011390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
24011394:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
24011398:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2401139a:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
2401139e:	930a      	str	r3, [sp, #40]	; 0x28
240113a0:	f040 8358 	bne.w	24011a54 <dir_register+0x6c4>
	FATFS *fs = dp->obj.fs;
240113a4:	6803      	ldr	r3, [r0, #0]
240113a6:	4682      	mov	sl, r0
240113a8:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
240113aa:	68db      	ldr	r3, [r3, #12]
240113ac:	881f      	ldrh	r7, [r3, #0]
240113ae:	b12f      	cbz	r7, 240113bc <dir_register+0x2c>
240113b0:	4617      	mov	r7, r2
240113b2:	f833 2f02 	ldrh.w	r2, [r3, #2]!
240113b6:	3701      	adds	r7, #1
240113b8:	2a00      	cmp	r2, #0
240113ba:	d1fa      	bne.n	240113b2 <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
240113bc:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
240113c0:	ab12      	add	r3, sp, #72	; 0x48
240113c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
240113c6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
240113ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240113cc:	07d8      	lsls	r0, r3, #31
240113ce:	f100 8097 	bmi.w	24011500 <dir_register+0x170>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
240113d2:	f013 0302 	ands.w	r3, r3, #2
240113d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
240113da:	f000 829f 	beq.w	2401191c <dir_register+0x58c>
240113de:	4a75      	ldr	r2, [pc, #468]	; (240115b4 <dir_register+0x224>)
240113e0:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
240113e4:	2100      	movs	r1, #0
240113e6:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
240113e8:	fba2 2303 	umull	r2, r3, r2, r3
240113ec:	089b      	lsrs	r3, r3, #2
240113ee:	9302      	str	r3, [sp, #8]
240113f0:	3301      	adds	r3, #1
240113f2:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
240113f4:	f7ff fb40 	bl	24010a78 <dir_sdi>
	if (res == FR_OK) {
240113f8:	4683      	mov	fp, r0
240113fa:	2800      	cmp	r0, #0
240113fc:	f040 8299 	bne.w	24011932 <dir_register+0x5a2>
			res = move_window(fs, dp->sect);
24011400:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
24011404:	4680      	mov	r8, r0
						fs->wflag = 1;
24011406:	9006      	str	r0, [sp, #24]
24011408:	e029      	b.n	2401145e <dir_register+0xce>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2401140a:	fab3 f283 	clz	r2, r3
2401140e:	0952      	lsrs	r2, r2, #5
24011410:	b3a3      	cbz	r3, 2401147c <dir_register+0xec>
				n = 0;					/* Not a blank entry. Restart to search */
24011412:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
24011414:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
24011418:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2401141c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2401141e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
24011422:	f080 81ee 	bcs.w	24011802 <dir_register+0x472>
24011426:	2900      	cmp	r1, #0
24011428:	f000 81eb 	beq.w	24011802 <dir_register+0x472>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2401142c:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
24011430:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
24011434:	b967      	cbnz	r7, 24011450 <dir_register+0xc0>
		dp->sect++;				/* Next sector */
24011436:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
24011438:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2401143c:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
24011440:	2b00      	cmp	r3, #0
24011442:	f040 82cd 	bne.w	240119e0 <dir_register+0x650>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
24011446:	8922      	ldrh	r2, [r4, #8]
24011448:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2401144c:	f240 83bc 	bls.w	24011bc8 <dir_register+0x838>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011450:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
24011454:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
24011456:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2401145a:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2401145e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
24011462:	428b      	cmp	r3, r1
24011464:	d005      	beq.n	24011472 <dir_register+0xe2>
24011466:	4648      	mov	r0, r9
24011468:	f7fe fcd2 	bl	2400fe10 <move_window.part.0>
			if (res != FR_OK) break;
2401146c:	2800      	cmp	r0, #0
2401146e:	f040 83b3 	bne.w	24011bd8 <dir_register+0x848>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
24011472:	f8da 3020 	ldr.w	r3, [sl, #32]
24011476:	781b      	ldrb	r3, [r3, #0]
24011478:	2be5      	cmp	r3, #229	; 0xe5
2401147a:	d1c6      	bne.n	2401140a <dir_register+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2401147c:	f108 0801 	add.w	r8, r8, #1
24011480:	9b03      	ldr	r3, [sp, #12]
24011482:	4543      	cmp	r3, r8
24011484:	d1c6      	bne.n	24011414 <dir_register+0x84>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
24011486:	9b02      	ldr	r3, [sp, #8]
24011488:	f8dd b018 	ldr.w	fp, [sp, #24]
2401148c:	2b00      	cmp	r3, #0
2401148e:	f040 82ec 	bne.w	24011a6a <dir_register+0x6da>
	if (sector != fs->winsect) {	/* Window offset changed? */
24011492:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
24011494:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
24011498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401149a:	4299      	cmp	r1, r3
2401149c:	d005      	beq.n	240114aa <dir_register+0x11a>
2401149e:	9801      	ldr	r0, [sp, #4]
240114a0:	f7fe fcb6 	bl	2400fe10 <move_window.part.0>
		if (res == FR_OK) {
240114a4:	2800      	cmp	r0, #0
240114a6:	f040 82db 	bne.w	24011a60 <dir_register+0x6d0>
		*d++ = (BYTE)val;
240114aa:	2220      	movs	r2, #32
240114ac:	2100      	movs	r1, #0
240114ae:	f8da 0020 	ldr.w	r0, [sl, #32]
240114b2:	f009 faa1 	bl	2401a9f8 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
240114b6:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
240114ba:	f10a 0225 	add.w	r2, sl, #37	; 0x25
240114be:	1a9a      	subs	r2, r3, r2
240114c0:	2a02      	cmp	r2, #2
240114c2:	f240 8486 	bls.w	24011dd2 <dir_register+0xa42>
			*d++ = *s++;
240114c6:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
240114ca:	601a      	str	r2, [r3, #0]
240114cc:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
240114d0:	605a      	str	r2, [r3, #4]
240114d2:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
240114d6:	4658      	mov	r0, fp
			*d++ = *s++;
240114d8:	721a      	strb	r2, [r3, #8]
240114da:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
240114de:	725a      	strb	r2, [r3, #9]
240114e0:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
240114e4:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
240114e6:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
240114e8:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
240114ec:	f8da 1020 	ldr.w	r1, [sl, #32]
240114f0:	f003 0318 	and.w	r3, r3, #24
240114f4:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
240114f6:	9b01      	ldr	r3, [sp, #4]
240114f8:	70da      	strb	r2, [r3, #3]
}
240114fa:	b013      	add	sp, #76	; 0x4c
240114fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
24011500:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
24011502:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
24011506:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2401150a:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2401150c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011510:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
24011514:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
24011518:	9208      	str	r2, [sp, #32]
2401151a:	9303      	str	r3, [sp, #12]
2401151c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
24011520:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
24011524:	9305      	str	r3, [sp, #20]
24011526:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2401152a:	9207      	str	r2, [sp, #28]
2401152c:	9304      	str	r3, [sp, #16]
2401152e:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
24011532:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
24011536:	9302      	str	r3, [sp, #8]
24011538:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401153c:	4693      	mov	fp, r2
2401153e:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
24011540:	9306      	str	r3, [sp, #24]
24011542:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
24011546:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
2401154a:	4c1b      	ldr	r4, [pc, #108]	; (240115b8 <dir_register+0x228>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401154c:	461f      	mov	r7, r3
			*d++ = *s++;
2401154e:	9109      	str	r1, [sp, #36]	; 0x24
24011550:	9b03      	ldr	r3, [sp, #12]
24011552:	2100      	movs	r1, #0
24011554:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
24011556:	2e05      	cmp	r6, #5
			*d++ = *s++;
24011558:	f363 0107 	bfi	r1, r3, #0, #8
2401155c:	9b05      	ldr	r3, [sp, #20]
2401155e:	f363 210f 	bfi	r1, r3, #8, #8
24011562:	9b04      	ldr	r3, [sp, #16]
24011564:	f363 4117 	bfi	r1, r3, #16, #8
24011568:	9b02      	ldr	r3, [sp, #8]
2401156a:	f363 611f 	bfi	r1, r3, #24, #8
2401156e:	9b06      	ldr	r3, [sp, #24]
24011570:	f363 0207 	bfi	r2, r3, #0, #8
24011574:	9b08      	ldr	r3, [sp, #32]
24011576:	f367 220f 	bfi	r2, r7, #8, #8
2401157a:	f363 4217 	bfi	r2, r3, #16, #8
2401157e:	9b07      	ldr	r3, [sp, #28]
24011580:	f363 621f 	bfi	r2, r3, #24, #8
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
24011584:	9b01      	ldr	r3, [sp, #4]
24011586:	68d8      	ldr	r0, [r3, #12]
			*d++ = *s++;
24011588:	9b09      	ldr	r3, [sp, #36]	; 0x24
2401158a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2401158e:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
24011592:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
24011596:	e9ca 1209 	strd	r1, r2, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2401159a:	f240 8138 	bls.w	2401180e <dir_register+0x47e>
		while (*lfn) {	/* Create a CRC */
2401159e:	8802      	ldrh	r2, [r0, #0]
240115a0:	2a00      	cmp	r2, #0
240115a2:	f000 8134 	beq.w	2401180e <dir_register+0x47e>
				sr = (sr << 1) + (wc & 1);
240115a6:	f002 0101 	and.w	r1, r2, #1
240115aa:	4684      	mov	ip, r0
				wc >>= 1;
240115ac:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
240115ae:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240115b2:	e00d      	b.n	240115d0 <dir_register+0x240>
240115b4:	4ec4ec4f 	.word	0x4ec4ec4f
240115b8:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
240115bc:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
240115c0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
240115c4:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
240115c8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240115cc:	bf18      	it	ne
240115ce:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
240115d0:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
240115d4:	0893      	lsrs	r3, r2, #2
240115d6:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
240115d8:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240115dc:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
240115de:	f003 0301 	and.w	r3, r3, #1
240115e2:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
240115e6:	bf48      	it	mi
240115e8:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
240115ec:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
240115ee:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240115f2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
240115f6:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
240115fa:	bf18      	it	ne
240115fc:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
240115fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011602:	041b      	lsls	r3, r3, #16
				wc >>= 1;
24011604:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
24011608:	bf48      	it	mi
2401160a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2401160c:	f003 0301 	and.w	r3, r3, #1
24011610:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011614:	0400      	lsls	r0, r0, #16
				wc >>= 1;
24011616:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2401161a:	bf48      	it	mi
2401161c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2401161e:	f000 0001 	and.w	r0, r0, #1
24011622:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011626:	0409      	lsls	r1, r1, #16
				wc >>= 1;
24011628:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2401162c:	bf48      	it	mi
2401162e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
24011630:	f001 0101 	and.w	r1, r1, #1
24011634:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011638:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2401163a:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2401163e:	bf48      	it	mi
24011640:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
24011642:	f003 0301 	and.w	r3, r3, #1
24011646:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401164a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2401164c:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
24011650:	bf48      	it	mi
24011652:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
24011654:	f000 0001 	and.w	r0, r0, #1
24011658:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401165c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2401165e:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
24011662:	bf48      	it	mi
24011664:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
24011666:	f001 0101 	and.w	r1, r1, #1
2401166a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2401166e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
24011670:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
24011674:	bf48      	it	mi
24011676:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
24011678:	f003 0301 	and.w	r3, r3, #1
2401167c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011680:	0400      	lsls	r0, r0, #16
				wc >>= 1;
24011682:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
24011686:	bf48      	it	mi
24011688:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2401168a:	f000 0001 	and.w	r0, r0, #1
2401168e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
24011692:	0409      	lsls	r1, r1, #16
				wc >>= 1;
24011694:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
24011698:	bf48      	it	mi
2401169a:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2401169c:	f001 0101 	and.w	r1, r1, #1
240116a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240116a4:	041b      	lsls	r3, r3, #16
				wc >>= 1;
240116a6:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
240116aa:	bf48      	it	mi
240116ac:	4060      	eormi	r0, r4
				wc >>= 1;
240116ae:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
240116b0:	f003 0301 	and.w	r3, r3, #1
240116b4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240116b8:	0400      	lsls	r0, r0, #16
240116ba:	bf48      	it	mi
240116bc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
240116be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240116c2:	0408      	lsls	r0, r1, #16
240116c4:	bf48      	it	mi
240116c6:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
240116c8:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
240116cc:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
240116ce:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
240116d2:	bf48      	it	mi
240116d4:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
240116d8:	2a00      	cmp	r2, #0
240116da:	f47f af6f 	bne.w	240115bc <dir_register+0x22c>
		c = (BYTE)((seq % 16) + '0');
240116de:	f00e 010f 	and.w	r1, lr, #15
240116e2:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
240116e6:	2a39      	cmp	r2, #57	; 0x39
240116e8:	bf88      	it	hi
240116ea:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
240116ee:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
240116f2:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
240116f6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
240116fa:	f240 8156 	bls.w	240119aa <dir_register+0x61a>
		c = (BYTE)((seq % 16) + '0');
240116fe:	f001 000f 	and.w	r0, r1, #15
24011702:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
24011706:	2a39      	cmp	r2, #57	; 0x39
24011708:	bf88      	it	hi
2401170a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2401170e:	290f      	cmp	r1, #15
		seq /= 16;
24011710:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
24011714:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
24011718:	f240 814d 	bls.w	240119b6 <dir_register+0x626>
		c = (BYTE)((seq % 16) + '0');
2401171c:	f000 010f 	and.w	r1, r0, #15
24011720:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
24011724:	2a39      	cmp	r2, #57	; 0x39
24011726:	bf88      	it	hi
24011728:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2401172c:	280f      	cmp	r0, #15
		seq /= 16;
2401172e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
24011732:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
24011736:	f240 8144 	bls.w	240119c2 <dir_register+0x632>
		c = (BYTE)((seq % 16) + '0');
2401173a:	f001 000f 	and.w	r0, r1, #15
2401173e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
24011742:	2a39      	cmp	r2, #57	; 0x39
24011744:	bf88      	it	hi
24011746:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2401174a:	290f      	cmp	r1, #15
		seq /= 16;
2401174c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
24011750:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
24011754:	f240 816c 	bls.w	24011a30 <dir_register+0x6a0>
		c = (BYTE)((seq % 16) + '0');
24011758:	f000 010f 	and.w	r1, r0, #15
2401175c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
24011760:	2a39      	cmp	r2, #57	; 0x39
24011762:	bf88      	it	hi
24011764:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
24011768:	280f      	cmp	r0, #15
		seq /= 16;
2401176a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2401176e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
24011772:	f240 8163 	bls.w	24011a3c <dir_register+0x6ac>
		c = (BYTE)((seq % 16) + '0');
24011776:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2401177a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2401177e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
24011782:	2a39      	cmp	r2, #57	; 0x39
24011784:	bf88      	it	hi
24011786:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2401178a:	290f      	cmp	r1, #15
		ns[i--] = c;
2401178c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
24011790:	f240 815a 	bls.w	24011a48 <dir_register+0x6b8>
		c = (BYTE)((seq % 16) + '0');
24011794:	f00e 010f 	and.w	r1, lr, #15
24011798:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2401179c:	2a39      	cmp	r2, #57	; 0x39
2401179e:	bf88      	it	hi
240117a0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
240117a4:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
240117a8:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
240117ac:	f240 810f 	bls.w	240119ce <dir_register+0x63e>
		ns[i--] = c;
240117b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
240117b4:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
240117b8:	2200      	movs	r2, #0
240117ba:	e002      	b.n	240117c2 <dir_register+0x432>
240117bc:	3201      	adds	r2, #1
240117be:	4562      	cmp	r2, ip
240117c0:	d003      	beq.n	240117ca <dir_register+0x43a>
240117c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
240117c6:	2b20      	cmp	r3, #32
240117c8:	d1f8      	bne.n	240117bc <dir_register+0x42c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240117ca:	f1bc 0f07 	cmp.w	ip, #7
240117ce:	d920      	bls.n	24011812 <dir_register+0x482>
240117d0:	1c50      	adds	r0, r2, #1
240117d2:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
240117d6:	2807      	cmp	r0, #7
240117d8:	d809      	bhi.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240117da:	1c42      	adds	r2, r0, #1
240117dc:	2120      	movs	r1, #32
240117de:	2a08      	cmp	r2, #8
240117e0:	f1c0 0208 	rsb	r2, r0, #8
240117e4:	4428      	add	r0, r5
240117e6:	bf88      	it	hi
240117e8:	2201      	movhi	r2, #1
240117ea:	f009 f905 	bl	2401a9f8 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
240117ee:	4650      	mov	r0, sl
240117f0:	f7ff f9fc 	bl	24010bec <dir_find>
			if (res != FR_OK) break;
240117f4:	2800      	cmp	r0, #0
240117f6:	f040 8083 	bne.w	24011900 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
240117fa:	3601      	adds	r6, #1
240117fc:	2e64      	cmp	r6, #100	; 0x64
240117fe:	f47f aea7 	bne.w	24011550 <dir_register+0x1c0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
24011802:	f04f 0b07 	mov.w	fp, #7
}
24011806:	4658      	mov	r0, fp
24011808:	b013      	add	sp, #76	; 0x4c
2401180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401180e:	46b6      	mov	lr, r6
24011810:	e765      	b.n	240116de <dir_register+0x34e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011812:	f10c 0348 	add.w	r3, ip, #72	; 0x48
24011816:	f10c 0c01 	add.w	ip, ip, #1
2401181a:	eb0d 0103 	add.w	r1, sp, r3
2401181e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24011822:	54a9      	strb	r1, [r5, r2]
24011824:	3201      	adds	r2, #1
	} while (j < 8);
24011826:	2a07      	cmp	r2, #7
24011828:	d8e1      	bhi.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401182a:	f1bc 0f08 	cmp.w	ip, #8
2401182e:	f000 8085 	beq.w	2401193c <dir_register+0x5ac>
24011832:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
24011836:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011838:	f102 0001 	add.w	r0, r2, #1
2401183c:	eb0d 0103 	add.w	r1, sp, r3
24011840:	f811 1c14 	ldrb.w	r1, [r1, #-20]
24011844:	54a9      	strb	r1, [r5, r2]
24011846:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2401184a:	d0d0      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401184c:	2908      	cmp	r1, #8
2401184e:	d07d      	beq.n	2401194c <dir_register+0x5bc>
24011850:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
24011854:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011856:	eb0d 0103 	add.w	r1, sp, r3
2401185a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2401185e:	5429      	strb	r1, [r5, r0]
24011860:	f10c 0102 	add.w	r1, ip, #2
24011864:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
24011868:	d0c1      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401186a:	2908      	cmp	r1, #8
2401186c:	d076      	beq.n	2401195c <dir_register+0x5cc>
2401186e:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
24011872:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011874:	eb0d 0103 	add.w	r1, sp, r3
24011878:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2401187c:	5429      	strb	r1, [r5, r0]
2401187e:	f10c 0103 	add.w	r1, ip, #3
24011882:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
24011886:	d0b2      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011888:	2908      	cmp	r1, #8
2401188a:	d06f      	beq.n	2401196c <dir_register+0x5dc>
2401188c:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
24011890:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
24011892:	eb0d 0103 	add.w	r1, sp, r3
24011896:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2401189a:	5429      	strb	r1, [r5, r0]
2401189c:	f10c 0104 	add.w	r1, ip, #4
240118a0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
240118a4:	d0a3      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118a6:	2908      	cmp	r1, #8
240118a8:	d068      	beq.n	2401197c <dir_register+0x5ec>
240118aa:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
240118ae:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118b0:	eb0d 0103 	add.w	r1, sp, r3
240118b4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
240118b8:	5429      	strb	r1, [r5, r0]
240118ba:	f10c 0105 	add.w	r1, ip, #5
240118be:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
240118c2:	d094      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118c4:	2908      	cmp	r1, #8
240118c6:	d061      	beq.n	2401198c <dir_register+0x5fc>
240118c8:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
240118cc:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118ce:	eb0d 0103 	add.w	r1, sp, r3
240118d2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
240118d6:	5429      	strb	r1, [r5, r0]
240118d8:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
240118dc:	d087      	beq.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118de:	f1bc 0f01 	cmp.w	ip, #1
240118e2:	d15b      	bne.n	2401199c <dir_register+0x60c>
240118e4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
240118e8:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118ea:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
240118ec:	f47f af7f 	bne.w	240117ee <dir_register+0x45e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
240118f0:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240118f2:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
240118f6:	f7ff f979 	bl	24010bec <dir_find>
			if (res != FR_OK) break;
240118fa:	2800      	cmp	r0, #0
240118fc:	f43f af7d 	beq.w	240117fa <dir_register+0x46a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
24011900:	2804      	cmp	r0, #4
24011902:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
24011904:	4683      	mov	fp, r0
24011906:	f47f af7e 	bne.w	24011806 <dir_register+0x476>
		dp->fn[NSFLAG] = sn[NSFLAG];
2401190a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2401190c:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
24011910:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
24011914:	f013 0302 	ands.w	r3, r3, #2
24011918:	f47f ad61 	bne.w	240113de <dir_register+0x4e>
2401191c:	9302      	str	r3, [sp, #8]
2401191e:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
24011920:	2100      	movs	r1, #0
24011922:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
24011924:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
24011926:	f7ff f8a7 	bl	24010a78 <dir_sdi>
	if (res == FR_OK) {
2401192a:	4683      	mov	fp, r0
2401192c:	2800      	cmp	r0, #0
2401192e:	f43f ad67 	beq.w	24011400 <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
24011932:	f1bb 0f04 	cmp.w	fp, #4
24011936:	f43f af64 	beq.w	24011802 <dir_register+0x472>
2401193a:	e764      	b.n	24011806 <dir_register+0x476>
	} while (j < 8);
2401193c:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401193e:	f102 0001 	add.w	r0, r2, #1
24011942:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
24011946:	f47f af48 	bne.w	240117da <dir_register+0x44a>
2401194a:	e750      	b.n	240117ee <dir_register+0x45e>
2401194c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401194e:	f805 9000 	strb.w	r9, [r5, r0]
24011952:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
24011956:	f47f af40 	bne.w	240117da <dir_register+0x44a>
2401195a:	e748      	b.n	240117ee <dir_register+0x45e>
2401195c:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401195e:	f805 9000 	strb.w	r9, [r5, r0]
24011962:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
24011966:	f47f af38 	bne.w	240117da <dir_register+0x44a>
2401196a:	e740      	b.n	240117ee <dir_register+0x45e>
2401196c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401196e:	f805 9000 	strb.w	r9, [r5, r0]
24011972:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
24011976:	f47f af30 	bne.w	240117da <dir_register+0x44a>
2401197a:	e738      	b.n	240117ee <dir_register+0x45e>
2401197c:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401197e:	f805 9000 	strb.w	r9, [r5, r0]
24011982:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
24011986:	f47f af28 	bne.w	240117da <dir_register+0x44a>
2401198a:	e730      	b.n	240117ee <dir_register+0x45e>
2401198c:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401198e:	f805 9000 	strb.w	r9, [r5, r0]
24011992:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
24011996:	f47f af20 	bne.w	240117da <dir_register+0x44a>
2401199a:	e728      	b.n	240117ee <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2401199c:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
240119a0:	2a00      	cmp	r2, #0
240119a2:	f47f af24 	bne.w	240117ee <dir_register+0x45e>
240119a6:	2007      	movs	r0, #7
240119a8:	e717      	b.n	240117da <dir_register+0x44a>
	ns[i] = '~';
240119aa:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
240119ac:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
240119b0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
240119b4:	e6fe      	b.n	240117b4 <dir_register+0x424>
	ns[i] = '~';
240119b6:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
240119b8:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
240119bc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
240119c0:	e6f8      	b.n	240117b4 <dir_register+0x424>
	ns[i] = '~';
240119c2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
240119c4:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
240119c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
240119cc:	e6f2      	b.n	240117b4 <dir_register+0x424>
	ns[i] = '~';
240119ce:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240119d0:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
240119d4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
240119d8:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
240119dc:	4662      	mov	r2, ip
240119de:	e728      	b.n	24011832 <dir_register+0x4a2>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
240119e0:	8962      	ldrh	r2, [r4, #10]
240119e2:	3a01      	subs	r2, #1
240119e4:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
240119e8:	f47f ad32 	bne.w	24011450 <dir_register+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
240119ec:	4619      	mov	r1, r3
240119ee:	4620      	mov	r0, r4
240119f0:	f7fe fc5a 	bl	240102a8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240119f4:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
240119f6:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
240119f8:	f240 8205 	bls.w	24011e06 <dir_register+0xa76>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
240119fc:	1c42      	adds	r2, r0, #1
240119fe:	f000 80dd 	beq.w	24011bbc <dir_register+0x82c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
24011a02:	69a3      	ldr	r3, [r4, #24]
24011a04:	4298      	cmp	r0, r3
24011a06:	f080 80e9 	bcs.w	24011bdc <dir_register+0x84c>
	clst -= 2;
24011a0a:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011a0e:	f104 0634 	add.w	r6, r4, #52	; 0x34
24011a12:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
24011a14:	f8ca 3018 	str.w	r3, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011a18:	69a3      	ldr	r3, [r4, #24]
24011a1a:	3b02      	subs	r3, #2
24011a1c:	455b      	cmp	r3, fp
24011a1e:	f240 813a 	bls.w	24011c96 <dir_register+0x906>
	return clst * fs->csize + fs->database;
24011a22:	8963      	ldrh	r3, [r4, #10]
24011a24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24011a26:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
24011a2a:	f8ca 101c 	str.w	r1, [sl, #28]
24011a2e:	e511      	b.n	24011454 <dir_register+0xc4>
	ns[i] = '~';
24011a30:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24011a32:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
24011a36:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
24011a3a:	e6bb      	b.n	240117b4 <dir_register+0x424>
	ns[i] = '~';
24011a3c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24011a3e:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
24011a42:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
24011a46:	e6b5      	b.n	240117b4 <dir_register+0x424>
	ns[i] = '~';
24011a48:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
24011a4a:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
24011a4e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
24011a52:	e6af      	b.n	240117b4 <dir_register+0x424>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
24011a54:	f04f 0b06 	mov.w	fp, #6
}
24011a58:	4658      	mov	r0, fp
24011a5a:	b013      	add	sp, #76	; 0x4c
24011a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24011a60:	4683      	mov	fp, r0
24011a62:	4658      	mov	r0, fp
24011a64:	b013      	add	sp, #76	; 0x4c
24011a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
24011a6a:	f8da 1014 	ldr.w	r1, [sl, #20]
24011a6e:	4650      	mov	r0, sl
24011a70:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
24011a74:	f7ff f800 	bl	24010a78 <dir_sdi>
		if (res == FR_OK) {
24011a78:	4605      	mov	r5, r0
24011a7a:	2800      	cmp	r0, #0
24011a7c:	f040 8109 	bne.w	24011c92 <dir_register+0x902>
		sum = (sum >> 1) + (sum << 7) + *dir++;
24011a80:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
24011a84:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
24011a88:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
24011a8c:	01cb      	lsls	r3, r1, #7
24011a8e:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
24011a92:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
24011a96:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
24011a9a:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
24011a9e:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
24011aa2:	1919      	adds	r1, r3, r4
24011aa4:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
24011aa8:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
24011aac:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
24011ab0:	f3c1 0346 	ubfx	r3, r1, #1, #7
24011ab4:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
24011ab8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
24011abc:	fa50 f383 	uxtab	r3, r0, r3
24011ac0:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
24011ac4:	f3c3 0146 	ubfx	r1, r3, #1, #7
24011ac8:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
24011acc:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
24011ad0:	fa52 f283 	uxtab	r2, r2, r3
24011ad4:	f3c2 0346 	ubfx	r3, r2, #1, #7
24011ad8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
24011adc:	fa58 f883 	uxtab	r8, r8, r3
24011ae0:	f3c8 0346 	ubfx	r3, r8, #1, #7
24011ae4:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
24011ae8:	fa5e fe83 	uxtab	lr, lr, r3
24011aec:	f3ce 0346 	ubfx	r3, lr, #1, #7
24011af0:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
24011af4:	fa5c fc83 	uxtab	ip, ip, r3
24011af8:	f3cc 0346 	ubfx	r3, ip, #1, #7
24011afc:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
24011b00:	fa57 f783 	uxtab	r7, r7, r3
24011b04:	f3c7 0346 	ubfx	r3, r7, #1, #7
24011b08:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
24011b0c:	fa56 f683 	uxtab	r6, r6, r3
24011b10:	f3c6 0346 	ubfx	r3, r6, #1, #7
24011b14:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
24011b18:	9e01      	ldr	r6, [sp, #4]
24011b1a:	fa50 f083 	uxtab	r0, r0, r3
24011b1e:	f3c0 0346 	ubfx	r3, r0, #1, #7
24011b22:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
24011b26:	fa51 f180 	uxtab	r1, r1, r0
24011b2a:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
24011b2e:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
24011b32:	6b33      	ldr	r3, [r6, #48]	; 0x30
24011b34:	4299      	cmp	r1, r3
24011b36:	d004      	beq.n	24011b42 <dir_register+0x7b2>
24011b38:	4630      	mov	r0, r6
24011b3a:	f7fe f969 	bl	2400fe10 <move_window.part.0>
				if (res != FR_OK) break;
24011b3e:	2800      	cmp	r0, #0
24011b40:	d18e      	bne.n	24011a60 <dir_register+0x6d0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
24011b42:	f89d 0008 	ldrb.w	r0, [sp, #8]
24011b46:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24011b48:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
24011b4a:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24011b4e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
24011b52:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
24011b56:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
24011b5a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
24011b5e:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
24011b60:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
24011b62:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011b64:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
24011b68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
24011b6c:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
24011b6e:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011b72:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011b76:	2f00      	cmp	r7, #0
24011b78:	f040 808f 	bne.w	24011c9a <dir_register+0x90a>
	*ptr++ = (BYTE)val; val >>= 8;
24011b7c:	f8a3 4003 	strh.w	r4, [r3, #3]
24011b80:	f8a3 4005 	strh.w	r4, [r3, #5]
24011b84:	f8a3 4007 	strh.w	r4, [r3, #7]
24011b88:	f8a3 4009 	strh.w	r4, [r3, #9]
24011b8c:	81dc      	strh	r4, [r3, #14]
24011b8e:	821c      	strh	r4, [r3, #16]
24011b90:	825c      	strh	r4, [r3, #18]
24011b92:	829c      	strh	r4, [r3, #20]
24011b94:	82dc      	strh	r4, [r3, #22]
24011b96:	831c      	strh	r4, [r3, #24]
24011b98:	839c      	strh	r4, [r3, #28]
24011b9a:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
24011b9c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
24011ba0:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
24011ba2:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
24011ba4:	4650      	mov	r0, sl
				fs->wflag = 1;
24011ba6:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
24011ba8:	f7fe fbde 	bl	24010368 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
24011bac:	2800      	cmp	r0, #0
24011bae:	f47f af57 	bne.w	24011a60 <dir_register+0x6d0>
24011bb2:	9b02      	ldr	r3, [sp, #8]
24011bb4:	3b01      	subs	r3, #1
24011bb6:	9302      	str	r3, [sp, #8]
24011bb8:	d1b9      	bne.n	24011b2e <dir_register+0x79e>
24011bba:	e46a      	b.n	24011492 <dir_register+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
24011bbc:	f04f 0b01 	mov.w	fp, #1
}
24011bc0:	4658      	mov	r0, fp
24011bc2:	b013      	add	sp, #76	; 0x4c
24011bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
24011bc8:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
24011bcc:	f8ca 301c 	str.w	r3, [sl, #28]
}
24011bd0:	4658      	mov	r0, fp
24011bd2:	b013      	add	sp, #76	; 0x4c
24011bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24011bd8:	4683      	mov	fp, r0
24011bda:	e6aa      	b.n	24011932 <dir_register+0x5a2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
24011bdc:	f8da 1018 	ldr.w	r1, [sl, #24]
24011be0:	4650      	mov	r0, sl
24011be2:	f7fe fe79 	bl	240108d8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
24011be6:	4603      	mov	r3, r0
24011be8:	9004      	str	r0, [sp, #16]
24011bea:	2800      	cmp	r0, #0
24011bec:	f43f ae09 	beq.w	24011802 <dir_register+0x472>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
24011bf0:	2801      	cmp	r0, #1
24011bf2:	f000 8108 	beq.w	24011e06 <dir_register+0xa76>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
24011bf6:	3301      	adds	r3, #1
24011bf8:	d0e0      	beq.n	24011bbc <dir_register+0x82c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
24011bfa:	78e3      	ldrb	r3, [r4, #3]
24011bfc:	2b00      	cmp	r3, #0
24011bfe:	f040 810d 	bne.w	24011e1c <dir_register+0xa8c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011c02:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
24011c06:	f44f 7200 	mov.w	r2, #512	; 0x200
24011c0a:	2100      	movs	r1, #0
24011c0c:	4630      	mov	r0, r6
24011c0e:	f008 fef3 	bl	2401a9f8 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011c12:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
24011c14:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011c16:	3b02      	subs	r3, #2
	clst -= 2;
24011c18:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011c1c:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
24011c1e:	8963      	ldrh	r3, [r4, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011c20:	f080 80fa 	bcs.w	24011e18 <dir_register+0xa88>
	return clst * fs->csize + fs->database;
24011c24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24011c26:	fb0b 2203 	mla	r2, fp, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
24011c2a:	6322      	str	r2, [r4, #48]	; 0x30
24011c2c:	2b00      	cmp	r3, #0
24011c2e:	f000 80f0 	beq.w	24011e12 <dir_register+0xa82>
24011c32:	2300      	movs	r3, #0
24011c34:	e9cd 5707 	strd	r5, r7, [sp, #28]
24011c38:	4617      	mov	r7, r2
24011c3a:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
24011c3c:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011c40:	463a      	mov	r2, r7
24011c42:	4631      	mov	r1, r6
24011c44:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
24011c46:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011c48:	2301      	movs	r3, #1
24011c4a:	f7fd ff41 	bl	2400fad0 <disk_write>
24011c4e:	2800      	cmp	r0, #0
24011c50:	d1b4      	bne.n	24011bbc <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24011c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
24011c54:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24011c56:	1af8      	subs	r0, r7, r3
24011c58:	69e3      	ldr	r3, [r4, #28]
24011c5a:	4298      	cmp	r0, r3
24011c5c:	d20e      	bcs.n	24011c7c <dir_register+0x8ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011c5e:	78a5      	ldrb	r5, [r4, #2]
24011c60:	2d01      	cmp	r5, #1
24011c62:	d801      	bhi.n	24011c68 <dir_register+0x8d8>
24011c64:	e00a      	b.n	24011c7c <dir_register+0x8ec>
					wsect += fs->fsize;
24011c66:	69e3      	ldr	r3, [r4, #28]
24011c68:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011c6a:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
24011c6c:	2301      	movs	r3, #1
24011c6e:	4631      	mov	r1, r6
24011c70:	463a      	mov	r2, r7
24011c72:	7860      	ldrb	r0, [r4, #1]
24011c74:	f7fd ff2c 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011c78:	2d01      	cmp	r5, #1
24011c7a:	d1f4      	bne.n	24011c66 <dir_register+0x8d6>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
24011c7c:	9a05      	ldr	r2, [sp, #20]
24011c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
24011c80:	1c50      	adds	r0, r2, #1
24011c82:	8965      	ldrh	r5, [r4, #10]
24011c84:	1c5f      	adds	r7, r3, #1
24011c86:	42a8      	cmp	r0, r5
24011c88:	6327      	str	r7, [r4, #48]	; 0x30
24011c8a:	f080 80bf 	bcs.w	24011e0c <dir_register+0xa7c>
24011c8e:	9005      	str	r0, [sp, #20]
24011c90:	e7d4      	b.n	24011c3c <dir_register+0x8ac>
24011c92:	4683      	mov	fp, r0
24011c94:	e5b7      	b.n	24011806 <dir_register+0x476>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011c96:	2100      	movs	r1, #0
24011c98:	e6c7      	b.n	24011a2a <dir_register+0x69a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011c9a:	42a7      	cmp	r7, r4
24011c9c:	f43f af6e 	beq.w	24011b7c <dir_register+0x7ec>
24011ca0:	3201      	adds	r2, #1
24011ca2:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
24011ca6:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
24011ca8:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011cac:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
24011cae:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011cb2:	2f00      	cmp	r7, #0
24011cb4:	f43f af64 	beq.w	24011b80 <dir_register+0x7f0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011cb8:	42a7      	cmp	r7, r4
24011cba:	f43f af61 	beq.w	24011b80 <dir_register+0x7f0>
24011cbe:	440a      	add	r2, r1
24011cc0:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
24011cc2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011cc6:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
24011cc8:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011ccc:	2f00      	cmp	r7, #0
24011cce:	f43f af59 	beq.w	24011b84 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011cd2:	42a7      	cmp	r7, r4
24011cd4:	f43f af56 	beq.w	24011b84 <dir_register+0x7f4>
24011cd8:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
24011cda:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011cde:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
24011ce0:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011ce4:	2f00      	cmp	r7, #0
24011ce6:	f43f af4f 	beq.w	24011b88 <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011cea:	42a7      	cmp	r7, r4
24011cec:	f43f af4c 	beq.w	24011b88 <dir_register+0x7f8>
24011cf0:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
24011cf2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011cf6:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
24011cf8:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011cfc:	2f00      	cmp	r7, #0
24011cfe:	f43f af45 	beq.w	24011b8c <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d02:	42a7      	cmp	r7, r4
24011d04:	f43f af42 	beq.w	24011b8c <dir_register+0x7fc>
24011d08:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
24011d0a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d0e:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
24011d10:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d14:	2f00      	cmp	r7, #0
24011d16:	f43f af3a 	beq.w	24011b8e <dir_register+0x7fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d1a:	42a7      	cmp	r7, r4
24011d1c:	f43f af37 	beq.w	24011b8e <dir_register+0x7fe>
24011d20:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
24011d22:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d26:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
24011d28:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d2c:	2f00      	cmp	r7, #0
24011d2e:	f43f af2f 	beq.w	24011b90 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d32:	42a7      	cmp	r7, r4
24011d34:	f43f af2c 	beq.w	24011b90 <dir_register+0x800>
24011d38:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
24011d3a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d3e:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
24011d40:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d44:	2f00      	cmp	r7, #0
24011d46:	f43f af24 	beq.w	24011b92 <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d4a:	42a7      	cmp	r7, r4
24011d4c:	f43f af21 	beq.w	24011b92 <dir_register+0x802>
24011d50:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
24011d52:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d56:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
24011d58:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d5c:	2f00      	cmp	r7, #0
24011d5e:	f43f af19 	beq.w	24011b94 <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d62:	42a7      	cmp	r7, r4
24011d64:	f43f af16 	beq.w	24011b94 <dir_register+0x804>
24011d68:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
24011d6a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d6e:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
24011d70:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d74:	2f00      	cmp	r7, #0
24011d76:	f43f af0e 	beq.w	24011b96 <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d7a:	42a7      	cmp	r7, r4
24011d7c:	f43f af0b 	beq.w	24011b96 <dir_register+0x806>
24011d80:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
24011d82:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d86:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
24011d88:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011d8c:	2f00      	cmp	r7, #0
24011d8e:	f43f af03 	beq.w	24011b98 <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011d92:	42a7      	cmp	r7, r4
24011d94:	f43f af00 	beq.w	24011b98 <dir_register+0x808>
24011d98:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
24011d9a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
24011d9e:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
24011da0:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011da4:	2f00      	cmp	r7, #0
24011da6:	f43f aef8 	beq.w	24011b9a <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
24011daa:	42a7      	cmp	r7, r4
24011dac:	f43f aef5 	beq.w	24011b9a <dir_register+0x80a>
24011db0:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011db2:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
24011db4:	779a      	strb	r2, [r3, #30]
24011db6:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011db8:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
24011dba:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
24011dbc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
24011dc0:	4297      	cmp	r7, r2
24011dc2:	f63f aeeb 	bhi.w	24011b9c <dir_register+0x80c>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
24011dc6:	4461      	add	r1, ip
24011dc8:	8b4a      	ldrh	r2, [r1, #26]
24011dca:	2a00      	cmp	r2, #0
24011dcc:	f47f aee8 	bne.w	24011ba0 <dir_register+0x810>
24011dd0:	e6e4      	b.n	24011b9c <dir_register+0x80c>
			*d++ = *s++;
24011dd2:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
24011dd6:	701a      	strb	r2, [r3, #0]
24011dd8:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
24011ddc:	705a      	strb	r2, [r3, #1]
24011dde:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
24011de2:	709a      	strb	r2, [r3, #2]
24011de4:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
24011de8:	70da      	strb	r2, [r3, #3]
24011dea:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
24011dee:	711a      	strb	r2, [r3, #4]
24011df0:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
24011df4:	715a      	strb	r2, [r3, #5]
24011df6:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
24011dfa:	719a      	strb	r2, [r3, #6]
24011dfc:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
24011e00:	71da      	strb	r2, [r3, #7]
24011e02:	f7ff bb66 	b.w	240114d2 <dir_register+0x142>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
24011e06:	f04f 0b02 	mov.w	fp, #2
24011e0a:	e4fc      	b.n	24011806 <dir_register+0x476>
					fs->winsect -= n;							/* Restore window offset */
24011e0c:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
24011e10:	1a9a      	subs	r2, r3, r2
24011e12:	9b04      	ldr	r3, [sp, #16]
24011e14:	6322      	str	r2, [r4, #48]	; 0x30
24011e16:	e5fd      	b.n	24011a14 <dir_register+0x684>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24011e18:	2200      	movs	r2, #0
24011e1a:	e706      	b.n	24011c2a <dir_register+0x89a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011e1c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
24011e20:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
24011e22:	2301      	movs	r3, #1
24011e24:	7860      	ldrb	r0, [r4, #1]
24011e26:	4631      	mov	r1, r6
24011e28:	9205      	str	r2, [sp, #20]
24011e2a:	f7fd fe51 	bl	2400fad0 <disk_write>
24011e2e:	2800      	cmp	r0, #0
24011e30:	f47f aec4 	bne.w	24011bbc <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24011e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
24011e36:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
24011e38:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
24011e3a:	1ad1      	subs	r1, r2, r3
24011e3c:	69e3      	ldr	r3, [r4, #28]
24011e3e:	4299      	cmp	r1, r3
24011e40:	f4bf aee1 	bcs.w	24011c06 <dir_register+0x876>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011e44:	f894 b002 	ldrb.w	fp, [r4, #2]
24011e48:	f1bb 0f01 	cmp.w	fp, #1
24011e4c:	f67f aedb 	bls.w	24011c06 <dir_register+0x876>
24011e50:	4631      	mov	r1, r6
24011e52:	462e      	mov	r6, r5
24011e54:	4625      	mov	r5, r4
24011e56:	4614      	mov	r4, r2
24011e58:	e000      	b.n	24011e5c <dir_register+0xacc>
					wsect += fs->fsize;
24011e5a:	69eb      	ldr	r3, [r5, #28]
24011e5c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011e5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
24011e62:	2301      	movs	r3, #1
24011e64:	7868      	ldrb	r0, [r5, #1]
24011e66:	4622      	mov	r2, r4
24011e68:	9105      	str	r1, [sp, #20]
24011e6a:	f7fd fe31 	bl	2400fad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
24011e6e:	f1bb 0f01 	cmp.w	fp, #1
24011e72:	9905      	ldr	r1, [sp, #20]
24011e74:	d1f1      	bne.n	24011e5a <dir_register+0xaca>
24011e76:	462c      	mov	r4, r5
24011e78:	4635      	mov	r5, r6
24011e7a:	460e      	mov	r6, r1
24011e7c:	e6c3      	b.n	24011c06 <dir_register+0x876>
24011e7e:	bf00      	nop

24011e80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
24011e80:	b510      	push	{r4, lr}
24011e82:	b082      	sub	sp, #8
24011e84:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
24011e88:	b1a1      	cbz	r1, 24011eb4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
24011e8a:	f891 c000 	ldrb.w	ip, [r1]
24011e8e:	f1bc 0f1f 	cmp.w	ip, #31
24011e92:	d912      	bls.n	24011eba <f_mount+0x3a>
24011e94:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
24011e98:	d00f      	beq.n	24011eba <f_mount+0x3a>
24011e9a:	4608      	mov	r0, r1
24011e9c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
24011ea0:	2b1f      	cmp	r3, #31
24011ea2:	d90c      	bls.n	24011ebe <f_mount+0x3e>
24011ea4:	2b3a      	cmp	r3, #58	; 0x3a
24011ea6:	d1f9      	bne.n	24011e9c <f_mount+0x1c>
			i = *tp++ - '0';
24011ea8:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
24011eaa:	4288      	cmp	r0, r1
24011eac:	d102      	bne.n	24011eb4 <f_mount+0x34>
24011eae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
24011eb2:	d006      	beq.n	24011ec2 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
24011eb4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
24011eb6:	b002      	add	sp, #8
24011eb8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
24011eba:	4663      	mov	r3, ip
24011ebc:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
24011ebe:	2b3a      	cmp	r3, #58	; 0x3a
24011ec0:	d0f2      	beq.n	24011ea8 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
24011ec2:	4916      	ldr	r1, [pc, #88]	; (24011f1c <f_mount+0x9c>)
24011ec4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
24011ec6:	b143      	cbz	r3, 24011eda <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
24011ec8:	4815      	ldr	r0, [pc, #84]	; (24011f20 <f_mount+0xa0>)
24011eca:	6804      	ldr	r4, [r0, #0]
24011ecc:	42a3      	cmp	r3, r4
24011ece:	d01c      	beq.n	24011f0a <f_mount+0x8a>
24011ed0:	6904      	ldr	r4, [r0, #16]
24011ed2:	429c      	cmp	r4, r3
24011ed4:	d016      	beq.n	24011f04 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
24011ed6:	2000      	movs	r0, #0
24011ed8:	7018      	strb	r0, [r3, #0]
	if (fs) {
24011eda:	9b01      	ldr	r3, [sp, #4]
24011edc:	b173      	cbz	r3, 24011efc <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
24011ede:	2000      	movs	r0, #0
24011ee0:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
24011ee2:	9b01      	ldr	r3, [sp, #4]
24011ee4:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24011ee6:	b1b3      	cbz	r3, 24011f16 <f_mount+0x96>
24011ee8:	3a01      	subs	r2, #1
24011eea:	bf18      	it	ne
24011eec:	2201      	movne	r2, #1
24011eee:	b992      	cbnz	r2, 24011f16 <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
24011ef0:	a901      	add	r1, sp, #4
24011ef2:	4668      	mov	r0, sp
24011ef4:	f7fd ffc6 	bl	2400fe84 <find_volume>
}
24011ef8:	b002      	add	sp, #8
24011efa:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24011efc:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
24011efe:	600b      	str	r3, [r1, #0]
}
24011f00:	b002      	add	sp, #8
24011f02:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
24011f04:	2400      	movs	r4, #0
24011f06:	6104      	str	r4, [r0, #16]
24011f08:	e7e5      	b.n	24011ed6 <f_mount+0x56>
24011f0a:	2400      	movs	r4, #0
24011f0c:	6004      	str	r4, [r0, #0]
24011f0e:	6904      	ldr	r4, [r0, #16]
24011f10:	429c      	cmp	r4, r3
24011f12:	d1e0      	bne.n	24011ed6 <f_mount+0x56>
24011f14:	e7f6      	b.n	24011f04 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
24011f16:	2000      	movs	r0, #0
}
24011f18:	b002      	add	sp, #8
24011f1a:	bd10      	pop	{r4, pc}
24011f1c:	2001e720 	.word	0x2001e720
24011f20:	2001e724 	.word	0x2001e724

24011f24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
24011f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24011f28:	b092      	sub	sp, #72	; 0x48
24011f2a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
24011f2c:	2800      	cmp	r0, #0
24011f2e:	f000 80a1 	beq.w	24012074 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
24011f32:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
24011f36:	4616      	mov	r6, r2
24011f38:	4604      	mov	r4, r0
24011f3a:	a903      	add	r1, sp, #12
24011f3c:	a801      	add	r0, sp, #4
24011f3e:	463a      	mov	r2, r7
24011f40:	f7fd ffa0 	bl	2400fe84 <find_volume>
	if (res == FR_OK) {
24011f44:	4605      	mov	r5, r0
24011f46:	b128      	cbz	r0, 24011f54 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
24011f48:	2300      	movs	r3, #0
24011f4a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
24011f4c:	4628      	mov	r0, r5
24011f4e:	b012      	add	sp, #72	; 0x48
24011f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
24011f54:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
24011f56:	a804      	add	r0, sp, #16
24011f58:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
24011f5a:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
24011f5c:	f7fe ffee 	bl	24010f3c <follow_path>
		if (res == FR_OK) {
24011f60:	bb00      	cbnz	r0, 24011fa4 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
24011f62:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
24011f66:	2b00      	cmp	r3, #0
24011f68:	f2c0 808b 	blt.w	24012082 <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
24011f6c:	4ba7      	ldr	r3, [pc, #668]	; (2401220c <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24011f6e:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011f72:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
24011f74:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24011f78:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
24011f7a:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
24011f7e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
24011f82:	f1b8 0f00 	cmp.w	r8, #0
24011f86:	f000 80fd 	beq.w	24012184 <f_open+0x260>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011f8a:	4580      	cmp	r8, r0
24011f8c:	d07b      	beq.n	24012086 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
24011f8e:	f8d3 8010 	ldr.w	r8, [r3, #16]
24011f92:	f1b8 0f00 	cmp.w	r8, #0
24011f96:	f000 808e 	beq.w	240120b6 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24011f9a:	4580      	cmp	r8, r0
24011f9c:	f000 8102 	beq.w	240121a4 <f_open+0x280>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
24011fa0:	2512      	movs	r5, #18
24011fa2:	e7d1      	b.n	24011f48 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
24011fa4:	f016 0f1c 	tst.w	r6, #28
24011fa8:	d069      	beq.n	2401207e <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
24011faa:	2804      	cmp	r0, #4
24011fac:	d167      	bne.n	2401207e <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
24011fae:	4b97      	ldr	r3, [pc, #604]	; (2401220c <f_open+0x2e8>)
24011fb0:	681a      	ldr	r2, [r3, #0]
24011fb2:	b112      	cbz	r2, 24011fba <f_open+0x96>
24011fb4:	691b      	ldr	r3, [r3, #16]
24011fb6:	2b00      	cmp	r3, #0
24011fb8:	d1f2      	bne.n	24011fa0 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
24011fba:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
24011fbc:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
24011fc0:	f7ff f9e6 	bl	24011390 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
24011fc4:	2800      	cmp	r0, #0
24011fc6:	d15a      	bne.n	2401207e <f_open+0x15a>
				dw = GET_FATTIME();
24011fc8:	f7fd fc6e 	bl	2400f8a8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
24011fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
24011fce:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
24011fd2:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
24011fd6:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
24011fda:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
24011fde:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
24011fe0:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
24011fe2:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
24011fe6:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
24011fe8:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
24011fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
24011fec:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
24011fee:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
24011ff0:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
24011ff4:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
24011ff6:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
24011ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24011ffa:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
24011ffe:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
24012000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24012002:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
24012004:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
24012006:	d102      	bne.n	2401200e <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24012008:	8a9a      	ldrh	r2, [r3, #20]
2401200a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2401200e:	2200      	movs	r2, #0
24012010:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
24012012:	7808      	ldrb	r0, [r1, #0]
24012014:	2803      	cmp	r0, #3
24012016:	d100      	bne.n	2401201a <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
24012018:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2401201a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2401201c:	2200      	movs	r2, #0
2401201e:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
24012020:	2301      	movs	r3, #1
24012022:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
24012024:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
24012026:	b19e      	cbz	r6, 24012050 <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
24012028:	4631      	mov	r1, r6
2401202a:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2401202c:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
24012030:	f7ff f910 	bl	24011254 <remove_chain>
						if (res == FR_OK) {
24012034:	bb18      	cbnz	r0, 2401207e <f_open+0x15a>
							res = move_window(fs, dw);
24012036:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
24012038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2401203a:	4590      	cmp	r8, r2
2401203c:	f000 80e2 	beq.w	24012204 <f_open+0x2e0>
24012040:	4618      	mov	r0, r3
24012042:	4641      	mov	r1, r8
24012044:	f7fd fee4 	bl	2400fe10 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
24012048:	3e01      	subs	r6, #1
2401204a:	9b03      	ldr	r3, [sp, #12]
2401204c:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2401204e:	b9b0      	cbnz	r0, 2401207e <f_open+0x15a>
				mode |= FA_MODIFIED;
24012050:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24012054:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24012058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401205a:	3900      	subs	r1, #0
2401205c:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2401205e:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24012060:	bf18      	it	ne
24012062:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
24012064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24012066:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24012068:	f7fd fd4c 	bl	2400fb04 <inc_lock>
2401206c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2401206e:	bb70      	cbnz	r0, 240120ce <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
24012070:	2502      	movs	r5, #2
24012072:	e769      	b.n	24011f48 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
24012074:	2509      	movs	r5, #9
}
24012076:	4628      	mov	r0, r5
24012078:	b012      	add	sp, #72	; 0x48
2401207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2401207e:	4605      	mov	r5, r0
24012080:	e762      	b.n	24011f48 <f_open+0x24>
				res = FR_INVALID_NAME;
24012082:	2506      	movs	r5, #6
24012084:	e760      	b.n	24011f48 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24012086:	6858      	ldr	r0, [r3, #4]
24012088:	4560      	cmp	r0, ip
2401208a:	f000 8094 	beq.w	240121b6 <f_open+0x292>
		if (Files[i].fs) {	/* Existing entry */
2401208e:	6918      	ldr	r0, [r3, #16]
24012090:	b188      	cbz	r0, 240120b6 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24012092:	4540      	cmp	r0, r8
24012094:	d184      	bne.n	24011fa0 <f_open+0x7c>
24012096:	6958      	ldr	r0, [r3, #20]
24012098:	4560      	cmp	r0, ip
2401209a:	d181      	bne.n	24011fa0 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2401209c:	6998      	ldr	r0, [r3, #24]
2401209e:	4570      	cmp	r0, lr
240120a0:	f47f af7e 	bne.w	24011fa0 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
240120a4:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
240120a6:	2a00      	cmp	r2, #0
240120a8:	d163      	bne.n	24012172 <f_open+0x24e>
240120aa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
240120ae:	899b      	ldrh	r3, [r3, #12]
240120b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240120b4:	d05d      	beq.n	24012172 <f_open+0x24e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
240120b6:	f016 0f1c 	tst.w	r6, #28
240120ba:	d04a      	beq.n	24012152 <f_open+0x22e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
240120bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
240120c0:	f013 0f11 	tst.w	r3, #17
240120c4:	d15c      	bne.n	24012180 <f_open+0x25c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
240120c6:	0773      	lsls	r3, r6, #29
240120c8:	d555      	bpl.n	24012176 <f_open+0x252>
240120ca:	2508      	movs	r5, #8
240120cc:	e73c      	b.n	24011f48 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
240120ce:	f8dd 900c 	ldr.w	r9, [sp, #12]
240120d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
240120d4:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
240120d8:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240120da:	2a03      	cmp	r2, #3
240120dc:	d102      	bne.n	240120e4 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240120de:	8a9a      	ldrh	r2, [r3, #20]
240120e0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
240120e4:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
240120e6:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
240120e8:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
240120ec:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
240120f0:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
240120f4:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
240120f8:	f8c4 800c 	str.w	r8, [r4, #12]
		*d++ = (BYTE)val;
240120fc:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
240120fe:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
24012102:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
24012104:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
24012106:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
24012108:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2401210a:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2401210c:	f008 fc74 	bl	2401a9f8 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
24012110:	06b9      	lsls	r1, r7, #26
24012112:	f57f af1b 	bpl.w	24011f4c <f_open+0x28>
24012116:	f1b8 0f00 	cmp.w	r8, #0
2401211a:	f43f af17 	beq.w	24011f4c <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2401211e:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
24012122:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24012126:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2401212a:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2401212e:	d804      	bhi.n	2401213a <f_open+0x216>
24012130:	e047      	b.n	240121c2 <f_open+0x29e>
24012132:	1c42      	adds	r2, r0, #1
24012134:	d06c      	beq.n	24012210 <f_open+0x2ec>
24012136:	4547      	cmp	r7, r8
24012138:	d26a      	bcs.n	24012210 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
2401213a:	4631      	mov	r1, r6
2401213c:	6820      	ldr	r0, [r4, #0]
2401213e:	f7fe f8b3 	bl	240102a8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
24012142:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24012144:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
24012148:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2401214a:	d8f2      	bhi.n	24012132 <f_open+0x20e>
2401214c:	2502      	movs	r5, #2
				fp->clust = clst;
2401214e:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
24012150:	e6fa      	b.n	24011f48 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
24012152:	f89d 3016 	ldrb.w	r3, [sp, #22]
24012156:	06d9      	lsls	r1, r3, #27
24012158:	d422      	bmi.n	240121a0 <f_open+0x27c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2401215a:	07b1      	lsls	r1, r6, #30
2401215c:	d501      	bpl.n	24012162 <f_open+0x23e>
2401215e:	07d8      	lsls	r0, r3, #31
24012160:	d40e      	bmi.n	24012180 <f_open+0x25c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
24012162:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24012166:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
24012168:	2e00      	cmp	r6, #0
2401216a:	f47f af71 	bne.w	24012050 <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401216e:	4611      	mov	r1, r2
24012170:	e772      	b.n	24012058 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
24012172:	2510      	movs	r5, #16
24012174:	e6e8      	b.n	24011f48 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
24012176:	0730      	lsls	r0, r6, #28
24012178:	f53f af26 	bmi.w	24011fc8 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2401217c:	9b03      	ldr	r3, [sp, #12]
2401217e:	e76b      	b.n	24012058 <f_open+0x134>
						res = FR_DENIED;
24012180:	2507      	movs	r5, #7
24012182:	e6e1      	b.n	24011f48 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
24012184:	f8d3 8010 	ldr.w	r8, [r3, #16]
24012188:	f1b8 0f00 	cmp.w	r8, #0
2401218c:	d093      	beq.n	240120b6 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401218e:	4540      	cmp	r0, r8
24012190:	d191      	bne.n	240120b6 <f_open+0x192>
24012192:	6958      	ldr	r0, [r3, #20]
24012194:	4560      	cmp	r0, ip
24012196:	d18e      	bne.n	240120b6 <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
24012198:	6998      	ldr	r0, [r3, #24]
2401219a:	4586      	cmp	lr, r0
2401219c:	d18b      	bne.n	240120b6 <f_open+0x192>
2401219e:	e781      	b.n	240120a4 <f_open+0x180>
					res = FR_NO_FILE;
240121a0:	2504      	movs	r5, #4
240121a2:	e6d1      	b.n	24011f48 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240121a4:	6958      	ldr	r0, [r3, #20]
240121a6:	4560      	cmp	r0, ip
240121a8:	f47f aefa 	bne.w	24011fa0 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
240121ac:	6998      	ldr	r0, [r3, #24]
240121ae:	4586      	cmp	lr, r0
240121b0:	f47f aef6 	bne.w	24011fa0 <f_open+0x7c>
240121b4:	e776      	b.n	240120a4 <f_open+0x180>
240121b6:	6898      	ldr	r0, [r3, #8]
240121b8:	4570      	cmp	r0, lr
240121ba:	f47f af68 	bne.w	2401208e <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
240121be:	4628      	mov	r0, r5
240121c0:	e771      	b.n	240120a6 <f_open+0x182>
				fp->clust = clst;
240121c2:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
240121c4:	f3c8 0308 	ubfx	r3, r8, #0, #9
240121c8:	2b00      	cmp	r3, #0
240121ca:	f43f aebf 	beq.w	24011f4c <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
240121ce:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
240121d0:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240121d2:	6983      	ldr	r3, [r0, #24]
240121d4:	3b02      	subs	r3, #2
240121d6:	429e      	cmp	r6, r3
240121d8:	f4bf af4a 	bcs.w	24012070 <f_open+0x14c>
	return clst * fs->csize + fs->database;
240121dc:	8942      	ldrh	r2, [r0, #10]
240121de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
240121e0:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
240121e4:	2a00      	cmp	r2, #0
240121e6:	f43f af43 	beq.w	24012070 <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
240121ea:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
240121ee:	4651      	mov	r1, sl
240121f0:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
240121f2:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
240121f4:	7840      	ldrb	r0, [r0, #1]
240121f6:	f7fd fc5d 	bl	2400fab4 <disk_read>
240121fa:	2800      	cmp	r0, #0
240121fc:	f43f aea6 	beq.w	24011f4c <f_open+0x28>
24012200:	2501      	movs	r5, #1
24012202:	e6a1      	b.n	24011f48 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
24012204:	3e01      	subs	r6, #1
24012206:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
24012208:	e722      	b.n	24012050 <f_open+0x12c>
2401220a:	bf00      	nop
2401220c:	2001e724 	.word	0x2001e724
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
24012210:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
24012212:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
24012214:	bf0c      	ite	eq
24012216:	2301      	moveq	r3, #1
24012218:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2401221a:	d1d3      	bne.n	240121c4 <f_open+0x2a0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2401221c:	461d      	mov	r5, r3
2401221e:	e693      	b.n	24011f48 <f_open+0x24>

24012220 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
24012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24012224:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
24012226:	2300      	movs	r3, #0
{
24012228:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2401222a:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401222c:	b150      	cbz	r0, 24012244 <f_read+0x24>
2401222e:	6803      	ldr	r3, [r0, #0]
24012230:	4604      	mov	r4, r0
24012232:	b13b      	cbz	r3, 24012244 <f_read+0x24>
24012234:	4617      	mov	r7, r2
24012236:	781a      	ldrb	r2, [r3, #0]
24012238:	b122      	cbz	r2, 24012244 <f_read+0x24>
2401223a:	460d      	mov	r5, r1
2401223c:	88da      	ldrh	r2, [r3, #6]
2401223e:	8881      	ldrh	r1, [r0, #4]
24012240:	4291      	cmp	r1, r2
24012242:	d005      	beq.n	24012250 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
24012244:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
24012248:	4640      	mov	r0, r8
2401224a:	b005      	add	sp, #20
2401224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24012250:	7858      	ldrb	r0, [r3, #1]
24012252:	f7fd fc13 	bl	2400fa7c <disk_status>
24012256:	07c2      	lsls	r2, r0, #31
24012258:	d4f4      	bmi.n	24012244 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2401225a:	f894 8015 	ldrb.w	r8, [r4, #21]
2401225e:	f1b8 0f00 	cmp.w	r8, #0
24012262:	d1f1      	bne.n	24012248 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
24012264:	7d23      	ldrb	r3, [r4, #20]
24012266:	f013 0301 	ands.w	r3, r3, #1
2401226a:	9300      	str	r3, [sp, #0]
2401226c:	f000 80ca 	beq.w	24012404 <f_read+0x1e4>
	remain = fp->obj.objsize - fp->fptr;
24012270:	69a3      	ldr	r3, [r4, #24]
24012272:	68e2      	ldr	r2, [r4, #12]
24012274:	1ad2      	subs	r2, r2, r3
24012276:	4297      	cmp	r7, r2
24012278:	bf28      	it	cs
2401227a:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
2401227c:	2f00      	cmp	r7, #0
2401227e:	d0e3      	beq.n	24012248 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
24012280:	f104 022d 	add.w	r2, r4, #45	; 0x2d
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24012284:	46a2      	mov	sl, r4
24012286:	f8cd 8008 	str.w	r8, [sp, #8]
2401228a:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2401228c:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24012290:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
24012294:	2a00      	cmp	r2, #0
24012296:	d140      	bne.n	2401231a <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
24012298:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2401229c:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2401229e:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
240122a2:	d06d      	beq.n	24012380 <f_read+0x160>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
240122a4:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240122a6:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
240122aa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240122ac:	3b02      	subs	r3, #2
240122ae:	4298      	cmp	r0, r3
240122b0:	d273      	bcs.n	2401239a <f_read+0x17a>
	return clst * fs->csize + fs->database;
240122b2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
240122b6:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
240122ba:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
240122be:	2800      	cmp	r0, #0
240122c0:	d06b      	beq.n	2401239a <f_read+0x17a>
			if (cc) {							/* Read maximum contiguous sectors directly */
240122c2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
240122c6:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
240122ca:	d36d      	bcc.n	240123a8 <f_read+0x188>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240122cc:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
240122d0:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240122d4:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240122d6:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
240122da:	bf88      	it	hi
240122dc:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240122e0:	465a      	mov	r2, fp
240122e2:	4629      	mov	r1, r5
240122e4:	4643      	mov	r3, r8
240122e6:	f7fd fbe5 	bl	2400fab4 <disk_read>
240122ea:	2800      	cmp	r0, #0
240122ec:	d171      	bne.n	240123d2 <f_read+0x1b2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
240122ee:	f994 2014 	ldrsb.w	r2, [r4, #20]
240122f2:	2a00      	cmp	r2, #0
240122f4:	f2c0 8096 	blt.w	24012424 <f_read+0x204>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
240122f8:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
240122fc:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
240122fe:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
24012300:	440d      	add	r5, r1
24012302:	440b      	add	r3, r1
24012304:	61a3      	str	r3, [r4, #24]
24012306:	6833      	ldr	r3, [r6, #0]
24012308:	440b      	add	r3, r1
2401230a:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2401230c:	f000 80a0 	beq.w	24012450 <f_read+0x230>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
24012310:	69a3      	ldr	r3, [r4, #24]
24012312:	f3c3 0208 	ubfx	r2, r3, #0, #9
24012316:	2a00      	cmp	r2, #0
24012318:	d0be      	beq.n	24012298 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2401231a:	1c50      	adds	r0, r2, #1
2401231c:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
24012320:	eb0a 0302 	add.w	r3, sl, r2
24012324:	4450      	add	r0, sl
24012326:	42b9      	cmp	r1, r7
24012328:	eba5 0000 	sub.w	r0, r5, r0
2401232c:	bf28      	it	cs
2401232e:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
24012330:	2802      	cmp	r0, #2
24012332:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
24012336:	d95b      	bls.n	240123f0 <f_read+0x1d0>
24012338:	f1bb 0f07 	cmp.w	fp, #7
2401233c:	d958      	bls.n	240123f0 <f_read+0x1d0>
2401233e:	f021 0e03 	bic.w	lr, r1, #3
24012342:	461a      	mov	r2, r3
24012344:	4628      	mov	r0, r5
24012346:	449e      	add	lr, r3
			*d++ = *s++;
24012348:	f852 cb04 	ldr.w	ip, [r2], #4
2401234c:	4572      	cmp	r2, lr
2401234e:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
24012352:	d1f9      	bne.n	24012348 <f_read+0x128>
24012354:	f021 0203 	bic.w	r2, r1, #3
24012358:	4291      	cmp	r1, r2
2401235a:	eb05 0002 	add.w	r0, r5, r2
2401235e:	eb03 0c02 	add.w	ip, r3, r2
24012362:	d0cb      	beq.n	240122fc <f_read+0xdc>
			*d++ = *s++;
24012364:	5c9b      	ldrb	r3, [r3, r2]
24012366:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
24012368:	ebbb 0202 	subs.w	r2, fp, r2
2401236c:	d0c6      	beq.n	240122fc <f_read+0xdc>
			*d++ = *s++;
2401236e:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
24012372:	2a01      	cmp	r2, #1
			*d++ = *s++;
24012374:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
24012376:	d0c1      	beq.n	240122fc <f_read+0xdc>
			*d++ = *s++;
24012378:	f89c 3002 	ldrb.w	r3, [ip, #2]
2401237c:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2401237e:	e7bd      	b.n	240122fc <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
24012380:	bb7b      	cbnz	r3, 240123e2 <f_read+0x1c2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
24012382:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
24012384:	2801      	cmp	r0, #1
24012386:	d908      	bls.n	2401239a <f_read+0x17a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24012388:	1c43      	adds	r3, r0, #1
2401238a:	d022      	beq.n	240123d2 <f_read+0x1b2>
				fp->clust = clst;				/* Update current cluster */
2401238c:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2401238e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24012390:	f8d9 3018 	ldr.w	r3, [r9, #24]
24012394:	3b02      	subs	r3, #2
24012396:	4298      	cmp	r0, r3
24012398:	d38b      	bcc.n	240122b2 <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2401239a:	2302      	movs	r3, #2
2401239c:	4698      	mov	r8, r3
2401239e:	7563      	strb	r3, [r4, #21]
}
240123a0:	4640      	mov	r0, r8
240123a2:	b005      	add	sp, #20
240123a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
240123a8:	6a22      	ldr	r2, [r4, #32]
240123aa:	455a      	cmp	r2, fp
240123ac:	d00b      	beq.n	240123c6 <f_read+0x1a6>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
240123ae:	f994 3014 	ldrsb.w	r3, [r4, #20]
240123b2:	2b00      	cmp	r3, #0
240123b4:	db29      	blt.n	2401240a <f_read+0x1ea>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
240123b6:	2301      	movs	r3, #1
240123b8:	465a      	mov	r2, fp
240123ba:	4651      	mov	r1, sl
240123bc:	f899 0001 	ldrb.w	r0, [r9, #1]
240123c0:	f7fd fb78 	bl	2400fab4 <disk_read>
240123c4:	b928      	cbnz	r0, 240123d2 <f_read+0x1b2>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240123c6:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
240123c8:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240123cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
240123d0:	e7a3      	b.n	2401231a <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240123d2:	f8dd 8000 	ldr.w	r8, [sp]
240123d6:	2301      	movs	r3, #1
}
240123d8:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240123da:	7563      	strb	r3, [r4, #21]
}
240123dc:	b005      	add	sp, #20
240123de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
240123e2:	69e1      	ldr	r1, [r4, #28]
240123e4:	6820      	ldr	r0, [r4, #0]
240123e6:	9203      	str	r2, [sp, #12]
240123e8:	f7fd ff5e 	bl	240102a8 <get_fat.isra.0>
240123ec:	9a03      	ldr	r2, [sp, #12]
240123ee:	e7c9      	b.n	24012384 <f_read+0x164>
240123f0:	1e6a      	subs	r2, r5, #1
240123f2:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
240123f6:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
240123fa:	4563      	cmp	r3, ip
			*d++ = *s++;
240123fc:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
24012400:	d1f9      	bne.n	240123f6 <f_read+0x1d6>
24012402:	e77b      	b.n	240122fc <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
24012404:	f04f 0807 	mov.w	r8, #7
24012408:	e71e      	b.n	24012248 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401240a:	2301      	movs	r3, #1
2401240c:	4651      	mov	r1, sl
2401240e:	f899 0001 	ldrb.w	r0, [r9, #1]
24012412:	f7fd fb5d 	bl	2400fad0 <disk_write>
24012416:	2800      	cmp	r0, #0
24012418:	d1db      	bne.n	240123d2 <f_read+0x1b2>
					fp->flag &= (BYTE)~FA_DIRTY;
2401241a:	7d23      	ldrb	r3, [r4, #20]
2401241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24012420:	7523      	strb	r3, [r4, #20]
24012422:	e7c8      	b.n	240123b6 <f_read+0x196>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
24012424:	6a22      	ldr	r2, [r4, #32]
24012426:	eba2 0b0b 	sub.w	fp, r2, fp
2401242a:	45c3      	cmp	fp, r8
2401242c:	f4bf af64 	bcs.w	240122f8 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
24012430:	eb05 224b 	add.w	r2, r5, fp, lsl #9
24012434:	9b01      	ldr	r3, [sp, #4]
24012436:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
24012438:	1ad0      	subs	r0, r2, r3
2401243a:	2802      	cmp	r0, #2
2401243c:	d90b      	bls.n	24012456 <f_read+0x236>
2401243e:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
24012442:	f851 3b04 	ldr.w	r3, [r1], #4
24012446:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2401244a:	4562      	cmp	r2, ip
2401244c:	d1f9      	bne.n	24012442 <f_read+0x222>
2401244e:	e753      	b.n	240122f8 <f_read+0xd8>
24012450:	f8dd 8008 	ldr.w	r8, [sp, #8]
24012454:	e6f8      	b.n	24012248 <f_read+0x28>
24012456:	3a01      	subs	r2, #1
24012458:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2401245c:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
24012460:	458c      	cmp	ip, r1
			*d++ = *s++;
24012462:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
24012466:	d1f9      	bne.n	2401245c <f_read+0x23c>
24012468:	e746      	b.n	240122f8 <f_read+0xd8>
2401246a:	bf00      	nop

2401246c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2401246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24012470:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
24012472:	2300      	movs	r3, #0
{
24012474:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
24012476:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24012478:	b150      	cbz	r0, 24012490 <f_write+0x24>
2401247a:	6803      	ldr	r3, [r0, #0]
2401247c:	4604      	mov	r4, r0
2401247e:	b13b      	cbz	r3, 24012490 <f_write+0x24>
24012480:	4616      	mov	r6, r2
24012482:	781a      	ldrb	r2, [r3, #0]
24012484:	b122      	cbz	r2, 24012490 <f_write+0x24>
24012486:	460d      	mov	r5, r1
24012488:	88da      	ldrh	r2, [r3, #6]
2401248a:	8881      	ldrh	r1, [r0, #4]
2401248c:	4291      	cmp	r1, r2
2401248e:	d005      	beq.n	2401249c <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
24012490:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
24012494:	4640      	mov	r0, r8
24012496:	b005      	add	sp, #20
24012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2401249c:	7858      	ldrb	r0, [r3, #1]
2401249e:	f7fd faed 	bl	2400fa7c <disk_status>
240124a2:	07c0      	lsls	r0, r0, #31
240124a4:	d4f4      	bmi.n	24012490 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
240124a6:	f894 8015 	ldrb.w	r8, [r4, #21]
240124aa:	f1b8 0f00 	cmp.w	r8, #0
240124ae:	d1f1      	bne.n	24012494 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
240124b0:	7d22      	ldrb	r2, [r4, #20]
240124b2:	0791      	lsls	r1, r2, #30
240124b4:	f140 80e4 	bpl.w	24012680 <f_write+0x214>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
240124b8:	69a3      	ldr	r3, [r4, #24]
240124ba:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
240124bc:	bf28      	it	cs
240124be:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
240124c0:	2e00      	cmp	r6, #0
240124c2:	f000 80cf 	beq.w	24012664 <f_write+0x1f8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
240124c6:	f504 720b 	add.w	r2, r4, #556	; 0x22c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240124ca:	46a2      	mov	sl, r4
240124cc:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
240124ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240124d2:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
240124d6:	2a00      	cmp	r2, #0
240124d8:	d15e      	bne.n	24012598 <f_write+0x12c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
240124da:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
240124de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
240124e2:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
240124e6:	d110      	bne.n	2401250a <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
240124e8:	2b00      	cmp	r3, #0
240124ea:	f040 80b3 	bne.w	24012654 <f_write+0x1e8>
					clst = fp->obj.sclust;	/* Follow from the origin */
240124ee:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
240124f0:	2800      	cmp	r0, #0
240124f2:	f000 80c8 	beq.w	24012686 <f_write+0x21a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
240124f6:	2801      	cmp	r0, #1
240124f8:	f000 8086 	beq.w	24012608 <f_write+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240124fc:	1c43      	adds	r3, r0, #1
240124fe:	f000 80a2 	beq.w	24012646 <f_write+0x1da>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24012502:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
24012504:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24012506:	b903      	cbnz	r3, 2401250a <f_write+0x9e>
24012508:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2401250a:	f994 3014 	ldrsb.w	r3, [r4, #20]
2401250e:	2b00      	cmp	r3, #0
24012510:	f2c0 808c 	blt.w	2401262c <f_write+0x1c0>
	clst -= 2;
24012514:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24012516:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2401251a:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401251c:	3b02      	subs	r3, #2
2401251e:	429a      	cmp	r2, r3
24012520:	d272      	bcs.n	24012608 <f_write+0x19c>
	return clst * fs->csize + fs->database;
24012522:	f8b9 100a 	ldrh.w	r1, [r9, #10]
24012526:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2401252a:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2401252e:	2a00      	cmp	r2, #0
24012530:	d06a      	beq.n	24012608 <f_write+0x19c>
			if (cc) {						/* Write maximum contiguous sectors directly */
24012532:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
24012536:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
24012538:	d36d      	bcc.n	24012616 <f_write+0x1aa>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2401253a:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2401253e:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24012540:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24012542:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
24012546:	bf88      	it	hi
24012548:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401254c:	4629      	mov	r1, r5
2401254e:	e9cd 2302 	strd	r2, r3, [sp, #8]
24012552:	f7fd fabd 	bl	2400fad0 <disk_write>
24012556:	2800      	cmp	r0, #0
24012558:	d175      	bne.n	24012646 <f_write+0x1da>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2401255a:	6a21      	ldr	r1, [r4, #32]
2401255c:	9a02      	ldr	r2, [sp, #8]
2401255e:	9b03      	ldr	r3, [sp, #12]
24012560:	1a8a      	subs	r2, r1, r2
24012562:	429a      	cmp	r2, r3
24012564:	f0c0 80a3 	bcc.w	240126ae <f_write+0x242>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
24012568:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2401256c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
24012570:	69a3      	ldr	r3, [r4, #24]
24012572:	4615      	mov	r5, r2
24012574:	68e2      	ldr	r2, [r4, #12]
24012576:	4463      	add	r3, ip
24012578:	4293      	cmp	r3, r2
2401257a:	61a3      	str	r3, [r4, #24]
2401257c:	bf38      	it	cc
2401257e:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
24012580:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
24012584:	60e3      	str	r3, [r4, #12]
24012586:	683b      	ldr	r3, [r7, #0]
24012588:	4463      	add	r3, ip
2401258a:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2401258c:	d069      	beq.n	24012662 <f_write+0x1f6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2401258e:	69a3      	ldr	r3, [r4, #24]
24012590:	f3c3 0208 	ubfx	r2, r3, #0, #9
24012594:	2a00      	cmp	r2, #0
24012596:	d0a0      	beq.n	240124da <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24012598:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2401259c:	eb0a 0302 	add.w	r3, sl, r2
240125a0:	1c6a      	adds	r2, r5, #1
240125a2:	45b4      	cmp	ip, r6
240125a4:	eba3 0202 	sub.w	r2, r3, r2
240125a8:	bf28      	it	cs
240125aa:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
240125ac:	2a02      	cmp	r2, #2
240125ae:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
240125b2:	d95b      	bls.n	2401266c <f_write+0x200>
240125b4:	f1bb 0f07 	cmp.w	fp, #7
240125b8:	d958      	bls.n	2401266c <f_write+0x200>
240125ba:	f02c 0e03 	bic.w	lr, ip, #3
240125be:	462a      	mov	r2, r5
240125c0:	4619      	mov	r1, r3
240125c2:	44ae      	add	lr, r5
			*d++ = *s++;
240125c4:	f852 0b04 	ldr.w	r0, [r2], #4
240125c8:	4572      	cmp	r2, lr
240125ca:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
240125ce:	d1f9      	bne.n	240125c4 <f_write+0x158>
240125d0:	f02c 0103 	bic.w	r1, ip, #3
240125d4:	458c      	cmp	ip, r1
240125d6:	eb03 0001 	add.w	r0, r3, r1
240125da:	eb05 0201 	add.w	r2, r5, r1
240125de:	d00e      	beq.n	240125fe <f_write+0x192>
			*d++ = *s++;
240125e0:	f815 e001 	ldrb.w	lr, [r5, r1]
240125e4:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
240125e8:	ebbb 0101 	subs.w	r1, fp, r1
240125ec:	d005      	beq.n	240125fa <f_write+0x18e>
			*d++ = *s++;
240125ee:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
240125f0:	2901      	cmp	r1, #1
			*d++ = *s++;
240125f2:	7043      	strb	r3, [r0, #1]
240125f4:	bf1c      	itt	ne
240125f6:	7893      	ldrbne	r3, [r2, #2]
240125f8:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
240125fa:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
240125fe:	7d23      	ldrb	r3, [r4, #20]
24012600:	f063 037f 	orn	r3, r3, #127	; 0x7f
24012604:	7523      	strb	r3, [r4, #20]
24012606:	e7b3      	b.n	24012570 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
24012608:	2302      	movs	r3, #2
2401260a:	4698      	mov	r8, r3
2401260c:	7563      	strb	r3, [r4, #21]
}
2401260e:	4640      	mov	r0, r8
24012610:	b005      	add	sp, #20
24012612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
24012616:	6a23      	ldr	r3, [r4, #32]
24012618:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2401261a:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2401261c:	d002      	beq.n	24012624 <f_write+0x1b8>
2401261e:	68e1      	ldr	r1, [r4, #12]
24012620:	428b      	cmp	r3, r1
24012622:	d338      	bcc.n	24012696 <f_write+0x22a>
			fp->sect = sect;
24012624:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24012626:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401262a:	e7b5      	b.n	24012598 <f_write+0x12c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401262c:	2301      	movs	r3, #1
2401262e:	6a22      	ldr	r2, [r4, #32]
24012630:	4651      	mov	r1, sl
24012632:	f899 0001 	ldrb.w	r0, [r9, #1]
24012636:	f7fd fa4b 	bl	2400fad0 <disk_write>
2401263a:	b920      	cbnz	r0, 24012646 <f_write+0x1da>
				fp->flag &= (BYTE)~FA_DIRTY;
2401263c:	7d23      	ldrb	r3, [r4, #20]
2401263e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24012642:	7523      	strb	r3, [r4, #20]
24012644:	e766      	b.n	24012514 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24012646:	2301      	movs	r3, #1
24012648:	4698      	mov	r8, r3
2401264a:	7563      	strb	r3, [r4, #21]
}
2401264c:	4640      	mov	r0, r8
2401264e:	b005      	add	sp, #20
24012650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
24012654:	69e1      	ldr	r1, [r4, #28]
24012656:	4620      	mov	r0, r4
24012658:	f7fe f93e 	bl	240108d8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401265c:	2800      	cmp	r0, #0
2401265e:	f47f af4a 	bne.w	240124f6 <f_write+0x8a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
24012662:	7d22      	ldrb	r2, [r4, #20]
24012664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24012668:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2401266a:	e713      	b.n	24012494 <f_write+0x28>
2401266c:	3b01      	subs	r3, #1
2401266e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
24012672:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
24012676:	4295      	cmp	r5, r2
			*d++ = *s++;
24012678:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2401267c:	d1f9      	bne.n	24012672 <f_write+0x206>
2401267e:	e7be      	b.n	240125fe <f_write+0x192>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
24012680:	f04f 0807 	mov.w	r8, #7
24012684:	e706      	b.n	24012494 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
24012686:	4659      	mov	r1, fp
24012688:	4620      	mov	r0, r4
2401268a:	f7fe f925 	bl	240108d8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401268e:	2800      	cmp	r0, #0
24012690:	f47f af31 	bne.w	240124f6 <f_write+0x8a>
24012694:	e7e5      	b.n	24012662 <f_write+0x1f6>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
24012696:	2301      	movs	r3, #1
24012698:	4651      	mov	r1, sl
2401269a:	f899 0001 	ldrb.w	r0, [r9, #1]
2401269e:	9202      	str	r2, [sp, #8]
240126a0:	f7fd fa08 	bl	2400fab4 <disk_read>
				fp->fptr < fp->obj.objsize &&
240126a4:	2800      	cmp	r0, #0
240126a6:	d1ce      	bne.n	24012646 <f_write+0x1da>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240126a8:	69a3      	ldr	r3, [r4, #24]
240126aa:	9a02      	ldr	r2, [sp, #8]
240126ac:	e7ba      	b.n	24012624 <f_write+0x1b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
240126ae:	eb05 2042 	add.w	r0, r5, r2, lsl #9
240126b2:	1c42      	adds	r2, r0, #1
240126b4:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
240126b6:	ebaa 0202 	sub.w	r2, sl, r2
240126ba:	2a02      	cmp	r2, #2
240126bc:	d90d      	bls.n	240126da <f_write+0x26e>
240126be:	4652      	mov	r2, sl
240126c0:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
240126c4:	f851 0b04 	ldr.w	r0, [r1], #4
240126c8:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
240126cc:	4562      	cmp	r2, ip
240126ce:	d1f9      	bne.n	240126c4 <f_write+0x258>
					fp->flag &= (BYTE)~FA_DIRTY;
240126d0:	7d22      	ldrb	r2, [r4, #20]
240126d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
240126d6:	7522      	strb	r2, [r4, #20]
240126d8:	e746      	b.n	24012568 <f_write+0xfc>
240126da:	f104 022b 	add.w	r2, r4, #43	; 0x2b
240126de:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
240126e2:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
240126e6:	458c      	cmp	ip, r1
			*d++ = *s++;
240126e8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
240126ec:	d1f9      	bne.n	240126e2 <f_write+0x276>
240126ee:	e7ef      	b.n	240126d0 <f_write+0x264>

240126f0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240126f0:	b158      	cbz	r0, 2401270a <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
240126f2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240126f4:	6803      	ldr	r3, [r0, #0]
240126f6:	4604      	mov	r4, r0
240126f8:	b12b      	cbz	r3, 24012706 <f_close+0x16>
240126fa:	781a      	ldrb	r2, [r3, #0]
240126fc:	b11a      	cbz	r2, 24012706 <f_close+0x16>
240126fe:	8881      	ldrh	r1, [r0, #4]
24012700:	88da      	ldrh	r2, [r3, #6]
24012702:	4291      	cmp	r1, r2
24012704:	d003      	beq.n	2401270e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
24012706:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
24012708:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2401270a:	2009      	movs	r0, #9
}
2401270c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2401270e:	7858      	ldrb	r0, [r3, #1]
24012710:	f7fd f9b4 	bl	2400fa7c <disk_status>
24012714:	07c1      	lsls	r1, r0, #31
24012716:	d4f6      	bmi.n	24012706 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
24012718:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2401271a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2401271c:	065a      	lsls	r2, r3, #25
2401271e:	d53c      	bpl.n	2401279a <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
24012720:	061b      	lsls	r3, r3, #24
24012722:	d45d      	bmi.n	240127e0 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
24012724:	f7fd f8c0 	bl	2400f8a8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
24012728:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2401272a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
2401272c:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2401272e:	4299      	cmp	r1, r3
24012730:	d004      	beq.n	2401273c <f_close+0x4c>
24012732:	4628      	mov	r0, r5
24012734:	f7fd fb6c 	bl	2400fe10 <move_window.part.0>
				if (res == FR_OK) {
24012738:	2800      	cmp	r0, #0
2401273a:	d1e5      	bne.n	24012708 <f_close+0x18>
					dir = fp->dir_ptr;
2401273c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2401273e:	7ad3      	ldrb	r3, [r2, #11]
24012740:	f043 0320 	orr.w	r3, r3, #32
24012744:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
24012746:	68a3      	ldr	r3, [r4, #8]
24012748:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2401274a:	f3c3 2007 	ubfx	r0, r3, #8, #8
2401274e:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
24012750:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
24012752:	7809      	ldrb	r1, [r1, #0]
24012754:	2903      	cmp	r1, #3
24012756:	d103      	bne.n	24012760 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
24012758:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2401275a:	7513      	strb	r3, [r2, #20]
2401275c:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
2401275e:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
24012760:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
24012762:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
24012764:	7596      	strb	r6, [r2, #22]
24012766:	0a19      	lsrs	r1, r3, #8
24012768:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2401276a:	7751      	strb	r1, [r2, #29]
2401276c:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2401276e:	0e1b      	lsrs	r3, r3, #24
24012770:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
24012772:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
24012774:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
24012776:	75d3      	strb	r3, [r2, #23]
24012778:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
2401277a:	0e36      	lsrs	r6, r6, #24
2401277c:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
2401277e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
24012780:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
24012782:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
24012784:	2301      	movs	r3, #1
24012786:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
24012788:	f7fe f836 	bl	240107f8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2401278c:	7d23      	ldrb	r3, [r4, #20]
2401278e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24012792:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
24012794:	2800      	cmp	r0, #0
24012796:	d1b7      	bne.n	24012708 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24012798:	6825      	ldr	r5, [r4, #0]
2401279a:	2d00      	cmp	r5, #0
2401279c:	d0b3      	beq.n	24012706 <f_close+0x16>
2401279e:	782b      	ldrb	r3, [r5, #0]
240127a0:	2b00      	cmp	r3, #0
240127a2:	d0b0      	beq.n	24012706 <f_close+0x16>
240127a4:	88a2      	ldrh	r2, [r4, #4]
240127a6:	88eb      	ldrh	r3, [r5, #6]
240127a8:	429a      	cmp	r2, r3
240127aa:	d1ac      	bne.n	24012706 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240127ac:	7868      	ldrb	r0, [r5, #1]
240127ae:	f7fd f965 	bl	2400fa7c <disk_status>
240127b2:	f010 0001 	ands.w	r0, r0, #1
240127b6:	d1a6      	bne.n	24012706 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
240127b8:	6923      	ldr	r3, [r4, #16]
240127ba:	3b01      	subs	r3, #1
240127bc:	2b01      	cmp	r3, #1
240127be:	d81c      	bhi.n	240127fa <f_close+0x10a>
		n = Files[i].ctr;
240127c0:	4912      	ldr	r1, [pc, #72]	; (2401280c <f_close+0x11c>)
240127c2:	011d      	lsls	r5, r3, #4
240127c4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
240127c8:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
240127ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240127ce:	d016      	beq.n	240127fe <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
240127d0:	b1b2      	cbz	r2, 24012800 <f_close+0x110>
240127d2:	3a01      	subs	r2, #1
240127d4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
240127d6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
240127d8:	b192      	cbz	r2, 24012800 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
240127da:	2300      	movs	r3, #0
240127dc:	6023      	str	r3, [r4, #0]
}
240127de:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
240127e0:	2301      	movs	r3, #1
240127e2:	6a22      	ldr	r2, [r4, #32]
240127e4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
240127e8:	7868      	ldrb	r0, [r5, #1]
240127ea:	f7fd f971 	bl	2400fad0 <disk_write>
240127ee:	b950      	cbnz	r0, 24012806 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
240127f0:	7d23      	ldrb	r3, [r4, #20]
240127f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240127f6:	7523      	strb	r3, [r4, #20]
240127f8:	e794      	b.n	24012724 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
240127fa:	2002      	movs	r0, #2
}
240127fc:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
240127fe:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24012800:	2300      	movs	r3, #0
24012802:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
24012804:	e7e9      	b.n	240127da <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
24012806:	2001      	movs	r0, #1
}
24012808:	bd70      	pop	{r4, r5, r6, pc}
2401280a:	bf00      	nop
2401280c:	2001e724 	.word	0x2001e724

24012810 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
24012810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24012812:	b150      	cbz	r0, 2401282a <f_findnext+0x1a>
24012814:	4605      	mov	r5, r0
24012816:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
24012818:	4c39      	ldr	r4, [pc, #228]	; (24012900 <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401281a:	682b      	ldr	r3, [r5, #0]
2401281c:	b12b      	cbz	r3, 2401282a <f_findnext+0x1a>
2401281e:	781a      	ldrb	r2, [r3, #0]
24012820:	b11a      	cbz	r2, 2401282a <f_findnext+0x1a>
24012822:	88a9      	ldrh	r1, [r5, #4]
24012824:	88da      	ldrh	r2, [r3, #6]
24012826:	4291      	cmp	r1, r2
24012828:	d002      	beq.n	24012830 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2401282a:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2401282c:	4638      	mov	r0, r7
2401282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24012830:	7858      	ldrb	r0, [r3, #1]
24012832:	f7fd f923 	bl	2400fa7c <disk_status>
24012836:	07c3      	lsls	r3, r0, #31
24012838:	d4f7      	bmi.n	2401282a <f_findnext+0x1a>
		if (!fno) {
2401283a:	2e00      	cmp	r6, #0
2401283c:	d058      	beq.n	240128f0 <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
2401283e:	4628      	mov	r0, r5
24012840:	f7fd fdd8 	bl	240103f4 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
24012844:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
24012848:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2401284a:	d1ef      	bne.n	2401282c <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
2401284c:	4631      	mov	r1, r6
2401284e:	4628      	mov	r0, r5
24012850:	f7fd fa1e 	bl	2400fc90 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
24012854:	4628      	mov	r0, r5
24012856:	f7fd fd87 	bl	24010368 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2401285a:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2401285e:	d14d      	bne.n	240128fc <f_findnext+0xec>
24012860:	7db3      	ldrb	r3, [r6, #22]
24012862:	2b00      	cmp	r3, #0
24012864:	d0e2      	beq.n	2401282c <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
24012866:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2401286a:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2401286e:	e00f      	b.n	24012890 <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24012870:	3a20      	subs	r2, #32
24012872:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24012874:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24012878:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401287c:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401287e:	f1be 0f19 	cmp.w	lr, #25
24012882:	d817      	bhi.n	240128b4 <f_findnext+0xa4>
24012884:	3b20      	subs	r3, #32
24012886:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
24012888:	4293      	cmp	r3, r2
2401288a:	d1c6      	bne.n	2401281a <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2401288c:	2b00      	cmp	r3, #0
2401288e:	d0cd      	beq.n	2401282c <f_findnext+0x1c>
24012890:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
24012892:	f81c 3b01 	ldrb.w	r3, [ip], #1
24012896:	2b3f      	cmp	r3, #63	; 0x3f
24012898:	d012      	beq.n	240128c0 <f_findnext+0xb0>
2401289a:	2b2a      	cmp	r3, #42	; 0x2a
2401289c:	d010      	beq.n	240128c0 <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401289e:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
240128a2:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240128a4:	2819      	cmp	r0, #25
240128a6:	d9e3      	bls.n	24012870 <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
240128a8:	2a7f      	cmp	r2, #127	; 0x7f
240128aa:	d9e3      	bls.n	24012874 <f_findnext+0x64>
240128ac:	4423      	add	r3, r4
240128ae:	f813 2c80 	ldrb.w	r2, [r3, #-128]
240128b2:	e7df      	b.n	24012874 <f_findnext+0x64>
240128b4:	2b7f      	cmp	r3, #127	; 0x7f
240128b6:	d9e7      	bls.n	24012888 <f_findnext+0x78>
240128b8:	4420      	add	r0, r4
240128ba:	f810 3c80 	ldrb.w	r3, [r0, #-128]
240128be:	e7e3      	b.n	24012888 <f_findnext+0x78>
240128c0:	4694      	mov	ip, r2
				nm = nx = 0;
240128c2:	2300      	movs	r3, #0
240128c4:	f81c eb01 	ldrb.w	lr, [ip], #1
240128c8:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
240128ca:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
240128ce:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
240128d0:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
240128d4:	bf0c      	ite	eq
240128d6:	3201      	addeq	r2, #1
240128d8:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
240128da:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
240128de:	d0f4      	beq.n	240128ca <f_findnext+0xba>
240128e0:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
240128e4:	d0f1      	beq.n	240128ca <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
240128e6:	f7fd f95d 	bl	2400fba4 <pattern_matching>
240128ea:	2800      	cmp	r0, #0
240128ec:	d095      	beq.n	2401281a <f_findnext+0xa>
240128ee:	e79d      	b.n	2401282c <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
240128f0:	4631      	mov	r1, r6
240128f2:	4628      	mov	r0, r5
}
240128f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
240128f8:	f7fe b8be 	b.w	24010a78 <dir_sdi>
240128fc:	4607      	mov	r7, r0
240128fe:	e795      	b.n	2401282c <f_findnext+0x1c>
24012900:	2401d0cc 	.word	0x2401d0cc

24012904 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
24012904:	b570      	push	{r4, r5, r6, lr}
24012906:	b082      	sub	sp, #8
24012908:	4615      	mov	r5, r2
2401290a:	4604      	mov	r4, r0
2401290c:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2401290e:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
24012910:	2200      	movs	r2, #0
24012912:	a901      	add	r1, sp, #4
24012914:	4668      	mov	r0, sp
24012916:	9500      	str	r5, [sp, #0]
24012918:	f7fd fab4 	bl	2400fe84 <find_volume>
	if (res == FR_OK) {
2401291c:	b118      	cbz	r0, 24012926 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2401291e:	2300      	movs	r3, #0
24012920:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
24012922:	b002      	add	sp, #8
24012924:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
24012926:	e9dd 1300 	ldrd	r1, r3, [sp]
2401292a:	4620      	mov	r0, r4
		obj->fs = fs;
2401292c:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2401292e:	f7fe fb05 	bl	24010f3c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
24012932:	bb08      	cbnz	r0, 24012978 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
24012934:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
24012938:	2b00      	cmp	r3, #0
2401293a:	db25      	blt.n	24012988 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2401293c:	79a3      	ldrb	r3, [r4, #6]
2401293e:	06db      	lsls	r3, r3, #27
24012940:	d520      	bpl.n	24012984 <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
24012942:	9b01      	ldr	r3, [sp, #4]
24012944:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
24012946:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
24012948:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
2401294a:	2803      	cmp	r0, #3
2401294c:	d102      	bne.n	24012954 <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2401294e:	8a89      	ldrh	r1, [r1, #20]
24012950:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
24012954:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
24012956:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
24012958:	2100      	movs	r1, #0
2401295a:	4620      	mov	r0, r4
				obj->id = fs->id;
2401295c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2401295e:	f7fe f88b 	bl	24010a78 <dir_sdi>
				if (res == FR_OK) {
24012962:	b948      	cbnz	r0, 24012978 <f_findfirst+0x74>
					if (obj->sclust) {
24012964:	68a3      	ldr	r3, [r4, #8]
24012966:	b98b      	cbnz	r3, 2401298c <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
24012968:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2401296a:	4631      	mov	r1, r6
2401296c:	4620      	mov	r0, r4
}
2401296e:	b002      	add	sp, #8
24012970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
24012974:	f7ff bf4c 	b.w	24012810 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
24012978:	2804      	cmp	r0, #4
2401297a:	d1d0      	bne.n	2401291e <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2401297c:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2401297e:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24012980:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
24012982:	e7ce      	b.n	24012922 <f_findfirst+0x1e>
					res = FR_NO_PATH;
24012984:	2005      	movs	r0, #5
24012986:	e7ca      	b.n	2401291e <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
24012988:	9b01      	ldr	r3, [sp, #4]
2401298a:	e7e4      	b.n	24012956 <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2401298c:	4601      	mov	r1, r0
2401298e:	4620      	mov	r0, r4
24012990:	f7fd f8b8 	bl	2400fb04 <inc_lock>
24012994:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
24012996:	2800      	cmp	r0, #0
24012998:	d1e7      	bne.n	2401296a <f_findfirst+0x66>
2401299a:	2012      	movs	r0, #18
2401299c:	e7bf      	b.n	2401291e <f_findfirst+0x1a>
2401299e:	bf00      	nop

240129a0 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
240129a0:	4b10      	ldr	r3, [pc, #64]	; (240129e4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
240129a2:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
240129a4:	7a5c      	ldrb	r4, [r3, #9]
240129a6:	b9cc      	cbnz	r4, 240129dc <FATFS_LinkDriver+0x3c>
240129a8:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
240129aa:	f004 00ff 	and.w	r0, r4, #255	; 0xff
240129ae:	7a5c      	ldrb	r4, [r3, #9]
240129b0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
240129b2:	7a5c      	ldrb	r4, [r3, #9]
240129b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
240129b8:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
240129ba:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
240129bc:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
240129be:	441c      	add	r4, r3
240129c0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
240129c2:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
240129c4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
240129c6:	b2e4      	uxtb	r4, r4
240129c8:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
240129ca:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
240129cc:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
240129ce:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
240129d0:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
240129d2:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
240129d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
240129d8:	708b      	strb	r3, [r1, #2]
}
240129da:	4770      	bx	lr
  uint8_t ret = 1;
240129dc:	2001      	movs	r0, #1
}
240129de:	f85d 4b04 	ldr.w	r4, [sp], #4
240129e2:	4770      	bx	lr
240129e4:	2001e948 	.word	0x2001e948

240129e8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
240129e8:	287f      	cmp	r0, #127	; 0x7f
240129ea:	d912      	bls.n	24012a12 <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
240129ec:	b971      	cbnz	r1, 24012a0c <ff_convert+0x24>
240129ee:	4b0c      	ldr	r3, [pc, #48]	; (24012a20 <ff_convert+0x38>)
240129f0:	e001      	b.n	240129f6 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
240129f2:	2980      	cmp	r1, #128	; 0x80
240129f4:	d00c      	beq.n	24012a10 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
240129f6:	f833 2b02 	ldrh.w	r2, [r3], #2
240129fa:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
240129fe:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24012a00:	4282      	cmp	r2, r0
24012a02:	d1f6      	bne.n	240129f2 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
24012a04:	f10c 0080 	add.w	r0, ip, #128	; 0x80
24012a08:	b280      	uxth	r0, r0
24012a0a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24012a0c:	28ff      	cmp	r0, #255	; 0xff
24012a0e:	d901      	bls.n	24012a14 <ff_convert+0x2c>
24012a10:	2000      	movs	r0, #0
		}
	}

	return c;
}
24012a12:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24012a14:	4b02      	ldr	r3, [pc, #8]	; (24012a20 <ff_convert+0x38>)
24012a16:	3880      	subs	r0, #128	; 0x80
24012a18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
24012a1c:	4770      	bx	lr
24012a1e:	bf00      	nop
24012a20:	2401d15c 	.word	0x2401d15c

24012a24 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
24012a24:	4b22      	ldr	r3, [pc, #136]	; (24012ab0 <ff_wtoupper+0x8c>)
24012a26:	4a23      	ldr	r2, [pc, #140]	; (24012ab4 <ff_wtoupper+0x90>)
24012a28:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24012a2c:	bf28      	it	cs
24012a2e:	4613      	movcs	r3, r2
{
24012a30:	b510      	push	{r4, lr}
24012a32:	3304      	adds	r3, #4
24012a34:	e001      	b.n	24012a3a <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
24012a36:	3304      	adds	r3, #4
24012a38:	b1da      	cbz	r2, 24012a72 <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
24012a3a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
24012a3e:	461c      	mov	r4, r3
24012a40:	b1b1      	cbz	r1, 24012a70 <ff_wtoupper+0x4c>
24012a42:	4288      	cmp	r0, r1
24012a44:	d314      	bcc.n	24012a70 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
24012a46:	f833 2c02 	ldrh.w	r2, [r3, #-2]
24012a4a:	fa5f fc82 	uxtb.w	ip, r2
24012a4e:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
24012a50:	eb0c 0e01 	add.w	lr, ip, r1
24012a54:	4570      	cmp	r0, lr
24012a56:	daee      	bge.n	24012a36 <ff_wtoupper+0x12>
			switch (cmd) {
24012a58:	2a08      	cmp	r2, #8
24012a5a:	d809      	bhi.n	24012a70 <ff_wtoupper+0x4c>
24012a5c:	e8df f002 	tbb	[pc, r2]
24012a60:	19161005 	.word	0x19161005
24012a64:	25221f1c 	.word	0x25221f1c
24012a68:	0c          	.byte	0x0c
24012a69:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24012a6a:	1a41      	subs	r1, r0, r1
24012a6c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
24012a70:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
24012a72:	eb04 034c 	add.w	r3, r4, ip, lsl #1
24012a76:	e7dc      	b.n	24012a32 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
24012a78:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24012a7c:	b280      	uxth	r0, r0
}
24012a7e:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
24012a80:	1a43      	subs	r3, r0, r1
24012a82:	f003 0301 	and.w	r3, r3, #1
24012a86:	1ac0      	subs	r0, r0, r3
24012a88:	b280      	uxth	r0, r0
}
24012a8a:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24012a8c:	3810      	subs	r0, #16
24012a8e:	b280      	uxth	r0, r0
}
24012a90:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
24012a92:	3820      	subs	r0, #32
24012a94:	b280      	uxth	r0, r0
}
24012a96:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24012a98:	3830      	subs	r0, #48	; 0x30
24012a9a:	b280      	uxth	r0, r0
}
24012a9c:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
24012a9e:	381a      	subs	r0, #26
24012aa0:	b280      	uxth	r0, r0
}
24012aa2:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24012aa4:	3008      	adds	r0, #8
24012aa6:	b280      	uxth	r0, r0
}
24012aa8:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24012aaa:	3850      	subs	r0, #80	; 0x50
24012aac:	b280      	uxth	r0, r0
}
24012aae:	bd10      	pop	{r4, pc}
24012ab0:	2401d25c 	.word	0x2401d25c
24012ab4:	2401d450 	.word	0x2401d450

24012ab8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
24012ab8:	b538      	push	{r3, r4, r5, lr}
24012aba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24012abe:	680d      	ldr	r5, [r1, #0]
{
24012ac0:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24012ac2:	2010      	movs	r0, #16
{
24012ac4:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24012ac8:	4629      	mov	r1, r5
24012aca:	f002 ff91 	bl	240159f0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24012ace:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
24012ad2:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24012ad4:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24012ad6:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
24012ad8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
24012adc:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
24012ade:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
24012ae2:	edc0 7a02 	vstr	s15, [r0, #8]
}
24012ae6:	ecbd 8b02 	vpop	{d8}
24012aea:	bd38      	pop	{r3, r4, r5, pc}

24012aec <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
24012aec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012af0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24012b0c <tPowerFollower_setFactor+0x20>
24012af4:	6803      	ldr	r3, [r0, #0]
24012af6:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
24012afa:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24012afe:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
24012b02:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
24012b06:	edc3 7a02 	vstr	s15, [r3, #8]
}
24012b0a:	4770      	bx	lr
24012b0c:	00000000 	.word	0x00000000

24012b10 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
24012b10:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
24012b12:	ee60 7a00 	vmul.f32	s15, s0, s0
24012b16:	edd3 6a03 	vldr	s13, [r3, #12]
24012b1a:	ed93 0a02 	vldr	s0, [r3, #8]
24012b1e:	ed93 7a01 	vldr	s14, [r3, #4]
24012b22:	ee20 0a26 	vmul.f32	s0, s0, s13
24012b26:	eea7 0a27 	vfma.f32	s0, s14, s15
24012b2a:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24012b2e:	4770      	bx	lr

24012b30 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
24012b30:	b570      	push	{r4, r5, r6, lr}
24012b32:	460d      	mov	r5, r1
24012b34:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24012b36:	202c      	movs	r0, #44	; 0x2c
{
24012b38:	ed2d 8b02 	vpush	{d8}
24012b3c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24012b3e:	6811      	ldr	r1, [r2, #0]
{
24012b40:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24012b44:	9101      	str	r1, [sp, #4]
24012b46:	f002 ff53 	bl	240159f0 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24012b4a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
24012b4e:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24012b50:	6030      	str	r0, [r6, #0]
24012b52:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24012b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24012b58:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24012b5a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24012b5c:	eef4 7ac8 	vcmpe.f32	s15, s16
24012b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b64:	d550      	bpl.n	24012c08 <tLinearDelay_initToPool+0xd8>
24012b66:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24012b6a:	00a8      	lsls	r0, r5, #2
24012b6c:	f002 ff40 	bl	240159f0 <mpool_alloc>

    d->gain = 1.0f;
24012b70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
24012b74:	ed9f 0a29 	vldr	s0, [pc, #164]	; 24012c1c <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
24012b78:	2300      	movs	r3, #0
    d->gain = 1.0f;
24012b7a:	6062      	str	r2, [r4, #4]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24012b7c:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
24012b7e:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
24012b82:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24012b86:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
24012b8a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
24012b8e:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24012b90:	edd5 7a07 	vldr	s15, [r5, #28]
24012b94:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24012b98:	f023 fa12 	bl	24035fc0 <__LEAF_clip_veneer>

    float outPointer = d->inPoint - d->delay;
24012b9c:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24012ba0:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
24012ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
24012ba8:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
24012baa:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24012bae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012bb6:	d50a      	bpl.n	24012bce <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
24012bb8:	ee07 2a90 	vmov	s15, r2
24012bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012bc0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24012bc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012bcc:	d4f8      	bmi.n	24012bc0 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
24012bce:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24012bd2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24012bd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24012bda:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24012bde:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
24012be0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
24012be4:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24012be6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012bea:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24012bee:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
24012bf2:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24012bf6:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24012bfa:	d101      	bne.n	24012c00 <tLinearDelay_initToPool+0xd0>
24012bfc:	2300      	movs	r3, #0
24012bfe:	61ab      	str	r3, [r5, #24]
}
24012c00:	b002      	add	sp, #8
24012c02:	ecbd 8b02 	vpop	{d8}
24012c06:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
24012c08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24012c0c:	2300      	movs	r3, #0
24012c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c12:	bf4c      	ite	mi
24012c14:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
24012c16:	ed80 8a08 	vstrpl	s16, [r0, #32]
24012c1a:	e7a6      	b.n	24012b6a <tLinearDelay_initToPool+0x3a>
24012c1c:	00000000 	.word	0x00000000

24012c20 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
24012c20:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24012c22:	69cb      	ldr	r3, [r1, #28]
24012c24:	b14b      	cbz	r3, 24012c3a <tLinearDelay_clear+0x1a>
24012c26:	2300      	movs	r3, #0
        d->buff[i] = 0;
24012c28:	2000      	movs	r0, #0
24012c2a:	688a      	ldr	r2, [r1, #8]
24012c2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24012c30:	3301      	adds	r3, #1
        d->buff[i] = 0;
24012c32:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24012c34:	69ca      	ldr	r2, [r1, #28]
24012c36:	429a      	cmp	r2, r3
24012c38:	d8f7      	bhi.n	24012c2a <tLinearDelay_clear+0xa>
}
24012c3a:	4770      	bx	lr

24012c3c <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
24012c3c:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24012c3e:	edd3 7a01 	vldr	s15, [r3, #4]
24012c42:	6959      	ldr	r1, [r3, #20]
24012c44:	689a      	ldr	r2, [r3, #8]
24012c46:	ee27 0a80 	vmul.f32	s0, s15, s0
24012c4a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012c4e:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24012c52:	695a      	ldr	r2, [r3, #20]
24012c54:	69d9      	ldr	r1, [r3, #28]
24012c56:	3201      	adds	r2, #1
24012c58:	428a      	cmp	r2, r1
24012c5a:	615a      	str	r2, [r3, #20]
24012c5c:	d101      	bne.n	24012c62 <tLinearDelay_tickIn+0x26>
24012c5e:	2200      	movs	r2, #0
24012c60:	615a      	str	r2, [r3, #20]
}
24012c62:	4770      	bx	lr

24012c64 <tLinearDelay_tickOut>:
{
24012c64:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24012c66:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24012c68:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
24012c6a:	6899      	ldr	r1, [r3, #8]
24012c6c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24012c70:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24012c74:	69dc      	ldr	r4, [r3, #28]
24012c76:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
24012c78:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
24012c7c:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
24012c7e:	ee20 0a27 	vmul.f32	s0, s0, s15
24012c82:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24012c86:	d20b      	bcs.n	24012ca0 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24012c88:	ed90 7a01 	vldr	s14, [r0, #4]
24012c8c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24012c90:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24012c92:	eea7 0a27 	vfma.f32	s0, s14, s15
24012c96:	ed83 0a03 	vstr	s0, [r3, #12]
}
24012c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
24012c9e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24012ca0:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24012ca4:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
24012ca6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24012caa:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24012cac:	eea7 0a27 	vfma.f32	s0, s14, s15
24012cb0:	ed83 0a03 	vstr	s0, [r3, #12]
}
24012cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
24012cb8:	4770      	bx	lr
24012cba:	bf00      	nop

24012cbc <tLinearDelay_setDelay>:
{
24012cbc:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24012cbe:	6804      	ldr	r4, [r0, #0]
{
24012cc0:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24012cc4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 24012d3c <tLinearDelay_setDelay+0x80>
24012cc8:	edd4 7a07 	vldr	s15, [r4, #28]
24012ccc:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24012cd0:	f023 f976 	bl	24035fc0 <__LEAF_clip_veneer>
    float outPointer = d->inPoint - d->delay;
24012cd4:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24012cd8:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
24012cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
24012ce0:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
24012ce2:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24012ce6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012cee:	d50a      	bpl.n	24012d06 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
24012cf0:	ee07 2a90 	vmov	s15, r2
24012cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012cf8:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24012cfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d04:	d4f8      	bmi.n	24012cf8 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
24012d06:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24012d0a:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
24012d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24012d12:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24012d16:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
24012d18:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
24012d1c:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24012d1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012d22:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24012d26:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
24012d2a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24012d2e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24012d32:	d000      	beq.n	24012d36 <tLinearDelay_setDelay+0x7a>
}
24012d34:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24012d36:	2300      	movs	r3, #0
24012d38:	61a3      	str	r3, [r4, #24]
}
24012d3a:	bd10      	pop	{r4, pc}
24012d3c:	00000000 	.word	0x00000000

24012d40 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
24012d40:	b570      	push	{r4, r5, r6, lr}
24012d42:	460d      	mov	r5, r1
24012d44:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24012d46:	2030      	movs	r0, #48	; 0x30
{
24012d48:	ed2d 8b02 	vpush	{d8}
24012d4c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24012d4e:	6811      	ldr	r1, [r2, #0]
{
24012d50:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24012d54:	9101      	str	r1, [sp, #4]
24012d56:	f002 fe4b 	bl	240159f0 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24012d5a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
24012d5e:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24012d60:	6030      	str	r0, [r6, #0]
24012d62:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24012d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24012d68:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24012d6a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24012d6c:	eef4 7ac8 	vcmpe.f32	s15, s16
24012d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d74:	d558      	bpl.n	24012e28 <tHermiteDelay_initToPool+0xe8>
24012d76:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24012d7a:	2d00      	cmp	r5, #0
24012d7c:	d14f      	bne.n	24012e1e <tHermiteDelay_initToPool+0xde>
24012d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
24012d82:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
24012d86:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
24012d8a:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
24012d8e:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
24012d92:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
24012d96:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
24012d98:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
24012d9a:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24012d9c:	00a8      	lsls	r0, r5, #2
24012d9e:	f002 fe27 	bl	240159f0 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
24012da2:	2300      	movs	r3, #0
    d->gain = 1.0f;
24012da4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24012da8:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
24012daa:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
24012dac:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
24012dae:	2300      	movs	r3, #0
    d->gain = 1.0f;
24012db0:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
24012db2:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
24012db6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
24012dba:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
24012dbc:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
24012dc0:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
24012dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
24012dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012dd4:	d50a      	bpl.n	24012dec <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
24012dd6:	ed93 7a07 	vldr	s14, [r3, #28]
24012dda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012dde:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24012de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24012de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012dea:	d4f8      	bmi.n	24012dde <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
24012dec:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
24012df0:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24012df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24012df6:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
24012dfa:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
24012dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
24012e02:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24012e04:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24012e08:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
24012e0c:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24012e0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
24012e12:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
24012e16:	b002      	add	sp, #8
24012e18:	ecbd 8b02 	vpop	{d8}
24012e1c:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24012e1e:	1e6b      	subs	r3, r5, #1
24012e20:	422b      	tst	r3, r5
24012e22:	461a      	mov	r2, r3
24012e24:	d1ad      	bne.n	24012d82 <tHermiteDelay_initToPool+0x42>
24012e26:	e7b8      	b.n	24012d9a <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
24012e28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24012e2c:	2300      	movs	r3, #0
24012e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e32:	bf4c      	ite	mi
24012e34:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
24012e36:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
24012e3a:	e79e      	b.n	24012d7a <tHermiteDelay_initToPool+0x3a>

24012e3c <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
24012e3c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24012e3e:	69cb      	ldr	r3, [r1, #28]
24012e40:	b14b      	cbz	r3, 24012e56 <tHermiteDelay_clear+0x1a>
24012e42:	2300      	movs	r3, #0
        d->buff[i] = 0;
24012e44:	2000      	movs	r0, #0
24012e46:	684a      	ldr	r2, [r1, #4]
24012e48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24012e4c:	3301      	adds	r3, #1
        d->buff[i] = 0;
24012e4e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24012e50:	69ca      	ldr	r2, [r1, #28]
24012e52:	429a      	cmp	r2, r3
24012e54:	d8f7      	bhi.n	24012e46 <tHermiteDelay_clear+0xa>
}
24012e56:	4770      	bx	lr

24012e58 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
24012e58:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
24012e5a:	6959      	ldr	r1, [r3, #20]
24012e5c:	685a      	ldr	r2, [r3, #4]
24012e5e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012e62:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24012e66:	695a      	ldr	r2, [r3, #20]
24012e68:	6899      	ldr	r1, [r3, #8]
24012e6a:	3201      	adds	r2, #1
24012e6c:	400a      	ands	r2, r1
24012e6e:	615a      	str	r2, [r3, #20]
}
24012e70:	4770      	bx	lr
24012e72:	bf00      	nop

24012e74 <tHermiteDelay_tickOut>:
{
24012e74:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
24012e76:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24012e78:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012e7a:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
24012e7e:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012e80:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
24012e84:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012e86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24012e8a:	edd3 1a00 	vldr	s3, [r3]
24012e8e:	69e3      	ldr	r3, [r4, #28]
24012e90:	440b      	add	r3, r1
24012e92:	3b01      	subs	r3, #1
24012e94:	4003      	ands	r3, r0
24012e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24012e9a:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
24012e9e:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012ea0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
24012ea4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012ea6:	edd1 0a00 	vldr	s1, [r1]
24012eaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24012eae:	ed92 1a00 	vldr	s2, [r2]
24012eb2:	f002 fc97 	bl	240157e4 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24012eb6:	69a3      	ldr	r3, [r4, #24]
24012eb8:	68a2      	ldr	r2, [r4, #8]
24012eba:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24012ebc:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24012ec0:	4013      	ands	r3, r2
24012ec2:	61a3      	str	r3, [r4, #24]
}
24012ec4:	bd10      	pop	{r4, pc}
24012ec6:	bf00      	nop

24012ec8 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
24012ec8:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
24012eca:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
24012ece:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
24012ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012ed6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24012eda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ee2:	d50a      	bpl.n	24012efa <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
24012ee4:	edd3 7a07 	vldr	s15, [r3, #28]
24012ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012eec:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24012ef0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ef8:	d4f8      	bmi.n	24012eec <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
24012efa:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
24012efe:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24012f00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24012f04:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
24012f08:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
24012f0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
24012f10:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24012f12:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24012f16:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
24012f1a:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24012f1c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
24012f20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24012f24:	4770      	bx	lr
24012f26:	bf00      	nop

24012f28 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24012f28:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24012f2a:	43c9      	mvns	r1, r1
24012f2c:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
24012f2e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24012f32:	4401      	add	r1, r0
24012f34:	4011      	ands	r1, r2
    return d->buff[tap];
24012f36:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
24012f3a:	ed91 0a00 	vldr	s0, [r1]
24012f3e:	4770      	bx	lr

24012f40 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24012f40:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24012f42:	43c9      	mvns	r1, r1
24012f44:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
24012f46:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24012f4a:	4401      	add	r1, r0
24012f4c:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
24012f4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
24012f52:	edd1 7a00 	vldr	s15, [r1]
24012f56:	ee30 0a27 	vadd.f32	s0, s0, s15
24012f5a:	ed81 0a00 	vstr	s0, [r1]
}
24012f5e:	4770      	bx	lr

24012f60 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
24012f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24012f64:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
24012f66:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
24012f68:	6999      	ldr	r1, [r3, #24]
{
24012f6a:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24012f6c:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
24012f70:	bf0c      	ite	eq
24012f72:	2700      	moveq	r7, #0
24012f74:	2706      	movne	r7, #6
{
24012f76:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24012f78:	2b1e      	cmp	r3, #30
24012f7a:	d93a      	bls.n	24012ff2 <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
24012f7c:	2d40      	cmp	r5, #64	; 0x40
24012f7e:	d135      	bne.n	24012fec <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24012f80:	2028      	movs	r0, #40	; 0x28
24012f82:	9101      	str	r1, [sp, #4]
24012f84:	f002 fd34 	bl	240159f0 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24012f88:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
24012f8c:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24012f8e:	4604      	mov	r4, r0
24012f90:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24012f94:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
24012f98:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
24012f9a:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
24012f9c:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
24012f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24012fa2:	f008 f8e7 	bl	2401b174 <log2f>
24012fa6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012faa:	4a16      	ldr	r2, [pc, #88]	; (24013004 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fac:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24012fae:	ee17 3a90 	vmov	r3, s15
24012fb2:	3b01      	subs	r3, #1
24012fb4:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012fb6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24012fba:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24012fbe:	4a12      	ldr	r2, [pc, #72]	; (24013008 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24012fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24012fc4:	ee17 0a90 	vmov	r0, s15
24012fc8:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
24012fcc:	fb90 f5f5 	sdiv	r5, r0, r5
24012fd0:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fd2:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24012fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24012fd8:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fda:	f002 fd09 	bl	240159f0 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fde:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fe0:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24012fe2:	9901      	ldr	r1, [sp, #4]
24012fe4:	00d8      	lsls	r0, r3, #3
24012fe6:	f002 fd03 	bl	240159f0 <mpool_alloc>
24012fea:	61e0      	str	r0, [r4, #28]
}
24012fec:	b002      	add	sp, #8
24012fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24012ff2:	4a06      	ldr	r2, [pc, #24]	; (2401300c <tOversampler_init+0xac>)
24012ff4:	fa22 f303 	lsr.w	r3, r2, r3
24012ff8:	07db      	lsls	r3, r3, #31
24012ffa:	d4c1      	bmi.n	24012f80 <tOversampler_init+0x20>
}
24012ffc:	b002      	add	sp, #8
24012ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24013002:	bf00      	nop
24013004:	24026b8c 	.word	0x24026b8c
24013008:	20000764 	.word	0x20000764
2401300c:	40004045 	.word	0x40004045

24013010 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24013010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24013012:	698f      	ldr	r7, [r1, #24]
{
24013014:	4606      	mov	r6, r0
24013016:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24013018:	2020      	movs	r0, #32
2401301a:	4639      	mov	r1, r7
2401301c:	f002 fce8 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24013020:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24013024:	4a10      	ldr	r2, [pc, #64]	; (24013068 <tCrusher_init+0x58>)
    c->op = 4;
24013026:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24013028:	6030      	str	r0, [r6, #0]
2401302a:	4604      	mov	r4, r0
    c->op = 4;
2401302c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
2401302e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
24013030:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
24013032:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24013034:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24013036:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24013038:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401303a:	4629      	mov	r1, r5
2401303c:	f002 fcd8 	bl	240159f0 <mpool_alloc>
    s->invRatio = 1.0f;
24013040:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24013044:	2200      	movs	r2, #0
    s->count = 0;
24013046:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24013048:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401304a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2401306c <tCrusher_init+0x5c>
    s->mempool = m;
2401304e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
24013050:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
24013052:	6082      	str	r2, [r0, #8]
    s->count = 0;
24013054:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24013056:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013070 <tCrusher_init+0x60>
2401305a:	edd4 6a03 	vldr	s13, [r4, #12]
2401305e:	eee6 7a87 	vfma.f32	s15, s13, s14
24013062:	edc4 7a06 	vstr	s15, [r4, #24]
}
24013066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24013068:	3951b717 	.word	0x3951b717
2401306c:	3912ccf6 	.word	0x3912ccf6
24013070:	3e99999a 	.word	0x3e99999a

24013074 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24013074:	eddf 7a1e 	vldr	s15, [pc, #120]	; 240130f0 <tCrusher_tick+0x7c>
24013078:	ee20 0a27 	vmul.f32	s0, s0, s15
{
2401307c:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2401307e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24013082:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24013084:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24013088:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401308c:	6960      	ldr	r0, [r4, #20]
2401308e:	05c0      	lsls	r0, r0, #23
24013090:	ee20 0a27 	vmul.f32	s0, s0, s15
24013094:	f002 fa7c 	bl	24015590 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24013098:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401309c:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
240130a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240130a4:	f022 ff8c 	bl	24035fc0 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
240130a8:	edd4 0a04 	vldr	s1, [r4, #16]
240130ac:	f002 fa5e 	bl	2401556c <LEAF_round>
    _tSampleReducer* s = *sr;
240130b0:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
240130b2:	68da      	ldr	r2, [r3, #12]
240130b4:	edd3 7a01 	vldr	s15, [r3, #4]
240130b8:	ee07 2a10 	vmov	s14, r2
240130bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240130c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
240130c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240130c8:	dc08      	bgt.n	240130dc <tCrusher_tick+0x68>
    s->count++;
240130ca:	3201      	adds	r2, #1
    return s->hold;
240130cc:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
240130d0:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240130d2:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
240130d6:	ee20 0a27 	vmul.f32	s0, s0, s15
240130da:	bd10      	pop	{r4, pc}
        s->hold = input;
240130dc:	2201      	movs	r2, #1
240130de:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
240130e2:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
240130e4:	edd4 7a06 	vldr	s15, [r4, #24]
}
240130e8:	ee20 0a27 	vmul.f32	s0, s0, s15
240130ec:	bd10      	pop	{r4, pc}
240130ee:	bf00      	nop
240130f0:	459c4000 	.word	0x459c4000

240130f4 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
240130f4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
240130f8:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
240130fa:	ee20 0a27 	vmul.f32	s0, s0, s15
240130fe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013102:	ed83 0a05 	vstr	s0, [r3, #20]
}
24013106:	4770      	bx	lr

24013108 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
24013108:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
2401310c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24013140 <tCrusher_setQuality+0x38>
24013110:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24013114:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24013116:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24013118:	f022 ff52 	bl	24035fc0 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
2401311c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24013144 <tCrusher_setQuality+0x3c>
24013120:	eddf 7a09 	vldr	s15, [pc, #36]	; 24013148 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24013124:	eddf 6a09 	vldr	s13, [pc, #36]	; 2401314c <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24013128:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2401312c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013150 <tCrusher_setQuality+0x48>
24013130:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24013134:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24013138:	ed84 7a06 	vstr	s14, [r4, #24]
}
2401313c:	bd10      	pop	{r4, pc}
2401313e:	bf00      	nop
24013140:	00000000 	.word	0x00000000
24013144:	459c4000 	.word	0x459c4000
24013148:	3c23d70a 	.word	0x3c23d70a
2401314c:	3912ccf6 	.word	0x3912ccf6
24013150:	3e99999a 	.word	0x3e99999a

24013154 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
24013154:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24013156:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401315a:	4770      	bx	lr

2401315c <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2401315c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
24013160:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24013162:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24013166:	eeb4 0a67 	vcmp.f32	s0, s15
2401316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401316e:	d809      	bhi.n	24013184 <tCrusher_setSamplingRatio+0x28>
24013170:	eeb5 0a40 	vcmp.f32	s0, #0.0
24013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013178:	db04      	blt.n	24013184 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2401317a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
2401317e:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24013180:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24013184:	4770      	bx	lr
24013186:	bf00      	nop

24013188 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24013188:	b570      	push	{r4, r5, r6, lr}
2401318a:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401318e:	698d      	ldr	r5, [r1, #24]
{
24013190:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24013192:	206c      	movs	r0, #108	; 0x6c
24013194:	4629      	mov	r1, r5
24013196:	f002 fc2b 	bl	240159f0 <mpool_alloc>
2401319a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401319c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401319e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
240131a2:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240131a4:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
240131a6:	ed93 8a00 	vldr	s16, [r3]
240131aa:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240131ae:	ee80 0a08 	vdiv.f32	s0, s0, s16
240131b2:	f007 fefd 	bl	2401afb0 <expf>
240131b6:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240131ba:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
240131be:	ee87 0a88 	vdiv.f32	s0, s15, s16
240131c2:	f007 fef5 	bl	2401afb0 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
240131c6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240131ca:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
240131cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
240131d0:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
240131d2:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240131d4:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
240131d6:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
240131d8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240131dc:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
240131de:	62e3      	str	r3, [r4, #44]	; 0x2c
240131e0:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
240131e2:	6363      	str	r3, [r4, #52]	; 0x34
240131e4:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
240131e6:	63e3      	str	r3, [r4, #60]	; 0x3c
240131e8:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240131ea:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
240131ec:	4905      	ldr	r1, [pc, #20]	; (24013204 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
240131ee:	4b06      	ldr	r3, [pc, #24]	; (24013208 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240131f0:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
240131f4:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
240131f6:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
240131f8:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240131fa:	6223      	str	r3, [r4, #32]
}
240131fc:	ecbd 8b02 	vpop	{d8}
24013200:	bd70      	pop	{r4, r5, r6, pc}
24013202:	bf00      	nop
24013204:	40400000 	.word	0x40400000
24013208:	3e2aaaab 	.word	0x3e2aaaab

2401320c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
2401320c:	b510      	push	{r4, lr}
2401320e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
24013212:	6804      	ldr	r4, [r0, #0]
{
24013214:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
24013218:	f002 f924 	bl	24015464 <fastabsf>
2401321c:	f002 fb7c 	bl	24015918 <fasteratodb>
24013220:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 240132d4 <tCompressor_tick+0xc8>
24013224:	eef0 0a40 	vmov.f32	s1, s0
24013228:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240132d8 <tCompressor_tick+0xcc>
2401322c:	f022 fec8 	bl	24035fc0 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
24013230:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
24013234:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
24013238:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
2401323c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
24013240:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
24013244:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
24013248:	eef4 7ac7 	vcmpe.f32	s15, s14
2401324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013250:	db23      	blt.n	2401329a <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
24013252:	2300      	movs	r3, #0
24013254:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 240132d4 <tCompressor_tick+0xc8>
24013258:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
2401325a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401325e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24013262:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
24013266:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
2401326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401326e:	bf4c      	ite	mi
24013270:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24013274:	ed94 6a02 	vldrpl	s12, [r4, #8]
24013278:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401327c:	ee67 7a87 	vmul.f32	s15, s15, s14
24013280:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
24013284:	ee30 0a67 	vsub.f32	s0, s0, s15
24013288:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
2401328c:	f002 fb78 	bl	24015980 <fasterdbtoa>
    return attenuation * in;
}
24013290:	ee28 0a00 	vmul.f32	s0, s16, s0
24013294:	ecbd 8b02 	vpop	{d8}
24013298:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401329a:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
2401329e:	edd4 5a07 	vldr	s11, [r4, #28]
240132a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
240132a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
240132aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
240132ae:	dd0c      	ble.n	240132ca <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240132b0:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
240132b4:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
240132b8:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240132ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
240132be:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240132c0:	ee67 7a87 	vmul.f32	s15, s15, s14
240132c4:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
240132c8:	e7c7      	b.n	2401325a <tCompressor_tick+0x4e>
        c->isActive = 1;
240132ca:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
240132cc:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
240132d0:	6463      	str	r3, [r4, #68]	; 0x44
240132d2:	e7c2      	b.n	2401325a <tCompressor_tick+0x4e>
240132d4:	00000000 	.word	0x00000000
240132d8:	c2b40000 	.word	0xc2b40000

240132dc <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
240132dc:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240132de:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
240132e2:	6800      	ldr	r0, [r0, #0]
{
240132e4:	eef0 7a40 	vmov.f32	s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240132e8:	ee07 3a10 	vmov	s14, r3
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240132ec:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbTableSizeMinus1 = atodbTableSize-1;
240132f0:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240132f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
{
240132f6:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
240132f8:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240132fa:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
240132fc:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240132fe:	ee86 7aa0 	vdiv.f32	s14, s13, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24013302:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24013304:	ee67 7a27 	vmul.f32	s15, s14, s15
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24013308:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
2401330c:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24013310:	ee07 3a90 	vmov	s15, r3
24013314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24013318:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
2401331c:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24013320:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24013324:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
24013328:	4770      	bx	lr
2401332a:	bf00      	nop

2401332c <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
2401332c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
2401332e:	6817      	ldr	r7, [r2, #0]
{
24013330:	4614      	mov	r4, r2
24013332:	4606      	mov	r6, r0
24013334:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24013336:	2018      	movs	r0, #24
24013338:	4639      	mov	r1, r7
{
2401333a:	ed2d 8b02 	vpush	{d8}
2401333e:	eef0 8a40 	vmov.f32	s17, s0
24013342:	b083      	sub	sp, #12
24013344:	eeb0 8a41 	vmov.f32	s16, s2
24013348:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401334c:	f002 fb50 	bl	240159f0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24013350:	4621      	mov	r1, r4
    p->curr=0.0f;
24013352:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24013354:	4604      	mov	r4, r0
24013356:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24013358:	ed9d 0a01 	vldr	s0, [sp, #4]
2401335c:	3014      	adds	r0, #20
    p->mempool = m;
2401335e:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24013362:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24013366:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24013368:	f7ff fba6 	bl	24012ab8 <tPowerFollower_initToPool>
    p->mode=mode;
2401336c:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401336e:	ed84 8a02 	vstr	s16, [r4, #8]
}
24013372:	b003      	add	sp, #12
24013374:	ecbd 8b02 	vpop	{d8}
24013378:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401337a:	bf00      	nop

2401337c <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
2401337c:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
2401337e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013382:	4770      	bx	lr

24013384 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24013384:	6800      	ldr	r0, [r0, #0]
24013386:	3014      	adds	r0, #20
24013388:	f7ff bbb0 	b.w	24012aec <tPowerFollower_setFactor>

2401338c <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
2401338c:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2401338e:	60d9      	str	r1, [r3, #12]
}
24013390:	4770      	bx	lr
24013392:	bf00      	nop

24013394 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
24013394:	b510      	push	{r4, lr}
24013396:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
2401339a:	6804      	ldr	r4, [r0, #0]
{
2401339c:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
240133a0:	f104 0014 	add.w	r0, r4, #20
240133a4:	f7ff fbb4 	bl	24012b10 <tPowerFollower_tick>
240133a8:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240133ac:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
240133ae:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240133b2:	b91b      	cbnz	r3, 240133bc <tFeedbackLeveler_tick+0x28>
240133b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 240133d8 <tFeedbackLeveler_tick+0x44>
240133b8:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
240133bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240133c0:	edd4 6a02 	vldr	s13, [r4, #8]
240133c4:	eee6 7ac7 	vfms.f32	s15, s13, s14
240133c8:	ee27 0a88 	vmul.f32	s0, s15, s16
240133cc:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
240133d0:	ecbd 8b02 	vpop	{d8}
240133d4:	bd10      	pop	{r4, pc}
240133d6:	bf00      	nop
240133d8:	00000000 	.word	0x00000000

240133dc <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
240133dc:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
240133de:	ed83 0a01 	vstr	s0, [r3, #4]
}
240133e2:	4770      	bx	lr

240133e4 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
240133e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240133e6:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
240133ea:	699e      	ldr	r6, [r3, #24]
{
240133ec:	4614      	mov	r4, r2
240133ee:	4607      	mov	r7, r0
240133f0:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240133f2:	2068      	movs	r0, #104	; 0x68
240133f4:	4631      	mov	r1, r6
{
240133f6:	eef0 9a40 	vmov.f32	s19, s0
240133fa:	eeb0 9a60 	vmov.f32	s18, s1
240133fe:	eeb0 8a41 	vmov.f32	s16, s2
24013402:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24013406:	f002 faf3 	bl	240159f0 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401340a:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401340e:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24013410:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
24013412:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24013414:	eeb8 6a67 	vcvt.f32.u32	s12, s15
24013418:	eddf 7a22 	vldr	s15, [pc, #136]	; 240134a4 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
2401341c:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
2401341e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
24013422:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24013424:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24013428:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
2401342c:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
2401342e:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
24013430:	fe88 8a66 	vminnm.f32	s16, s16, s13
24013434:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
24013438:	2200      	movs	r2, #0
2401343a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 240134a8 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401343e:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
24013442:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24013446:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
2401344a:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
2401344e:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
24013452:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
24013456:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
2401345a:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
2401345e:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
24013462:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
24013464:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
24013468:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
2401346c:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
24013470:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24013474:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24013478:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401347c:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24013480:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24013484:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24013488:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401348c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24013490:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24013494:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
24013498:	685b      	ldr	r3, [r3, #4]
2401349a:	6643      	str	r3, [r0, #100]	; 0x64
}
2401349c:	ecbd 8b04 	vpop	{d8-d9}
240134a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240134a2:	bf00      	nop
240134a4:	4479ffff 	.word	0x4479ffff
240134a8:	00000000 	.word	0x00000000

240134ac <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
240134ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240134b0:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240134b2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
240134b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
240134ba:	bf48      	it	mi
240134bc:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240134d0 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240134c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
240134c4:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240134c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
240134cc:	4770      	bx	lr
240134ce:	bf00      	nop
240134d0:	3c23d70a 	.word	0x3c23d70a

240134d4 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
240134d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240134d8:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240134da:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
240134de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
240134e2:	bf48      	it	mi
240134e4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240134f8 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240134e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
240134ec:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240134f0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240134f4:	4770      	bx	lr
240134f6:	bf00      	nop
240134f8:	3c23d70a 	.word	0x3c23d70a

240134fc <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
240134fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
24013500:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24013502:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401350a:	dd02      	ble.n	24013512 <tADSRT_setSustain+0x16>
2401350c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
24013510:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
24013512:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013516:	2200      	movs	r2, #0
24013518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401351c:	bf4c      	ite	mi
2401351e:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
24013520:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
24013524:	4770      	bx	lr
24013526:	bf00      	nop

24013528 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24013528:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
2401352c:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401352e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
24013532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
24013536:	bf48      	it	mi
24013538:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 2401354c <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401353c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
24013540:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24013544:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
24013548:	4770      	bx	lr
2401354a:	bf00      	nop
2401354c:	3c23d70a 	.word	0x3c23d70a

24013550 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
24013550:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24013552:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24013554:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013570 <tADSRT_setLeakFactor+0x20>
24013558:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
2401355c:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24013560:	ee60 0aa7 	vmul.f32	s1, s1, s15
24013564:	f007 fec4 	bl	2401b2f0 <powf>
24013568:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
2401356c:	bd10      	pop	{r4, pc}
2401356e:	bf00      	nop
24013570:	472c4400 	.word	0x472c4400

24013574 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
24013574:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
24013576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24013578:	b162      	cbz	r2, 24013594 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
2401357a:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
2401357c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
2401357e:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24013580:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
24013582:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
24013584:	2200      	movs	r2, #0
24013586:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24013588:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
2401358c:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
2401358e:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
24013590:	655a      	str	r2, [r3, #84]	; 0x54
}
24013592:	4770      	bx	lr
        adsr->whichStage = env_attack;
24013594:	2101      	movs	r1, #1
24013596:	e7f5      	b.n	24013584 <tADSRT_on+0x10>

24013598 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24013598:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
2401359a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2401359c:	b11a      	cbz	r2, 240135a6 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
2401359e:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
240135a0:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
240135a2:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
240135a4:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
240135a6:	4770      	bx	lr

240135a8 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
240135a8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
240135aa:	6804      	ldr	r4, [r0, #0]
{
240135ac:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
240135b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240135b2:	3b01      	subs	r3, #1
240135b4:	2b04      	cmp	r3, #4
240135b6:	f200 8148 	bhi.w	2401384a <tADSRT_tick+0x2a2>
240135ba:	e8df f003 	tbb	[pc, r3]
240135be:	441f      	.short	0x441f
240135c0:	6339      	.short	0x6339
240135c2:	03          	.byte	0x03
240135c3:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
240135c4:	edd4 7a03 	vldr	s15, [r4, #12]
240135c8:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
240135cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
240135d0:	eeb4 1ae7 	vcmpe.f32	s2, s15
240135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240135d8:	dd71      	ble.n	240136be <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
240135da:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24013850 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
240135de:	2301      	movs	r3, #1
240135e0:	eeb0 0a67 	vmov.f32	s0, s15
240135e4:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
240135e6:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
240135ea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
240135ee:	ee37 1a81 	vadd.f32	s2, s15, s2
240135f2:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
240135f6:	ecbd 8b02 	vpop	{d8}
240135fa:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
240135fc:	edd4 7a03 	vldr	s15, [r4, #12]
24013600:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
24013604:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013608:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013610:	dd7f      	ble.n	24013712 <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
24013612:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
24013614:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
24013618:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
2401361a:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
2401361e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24013622:	ee37 1a81 	vadd.f32	s2, s15, s2
24013626:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
2401362a:	ecbd 8b02 	vpop	{d8}
2401362e:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
24013630:	ed94 0a06 	vldr	s0, [r4, #24]
24013634:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
24013638:	ee20 0a27 	vmul.f32	s0, s0, s15
2401363c:	ed84 0a06 	vstr	s0, [r4, #24]
}
24013640:	ecbd 8b02 	vpop	{d8}
24013644:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24013646:	edd4 7a03 	vldr	s15, [r4, #12]
2401364a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
2401364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013652:	eeb4 1ae7 	vcmpe.f32	s2, s15
24013656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401365a:	f340 8088 	ble.w	2401376e <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
2401365e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
24013662:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
24013664:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
24013668:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
2401366a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401366e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24013672:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24013676:	ee37 1a81 	vadd.f32	s2, s15, s2
2401367a:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
2401367e:	ecbd 8b02 	vpop	{d8}
24013682:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24013684:	edd4 7a03 	vldr	s15, [r4, #12]
24013688:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
2401368c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013690:	eeb4 1ae7 	vcmpe.f32	s2, s15
24013694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013698:	f340 809e 	ble.w	240137d8 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
2401369c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24013850 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
240136a0:	2300      	movs	r3, #0
240136a2:	eeb0 0a67 	vmov.f32	s0, s15
240136a6:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
240136a8:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
240136ac:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
240136b0:	ee37 1a81 	vadd.f32	s2, s15, s2
240136b4:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
240136b8:	ecbd 8b02 	vpop	{d8}
240136bc:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240136be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
240136c2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240136c6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
240136ca:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240136ce:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
240136d2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240136d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240136da:	f100 80b2 	bmi.w	24013842 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240136de:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240136e2:	6862      	ldr	r2, [r4, #4]
240136e4:	ee17 3a90 	vmov	r3, s15
240136e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240136ec:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
240136f0:	ee16 3a90 	vmov	r3, s13
240136f4:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
240136f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240136fc:	ed92 0a00 	vldr	s0, [r2]
24013700:	f002 f892 	bl	24015828 <LEAF_interpolation_linear>
24013704:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
24013708:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
2401370c:	ed84 0a06 	vstr	s0, [r4, #24]
24013710:	e76b      	b.n	240135ea <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24013712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
24013716:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401371a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
2401371e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24013722:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
24013726:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401372e:	f100 8084 	bmi.w	2401383a <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24013732:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24013736:	6862      	ldr	r2, [r4, #4]
24013738:	ee17 3a90 	vmov	r3, s15
2401373c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24013740:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
24013744:	ee16 3a90 	vmov	r3, s13
24013748:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
2401374c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24013750:	ed92 0a00 	vldr	s0, [r2]
24013754:	f002 f868 	bl	24015828 <LEAF_interpolation_linear>
24013758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
2401375c:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
24013760:	ee37 0ac0 	vsub.f32	s0, s15, s0
24013764:	ee20 0a08 	vmul.f32	s0, s0, s16
24013768:	ed84 0a06 	vstr	s0, [r4, #24]
2401376c:	e757      	b.n	2401361e <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401376e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24013772:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24013776:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
2401377a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401377e:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
24013782:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24013786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401378a:	d452      	bmi.n	24013832 <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
2401378c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24013790:	6862      	ldr	r2, [r4, #4]
24013792:	ee17 3a90 	vmov	r3, s15
24013796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401379a:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
2401379e:	ee16 3a90 	vmov	r3, s13
240137a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240137a6:	ed92 0a00 	vldr	s0, [r2]
240137aa:	f002 f83d 	bl	24015828 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240137ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240137b2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240137b6:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
240137ba:	ee76 6ac7 	vsub.f32	s13, s13, s14
240137be:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
240137c2:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240137c6:	ee67 7a86 	vmul.f32	s15, s15, s12
240137ca:	eea6 7a80 	vfma.f32	s14, s13, s0
240137ce:	ee27 0a87 	vmul.f32	s0, s15, s14
240137d2:	ed84 0a06 	vstr	s0, [r4, #24]
240137d6:	e74c      	b.n	24013672 <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240137d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
240137dc:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240137e0:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
240137e4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240137e8:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
240137ec:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240137f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240137f4:	d419      	bmi.n	2401382a <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
240137f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240137fa:	6862      	ldr	r2, [r4, #4]
240137fc:	ee17 3a90 	vmov	r3, s15
24013800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24013804:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
24013808:	ee16 3a90 	vmov	r3, s13
2401380c:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
24013810:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24013814:	ed92 0a00 	vldr	s0, [r2]
24013818:	f002 f806 	bl	24015828 <LEAF_interpolation_linear>
2401381c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
24013820:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
24013824:	ed84 0a06 	vstr	s0, [r4, #24]
24013828:	e740      	b.n	240136ac <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2401382a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2401382c:	eddf 0a08 	vldr	s1, [pc, #32]	; 24013850 <tADSRT_tick+0x2a8>
24013830:	e7ea      	b.n	24013808 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24013832:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24013834:	eddf 0a06 	vldr	s1, [pc, #24]	; 24013850 <tADSRT_tick+0x2a8>
24013838:	e7b1      	b.n	2401379e <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2401383a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2401383c:	eddf 0a04 	vldr	s1, [pc, #16]	; 24013850 <tADSRT_tick+0x2a8>
24013840:	e780      	b.n	24013744 <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24013842:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24013844:	eddf 0a02 	vldr	s1, [pc, #8]	; 24013850 <tADSRT_tick+0x2a8>
24013848:	e752      	b.n	240136f0 <tADSRT_tick+0x148>
    return adsr->next;
2401384a:	ed94 0a06 	vldr	s0, [r4, #24]
2401384e:	e6d2      	b.n	240135f6 <tADSRT_tick+0x4e>
24013850:	00000000 	.word	0x00000000

24013854 <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24013854:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
24013856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24013858:	3a01      	subs	r2, #1
2401385a:	2a04      	cmp	r2, #4
2401385c:	f200 80ba 	bhi.w	240139d4 <tADSRT_tickNoInterp+0x180>
24013860:	e8df f002 	tbb	[pc, r2]
24013864:	58333c1b 	.word	0x58333c1b
24013868:	03          	.byte	0x03
24013869:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2401386a:	edd3 7a03 	vldr	s15, [r3, #12]
2401386e:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
24013872:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24013876:	eef4 6ac7 	vcmpe.f32	s13, s14
2401387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401387e:	dd61      	ble.n	24013944 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
24013880:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24013882:	ed9f 0a56 	vldr	s0, [pc, #344]	; 240139dc <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
24013886:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24013888:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
2401388c:	ed83 0a06 	vstr	s0, [r3, #24]
24013890:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013894:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
24013898:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
2401389a:	edd3 7a03 	vldr	s15, [r3, #12]
2401389e:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
240138a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
240138a6:	eef4 6ac7 	vcmpe.f32	s13, s14
240138aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138ae:	dd57      	ble.n	24013960 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
240138b0:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
240138b2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
240138b6:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
240138b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
240138bc:	ed83 0a06 	vstr	s0, [r3, #24]
240138c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
240138c4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
240138c8:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
240138ca:	ed93 0a06 	vldr	s0, [r3, #24]
240138ce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
240138d2:	ee20 0a27 	vmul.f32	s0, s0, s15
240138d6:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
240138da:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240138dc:	edd3 7a03 	vldr	s15, [r3, #12]
240138e0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
240138e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
240138e8:	eef4 6ac7 	vcmpe.f32	s13, s14
240138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138f0:	dd48      	ble.n	24013984 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
240138f2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
240138f6:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
240138f8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
240138fc:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
240138fe:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
24013902:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
24013906:	ed83 0a06 	vstr	s0, [r3, #24]
2401390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401390e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24013912:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24013914:	edd3 7a03 	vldr	s15, [r3, #12]
24013918:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
2401391c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24013920:	eef4 6ac7 	vcmpe.f32	s13, s14
24013924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013928:	dd46      	ble.n	240139b8 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
2401392a:	2200      	movs	r2, #0
                adsr->next = 0.0f;
2401392c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240139dc <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
24013930:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24013932:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24013936:	ed83 0a06 	vstr	s0, [r3, #24]
2401393a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401393e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
24013942:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24013944:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24013948:	685a      	ldr	r2, [r3, #4]
2401394a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
2401394e:	ee17 1a10 	vmov	r1, s14
24013952:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24013956:	ed92 0a00 	vldr	s0, [r2]
2401395a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401395e:	e793      	b.n	24013888 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24013960:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24013964:	685a      	ldr	r2, [r3, #4]
24013966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401396a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
2401396e:	ee17 1a10 	vmov	r1, s14
24013972:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24013976:	ed92 7a00 	vldr	s14, [r2]
2401397a:	ee30 0a47 	vsub.f32	s0, s0, s14
2401397e:	ee20 0a27 	vmul.f32	s0, s0, s15
24013982:	e799      	b.n	240138b8 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24013984:	eefc 5ae6 	vcvt.u32.f32	s11, s13
24013988:	685a      	ldr	r2, [r3, #4]
2401398a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401398e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24013992:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
24013996:	ee15 1a90 	vmov	r1, s11
2401399a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
2401399e:	ee37 7a40 	vsub.f32	s14, s14, s0
240139a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240139a6:	ee67 7a86 	vmul.f32	s15, s15, s12
240139aa:	ed92 6a00 	vldr	s12, [r2]
240139ae:	eea6 0a07 	vfma.f32	s0, s12, s14
240139b2:	ee27 0a80 	vmul.f32	s0, s15, s0
240139b6:	e7a4      	b.n	24013902 <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
240139b8:	eebc 7ae6 	vcvt.u32.f32	s14, s13
240139bc:	685a      	ldr	r2, [r3, #4]
240139be:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
240139c2:	ee17 1a10 	vmov	r1, s14
240139c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240139ca:	ed92 0a00 	vldr	s0, [r2]
240139ce:	ee20 0a27 	vmul.f32	s0, s0, s15
240139d2:	e7ae      	b.n	24013932 <tADSRT_tickNoInterp+0xde>
    return adsr->next;
240139d4:	ed93 0a06 	vldr	s0, [r3, #24]
240139d8:	4770      	bx	lr
240139da:	bf00      	nop
240139dc:	00000000 	.word	0x00000000

240139e0 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240139e0:	b538      	push	{r3, r4, r5, lr}
240139e2:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
240139e6:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240139e8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240139ea:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240139ec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240139f0:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240139f2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240139f6:	f001 fffb 	bl	240159f0 <mpool_alloc>
240139fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240139fe:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24013a34 <tExpSmooth_init+0x54>
24013a02:	6028      	str	r0, [r5, #0]
24013a04:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24013a08:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24013a0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24013a10:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24013a12:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24013a16:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24013a1a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24013a1e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24013a22:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24013a26:	6863      	ldr	r3, [r4, #4]
24013a28:	685b      	ldr	r3, [r3, #4]
24013a2a:	6183      	str	r3, [r0, #24]
}
24013a2c:	ecbd 8b02 	vpop	{d8}
24013a30:	bd38      	pop	{r3, r4, r5, pc}
24013a32:	bf00      	nop
24013a34:	00000000 	.word	0x00000000

24013a38 <tExpSmooth_initToPool>:
{
24013a38:	b538      	push	{r3, r4, r5, lr}
24013a3a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013a3e:	680c      	ldr	r4, [r1, #0]
{
24013a40:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013a42:	201c      	movs	r0, #28
{
24013a44:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013a48:	4621      	mov	r1, r4
{
24013a4a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24013a4e:	f001 ffcf 	bl	240159f0 <mpool_alloc>
24013a52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013a56:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24013a8c <tExpSmooth_initToPool+0x54>
24013a5a:	6028      	str	r0, [r5, #0]
24013a5c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24013a60:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24013a64:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24013a68:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24013a6a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24013a6e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24013a72:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24013a76:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24013a7a:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24013a7e:	6863      	ldr	r3, [r4, #4]
24013a80:	685b      	ldr	r3, [r3, #4]
24013a82:	6183      	str	r3, [r0, #24]
}
24013a84:	ecbd 8b02 	vpop	{d8}
24013a88:	bd38      	pop	{r3, r4, r5, pc}
24013a8a:	bf00      	nop
24013a8c:	00000000 	.word	0x00000000

24013a90 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
24013a90:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
24013a92:	ed83 0a05 	vstr	s0, [r3, #20]
}
24013a96:	4770      	bx	lr

24013a98 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24013a98:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
24013a9a:	edd3 6a04 	vldr	s13, [r3, #16]
24013a9e:	ed93 0a03 	vldr	s0, [r3, #12]
24013aa2:	ed93 7a02 	vldr	s14, [r3, #8]
24013aa6:	ee20 0a26 	vmul.f32	s0, s0, s13
24013aaa:	edd3 7a05 	vldr	s15, [r3, #20]
24013aae:	eea7 0a27 	vfma.f32	s0, s14, s15
24013ab2:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
24013ab6:	4770      	bx	lr

24013ab8 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
24013ab8:	b538      	push	{r3, r4, r5, lr}
24013aba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013abe:	680d      	ldr	r5, [r1, #0]
{
24013ac0:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
24013ac2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013ac6:	2028      	movs	r0, #40	; 0x28
24013ac8:	4629      	mov	r1, r5
{
24013aca:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013ace:	f001 ff8f 	bl	240159f0 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24013ad2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24013b1c <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24013ad6:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013ad8:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24013adc:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24013ade:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
24013ae0:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24013ae4:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24013ae8:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24013aec:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013af0:	68db      	ldr	r3, [r3, #12]
24013af2:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
24013af4:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013af6:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
24013afa:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013afe:	ee68 0a20 	vmul.f32	s1, s16, s1
24013b02:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b06:	f022 fa5b 	bl	24035fc0 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24013b0a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b0e:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24013b12:	edc4 8a04 	vstr	s17, [r4, #16]
}
24013b16:	ecbd 8b02 	vpop	{d8}
24013b1a:	bd38      	pop	{r3, r4, r5, pc}
24013b1c:	00000000 	.word	0x00000000

24013b20 <tOnePole_setFreq>:
{
24013b20:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24013b22:	6804      	ldr	r4, [r0, #0]
{
24013b24:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24013b2c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24013b58 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013b30:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24013b34:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013b38:	ee60 0aa7 	vmul.f32	s1, s1, s15
24013b3c:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b40:	f022 fa3e 	bl	24035fc0 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24013b44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b48:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24013b4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
24013b50:	edc4 7a04 	vstr	s15, [r4, #16]
}
24013b54:	bd10      	pop	{r4, pc}
24013b56:	bf00      	nop
24013b58:	00000000 	.word	0x00000000

24013b5c <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
24013b5c:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24013b5e:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
24013b62:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24013b66:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
24013b6a:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24013b6e:	edd3 6a05 	vldr	s13, [r3, #20]
24013b72:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24013b76:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24013b7a:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24013b7e:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24013b82:	4770      	bx	lr

24013b84 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013b84:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24013bc0 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013b8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013b90:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24013bc4 <tOnePole_setSampleRate+0x40>
{
24013b94:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24013b96:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013b98:	edd4 0a01 	vldr	s1, [r4, #4]
24013b9c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24013ba0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24013ba4:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013ba8:	f022 fa0a 	bl	24035fc0 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24013bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24013bb0:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24013bb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
24013bb8:	edc4 7a04 	vstr	s15, [r4, #16]
}
24013bbc:	bd10      	pop	{r4, pc}
24013bbe:	bf00      	nop
24013bc0:	40c90fdb 	.word	0x40c90fdb
24013bc4:	00000000 	.word	0x00000000

24013bc8 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24013bc8:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24013bca:	680c      	ldr	r4, [r1, #0]
{
24013bcc:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
24013bce:	2028      	movs	r0, #40	; 0x28
24013bd0:	4621      	mov	r1, r4
24013bd2:	f001 ff0d 	bl	240159f0 <mpool_alloc>
24013bd6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24013bd8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
24013bda:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013bdc:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24013bde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013be2:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
24013be4:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
24013be6:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
24013be8:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013bea:	6242      	str	r2, [r0, #36]	; 0x24
}
24013bec:	bd38      	pop	{r3, r4, r5, pc}
24013bee:	bf00      	nop

24013bf0 <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
24013bf0:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24013bf2:	edd3 6a07 	vldr	s13, [r3, #28]
24013bf6:	edd3 7a03 	vldr	s15, [r3, #12]
24013bfa:	edd3 5a08 	vldr	s11, [r3, #32]
24013bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
24013c02:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
24013c06:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24013c0a:	ed93 6a02 	vldr	s12, [r3, #8]
24013c0e:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
24013c12:	edc3 6a08 	vstr	s13, [r3, #32]
    float in = input * f->gain;
24013c16:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
24013c1a:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24013c1e:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
24013c22:	eea6 0a07 	vfma.f32	s0, s12, s14
24013c26:	4770      	bx	lr

24013c28 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
24013c28:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
24013c2a:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
24013c2e:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
24013c32:	ed83 1a04 	vstr	s2, [r3, #16]
}
24013c36:	4770      	bx	lr

24013c38 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
24013c38:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24013c3a:	680c      	ldr	r4, [r1, #0]
{
24013c3c:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24013c3e:	2044      	movs	r0, #68	; 0x44
24013c40:	4621      	mov	r1, r4
24013c42:	f001 fed5 	bl	240159f0 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
24013c46:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24013c48:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
24013c4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
24013c4e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24013c50:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24013c52:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
24013c54:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
24013c56:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
24013c58:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
24013c5a:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24013c5c:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
24013c5e:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013c60:	68d3      	ldr	r3, [r2, #12]
24013c62:	6403      	str	r3, [r0, #64]	; 0x40
}
24013c64:	bd38      	pop	{r3, r4, r5, pc}
24013c66:	bf00      	nop

24013c68 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24013c68:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24013cd4 <tBiQuad_setSampleRate+0x6c>
24013c6c:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
24013c70:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
24013c72:	6804      	ldr	r4, [r0, #0]
{
24013c74:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24013c78:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24013c7c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
24013c80:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24013c84:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
24013c88:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24013c8c:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24013c90:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24013c94:	f006 ff4c 	bl	2401ab30 <cosf>
24013c98:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24013c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24013c9e:	ee28 8a27 	vmul.f32	s16, s16, s15
24013ca2:	ee28 8a00 	vmul.f32	s16, s16, s0
24013ca6:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24013caa:	b17b      	cbz	r3, 24013ccc <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24013cac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
24013cb0:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
24013cb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24013cb6:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24013cb8:	ee77 7ae8 	vsub.f32	s15, s15, s17
24013cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
24013cc0:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24013cc4:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24013cc8:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24013ccc:	ecbd 8b02 	vpop	{d8}
24013cd0:	bd10      	pop	{r4, pc}
24013cd2:	bf00      	nop
24013cd4:	40c90fdb 	.word	0x40c90fdb

24013cd8 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
24013cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013cda:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24013cde:	6996      	ldr	r6, [r2, #24]
{
24013ce0:	4607      	mov	r7, r0
24013ce2:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013ce4:	2044      	movs	r0, #68	; 0x44
24013ce6:	4631      	mov	r1, r6
{
24013ce8:	eef0 8a40 	vmov.f32	s17, s0
24013cec:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24013cf0:	f001 fe7e 	bl	240159f0 <mpool_alloc>
24013cf4:	6038      	str	r0, [r7, #0]
24013cf6:	4604      	mov	r4, r0
    svf->mempool = m;
24013cf8:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
24013cfa:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
24013cfc:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013cfe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 24013db0 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
24013d02:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013d04:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24013d08:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
24013d0a:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
24013d0e:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013d10:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24013d14:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
24013d18:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
24013d1a:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
24013d1c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24013d20:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013d24:	f007 fc44 	bl	2401b5b0 <tanf>
    svf->k = 1.0f/Q;
24013d28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24013d2c:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24013d30:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
24013d32:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
24013d34:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
24013d38:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
24013d3a:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
24013d3c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013d40:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
24013d44:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013d48:	eeb0 7a67 	vmov.f32	s14, s15
24013d4c:	eea0 7a26 	vfma.f32	s14, s0, s13
24013d50:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
24013d54:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013d58:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24013d5c:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
24013d60:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24013d64:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24013d68:	d007      	beq.n	24013d7a <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24013d6a:	2d02      	cmp	r5, #2
24013d6c:	d008      	beq.n	24013d80 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
24013d6e:	b96d      	cbnz	r5, 24013d8c <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24013d70:	4b10      	ldr	r3, [pc, #64]	; (24013db4 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24013d72:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24013d76:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
24013d78:	6363      	str	r3, [r4, #52]	; 0x34
}
24013d7a:	ecbd 8b02 	vpop	{d8}
24013d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
24013d80:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24013d84:	6366      	str	r6, [r4, #52]	; 0x34
}
24013d86:	ecbd 8b02 	vpop	{d8}
24013d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
24013d8c:	2d03      	cmp	r5, #3
24013d8e:	d009      	beq.n	24013da4 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
24013d90:	2d04      	cmp	r5, #4
24013d92:	d1f2      	bne.n	24013d7a <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24013d94:	4a07      	ldr	r2, [pc, #28]	; (24013db4 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
24013d96:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24013d9a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24013d9e:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
24013da0:	6363      	str	r3, [r4, #52]	; 0x34
}
24013da2:	e7ea      	b.n	24013d7a <tSVF_init+0xa2>
        svf->cBK = -1.0f;
24013da4:	4b03      	ldr	r3, [pc, #12]	; (24013db4 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24013da6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
24013daa:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
24013dac:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
24013dae:	e7e4      	b.n	24013d7a <tSVF_init+0xa2>
24013db0:	40490fdb 	.word	0x40490fdb
24013db4:	bf800000 	.word	0xbf800000

24013db8 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
24013db8:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013dba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24013dbe:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013dc2:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013dc6:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013dca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
24013dce:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013dd2:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
24013dd6:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
24013dda:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013dde:	edd3 2a08 	vldr	s5, [r3, #32]
24013de2:	ee67 7a84 	vmul.f32	s15, s15, s8
24013de6:	ed93 2a07 	vldr	s4, [r3, #28]
24013dea:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24013dee:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
24013df2:	eea2 5a23 	vfma.f32	s10, s4, s7
24013df6:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24013dfa:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24013dfe:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013e02:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24013e06:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013e0a:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24013e0e:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24013e12:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24013e16:	edc3 6a05 	vstr	s13, [r3, #20]
}
24013e1a:	eea3 7a80 	vfma.f32	s14, s7, s0
24013e1e:	eeb0 0a47 	vmov.f32	s0, s14
24013e22:	4770      	bx	lr

24013e24 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
24013e24:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e28:	4a18      	ldr	r2, [pc, #96]	; (24013e8c <tSVF_setFreqFast+0x68>)
24013e2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
24013e2e:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
24013e30:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e34:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e38:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
24013e3c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e40:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
24013e44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e48:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
24013e4c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e50:	ee76 6a86 	vadd.f32	s13, s13, s12
24013e54:	ed90 6a00 	vldr	s12, [r0]
24013e58:	ee20 0a25 	vmul.f32	s0, s0, s11
24013e5c:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e60:	eef0 6a67 	vmov.f32	s13, s15
24013e64:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24013e68:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e6c:	eee0 6a07 	vfma.f32	s13, s0, s14
24013e70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
24013e74:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e78:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24013e7c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24013e80:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24013e84:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
24013e88:	4770      	bx	lr
24013e8a:	bf00      	nop
24013e8c:	2401d50c 	.word	0x2401d50c

24013e90 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24013e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24013e94:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013e96:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
24013e9a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
24013e9e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013ea2:	eeb0 6a47 	vmov.f32	s12, s14
24013ea6:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
24013eaa:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013eae:	eea7 6aa5 	vfma.f32	s12, s15, s11
24013eb2:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24013eb6:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24013eba:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24013ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24013ec2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24013ec6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24013eca:	4770      	bx	lr

24013ecc <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
24013ecc:	b538      	push	{r3, r4, r5, lr}
24013ece:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
24013ed2:	698c      	ldr	r4, [r1, #24]
{
24013ed4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24013ed6:	2018      	movs	r0, #24
{
24013ed8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24013edc:	4621      	mov	r1, r4
24013ede:	f001 fdeb 	bl	24015ab8 <mpool_calloc>
24013ee2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24013ee4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013ee6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013eea:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24013eec:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013eee:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24013ef2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013ef4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
24013ef8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
24013efa:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013efe:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f02:	edc0 7a03 	vstr	s15, [r0, #12]
}
24013f06:	ecbd 8b02 	vpop	{d8}
24013f0a:	bd38      	pop	{r3, r4, r5, pc}

24013f0c <tHighpass_initToPool>:
{
24013f0c:	b538      	push	{r3, r4, r5, lr}
24013f0e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013f12:	680c      	ldr	r4, [r1, #0]
{
24013f14:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24013f16:	2018      	movs	r0, #24
{
24013f18:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24013f1c:	4621      	mov	r1, r4
24013f1e:	f001 fdcb 	bl	24015ab8 <mpool_calloc>
24013f22:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24013f24:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013f2a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24013f2c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013f2e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24013f32:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f34:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
24013f38:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
24013f3a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24013f3e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f42:	edc0 7a03 	vstr	s15, [r0, #12]
}
24013f46:	ecbd 8b02 	vpop	{d8}
24013f4a:	bd38      	pop	{r3, r4, r5, pc}

24013f4c <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
24013f4c:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013f52:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24013f56:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24013f5a:	eee7 7a40 	vfms.f32	s15, s14, s0
24013f5e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24013f62:	4770      	bx	lr

24013f64 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
24013f64:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24013f66:	edd3 7a01 	vldr	s15, [r3, #4]
24013f6a:	ed93 7a02 	vldr	s14, [r3, #8]
24013f6e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
24013f72:	ed83 0a01 	vstr	s0, [r3, #4]
24013f76:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24013f7a:	ee30 0a27 	vadd.f32	s0, s0, s15
24013f7e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
24013f82:	4770      	bx	lr

24013f84 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24013f84:	eddf 6a07 	vldr	s13, [pc, #28]	; 24013fa4 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24013f88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
24013f8c:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24013f8e:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24013f92:	edd3 6a04 	vldr	s13, [r3, #16]
24013f96:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24013f9a:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24013f9e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24013fa2:	4770      	bx	lr
24013fa4:	40c90fdb 	.word	0x40c90fdb

24013fa8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
24013fa8:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013faa:	edd3 6a03 	vldr	s13, [r3, #12]
24013fae:	ed93 7a02 	vldr	s14, [r3, #8]
24013fb2:	ee70 7a66 	vsub.f32	s15, s0, s13
24013fb6:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24013fba:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24013fbe:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013fc2:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
24013fc6:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24013fca:	edd3 4a08 	vldr	s9, [r3, #32]
24013fce:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013fd2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
24013fd6:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24013fda:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
24013fde:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24013fe2:	eeb0 5a47 	vmov.f32	s10, s14
24013fe6:	eea4 0a87 	vfma.f32	s0, s9, s14
24013fea:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24013fee:	eef0 7a66 	vmov.f32	s15, s13
}
24013ff2:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24013ff6:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24013ffa:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
24013ffe:	edc3 7a03 	vstr	s15, [r3, #12]
}
24014002:	4770      	bx	lr

24014004 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
24014004:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
24014006:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014008:	eddf 7a98 	vldr	s15, [pc, #608]	; 2401426c <tVZFilter_calcCoeffs+0x268>
{
2401400c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014010:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24014014:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24014018:	ee68 8a87 	vmul.f32	s17, s17, s14
2401401c:	ee68 8aa7 	vmul.f32	s17, s17, s15
24014020:	eeb0 0a68 	vmov.f32	s0, s17
24014024:	f007 fac4 	bl	2401b5b0 <tanf>
    
    switch( f->type )
24014028:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401402a:	eeb0 8a40 	vmov.f32	s16, s0
2401402e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24014032:	2b0a      	cmp	r3, #10
24014034:	f200 8117 	bhi.w	24014266 <tVZFilter_calcCoeffs+0x262>
24014038:	e8df f013 	tbh	[pc, r3, lsl #1]
2401403c:	002f0026 	.word	0x002f0026
24014040:	00410038 	.word	0x00410038
24014044:	0056004d 	.word	0x0056004d
24014048:	00a1008b 	.word	0x00a1008b
2401404c:	010a00b7 	.word	0x010a00b7
24014050:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24014052:	edd4 7a05 	vldr	s15, [r4, #20]
24014056:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401405a:	eeb1 7a67 	vneg.f32	s14, s15
2401405e:	61e3      	str	r3, [r4, #28]
24014060:	6263      	str	r3, [r4, #36]	; 0x24
24014062:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2401406a:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401406e:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24014072:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014076:	eee7 6a88 	vfma.f32	s13, s15, s16
2401407a:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401407e:	edc4 7a06 	vstr	s15, [r4, #24]
}
24014082:	ecbd 8b02 	vpop	{d8}
24014086:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24014088:	2300      	movs	r3, #0
2401408a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401408e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24014092:	61e3      	str	r3, [r4, #28]
24014094:	6223      	str	r3, [r4, #32]
24014096:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24014098:	e7e5      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2401409a:	2300      	movs	r3, #0
2401409c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240140a0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240140a4:	6223      	str	r3, [r4, #32]
240140a6:	6263      	str	r3, [r4, #36]	; 0x24
240140a8:	61e2      	str	r2, [r4, #28]
            break;
240140aa:	e7dc      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240140ac:	2300      	movs	r3, #0
240140ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240140b2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240140b6:	61e3      	str	r3, [r4, #28]
240140b8:	6263      	str	r3, [r4, #36]	; 0x24
240140ba:	6222      	str	r2, [r4, #32]
            break;
240140bc:	e7d3      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240140be:	edd4 7a05 	vldr	s15, [r4, #20]
240140c2:	2300      	movs	r3, #0
240140c4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240140c8:	61e3      	str	r3, [r4, #28]
240140ca:	ee27 7a27 	vmul.f32	s14, s14, s15
240140ce:	6263      	str	r3, [r4, #36]	; 0x24
240140d0:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240140d4:	e7c7      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240140d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240140da:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240140dc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240140e0:	6222      	str	r2, [r4, #32]
240140e2:	61e3      	str	r3, [r4, #28]
240140e4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240140e6:	e7be      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240140e8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240140ec:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240140f0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240140f4:	ee60 0aa7 	vmul.f32	s1, s1, s15
240140f8:	f007 f8fa 	bl	2401b2f0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240140fc:	ee28 0a80 	vmul.f32	s0, s17, s0
24014100:	f007 fa56 	bl	2401b5b0 <tanf>
            float r  = f->g/wl;
24014104:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014108:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
2401410c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014110:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24014114:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014118:	ed84 7a07 	vstr	s14, [r4, #28]
2401411c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24014120:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014124:	eea7 7aa7 	vfma.f32	s14, s15, s15
24014128:	eef0 6a47 	vmov.f32	s13, s14
2401412c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24014130:	ee77 7a45 	vsub.f32	s15, s14, s10
24014134:	ee67 7aa5 	vmul.f32	s15, s15, s11
24014138:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401413c:	eef1 7ac7 	vsqrt.f32	s15, s14
24014140:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014144:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014148:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401414c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24014150:	e789      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
24014152:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014156:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401415a:	edd4 7a05 	vldr	s15, [r4, #20]
2401415e:	eef1 6ac7 	vsqrt.f32	s13, s14
24014162:	ed84 7a07 	vstr	s14, [r4, #28]
24014166:	6263      	str	r3, [r4, #36]	; 0x24
24014168:	ee27 6a27 	vmul.f32	s12, s14, s15
2401416c:	ed84 6a08 	vstr	s12, [r4, #32]
24014170:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014174:	ee80 8a07 	vdiv.f32	s16, s0, s14
24014178:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
2401417c:	e773      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
2401417e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24014182:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24014186:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401418a:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2401418e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24014192:	61e3      	str	r3, [r4, #28]
24014194:	ee27 6a27 	vmul.f32	s12, s14, s15
24014198:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401419c:	eeb1 7ae6 	vsqrt.f32	s14, s13
240141a0:	ee20 8a07 	vmul.f32	s16, s0, s14
240141a4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240141a8:	e75d      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
240141aa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240141ae:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240141b2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240141b6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24014270 <tVZFilter_calcCoeffs+0x26c>
240141ba:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
240141be:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240141c2:	eeb0 0a48 	vmov.f32	s0, s16
240141c6:	eea7 0a67 	vfms.f32	s0, s14, s15
240141ca:	f001 fbf3 	bl	240159b4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240141ce:	eddf 0a28 	vldr	s1, [pc, #160]	; 24014270 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240141d2:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240141d6:	eeb0 0a68 	vmov.f32	s0, s17
240141da:	f001 fbef 	bl	240159bc <minimum>
            f->cB = 1.0f-x*x;
240141de:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240141e2:	edd4 7a05 	vldr	s15, [r4, #20]
240141e6:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
240141ea:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240141ee:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
240141f2:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240141f6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240141fa:	ee76 5a06 	vadd.f32	s11, s12, s12
240141fe:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24014202:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014206:	eee6 7a06 	vfma.f32	s15, s12, s12
2401420a:	eee0 7a00 	vfma.f32	s15, s0, s0
2401420e:	eee0 7a65 	vfms.f32	s15, s0, s11
24014212:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24014216:	f001 f903 	bl	24015420 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2401421a:	edd4 5a07 	vldr	s11, [r4, #28]
2401421e:	ed94 6a08 	vldr	s12, [r4, #32]
24014222:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24014226:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401422a:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2401422e:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014232:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24014236:	ee65 5a80 	vmul.f32	s11, s11, s0
2401423a:	ee26 6a00 	vmul.f32	s12, s12, s0
2401423e:	ee26 0a80 	vmul.f32	s0, s13, s0
24014242:	edc4 5a07 	vstr	s11, [r4, #28]
24014246:	ed84 6a08 	vstr	s12, [r4, #32]
2401424a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2401424e:	e70a      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24014250:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24014254:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24014258:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
2401425a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2401425e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24014262:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24014264:	e6ff      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
24014266:	edd4 7a05 	vldr	s15, [r4, #20]
2401426a:	e6fc      	b.n	24014066 <tVZFilter_calcCoeffs+0x62>
2401426c:	40490fdb 	.word	0x40490fdb
24014270:	00000000 	.word	0x00000000

24014274 <tVZFilter_initToPool>:
{
24014274:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24014276:	6817      	ldr	r7, [r2, #0]
{
24014278:	4605      	mov	r5, r0
2401427a:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
2401427c:	204c      	movs	r0, #76	; 0x4c
2401427e:	4639      	mov	r1, r7
{
24014280:	ed2d 8b04 	vpush	{d8-d9}
24014284:	b083      	sub	sp, #12
24014286:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401428a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2401428e:	ed9f 8a42 	vldr	s16, [pc, #264]	; 24014398 <tVZFilter_initToPool+0x124>
{
24014292:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24014296:	f001 fbab 	bl	240159f0 <mpool_alloc>
2401429a:	6028      	str	r0, [r5, #0]
2401429c:	4604      	mov	r4, r0
    f->mempool = m;
2401429e:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240142a0:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
240142a4:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240142a6:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
240142aa:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142ae:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 2401439c <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
240142b2:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240142b6:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
240142ba:	685b      	ldr	r3, [r3, #4]
240142bc:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240142be:	f021 fe7f 	bl	24035fc0 <__LEAF_clip_veneer>
    f->invG = 1.0f/ONE_OVER_SQRT2;
240142c2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 240143a0 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
240142c6:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142ca:	ee20 6a09 	vmul.f32	s12, s0, s18
240142ce:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
240142d2:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
240142d6:	4b33      	ldr	r3, [pc, #204]	; (240143a4 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
240142d8:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
240142dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
240142de:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
240142e2:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240142e6:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240142ea:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
240142ee:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
240142f0:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
240142f4:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
240142f8:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
240142fc:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24014300:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014304:	f007 f954 	bl	2401b5b0 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24014308:	ed9f 1a27 	vldr	s2, [pc, #156]	; 240143a8 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401430c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24014310:	eef0 0a68 	vmov.f32	s1, s17
24014314:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24014318:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401431a:	f021 fe51 	bl	24035fc0 <__LEAF_clip_veneer>
2401431e:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014322:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24014326:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401432a:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
2401432e:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24014330:	ee60 0aa7 	vmul.f32	s1, s1, s15
24014334:	f006 ffdc 	bl	2401b2f0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24014338:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401433c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24014340:	ee67 7a87 	vmul.f32	s15, s15, s14
24014344:	ee67 7a89 	vmul.f32	s15, s15, s18
24014348:	ee27 0a80 	vmul.f32	s0, s15, s0
2401434c:	f007 f930 	bl	2401b5b0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24014350:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24014354:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24014358:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
2401435a:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401435e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24014362:	ee27 7a07 	vmul.f32	s14, s14, s14
24014366:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401436a:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401436e:	ee67 7aa6 	vmul.f32	s15, s15, s13
24014372:	eec7 6a87 	vdiv.f32	s13, s15, s14
24014376:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
2401437a:	ee77 7aa7 	vadd.f32	s15, s15, s15
2401437e:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
24014382:	f7ff fe3f 	bl	24014004 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
24014386:	4628      	mov	r0, r5
}
24014388:	b003      	add	sp, #12
2401438a:	ecbd 8b04 	vpop	{d8-d9}
2401438e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
24014392:	f7ff be37 	b.w	24014004 <tVZFilter_calcCoeffs>
24014396:	bf00      	nop
24014398:	00000000 	.word	0x00000000
2401439c:	40490fdb 	.word	0x40490fdb
240143a0:	3fb504f3 	.word	0x3fb504f3
240143a4:	3f3504f3 	.word	0x3f3504f3
240143a8:	42c80000 	.word	0x42c80000

240143ac <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
240143ac:	3218      	adds	r2, #24
240143ae:	f7ff bf61 	b.w	24014274 <tVZFilter_initToPool>
240143b2:	bf00      	nop

240143b4 <tVZFilter_setFreq>:
{
240143b4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
240143b6:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240143b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240143bc:	4604      	mov	r4, r0
240143be:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240143c2:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
240143c6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 240143e0 <tVZFilter_setFreq+0x2c>
240143ca:	ee21 1a27 	vmul.f32	s2, s2, s15
240143ce:	f021 fdf7 	bl	24035fc0 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
240143d2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240143d4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
240143d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240143dc:	f7ff be12 	b.w	24014004 <tVZFilter_calcCoeffs>
240143e0:	00000000 	.word	0x00000000

240143e4 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
240143e4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240143e8:	4baa      	ldr	r3, [pc, #680]	; (24014694 <tVZFilter_setFreqFast+0x2b0>)
240143ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
240143ee:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240143f2:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
240143f6:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240143fa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
240143fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24014402:	ed91 6a01 	vldr	s12, [r1, #4]
{
24014406:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
24014408:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
2401440c:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401440e:	ee37 7a26 	vadd.f32	s14, s14, s13
24014412:	edd1 6a00 	vldr	s13, [r1]
24014416:	ee67 7a86 	vmul.f32	s15, s15, s12
{
2401441a:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401441e:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
24014422:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24014424:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24014428:	2a0a      	cmp	r2, #10
2401442a:	f200 812f 	bhi.w	2401468c <tVZFilter_setFreqFast+0x2a8>
2401442e:	e8df f012 	tbh	[pc, r2, lsl #1]
24014432:	0026      	.short	0x0026
24014434:	0038002f 	.word	0x0038002f
24014438:	004d0041 	.word	0x004d0041
2401443c:	009b0056 	.word	0x009b0056
24014440:	00cf00b5 	.word	0x00cf00b5
24014444:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24014448:	ed94 7a05 	vldr	s14, [r4, #20]
2401444c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24014450:	eef1 6a47 	vneg.f32	s13, s14
24014454:	61e3      	str	r3, [r4, #28]
24014456:	6263      	str	r3, [r4, #36]	; 0x24
24014458:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
2401445c:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24014464:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014468:	eef0 6a47 	vmov.f32	s13, s14
2401446c:	eee0 6a27 	vfma.f32	s13, s0, s15
24014470:	eec7 7a26 	vdiv.f32	s15, s14, s13
24014474:	edc4 7a06 	vstr	s15, [r4, #24]
}
24014478:	ecbd 8b02 	vpop	{d8}
2401447c:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401447e:	2300      	movs	r3, #0
24014480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24014484:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24014488:	61e3      	str	r3, [r4, #28]
2401448a:	6223      	str	r3, [r4, #32]
2401448c:	6262      	str	r2, [r4, #36]	; 0x24
            break;
2401448e:	e7e5      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24014490:	2300      	movs	r3, #0
24014492:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24014496:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2401449a:	6223      	str	r3, [r4, #32]
2401449c:	6263      	str	r3, [r4, #36]	; 0x24
2401449e:	61e2      	str	r2, [r4, #28]
            break;
240144a0:	e7dc      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240144a2:	2300      	movs	r3, #0
240144a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240144a8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240144ac:	61e3      	str	r3, [r4, #28]
240144ae:	6263      	str	r3, [r4, #36]	; 0x24
240144b0:	6222      	str	r2, [r4, #32]
            break;
240144b2:	e7d3      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240144b4:	ed94 7a05 	vldr	s14, [r4, #20]
240144b8:	2300      	movs	r3, #0
240144ba:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240144be:	61e3      	str	r3, [r4, #28]
240144c0:	ee66 6a87 	vmul.f32	s13, s13, s14
240144c4:	6263      	str	r3, [r4, #36]	; 0x24
240144c6:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240144ca:	e7c7      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240144cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240144d0:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240144d2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240144d6:	6222      	str	r2, [r4, #32]
240144d8:	61e3      	str	r3, [r4, #28]
240144da:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240144dc:	e7be      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240144de:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240144e2:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240144e6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240144ea:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240144ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240144f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
240144f6:	f000 ffd7 	bl	240154a8 <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240144fa:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240144fe:	eddf 7a66 	vldr	s15, [pc, #408]	; 24014698 <tVZFilter_setFreqFast+0x2b4>
24014502:	ee28 8a07 	vmul.f32	s16, s16, s14
24014506:	ee28 8a27 	vmul.f32	s16, s16, s15
2401450a:	ee28 0a00 	vmul.f32	s0, s16, s0
2401450e:	f000 ff73 	bl	240153f8 <fastertanf>
            float r  = f->g/wl;
24014512:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014516:	eeb0 5a68 	vmov.f32	s10, s17
2401451a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
2401451e:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014522:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24014526:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401452a:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401452e:	eea7 5aa7 	vfma.f32	s10, s15, s15
24014532:	ee85 7a27 	vdiv.f32	s14, s10, s15
24014536:	ee77 7a65 	vsub.f32	s15, s14, s11
2401453a:	ee67 7a86 	vmul.f32	s15, s15, s12
2401453e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24014542:	f000 ff6d 	bl	24015420 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014546:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
2401454a:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401454e:	edc4 8a07 	vstr	s17, [r4, #28]
24014552:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014556:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401455a:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401455e:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014562:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24014566:	e779      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
24014568:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2401456c:	f000 ff58 	bl	24015420 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014570:	f000 ff56 	bl	24015420 <fastsqrtf>
24014574:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24014578:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
2401457c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014580:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24014584:	ed94 7a05 	vldr	s14, [r4, #20]
24014588:	edc4 6a07 	vstr	s13, [r4, #28]
2401458c:	6263      	str	r3, [r4, #36]	; 0x24
2401458e:	ee66 6a87 	vmul.f32	s13, s13, s14
24014592:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014596:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
2401459a:	e75f      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
2401459c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
240145a0:	f000 ff3e 	bl	24015420 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240145a4:	f000 ff3c 	bl	24015420 <fastsqrtf>
240145a8:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240145ac:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240145b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240145b4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240145b8:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240145bc:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
240145c0:	ee67 6a26 	vmul.f32	s13, s14, s13
240145c4:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240145c6:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240145ca:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240145ce:	e745      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
240145d0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240145d4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240145d8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240145dc:	eddf 0a2f 	vldr	s1, [pc, #188]	; 2401469c <tVZFilter_setFreqFast+0x2b8>
240145e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
240145e4:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240145e8:	eeb0 0a48 	vmov.f32	s0, s16
240145ec:	eea7 0a67 	vfms.f32	s0, s14, s15
240145f0:	f001 f9e0 	bl	240159b4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240145f4:	eddf 0a29 	vldr	s1, [pc, #164]	; 2401469c <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240145f8:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240145fc:	eeb0 0a68 	vmov.f32	s0, s17
24014600:	f001 f9dc 	bl	240159bc <minimum>
            f->cB = 1.0f-x*x;
24014604:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014608:	edd4 7a05 	vldr	s15, [r4, #20]
2401460c:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24014610:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014614:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24014618:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401461c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014620:	ee76 5a06 	vadd.f32	s11, s12, s12
24014624:	ee38 8a08 	vadd.f32	s16, s16, s16
24014628:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
2401462c:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014630:	eee6 7a06 	vfma.f32	s15, s12, s12
24014634:	eee0 7a00 	vfma.f32	s15, s0, s0
24014638:	eee0 7a65 	vfms.f32	s15, s0, s11
2401463c:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24014640:	f000 feee 	bl	24015420 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24014644:	edd4 5a07 	vldr	s11, [r4, #28]
24014648:	ed94 6a08 	vldr	s12, [r4, #32]
2401464c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24014650:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014654:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24014658:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
2401465c:	ee65 5a80 	vmul.f32	s11, s11, s0
24014660:	ee26 6a00 	vmul.f32	s12, s12, s0
24014664:	ee26 0a80 	vmul.f32	s0, s13, s0
24014668:	edc4 5a07 	vstr	s11, [r4, #28]
2401466c:	ed84 6a08 	vstr	s12, [r4, #32]
24014670:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24014674:	e6f2      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
24014676:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2401467a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
2401467e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24014680:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
24014684:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24014688:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401468a:	e6e7      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
2401468c:	ed94 7a05 	vldr	s14, [r4, #20]
24014690:	e6e4      	b.n	2401445c <tVZFilter_setFreqFast+0x78>
24014692:	bf00      	nop
24014694:	2401d50c 	.word	0x2401d50c
24014698:	40490fdb 	.word	0x40490fdb
2401469c:	00000000 	.word	0x00000000

240146a0 <tVZFilter_setGain>:
{
240146a0:	b538      	push	{r3, r4, r5, lr}
240146a2:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240146a6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 240146d0 <tVZFilter_setGain+0x30>
240146aa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240146d4 <tVZFilter_setGain+0x34>
{
240146ae:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240146b0:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240146b2:	f021 fc85 	bl	24035fc0 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
240146b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240146ba:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240146bc:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
240146c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
240146c4:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
240146c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240146cc:	f7ff bc9a 	b.w	24014004 <tVZFilter_calcCoeffs>
240146d0:	457a0000 	.word	0x457a0000
240146d4:	358637bd 	.word	0x358637bd

240146d8 <tVZFilter_setResonance>:
{
240146d8:	b538      	push	{r3, r4, r5, lr}
240146da:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240146de:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24014708 <tVZFilter_setResonance+0x30>
240146e2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401470c <tVZFilter_setResonance+0x34>
{
240146e6:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240146e8:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240146ea:	f021 fc69 	bl	24035fc0 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
240146ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240146f2:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240146f4:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
240146f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
240146fc:	edc5 7a05 	vstr	s15, [r5, #20]
}
24014700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24014704:	f7ff bc7e 	b.w	24014004 <tVZFilter_calcCoeffs>
24014708:	42c80000 	.word	0x42c80000
2401470c:	3c23d70a 	.word	0x3c23d70a

24014710 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24014710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
24014714:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014716:	eddf 7a9d 	vldr	s15, [pc, #628]	; 2401498c <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
2401471a:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
2401471e:	b510      	push	{r4, lr}
24014720:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
24014724:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
24014728:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
2401472c:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401472e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24014732:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24014736:	ee68 8a87 	vmul.f32	s17, s17, s14
2401473a:	ee68 8aa7 	vmul.f32	s17, s17, s15
2401473e:	eeb0 0a68 	vmov.f32	s0, s17
24014742:	f006 ff35 	bl	2401b5b0 <tanf>
    switch( f->type )
24014746:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24014748:	eeb0 8a40 	vmov.f32	s16, s0
2401474c:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24014750:	2b0a      	cmp	r3, #10
24014752:	f200 8117 	bhi.w	24014984 <tVZFilter_setSampleRate+0x274>
24014756:	e8df f013 	tbh	[pc, r3, lsl #1]
2401475a:	0026      	.short	0x0026
2401475c:	0038002f 	.word	0x0038002f
24014760:	004d0041 	.word	0x004d0041
24014764:	008b0056 	.word	0x008b0056
24014768:	00b700a1 	.word	0x00b700a1
2401476c:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24014770:	edd4 7a05 	vldr	s15, [r4, #20]
24014774:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24014778:	eeb1 7a67 	vneg.f32	s14, s15
2401477c:	61e3      	str	r3, [r4, #28]
2401477e:	6263      	str	r3, [r4, #36]	; 0x24
24014780:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24014788:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401478c:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24014790:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24014794:	eee7 6a88 	vfma.f32	s13, s15, s16
24014798:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401479c:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
240147a0:	ecbd 8b02 	vpop	{d8}
240147a4:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240147a6:	2300      	movs	r3, #0
240147a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240147ac:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240147b0:	61e3      	str	r3, [r4, #28]
240147b2:	6223      	str	r3, [r4, #32]
240147b4:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240147b6:	e7e5      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240147b8:	2300      	movs	r3, #0
240147ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240147be:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240147c2:	6223      	str	r3, [r4, #32]
240147c4:	6263      	str	r3, [r4, #36]	; 0x24
240147c6:	61e2      	str	r2, [r4, #28]
            break;
240147c8:	e7dc      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240147ca:	2300      	movs	r3, #0
240147cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240147d0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240147d4:	61e3      	str	r3, [r4, #28]
240147d6:	6263      	str	r3, [r4, #36]	; 0x24
240147d8:	6222      	str	r2, [r4, #32]
            break;
240147da:	e7d3      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240147dc:	edd4 7a05 	vldr	s15, [r4, #20]
240147e0:	2300      	movs	r3, #0
240147e2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240147e6:	61e3      	str	r3, [r4, #28]
240147e8:	ee27 7a27 	vmul.f32	s14, s14, s15
240147ec:	6263      	str	r3, [r4, #36]	; 0x24
240147ee:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240147f2:	e7c7      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240147f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240147f8:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240147fa:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240147fe:	6222      	str	r2, [r4, #32]
24014800:	61e3      	str	r3, [r4, #28]
24014802:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24014804:	e7be      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24014806:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2401480a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2401480e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24014812:	ee60 0aa7 	vmul.f32	s1, s1, s15
24014816:	f006 fd6b 	bl	2401b2f0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401481a:	ee28 0a80 	vmul.f32	s0, s17, s0
2401481e:	f006 fec7 	bl	2401b5b0 <tanf>
            float r  = f->g/wl;
24014822:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014826:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
2401482a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401482e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24014832:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014836:	ed84 7a07 	vstr	s14, [r4, #28]
2401483a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401483e:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014842:	eea7 7aa7 	vfma.f32	s14, s15, s15
24014846:	eef0 6a47 	vmov.f32	s13, s14
2401484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401484e:	ee77 7a45 	vsub.f32	s15, s14, s10
24014852:	ee67 7aa5 	vmul.f32	s15, s15, s11
24014856:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401485a:	eef1 7ac7 	vsqrt.f32	s15, s14
2401485e:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24014862:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24014866:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401486a:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
2401486e:	e789      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
24014870:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014874:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24014878:	edd4 7a05 	vldr	s15, [r4, #20]
2401487c:	eef1 6ac7 	vsqrt.f32	s13, s14
24014880:	ed84 7a07 	vstr	s14, [r4, #28]
24014884:	6263      	str	r3, [r4, #36]	; 0x24
24014886:	ee27 6a27 	vmul.f32	s12, s14, s15
2401488a:	ed84 6a08 	vstr	s12, [r4, #32]
2401488e:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24014892:	ee80 8a07 	vdiv.f32	s16, s0, s14
24014896:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
2401489a:	e773      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
2401489c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240148a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240148a4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240148a8:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240148ac:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240148b0:	61e3      	str	r3, [r4, #28]
240148b2:	ee27 6a27 	vmul.f32	s12, s14, s15
240148b6:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240148ba:	eeb1 7ae6 	vsqrt.f32	s14, s13
240148be:	ee20 8a07 	vmul.f32	s16, s0, s14
240148c2:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240148c6:	e75d      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
240148c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240148cc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240148d0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240148d4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24014990 <tVZFilter_setSampleRate+0x280>
240148d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
240148dc:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240148e0:	eeb0 0a48 	vmov.f32	s0, s16
240148e4:	eea7 0a67 	vfms.f32	s0, s14, s15
240148e8:	f001 f864 	bl	240159b4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240148ec:	eddf 0a28 	vldr	s1, [pc, #160]	; 24014990 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240148f0:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240148f4:	eeb0 0a68 	vmov.f32	s0, s17
240148f8:	f001 f860 	bl	240159bc <minimum>
            f->cB = 1.0f-x*x;
240148fc:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014900:	edd4 7a05 	vldr	s15, [r4, #20]
24014904:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24014908:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401490c:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24014910:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24014914:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014918:	ee76 5a06 	vadd.f32	s11, s12, s12
2401491c:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24014920:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014924:	eee6 7a06 	vfma.f32	s15, s12, s12
24014928:	eee0 7a00 	vfma.f32	s15, s0, s0
2401492c:	eee0 7a65 	vfms.f32	s15, s0, s11
24014930:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24014934:	f000 fd74 	bl	24015420 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24014938:	edd4 5a07 	vldr	s11, [r4, #28]
2401493c:	ed94 6a08 	vldr	s12, [r4, #32]
24014940:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24014944:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014948:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2401494c:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24014950:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24014954:	ee65 5a80 	vmul.f32	s11, s11, s0
24014958:	ee26 6a00 	vmul.f32	s12, s12, s0
2401495c:	ee26 0a80 	vmul.f32	s0, s13, s0
24014960:	edc4 5a07 	vstr	s11, [r4, #28]
24014964:	ed84 6a08 	vstr	s12, [r4, #32]
24014968:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2401496c:	e70a      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
2401496e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24014972:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24014976:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24014978:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2401497c:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24014980:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24014982:	e6ff      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
24014984:	edd4 7a05 	vldr	s15, [r4, #20]
24014988:	e6fc      	b.n	24014784 <tVZFilter_setSampleRate+0x74>
2401498a:	bf00      	nop
2401498c:	40490fdb 	.word	0x40490fdb
24014990:	00000000 	.word	0x00000000

24014994 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
24014994:	b570      	push	{r4, r5, r6, lr}
24014996:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
2401499a:	698d      	ldr	r5, [r1, #24]
{
2401499c:	eeb0 8a40 	vmov.f32	s16, s0
240149a0:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240149a2:	2040      	movs	r0, #64	; 0x40
240149a4:	4629      	mov	r1, r5
{
240149a6:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240149aa:	f001 f821 	bl	240159f0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
240149ae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24014a28 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240149b2:	6030      	str	r0, [r6, #0]
240149b4:	4604      	mov	r4, r0
    f->mempool = m;
240149b6:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
240149b8:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
240149bc:	686b      	ldr	r3, [r5, #4]
240149be:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
240149c2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
240149c6:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
240149ca:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
240149ce:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240149d2:	f006 fab9 	bl	2401af48 <tan>
    f->r = (7.f * resonance + 0.5f);
240149d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240149da:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
240149de:	4913      	ldr	r1, [pc, #76]	; (24014a2c <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
240149e0:	4b13      	ldr	r3, [pc, #76]	; (24014a30 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
240149e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
240149e6:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
240149ea:	2000      	movs	r0, #0
    f->n = 1.836f;
240149ec:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
240149ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
240149f2:	4910      	ldr	r1, [pc, #64]	; (24014a34 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
240149f4:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
240149f8:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
240149fa:	4b0f      	ldr	r3, [pc, #60]	; (24014a38 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
240149fc:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
240149fe:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
24014a00:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
24014a02:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
24014a04:	480d      	ldr	r0, [pc, #52]	; (24014a3c <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
24014a06:	490e      	ldr	r1, [pc, #56]	; (24014a40 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
24014a08:	4a0e      	ldr	r2, [pc, #56]	; (24014a44 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
24014a0a:	4b0f      	ldr	r3, [pc, #60]	; (24014a48 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24014a0c:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
24014a10:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24014a14:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24014a18:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24014a1a:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24014a1c:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24014a1e:	63a3      	str	r3, [r4, #56]	; 0x38
}
24014a20:	ecbd 8b02 	vpop	{d8}
24014a24:	bd70      	pop	{r4, r5, r6, pc}
24014a26:	bf00      	nop
24014a28:	40490fdb 	.word	0x40490fdb
24014a2c:	3feb020c 	.word	0x3feb020c
24014a30:	3f6b020c 	.word	0x3f6b020c
24014a34:	3c23d70a 	.word	0x3c23d70a
24014a38:	3ca3d70a 	.word	0x3ca3d70a
24014a3c:	3cf5c28f 	.word	0x3cf5c28f
24014a40:	3f0b6efd 	.word	0x3f0b6efd
24014a44:	3e39e952 	.word	0x3e39e952
24014a48:	3d23d70a 	.word	0x3d23d70a

24014a4c <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
24014a4c:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014a4e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014a52:	ed9f 2aba 	vldr	s4, [pc, #744]	; 24014d3c <tDiodeFilter_tick+0x2f0>
24014a56:	eddf 7aba 	vldr	s15, [pc, #744]	; 24014d40 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014a5a:	eddf 0aba 	vldr	s1, [pc, #744]	; 24014d44 <tDiodeFilter_tick+0x2f8>
24014a5e:	eeb0 1a67 	vmov.f32	s2, s15
{
24014a62:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014a66:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014a6a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014a6e:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014a72:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
24014a76:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014a7a:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014a7e:	ee26 7ae1 	vnmul.f32	s14, s13, s3
24014a82:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24014a86:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014a8a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
24014a8e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014a92:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014a96:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014a9a:	eea4 7a84 	vfma.f32	s14, s9, s8
24014a9e:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014aa2:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014aa6:	ee73 5ac3 	vsub.f32	s11, s7, s6
24014aaa:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014aae:	ee27 7a22 	vmul.f32	s14, s14, s5
24014ab2:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24014ab6:	ee65 5aa5 	vmul.f32	s11, s11, s11
24014aba:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014abe:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014ac2:	ee77 4a20 	vadd.f32	s9, s14, s1
24014ac6:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014aca:	eef0 4a67 	vmov.f32	s9, s15
24014ace:	eee7 4a04 	vfma.f32	s9, s14, s8
24014ad2:	eeb0 7a42 	vmov.f32	s14, s4
24014ad6:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014ada:	ee81 4a24 	vdiv.f32	s8, s2, s9
24014ade:	ee75 4aa0 	vadd.f32	s9, s11, s1
24014ae2:	eeb0 1a67 	vmov.f32	s2, s15
24014ae6:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014aea:	eef0 4a67 	vmov.f32	s9, s15
24014aee:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014af2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014af6:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014afa:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014afe:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
24014b02:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014b06:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014b0a:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014b0e:	ee24 4a06 	vmul.f32	s8, s8, s12
24014b12:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
24014b16:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014b1a:	ee25 5a25 	vmul.f32	s10, s10, s11
24014b1e:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
24014b22:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014b26:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
24014b2a:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014b2e:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014b32:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014b36:	eee5 9a88 	vfma.f32	s19, s11, s16
24014b3a:	eeb0 8a67 	vmov.f32	s16, s15
24014b3e:	eee1 8a09 	vfma.f32	s17, s2, s18
24014b42:	eeb0 9a67 	vmov.f32	s18, s15
24014b46:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b4a:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014b4e:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b52:	ee75 9aa0 	vadd.f32	s19, s11, s1
24014b56:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014b5a:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b5e:	eec2 5a09 	vdiv.f32	s11, s4, s18
24014b62:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014b66:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b6a:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014b6e:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b72:	eea1 9a25 	vfma.f32	s18, s2, s11
24014b76:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014b7a:	eee1 aaa2 	vfma.f32	s21, s3, s5
24014b7e:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b82:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014b86:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014b8a:	ee89 2a28 	vdiv.f32	s4, s18, s17
24014b8e:	eec7 5a88 	vdiv.f32	s11, s15, s16
24014b92:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014b96:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014b9a:	ee31 1a20 	vadd.f32	s2, s2, s1
24014b9e:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014ba2:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014ba6:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014baa:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bae:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014bb2:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bb6:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014bba:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014bbe:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bc2:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014bc6:	eeaa aa87 	vfma.f32	s20, s21, s14
24014bca:	ee68 aa07 	vmul.f32	s21, s16, s14
24014bce:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bd2:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014bd6:	eeea 5a82 	vfma.f32	s11, s21, s4
24014bda:	eeb0 1a65 	vmov.f32	s2, s11
24014bde:	eef0 5a45 	vmov.f32	s11, s10
24014be2:	eeea 5a89 	vfma.f32	s11, s21, s18
24014be6:	eee1 5a27 	vfma.f32	s11, s2, s15
24014bea:	ee35 1a09 	vadd.f32	s2, s10, s18
24014bee:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bf2:	ee66 9a87 	vmul.f32	s19, s13, s14
24014bf6:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014bfa:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014bfe:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014c02:	eee1 5a06 	vfma.f32	s11, s2, s12
24014c06:	eeb0 1a66 	vmov.f32	s2, s13
24014c0a:	eea9 1a89 	vfma.f32	s2, s19, s18
24014c0e:	eea2 1a27 	vfma.f32	s2, s4, s15
24014c12:	ee34 2a04 	vadd.f32	s4, s8, s8
24014c16:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014c1a:	eeb0 2a41 	vmov.f32	s4, s2
24014c1e:	eea0 4aa7 	vfma.f32	s8, s1, s15
24014c22:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24014c26:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
24014c2a:	eef4 5a44 	vcmp.f32	s11, s8
24014c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24014c32:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014c36:	bf14      	ite	ne
24014c38:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
24014c3c:	eddf 5a42 	vldreq	s11, [pc, #264]	; 24014d48 <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
24014c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24014c44:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
24014c48:	d069      	beq.n	24014d1e <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24014c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
24014c4e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24014c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c56:	ee37 2a02 	vadd.f32	s4, s14, s4
24014c5a:	d069      	beq.n	24014d30 <tDiodeFilter_tick+0x2e4>
24014c5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24014c60:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24014c64:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24014c68:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014c6c:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
24014c70:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
24014c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014c78:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
24014c7c:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
24014c80:	bf08      	it	eq
24014c82:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 24014d48 <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
24014c86:	eeb0 0a61 	vmov.f32	s0, s3
24014c8a:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014c8e:	ee38 4a06 	vadd.f32	s8, s16, s12
24014c92:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014c96:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014c9a:	eed4 8a20 	vfnms.f32	s17, s8, s1
24014c9e:	eea6 8a20 	vfma.f32	s16, s12, s1
24014ca2:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014ca6:	ee95 8a84 	vfnms.f32	s16, s11, s8
24014caa:	eee7 1a84 	vfma.f32	s3, s15, s8
24014cae:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014cb2:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014cb6:	ee35 2ac4 	vsub.f32	s4, s11, s8
24014cba:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014cbe:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014cc2:	ee74 1a60 	vsub.f32	s3, s8, s1
24014cc6:	ee61 1a86 	vmul.f32	s3, s3, s12
24014cca:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014cce:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014cd2:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014cd6:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014cda:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014cde:	ee75 5ac8 	vsub.f32	s11, s11, s16
24014ce2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24014ce6:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014cea:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014cee:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014cf2:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014cf6:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014cfa:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014cfe:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014d02:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014d06:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014d0a:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014d0e:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014d12:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
24014d16:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
24014d1a:	f006 bc75 	b.w	2401b608 <tanhf>
    if (t2 == 0.0f)
24014d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
24014d22:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24014d4c <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
24014d26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014d48 <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
24014d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014d2e:	d195      	bne.n	24014c5c <tDiodeFilter_tick+0x210>
24014d30:	eddf 5a06 	vldr	s11, [pc, #24]	; 24014d4c <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
24014d34:	eddf 7a04 	vldr	s15, [pc, #16]	; 24014d48 <tDiodeFilter_tick+0x2fc>
24014d38:	e794      	b.n	24014c64 <tDiodeFilter_tick+0x218>
24014d3a:	bf00      	nop
24014d3c:	43d20000 	.word	0x43d20000
24014d40:	446c4000 	.word	0x446c4000
24014d44:	42d20000 	.word	0x42d20000
24014d48:	358637bd 	.word	0x358637bd
24014d4c:	3f800008 	.word	0x3f800008

24014d50 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
24014d50:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014d52:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014d56:	ed9f 2aba 	vldr	s4, [pc, #744]	; 24015040 <tDiodeFilter_tickEfficient+0x2f0>
24014d5a:	eddf 7aba 	vldr	s15, [pc, #744]	; 24015044 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014d5e:	eddf 0aba 	vldr	s1, [pc, #744]	; 24015048 <tDiodeFilter_tickEfficient+0x2f8>
24014d62:	eeb0 1a67 	vmov.f32	s2, s15
{
24014d66:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014d6a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014d6e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014d72:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014d76:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
24014d7a:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014d7e:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014d82:	ee26 7ae1 	vnmul.f32	s14, s13, s3
24014d86:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24014d8a:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014d8e:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
24014d92:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014d96:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014d9a:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014d9e:	eea4 7a84 	vfma.f32	s14, s9, s8
24014da2:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014da6:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014daa:	ee73 5ac3 	vsub.f32	s11, s7, s6
24014dae:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014db2:	ee27 7a22 	vmul.f32	s14, s14, s5
24014db6:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24014dba:	ee65 5aa5 	vmul.f32	s11, s11, s11
24014dbe:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014dc2:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014dc6:	ee77 4a20 	vadd.f32	s9, s14, s1
24014dca:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014dce:	eef0 4a67 	vmov.f32	s9, s15
24014dd2:	eee7 4a04 	vfma.f32	s9, s14, s8
24014dd6:	eeb0 7a42 	vmov.f32	s14, s4
24014dda:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014dde:	ee81 4a24 	vdiv.f32	s8, s2, s9
24014de2:	ee75 4aa0 	vadd.f32	s9, s11, s1
24014de6:	eeb0 1a67 	vmov.f32	s2, s15
24014dea:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014dee:	eef0 4a67 	vmov.f32	s9, s15
24014df2:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014df6:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014dfa:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014dfe:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014e02:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
24014e06:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014e0a:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014e0e:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014e12:	ee24 4a06 	vmul.f32	s8, s8, s12
24014e16:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
24014e1a:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014e1e:	ee25 5a25 	vmul.f32	s10, s10, s11
24014e22:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
24014e26:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014e2a:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
24014e2e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014e32:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014e36:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014e3a:	eee5 9a88 	vfma.f32	s19, s11, s16
24014e3e:	eeb0 8a67 	vmov.f32	s16, s15
24014e42:	eee1 8a09 	vfma.f32	s17, s2, s18
24014e46:	eeb0 9a67 	vmov.f32	s18, s15
24014e4a:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e4e:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014e52:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e56:	ee75 9aa0 	vadd.f32	s19, s11, s1
24014e5a:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014e5e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e62:	eec2 5a09 	vdiv.f32	s11, s4, s18
24014e66:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014e6a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e6e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014e72:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e76:	eea1 9a25 	vfma.f32	s18, s2, s11
24014e7a:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014e7e:	eee1 aaa2 	vfma.f32	s21, s3, s5
24014e82:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e86:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014e8a:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
24014e8e:	ee89 2a28 	vdiv.f32	s4, s18, s17
24014e92:	eec7 5a88 	vdiv.f32	s11, s15, s16
24014e96:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014e9a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014e9e:	ee31 1a20 	vadd.f32	s2, s2, s1
24014ea2:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014ea6:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014eaa:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24014eae:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014eb2:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014eb6:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014eba:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014ebe:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014ec2:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014ec6:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014eca:	eeaa aa87 	vfma.f32	s20, s21, s14
24014ece:	ee68 aa07 	vmul.f32	s21, s16, s14
24014ed2:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014ed6:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014eda:	eeea 5a82 	vfma.f32	s11, s21, s4
24014ede:	eeb0 1a65 	vmov.f32	s2, s11
24014ee2:	eef0 5a45 	vmov.f32	s11, s10
24014ee6:	eeea 5a89 	vfma.f32	s11, s21, s18
24014eea:	eee1 5a27 	vfma.f32	s11, s2, s15
24014eee:	ee35 1a09 	vadd.f32	s2, s10, s18
24014ef2:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014ef6:	ee66 9a87 	vmul.f32	s19, s13, s14
24014efa:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014efe:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014f02:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014f06:	eee1 5a06 	vfma.f32	s11, s2, s12
24014f0a:	eeb0 1a66 	vmov.f32	s2, s13
24014f0e:	eea9 1a89 	vfma.f32	s2, s19, s18
24014f12:	eea2 1a27 	vfma.f32	s2, s4, s15
24014f16:	ee34 2a04 	vadd.f32	s4, s8, s8
24014f1a:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014f1e:	eeb0 2a41 	vmov.f32	s4, s2
24014f22:	eea0 4aa7 	vfma.f32	s8, s1, s15
24014f26:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
24014f2a:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
24014f2e:	eef4 5a44 	vcmp.f32	s11, s8
24014f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24014f36:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014f3a:	bf14      	ite	ne
24014f3c:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
24014f40:	eddf 5a42 	vldreq	s11, [pc, #264]	; 2401504c <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
24014f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24014f48:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
24014f4c:	d069      	beq.n	24015022 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24014f4e:	eef5 7a40 	vcmp.f32	s15, #0.0
24014f52:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24014f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f5a:	ee37 2a02 	vadd.f32	s4, s14, s4
24014f5e:	d069      	beq.n	24015034 <tDiodeFilter_tickEfficient+0x2e4>
24014f60:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24014f64:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24014f68:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
24014f6c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014f70:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
24014f74:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
24014f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014f7c:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
24014f80:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
24014f84:	bf08      	it	eq
24014f86:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 2401504c <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
24014f8a:	eeb0 0a61 	vmov.f32	s0, s3
24014f8e:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014f92:	ee38 4a06 	vadd.f32	s8, s16, s12
24014f96:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014f9a:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014f9e:	eed4 8a20 	vfnms.f32	s17, s8, s1
24014fa2:	eea6 8a20 	vfma.f32	s16, s12, s1
24014fa6:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014faa:	ee95 8a84 	vfnms.f32	s16, s11, s8
24014fae:	eee7 1a84 	vfma.f32	s3, s15, s8
24014fb2:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014fb6:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014fba:	ee35 2ac4 	vsub.f32	s4, s11, s8
24014fbe:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014fc2:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014fc6:	ee74 1a60 	vsub.f32	s3, s8, s1
24014fca:	ee61 1a86 	vmul.f32	s3, s3, s12
24014fce:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014fd2:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014fd6:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014fda:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014fde:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014fe2:	ee75 5ac8 	vsub.f32	s11, s11, s16
24014fe6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24014fea:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014fee:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014ff2:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014ff6:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014ffa:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014ffe:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24015002:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24015006:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401500a:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401500e:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24015012:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24015016:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
2401501a:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
2401501e:	f000 babd 	b.w	2401559c <LEAF_tanh>
    if (t2 == 0.0f)
24015022:	eef5 7a40 	vcmp.f32	s15, #0.0
24015026:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24015050 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
2401502a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2401504c <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
2401502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015032:	d195      	bne.n	24014f60 <tDiodeFilter_tickEfficient+0x210>
24015034:	eddf 5a06 	vldr	s11, [pc, #24]	; 24015050 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
24015038:	eddf 7a04 	vldr	s15, [pc, #16]	; 2401504c <tDiodeFilter_tickEfficient+0x2fc>
2401503c:	e794      	b.n	24014f68 <tDiodeFilter_tickEfficient+0x218>
2401503e:	bf00      	nop
24015040:	43d20000 	.word	0x43d20000
24015044:	446c4000 	.word	0x446c4000
24015048:	42d20000 	.word	0x42d20000
2401504c:	358637bd 	.word	0x358637bd
24015050:	3f800008 	.word	0x3f800008

24015054 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
24015054:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24015058:	4b0d      	ldr	r3, [pc, #52]	; (24015090 <tDiodeFilter_setFreqFast+0x3c>)
2401505a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
2401505e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24015060:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
24015064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24015068:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401506c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
24015070:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24015074:	edd0 6a01 	vldr	s13, [r0, #4]
24015078:	ee77 7a87 	vadd.f32	s15, s15, s14
2401507c:	ed90 7a00 	vldr	s14, [r0]
24015080:	ee20 0a26 	vmul.f32	s0, s0, s13
24015084:	eea7 0a27 	vfma.f32	s0, s14, s15
24015088:	ed81 0a02 	vstr	s0, [r1, #8]
}
2401508c:	4770      	bx	lr
2401508e:	bf00      	nop
24015090:	2401d50c 	.word	0x2401d50c

24015094 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24015094:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24015098:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
2401509c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
240150a0:	eef0 0a67 	vmov.f32	s1, s15
{
240150a4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
240150a6:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
240150a8:	eee0 0a07 	vfma.f32	s1, s0, s14
240150ac:	eeb0 0a67 	vmov.f32	s0, s15
240150b0:	f020 ff86 	bl	24035fc0 <__LEAF_clip_veneer>
240150b4:	ed84 0a03 	vstr	s0, [r4, #12]
}
240150b8:	bd10      	pop	{r4, pc}
240150ba:	bf00      	nop

240150bc <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
240150bc:	b570      	push	{r4, r5, r6, lr}
240150be:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
240150c2:	698d      	ldr	r5, [r1, #24]
{
240150c4:	eef0 8a40 	vmov.f32	s17, s0
240150c8:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240150ca:	2038      	movs	r0, #56	; 0x38
240150cc:	4629      	mov	r1, r5
{
240150ce:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240150d2:	f000 fc8d 	bl	240159f0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240150d6:	eddf 7a18 	vldr	s15, [pc, #96]	; 24015138 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240150da:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
240150dc:	2301      	movs	r3, #1
    f->mempool = m;
240150de:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240150e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
240150e4:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240150e6:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
240150e8:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
240150ec:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240150f0:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
240150f4:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
240150f6:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240150fa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240150fe:	f005 ff23 	bl	2401af48 <tan>
24015102:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
24015106:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
2401510a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
2401510e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
24015112:	490a      	ldr	r1, [pc, #40]	; (2401513c <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
24015114:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
24015118:	4b09      	ldr	r3, [pc, #36]	; (24015140 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
2401511a:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
2401511e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
24015122:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
24015124:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
24015126:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
24015128:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
2401512c:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
24015130:	62a3      	str	r3, [r4, #40]	; 0x28
}
24015132:	ecbd 8b02 	vpop	{d8}
24015136:	bd70      	pop	{r4, r5, r6, pc}
24015138:	40490fdb 	.word	0x40490fdb
2401513c:	3dcccccd 	.word	0x3dcccccd
24015140:	3d23d70a 	.word	0x3d23d70a

24015144 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
24015144:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
24015146:	eddf 7a8f 	vldr	s15, [pc, #572]	; 24015384 <tLadderFilter_tick+0x240>
{
2401514a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
2401514e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24015150:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24015154:	2900      	cmp	r1, #0
24015156:	f340 8110 	ble.w	2401537a <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401515a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
2401515e:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24015162:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
24015166:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
2401516a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401516e:	ed92 7a08 	vldr	s14, [r2, #32]
24015172:	ee72 2a27 	vadd.f32	s5, s4, s15
24015176:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
2401517a:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401517e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24015182:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24015186:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2401518a:	ee25 9a28 	vmul.f32	s18, s10, s17
2401518e:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24015192:	ee62 2a87 	vmul.f32	s5, s5, s14
24015196:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401519a:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
2401519e:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
240151a0:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240151a4:	ed9f 8a78 	vldr	s16, [pc, #480]	; 24015388 <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240151a8:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
240151ac:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
240151ae:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240151b2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
240151b6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240151b8:	ee65 5aa5 	vmul.f32	s11, s11, s11
240151bc:	ee26 6a06 	vmul.f32	s12, s12, s12
240151c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
240151c4:	ee22 baa5 	vmul.f32	s22, s5, s11
240151c8:	ee26 ca22 	vmul.f32	s24, s12, s5
240151cc:	ee72 5a25 	vadd.f32	s11, s4, s11
240151d0:	ee32 6a06 	vadd.f32	s12, s4, s12
240151d4:	ee66 baa2 	vmul.f32	s23, s13, s5
240151d8:	eecb ea25 	vdiv.f32	s29, s22, s11
240151dc:	ee8c ba06 	vdiv.f32	s22, s24, s12
240151e0:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
240151e4:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240151e8:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
240151ec:	ee27 7a07 	vmul.f32	s14, s14, s14
240151f0:	ee77 eaee 	vsub.f32	s29, s15, s29
240151f4:	ee77 6acb 	vsub.f32	s13, s15, s22
240151f8:	ee62 5a87 	vmul.f32	s11, s5, s14
240151fc:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
24015200:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24015204:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
24015208:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401520c:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
24015210:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
24015214:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
24015218:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
2401521c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
24015220:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
24015224:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24015228:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
2401522c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
24015230:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
24015234:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24015238:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
2401523c:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
24015240:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24015244:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
24015248:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401524c:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
24015250:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
24015254:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
24015258:	ee73 5a2a 	vadd.f32	s11, s6, s21
2401525c:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24015260:	ee66 6a26 	vmul.f32	s13, s12, s13
24015264:	ee65 5a89 	vmul.f32	s11, s11, s18
24015268:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
2401526c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24015270:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
24015274:	ee2d 7a07 	vmul.f32	s14, s26, s14
24015278:	ee65 5a8f 	vmul.f32	s11, s11, s30
2401527c:	ee60 ea8e 	vmul.f32	s29, s1, s28
24015280:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24015284:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24015288:	eeb0 ea67 	vmov.f32	s28, s15
2401528c:	eeab eaad 	vfma.f32	s28, s23, s27
24015290:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
24015294:	eeb0 ba67 	vmov.f32	s22, s15
24015298:	eeec 5a84 	vfma.f32	s11, s25, s8
2401529c:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240152a0:	eec9 ba8e 	vdiv.f32	s23, s19, s28
240152a4:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
240152a8:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240152ac:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
240152b0:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
240152b4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240152b8:	eef0 ca48 	vmov.f32	s25, s16
240152bc:	eeab da0b 	vfma.f32	s26, s22, s22
240152c0:	eee5 caa5 	vfma.f32	s25, s11, s11
240152c4:	eef1 5acd 	vsqrt.f32	s11, s26
240152c8:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240152cc:	ee3b ba65 	vsub.f32	s22, s22, s11
240152d0:	eef0 5a40 	vmov.f32	s11, s0
240152d4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
240152d8:	eeb0 ba43 	vmov.f32	s22, s6
240152dc:	eea5 ba25 	vfma.f32	s22, s10, s11
240152e0:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
240152e4:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
240152e8:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
240152ec:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
240152f0:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240152f4:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
240152f8:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240152fc:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24015300:	ee36 6a66 	vsub.f32	s12, s12, s13
24015304:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24015308:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
2401530c:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24015310:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24015314:	ee76 6ac7 	vsub.f32	s13, s13, s14
24015318:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401531c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24015320:	ee37 7a4c 	vsub.f32	s14, s14, s24
24015324:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
24015328:	f47f af3e 	bne.w	240151a8 <tLadderFilter_tick+0x64>
2401532c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24015330:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
24015334:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
24015338:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401533c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 24015388 <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
24015340:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24015344:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24015348:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401534c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24015350:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
24015354:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24015358:	eea0 7aa0 	vfma.f32	s14, s1, s1
2401535c:	eef1 7ae5 	vsqrt.f32	s15, s11
24015360:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
24015364:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015368:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401536c:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
24015370:	ee20 0a0c 	vmul.f32	s0, s0, s24
24015374:	ecbd 8b10 	vpop	{d8-d15}
24015378:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401537a:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
2401537e:	ed9f ca03 	vldr	s24, [pc, #12]	; 2401538c <tLadderFilter_tick+0x248>
24015382:	e7db      	b.n	2401533c <tLadderFilter_tick+0x1f8>
24015384:	3c75c28f 	.word	0x3c75c28f
24015388:	3c23d70a 	.word	0x3c23d70a
2401538c:	00000000 	.word	0x00000000

24015390 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
24015390:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24015394:	4b0f      	ldr	r3, [pc, #60]	; (240153d4 <tLadderFilter_setFreqFast+0x44>)
24015396:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
2401539a:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2401539c:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
240153a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240153a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
240153a8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
240153ac:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240153b0:	edd0 6a01 	vldr	s13, [r0, #4]
240153b4:	ee77 7a87 	vadd.f32	s15, s15, s14
240153b8:	ed90 7a00 	vldr	s14, [r0]
240153bc:	ee20 0a26 	vmul.f32	s0, s0, s13
240153c0:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
240153c4:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240153c8:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
240153cc:	edc1 7a06 	vstr	s15, [r1, #24]
}
240153d0:	4770      	bx	lr
240153d2:	bf00      	nop
240153d4:	2401d50c 	.word	0x2401d50c

240153d8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
240153d8:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
240153da:	6804      	ldr	r4, [r0, #0]
{
240153dc:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
240153e0:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
240153e4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240153f4 <tLadderFilter_setQ+0x1c>
240153e8:	f020 fdea 	bl	24035fc0 <__LEAF_clip_veneer>
240153ec:	ed84 0a05 	vstr	s0, [r4, #20]
}
240153f0:	bd10      	pop	{r4, pc}
240153f2:	bf00      	nop
240153f4:	3e4ccccd 	.word	0x3e4ccccd

240153f8 <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
240153f8:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
240153fc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 24015418 <fastertanf+0x20>
24015400:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2401541c <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24015404:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
24015408:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
2401540c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24015410:	ee20 0a27 	vmul.f32	s0, s0, s15
24015414:	4770      	bx	lr
24015416:	bf00      	nop
24015418:	3e502de0 	.word	0x3e502de0
2401541c:	3ea295ea 	.word	0x3ea295ea

24015420 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24015420:	ee10 2a10 	vmov	r2, s0
24015424:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
24015428:	4b0d      	ldr	r3, [pc, #52]	; (24015460 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401542a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
2401542e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24015432:	ee60 7a27 	vmul.f32	s15, s0, s15
24015436:	ee00 3a10 	vmov	s0, r3
2401543a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401543e:	eea0 7a67 	vfms.f32	s14, s0, s15
24015442:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
24015446:	ee10 3a10 	vmov	r3, s0
2401544a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
2401544e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24015452:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24015456:	336e      	adds	r3, #110	; 0x6e
}
24015458:	ee00 3a10 	vmov	s0, r3
2401545c:	4770      	bx	lr
2401545e:	bf00      	nop
24015460:	5f3759df 	.word	0x5f3759df

24015464 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24015464:	ee10 3a10 	vmov	r3, s0
24015468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401546c:	ee00 3a10 	vmov	s0, r3
}
24015470:	4770      	bx	lr
24015472:	bf00      	nop

24015474 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
24015474:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015478:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240154a4 <fasterexpf+0x30>
2401547c:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24015480:	ee27 0aa7 	vmul.f32	s0, s15, s15
24015484:	ee20 0a00 	vmul.f32	s0, s0, s0
24015488:	ee20 0a00 	vmul.f32	s0, s0, s0
2401548c:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24015490:	ee20 0a00 	vmul.f32	s0, s0, s0
24015494:	ee20 0a00 	vmul.f32	s0, s0, s0
24015498:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
2401549c:	ee20 0a00 	vmul.f32	s0, s0, s0
240154a0:	4770      	bx	lr
240154a2:	bf00      	nop
240154a4:	3b800000 	.word	0x3b800000

240154a8 <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240154a8:	ee10 3a10 	vmov	r3, s0
240154ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240154d0 <fastPowf+0x28>
240154b0:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
240154b4:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
240154b8:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240154bc:	330b      	adds	r3, #11
240154be:	ee07 3a90 	vmov	s15, r3
240154c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240154c6:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240154ca:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
240154ce:	4770      	bx	lr
240154d0:	4e7de250 	.word	0x4e7de250

240154d4 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
240154d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24015554 <LEAF_shaper+0x80>
240154d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
240154dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154e0:	d406      	bmi.n	240154f0 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
240154e2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 24015558 <LEAF_shaper+0x84>
240154e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
240154ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154ee:	dd02      	ble.n	240154f6 <LEAF_shaper+0x22>
240154f0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2401555c <LEAF_shaper+0x88>
}
240154f4:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
240154f6:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
240154fa:	ed9f 5a19 	vldr	s10, [pc, #100]	; 24015560 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
240154fe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
24015502:	ed9f 4a18 	vldr	s8, [pc, #96]	; 24015564 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24015506:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
2401550a:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401550e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
24015512:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24015516:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401551a:	eddf 5a13 	vldr	s11, [pc, #76]	; 24015568 <LEAF_shaper+0x94>
2401551e:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
24015522:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24015526:	ee66 4aa6 	vmul.f32	s9, s13, s13
2401552a:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
2401552e:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24015532:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24015536:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401553a:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
2401553e:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24015542:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24015546:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
2401554a:	ee20 0a80 	vmul.f32	s0, s1, s0
2401554e:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
24015552:	4770      	bx	lr
24015554:	bfb504f3 	.word	0xbfb504f3
24015558:	3fb504f3 	.word	0x3fb504f3
2401555c:	00000000 	.word	0x00000000
24015560:	3c800000 	.word	0x3c800000
24015564:	3f272f05 	.word	0x3f272f05
24015568:	3d4ccccd 	.word	0x3d4ccccd

2401556c <LEAF_round>:
    rnd = fabsf(rnd);
2401556c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24015570:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401558c <LEAF_round+0x20>
24015574:	eef4 0ae7 	vcmpe.f32	s1, s15
24015578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401557c:	d905      	bls.n	2401558a <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
2401557e:	eec0 7a20 	vdiv.f32	s15, s0, s1
24015582:	feb8 0a67 	vrinta.f32	s0, s15
24015586:	ee20 0a20 	vmul.f32	s0, s0, s1
}
2401558a:	4770      	bx	lr
2401558c:	33d6bf95 	.word	0x33d6bf95

24015590 <LEAF_bitwise_xor>:
    return unholy.f;
24015590:	ee10 3a10 	vmov	r3, s0
24015594:	4043      	eors	r3, r0
24015596:	ee00 3a10 	vmov	s0, r3
}
2401559a:	4770      	bx	lr

2401559c <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
2401559c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240155a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
240155a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240155a8:	d418      	bmi.n	240155dc <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
240155aa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240155ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
240155b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240155b6:	dd02      	ble.n	240155be <LEAF_tanh+0x22>
        return 1.0f;
240155b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
240155bc:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240155be:	ee60 6a00 	vmul.f32	s13, s0, s0
240155c2:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240155c6:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240155ca:	ee36 7aa7 	vadd.f32	s14, s13, s15
240155ce:	eee6 7a86 	vfma.f32	s15, s13, s12
240155d2:	ee27 7a00 	vmul.f32	s14, s14, s0
240155d6:	ee87 0a27 	vdiv.f32	s0, s14, s15
240155da:	4770      	bx	lr
        return -1.0f;
240155dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240155e0:	4770      	bx	lr
240155e2:	bf00      	nop

240155e4 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
240155e4:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
240155e6:	1e4b      	subs	r3, r1, #1
240155e8:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
240155ec:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
240155ee:	ee07 3a90 	vmov	s15, r3
240155f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240155f6:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
240155fa:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
240155fe:	dd16      	ble.n	2401562e <LEAF_generate_exp+0x4a>
24015600:	4604      	mov	r4, r0
24015602:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24015606:	eeb0 8a60 	vmov.f32	s16, s1
2401560a:	eef0 8a40 	vmov.f32	s17, s0
2401560e:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24015612:	eef0 0a48 	vmov.f32	s1, s16
24015616:	eeb0 0a68 	vmov.f32	s0, s17
2401561a:	f005 fe69 	bl	2401b2f0 <powf>
2401561e:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24015622:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24015626:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2401562a:	42a5      	cmp	r5, r4
2401562c:	d1f1      	bne.n	24015612 <LEAF_generate_exp+0x2e>
    }
}
2401562e:	ecbd 8b04 	vpop	{d8-d9}
24015632:	bd38      	pop	{r3, r4, r5, pc}

24015634 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
24015634:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24015636:	ee31 1a40 	vsub.f32	s2, s2, s0
{
2401563a:	460d      	mov	r5, r1
2401563c:	4604      	mov	r4, r0
2401563e:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24015642:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
24015646:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2401564a:	ee81 0a29 	vdiv.f32	s0, s2, s19
2401564e:	f005 fd2b 	bl	2401b0a8 <logf>
    float increment = 1.0 / (float)(size-1);
24015652:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
24015654:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
24015656:	ee07 3a90 	vmov	s15, r3
2401565a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401565e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015662:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
24015666:	dd19      	ble.n	2401569c <LEAF_generate_table_skew_non_sym+0x68>
24015668:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 240156a4 <LEAF_generate_table_skew_non_sym+0x70>
2401566c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
24015670:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 240156a8 <LEAF_generate_table_skew_non_sym+0x74>
24015674:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
24015678:	eeb0 0a48 	vmov.f32	s0, s16
2401567c:	f005 fd14 	bl	2401b0a8 <logf>
24015680:	ee20 0a09 	vmul.f32	s0, s0, s18
24015684:	f005 fc94 	bl	2401afb0 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
24015688:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
2401568c:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
24015690:	eee9 7a80 	vfma.f32	s15, s19, s0
24015694:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24015698:	42a5      	cmp	r5, r4
2401569a:	d1ed      	bne.n	24015678 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
2401569c:	ecbd 8b06 	vpop	{d8-d10}
240156a0:	bd38      	pop	{r3, r4, r5, pc}
240156a2:	bf00      	nop
240156a4:	bfb8aa3b 	.word	0xbfb8aa3b
240156a8:	00000000 	.word	0x00000000

240156ac <LEAF_generate_atodb>:


void LEAF_generate_atodb(float* buffer, int size, float min, float max)
{
240156ac:	b538      	push	{r3, r4, r5, lr}
    float increment = (max-min) / (float)(size-1);
240156ae:	1e4b      	subs	r3, r1, #1
240156b0:	ee70 0ac0 	vsub.f32	s1, s1, s0
    float x = min;
    for (int i = 0; i < size; i++)
240156b4:	2900      	cmp	r1, #0
    float increment = (max-min) / (float)(size-1);
240156b6:	ee07 3a90 	vmov	s15, r3
240156ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240156be:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (max-min) / (float)(size-1);
240156c2:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
240156c6:	dd12      	ble.n	240156ee <LEAF_generate_atodb+0x42>
240156c8:	4604      	mov	r4, r0
240156ca:	eb00 0581 	add.w	r5, r0, r1, lsl #2
240156ce:	eeb0 8a40 	vmov.f32	s16, s0
}


float atodb(float a)
{
    return 20.0f*log10f(a);
240156d2:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
240156d6:	eeb0 0a48 	vmov.f32	s0, s16
240156da:	f005 ffe7 	bl	2401b6ac <log10f>
240156de:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
240156e2:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
240156e6:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
240156ea:	42a5      	cmp	r5, r4
240156ec:	d1f3      	bne.n	240156d6 <LEAF_generate_atodb+0x2a>
}
240156ee:	ecbd 8b04 	vpop	{d8-d9}
240156f2:	bd38      	pop	{r3, r4, r5, pc}

240156f4 <LEAF_generate_dbtoa>:
{
240156f4:	b538      	push	{r3, r4, r5, lr}
    float increment = (maxDb-minDb) / (float)(size-1);
240156f6:	1e4b      	subs	r3, r1, #1
240156f8:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
240156fc:	2900      	cmp	r1, #0
    float increment = (maxDb-minDb) / (float)(size-1);
240156fe:	ee07 3a90 	vmov	s15, r3
24015702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24015706:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (maxDb-minDb) / (float)(size-1);
2401570a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
2401570e:	dd14      	ble.n	2401573a <LEAF_generate_dbtoa+0x46>
24015710:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

float dbtoa(float db)
{
    return powf(10.0f, db * 0.05f);
24015712:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24015740 <LEAF_generate_dbtoa+0x4c>
24015716:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24015744 <LEAF_generate_dbtoa+0x50>
2401571a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401571e:	eeb0 8a40 	vmov.f32	s16, s0
24015722:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24015726:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
2401572a:	ee20 0a09 	vmul.f32	s0, s0, s18
2401572e:	f005 fc3f 	bl	2401afb0 <expf>
        buffer[i] = dbtoa(x);
24015732:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24015736:	42a5      	cmp	r5, r4
24015738:	d1f3      	bne.n	24015722 <LEAF_generate_dbtoa+0x2e>
}
2401573a:	ecbd 8b04 	vpop	{d8-d9}
2401573e:	bd38      	pop	{r3, r4, r5, pc}
24015740:	3d4ccccd 	.word	0x3d4ccccd
24015744:	40135d8e 	.word	0x40135d8e

24015748 <LEAF_generate_mtof>:
{
24015748:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
2401574a:	1e4b      	subs	r3, r1, #1
2401574c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24015750:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
24015752:	ee07 3a90 	vmov	s15, r3
24015756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
2401575a:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
2401575e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
24015762:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24015766:	dd29      	ble.n	240157bc <LEAF_generate_mtof+0x74>
    float x = 0.0f;
24015768:	ed9f 9a19 	vldr	s18, [pc, #100]	; 240157d0 <LEAF_generate_mtof+0x88>
2401576c:	eef0 9a40 	vmov.f32	s19, s0
24015770:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24015772:	eddf 8a18 	vldr	s17, [pc, #96]	; 240157d4 <LEAF_generate_mtof+0x8c>
24015776:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
2401577a:	ed9f 8a17 	vldr	s16, [pc, #92]	; 240157d8 <LEAF_generate_mtof+0x90>
2401577e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24015782:	ed9f ca16 	vldr	s24, [pc, #88]	; 240157dc <LEAF_generate_mtof+0x94>
24015786:	eddf ba16 	vldr	s23, [pc, #88]	; 240157e0 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
2401578a:	eeb0 0a69 	vmov.f32	s0, s19
2401578e:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
24015792:	e006      	b.n	240157a2 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24015794:	eeb4 0ac8 	vcmpe.f32	s0, s16
24015798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401579c:	dd11      	ble.n	240157c2 <LEAF_generate_mtof+0x7a>
2401579e:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
240157a2:	eeb4 0ae8 	vcmpe.f32	s0, s17
240157a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240157aa:	d8f3      	bhi.n	24015794 <LEAF_generate_mtof+0x4c>
240157ac:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
240157b0:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
240157b4:	42a5      	cmp	r5, r4
        x += increment;
240157b6:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
240157ba:	d1e6      	bne.n	2401578a <LEAF_generate_mtof+0x42>
}
240157bc:	ecbd 8b0a 	vpop	{d8-d12}
240157c0:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
240157c2:	ee20 0a0c 	vmul.f32	s0, s0, s24
240157c6:	f005 fbf3 	bl	2401afb0 <expf>
240157ca:	ee60 7a2b 	vmul.f32	s15, s0, s23
240157ce:	e7ef      	b.n	240157b0 <LEAF_generate_mtof+0x68>
240157d0:	00000000 	.word	0x00000000
240157d4:	c4bb8000 	.word	0xc4bb8000
240157d8:	44bb6000 	.word	0x44bb6000
240157dc:	3d6c9820 	.word	0x3d6c9820
240157e0:	4102d013 	.word	0x4102d013

240157e4 <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
240157e4:	ee71 1ac0 	vsub.f32	s3, s3, s0
240157e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
240157ec:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
240157f0:	ee71 1aa0 	vadd.f32	s3, s3, s1
240157f4:	eef0 7a60 	vmov.f32	s15, s1
240157f8:	ee30 7ac1 	vsub.f32	s14, s1, s2
240157fc:	ee71 1ac1 	vsub.f32	s3, s3, s2
24015800:	eed6 7a26 	vfnms.f32	s15, s12, s13
24015804:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
24015808:	ee70 7a27 	vadd.f32	s15, s0, s15
2401580c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24015810:	eee7 7a02 	vfma.f32	s15, s14, s4
24015814:	ee67 7a82 	vmul.f32	s15, s15, s4
24015818:	eee6 7a26 	vfma.f32	s15, s12, s13
}
2401581c:	eee7 0a82 	vfma.f32	s1, s15, s4
24015820:	eeb0 0a60 	vmov.f32	s0, s1
24015824:	4770      	bx	lr
24015826:	bf00      	nop

24015828 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24015828:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
2401582c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2401584c <LEAF_interpolation_linear+0x24>
24015830:	fe81 1a67 	vminnm.f32	s2, s2, s15
24015834:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
24015838:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
2401583c:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24015840:	eee7 0a80 	vfma.f32	s1, s15, s0
24015844:	eeb0 0a60 	vmov.f32	s0, s1
24015848:	4770      	bx	lr
2401584a:	bf00      	nop
2401584c:	00000000 	.word	0x00000000

24015850 <mtof>:
    if (f <= -1500.0f) return(0);
24015850:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24015890 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24015854:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24015894 <mtof+0x44>
24015858:	e006      	b.n	24015868 <mtof+0x18>
2401585a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015862:	dd09      	ble.n	24015878 <mtof+0x28>
24015864:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24015868:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015870:	d8f3      	bhi.n	2401585a <mtof+0xa>
24015872:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24015898 <mtof+0x48>
}
24015876:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24015878:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401589c <mtof+0x4c>
{
2401587c:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
2401587e:	ee20 0a27 	vmul.f32	s0, s0, s15
24015882:	f005 fb95 	bl	2401afb0 <expf>
24015886:	eddf 7a06 	vldr	s15, [pc, #24]	; 240158a0 <mtof+0x50>
2401588a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2401588e:	bd08      	pop	{r3, pc}
24015890:	c4bb8000 	.word	0xc4bb8000
24015894:	44bb6000 	.word	0x44bb6000
24015898:	00000000 	.word	0x00000000
2401589c:	3d6c9820 	.word	0x3d6c9820
240158a0:	4102d013 	.word	0x4102d013

240158a4 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
240158a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240158a8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240158dc <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
240158ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240158e0 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
240158b0:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
240158b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
240158b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
240158bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
240158c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
240158c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
240158c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
240158cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
240158d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
240158d4:	ee27 0a87 	vmul.f32	s0, s15, s14
240158d8:	4770      	bx	lr
240158da:	bf00      	nop
240158dc:	396c9820 	.word	0x396c9820
240158e0:	4102d013 	.word	0x4102d013

240158e4 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240158e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240158e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158ec:	dd0b      	ble.n	24015906 <ftom+0x22>
240158ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401590c <ftom+0x28>
{
240158f2:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240158f4:	ee20 0a27 	vmul.f32	s0, s0, s15
240158f8:	f005 fbd6 	bl	2401b0a8 <logf>
240158fc:	eddf 7a04 	vldr	s15, [pc, #16]	; 24015910 <ftom+0x2c>
24015900:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24015904:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015906:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015914 <ftom+0x30>
}
2401590a:	4770      	bx	lr
2401590c:	3dfa7ed2 	.word	0x3dfa7ed2
24015910:	418a7fac 	.word	0x418a7fac
24015914:	c4bb8000 	.word	0xc4bb8000

24015918 <fasteratodb>:
{
24015918:	b500      	push	{lr}
2401591a:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
2401591c:	eeb0 0ac0 	vabs.f32	s0, s0
24015920:	a801      	add	r0, sp, #4
24015922:	f005 f871 	bl	2401aa08 <frexpf>
    Y += -4.11852516267426f;
24015926:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401595c <fasteratodb+0x44>
2401592a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24015960 <fasteratodb+0x48>
    Y += 6.02197014179219f;
2401592e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24015964 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
24015932:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
24015936:	eddd 7a01 	vldr	s15, [sp, #4]
2401593a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 24015968 <fasteratodb+0x50>
2401593e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
24015942:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 2401596c <fasteratodb+0x54>
    Y += E;
24015946:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
2401594a:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
2401594e:	eee0 7a07 	vfma.f32	s15, s0, s14
}
24015952:	ee27 0a86 	vmul.f32	s0, s15, s12
24015956:	b003      	add	sp, #12
24015958:	f85d fb04 	ldr.w	pc, [sp], #4
2401595c:	3f9da1a8 	.word	0x3f9da1a8
24015960:	c083caf5 	.word	0xc083caf5
24015964:	40c0b3fb 	.word	0x40c0b3fb
24015968:	404892e0 	.word	0x404892e0
2401596c:	40c0a8c2 	.word	0x40c0a8c2

24015970 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24015970:	eddf 7a02 	vldr	s15, [pc, #8]	; 2401597c <fastdbtoa+0xc>
24015974:	ee20 0a27 	vmul.f32	s0, s0, s15
24015978:	f005 bb1a 	b.w	2401afb0 <expf>
2401597c:	3debc8e3 	.word	0x3debc8e3

24015980 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24015980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015984:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240159b0 <fasterdbtoa+0x30>
24015988:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
2401598c:	ee27 0aa7 	vmul.f32	s0, s15, s15
24015990:	ee20 0a00 	vmul.f32	s0, s0, s0
24015994:	ee20 0a00 	vmul.f32	s0, s0, s0
24015998:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
2401599c:	ee20 0a00 	vmul.f32	s0, s0, s0
240159a0:	ee20 0a00 	vmul.f32	s0, s0, s0
240159a4:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
240159a8:	ee20 0a00 	vmul.f32	s0, s0, s0
240159ac:	4770      	bx	lr
240159ae:	bf00      	nop
240159b0:	39ebc8e3 	.word	0x39ebc8e3

240159b4 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
240159b4:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
240159b8:	4770      	bx	lr
240159ba:	bf00      	nop

240159bc <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
240159bc:	fe80 0ac0 	vminnm.f32	s0, s1, s0
240159c0:	4770      	bx	lr
240159c2:	bf00      	nop

240159c4 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240159c4:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
240159c6:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240159c8:	2510      	movs	r5, #16
    pool->usize  = 0;
240159ca:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240159cc:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240159ce:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
240159d0:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
240159d2:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240159d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240159d8:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
240159da:	440b      	add	r3, r1
240159dc:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
240159de:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
240159e2:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
240159e4:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
240159e8:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240159ea:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
240159ec:	6183      	str	r3, [r0, #24]
}
240159ee:	4770      	bx	lr

240159f0 <mpool_alloc>:
{
240159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
240159f2:	684a      	ldr	r2, [r1, #4]
{
240159f4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
240159f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
240159f8:	3301      	adds	r3, #1
240159fa:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
240159fc:	694b      	ldr	r3, [r1, #20]
240159fe:	2b00      	cmp	r3, #0
24015a00:	d04a      	beq.n	24015a98 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24015a02:	1dc4      	adds	r4, r0, #7
24015a04:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24015a08:	e002      	b.n	24015a10 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24015a0a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24015a0c:	2b00      	cmp	r3, #0
24015a0e:	d043      	beq.n	24015a98 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24015a10:	68da      	ldr	r2, [r3, #12]
24015a12:	42a2      	cmp	r2, r4
24015a14:	d3f9      	bcc.n	24015a0a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24015a16:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24015a18:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24015a1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
24015a1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24015a20:	4281      	cmp	r1, r0
24015a22:	d246      	bcs.n	24015ab2 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015a24:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24015a28:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24015a2a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015a2c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24015a2e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24015a30:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24015a32:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24015a36:	4429      	add	r1, r5
24015a38:	5111      	str	r1, [r2, r4]
    node->size = size;
24015a3a:	60e8      	str	r0, [r5, #12]
    node->next = next;
24015a3c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24015a40:	f8dc 2014 	ldr.w	r2, [ip, #20]
24015a44:	429a      	cmp	r2, r3
        pool->head = new_node;
24015a46:	bf08      	it	eq
24015a48:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24015a4c:	685a      	ldr	r2, [r3, #4]
24015a4e:	b10a      	cbz	r2, 24015a54 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24015a50:	6899      	ldr	r1, [r3, #8]
24015a52:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24015a54:	689a      	ldr	r2, [r3, #8]
24015a56:	b10a      	cbz	r2, 24015a5c <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24015a58:	6859      	ldr	r1, [r3, #4]
24015a5a:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24015a5c:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015a5e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24015a60:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015a64:	f8dc 1004 	ldr.w	r1, [ip, #4]
24015a68:	f8dc 200c 	ldr.w	r2, [ip, #12]
24015a6c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24015a6e:	4422      	add	r2, r4
24015a70:	4402      	add	r2, r0
24015a72:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24015a76:	694a      	ldr	r2, [r1, #20]
24015a78:	42aa      	cmp	r2, r5
24015a7a:	dd0b      	ble.n	24015a94 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24015a7c:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24015a7e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24015a80:	b14a      	cbz	r2, 24015a96 <mpool_alloc+0xa6>
24015a82:	1e41      	subs	r1, r0, #1
24015a84:	460a      	mov	r2, r1
24015a86:	f801 5f01 	strb.w	r5, [r1, #1]!
24015a8a:	68dc      	ldr	r4, [r3, #12]
24015a8c:	3202      	adds	r2, #2
24015a8e:	1a12      	subs	r2, r2, r0
24015a90:	4294      	cmp	r4, r2
24015a92:	d8f7      	bhi.n	24015a84 <mpool_alloc+0x94>
    return node_to_alloc->pool;
24015a94:	6818      	ldr	r0, [r3, #0]
}
24015a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24015a98:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24015a9c:	1a9b      	subs	r3, r3, r2
24015a9e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015aa0:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24015aa4:	bf8c      	ite	hi
24015aa6:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015aa8:	2100      	movls	r1, #0
24015aaa:	f004 ff03 	bl	2401a8b4 <LEAF_internalErrorCallback>
        return NULL;
24015aae:	2000      	movs	r0, #0
}
24015ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24015ab2:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24015ab4:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24015ab6:	e7c3      	b.n	24015a40 <mpool_alloc+0x50>

24015ab8 <mpool_calloc>:
{
24015ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24015aba:	684a      	ldr	r2, [r1, #4]
{
24015abc:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24015abe:	6c93      	ldr	r3, [r2, #72]	; 0x48
24015ac0:	3301      	adds	r3, #1
24015ac2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24015ac4:	694b      	ldr	r3, [r1, #20]
24015ac6:	2b00      	cmp	r3, #0
24015ac8:	d044      	beq.n	24015b54 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24015aca:	1dc4      	adds	r4, r0, #7
24015acc:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24015ad0:	e002      	b.n	24015ad8 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24015ad2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24015ad4:	2b00      	cmp	r3, #0
24015ad6:	d03d      	beq.n	24015b54 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24015ad8:	68da      	ldr	r2, [r3, #12]
24015ada:	42a2      	cmp	r2, r4
24015adc:	d3f9      	bcc.n	24015ad2 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24015ade:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24015ae0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24015ae2:	f8dc 1004 	ldr.w	r1, [ip, #4]
24015ae6:	6b49      	ldr	r1, [r1, #52]	; 0x34
24015ae8:	4281      	cmp	r1, r0
24015aea:	d240      	bcs.n	24015b6e <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015aec:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24015af0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24015af2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015af4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24015af6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24015af8:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24015afa:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24015afe:	4429      	add	r1, r5
24015b00:	5111      	str	r1, [r2, r4]
    node->size = size;
24015b02:	60e8      	str	r0, [r5, #12]
    node->next = next;
24015b04:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24015b08:	f8dc 2014 	ldr.w	r2, [ip, #20]
24015b0c:	429a      	cmp	r2, r3
        pool->head = new_node;
24015b0e:	bf08      	it	eq
24015b10:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24015b14:	685a      	ldr	r2, [r3, #4]
24015b16:	b10a      	cbz	r2, 24015b1c <mpool_calloc+0x64>
        node->next->prev = node->prev;
24015b18:	6899      	ldr	r1, [r3, #8]
24015b1a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24015b1c:	689a      	ldr	r2, [r3, #8]
24015b1e:	b10a      	cbz	r2, 24015b24 <mpool_calloc+0x6c>
        node->prev->next = node->next;
24015b20:	6859      	ldr	r1, [r3, #4]
24015b22:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24015b24:	2200      	movs	r2, #0
    node->prev = NULL;
24015b26:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015b2a:	f8dc 1004 	ldr.w	r1, [ip, #4]
24015b2e:	f8dc 000c 	ldr.w	r0, [ip, #12]
24015b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
24015b34:	4401      	add	r1, r0
24015b36:	68d8      	ldr	r0, [r3, #12]
24015b38:	4401      	add	r1, r0
24015b3a:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24015b3e:	68d9      	ldr	r1, [r3, #12]
24015b40:	b131      	cbz	r1, 24015b50 <mpool_calloc+0x98>
24015b42:	4610      	mov	r0, r2
24015b44:	6819      	ldr	r1, [r3, #0]
24015b46:	5488      	strb	r0, [r1, r2]
24015b48:	3201      	adds	r2, #1
24015b4a:	68d9      	ldr	r1, [r3, #12]
24015b4c:	4291      	cmp	r1, r2
24015b4e:	d8f9      	bhi.n	24015b44 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24015b50:	6818      	ldr	r0, [r3, #0]
}
24015b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24015b54:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24015b58:	1a9b      	subs	r3, r3, r2
24015b5a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015b5c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24015b60:	bf8c      	ite	hi
24015b62:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015b64:	2100      	movls	r1, #0
24015b66:	f004 fea5 	bl	2401a8b4 <LEAF_internalErrorCallback>
        return NULL;
24015b6a:	2000      	movs	r0, #0
}
24015b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24015b6e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24015b70:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24015b72:	e7c9      	b.n	24015b08 <mpool_calloc+0x50>

24015b74 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24015b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24015b78:	699d      	ldr	r5, [r3, #24]
{
24015b7a:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
24015b7c:	6868      	ldr	r0, [r5, #4]
24015b7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
24015b80:	3301      	adds	r3, #1
24015b82:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
24015b84:	696b      	ldr	r3, [r5, #20]
24015b86:	b91b      	cbnz	r3, 24015b90 <tMempool_init+0x1c>
24015b88:	e063      	b.n	24015c52 <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
24015b8a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24015b8c:	2b00      	cmp	r3, #0
24015b8e:	d060      	beq.n	24015c52 <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
24015b90:	68dc      	ldr	r4, [r3, #12]
24015b92:	2c17      	cmp	r4, #23
24015b94:	d9f9      	bls.n	24015b8a <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
24015b96:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
24015b98:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
24015b9c:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
24015b9e:	6868      	ldr	r0, [r5, #4]
24015ba0:	6b40      	ldr	r0, [r0, #52]	; 0x34
24015ba2:	4287      	cmp	r7, r0
24015ba4:	d952      	bls.n	24015c4c <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015ba6:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24015baa:	f100 0c18 	add.w	ip, r0, #24
24015bae:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
24015bb2:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015bb4:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
24015bb8:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24015bbc:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
24015bbe:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
24015bc2:	4420      	add	r0, r4
24015bc4:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
24015bc8:	60e7      	str	r7, [r4, #12]
    node->next = next;
24015bca:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
24015bce:	6968      	ldr	r0, [r5, #20]
24015bd0:	4283      	cmp	r3, r0
        pool->head = new_node;
24015bd2:	bf08      	it	eq
24015bd4:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
24015bd6:	6858      	ldr	r0, [r3, #4]
24015bd8:	b108      	cbz	r0, 24015bde <tMempool_init+0x6a>
        node->next->prev = node->prev;
24015bda:	689c      	ldr	r4, [r3, #8]
24015bdc:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
24015bde:	6898      	ldr	r0, [r3, #8]
24015be0:	b108      	cbz	r0, 24015be6 <tMempool_init+0x72>
        node->prev->next = node->next;
24015be2:	685c      	ldr	r4, [r3, #4]
24015be4:	6044      	str	r4, [r0, #4]
    node->next = NULL;
24015be6:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015be8:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
24015bea:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015bee:	f8d5 c004 	ldr.w	ip, [r5, #4]
24015bf2:	68e8      	ldr	r0, [r5, #12]
24015bf4:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
24015bf8:	4430      	add	r0, r6
24015bfa:	4404      	add	r4, r0
24015bfc:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
24015bfe:	f8dc 0014 	ldr.w	r0, [ip, #20]
24015c02:	42b8      	cmp	r0, r7
24015c04:	dd0c      	ble.n	24015c20 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24015c06:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24015c08:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24015c0a:	b154      	cbz	r4, 24015c22 <tMempool_init+0xae>
24015c0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
24015c10:	4664      	mov	r4, ip
24015c12:	f80c 7f01 	strb.w	r7, [ip, #1]!
24015c16:	68de      	ldr	r6, [r3, #12]
24015c18:	3402      	adds	r4, #2
24015c1a:	1a24      	subs	r4, r4, r0
24015c1c:	42a6      	cmp	r6, r4
24015c1e:	d8f7      	bhi.n	24015c10 <tMempool_init+0x9c>
    return node_to_alloc->pool;
24015c20:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24015c22:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24015c26:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
24015c28:	686b      	ldr	r3, [r5, #4]
24015c2a:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24015c2c:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
24015c2e:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24015c30:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
24015c32:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
24015c34:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24015c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24015c3a:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
24015c3c:	440b      	add	r3, r1
    node->prev = prev;
24015c3e:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
24015c42:	600b      	str	r3, [r1, #0]
    node->size = size;
24015c44:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24015c46:	6141      	str	r1, [r0, #20]
}
24015c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
24015c4c:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
24015c4e:	685c      	ldr	r4, [r3, #4]
24015c50:	e7bd      	b.n	24015bce <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
24015c52:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015c56:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
24015c58:	1a52      	subs	r2, r2, r1
24015c5a:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015c5c:	bf94      	ite	ls
24015c5e:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24015c60:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24015c62:	f004 fe27 	bl	2401a8b4 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24015c66:	2300      	movs	r3, #0
24015c68:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
24015c6c:	686a      	ldr	r2, [r5, #4]
24015c6e:	605a      	str	r2, [r3, #4]
24015c70:	deff      	udf	#255	; 0xff
24015c72:	bf00      	nop

24015c74 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
24015c74:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015c76:	698c      	ldr	r4, [r1, #24]
{
24015c78:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015c7a:	2018      	movs	r0, #24
24015c7c:	4621      	mov	r1, r4
24015c7e:	f7ff feb7 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24015c82:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015c84:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
24015c86:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24015c8a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015c8c:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015c8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24015ca8 <tCycle_init+0x34>
    c->phase    =  0;
24015c92:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015c96:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24015c9a:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
24015ca0:	edc0 7a04 	vstr	s15, [r0, #16]
}
24015ca4:	bd38      	pop	{r3, r4, r5, pc}
24015ca6:	bf00      	nop
24015ca8:	4f800000 	.word	0x4f800000

24015cac <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24015cac:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
24015cae:	4910      	ldr	r1, [pc, #64]	; (24015cf0 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24015cb0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24015cf4 <tCycle_tick+0x48>
    c->phase += c->inc;
24015cb4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24015cb8:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
24015cba:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24015cbc:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015cbe:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
24015cc2:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015cc4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
24015cc8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24015ccc:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24015cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24015cd2:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
24015cd6:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24015cd8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24015cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
24015ce0:	ed92 7a00 	vldr	s14, [r2]
24015ce4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24015ce8:	eea7 0a27 	vfma.f32	s0, s14, s15
24015cec:	4770      	bx	lr
24015cee:	bf00      	nop
24015cf0:	24024b8c 	.word	0x24024b8c
24015cf4:	35000004 	.word	0x35000004

24015cf8 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
24015cf8:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015cfa:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24015cfe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015d02:	ee20 0a27 	vmul.f32	s0, s0, s15
24015d06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015d0a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015d0e:	4770      	bx	lr

24015d10 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24015d10:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24015d14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24015d30 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
24015d18:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24015d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015d1e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015d22:	ee20 0a07 	vmul.f32	s0, s0, s14
24015d26:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015d2a:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015d2e:	4770      	bx	lr
24015d30:	4f800000 	.word	0x4f800000

24015d34 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24015d34:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24015d36:	6995      	ldr	r5, [r2, #24]
{
24015d38:	4606      	mov	r6, r0
24015d3a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24015d3c:	2018      	movs	r0, #24
24015d3e:	4629      	mov	r1, r5
24015d40:	f7ff fe56 	bl	240159f0 <mpool_alloc>
24015d44:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24015d46:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24015d48:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24015d4a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24015d4c:	691b      	ldr	r3, [r3, #16]
24015d4e:	6143      	str	r3, [r0, #20]
}
24015d50:	bd70      	pop	{r4, r5, r6, pc}
24015d52:	bf00      	nop

24015d54 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
24015d54:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24015d56:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
24015d58:	6963      	ldr	r3, [r4, #20]
24015d5a:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24015d5c:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
24015d5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24015d62:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24015d66:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
24015d68:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24015d6c:	d12f      	bne.n	24015dce <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015d6e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24015dd4 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015d72:	eddf 6a19 	vldr	s13, [pc, #100]	; 24015dd8 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015d76:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015d7a:	ed94 5a03 	vldr	s10, [r4, #12]
24015d7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015d82:	edd4 3a02 	vldr	s7, [r4, #8]
24015d86:	eddf 4a15 	vldr	s9, [pc, #84]	; 24015ddc <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015d8a:	eddf 5a15 	vldr	s11, [pc, #84]	; 24015de0 <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015d8e:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015d92:	ed9f 7a14 	vldr	s14, [pc, #80]	; 24015de4 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015d96:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015d9a:	ed94 4a04 	vldr	s8, [r4, #16]
24015d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
24015da2:	eddf 4a11 	vldr	s9, [pc, #68]	; 24015de8 <tNoise_tick+0x94>
24015da6:	ed9f 5a11 	vldr	s10, [pc, #68]	; 24015dec <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24015daa:	eddf 5a11 	vldr	s11, [pc, #68]	; 24015df0 <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015dae:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015db2:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24015db6:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015dba:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015dbe:	eea7 0a85 	vfma.f32	s0, s15, s10
24015dc2:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24015dc6:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
24015dca:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24015dce:	eeb0 0a67 	vmov.f32	s0, s15
24015dd2:	bd10      	pop	{r4, pc}
24015dd4:	3dcad8a1 	.word	0x3dcad8a1
24015dd8:	3e97d0ff 	.word	0x3e97d0ff
24015ddc:	3f7f65fe 	.word	0x3f7f65fe
24015de0:	3f76872b 	.word	0x3f76872b
24015de4:	3f86be97 	.word	0x3f86be97
24015de8:	3f11eb85 	.word	0x3f11eb85
24015dec:	3e3d3c36 	.word	0x3e3d3c36
24015df0:	3d4ccccd 	.word	0x3d4ccccd

24015df4 <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
24015df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24015df6:	698e      	ldr	r6, [r1, #24]
{
24015df8:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24015dfa:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24015dfe:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24015e00:	4631      	mov	r1, r6
24015e02:	f7ff fdf5 	bl	240159f0 <mpool_alloc>
24015e06:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24015e08:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
24015e0a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24015e0c:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
24015e0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24015e12:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24015e78 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24015e16:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
24015e18:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24015e1c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
24015e20:	eddf 7a16 	vldr	s15, [pc, #88]	; 24015e7c <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
24015e24:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24015e28:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
24015e2a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
24015e2e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
24015e30:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015e32:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24015e34:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24015e38:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24015e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24015e40:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
24015e42:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015e44:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24015e46:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015e4a:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
24015e4e:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
24015e50:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
24015e52:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
24015e54:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
24015e56:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24015e58:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24015e5c:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
24015e5e:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
24015e60:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015e64:	f004 fdc8 	bl	2401a9f8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24015e68:	4629      	mov	r1, r5
24015e6a:	f104 0040 	add.w	r0, r4, #64	; 0x40
24015e6e:	2220      	movs	r2, #32
}
24015e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24015e74:	f004 bdc0 	b.w	2401a9f8 <memset>
24015e78:	3b14f209 	.word	0x3b14f209
24015e7c:	43dc0000 	.word	0x43dc0000

24015e80 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
24015e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24015e84:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
24015e88:	6804      	ldr	r4, [r0, #0]
{
24015e8a:	b083      	sub	sp, #12
24015e8c:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
24015e8e:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
24015e92:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015e96:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
24015e9a:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
24015e9e:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
24015ea2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
24015eaa:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24015eae:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015eb2:	f340 80f9 	ble.w	240160a8 <tMBPulse_tick+0x228>
24015eb6:	f8d4 901c 	ldr.w	r9, [r4, #28]
24015eba:	f1b9 0f00 	cmp.w	r9, #0
24015ebe:	f340 80bd 	ble.w	2401603c <tMBPulse_tick+0x1bc>
24015ec2:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24015ec6:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015eca:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
24015ece:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015ed2:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015ed6:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
24015eda:	eebd 8ae7 	vcvt.s32.f32	s16, s15
24015ede:	ee37 7a87 	vadd.f32	s14, s15, s14
24015ee2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24015ee6:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
24015eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
24015eee:	2f00      	cmp	r7, #0
24015ef0:	f040 80ef 	bne.w	240160d2 <tMBPulse_tick+0x252>
        if (sw > 0)
24015ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ef8:	f340 81a4 	ble.w	24016244 <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
24015efc:	eef4 aac8 	vcmpe.f32	s21, s16
24015f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f04:	f240 8162 	bls.w	240161cc <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24015f08:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
24015f0a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24015f0e:	eeb4 8ae8 	vcmpe.f32	s16, s17
24015f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f16:	f280 8276 	bge.w	24016406 <tMBPulse_tick+0x586>
24015f1a:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24015f1c:	1d33      	adds	r3, r6, #4
24015f1e:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
24015f22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015f26:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015f2a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
24015f2e:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015f36:	2b00      	cmp	r3, #0
24015f38:	f000 8229 	beq.w	2401638e <tMBPulse_tick+0x50e>
24015f3c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24015f40:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015f44:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015f48:	f04f 0c00 	mov.w	ip, #0
24015f4c:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
24015f50:	4db9      	ldr	r5, [pc, #740]	; (24016238 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24015f52:	eba8 030c 	sub.w	r3, r8, ip
24015f56:	b29b      	uxth	r3, r3
24015f58:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
24015f5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015f64:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015f68:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24015f6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24015f70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
24015f74:	b289      	uxth	r1, r1
24015f76:	f8bd a006 	ldrh.w	sl, [sp, #6]
24015f7a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015f7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015f80:	b280      	uxth	r0, r0
24015f82:	fa1f fa8a 	uxth.w	sl, sl
24015f86:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24015f8a:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
24015f8e:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015f92:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015f94:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
24015f98:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24015f9c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015fa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015fa4:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
24015fa8:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
24015fac:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015fb0:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015fb4:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015fb8:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015fba:	edda 6a01 	vldr	s13, [sl, #4]
24015fbe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015fc2:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015fc4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015fc8:	eee6 7a26 	vfma.f32	s15, s12, s13
24015fcc:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015fd0:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015fd4:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
24015fd8:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015fda:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015fde:	f0c0 80e8 	bcc.w	240161b2 <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
24015fe2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015fe6:	f10c 0c01 	add.w	ip, ip, #1
24015fea:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
24015fee:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015ff0:	4594      	cmp	ip, r2
			c->numBLEPs--;
24015ff2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015ff6:	dbac      	blt.n	24015f52 <tMBPulse_tick+0xd2>
24015ff8:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
24015ffc:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
24016000:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
24016002:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
24016006:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
2401600a:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
2401600e:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
24016012:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
24016016:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
2401601a:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
2401601e:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
24016022:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
24016026:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
2401602a:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
2401602e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
24016032:	b003      	add	sp, #12
24016034:	ecbd 8b0c 	vpop	{d8-d13}
24016038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
2401603c:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24016040:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
24016044:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
24016048:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
2401604c:	eefd 8ae7 	vcvt.s32.f32	s17, s15
24016050:	ee37 7a27 	vadd.f32	s14, s14, s15
24016054:	eef8 8ae8 	vcvt.f32.s32	s17, s17
24016058:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
2401605c:	f040 8457 	bne.w	2401690e <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
24016060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24016064:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
24016066:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
2401606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
2401606e:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
24016072:	f340 80a6 	ble.w	240161c2 <tMBPulse_tick+0x342>
        if (!k) {
24016076:	2f00      	cmp	r7, #0
24016078:	f040 818e 	bne.w	24016398 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
2401607c:	eef4 aacb 	vcmpe.f32	s21, s22
24016080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016084:	f240 8310 	bls.w	240166a8 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
24016088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401608c:	eeb4 bae7 	vcmpe.f32	s22, s15
24016090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016094:	f280 81f1 	bge.w	2401647a <tMBPulse_tick+0x5fa>
            if (p >= b) {
24016098:	eef4 aac8 	vcmpe.f32	s21, s16
2401609c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160a0:	f240 81e1 	bls.w	24016466 <tMBPulse_tick+0x5e6>
240160a4:	464f      	mov	r7, r9
240160a6:	e739      	b.n	24015f1c <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
240160a8:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240160ac:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
240160b0:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
240160b4:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
240160b8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
240160bc:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
240160c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
240160c4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
240160c8:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
240160cc:	2f00      	cmp	r7, #0
240160ce:	f43f af11 	beq.w	24015ef4 <tMBPulse_tick+0x74>
        if (sw > 0)
240160d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160d6:	f340 8129 	ble.w	2401632c <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
240160da:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240160de:	eeb4 8ae8 	vcmpe.f32	s16, s17
240160e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160e6:	f6ff af19 	blt.w	24015f1c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
240160ea:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
240160ee:	eddf 7a54 	vldr	s15, [pc, #336]	; 24016240 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
240160f2:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
240160f6:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240160f8:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
240160fc:	eeb0 0a4b 	vmov.f32	s0, s22
24016100:	eea8 0a09 	vfma.f32	s0, s16, s18
24016104:	f005 f89c 	bl	2401b240 <lrintf>
	r -= (float)i;
24016108:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401610c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016110:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016118:	3301      	adds	r3, #1
            if (!k && p >= b) {
2401611a:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401611e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016122:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
24016126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
2401612a:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401612e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016132:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016136:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
2401613a:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401613e:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016142:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24016146:	f103 0301 	add.w	r3, r3, #1
2401614a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401614e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
24016152:	f200 8306 	bhi.w	24016762 <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
24016156:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
2401615a:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
2401615c:	eeb0 0a4b 	vmov.f32	s0, s22
24016160:	eea8 0a89 	vfma.f32	s0, s17, s18
24016164:	f005 f86c 	bl	2401b240 <lrintf>
	r -= (float)i;
24016168:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401616c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
24016170:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
24016174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016178:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401617c:	3301      	adds	r3, #1
	r -= (float)i;
2401617e:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016186:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401618a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401618e:	4a2b      	ldr	r2, [pc, #172]	; (2401623c <tMBPulse_tick+0x3bc>)
                k = 1;
24016190:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016192:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016196:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
2401619a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401619e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161a2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
240161a6:	443b      	add	r3, r7
240161a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240161ac:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
240161b0:	e6b4      	b.n	24015f1c <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240161b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
240161b6:	f10c 0c01 	add.w	ip, ip, #1
240161ba:	4563      	cmp	r3, ip
240161bc:	f73f aec9 	bgt.w	24015f52 <tMBPulse_tick+0xd2>
240161c0:	e71a      	b.n	24015ff8 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
240161c2:	f100 81be 	bmi.w	24016542 <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
240161c6:	eeb0 8a68 	vmov.f32	s16, s17
240161ca:	e6a7      	b.n	24015f1c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
240161cc:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
240161d0:	eddf 8a1b 	vldr	s17, [pc, #108]	; 24016240 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
240161d4:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
240161d8:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
240161dc:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
240161e0:	eeb0 0a6b 	vmov.f32	s0, s23
240161e4:	eeab 0a28 	vfma.f32	s0, s22, s17
240161e8:	f005 f82a 	bl	2401b240 <lrintf>
	r -= (float)i;
240161ec:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240161f0:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240161f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240161f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240161fc:	4a0f      	ldr	r2, [pc, #60]	; (2401623c <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240161fe:	3301      	adds	r3, #1
                x = -0.5f;
24016200:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016208:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
2401620c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016210:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016214:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016218:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
2401621c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016220:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016224:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
24016228:	3301      	adds	r3, #1
2401622a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401622e:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
24016232:	2301      	movs	r3, #1
}
24016234:	e669      	b.n	24015f0a <tMBPulse_tick+0x8a>
24016236:	bf00      	nop
24016238:	2402b310 	.word	0x2402b310
2401623c:	bf800000 	.word	0xbf800000
24016240:	42800000 	.word	0x42800000
            if (p < 0.0f) {
24016244:	eeb5 8a40 	vcmp.f32	s16, #0.0
24016248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401624c:	f57f ae66 	bpl.w	24015f1c <tMBPulse_tick+0x9c>
24016250:	eef5 7a40 	vcmp.f32	s15, #0.0
24016254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016258:	f57f ae60 	bpl.w	24015f1c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
2401625c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
24016260:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 24016240 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
24016264:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
24016268:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
2401626c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24016270:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
24016274:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
24016278:	eeac 0a28 	vfma.f32	s0, s24, s17
2401627c:	f004 ffe0 	bl	2401b240 <lrintf>
	r -= (float)i;
24016280:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016284:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016288:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401628c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016290:	4ad0      	ldr	r2, [pc, #832]	; (240165d4 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016292:	3301      	adds	r3, #1
            if (k && p < b) {
24016294:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401629c:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
240162a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240162a4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162a8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240162ac:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240162b0:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
240162b4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240162b8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240162bc:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240162c0:	f103 0301 	add.w	r3, r3, #1
240162c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240162c8:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
240162cc:	f340 8323 	ble.w	24016916 <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
240162d0:	ee38 ca6a 	vsub.f32	s24, s16, s21
240162d4:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240162d6:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
240162da:	eeb0 0a6b 	vmov.f32	s0, s23
240162de:	eea8 0a8c 	vfma.f32	s0, s17, s24
240162e2:	f004 ffad 	bl	2401b240 <lrintf>
	r -= (float)i;
240162e6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162ea:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240162ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240162f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162f6:	3301      	adds	r3, #1
                x = 0.5f;
240162f8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016300:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24016304:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016308:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401630c:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016310:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
24016314:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016318:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401631c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
24016320:	3301      	adds	r3, #1
24016322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016326:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
2401632a:	e5f7      	b.n	24015f1c <tMBPulse_tick+0x9c>
        else if (sw < 0)
2401632c:	f57f adf6 	bpl.w	24015f1c <tMBPulse_tick+0x9c>
            if (p < b) {
24016330:	eef4 aac8 	vcmpe.f32	s21, s16
24016334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016338:	f300 80d0 	bgt.w	240164dc <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
2401633c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016344:	f57f adea 	bpl.w	24015f1c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
24016348:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
2401634c:	eddf 8aa2 	vldr	s17, [pc, #648]	; 240165d8 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
24016350:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
24016354:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
24016356:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401635a:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
2401635e:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
24016362:	eea9 0a28 	vfma.f32	s0, s18, s17
24016366:	f004 ff6b 	bl	2401b240 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401636a:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
2401636e:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
24016372:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016376:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016378:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401637c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016384:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016388:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
2401638c:	e6fd      	b.n	2401618a <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
2401638e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
24016392:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
24016396:	e631      	b.n	24015ffc <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
24016398:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2401639c:	eeb4 bae8 	vcmpe.f32	s22, s17
240163a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240163a4:	f280 811a 	bge.w	240165dc <tMBPulse_tick+0x75c>
240163a8:	eddf ba8b 	vldr	s23, [pc, #556]	; 240165d8 <tMBPulse_tick+0x758>
240163ac:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
240163b0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240163b4:	eea8 0a2b 	vfma.f32	s0, s16, s23
240163b8:	f004 ff42 	bl	2401b240 <lrintf>
	r -= (float)i;
240163bc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163c0:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240163c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240163c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240163cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163d0:	3301      	adds	r3, #1
                x = 0.5f;
240163d2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240163da:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240163de:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163e2:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240163e6:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240163ea:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
240163ee:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240163f2:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240163f6:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240163fa:	3301      	adds	r3, #1
240163fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016400:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
24016404:	e648      	b.n	24016098 <tMBPulse_tick+0x218>
                p -= 1.0f;
24016406:	eddf 7a74 	vldr	s15, [pc, #464]	; 240165d8 <tMBPulse_tick+0x758>
2401640a:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
2401640e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24016412:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24016414:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
24016418:	eea9 0a08 	vfma.f32	s0, s18, s16
2401641c:	f004 ff10 	bl	2401b240 <lrintf>
	r -= (float)i;
24016420:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016424:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016428:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401642c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016430:	3301      	adds	r3, #1
                x = 0.5f;
24016432:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401643a:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
2401643e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016442:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016446:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401644a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
2401644e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016452:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016456:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
2401645a:	3301      	adds	r3, #1
2401645c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016460:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
24016464:	e55a      	b.n	24015f1c <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
24016466:	eddf 7a5c 	vldr	s15, [pc, #368]	; 240165d8 <tMBPulse_tick+0x758>
2401646a:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
2401646e:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24016472:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24016474:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
24016478:	e670      	b.n	2401615c <tMBPulse_tick+0x2dc>
2401647a:	eddf ba57 	vldr	s23, [pc, #348]	; 240165d8 <tMBPulse_tick+0x758>
2401647e:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24016482:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24016486:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
2401648a:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
2401648e:	eea8 0aab 	vfma.f32	s0, s17, s23
24016492:	f004 fed5 	bl	2401b240 <lrintf>
	r -= (float)i;
24016496:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401649a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401649e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240164a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164a6:	3301      	adds	r3, #1
                    x = 0.5f;
240164a8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240164b0:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240164b4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164b8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240164bc:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240164c0:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
240164c4:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240164c8:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240164cc:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240164d0:	3301      	adds	r3, #1
240164d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240164d6:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
240164da:	e5dd      	b.n	24016098 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
240164dc:	eddf 8a3e 	vldr	s17, [pc, #248]	; 240165d8 <tMBPulse_tick+0x758>
240164e0:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
240164e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
240164e8:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240164ea:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
240164ee:	eeab 0a28 	vfma.f32	s0, s22, s17
240164f2:	f004 fea5 	bl	2401b240 <lrintf>
	r -= (float)i;
240164f6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240164fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016506:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401650a:	3301      	adds	r3, #1
                x = 0.5f;
2401650c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016514:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24016518:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401651c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016520:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016524:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
24016528:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401652c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016530:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24016534:	3301      	adds	r3, #1
24016536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401653a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
2401653e:	2700      	movs	r7, #0
}
24016540:	e6fc      	b.n	2401633c <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
24016542:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
24016546:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
2401654a:	2f00      	cmp	r7, #0
2401654c:	f040 80e5 	bne.w	2401671a <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
24016550:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24016554:	eddf ba20 	vldr	s23, [pc, #128]	; 240165d8 <tMBPulse_tick+0x758>
24016558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401655c:	f100 813c 	bmi.w	240167d8 <tMBPulse_tick+0x958>
24016560:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
24016564:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
24016568:	2701      	movs	r7, #1
2401656a:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
2401656e:	eeb0 0a68 	vmov.f32	s0, s17
24016572:	eea8 0a6b 	vfms.f32	s0, s16, s23
24016576:	f004 fe63 	bl	2401b240 <lrintf>
	r -= (float)i;
2401657a:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
2401657e:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016582:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401658a:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401658e:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016592:	4a10      	ldr	r2, [pc, #64]	; (240165d4 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016594:	443b      	add	r3, r7
24016596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401659a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401659e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240165a2:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165a6:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
240165aa:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240165ae:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240165b2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240165b6:	443b      	add	r3, r7
240165b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240165bc:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
240165c0:	eef4 aacd 	vcmpe.f32	s21, s26
240165c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240165c8:	f300 80d0 	bgt.w	2401676c <tMBPulse_tick+0x8ec>
240165cc:	eeb0 8a4d 	vmov.f32	s16, s26
240165d0:	e4a4      	b.n	24015f1c <tMBPulse_tick+0x9c>
240165d2:	bf00      	nop
240165d4:	bf800000 	.word	0xbf800000
240165d8:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
240165dc:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240165e0:	ed5f ba03 	vldr	s23, [pc, #-12]	; 240165d8 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
240165e4:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
240165e8:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240165ec:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
240165f0:	eeb0 0a6c 	vmov.f32	s0, s25
240165f4:	eeac 0a2b 	vfma.f32	s0, s24, s23
240165f8:	f004 fe22 	bl	2401b240 <lrintf>
	r -= (float)i;
240165fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016600:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016604:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401660c:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
2401660e:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016616:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
2401661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
2401661e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016622:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016626:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401662a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
2401662e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016632:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016636:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
2401663a:	f103 0301 	add.w	r3, r3, #1
2401663e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016642:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
24016646:	f200 815e 	bhi.w	24016906 <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
2401664a:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
2401664e:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
24016650:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
24016654:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
24016658:	eea8 0aab 	vfma.f32	s0, s17, s23
2401665c:	f004 fdf0 	bl	2401b240 <lrintf>
	r -= (float)i;
24016660:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016664:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016668:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401666c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016670:	4aad      	ldr	r2, [pc, #692]	; (24016928 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016672:	3301      	adds	r3, #1
	r -= (float)i;
24016674:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401667c:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016680:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016684:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016688:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
2401668c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016690:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016694:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24016698:	3301      	adds	r3, #1
2401669a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401669e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
240166a2:	f8d5 8000 	ldr.w	r8, [r5]
240166a6:	e683      	b.n	240163b0 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
240166a8:	eddf baa0 	vldr	s23, [pc, #640]	; 2401692c <tMBPulse_tick+0xaac>
240166ac:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
240166b0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240166b4:	ee69 ba2b 	vmul.f32	s23, s18, s23
240166b8:	eeac 0a2b 	vfma.f32	s0, s24, s23
240166bc:	f004 fdc0 	bl	2401b240 <lrintf>
	r -= (float)i;
240166c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240166c4:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240166c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240166cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240166d0:	4a95      	ldr	r2, [pc, #596]	; (24016928 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240166d2:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
240166d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240166d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240166dc:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
240166e0:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
240166e4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240166e8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240166ec:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166f0:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
240166f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166f8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240166fc:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016700:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
24016704:	f103 0301 	add.w	r3, r3, #1
24016708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401670c:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
24016710:	f8d5 8000 	ldr.w	r8, [r5]
24016714:	f6ff ae4c 	blt.w	240163b0 <tMBPulse_tick+0x530>
24016718:	e6b3      	b.n	24016482 <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
2401671a:	eef4 aacb 	vcmpe.f32	s21, s22
2401671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016722:	f300 80ba 	bgt.w	2401689a <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
24016726:	eeb5 bac0 	vcmpe.f32	s22, #0.0
2401672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401672e:	f57f af47 	bpl.w	240165c0 <tMBPulse_tick+0x740>
24016732:	eddf ba7e 	vldr	s23, [pc, #504]	; 2401692c <tMBPulse_tick+0xaac>
24016736:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
2401673a:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
2401673e:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
24016740:	eeb0 0a48 	vmov.f32	s0, s16
24016744:	eea8 0aab 	vfma.f32	s0, s17, s23
24016748:	f004 fd7a 	bl	2401b240 <lrintf>
	r -= (float)i;
2401674c:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
24016750:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016754:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401675c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016760:	e715      	b.n	2401658e <tMBPulse_tick+0x70e>
                x = 0.5f;
24016762:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
24016766:	2700      	movs	r7, #0
24016768:	f7ff bbd8 	b.w	24015f1c <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
2401676c:	eddf 7a6f 	vldr	s15, [pc, #444]	; 2401692c <tMBPulse_tick+0xaac>
24016770:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
24016774:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24016778:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
2401677a:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
2401677e:	464f      	mov	r7, r9
}
24016780:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
24016784:	eea9 0a28 	vfma.f32	s0, s18, s17
24016788:	f004 fd5a 	bl	2401b240 <lrintf>
	r -= (float)i;
2401678c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016790:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016794:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401679c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240167a0:	3301      	adds	r3, #1
                x = 0.5f;
240167a2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240167a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240167aa:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
240167ae:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240167b2:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240167b6:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240167ba:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
240167be:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240167c2:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240167c6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
240167ca:	3301      	adds	r3, #1
240167cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240167d0:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
240167d4:	f7ff bba2 	b.w	24015f1c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
240167d8:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
240167dc:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
240167e0:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
240167e4:	eeb0 0a6c 	vmov.f32	s0, s25
240167e8:	eea8 0aab 	vfma.f32	s0, s17, s23
240167ec:	f004 fd28 	bl	2401b240 <lrintf>
	r -= (float)i;
240167f0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240167f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240167f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240167fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016800:	4a49      	ldr	r2, [pc, #292]	; (24016928 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016802:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
24016804:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401680c:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
24016810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24016814:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016818:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401681c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016820:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24016824:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016828:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401682c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
24016830:	f103 0301 	add.w	r3, r3, #1
24016834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016838:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
2401683c:	dd70      	ble.n	24016920 <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
2401683e:	ee78 8a6a 	vsub.f32	s17, s16, s21
24016842:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
24016844:	eeb0 0a6c 	vmov.f32	s0, s25
24016848:	ee78 8a8b 	vadd.f32	s17, s17, s22
2401684c:	eea8 0aab 	vfma.f32	s0, s17, s23
24016850:	f004 fcf6 	bl	2401b240 <lrintf>
	r -= (float)i;
24016854:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016858:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401685c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016864:	3301      	adds	r3, #1
	r -= (float)i;
24016866:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401686a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401686e:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016872:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24016876:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401687a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
2401687e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016882:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016886:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
2401688a:	3301      	adds	r3, #1
2401688c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016890:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
24016894:	f8d5 8000 	ldr.w	r8, [r5]
24016898:	e664      	b.n	24016564 <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
2401689a:	eddf ba24 	vldr	s23, [pc, #144]	; 2401692c <tMBPulse_tick+0xaac>
2401689e:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
240168a2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240168a6:	ee69 ba2b 	vmul.f32	s23, s18, s23
240168aa:	eeac 0aab 	vfma.f32	s0, s25, s23
240168ae:	f004 fcc7 	bl	2401b240 <lrintf>
	r -= (float)i;
240168b2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240168ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240168be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168c2:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
240168c4:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240168cc:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
240168d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240168d4:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168d8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240168dc:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240168e0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
240168e4:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240168e8:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240168ec:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
240168f0:	f103 0301 	add.w	r3, r3, #1
240168f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240168f8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
240168fc:	f8d5 8000 	ldr.w	r8, [r5]
24016900:	f57f ae30 	bpl.w	24016564 <tMBPulse_tick+0x6e4>
24016904:	e719      	b.n	2401673a <tMBPulse_tick+0x8ba>
                    x = 0.5f;
24016906:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401690a:	f7ff bbc5 	b.w	24016098 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
2401690e:	eeb0 8a68 	vmov.f32	s16, s17
24016912:	f7ff baea 	b.w	24015eea <tMBPulse_tick+0x6a>
                x = -0.5f;
24016916:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
2401691a:	2701      	movs	r7, #1
2401691c:	f7ff bafe 	b.w	24015f1c <tMBPulse_tick+0x9c>
                    x = -0.5f;
24016920:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
24016924:	2701      	movs	r7, #1
24016926:	e64b      	b.n	240165c0 <tMBPulse_tick+0x740>
24016928:	bf800000 	.word	0xbf800000
2401692c:	42800000 	.word	0x42800000

24016930 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
24016930:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24016932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016936:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
2401693a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401693e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24016942:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016946:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
2401694a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
2401694e:	4770      	bx	lr

24016950 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
24016950:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
24016954:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
24016956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
2401695a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
2401695e:	ee70 7a27 	vadd.f32	s15, s0, s15
24016962:	ee67 7a87 	vmul.f32	s15, s15, s14
24016966:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2401696a:	4770      	bx	lr

2401696c <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
2401696c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401696e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24016972:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24016976:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
2401697a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401697e:	eef1 7a67 	vneg.f32	s15, s15
24016982:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24016986:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401698e:	eef4 6ac7 	vcmpe.f32	s13, s14
24016992:	bfcc      	ite	gt
24016994:	2201      	movgt	r2, #1
24016996:	2200      	movle	r2, #0
24016998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401699c:	f002 0201 	and.w	r2, r2, #1
240169a0:	bf88      	it	hi
240169a2:	2200      	movhi	r2, #0
240169a4:	b122      	cbz	r2, 240169b0 <tMBPulse_sync+0x44>
240169a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
240169aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240169ae:	da04      	bge.n	240169ba <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
240169b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240169c8 <tMBPulse_sync+0x5c>
240169b4:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
240169b8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
240169ba:	ee37 7a66 	vsub.f32	s14, s14, s13
240169be:	ee27 7a06 	vmul.f32	s14, s14, s12
240169c2:	ed83 7a05 	vstr	s14, [r3, #20]
}
240169c6:	4770      	bx	lr
240169c8:	00000000 	.word	0x00000000

240169cc <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
240169cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240169ce:	698e      	ldr	r6, [r1, #24]
{
240169d0:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
240169d2:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
240169d6:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
240169d8:	4631      	mov	r1, r6
240169da:	f7ff f809 	bl	240159f0 <mpool_alloc>
240169de:	6038      	str	r0, [r7, #0]
    c->mempool = m;
240169e0:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
240169e2:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
240169e4:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
240169e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
240169ea:	ed9f 6a18 	vldr	s12, [pc, #96]	; 24016a4c <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
240169ee:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
240169f0:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
240169f4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
240169f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 24016a50 <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
240169fc:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24016a00:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
24016a02:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
24016a06:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
24016a08:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24016a0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
24016a0e:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016a10:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
24016a14:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24016a16:	4b0f      	ldr	r3, [pc, #60]	; (24016a54 <tMBTriangle_init+0x88>)
    c->softsync = 0;
24016a18:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
24016a1a:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
24016a1c:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016a1e:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24016a20:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016a22:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24016a24:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
24016a26:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016a2a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24016a2e:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
24016a32:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016a36:	306c      	adds	r0, #108	; 0x6c
24016a38:	f003 ffde 	bl	2401a9f8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24016a3c:	4629      	mov	r1, r5
24016a3e:	f104 0044 	add.w	r0, r4, #68	; 0x44
24016a42:	2220      	movs	r2, #32
}
24016a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24016a48:	f003 bfd6 	b.w	2401a9f8 <memset>
24016a4c:	3b14f209 	.word	0x3b14f209
24016a50:	43dc0000 	.word	0x43dc0000
24016a54:	11c01200 	.word	0x11c01200

24016a58 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
24016a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24016a5c:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
24016a60:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
24016a62:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
24016a66:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
24016a6a:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
24016a6c:	ed94 7a03 	vldr	s14, [r4, #12]
{
24016a70:	4607      	mov	r7, r0
    sync = c->sync;
24016a72:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
24016a76:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
24016a7a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016a7e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
24016a82:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
24016a86:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
24016a8a:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
24016a8e:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
24016a92:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24016a94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
24016a96:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
24016a9e:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
24016aa2:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016aa6:	f340 8181 	ble.w	24016dac <tMBTriangle_tick+0x354>
24016aaa:	f8d4 901c 	ldr.w	r9, [r4, #28]
24016aae:	f1b9 0f00 	cmp.w	r9, #0
24016ab2:	f340 8138 	ble.w	24016d26 <tMBTriangle_tick+0x2ce>
24016ab6:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24016aba:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016abe:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
24016ac2:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016ac6:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24016aca:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
24016ace:	eebd 8aeb 	vcvt.s32.f32	s16, s23
24016ad2:	ee76 6aab 	vadd.f32	s13, s13, s23
24016ad6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24016ada:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
24016ade:	2e00      	cmp	r6, #0
24016ae0:	f040 8177 	bne.w	24016dd2 <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
24016ae4:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
24016ae8:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
24016aec:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
24016af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24016af4:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
24016af8:	f340 8252 	ble.w	24016fa0 <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
24016afc:	eeb4 8ae9 	vcmpe.f32	s16, s19
24016b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016b04:	f280 820c 	bge.w	24016f20 <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24016b08:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
24016b0a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24016b0e:	eeb4 8ac9 	vcmpe.f32	s16, s18
24016b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016b16:	f280 837b 	bge.w	24017210 <tMBTriangle_tick+0x7b8>
24016b1a:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24016b1c:	1d2b      	adds	r3, r5, #4
24016b1e:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
24016b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016b26:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24016b2a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
24016b2e:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016b32:	f89d 300d 	ldrb.w	r3, [sp, #13]
24016b36:	2b00      	cmp	r3, #0
24016b38:	f000 80d3 	beq.w	24016ce2 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24016b3c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016b40:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016b44:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016b46:	48ea      	ldr	r0, [pc, #936]	; (24016ef0 <tMBTriangle_tick+0x498>)
24016b48:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016b4c:	4fe9      	ldr	r7, [pc, #932]	; (24016ef4 <tMBTriangle_tick+0x49c>)
24016b4e:	e053      	b.n	24016bf8 <tMBTriangle_tick+0x1a0>
24016b50:	f8bd e00e 	ldrh.w	lr, [sp, #14]
24016b54:	f8bd 900e 	ldrh.w	r9, [sp, #14]
24016b58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24016b5c:	fa1f fe8e 	uxth.w	lr, lr
24016b60:	f8bd 800e 	ldrh.w	r8, [sp, #14]
24016b64:	fa1f f989 	uxth.w	r9, r9
24016b68:	b29b      	uxth	r3, r3
24016b6a:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
24016b6e:	fa1f f888 	uxth.w	r8, r8
24016b72:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24016b76:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24016b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24016b7e:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24016b82:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24016b86:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24016b8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016b8e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
24016b92:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
24016b96:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
24016b9a:	ed99 7a00 	vldr	s14, [r9]
24016b9e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
24016ba2:	edd3 5a01 	vldr	s11, [r3, #4]
24016ba6:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24016baa:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016bae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016bb2:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016bb6:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016bb8:	fa1f fe8e 	uxth.w	lr, lr
24016bbc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24016bc0:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016bc4:	eee6 7a87 	vfma.f32	s15, s13, s14
24016bc8:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016bcc:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24016bd0:	f108 0840 	add.w	r8, r8, #64	; 0x40
24016bd4:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016bd8:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24016bdc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24016be0:	459e      	cmp	lr, r3
24016be2:	d304      	bcc.n	24016bee <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24016be4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24016be8:	3b01      	subs	r3, #1
24016bea:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016bee:	f89d 300d 	ldrb.w	r3, [sp, #13]
24016bf2:	3201      	adds	r2, #1
24016bf4:	4293      	cmp	r3, r2
24016bf6:	dd74      	ble.n	24016ce2 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016bf8:	ebac 0302 	sub.w	r3, ip, r2
24016bfc:	b29b      	uxth	r3, r3
24016bfe:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
24016c02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24016c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016c0a:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24016c0e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24016c12:	b29b      	uxth	r3, r3
24016c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24016c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016c1c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
24016c20:	eef4 7ac6 	vcmpe.f32	s15, s12
24016c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c28:	d492      	bmi.n	24016b50 <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016c2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24016c2e:	f8bd e00e 	ldrh.w	lr, [sp, #14]
24016c32:	b29b      	uxth	r3, r3
24016c34:	f8bd 800e 	ldrh.w	r8, [sp, #14]
24016c38:	f8bd 900e 	ldrh.w	r9, [sp, #14]
24016c3c:	fa1f fe8e 	uxth.w	lr, lr
24016c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24016c44:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
24016c48:	fa1f f989 	uxth.w	r9, r9
24016c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016c50:	fa1f f888 	uxth.w	r8, r8
24016c54:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
24016c58:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24016c5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24016c60:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24016c64:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24016c68:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24016c6c:	b29b      	uxth	r3, r3
24016c6e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
24016c72:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24016c76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24016c7a:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
24016c7e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
24016c82:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
24016c86:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
24016c8a:	edd8 6a01 	vldr	s13, [r8, #4]
24016c8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
24016c92:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016c96:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016c9a:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016c9e:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24016ca2:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016ca6:	ee76 6ae4 	vsub.f32	s13, s13, s9
24016caa:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24016cae:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016cb2:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24016cb6:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24016cba:	eee5 7a87 	vfma.f32	s15, s11, s14
24016cbe:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016cc2:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24016cc6:	3340      	adds	r3, #64	; 0x40
24016cc8:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24016ccc:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
24016cd0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24016cd4:	459e      	cmp	lr, r3
24016cd6:	d285      	bcs.n	24016be4 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016cd8:	f89d 300d 	ldrb.w	r3, [sp, #13]
24016cdc:	3201      	adds	r2, #1
24016cde:	4293      	cmp	r3, r2
24016ce0:	dc8a      	bgt.n	24016bf8 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
24016ce2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24016ce6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24016cea:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
24016cee:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24016cf0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
24016cf4:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
24016cf8:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
24016cfc:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
24016d00:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
24016d04:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
24016d08:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
24016d0c:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
24016d10:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
24016d14:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
24016d18:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
24016d1c:	b005      	add	sp, #20
24016d1e:	ecbd 8b10 	vpop	{d8-d15}
24016d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
24016d26:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24016d2a:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24016d2e:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
24016d32:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
24016d36:	eefd caeb 	vcvt.s32.f32	s25, s23
24016d3a:	ee36 9aab 	vadd.f32	s18, s13, s23
24016d3e:	eef8 caec 	vcvt.f32.s32	s25, s25
24016d42:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24016d46:	f040 863f 	bne.w	240179c8 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
24016d4a:	eef5 bac0 	vcmpe.f32	s23, #0.0
24016d4e:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
24016d50:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
24016d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24016d58:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
24016d5c:	f340 80ce 	ble.w	24016efc <tMBTriangle_tick+0x4a4>
        if (!k) {
24016d60:	2e00      	cmp	r6, #0
24016d62:	f040 81e1 	bne.w	24017128 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
24016d66:	eef4 9aee 	vcmpe.f32	s19, s29
24016d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016d6e:	f240 8449 	bls.w	24017604 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
24016d72:	eef4 eae8 	vcmpe.f32	s29, s17
24016d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016d7a:	f280 82bf 	bge.w	240172fc <tMBTriangle_tick+0x8a4>
24016d7e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 24016ef8 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
24016d82:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016d86:	ee2c ca27 	vmul.f32	s24, s24, s15
24016d8a:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
24016d8e:	eea8 0a0c 	vfma.f32	s0, s16, s24
24016d92:	f004 fa55 	bl	2401b240 <lrintf>
	r -= (float)i;
24016d96:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
24016d9a:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
24016d9e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24016da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016da6:	eed8 7a0c 	vfnms.f32	s15, s16, s24
24016daa:	e203      	b.n	240171b4 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
24016dac:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24016db0:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24016db4:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
24016db8:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
24016dbc:	eebd 8aeb 	vcvt.s32.f32	s16, s23
24016dc0:	ee7b 6aa6 	vadd.f32	s13, s23, s13
24016dc4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24016dc8:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
24016dcc:	2e00      	cmp	r6, #0
24016dce:	f43f ae89 	beq.w	24016ae4 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
24016dd2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
24016dd6:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
24016dda:	ee79 7ac8 	vsub.f32	s15, s19, s16
24016dde:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
24016de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24016de6:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
24016dea:	f340 815a 	ble.w	240170a2 <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
24016dee:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24016df2:	eeb4 8acb 	vcmpe.f32	s16, s22
24016df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016dfa:	f6ff ae8f 	blt.w	24016b1c <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
24016dfe:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
24016e02:	eddf 7a3d 	vldr	s15, [pc, #244]	; 24016ef8 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
24016e06:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
24016e0a:	683e      	ldr	r6, [r7, #0]
24016e0c:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
24016e10:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24016e14:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
24016e18:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
24016e1c:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
24016e20:	f004 fa0e 	bl	2401b240 <lrintf>
	r -= (float)i;
24016e24:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e28:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016e2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
24016e30:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
24016e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e38:	3301      	adds	r3, #1
24016e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
24016e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24016e42:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e46:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016e4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016e4e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24016e52:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016e56:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24016e5a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016e5e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016e62:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016e66:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24016e6a:	f103 0301 	add.w	r3, r3, #1
24016e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016e72:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
24016e76:	f200 843e 	bhi.w	240176f6 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
24016e7a:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
24016e7e:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24016e80:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
24016e84:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
24016e88:	ee77 7ac8 	vsub.f32	s15, s15, s16
24016e8c:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
24016e90:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016e94:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
24016e98:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24016e9c:	f004 f9d0 	bl	2401b240 <lrintf>
	r -= (float)i;
24016ea0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ea4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016ea8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
24016eac:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
24016eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016eb4:	3301      	adds	r3, #1
24016eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016eba:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ebe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016ec2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016ec6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24016eca:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016ece:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016ed2:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016ed6:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016eda:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016ede:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
24016ee2:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016ee4:	4433      	add	r3, r6
24016ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016eea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24016eee:	e615      	b.n	24016b1c <tMBTriangle_tick+0xc4>
24016ef0:	24026c0c 	.word	0x24026c0c
24016ef4:	2402b310 	.word	0x2402b310
24016ef8:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
24016efc:	f100 828a 	bmi.w	24017414 <tMBTriangle_tick+0x9bc>
        if (!k) {
24016f00:	2e00      	cmp	r6, #0
24016f02:	f000 81f4 	beq.w	240172ee <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
24016f06:	ee79 7a88 	vadd.f32	s15, s19, s16
24016f0a:	ee7c 6ac9 	vsub.f32	s13, s25, s18
24016f0e:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
24016f12:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
24016f16:	ee77 6aa6 	vadd.f32	s13, s15, s13
24016f1a:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
24016f1e:	e5fd      	b.n	24016b1c <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
24016f20:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 24016ef8 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24016f24:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
24016f28:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
24016f2c:	f8d7 8000 	ldr.w	r8, [r7]
24016f30:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
24016f34:	ee79 7ac8 	vsub.f32	s15, s19, s16
24016f38:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24016f3c:	eeae 0a2c 	vfma.f32	s0, s28, s25
24016f40:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
24016f44:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24016f48:	f004 f97a 	bl	2401b240 <lrintf>
	r -= (float)i;
24016f4c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f50:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016f54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016f58:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
24016f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f60:	3301      	adds	r3, #1
24016f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016f66:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f6a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016f6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016f72:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24016f76:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016f7a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016f7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016f82:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016f86:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016f8a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f8e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24016f92:	3301      	adds	r3, #1
24016f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016f98:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
24016f9c:	2301      	movs	r3, #1
}
24016f9e:	e5b4      	b.n	24016b0a <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
24016fa0:	eeb5 8a40 	vcmp.f32	s16, #0.0
24016fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016fa8:	f57f adb8 	bpl.w	24016b1c <tMBTriangle_tick+0xc4>
24016fac:	eef5 ba40 	vcmp.f32	s23, #0.0
24016fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016fb4:	f57f adb2 	bpl.w	24016b1c <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
24016fb8:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
24016fbc:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 24016ef8 <tMBTriangle_tick+0x4a0>
24016fc0:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
24016fc4:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24016fc8:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
24016fcc:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24016fd0:	eeac 0aa8 	vfma.f32	s0, s25, s17
24016fd4:	ee67 baab 	vmul.f32	s23, s15, s23
24016fd8:	f004 f932 	bl	2401b240 <lrintf>
	r -= (float)i;
24016fdc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016fe0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016fe4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
24016fe8:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
24016fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ff0:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016ff2:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
24016ffa:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
24016ffe:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017002:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017006:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401700a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
2401700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24017012:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017016:	eb08 0382 	add.w	r3, r8, r2, lsl #2
2401701a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401701e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017022:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017026:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401702a:	f103 0301 	add.w	r3, r3, #1
2401702e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017032:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
24017036:	f340 84cb 	ble.w	240179d0 <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
2401703a:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
2401703e:	683f      	ldr	r7, [r7, #0]
24017040:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
24017044:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
24017048:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
2401704c:	eeac 0a8c 	vfma.f32	s0, s25, s24
24017050:	f004 f8f6 	bl	2401b240 <lrintf>
	r -= (float)i;
24017054:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017058:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401705c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24017060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017064:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
24017066:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401706a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401706e:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017072:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017076:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401707a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2401707e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017082:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24017086:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401708a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401708e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017092:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24017096:	3301      	adds	r3, #1
24017098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401709c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
240170a0:	e53c      	b.n	24016b1c <tMBTriangle_tick+0xc4>
        else if (sw < 0)
240170a2:	f57f ad3b 	bpl.w	24016b1c <tMBTriangle_tick+0xc4>
            if (p < b) {
240170a6:	eeb4 8ae9 	vcmpe.f32	s16, s19
240170aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240170ae:	f100 8174 	bmi.w	2401739a <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
240170b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240170b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240170ba:	f57f ad2f 	bpl.w	24016b1c <tMBTriangle_tick+0xc4>
                p += 1.0f;
240170be:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
240170c2:	ed1f ba73 	vldr	s22, [pc, #-460]	; 24016ef8 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
240170c6:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
240170ca:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
240170cc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
240170d0:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
240170d4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240170d8:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
240170dc:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
240170e0:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
240170e4:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
240170e8:	f004 f8aa 	bl	2401b240 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240170ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
240170f0:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240170f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240170f8:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240170fc:	3301      	adds	r3, #1
	r -= (float)i;
240170fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24017106:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401710a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401710e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017112:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24017116:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401711a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401711e:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017122:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
24017126:	e6d8      	b.n	24016eda <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
24017128:	ee3c 9ac9 	vsub.f32	s18, s25, s18
2401712c:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
24017130:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
24017134:	eef0 ca4b 	vmov.f32	s25, s22
24017138:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
2401713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24017140:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
24017144:	f280 81e1 	bge.w	2401750a <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24017148:	ee3d ea2d 	vadd.f32	s28, s26, s27
2401714c:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 24016ef8 <tMBTriangle_tick+0x4a0>
24017150:	ee2c ca27 	vmul.f32	s24, s24, s15
24017154:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
24017158:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401715c:	eea8 0a0c 	vfma.f32	s0, s16, s24
24017160:	f004 f86e 	bl	2401b240 <lrintf>
	r -= (float)i;
24017164:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017168:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
2401716c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24017170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017174:	3301      	adds	r3, #1
	r -= (float)i;
24017176:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401717a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401717e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017182:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017186:	eb08 0343 	add.w	r3, r8, r3, lsl #1
2401718a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401718e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017196:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401719a:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401719e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240171a2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240171a6:	3301      	adds	r3, #1
240171a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240171ac:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
240171b0:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240171b4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
240171b8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
240171bc:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240171c0:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
240171c2:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240171c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
240171ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240171ce:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240171d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240171d6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
240171da:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240171de:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240171e2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240171e6:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240171ea:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240171ee:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240171f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240171f6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240171fa:	f103 0301 	add.w	r3, r3, #1
240171fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017202:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
24017206:	d93d      	bls.n	24017284 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
24017208:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
2401720c:	464e      	mov	r6, r9
2401720e:	e485      	b.n	24016b1c <tMBTriangle_tick+0xc4>
                p -= 1.0f;
24017210:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 24016ef8 <tMBTriangle_tick+0x4a0>
24017214:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
24017218:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
2401721c:	683f      	ldr	r7, [r7, #0]
2401721e:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24017222:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
24017226:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
2401722a:	eea8 0a0c 	vfma.f32	s0, s16, s24
2401722e:	f004 f807 	bl	2401b240 <lrintf>
	r -= (float)i;
24017232:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017236:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401723a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401723e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017242:	3301      	adds	r3, #1
	scale *= w;
24017244:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
24017248:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401724c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24017250:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017254:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017258:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401725c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24017260:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017264:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24017268:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401726c:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017270:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017274:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24017278:	3301      	adds	r3, #1
2401727a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401727e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24017282:	e44b      	b.n	24016b1c <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
24017284:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
24017288:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
2401728a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401728e:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
24017292:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
24017296:	eee7 7a2d 	vfma.f32	s15, s14, s27
2401729a:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
2401729e:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240172a2:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
240172a6:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
240172aa:	f003 ffc9 	bl	2401b240 <lrintf>
	r -= (float)i;
240172ae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240172b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240172b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240172ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
240172be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240172c2:	3301      	adds	r3, #1
240172c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240172c8:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240172cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240172d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240172d4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240172d8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240172dc:	eb07 0382 	add.w	r3, r7, r2, lsl #2
240172e0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240172e4:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240172e8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240172ec:	e5f7      	b.n	24016ede <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
240172ee:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
240172f2:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
240172f6:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
240172fa:	e40f      	b.n	24016b1c <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240172fc:	ee7d 7a2d 	vadd.f32	s15, s26, s27
24017300:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 2401769c <tMBTriangle_tick+0xc44>
24017304:	ee2c ca07 	vmul.f32	s24, s24, s14
24017308:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
2401730c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
24017310:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
24017314:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
24017318:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
2401731c:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24017320:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
24017324:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
24017328:	eeab 0a0c 	vfma.f32	s0, s22, s24
2401732c:	f003 ff88 	bl	2401b240 <lrintf>
	r -= (float)i;
24017330:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017334:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24017338:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401733c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017340:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
24017342:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
24017346:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401734a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
2401734e:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017352:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017356:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401735a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
2401735e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017362:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24017366:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401736a:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401736e:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017372:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24017376:	3301      	adds	r3, #1
24017378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401737c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
24017380:	f003 ff5e 	bl	2401b240 <lrintf>
	r -= (float)i;
24017384:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24017388:	f000 013f 	and.w	r1, r0, #63	; 0x3f
2401738c:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24017390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017394:	eed8 7a0c 	vfnms.f32	s15, s16, s24
24017398:	e70c      	b.n	240171b4 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
2401739a:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 2401769c <tMBTriangle_tick+0xc44>
2401739e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240173a2:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
240173a6:	683e      	ldr	r6, [r7, #0]
240173a8:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
240173ac:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
240173b0:	eeab 0a09 	vfma.f32	s0, s22, s18
240173b4:	f003 ff44 	bl	2401b240 <lrintf>
	r -= (float)i;
240173b8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240173bc:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
240173c0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
240173c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240173c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240173cc:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
240173ce:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
240173d2:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240173d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240173da:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240173de:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240173e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240173e6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240173ea:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240173ee:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240173f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240173f6:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240173fa:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240173fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017402:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24017406:	3301      	adds	r3, #1
24017408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401740c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
24017410:	2600      	movs	r6, #0
}
24017412:	e64e      	b.n	240170b2 <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
24017414:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
24017418:	2e00      	cmp	r6, #0
2401741a:	f040 8141 	bne.w	240176a0 <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
2401741e:	eef5 eac0 	vcmpe.f32	s29, #0.0
24017422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017426:	f100 81ac 	bmi.w	24017782 <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401742a:	ee3d 9a2d 	vadd.f32	s18, s26, s27
2401742e:	eddf 7a9b 	vldr	s15, [pc, #620]	; 2401769c <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
24017432:	ee6d ea2e 	vmul.f32	s29, s26, s29
24017436:	ee2c ca27 	vmul.f32	s24, s24, s15
2401743a:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
2401743e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24017442:	eef1 8a48 	vneg.f32	s17, s16
24017446:	eea8 0a4c 	vfms.f32	s0, s16, s24
2401744a:	f003 fef9 	bl	2401b240 <lrintf>
	r -= (float)i;
2401744e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017452:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24017456:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
2401745a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401745e:	3301      	adds	r3, #1
	r -= (float)i;
24017460:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017468:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401746c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017470:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24017474:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017478:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401747c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017480:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017484:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017488:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401748c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24017490:	3301      	adds	r3, #1
24017492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017496:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
2401749a:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401749e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
240174a2:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
240174a6:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240174aa:	3301      	adds	r3, #1
240174ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
240174b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240174b4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240174b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240174bc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
240174c0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240174c4:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240174c8:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240174cc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240174d0:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240174d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240174d8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240174dc:	f103 0301 	add.w	r3, r3, #1
240174e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240174e4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
240174e8:	f300 810c 	bgt.w	24017704 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
240174ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
240174f0:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
240174f2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240174f6:	ee78 7a67 	vsub.f32	s15, s16, s15
240174fa:	eeb0 8a4f 	vmov.f32	s16, s30
240174fe:	ee77 7aa9 	vadd.f32	s15, s15, s19
24017502:	eee7 8aad 	vfma.f32	s17, s15, s27
24017506:	f7ff bb09 	b.w	24016b1c <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
2401750a:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401750e:	eddf 7a63 	vldr	s15, [pc, #396]	; 2401769c <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
24017512:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
24017516:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401751a:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
2401751e:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24017522:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
24017526:	eeac 0a0f 	vfma.f32	s0, s24, s30
2401752a:	f003 fe89 	bl	2401b240 <lrintf>
	r -= (float)i;
2401752e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017532:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24017536:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401753a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401753e:	3301      	adds	r3, #1
	scale *= w;
24017540:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
24017544:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401754c:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017550:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017554:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017558:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
2401755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24017560:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017564:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24017568:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401756c:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017570:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017574:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24017578:	f103 0301 	add.w	r3, r3, #1
2401757c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017580:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24017584:	f200 81b5 	bhi.w	240178f2 <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24017588:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
2401758c:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
2401758e:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
24017592:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24017596:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
2401759a:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
2401759e:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
240175a2:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
240175a6:	f003 fe4b 	bl	2401b240 <lrintf>
	r -= (float)i;
240175aa:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240175ae:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240175b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240175b6:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
240175ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240175be:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
240175c0:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240175c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240175c8:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240175cc:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240175d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240175d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240175d8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240175dc:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
240175e0:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240175e4:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240175e8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240175ec:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240175f0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
240175f4:	3301      	adds	r3, #1
240175f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240175fa:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
240175fe:	f8d7 8000 	ldr.w	r8, [r7]
24017602:	e5a9      	b.n	24017158 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24017604:	ed9f 7a25 	vldr	s14, [pc, #148]	; 2401769c <tMBTriangle_tick+0xc44>
24017608:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
2401760c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24017610:	ee2c ca07 	vmul.f32	s24, s24, s14
24017614:	ee7d 7a2d 	vadd.f32	s15, s26, s27
24017618:	eeaf 0a0c 	vfma.f32	s0, s30, s24
2401761c:	ee27 eaab 	vmul.f32	s28, s15, s23
24017620:	f003 fe0e 	bl	2401b240 <lrintf>
	r -= (float)i;
24017624:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017628:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401762c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
24017630:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
24017634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017638:	3301      	adds	r3, #1
2401763a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
2401763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24017642:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017646:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401764a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401764e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24017652:	eeb0 fa4e 	vmov.f32	s30, s28
24017656:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401765a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
2401765e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017662:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017666:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401766a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401766e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24017672:	f103 0301 	add.w	r3, r3, #1
24017676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401767a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
2401767e:	da7d      	bge.n	2401777c <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
24017680:	ee79 6a88 	vadd.f32	s13, s19, s16
24017684:	f8d7 8000 	ldr.w	r8, [r7]
24017688:	ee76 6aac 	vadd.f32	s13, s13, s25
2401768c:	ee76 6ac9 	vsub.f32	s13, s13, s18
24017690:	eea6 baad 	vfma.f32	s22, s13, s27
24017694:	eef0 ca4b 	vmov.f32	s25, s22
24017698:	e55e      	b.n	24017158 <tMBTriangle_tick+0x700>
2401769a:	bf00      	nop
2401769c:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
240176a0:	ee39 7a88 	vadd.f32	s14, s19, s16
240176a4:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
240176a8:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
240176ac:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
240176b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
240176b4:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
240176b8:	f300 80da 	bgt.w	24017870 <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
240176bc:	eef5 eac0 	vcmpe.f32	s29, #0.0
240176c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240176c4:	f100 8128 	bmi.w	24017918 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
240176c8:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 2401769c <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
240176cc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240176d0:	ee77 eaa8 	vadd.f32	s29, s15, s17
240176d4:	ee2c ca07 	vmul.f32	s24, s24, s14
240176d8:	eef1 8a48 	vneg.f32	s17, s16
240176dc:	eea8 0a4c 	vfms.f32	s0, s16, s24
240176e0:	f003 fdae 	bl	2401b240 <lrintf>
	r -= (float)i;
240176e4:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
240176e8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
240176ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240176f0:	eedc 7a28 	vfnms.f32	s15, s24, s17
240176f4:	e6d3      	b.n	2401749e <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
240176f6:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
240176fa:	2600      	movs	r6, #0
                p -= 1.0f;
240176fc:	eeb0 8a6c 	vmov.f32	s16, s25
24017700:	f7ff ba0c 	b.w	24016b1c <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
24017704:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
24017708:	683f      	ldr	r7, [r7, #0]
2401770a:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
2401770e:	464e      	mov	r6, r9
}
24017710:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
24017714:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
24017718:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
2401771c:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
24017720:	eea9 0a0c 	vfma.f32	s0, s18, s24
24017724:	f003 fd8c 	bl	2401b240 <lrintf>
	r -= (float)i;
24017728:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401772c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24017730:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24017734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017738:	3301      	adds	r3, #1
	scale *= w;
2401773a:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401773e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24017742:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017746:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401774a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401774e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24017752:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017756:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401775a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401775e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017762:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017766:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401776a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
2401776e:	3301      	adds	r3, #1
24017770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017774:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24017778:	f7ff b9d0 	b.w	24016b1c <tMBTriangle_tick+0xc4>
2401777c:	f8d7 8000 	ldr.w	r8, [r7]
24017780:	e5c4      	b.n	2401730c <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
24017782:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24017786:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 2401769c <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401778a:	ee3d ba2d 	vadd.f32	s22, s26, s27
2401778e:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
24017792:	eeb0 0a67 	vmov.f32	s0, s15
24017796:	edcd 7a01 	vstr	s15, [sp, #4]
2401779a:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
2401779e:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
240177a2:	eeac 0a0e 	vfma.f32	s0, s24, s28
240177a6:	f003 fd4b 	bl	2401b240 <lrintf>
	r -= (float)i;
240177aa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240177ae:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240177b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240177b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
240177ba:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240177be:	3301      	adds	r3, #1
240177c0:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
240177c4:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240177c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240177cc:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240177d0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240177d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240177d8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
240177dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240177e0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240177e4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
240177e8:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240177ec:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240177f0:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240177f4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240177f8:	f103 0301 	add.w	r3, r3, #1
240177fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017800:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
24017804:	f340 80ed 	ble.w	240179e2 <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
24017808:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
2401780c:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
2401780e:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
24017812:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
24017816:	eeec 7a2c 	vfma.f32	s15, s24, s25
2401781a:	eeb0 0a67 	vmov.f32	s0, s15
2401781e:	f003 fd0f 	bl	2401b240 <lrintf>
	r -= (float)i;
24017822:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017826:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401782a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401782e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017832:	3301      	adds	r3, #1
	r -= (float)i;
24017834:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401783c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017840:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017844:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24017848:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401784c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24017850:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017854:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017858:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401785c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24017860:	3301      	adds	r3, #1
24017862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017866:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
2401786a:	f8d7 8000 	ldr.w	r8, [r7]
2401786e:	e5e6      	b.n	2401743e <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
24017870:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 2401769c <tMBTriangle_tick+0xc44>
24017874:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
24017878:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401787c:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
24017880:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
24017884:	eeac 0a2c 	vfma.f32	s0, s24, s25
24017888:	f003 fcda 	bl	2401b240 <lrintf>
	r -= (float)i;
2401788c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017890:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24017894:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24017898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401789c:	3301      	adds	r3, #1
	scale *= w;
2401789e:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
240178a2:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240178a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240178aa:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240178ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240178b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240178b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
240178ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240178be:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240178c2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
240178c6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240178ca:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240178ce:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240178d2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240178d6:	f103 0301 	add.w	r3, r3, #1
240178da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240178de:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
240178e2:	d46e      	bmi.n	240179c2 <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
240178e4:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
240178e8:	f8d7 8000 	ldr.w	r8, [r7]
240178ec:	eeb1 9a4b 	vneg.f32	s18, s22
240178f0:	e5a5      	b.n	2401743e <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
240178f2:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
240178f6:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
240178fa:	eeac 0a08 	vfma.f32	s0, s24, s16
240178fe:	f003 fc9f 	bl	2401b240 <lrintf>
	r -= (float)i;
24017902:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24017906:	f000 013f 	and.w	r1, r0, #63	; 0x3f
2401790a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
2401790e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017912:	eedc 7a08 	vfnms.f32	s15, s24, s16
24017916:	e44d      	b.n	240171b4 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24017918:	ee3d ba2d 	vadd.f32	s22, s26, s27
2401791c:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 2401769c <tMBTriangle_tick+0xc44>
24017920:	ee2c ca27 	vmul.f32	s24, s24, s15
24017924:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
24017928:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401792c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
24017930:	ee39 9a08 	vadd.f32	s18, s18, s16
24017934:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
24017938:	eeb0 0a6c 	vmov.f32	s0, s25
2401793c:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
24017940:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
24017944:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017948:	eeb1 9a4b 	vneg.f32	s18, s22
2401794c:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
24017950:	f003 fc76 	bl	2401b240 <lrintf>
	r -= (float)i;
24017954:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017958:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401795c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
24017960:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
24017964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017968:	3301      	adds	r3, #1
2401796a:	eef1 8a48 	vneg.f32	s17, s16
2401796e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
24017972:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
24017976:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401797a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401797e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017982:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24017986:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401798a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
2401798e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24017992:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24017996:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401799a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401799e:	3301      	adds	r3, #1
240179a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240179a4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
240179a8:	f003 fc4a 	bl	2401b240 <lrintf>
	r -= (float)i;
240179ac:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
240179b0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
240179b4:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
240179b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240179bc:	eedc 7a28 	vfnms.f32	s15, s24, s17
240179c0:	e56d      	b.n	2401749e <tMBTriangle_tick+0xa46>
240179c2:	f8d7 8000 	ldr.w	r8, [r7]
240179c6:	e7af      	b.n	24017928 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
240179c8:	eeb0 8a4e 	vmov.f32	s16, s28
240179cc:	f7ff b887 	b.w	24016ade <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
240179d0:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
240179d4:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
240179d6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240179da:	eee7 8aad 	vfma.f32	s17, s15, s27
240179de:	f7ff b89d 	b.w	24016b1c <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
240179e2:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
240179e6:	ee79 caef 	vsub.f32	s25, s19, s31
240179ea:	eeb1 9a48 	vneg.f32	s18, s16
240179ee:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
240179f2:	eeb0 0a67 	vmov.f32	s0, s15
240179f6:	f003 fc23 	bl	2401b240 <lrintf>
	r -= (float)i;
240179fa:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
240179fe:	f000 023f 	and.w	r2, r0, #63	; 0x3f
24017a02:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24017a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017a0a:	eef0 ea68 	vmov.f32	s29, s17
24017a0e:	eedc 7a09 	vfnms.f32	s15, s24, s18
24017a12:	e544      	b.n	2401749e <tMBTriangle_tick+0xa46>

24017a14 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
24017a14:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24017a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017a1a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24017a1e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017a22:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24017a26:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017a2a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24017a2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24017a32:	4770      	bx	lr

24017a34 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
24017a34:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
24017a36:	6804      	ldr	r4, [r0, #0]
{
24017a38:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
24017a3c:	ed9f 1a04 	vldr	s2, [pc, #16]	; 24017a50 <tMBTriangle_setWidth+0x1c>
24017a40:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24017a54 <tMBTriangle_setWidth+0x20>
24017a44:	f01e fabc 	bl	24035fc0 <__LEAF_clip_veneer>
    c->waveform = w;
24017a48:	ed84 0a03 	vstr	s0, [r4, #12]
}
24017a4c:	bd10      	pop	{r4, pc}
24017a4e:	bf00      	nop
24017a50:	3f7d70a4 	.word	0x3f7d70a4
24017a54:	00000000 	.word	0x00000000

24017a58 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
24017a58:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24017a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24017a5e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24017a62:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24017a66:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24017a6a:	eef1 7a67 	vneg.f32	s15, s15
24017a6e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24017a72:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24017a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a7a:	eef4 6ac7 	vcmpe.f32	s13, s14
24017a7e:	bfcc      	ite	gt
24017a80:	2201      	movgt	r2, #1
24017a82:	2200      	movle	r2, #0
24017a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a88:	f002 0201 	and.w	r2, r2, #1
24017a8c:	bf88      	it	hi
24017a8e:	2200      	movhi	r2, #0
24017a90:	b122      	cbz	r2, 24017a9c <tMBTriangle_sync+0x44>
24017a92:	eeb5 0a40 	vcmp.f32	s0, #0.0
24017a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a9a:	da04      	bge.n	24017aa6 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24017a9c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24017ab4 <tMBTriangle_sync+0x5c>
24017aa0:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24017aa4:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24017aa6:	ee37 7a66 	vsub.f32	s14, s14, s13
24017aaa:	ee27 7a06 	vmul.f32	s14, s14, s12
24017aae:	ed83 7a05 	vstr	s14, [r3, #20]
}
24017ab2:	4770      	bx	lr
24017ab4:	00000000 	.word	0x00000000

24017ab8 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
24017ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24017aba:	698e      	ldr	r6, [r1, #24]
{
24017abc:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24017abe:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24017ac2:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24017ac4:	4631      	mov	r1, r6
24017ac6:	f7fd ff93 	bl	240159f0 <mpool_alloc>
24017aca:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24017acc:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
24017ace:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24017ad0:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
24017ad2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24017ad6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 24017b44 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24017ada:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
24017adc:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
24017ae0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
24017ae4:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017b48 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
24017ae8:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24017aec:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
24017aee:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
24017af2:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
24017af4:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24017af6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
24017afa:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017afc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
24017b00:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
24017b02:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
24017b04:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
24017b06:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
24017b0a:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24017b0c:	490f      	ldr	r1, [pc, #60]	; (24017b4c <tMBSineTri_init+0x94>)
    c->softsync = 0;
24017b0e:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
24017b10:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24017b12:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24017b14:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24017b16:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
24017b18:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
24017b1c:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017b20:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24017b24:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24017b28:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24017b2c:	4629      	mov	r1, r5
24017b2e:	306c      	adds	r0, #108	; 0x6c
24017b30:	f002 ff62 	bl	2401a9f8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24017b34:	4629      	mov	r1, r5
24017b36:	f104 0044 	add.w	r0, r4, #68	; 0x44
24017b3a:	2220      	movs	r2, #32
}
24017b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24017b40:	f002 bf5a 	b.w	2401a9f8 <memset>
24017b44:	3b14f209 	.word	0x3b14f209
24017b48:	43dc0000 	.word	0x43dc0000
24017b4c:	11c01200 	.word	0x11c01200

24017b50 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
24017b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24017b54:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
24017b58:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
24017b5a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
24017b5e:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
24017b62:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
24017b64:	ed94 9a03 	vldr	s18, [r4, #12]
{
24017b68:	4607      	mov	r7, r0
    sync = c->sync;
24017b6a:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
24017b6e:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
24017b72:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24017b76:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
24017b7a:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
24017b7e:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
24017b82:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
24017b86:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
24017b8a:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
24017b8e:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24017b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
24017b96:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24017b9a:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
24017b9e:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24017ba2:	f340 81d8 	ble.w	24017f56 <tMBSineTri_tick+0x406>
24017ba6:	f8d4 901c 	ldr.w	r9, [r4, #28]
24017baa:	f1b9 0f00 	cmp.w	r9, #0
24017bae:	f340 8189 	ble.w	24017ec4 <tMBSineTri_tick+0x374>
24017bb2:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24017bb6:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24017bba:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
24017bbe:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24017bc2:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24017bc6:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
24017bca:	eefd 7acc 	vcvt.s32.f32	s15, s24
24017bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017bd2:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
24017bd6:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
24017bda:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
24017bde:	2e00      	cmp	r6, #0
24017be0:	f040 81cc 	bne.w	24017f7c <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
24017be4:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
24017be8:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
24017bec:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
24017bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24017bf4:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
24017bf8:	f340 82a1 	ble.w	2401813e <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
24017bfc:	eeb4 aac9 	vcmpe.f32	s20, s18
24017c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c04:	f280 825b 	bge.w	240180be <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24017c08:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
24017c0a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24017c0e:	eeb4 aacb 	vcmpe.f32	s20, s22
24017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c16:	f280 83c8 	bge.w	240183aa <tMBSineTri_tick+0x85a>
24017c1a:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
24017c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24017c20:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
24017c22:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24017c26:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
24017c2a:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
24017c2e:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
24017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c36:	db0a      	blt.n	24017c4e <tMBSineTri_tick+0xfe>
24017c38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
24017c3c:	eef0 7a48 	vmov.f32	s15, s16
24017c40:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
24017c44:	eef4 7ae6 	vcmpe.f32	s15, s13
24017c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c4c:	daf6      	bge.n	24017c3c <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
24017c4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24017c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c56:	d50c      	bpl.n	24017c72 <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
24017c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
24017c5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
24017c60:	eef0 7a48 	vmov.f32	s15, s16
24017c64:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
24017c68:	eef4 7ac7 	vcmpe.f32	s15, s14
24017c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c70:	d4f6      	bmi.n	24017c60 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
24017c72:	eddf 7abd 	vldr	s15, [pc, #756]	; 24017f68 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24017c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
24017c7a:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24017c7e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
24017c82:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24017c86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017c8a:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
24017c8e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24017c92:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
24017c96:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
24017c9a:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
24017c9e:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
24017ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
24017ca4:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
24017ca6:	49b1      	ldr	r1, [pc, #708]	; (24017f6c <tMBSineTri_tick+0x41c>)
24017ca8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
24017cac:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
24017cb0:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
24017cb4:	ed91 6a00 	vldr	s12, [r1]
24017cb8:	ee36 6a66 	vsub.f32	s12, s12, s13
24017cbc:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24017cc0:	eee7 8a26 	vfma.f32	s17, s14, s13
24017cc4:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24017cc8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
24017ccc:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24017cd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
24017cd4:	2b00      	cmp	r3, #0
24017cd6:	f000 80d3 	beq.w	24017e80 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24017cda:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24017cde:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017ce0:	48a3      	ldr	r0, [pc, #652]	; (24017f70 <tMBSineTri_tick+0x420>)
24017ce2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24017ce6:	4fa3      	ldr	r7, [pc, #652]	; (24017f74 <tMBSineTri_tick+0x424>)
24017ce8:	e053      	b.n	24017d92 <tMBSineTri_tick+0x242>
24017cea:	f8bd e006 	ldrh.w	lr, [sp, #6]
24017cee:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24017cf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24017cf6:	fa1f fe8e 	uxth.w	lr, lr
24017cfa:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24017cfe:	fa1f f989 	uxth.w	r9, r9
24017d02:	b29b      	uxth	r3, r3
24017d04:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
24017d08:	fa1f f888 	uxth.w	r8, r8
24017d0c:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24017d10:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24017d14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24017d18:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24017d1c:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24017d20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24017d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017d28:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
24017d2c:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
24017d30:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
24017d34:	ed99 7a00 	vldr	s14, [r9]
24017d38:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
24017d3c:	ed93 6a01 	vldr	s12, [r3, #4]
24017d40:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24017d44:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017d48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24017d4c:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017d50:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24017d52:	fa1f fe8e 	uxth.w	lr, lr
24017d56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24017d5a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24017d5e:	eee6 7a87 	vfma.f32	s15, s13, s14
24017d62:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017d66:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24017d6a:	f108 0840 	add.w	r8, r8, #64	; 0x40
24017d6e:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24017d72:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24017d76:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24017d7a:	459e      	cmp	lr, r3
24017d7c:	d304      	bcc.n	24017d88 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24017d7e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24017d82:	3b01      	subs	r3, #1
24017d84:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24017d88:	f89d 3005 	ldrb.w	r3, [sp, #5]
24017d8c:	3201      	adds	r2, #1
24017d8e:	4293      	cmp	r3, r2
24017d90:	dd76      	ble.n	24017e80 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24017d92:	ebac 0302 	sub.w	r3, ip, r2
24017d96:	b29b      	uxth	r3, r3
24017d98:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24017d9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24017da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24017da4:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24017da8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24017dac:	b29b      	uxth	r3, r3
24017dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24017db2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017db6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
24017dba:	eef4 7ae5 	vcmpe.f32	s15, s11
24017dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017dc2:	d492      	bmi.n	24017cea <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017dc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24017dc8:	f8bd e006 	ldrh.w	lr, [sp, #6]
24017dcc:	b29b      	uxth	r3, r3
24017dce:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24017dd2:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24017dd6:	fa1f fe8e 	uxth.w	lr, lr
24017dda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24017dde:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
24017de2:	fa1f f989 	uxth.w	r9, r9
24017de6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017dea:	fa1f f888 	uxth.w	r8, r8
24017dee:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
24017df2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24017df6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24017dfa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24017dfe:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24017e02:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24017e06:	b29b      	uxth	r3, r3
24017e08:	ee24 7a07 	vmul.f32	s14, s8, s14
24017e0c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
24017e10:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24017e14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24017e18:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
24017e1c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
24017e20:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
24017e24:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
24017e28:	ed98 6a01 	vldr	s12, [r8, #4]
24017e2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
24017e30:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017e34:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017e38:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017e3c:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24017e40:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017e44:	ee36 6a64 	vsub.f32	s12, s12, s9
24017e48:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24017e4c:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017e50:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24017e54:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24017e58:	eee6 7a87 	vfma.f32	s15, s13, s14
24017e5c:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24017e60:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24017e64:	3340      	adds	r3, #64	; 0x40
24017e66:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24017e6a:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
24017e6e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24017e72:	459e      	cmp	lr, r3
24017e74:	d283      	bcs.n	24017d7e <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24017e76:	f89d 3005 	ldrb.w	r3, [sp, #5]
24017e7a:	3201      	adds	r2, #1
24017e7c:	4293      	cmp	r3, r2
24017e7e:	dc88      	bgt.n	24017d92 <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
24017e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24017e84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
24017e88:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24017e8a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
24017e8e:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
24017e92:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
24017e96:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
24017e9a:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
24017e9e:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
24017ea2:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
24017ea6:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
24017eaa:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
24017eae:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
24017eb2:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
24017eb6:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
24017eba:	b003      	add	sp, #12
24017ebc:	ecbd 8b10 	vpop	{d8-d15}
24017ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
24017ec4:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24017ec8:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24017ecc:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
24017ed0:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
24017ed4:	eefd 7acc 	vcvt.s32.f32	s15, s24
24017ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017edc:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
24017ee0:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
24017ee4:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24017ee8:	f040 8644 	bne.w	24018b74 <tMBSineTri_tick+0x1024>
        if (sw > 0)
24017eec:	eeb5 cac0 	vcmpe.f32	s24, #0.0
24017ef0:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
24017ef2:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
24017ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24017efa:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
24017efe:	f340 80cc 	ble.w	2401809a <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
24017f02:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
24017f06:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
24017f0a:	2e00      	cmp	r6, #0
24017f0c:	f040 81dd 	bne.w	240182ca <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
24017f10:	eeb4 9ace 	vcmpe.f32	s18, s28
24017f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017f18:	f240 844d 	bls.w	240187b6 <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
24017f1c:	eeb4 eae8 	vcmpe.f32	s28, s17
24017f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017f24:	f280 82b9 	bge.w	2401849a <tMBSineTri_tick+0x94a>
24017f28:	eddf 7a13 	vldr	s15, [pc, #76]	; 24017f78 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
24017f2c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24017f30:	ee6c caa7 	vmul.f32	s25, s25, s15
24017f34:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
24017f38:	eeaa 0a2c 	vfma.f32	s0, s20, s25
24017f3c:	f003 f980 	bl	2401b240 <lrintf>
	r -= (float)i;
24017f40:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
24017f44:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
24017f48:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24017f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017f50:	eeda 7a2c 	vfnms.f32	s15, s20, s25
24017f54:	e1fd      	b.n	24018352 <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
24017f56:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24017f5a:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24017f5e:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
24017f62:	ee6c caa7 	vmul.f32	s25, s25, s15
24017f66:	e630      	b.n	24017bca <tMBSineTri_tick+0x7a>
24017f68:	45000000 	.word	0x45000000
24017f6c:	24024b8c 	.word	0x24024b8c
24017f70:	24026c0c 	.word	0x24026c0c
24017f74:	2402b310 	.word	0x2402b310
24017f78:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
24017f7c:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
24017f80:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
24017f84:	ee79 7a4a 	vsub.f32	s15, s18, s20
24017f88:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
24017f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24017f90:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
24017f94:	f340 8154 	ble.w	24018240 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
24017f98:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24017f9c:	eeb4 aaeb 	vcmpe.f32	s20, s23
24017fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017fa4:	f6ff ae3a 	blt.w	24017c1c <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
24017fa8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
24017fac:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 24017f78 <tMBSineTri_tick+0x428>
                p -= 1.0f;
24017fb0:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
24017fb4:	683e      	ldr	r6, [r7, #0]
24017fb6:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
24017fba:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24017fbe:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
24017fc2:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
24017fc6:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
24017fca:	f003 f939 	bl	2401b240 <lrintf>
	r -= (float)i;
24017fce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017fd2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24017fd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
24017fda:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
24017fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017fe2:	3301      	adds	r3, #1
24017fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
24017fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24017fec:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24017ff0:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24017ff4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24017ff8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24017ffc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018000:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24018004:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018008:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401800c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018010:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24018014:	f103 0301 	add.w	r3, r3, #1
24018018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401801c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
24018020:	f200 843b 	bhi.w	2401889a <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
24018024:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
24018028:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401802a:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
2401802e:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
24018032:	ee77 7aca 	vsub.f32	s15, s15, s20
24018036:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
2401803a:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
2401803e:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
24018042:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24018046:	f003 f8fb 	bl	2401b240 <lrintf>
	r -= (float)i;
2401804a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401804e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018052:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018056:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
2401805a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401805e:	3301      	adds	r3, #1
24018060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018064:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018068:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401806c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018070:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24018074:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018078:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401807c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018080:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018084:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018088:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
2401808c:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401808e:	4433      	add	r3, r6
24018090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018094:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24018098:	e5c0      	b.n	24017c1c <tMBSineTri_tick+0xcc>
        else if (sw < 0)
2401809a:	f100 828a 	bmi.w	240185b2 <tMBSineTri_tick+0xa62>
        if (!k) {
2401809e:	2e00      	cmp	r6, #0
240180a0:	f000 81f1 	beq.w	24018486 <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
240180a4:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
240180a8:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
240180ac:	eef0 8a6b 	vmov.f32	s17, s23
240180b0:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
240180b4:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
240180b8:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
240180bc:	e5ae      	b.n	24017c1c <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
240180be:	ed1f ea52 	vldr	s28, [pc, #-328]	; 24017f78 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240180c2:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
240180c6:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
240180ca:	f8d7 8000 	ldr.w	r8, [r7]
240180ce:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
240180d2:	ee79 7a4a 	vsub.f32	s15, s18, s20
240180d6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240180da:	eeae 0a8e 	vfma.f32	s0, s29, s28
240180de:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
240180e2:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
240180e6:	f003 f8ab 	bl	2401b240 <lrintf>
	r -= (float)i;
240180ea:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240180ee:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240180f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240180f6:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
240180fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240180fe:	3301      	adds	r3, #1
24018100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018104:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018108:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401810c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018110:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24018114:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018118:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401811c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018120:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018124:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018128:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401812c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018130:	3301      	adds	r3, #1
24018132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018136:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
2401813a:	2301      	movs	r3, #1
}
2401813c:	e565      	b.n	24017c0a <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
2401813e:	eeb5 aa40 	vcmp.f32	s20, #0.0
24018142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018146:	f57f ad69 	bpl.w	24017c1c <tMBSineTri_tick+0xcc>
2401814a:	eeb5 ca40 	vcmp.f32	s24, #0.0
2401814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018152:	f57f ad63 	bpl.w	24017c1c <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
24018156:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
2401815a:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 24017f78 <tMBSineTri_tick+0x428>
2401815e:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
24018162:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24018166:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
2401816a:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401816e:	eeae 0a28 	vfma.f32	s0, s28, s17
24018172:	ee2c ca27 	vmul.f32	s24, s24, s15
24018176:	f003 f863 	bl	2401b240 <lrintf>
	r -= (float)i;
2401817a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401817e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018182:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
24018186:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
2401818a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401818e:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018190:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
24018198:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
2401819c:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240181a0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240181a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240181a8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
240181ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240181b0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240181b4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
240181b8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240181bc:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240181c0:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240181c4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240181c8:	f103 0301 	add.w	r3, r3, #1
240181cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240181d0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
240181d4:	f340 84d4 	ble.w	24018b80 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
240181d8:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
240181dc:	683f      	ldr	r7, [r7, #0]
240181de:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
240181e2:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
240181e6:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
240181ea:	eeac 0aad 	vfma.f32	s0, s25, s27
240181ee:	f003 f827 	bl	2401b240 <lrintf>
	r -= (float)i;
240181f2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240181f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240181fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240181fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018202:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
24018204:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401820c:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018210:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018214:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018218:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2401821c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018220:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24018224:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018228:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401822c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018230:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24018234:	3301      	adds	r3, #1
24018236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401823a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401823e:	e4ed      	b.n	24017c1c <tMBSineTri_tick+0xcc>
        else if (sw < 0)
24018240:	f57f acec 	bpl.w	24017c1c <tMBSineTri_tick+0xcc>
            if (p < b) {
24018244:	eeb4 aac9 	vcmpe.f32	s20, s18
24018248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401824c:	f100 8174 	bmi.w	24018538 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
24018250:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24018254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018258:	f57f ace0 	bpl.w	24017c1c <tMBSineTri_tick+0xcc>
                p += 1.0f;
2401825c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24018260:	ed5f babb 	vldr	s23, [pc, #-748]	; 24017f78 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
24018264:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
24018268:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
2401826a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
2401826e:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
24018272:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24018276:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
2401827a:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
2401827e:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
24018282:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24018286:	f002 ffdb 	bl	2401b240 <lrintf>
	r -= (float)i;
2401828a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401828e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018292:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018296:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
2401829a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401829e:	3301      	adds	r3, #1
240182a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240182a4:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240182a8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240182ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240182b0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240182b4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240182b8:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240182bc:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240182c0:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240182c4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
240182c8:	e6de      	b.n	24018088 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
240182ca:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
240182ce:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
240182d2:	eef0 fa6b 	vmov.f32	s31, s23
240182d6:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
240182da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
240182de:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
240182e2:	f280 81eb 	bge.w	240186bc <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240182e6:	ee7d ea2d 	vadd.f32	s29, s26, s27
240182ea:	ed5f 7add 	vldr	s15, [pc, #-884]	; 24017f78 <tMBSineTri_tick+0x428>
240182ee:	ee6c caa7 	vmul.f32	s25, s25, s15
240182f2:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
240182f6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240182fa:	eeaa 0a2c 	vfma.f32	s0, s20, s25
240182fe:	f002 ff9f 	bl	2401b240 <lrintf>
	r -= (float)i;
24018302:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018306:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
2401830a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
2401830e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018312:	3301      	adds	r3, #1
	r -= (float)i;
24018314:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401831c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018320:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018324:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24018328:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401832c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018330:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018334:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018338:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401833c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018340:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018344:	3301      	adds	r3, #1
24018346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401834a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
2401834e:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018352:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018356:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
2401835a:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401835e:	3301      	adds	r3, #1
24018360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
24018364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018368:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401836c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018370:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24018374:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018378:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401837c:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018380:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018384:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018388:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401838c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018390:	f103 0301 	add.w	r3, r3, #1
24018394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018398:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
2401839c:	d940      	bls.n	24018420 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
2401839e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
240183a2:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
240183a4:	eeed 8a0a 	vfma.f32	s17, s26, s20
240183a8:	e438      	b.n	24017c1c <tMBSineTri_tick+0xcc>
                p -= 1.0f;
240183aa:	eddf 7ac3 	vldr	s15, [pc, #780]	; 240186b8 <tMBSineTri_tick+0xb68>
240183ae:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
240183b2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
240183b6:	683f      	ldr	r7, [r7, #0]
240183b8:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240183bc:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
240183c0:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
240183c4:	eeaa 0a2c 	vfma.f32	s0, s20, s25
240183c8:	f002 ff3a 	bl	2401b240 <lrintf>
	r -= (float)i;
240183cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240183d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240183d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240183d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240183dc:	3301      	adds	r3, #1
	scale *= w;
240183de:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
240183e2:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240183e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240183ea:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240183ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240183f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240183f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240183fa:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240183fe:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24018402:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018406:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401840a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401840e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24018412:	3301      	adds	r3, #1
24018414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018418:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401841c:	f7ff bbfe 	b.w	24017c1c <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24018420:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
24018424:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
24018426:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
2401842a:	ee79 7a4a 	vsub.f32	s15, s18, s20
2401842e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24018432:	eeab 0a2c 	vfma.f32	s0, s22, s25
24018436:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
2401843a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
2401843e:	f002 feff 	bl	2401b240 <lrintf>
	r -= (float)i;
24018442:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018446:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401844a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401844e:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
24018452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018456:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401845c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018460:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018464:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018468:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401846c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24018470:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018474:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24018478:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401847c:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018480:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018484:	e600      	b.n	24018088 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
24018486:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
2401848a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
2401848e:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
24018492:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
24018496:	f7ff bbc1 	b.w	24017c1c <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401849a:	ee7d ea2d 	vadd.f32	s29, s26, s27
2401849e:	eddf 7a86 	vldr	s15, [pc, #536]	; 240186b8 <tMBSineTri_tick+0xb68>
240184a2:	ee6c caa7 	vmul.f32	s25, s25, s15
240184a6:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
240184aa:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
240184ae:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
240184b2:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
240184b6:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
240184ba:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240184be:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
240184c2:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
240184c6:	eeab 0aac 	vfma.f32	s0, s23, s25
240184ca:	f002 feb9 	bl	2401b240 <lrintf>
	r -= (float)i;
240184ce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240184d2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240184d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240184da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240184de:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
240184e0:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
240184e4:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240184e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
240184ec:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240184f0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240184f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240184f8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
240184fc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018500:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24018504:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018508:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401850c:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018510:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018514:	3301      	adds	r3, #1
24018516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401851a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
2401851e:	f002 fe8f 	bl	2401b240 <lrintf>
	r -= (float)i;
24018522:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24018526:	f000 013f 	and.w	r1, r0, #63	; 0x3f
2401852a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
2401852e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018532:	eeda 7a2c 	vfnms.f32	s15, s20, s25
24018536:	e70c      	b.n	24018352 <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
24018538:	eddf ba5f 	vldr	s23, [pc, #380]	; 240186b8 <tMBSineTri_tick+0xb68>
2401853c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24018540:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
24018544:	683e      	ldr	r6, [r7, #0]
24018546:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
2401854a:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
2401854e:	eeab 0a8b 	vfma.f32	s0, s23, s22
24018552:	f002 fe75 	bl	2401b240 <lrintf>
	r -= (float)i;
24018556:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401855a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
2401855e:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
24018562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018566:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401856a:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
2401856c:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
24018570:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018578:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401857c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018580:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018584:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24018588:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401858c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018594:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018598:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401859c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240185a0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
240185a4:	3301      	adds	r3, #1
240185a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240185aa:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
240185ae:	2600      	movs	r6, #0
}
240185b0:	e64e      	b.n	24018250 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
240185b2:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
240185b6:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
240185ba:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
240185be:	2e00      	cmp	r6, #0
240185c0:	f040 8142 	bne.w	24018848 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
240185c4:	eeb5 eac0 	vcmpe.f32	s28, #0.0
240185c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185cc:	f100 81ab 	bmi.w	24018926 <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
240185d0:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
240185d4:	eddf 7a38 	vldr	s15, [pc, #224]	; 240186b8 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240185d8:	ee3d ba2d 	vadd.f32	s22, s26, s27
240185dc:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
240185e0:	eeed ba0e 	vfma.f32	s23, s26, s28
240185e4:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
240185e8:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
240185ec:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240185f0:	ee78 8ac8 	vsub.f32	s17, s17, s16
240185f4:	eea8 0aac 	vfma.f32	s0, s17, s25
240185f8:	f002 fe22 	bl	2401b240 <lrintf>
	r -= (float)i;
240185fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018600:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24018604:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24018608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401860c:	3301      	adds	r3, #1
	r -= (float)i;
2401860e:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018616:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401861a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401861e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24018622:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018626:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401862a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401862e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018632:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018636:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401863a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401863e:	3301      	adds	r3, #1
24018640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018644:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
24018648:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401864c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
24018650:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
24018654:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018658:	3301      	adds	r3, #1
2401865a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
2401865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018662:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018666:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401866a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
2401866e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018672:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018676:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401867a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401867e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018682:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018686:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401868a:	f103 0301 	add.w	r3, r3, #1
2401868e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018692:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
24018696:	f300 8107 	bgt.w	240188a8 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
2401869a:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
2401869e:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
240186a0:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240186a4:	ee78 7a67 	vsub.f32	s15, s16, s15
240186a8:	eeb0 8a6e 	vmov.f32	s16, s29
240186ac:	ee77 7a89 	vadd.f32	s15, s15, s18
240186b0:	eee7 8aad 	vfma.f32	s17, s15, s27
240186b4:	f7ff bab2 	b.w	24017c1c <tMBSineTri_tick+0xcc>
240186b8:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
240186bc:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240186c0:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 240186b8 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
240186c4:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
240186c8:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240186cc:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
240186d0:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240186d4:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
240186d8:	eeac 0aaf 	vfma.f32	s0, s25, s31
240186dc:	f002 fdb0 	bl	2401b240 <lrintf>
	r -= (float)i;
240186e0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240186e4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240186e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240186ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240186f0:	3301      	adds	r3, #1
	scale *= w;
240186f2:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
240186f6:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240186fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240186fe:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018702:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018706:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401870a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
2401870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24018712:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018716:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401871a:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401871e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018722:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018726:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401872a:	f103 0301 	add.w	r3, r3, #1
2401872e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018732:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24018736:	f200 81ae 	bhi.w	24018a96 <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
2401873a:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
2401873e:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
24018740:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
24018744:	ee77 7a88 	vadd.f32	s15, s15, s16
24018748:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
2401874c:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
24018750:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24018754:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
24018758:	eeac 0a8e 	vfma.f32	s0, s25, s28
2401875c:	f002 fd70 	bl	2401b240 <lrintf>
	r -= (float)i;
24018760:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018764:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018768:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401876c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018770:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018772:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
24018776:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401877a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401877e:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018782:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018786:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401878a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
2401878e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018792:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24018796:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401879a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401879e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240187a2:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
240187a6:	3301      	adds	r3, #1
240187a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240187ac:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
240187b0:	f8d7 8000 	ldr.w	r8, [r7]
240187b4:	e59f      	b.n	240182f6 <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
240187b6:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 240186b8 <tMBSineTri_tick+0xb68>
240187ba:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
240187be:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240187c2:	ee6c caa7 	vmul.f32	s25, s25, s15
240187c6:	ee7d ea2d 	vadd.f32	s29, s26, s27
240187ca:	eeaf 0a2c 	vfma.f32	s0, s30, s25
240187ce:	f002 fd37 	bl	2401b240 <lrintf>
	r -= (float)i;
240187d2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240187d6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240187da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240187de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240187e2:	3301      	adds	r3, #1
240187e4:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
240187e8:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
240187ec:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240187f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240187f4:	eeb0 fa6e 	vmov.f32	s30, s29
240187f8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240187fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018800:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
24018804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24018808:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401880c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24018810:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018814:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018818:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401881c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018820:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018824:	f103 0301 	add.w	r3, r3, #1
24018828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401882c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24018830:	da76      	bge.n	24018920 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
24018832:	ee79 7a08 	vadd.f32	s15, s18, s16
24018836:	f8d7 8000 	ldr.w	r8, [r7]
2401883a:	ee37 bacb 	vsub.f32	s22, s15, s22
2401883e:	eeeb ba2d 	vfma.f32	s23, s22, s27
24018842:	eef0 fa6b 	vmov.f32	s31, s23
24018846:	e556      	b.n	240182f6 <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
24018848:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
2401884c:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
24018850:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
24018854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24018858:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
2401885c:	f300 80d8 	bgt.w	24018a10 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
24018860:	eeb5 eac0 	vcmpe.f32	s28, #0.0
24018864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018868:	f100 812a 	bmi.w	24018ac0 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
2401886c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
24018870:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 240186b8 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
24018874:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24018878:	ee6c caa7 	vmul.f32	s25, s25, s15
2401887c:	ee78 8ac8 	vsub.f32	s17, s17, s16
24018880:	eeac 0aa8 	vfma.f32	s0, s25, s17
24018884:	f002 fcdc 	bl	2401b240 <lrintf>
	r -= (float)i;
24018888:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
2401888c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24018890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018894:	eedc 7aa8 	vfnms.f32	s15, s25, s17
24018898:	e6d8      	b.n	2401864c <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
2401889a:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
2401889e:	2600      	movs	r6, #0
                p -= 1.0f;
240188a0:	eeb0 aa4e 	vmov.f32	s20, s28
240188a4:	f7ff b9ba 	b.w	24017c1c <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
240188a8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
240188ac:	683f      	ldr	r7, [r7, #0]
240188ae:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
240188b2:	464e      	mov	r6, r9
}
240188b4:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
240188b8:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
240188bc:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
240188c0:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
240188c4:	eeab 0a2c 	vfma.f32	s0, s22, s25
240188c8:	f002 fcba 	bl	2401b240 <lrintf>
	r -= (float)i;
240188cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240188d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240188d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240188d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240188dc:	3301      	adds	r3, #1
	scale *= w;
240188de:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240188e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240188e6:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240188ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240188ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240188f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240188f6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240188fa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240188fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018902:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018906:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401890a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401890e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24018912:	3301      	adds	r3, #1
24018914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018918:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401891c:	f7ff b97e 	b.w	24017c1c <tMBSineTri_tick+0xcc>
24018920:	f8d7 8000 	ldr.w	r8, [r7]
24018924:	e5c1      	b.n	240184aa <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
24018926:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
2401892a:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 240186b8 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401892e:	ee3d fa2d 	vadd.f32	s30, s26, s27
24018932:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
24018936:	eeb0 0a6f 	vmov.f32	s0, s31
2401893a:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
2401893e:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
24018942:	eeac 0a8b 	vfma.f32	s0, s25, s22
24018946:	f002 fc7b 	bl	2401b240 <lrintf>
	r -= (float)i;
2401894a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401894e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018952:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24018956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401895a:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
2401895c:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018964:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
24018968:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401896c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018970:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018974:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
24018978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
2401897c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018980:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018984:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018988:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401898c:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018990:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018994:	f103 0301 	add.w	r3, r3, #1
24018998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401899c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
240189a0:	f340 80f7 	ble.w	24018b92 <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
240189a4:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
240189a8:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
240189aa:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
240189ae:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
240189b2:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
240189b6:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
240189ba:	eeac 0a8e 	vfma.f32	s0, s25, s28
240189be:	f002 fc3f 	bl	2401b240 <lrintf>
	r -= (float)i;
240189c2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240189c6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240189ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240189ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240189d2:	3301      	adds	r3, #1
	r -= (float)i;
240189d4:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240189d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240189dc:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240189e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240189e4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240189e8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240189ec:	eb06 0382 	add.w	r3, r6, r2, lsl #2
240189f0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240189f4:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240189f8:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240189fc:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24018a00:	3301      	adds	r3, #1
24018a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018a06:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
24018a0a:	f8d7 8000 	ldr.w	r8, [r7]
24018a0e:	e5eb      	b.n	240185e8 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
24018a10:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
24018a14:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 240186b8 <tMBSineTri_tick+0xb68>
24018a18:	ee3b fa49 	vsub.f32	s30, s22, s18
24018a1c:	ee6c caa7 	vmul.f32	s25, s25, s15
24018a20:	eeb0 0a6b 	vmov.f32	s0, s23
24018a24:	eeac 0a8f 	vfma.f32	s0, s25, s30
24018a28:	f002 fc0a 	bl	2401b240 <lrintf>
	r -= (float)i;
24018a2c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018a30:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018a34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24018a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018a3c:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
24018a3e:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24018a46:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
24018a4a:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018a4e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018a52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018a56:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
24018a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
24018a5e:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24018a62:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018a66:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24018a6a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018a6e:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018a72:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018a76:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018a7a:	f103 0301 	add.w	r3, r3, #1
24018a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018a82:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
24018a86:	d472      	bmi.n	24018b6e <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
24018a88:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
24018a8c:	f8d7 8000 	ldr.w	r8, [r7]
24018a90:	eeb1 ba4f 	vneg.f32	s22, s30
24018a94:	e5a8      	b.n	240185e8 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
24018a96:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
24018a9a:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
24018a9e:	eeac 0a8a 	vfma.f32	s0, s25, s20
24018aa2:	f002 fbcd 	bl	2401b240 <lrintf>
	r -= (float)i;
24018aa6:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24018aaa:	f000 013f 	and.w	r1, r0, #63	; 0x3f
24018aae:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24018ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
24018ab6:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
24018aba:	eedc 7a8a 	vfnms.f32	s15, s25, s20
24018abe:	e448      	b.n	24018352 <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24018ac0:	ee3d fa2d 	vadd.f32	s30, s26, s27
24018ac4:	eddf 7a39 	vldr	s15, [pc, #228]	; 24018bac <tMBSineTri_tick+0x105c>
24018ac8:	ee6c caa7 	vmul.f32	s25, s25, s15
24018acc:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
24018ad0:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24018ad4:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
24018ad8:	ee78 7a4b 	vsub.f32	s15, s16, s22
24018adc:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
24018ae0:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
24018ae4:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
24018ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
24018aec:	eeab 0a2c 	vfma.f32	s0, s22, s25
24018af0:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
24018af4:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
24018af8:	f002 fba2 	bl	2401b240 <lrintf>
	r -= (float)i;
24018afc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018b00:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018b04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018b08:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
24018b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018b10:	3301      	adds	r3, #1
24018b12:	ee78 8ac8 	vsub.f32	s17, s17, s16
24018b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
24018b1a:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
24018b1e:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018b22:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018b26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24018b2a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
24018b2e:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24018b32:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018b36:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24018b3a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018b3e:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24018b42:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018b46:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24018b4a:	3301      	adds	r3, #1
24018b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018b50:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
24018b54:	f002 fb74 	bl	2401b240 <lrintf>
	r -= (float)i;
24018b58:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24018b5c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
24018b60:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24018b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018b68:	eedc 7aa8 	vfnms.f32	s15, s25, s17
24018b6c:	e56e      	b.n	2401864c <tMBSineTri_tick+0xafc>
24018b6e:	f8d7 8000 	ldr.w	r8, [r7]
24018b72:	e7ad      	b.n	24018ad0 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
24018b74:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24018b78:	eeb0 aa4b 	vmov.f32	s20, s22
24018b7c:	f7ff b82f 	b.w	24017bde <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
24018b80:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
24018b84:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24018b86:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24018b8a:	eee7 8aad 	vfma.f32	s17, s15, s27
24018b8e:	f7ff b845 	b.w	24017c1c <tMBSineTri_tick+0xcc>
24018b92:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
24018b96:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
24018b9a:	eeb0 0a6f 	vmov.f32	s0, s31
24018b9e:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
24018ba2:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
24018ba6:	eeac 0aa8 	vfma.f32	s0, s25, s17
24018baa:	e7d3      	b.n	24018b54 <tMBSineTri_tick+0x1004>
24018bac:	42800000 	.word	0x42800000

24018bb0 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
24018bb0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24018bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24018bb6:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24018bba:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24018bbe:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24018bc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24018bc6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24018bca:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24018bce:	4770      	bx	lr

24018bd0 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
24018bd0:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24018bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24018bd6:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24018bda:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24018bde:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24018be2:	eef1 7a67 	vneg.f32	s15, s15
24018be6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24018bea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24018bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018bf2:	eef4 6ac7 	vcmpe.f32	s13, s14
24018bf6:	bfcc      	ite	gt
24018bf8:	2201      	movgt	r2, #1
24018bfa:	2200      	movle	r2, #0
24018bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c00:	f002 0201 	and.w	r2, r2, #1
24018c04:	bf88      	it	hi
24018c06:	2200      	movhi	r2, #0
24018c08:	b122      	cbz	r2, 24018c14 <tMBSineTri_sync+0x44>
24018c0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
24018c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c12:	da04      	bge.n	24018c1e <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24018c14:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24018c2c <tMBSineTri_sync+0x5c>
24018c18:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
24018c1c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24018c1e:	ee37 7a66 	vsub.f32	s14, s14, s13
24018c22:	ee27 7a06 	vmul.f32	s14, s14, s12
24018c26:	ed83 7a05 	vstr	s14, [r3, #20]
}
24018c2a:	4770      	bx	lr
24018c2c:	00000000 	.word	0x00000000

24018c30 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
24018c30:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24018c32:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
24018c36:	4770      	bx	lr

24018c38 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
24018c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24018c3a:	698e      	ldr	r6, [r1, #24]
{
24018c3c:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24018c3e:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24018c42:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24018c44:	4631      	mov	r1, r6
24018c46:	f7fc fed3 	bl	240159f0 <mpool_alloc>
24018c4a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24018c4c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
24018c4e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24018c50:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24018c52:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24018c54:	ed9f 6a16 	vldr	s12, [pc, #88]	; 24018cb0 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
24018c58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
24018c5c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24018c60:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
24018c64:	eddf 7a13 	vldr	s15, [pc, #76]	; 24018cb4 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
24018c68:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24018c6c:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
24018c6e:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
24018c72:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
24018c74:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24018c76:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
24018c78:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24018c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
24018c7e:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
24018c80:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
24018c82:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
24018c84:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24018c86:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24018c8a:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24018c8c:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24018c90:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24018c94:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
24018c96:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24018c9a:	f001 fead 	bl	2401a9f8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24018c9e:	4629      	mov	r1, r5
24018ca0:	f104 0030 	add.w	r0, r4, #48	; 0x30
24018ca4:	2220      	movs	r2, #32
}
24018ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24018caa:	f001 bea5 	b.w	2401a9f8 <memset>
24018cae:	bf00      	nop
24018cb0:	3b14f209 	.word	0x3b14f209
24018cb4:	43dc0000 	.word	0x43dc0000

24018cb8 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
24018cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24018cbc:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
24018cc0:	6804      	ldr	r4, [r0, #0]
{
24018cc2:	b082      	sub	sp, #8
24018cc4:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
24018cc6:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
24018cca:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24018cce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
24018cd2:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
24018cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24018cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018cdc:	f340 813d 	ble.w	24018f5a <tMBSaw_tick+0x2a2>
24018ce0:	69a3      	ldr	r3, [r4, #24]
24018ce2:	2b00      	cmp	r3, #0
24018ce4:	f340 80b1 	ble.w	24018e4a <tMBSaw_tick+0x192>
24018ce8:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
24018cec:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24018cf0:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
24018cf4:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24018cf8:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24018cfc:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
24018d00:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
24018d04:	eefd 6ac7 	vcvt.s32.f32	s13, s14
24018d08:	ee37 8a27 	vadd.f32	s16, s14, s15
24018d0c:	eef8 7ae6 	vcvt.f32.s32	s15, s13
24018d10:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
24018d14:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24018d18:	eeb4 8ac9 	vcmpe.f32	s16, s18
24018d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018d20:	f280 8135 	bge.w	24018f8e <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
24018d24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24018d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018d2c:	f100 8193 	bmi.w	24019056 <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
24018d30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24018d34:	1d33      	adds	r3, r6, #4
24018d36:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
24018d3a:	ee37 7a48 	vsub.f32	s14, s14, s16
24018d3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24018d42:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24018d46:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
24018d4a:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018d4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
24018d52:	2b00      	cmp	r3, #0
24018d54:	f000 817a 	beq.w	2401904c <tMBSaw_tick+0x394>
24018d58:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24018d5c:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018d60:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018d64:	2000      	movs	r0, #0
24018d66:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
24018d6a:	4deb      	ldr	r5, [pc, #940]	; (24019118 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24018d6c:	ebae 0300 	sub.w	r3, lr, r0
24018d70:	b29b      	uxth	r3, r3
24018d72:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24018d76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24018d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018d7e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018d82:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24018d86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24018d8a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24018d8e:	b289      	uxth	r1, r1
24018d90:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24018d94:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24018d96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018d9a:	fa1f f888 	uxth.w	r8, r8
24018d9e:	fa1f f989 	uxth.w	r9, r9
24018da2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24018da6:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24018daa:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
24018dae:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
24018db2:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24018db6:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018db8:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
24018dbc:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
24018dc0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018dc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018dc8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
24018dcc:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018dd0:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24018dd2:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018dd6:	edd9 6a01 	vldr	s13, [r9, #4]
24018dda:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24018dde:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018de2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018de6:	eee6 7a26 	vfma.f32	s15, s12, s13
24018dea:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24018dee:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018df2:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
24018df6:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24018df8:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24018dfc:	f0c0 80a6 	bcc.w	24018f4c <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
24018e00:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018e04:	3001      	adds	r0, #1
24018e06:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
24018e0a:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018e0c:	4290      	cmp	r0, r2
			c->numBLEPs--;
24018e0e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018e12:	dbab      	blt.n	24018d6c <tMBSaw_tick+0xb4>
24018e14:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
24018e18:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24018e1c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
24018e1e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
24018e22:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
24018e26:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24018e2a:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
24018e2e:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
24018e30:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
24018e34:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
24018e38:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
24018e3c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
24018e40:	b002      	add	sp, #8
24018e42:	ecbd 8b08 	vpop	{d8-d11}
24018e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
24018e4a:	edd4 8a05 	vldr	s17, [r4, #20]
24018e4e:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
24018e52:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24018e56:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
24018e5a:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
24018e5e:	eebd 9aca 	vcvt.s32.f32	s18, s20
24018e62:	ee77 7a8a 	vadd.f32	s15, s15, s20
24018e66:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
24018e6a:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24018e6e:	f040 815e 	bne.w	2401912e <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
24018e72:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
24018e76:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
24018e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24018e7e:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
24018e82:	f340 80b2 	ble.w	24018fea <tMBSaw_tick+0x332>
24018e86:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
24018e8a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24018e8e:	eef4 aacb 	vcmpe.f32	s21, s22
24018e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018e96:	db2d      	blt.n	24018ef4 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
24018e98:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24018e9c:	eddf ba9f 	vldr	s23, [pc, #636]	; 2401911c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
24018ea0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24018ea4:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24018ea8:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
24018eac:	eea9 0a2b 	vfma.f32	s0, s18, s23
24018eb0:	f002 f9c6 	bl	2401b240 <lrintf>
	r -= (float)i;
24018eb4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018eb8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018ebc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24018ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018ec4:	3301      	adds	r3, #1
	r -= (float)i;
24018ec6:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24018ece:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018ed2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24018ed6:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018eda:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24018ede:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018ee2:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018ee6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
24018eea:	3301      	adds	r3, #1
24018eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018ef0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
24018ef4:	eef5 aac0 	vcmpe.f32	s21, #0.0
24018ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018efc:	f100 80da 	bmi.w	240190b4 <tMBSaw_tick+0x3fc>
        if (sw > 0)
24018f00:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24018f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018f08:	dc74      	bgt.n	24018ff4 <tMBSaw_tick+0x33c>
        else if (sw < 0)
24018f0a:	f57f af11 	bpl.w	24018d30 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
24018f0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24018f12:	ed9f 9a82 	vldr	s18, [pc, #520]	; 2401911c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
24018f16:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
24018f1a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24018f1c:	ee28 9a89 	vmul.f32	s18, s17, s18
24018f20:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
24018f24:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
24018f28:	eea9 0a28 	vfma.f32	s0, s18, s17
24018f2c:	f002 f988 	bl	2401b240 <lrintf>
	r -= (float)i;
24018f30:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018f34:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018f38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24018f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018f40:	3301      	adds	r3, #1
	r -= (float)i;
24018f42:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018f4a:	e06b      	b.n	24019024 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24018f4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
24018f50:	3001      	adds	r0, #1
24018f52:	4283      	cmp	r3, r0
24018f54:	f73f af0a 	bgt.w	24018d6c <tMBSaw_tick+0xb4>
24018f58:	e75c      	b.n	24018e14 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
24018f5a:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
24018f5e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
24018f62:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
24018f66:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24018f6a:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
24018f6e:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
24018f72:	eebd 7ac8 	vcvt.s32.f32	s14, s16
24018f76:	ee77 7a88 	vadd.f32	s15, s15, s16
24018f7a:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
24018f7e:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
24018f82:	eeb4 8ac9 	vcmpe.f32	s16, s18
24018f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018f8a:	f6ff aecb 	blt.w	24018d24 <tMBSaw_tick+0x6c>
        p -= 1.0f;
24018f8e:	eddf 7a63 	vldr	s15, [pc, #396]	; 2401911c <tMBSaw_tick+0x464>
24018f92:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24018f96:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
24018f9a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24018f9c:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
24018fa0:	eea8 0a88 	vfma.f32	s0, s17, s16
24018fa4:	f002 f94c 	bl	2401b240 <lrintf>
	r -= (float)i;
24018fa8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018fac:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24018fb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24018fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018fb8:	3301      	adds	r3, #1
	r -= (float)i;
24018fba:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24018fc2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24018fc6:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24018fca:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24018fce:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
24018fd2:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24018fd6:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24018fda:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
24018fde:	3301      	adds	r3, #1
24018fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24018fe4:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
24018fe8:	e6a2      	b.n	24018d30 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
24018fea:	f100 809b 	bmi.w	24019124 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
24018fee:	eeb0 8a49 	vmov.f32	s16, s18
24018ff2:	e74a      	b.n	24018e8a <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
24018ff4:	eddf 7a49 	vldr	s15, [pc, #292]	; 2401911c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
24018ff8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
24018ffc:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24018ffe:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
24019002:	eea8 0a88 	vfma.f32	s0, s17, s16
24019006:	f002 f91b 	bl	2401b240 <lrintf>
	r -= (float)i;
2401900a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401900e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24019012:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24019016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401901a:	3301      	adds	r3, #1
	r -= (float)i;
2401901c:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24019024:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019028:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
2401902c:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24019030:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
24019034:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24019038:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401903c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
24019040:	3301      	adds	r3, #1
24019042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24019046:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
2401904a:	e671      	b.n	24018d30 <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
2401904c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
24019050:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
24019054:	e6e0      	b.n	24018e18 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
24019056:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
2401905a:	ed9f aa30 	vldr	s20, [pc, #192]	; 2401911c <tMBSaw_tick+0x464>
2401905e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
24019062:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
24019064:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24019068:	eea8 0a8a 	vfma.f32	s0, s17, s20
2401906c:	f002 f8e8 	bl	2401b240 <lrintf>
	r -= (float)i;
24019070:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019074:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24019078:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401907c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24019080:	4a27      	ldr	r2, [pc, #156]	; (24019120 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019082:	3301      	adds	r3, #1
	r -= (float)i;
24019084:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401908c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24019090:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24019094:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24019098:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
2401909c:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240190a0:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240190a4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
240190a8:	3301      	adds	r3, #1
240190aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240190ae:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
240190b2:	e63d      	b.n	24018d30 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
240190b4:	ed9f ba19 	vldr	s22, [pc, #100]	; 2401911c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
240190b8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
240190bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
240190c0:	682f      	ldr	r7, [r5, #0]
240190c2:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
240190c6:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
240190ca:	eeab 0a09 	vfma.f32	s0, s22, s18
240190ce:	f002 f8b7 	bl	2401b240 <lrintf>
	r -= (float)i;
240190d2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240190d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240190da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240190de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240190e2:	4a0f      	ldr	r2, [pc, #60]	; (24019120 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240190e4:	3301      	adds	r3, #1
	r -= (float)i;
240190e6:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240190ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240190ee:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240190f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
240190f6:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240190fa:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
240190fe:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24019102:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24019106:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
2401910a:	3301      	adds	r3, #1
2401910c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24019110:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
24019114:	e6f4      	b.n	24018f00 <tMBSaw_tick+0x248>
24019116:	bf00      	nop
24019118:	2402b310 	.word	0x2402b310
2401911c:	42800000 	.word	0x42800000
24019120:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
24019124:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24019128:	ee38 8a47 	vsub.f32	s16, s16, s14
2401912c:	e6ad      	b.n	24018e8a <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
2401912e:	eeb0 8a49 	vmov.f32	s16, s18
24019132:	e5ef      	b.n	24018d14 <tMBSaw_tick+0x5c>

24019134 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
24019134:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
24019136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
2401913a:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
2401913e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
24019142:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24019146:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
2401914a:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
2401914e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24019152:	4770      	bx	lr

24019154 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
24019154:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24019156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
2401915a:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
2401915e:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
24019162:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24019166:	eef1 7a67 	vneg.f32	s15, s15
2401916a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401916e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24019172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019176:	eef4 6ac7 	vcmpe.f32	s13, s14
2401917a:	bfcc      	ite	gt
2401917c:	2201      	movgt	r2, #1
2401917e:	2200      	movle	r2, #0
24019180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019184:	f002 0201 	and.w	r2, r2, #1
24019188:	bf88      	it	hi
2401918a:	2200      	movhi	r2, #0
2401918c:	b122      	cbz	r2, 24019198 <tMBSaw_sync+0x44>
2401918e:	eeb5 0a40 	vcmp.f32	s0, #0.0
24019192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019196:	da04      	bge.n	240191a2 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24019198:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240191b0 <tMBSaw_sync+0x5c>
2401919c:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
240191a0:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
240191a2:	ee37 7a66 	vsub.f32	s14, s14, s13
240191a6:	ee27 7a06 	vmul.f32	s14, s14, s12
240191aa:	ed83 7a04 	vstr	s14, [r3, #16]
}
240191ae:	4770      	bx	lr
240191b0:	00000000 	.word	0x00000000

240191b4 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
240191b4:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240191b6:	698d      	ldr	r5, [r1, #24]
{
240191b8:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240191ba:	f44f 703e 	mov.w	r0, #760	; 0x2f8
240191be:	4629      	mov	r1, r5
240191c0:	f7fc fc16 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
240191c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240191c8:	6030      	str	r0, [r6, #0]
    c->active = 1;
240191ca:	2201      	movs	r2, #1
    c->mempool = m;
240191cc:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240191ce:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
240191d0:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
240191d2:	2500      	movs	r5, #0
    c->gain = 1.0f;
240191d4:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
240191d8:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240191dc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
240191e0:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
240191e4:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
240191e6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 24019240 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
240191ea:	eddf 7a16 	vldr	s15, [pc, #88]	; 24019244 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
240191ee:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
240191f2:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
240191f4:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240191f8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
240191fc:	6185      	str	r5, [r0, #24]
    c->_j = 0;
240191fe:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24019200:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24019202:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
24019206:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
24019208:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
2401920a:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
2401920c:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24019210:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24019212:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
24019216:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
24019218:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
2401921a:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
2401921c:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
2401921e:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24019220:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24019224:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24019226:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
24019228:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
2401922c:	f001 fbe4 	bl	2401a9f8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24019230:	4629      	mov	r1, r5
24019232:	f104 0048 	add.w	r0, r4, #72	; 0x48
24019236:	2220      	movs	r2, #32
}
24019238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
2401923c:	f001 bbdc 	b.w	2401a9f8 <memset>
24019240:	3b14f209 	.word	0x3b14f209
24019244:	43dc0000 	.word	0x43dc0000

24019248 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
24019248:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
2401924a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
2401924e:	4770      	bx	lr

24019250 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24019250:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24019252:	698c      	ldr	r4, [r1, #24]
{
24019254:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24019256:	201c      	movs	r0, #28
24019258:	4621      	mov	r1, r4
2401925a:	f7fc fbc9 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
2401925e:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24019260:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24019262:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24019264:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24019266:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2401927c <tIntPhasor_init+0x2c>
    c->phase    =  0;
2401926a:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401926c:	edd3 7a01 	vldr	s15, [r3, #4]
24019270:	ee67 7a87 	vmul.f32	s15, s15, s14
24019274:	edc0 7a06 	vstr	s15, [r0, #24]
}
24019278:	bd38      	pop	{r3, r4, r5, pc}
2401927a:	bf00      	nop
2401927c:	4f800000 	.word	0x4f800000

24019280 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24019280:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24019282:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401929c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
24019286:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
2401928a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
2401928c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24019290:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24019292:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24019296:	ee20 0a27 	vmul.f32	s0, s0, s15
2401929a:	4770      	bx	lr
2401929c:	2f80000d 	.word	0x2f80000d

240192a0 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
240192a0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240192a2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240192a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240192aa:	ee20 0a27 	vmul.f32	s0, s0, s15
240192ae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240192b2:	ed83 0a02 	vstr	s0, [r3, #8]
}
240192b6:	4770      	bx	lr

240192b8 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
240192b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240192bc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240192d8 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
240192c0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240192c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240192c6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240192ca:	ee20 0a07 	vmul.f32	s0, s0, s14
240192ce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240192d2:	ed83 0a01 	vstr	s0, [r3, #4]
}
240192d6:	4770      	bx	lr
240192d8:	4f800000 	.word	0x4f800000

240192dc <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
240192dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240192de:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240192e2:	698f      	ldr	r7, [r1, #24]
{
240192e4:	4606      	mov	r6, r0
240192e6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240192e8:	2010      	movs	r0, #16
240192ea:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240192ec:	ed9f 8a21 	vldr	s16, [pc, #132]	; 24019374 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240192f0:	f7fc fb7e 	bl	240159f0 <mpool_alloc>
240192f4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240192f6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240192f8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240192fa:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240192fc:	201c      	movs	r0, #28
240192fe:	4639      	mov	r1, r7
24019300:	f7fc fb76 	bl	240159f0 <mpool_alloc>
24019304:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24019306:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24019308:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
2401930a:	2700      	movs	r7, #0
2401930c:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401930e:	edd3 7a01 	vldr	s15, [r3, #4]
24019312:	ee67 7a88 	vmul.f32	s15, s15, s16
24019316:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401931a:	201c      	movs	r0, #28
    _tMempool* m = *mp;
2401931c:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401931e:	4629      	mov	r1, r5
24019320:	f7fc fb66 	bl	240159f0 <mpool_alloc>
24019324:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24019326:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
24019328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
2401932c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
2401932e:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24019330:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019334:	eddf 6a10 	vldr	s13, [pc, #64]	; 24019378 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24019338:	ee27 7a08 	vmul.f32	s14, s14, s16
2401933c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24019340:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019342:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24019344:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019348:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
2401934c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401934e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24019352:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24019356:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401935a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401935e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24019362:	ee67 7a88 	vmul.f32	s15, s15, s16
24019366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401936a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401936e:	ecbd 8b02 	vpop	{d8}
24019372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24019374:	4f800000 	.word	0x4f800000
24019378:	2f80000d 	.word	0x2f80000d

2401937c <tSquareLFO_initToPool>:
{
2401937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401937e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24019382:	680f      	ldr	r7, [r1, #0]
{
24019384:	4606      	mov	r6, r0
24019386:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24019388:	2010      	movs	r0, #16
2401938a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401938c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 24019414 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24019390:	f7fc fb2e 	bl	240159f0 <mpool_alloc>
24019394:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24019396:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24019398:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401939a:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401939c:	201c      	movs	r0, #28
2401939e:	4639      	mov	r1, r7
240193a0:	f7fc fb26 	bl	240159f0 <mpool_alloc>
240193a4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240193a6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240193a8:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
240193aa:	2700      	movs	r7, #0
240193ac:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240193ae:	edd3 7a01 	vldr	s15, [r3, #4]
240193b2:	ee67 7a88 	vmul.f32	s15, s15, s16
240193b6:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240193ba:	201c      	movs	r0, #28
    _tMempool* m = *mp;
240193bc:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240193be:	4629      	mov	r1, r5
240193c0:	f7fc fb16 	bl	240159f0 <mpool_alloc>
240193c4:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240193c6:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
240193c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240193cc:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240193ce:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240193d0:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240193d4:	eddf 6a10 	vldr	s13, [pc, #64]	; 24019418 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240193d8:	ee27 7a08 	vmul.f32	s14, s14, s16
240193dc:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
240193e0:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240193e2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240193e4:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240193e8:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240193ec:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240193ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240193f2:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
240193f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240193fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240193fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24019402:	ee67 7a88 	vmul.f32	s15, s15, s16
24019406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401940a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401940e:	ecbd 8b02 	vpop	{d8}
24019412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24019414:	4f800000 	.word	0x4f800000
24019418:	2f80000d 	.word	0x2f80000d

2401941c <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
2401941c:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401941e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24019422:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24019460 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
24019426:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
24019428:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
2401942c:	4403      	add	r3, r0
2401942e:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24019430:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24019434:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24019436:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
2401943a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
2401943e:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24019440:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24019444:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24019446:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401944a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401944e:	ee30 0a66 	vsub.f32	s0, s0, s13
24019452:	ee77 7ac6 	vsub.f32	s15, s15, s12
24019456:	eea7 0a87 	vfma.f32	s0, s15, s14
}
2401945a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401945e:	4770      	bx	lr
24019460:	2f80000d 	.word	0x2f80000d

24019464 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24019464:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24019466:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019468:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401946c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019470:	ee60 7a27 	vmul.f32	s15, s0, s15
24019474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24019478:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
2401947c:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401947e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24019482:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019486:	ee20 0a27 	vmul.f32	s0, s0, s15
2401948a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401948e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24019492:	4770      	bx	lr

24019494 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24019494:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019496:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240194cc <tSquareLFO_setPulseWidth+0x38>
2401949a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
2401949c:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240194a0:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
240194a4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240194d0 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240194a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
240194ac:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240194ae:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
240194b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
240194b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240194ba:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240194be:	ee20 0a07 	vmul.f32	s0, s0, s14
240194c2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240194c6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240194ca:	4770      	bx	lr
240194cc:	2f80000d 	.word	0x2f80000d
240194d0:	4f800000 	.word	0x4f800000

240194d4 <tSquareLFO_setPhase>:
    int i = phase;
240194d4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
240194d8:	eddf 6a13 	vldr	s13, [pc, #76]	; 24019528 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
240194dc:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240194de:	ed9f 6a13 	vldr	s12, [pc, #76]	; 2401952c <tSquareLFO_setPhase+0x58>
    phase -= i;
240194e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
240194e6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
240194e8:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
240194ec:	ee20 0a26 	vmul.f32	s0, s0, s13
240194f0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240194f4:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240194f8:	689a      	ldr	r2, [r3, #8]
240194fa:	edd3 7a01 	vldr	s15, [r3, #4]
240194fe:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24019502:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019504:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24019508:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
2401950c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24019510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24019514:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24019518:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401951c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24019520:	edc3 7a01 	vstr	s15, [r3, #4]
}
24019524:	4770      	bx	lr
24019526:	bf00      	nop
24019528:	4f800000 	.word	0x4f800000
2401952c:	2f80000d 	.word	0x2f80000d

24019530 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24019530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24019532:	460c      	mov	r4, r1
{
24019534:	4606      	mov	r6, r0
24019536:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24019538:	2010      	movs	r0, #16
    _tMempool* m = *mp;
2401953a:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401953e:	4639      	mov	r1, r7
24019540:	f7fc fa56 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
24019544:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24019546:	6030      	str	r0, [r6, #0]
24019548:	4604      	mov	r4, r0
    c->mempool = m;
2401954a:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
2401954e:	f7ff ff15 	bl	2401937c <tSquareLFO_initToPool>
    _tMempool* m = *mp;
24019552:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24019554:	201c      	movs	r0, #28
24019556:	4629      	mov	r1, r5
24019558:	f7fc fa4a 	bl	240159f0 <mpool_alloc>
    c->phase    =  0;
2401955c:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401955e:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24019560:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24019562:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24019564:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24019578 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
24019568:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401956a:	edd3 7a01 	vldr	s15, [r3, #4]
2401956e:	ee67 7a87 	vmul.f32	s15, s15, s14
24019572:	edc0 7a06 	vstr	s15, [r0, #24]
}
24019576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24019578:	4f800000 	.word	0x4f800000

2401957c <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
2401957c:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
2401957e:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24019580:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24019584:	eddf 5a1d 	vldr	s11, [pc, #116]	; 240195fc <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24019588:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
2401958c:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
2401958e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
24019592:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24019596:	4403      	add	r3, r0
24019598:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401959a:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
2401959e:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
240195a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
240195a4:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
240195a6:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
240195a8:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
240195ac:	6884      	ldr	r4, [r0, #8]
240195ae:	4423      	add	r3, r4
240195b0:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
240195b2:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
240195b6:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
240195b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240195bc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
240195c0:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
240195c2:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
240195c6:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240195c8:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240195cc:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240195d0:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240195d4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240195d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240195dc:	ee76 6ac5 	vsub.f32	s13, s13, s10
240195e0:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
240195e4:	ee30 0a00 	vadd.f32	s0, s0, s0
240195e8:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240195ec:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
240195f0:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240195f4:	eea6 0a07 	vfma.f32	s0, s12, s14
240195f8:	4770      	bx	lr
240195fa:	bf00      	nop
240195fc:	2f80000d 	.word	0x2f80000d

24019600 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
24019600:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
24019602:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24019604:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019606:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401960a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401960e:	ee60 7a27 	vmul.f32	s15, s0, s15
24019612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24019616:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
2401961a:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401961c:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24019620:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019624:	ee60 7a27 	vmul.f32	s15, s0, s15
24019628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401962c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24019630:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019632:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24019636:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401963a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401963e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24019642:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
24019646:	4770      	bx	lr

24019648 <tSawSquareLFO_setPhase>:
    int i = phase;
24019648:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
2401964c:	eddf 6a15 	vldr	s13, [pc, #84]	; 240196a4 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
24019650:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019652:	ed9f 6a15 	vldr	s12, [pc, #84]	; 240196a8 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
24019656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
2401965a:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
2401965c:	6890      	ldr	r0, [r2, #8]
    phase -= i;
2401965e:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
24019662:	ee20 0a26 	vmul.f32	s0, s0, s13
24019666:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2401966a:	edc0 7a01 	vstr	s15, [r0, #4]
2401966e:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24019672:	6890      	ldr	r0, [r2, #8]
24019674:	edd2 7a01 	vldr	s15, [r2, #4]
24019678:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
2401967c:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401967e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24019682:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24019686:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401968a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401968e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24019692:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401969a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
2401969e:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
240196a0:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
240196a2:	4770      	bx	lr
240196a4:	4f800000 	.word	0x4f800000
240196a8:	2f80000d 	.word	0x2f80000d

240196ac <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
240196ac:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
240196ae:	ed83 0a01 	vstr	s0, [r3, #4]
}
240196b2:	4770      	bx	lr

240196b4 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
240196b4:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240196b6:	698d      	ldr	r5, [r1, #24]
{
240196b8:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240196ba:	2018      	movs	r0, #24
240196bc:	4629      	mov	r1, r5
240196be:	f7fc f997 	bl	240159f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240196c2:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240196c4:	6020      	str	r0, [r4, #0]
    c->mempool = m;
240196c6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240196c8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240196ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24019700 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
240196ce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24019704 <tTriLFO_init+0x50>
    c->phase    =  0;
240196d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240196d6:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240196da:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
240196de:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240196e2:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
240196e6:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240196e8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240196ec:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240196f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
240196f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240196f8:	edc3 7a02 	vstr	s15, [r3, #8]
}
240196fc:	bd38      	pop	{r3, r4, r5, pc}
240196fe:	bf00      	nop
24019700:	4f800000 	.word	0x4f800000
24019704:	435c0000 	.word	0x435c0000

24019708 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24019708:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401970a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401970e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24019738 <tTriLFO_tick+0x30>
    c->phase += c->inc;
24019712:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
24019716:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24019718:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
2401971c:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
2401971e:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24019722:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24019726:	ee07 3a90 	vmov	s15, r3
2401972a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401972e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24019732:	ee30 0a00 	vadd.f32	s0, s0, s0
24019736:	4770      	bx	lr
24019738:	2ffffff6 	.word	0x2ffffff6

2401973c <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
2401973c:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401973e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24019742:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24019746:	ee20 0a27 	vmul.f32	s0, s0, s15
2401974a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401974e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24019752:	4770      	bx	lr

24019754 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24019754:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24019758:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401975a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401975e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24019762:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24019766:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401976a:	4770      	bx	lr

2401976c <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
2401976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401976e:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24019772:	698f      	ldr	r7, [r1, #24]
{
24019774:	4606      	mov	r6, r0
24019776:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24019778:	2010      	movs	r0, #16
2401977a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401977c:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 240197f8 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24019780:	f7fc f936 	bl	240159f0 <mpool_alloc>
24019784:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24019786:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24019788:	6034      	str	r4, [r6, #0]
    c->mempool = m;
2401978a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
2401978c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401978e:	4631      	mov	r1, r6
24019790:	f7fc f92e 	bl	240159f0 <mpool_alloc>
24019794:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24019796:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24019798:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
2401979a:	2600      	movs	r6, #0
    c->freq  = freq;
2401979c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240197fc <tSineTriLFO_init+0x90>
    c->phase    =  0;
240197a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240197a4:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240197a8:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
240197ac:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240197b0:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240197b4:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
240197b6:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240197b8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240197bc:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240197c0:	ee67 7a87 	vmul.f32	s15, s15, s14
240197c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240197c8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
240197cc:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240197ce:	4629      	mov	r1, r5
240197d0:	f7fc f90e 	bl	240159f0 <mpool_alloc>
240197d4:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240197d6:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
240197d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
240197dc:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240197de:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240197e2:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240197e6:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240197e8:	ee67 7a88 	vmul.f32	s15, s15, s16
240197ec:	edc0 7a04 	vstr	s15, [r0, #16]
}
240197f0:	ecbd 8b02 	vpop	{d8}
240197f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240197f6:	bf00      	nop
240197f8:	4f800000 	.word	0x4f800000
240197fc:	435c0000 	.word	0x435c0000

24019800 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24019800:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
24019802:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24019804:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24019808:	4a20      	ldr	r2, [pc, #128]	; (2401988c <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401980a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
2401980e:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24019810:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24019890 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
24019814:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24019816:	eddf 4a1f 	vldr	s9, [pc, #124]	; 24019894 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
2401981a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
2401981e:	4403      	add	r3, r0
24019820:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
24019822:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
24019824:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24019826:	f3c3 0314 	ubfx	r3, r3, #0, #21
2401982a:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
2401982e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24019832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24019836:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
24019838:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
2401983a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
2401983e:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
24019840:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24019842:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24019846:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
2401984a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
2401984e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24019852:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
24019856:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
2401985a:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401985e:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24019862:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24019866:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401986a:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401986e:	ee07 3a10 	vmov	s14, r3
24019872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24019876:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401987a:	eea7 0a24 	vfma.f32	s0, s14, s9
}
2401987e:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
24019880:	ee26 0a00 	vmul.f32	s0, s12, s0
}
24019884:	eea5 0aa6 	vfma.f32	s0, s11, s13
24019888:	4770      	bx	lr
2401988a:	bf00      	nop
2401988c:	24024b8c 	.word	0x24024b8c
24019890:	35000004 	.word	0x35000004
24019894:	2ffffff6 	.word	0x2ffffff6

24019898 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
24019898:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
2401989a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401989c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240198a0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240198a4:	ee60 7a27 	vmul.f32	s15, s0, s15
240198a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240198ac:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
240198b0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240198b2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
240198b6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240198ba:	ee20 0a27 	vmul.f32	s0, s0, s15
240198be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240198c2:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
240198c6:	4770      	bx	lr

240198c8 <tSineTriLFO_setPhase>:
    int i = phase;
240198c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
240198cc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240198f4 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
240198d0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240198d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
240198d6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
240198d8:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
240198dc:	ee20 0a07 	vmul.f32	s0, s0, s14
240198e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240198e4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
240198e8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
240198ec:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
240198ee:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
240198f2:	4770      	bx	lr
240198f4:	4f800000 	.word	0x4f800000

240198f8 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
240198f8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
240198fa:	ed83 0a01 	vstr	s0, [r3, #4]

 }
240198fe:	4770      	bx	lr

24019900 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
24019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24019904:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
24019908:	f8d3 9000 	ldr.w	r9, [r3]
{
2401990c:	b083      	sub	sp, #12
2401990e:	460e      	mov	r6, r1
24019910:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24019912:	4649      	mov	r1, r9
24019914:	2064      	movs	r0, #100	; 0x64
{
24019916:	461d      	mov	r5, r3
24019918:	eeb0 8a40 	vmov.f32	s16, s0
2401991c:	eeb0 9a41 	vmov.f32	s18, s2
24019920:	4617      	mov	r7, r2
24019922:	eef0 9a61 	vmov.f32	s19, s3
24019926:	eeb0 aa42 	vmov.f32	s20, s4
2401992a:	eef0 aa62 	vmov.f32	s21, s5
2401992e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24019932:	f7fc f85d 	bl	240159f0 <mpool_alloc>
24019936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
2401993a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
2401993e:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019942:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
24019946:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
2401994a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401994e:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
24019952:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24019956:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
24019958:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
2401995c:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24019960:	4604      	mov	r4, r0
    p->curr=0.0f;
24019962:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
24019964:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019968:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
2401996c:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
24019970:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
24019974:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019976:	eddf 0a82 	vldr	s1, [pc, #520]	; 24019b80 <tSimpleLivingString3_initToPool+0x280>
2401997a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
2401997c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
2401997e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24019982:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019986:	4650      	mov	r0, sl
24019988:	ee2b 0a2b 	vmul.f32	s0, s22, s23
2401998c:	ee20 0a27 	vmul.f32	s0, s0, s15
24019990:	f7fa f852 	bl	24013a38 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24019994:	ed94 0a02 	vldr	s0, [r4, #8]
24019998:	462a      	mov	r2, r5
2401999a:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401999c:	4658      	mov	r0, fp
2401999e:	f7f9 f8c7 	bl	24012b30 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
240199a2:	ed94 0a02 	vldr	s0, [r4, #8]
240199a6:	462a      	mov	r2, r5
240199a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
240199aa:	4648      	mov	r0, r9
240199ac:	f7f9 f8c0 	bl	24012b30 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
240199b0:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
240199b4:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
240199b8:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
240199bc:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
240199c0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 24019b70 <tSimpleLivingString3_initToPool+0x270>
240199c4:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
240199c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
240199cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240199d0:	f100 80c7 	bmi.w	24019b62 <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240199d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
240199d6:	005b      	lsls	r3, r3, #1
240199d8:	ee07 3a90 	vmov	s15, r3
240199dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
240199e0:	fec7 7ac0 	vminnm.f32	s15, s15, s0
240199e4:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240199e8:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
240199ec:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240199f0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240199f4:	f7fa f84c 	bl	24013a90 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240199f8:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
240199fc:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019a00:	eddf 7a60 	vldr	s15, [pc, #384]	; 24019b84 <tSimpleLivingString3_initToPool+0x284>
24019a04:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019a08:	ed96 6a01 	vldr	s12, [r6, #4]
24019a0c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019a10:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019a14:	ed9f 0b58 	vldr	d0, [pc, #352]	; 24019b78 <tSimpleLivingString3_initToPool+0x278>
24019a18:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24019a1c:	ee27 7b06 	vmul.f64	d7, d7, d6
24019a20:	ee80 0b07 	vdiv.f64	d0, d0, d7
24019a24:	f001 f928 	bl	2401ac78 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24019a28:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019a2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019a2e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24019a32:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24019a36:	ed94 0a02 	vldr	s0, [r4, #8]
24019a3a:	f7f9 f93f 	bl	24012cbc <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24019a3e:	ed94 0a02 	vldr	s0, [r4, #8]
24019a42:	4648      	mov	r0, r9
24019a44:	f7f9 f93a 	bl	24012cbc <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24019a48:	4658      	mov	r0, fp
24019a4a:	f7f9 f8e9 	bl	24012c20 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24019a4e:	4648      	mov	r0, r9
24019a50:	f7f9 f8e6 	bl	24012c20 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24019a54:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24019a58:	4629      	mov	r1, r5
24019a5a:	eeb0 0a68 	vmov.f32	s0, s17
24019a5e:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
24019a60:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24019a64:	9301      	str	r3, [sp, #4]
24019a66:	f7fa f827 	bl	24013ab8 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24019a6a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24019a6e:	9801      	ldr	r0, [sp, #4]
24019a70:	f7fa f888 	bl	24013b84 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24019a74:	eeb0 0a68 	vmov.f32	s0, s17
24019a78:	9801      	ldr	r0, [sp, #4]
24019a7a:	f7fa f851 	bl	24013b20 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24019a7e:	4629      	mov	r1, r5
24019a80:	4640      	mov	r0, r8
24019a82:	f8cd 8004 	str.w	r8, [sp, #4]
24019a86:	f7fa f8d7 	bl	24013c38 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
24019a8a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24019a8e:	9801      	ldr	r0, [sp, #4]
24019a90:	f7fa f8ea 	bl	24013c68 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24019a94:	4629      	mov	r1, r5
24019a96:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24019a9a:	4630      	mov	r0, r6
24019a9c:	9601      	str	r6, [sp, #4]
24019a9e:	f7fa fa35 	bl	24013f0c <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24019aa2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24019aa6:	9801      	ldr	r0, [sp, #4]
24019aa8:	f7fa fa6c 	bl	24013f84 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24019aac:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24019ab0:	9801      	ldr	r0, [sp, #4]
24019ab2:	f7fa fa4b 	bl	24013f4c <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24019ab6:	eeb0 0a69 	vmov.f32	s0, s19
24019aba:	eeb0 1a6a 	vmov.f32	s2, s21
24019abe:	462a      	mov	r2, r5
24019ac0:	eef0 0a4a 	vmov.f32	s1, s20
24019ac4:	f104 0054 	add.w	r0, r4, #84	; 0x54
24019ac8:	4639      	mov	r1, r7
    p->userDecay = decay;
24019aca:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24019ace:	f7f9 fc2d 	bl	2401332c <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
24019ad2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
24019ad6:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
24019ad8:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
24019adc:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24019ae0:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24019ae4:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24019b70 <tSimpleLivingString3_initToPool+0x270>
24019ae8:	eeb7 6acb 	vcvt.f64.f32	d6, s22
24019aec:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019af4:	d438      	bmi.n	24019b68 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24019af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24019af8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24019afc:	005b      	lsls	r3, r3, #1
24019afe:	ee00 3a10 	vmov	s0, r3
24019b02:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24019b06:	fe80 0a4b 	vminnm.f32	s0, s0, s22
24019b0a:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24019b0e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24019b10:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24019b14:	f7f9 ffbc 	bl	24013a90 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24019b1c:	ed94 7a05 	vldr	s14, [r4, #20]
24019b20:	eddf 7a18 	vldr	s15, [pc, #96]	; 24019b84 <tSimpleLivingString3_initToPool+0x284>
24019b24:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019b28:	ed94 6a01 	vldr	s12, [r4, #4]
24019b2c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019b30:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019b34:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24019b78 <tSimpleLivingString3_initToPool+0x278>
24019b38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24019b3c:	ee27 7b06 	vmul.f64	d7, d7, d6
24019b40:	ee80 0b07 	vdiv.f64	d0, d0, d7
24019b44:	f001 f898 	bl	2401ac78 <exp>
    p->pickupPoint = 0.9f;
24019b48:	4a0f      	ldr	r2, [pc, #60]	; (24019b88 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
24019b4a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
24019b4c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019b4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24019b52:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019b54:	ed84 0a04 	vstr	s0, [r4, #16]
}
24019b58:	b003      	add	sp, #12
24019b5a:	ecbd 8b08 	vpop	{d8-d11}
24019b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24019b62:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24019b8c <tSimpleLivingString3_initToPool+0x28c>
24019b66:	e73f      	b.n	240199e8 <tSimpleLivingString3_initToPool+0xe8>
24019b68:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24019b8c <tSimpleLivingString3_initToPool+0x28c>
24019b6c:	e7cf      	b.n	24019b0e <tSimpleLivingString3_initToPool+0x20e>
24019b6e:	bf00      	nop
24019b70:	33333333 	.word	0x33333333
24019b74:	40133333 	.word	0x40133333
24019b78:	0a3d70a4 	.word	0x0a3d70a4
24019b7c:	c01ba3d7 	.word	0xc01ba3d7
24019b80:	3c23d70a 	.word	0x3c23d70a
24019b84:	3d8d78c4 	.word	0x3d8d78c4
24019b88:	3f666666 	.word	0x3f666666
24019b8c:	4019999a 	.word	0x4019999a

24019b90 <tSimpleLivingString3_setFreq>:
{
24019b90:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24019b92:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
24019b94:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24019b98:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
24019b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24019ba0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24019c18 <tSimpleLivingString3_setFreq+0x88>
24019ba4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24019ba8:	eeb4 5bc6 	vcmpe.f64	d5, d6
24019bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019bb0:	d42e      	bmi.n	24019c10 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24019bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24019bb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24019bb8:	005b      	lsls	r3, r3, #1
24019bba:	ee00 3a10 	vmov	s0, r3
24019bbe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24019bc2:	fe80 0a67 	vminnm.f32	s0, s0, s15
24019bc6:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24019bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24019bce:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24019bd2:	f7f9 ff5d 	bl	24013a90 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24019bda:	ed94 7a05 	vldr	s14, [r4, #20]
24019bde:	eddf 7a12 	vldr	s15, [pc, #72]	; 24019c28 <tSimpleLivingString3_setFreq+0x98>
24019be2:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019be6:	ed94 6a01 	vldr	s12, [r4, #4]
24019bea:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24019bee:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24019bf2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24019c20 <tSimpleLivingString3_setFreq+0x90>
24019bf6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24019bfa:	ee27 7b06 	vmul.f64	d7, d7, d6
24019bfe:	ee80 0b07 	vdiv.f64	d0, d0, d7
24019c02:	f001 f839 	bl	2401ac78 <exp>
24019c06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019c0a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24019c0e:	bd10      	pop	{r4, pc}
24019c10:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24019c2c <tSimpleLivingString3_setFreq+0x9c>
24019c14:	e7d9      	b.n	24019bca <tSimpleLivingString3_setFreq+0x3a>
24019c16:	bf00      	nop
24019c18:	33333333 	.word	0x33333333
24019c1c:	40133333 	.word	0x40133333
24019c20:	0a3d70a4 	.word	0x0a3d70a4
24019c24:	c01ba3d7 	.word	0xc01ba3d7
24019c28:	3d8d78c4 	.word	0x3d8d78c4
24019c2c:	4019999a 	.word	0x4019999a

24019c30 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24019c30:	6800      	ldr	r0, [r0, #0]
24019c32:	303c      	adds	r0, #60	; 0x3c
24019c34:	f7f9 bf74 	b.w	24013b20 <tOnePole_setFreq>

24019c38 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24019c38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24019c3c:	eddf 6a10 	vldr	s13, [pc, #64]	; 24019c80 <tSimpleLivingString3_setDecay+0x48>
{
24019c40:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24019c42:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
24019c46:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24019c48:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24019c4c:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
24019c50:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24019c54:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24019c58:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24019c5c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24019c78 <tSimpleLivingString3_setDecay+0x40>
24019c60:	ee27 7b06 	vmul.f64	d7, d7, d6
24019c64:	ee85 0b07 	vdiv.f64	d0, d5, d7
24019c68:	f001 f806 	bl	2401ac78 <exp>
24019c6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019c70:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24019c74:	bd10      	pop	{r4, pc}
24019c76:	bf00      	nop
24019c78:	52bd3c36 	.word	0x52bd3c36
24019c7c:	c01ba196 	.word	0xc01ba196
24019c80:	3d8d78c4 	.word	0x3d8d78c4

24019c84 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24019c84:	6800      	ldr	r0, [r0, #0]
24019c86:	3054      	adds	r0, #84	; 0x54
24019c88:	f7f9 bba8 	b.w	240133dc <tFeedbackLeveler_setTargetLevel>

24019c8c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24019c8c:	6800      	ldr	r0, [r0, #0]
24019c8e:	3054      	adds	r0, #84	; 0x54
24019c90:	f7f9 bb78 	b.w	24013384 <tFeedbackLeveler_setFactor>

24019c94 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24019c94:	6800      	ldr	r0, [r0, #0]
24019c96:	3054      	adds	r0, #84	; 0x54
24019c98:	f7f9 bb70 	b.w	2401337c <tFeedbackLeveler_setStrength>

24019c9c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24019c9c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24019c9e:	6805      	ldr	r5, [r0, #0]
{
24019ca0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24019ca2:	f105 0054 	add.w	r0, r5, #84	; 0x54
24019ca6:	f7f9 fb71 	bl	2401338c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24019caa:	622c      	str	r4, [r5, #32]
}
24019cac:	bd38      	pop	{r3, r4, r5, pc}
24019cae:	bf00      	nop

24019cb0 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
24019cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
24019cb4:	6801      	ldr	r1, [r0, #0]
{
24019cb6:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
24019cb8:	edd1 7a02 	vldr	s15, [r1, #8]
24019cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019cc0:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24019cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019cc8:	ee67 0aa0 	vmul.f32	s1, s15, s1
24019ccc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24019cd0:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
24019cd4:	2b00      	cmp	r3, #0
24019cd6:	f340 8081 	ble.w	24019ddc <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
24019cda:	4298      	cmp	r0, r3
24019cdc:	dc0f      	bgt.n	24019cfe <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
24019cde:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24019ce0:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24019ce2:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
24019ce4:	dd77      	ble.n	24019dd6 <tSimpleLivingString3_pluck+0x126>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
24019ce6:	ee07 7a90 	vmov	s15, r7
24019cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24019cee:	2f00      	cmp	r7, #0
24019cf0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24019cf4:	ee86 7a86 	vdiv.f32	s14, s13, s12
24019cf8:	da0f      	bge.n	24019d1a <tSimpleLivingString3_pluck+0x6a>
24019cfa:	2300      	movs	r3, #0
24019cfc:	e02b      	b.n	24019d56 <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
24019cfe:	1ac2      	subs	r2, r0, r3
            val = input * ((float)i/(float)pluckPoint);
24019d00:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24019d04:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24019d08:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d0a:	ee07 2a90 	vmov	s15, r2
24019d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019d12:	ee85 7a86 	vdiv.f32	s14, s11, s12
24019d16:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24019d1a:	429f      	cmp	r7, r3
24019d1c:	bfa8      	it	ge
24019d1e:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
24019d20:	2300      	movs	r3, #0
24019d22:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d26:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((float)i/(float)pluckPoint);
24019d28:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d2c:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((float)i/(float)pluckPoint);
24019d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
24019d34:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d36:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24019d38:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d3a:	fbb2 f6f5 	udiv	r6, r2, r5
24019d3e:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((float)i/(float)pluckPoint);
24019d42:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
24019d46:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
24019d48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24019d4c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24019d50:	dde9      	ble.n	24019d26 <tSimpleLivingString3_pluck+0x76>
24019d52:	4298      	cmp	r0, r3
24019d54:	dd1d      	ble.n	24019d92 <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24019d5a:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d5e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24019d64:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d68:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d6c:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24019d70:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d72:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24019d74:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d76:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24019d7a:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24019d7c:	fbb2 f6f5 	udiv	r6, r2, r5
24019d80:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019d84:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24019d88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24019d8c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24019d90:	dce3      	bgt.n	24019d5a <tSimpleLivingString3_pluck+0xaa>
            val = input * ((float)i/(float)pluckPoint);
24019d92:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24019d96:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019d9a:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24019d9e:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24019da0:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019da2:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24019da4:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019da6:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24019da8:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019daa:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24019dac:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019dae:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24019db0:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
24019db2:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24019db6:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019dba:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24019dbe:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
24019dc2:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24019dc4:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24019dc8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24019dcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24019dd0:	6812      	ldr	r2, [r2, #0]
24019dd2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
24019dd4:	d1df      	bne.n	24019d96 <tSimpleLivingString3_pluck+0xe6>
    }
}
24019dd6:	b002      	add	sp, #8
24019dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
24019ddc:	2800      	cmp	r0, #0
24019dde:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
24019de2:	ddf8      	ble.n	24019dd6 <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019de4:	ee07 7a10 	vmov	s14, r7
24019de8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
24019dec:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24019dee:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
24019df2:	eeb0 7a67 	vmov.f32	s14, s15
24019df6:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((float)i/(float)pluckPoint);
24019dfa:	eeb0 6a67 	vmov.f32	s12, s15
24019dfe:	e78c      	b.n	24019d1a <tSimpleLivingString3_pluck+0x6a>

24019e00 <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
24019e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24019e04:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24019e08:	6804      	ldr	r4, [r0, #0]
{
24019e0a:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
24019e0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24019e10:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
24019e14:	f7f9 fe40 	bl	24013a98 <tExpSmooth_tick>
24019e18:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24019e1c:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
24019e20:	4630      	mov	r0, r6
    float wl = tExpSmooth_tick(&p->wlSmooth);
24019e22:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
24019e26:	f7f8 ff49 	bl	24012cbc <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24019e2a:	eeb0 0a48 	vmov.f32	s0, s16
24019e2e:	4638      	mov	r0, r7
24019e30:	f7f8 ff44 	bl	24012cbc <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24019e34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24019e36:	2b00      	cmp	r3, #0
24019e38:	dd3c      	ble.n	24019eb4 <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24019e3a:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24019e3e:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
24019e42:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24019e44:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
24019e46:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24019e48:	f7f8 ff0c 	bl	24012c64 <tLinearDelay_tickOut>
24019e4c:	4648      	mov	r0, r9
24019e4e:	f7f9 fe85 	bl	24013b5c <tOnePole_tick>
24019e52:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24019e56:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24019e58:	ee20 0a27 	vmul.f32	s0, s0, s15
24019e5c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24019e60:	f7f9 fa98 	bl	24013394 <tFeedbackLeveler_tick>
24019e64:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24019e68:	eef0 0a40 	vmov.f32	s1, s0
24019e6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24019e70:	f01c f8a6 	bl	24035fc0 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24019e74:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24019e76:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24019e7a:	f7f8 fef3 	bl	24012c64 <tLinearDelay_tickOut>
24019e7e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24019e82:	eef0 0a40 	vmov.f32	s1, s0
24019e86:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24019e8a:	f01c f899 	bl	24035fc0 <__LEAF_clip_veneer>
24019e8e:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24019e92:	4630      	mov	r0, r6
24019e94:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24019e98:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24019e9c:	f7f8 fece 	bl	24012c3c <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24019ea0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24019ea4:	4638      	mov	r0, r7
24019ea6:	eeb1 0a40 	vneg.f32	s0, s0
24019eaa:	f7f8 fec7 	bl	24012c3c <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
24019eae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24019eb0:	42ab      	cmp	r3, r5
24019eb2:	dcc7      	bgt.n	24019e44 <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
24019eb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
24019eb8:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24019ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24019ebe:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
24019ec2:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24019ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
24019ec8:	ee77 6ae6 	vsub.f32	s13, s15, s13
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24019ecc:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24019ece:	feb8 6a65 	vrinta.f32	s12, s11
24019ed2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    float reversePoint = wl * (1.0f - p->pickupPoint);
24019ed6:	ee66 6a88 	vmul.f32	s13, s13, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24019eda:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24019ede:	feb8 7a66 	vrinta.f32	s14, s13
24019ee2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019ee6:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24019eea:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24019eee:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24019ef2:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
24019ef6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24019efa:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24019efc:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24019efe:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24019f02:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24019f04:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24019f08:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24019f0c:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24019f0e:	69c8      	ldr	r0, [r1, #28]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f10:	6889      	ldr	r1, [r1, #8]
    float floatPart = point - whichPoint;
24019f12:	ee35 6ac6 	vsub.f32	s12, s11, s12
    floatPart = reversePoint - whichPoint;
24019f16:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24019f1a:	fb93 f6f0 	sdiv	r6, r3, r0
24019f1e:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24019f22:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24019f24:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    floatPart = reversePoint - whichPoint;
24019f28:	ee76 6ae5 	vsub.f32	s13, s13, s11
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f2c:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24019f30:	ed92 7a00 	vldr	s14, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f34:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24019f38:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f3a:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24019f3e:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f42:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24019f46:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24019f4a:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24019f4c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24019f50:	eea7 0a27 	vfma.f32	s0, s14, s15
24019f54:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24019f58:	fb93 f5f0 	sdiv	r5, r3, r0
24019f5c:	eea7 0a86 	vfma.f32	s0, s15, s12
24019f60:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24019f64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24019f68:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
24019f6c:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24019f6e:	eea7 0aa6 	vfma.f32	s0, s15, s13
24019f72:	ee20 0a24 	vmul.f32	s0, s0, s9
24019f76:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24019f7a:	b003      	add	sp, #12
24019f7c:	ecbd 8b02 	vpop	{d8}
24019f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

24019f84 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
24019f84:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24019f86:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24019f8a:	4770      	bx	lr

24019f8c <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
24019f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24019f90:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
24019f94:	f8d2 8000 	ldr.w	r8, [r2]
{
24019f98:	4606      	mov	r6, r0
24019f9a:	b083      	sub	sp, #12
24019f9c:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24019f9e:	2070      	movs	r0, #112	; 0x70
24019fa0:	4641      	mov	r1, r8
{
24019fa2:	eef0 ca61 	vmov.f32	s25, s3
24019fa6:	4615      	mov	r5, r2
24019fa8:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
24019fac:	ed9f da99 	vldr	s26, [pc, #612]	; 2401a214 <tLivingString2_initToPool+0x288>
{
24019fb0:	eef0 9a62 	vmov.f32	s19, s5
24019fb4:	eef0 aa63 	vmov.f32	s21, s7
24019fb8:	eef0 ba44 	vmov.f32	s23, s8
24019fbc:	eeb0 ca64 	vmov.f32	s24, s9
24019fc0:	eeb0 ba43 	vmov.f32	s22, s6
24019fc4:	eef0 8a41 	vmov.f32	s17, s2
24019fc8:	eeb0 aa40 	vmov.f32	s20, s0
24019fcc:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24019fd0:	f7fb fd0e 	bl	240159f0 <mpool_alloc>
24019fd4:	6030      	str	r0, [r6, #0]
24019fd6:	4604      	mov	r4, r0
    p->mempool = m;
24019fd8:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019fdc:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
24019fde:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019fe2:	305c      	adds	r0, #92	; 0x5c
24019fe4:	eddf 0a8c 	vldr	s1, [pc, #560]	; 2401a218 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24019fe8:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
24019fec:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24019ff0:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
24019ff4:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24019ff8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24019ffc:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
2401a000:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401a004:	f7f9 fd18 	bl	24013a38 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
2401a008:	eddf 7a84 	vldr	s15, [pc, #528]	; 2401a21c <tLivingString2_initToPool+0x290>
2401a00c:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
2401a00e:	f104 0934 	add.w	r9, r4, #52	; 0x34
2401a012:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
2401a016:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401a01a:	305c      	adds	r0, #92	; 0x5c
2401a01c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
2401a020:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
2401a024:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a028:	ed90 7a04 	vldr	s14, [r0, #16]
2401a02c:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
2401a030:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a034:	ee30 0a6d 	vsub.f32	s0, s0, s27
2401a038:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401a03c:	f7f9 fd28 	bl	24013a90 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
2401a040:	eddf 0a77 	vldr	s1, [pc, #476]	; 2401a220 <tLivingString2_initToPool+0x294>
2401a044:	eeb0 0a49 	vmov.f32	s0, s18
2401a048:	f104 0060 	add.w	r0, r4, #96	; 0x60
2401a04c:	4629      	mov	r1, r5
    p->freq = freq;
2401a04e:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
2401a052:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
2401a056:	edcd 0a00 	vstr	s1, [sp]
2401a05a:	f7f9 fced 	bl	24013a38 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
2401a05e:	eeb0 0a68 	vmov.f32	s0, s17
2401a062:	4629      	mov	r1, r5
2401a064:	eddd 0a00 	vldr	s1, [sp]
2401a068:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401a06c:	f7f9 fce4 	bl	24013a38 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
2401a070:	eddd 0a00 	vldr	s1, [sp]
2401a074:	4629      	mov	r1, r5
2401a076:	eeb0 0a6c 	vmov.f32	s0, s25
2401a07a:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401a07e:	f7f9 fcdb 	bl	24013a38 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
2401a082:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
2401a084:	fe89 0a6d 	vminnm.f32	s0, s18, s27
2401a088:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401a08c:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
2401a08e:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401a092:	f7f9 fcfd 	bl	24013a90 <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
2401a096:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
2401a098:	fe88 0aed 	vminnm.f32	s0, s17, s27
2401a09c:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401a0a0:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
2401a0a2:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401a0a6:	f7f9 fcf3 	bl	24013a90 <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
2401a0aa:	ed94 0a02 	vldr	s0, [r4, #8]
2401a0ae:	462a      	mov	r2, r5
2401a0b0:	4658      	mov	r0, fp
2401a0b2:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
2401a0b6:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
2401a0ba:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
2401a0be:	f7f8 fe3f 	bl	24012d40 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
2401a0c2:	ed94 0a02 	vldr	s0, [r4, #8]
2401a0c6:	462a      	mov	r2, r5
2401a0c8:	4650      	mov	r0, sl
2401a0ca:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401a0ce:	f7f8 fe37 	bl	24012d40 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
2401a0d2:	ed94 0a02 	vldr	s0, [r4, #8]
2401a0d6:	462a      	mov	r2, r5
2401a0d8:	4648      	mov	r0, r9
2401a0da:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401a0de:	f7f8 fe2f 	bl	24012d40 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
2401a0e2:	462a      	mov	r2, r5
2401a0e4:	ed94 0a02 	vldr	s0, [r4, #8]
2401a0e8:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401a0ec:	4640      	mov	r0, r8
2401a0ee:	f7f8 fe27 	bl	24012d40 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
2401a0f2:	4658      	mov	r0, fp
2401a0f4:	f7f8 fea2 	bl	24012e3c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
2401a0f8:	4650      	mov	r0, sl
2401a0fa:	f7f8 fe9f 	bl	24012e3c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
2401a0fe:	4648      	mov	r0, r9
2401a100:	f7f8 fe9c 	bl	24012e3c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
2401a104:	4640      	mov	r0, r8
2401a106:	f7f8 fe99 	bl	24012e3c <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
2401a10a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
2401a10e:	4629      	mov	r1, r5
    p->brightness = brightness;
2401a110:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
2401a114:	f7f9 fd58 	bl	24013bc8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
2401a118:	4629      	mov	r1, r5
2401a11a:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401a11e:	f7f9 fd53 	bl	24013bc8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
2401a122:	4629      	mov	r1, r5
2401a124:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401a128:	f7f9 fd4e 	bl	24013bc8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
2401a12c:	4629      	mov	r1, r5
2401a12e:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401a132:	f7f9 fd49 	bl	24013bc8 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
2401a136:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
2401a13a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
2401a13e:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
2401a140:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
2401a144:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401a148:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
2401a14c:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
2401a150:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a154:	ee27 7b00 	vmul.f64	d7, d7, d0
    float h0=(1.0 + brightness) * 0.5f;
2401a158:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
2401a15c:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401a160:	edcd 0a00 	vstr	s1, [sp]
2401a164:	eeb0 0a41 	vmov.f32	s0, s2
2401a168:	ed8d 1a01 	vstr	s2, [sp, #4]
2401a16c:	f7f9 fd5c 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
2401a170:	ed9d 1a01 	vldr	s2, [sp, #4]
2401a174:	eddd 0a00 	vldr	s1, [sp]
2401a178:	f106 0040 	add.w	r0, r6, #64	; 0x40
2401a17c:	eeb0 0a41 	vmov.f32	s0, s2
2401a180:	ed8d 1a00 	vstr	s2, [sp]
2401a184:	edcd 0a01 	vstr	s1, [sp, #4]
2401a188:	f7f9 fd4e 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
2401a18c:	ed9d 1a00 	vldr	s2, [sp]
2401a190:	f106 0044 	add.w	r0, r6, #68	; 0x44
2401a194:	eddd 0a01 	vldr	s1, [sp, #4]
2401a198:	eeb0 0a41 	vmov.f32	s0, s2
2401a19c:	f7f9 fd44 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401a1a0:	ed9d 1a00 	vldr	s2, [sp]
2401a1a4:	eddd 0a01 	vldr	s1, [sp, #4]
2401a1a8:	f106 0048 	add.w	r0, r6, #72	; 0x48
2401a1ac:	eeb0 0a41 	vmov.f32	s0, s2
2401a1b0:	f7f9 fd3a 	bl	24013c28 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
2401a1b4:	4629      	mov	r1, r5
2401a1b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401a1ba:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
2401a1be:	f7f9 fea5 	bl	24013f0c <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
2401a1c2:	4629      	mov	r1, r5
2401a1c4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401a1c8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
2401a1cc:	f7f9 fe9e 	bl	24013f0c <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401a1d0:	eeb0 1a4c 	vmov.f32	s2, s24
2401a1d4:	eef0 0a6b 	vmov.f32	s1, s23
2401a1d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401a1dc:	eeb0 0a6a 	vmov.f32	s0, s21
2401a1e0:	462a      	mov	r2, r5
2401a1e2:	4639      	mov	r1, r7
    p->decay=decay;
2401a1e4:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
2401a1e8:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401a1ec:	f7f9 f89e 	bl	2401332c <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401a1f0:	eeb0 1a4c 	vmov.f32	s2, s24
2401a1f4:	eef0 0a6b 	vmov.f32	s1, s23
2401a1f8:	462a      	mov	r2, r5
2401a1fa:	eeb0 0a6a 	vmov.f32	s0, s21
2401a1fe:	4639      	mov	r1, r7
2401a200:	f104 0058 	add.w	r0, r4, #88	; 0x58
2401a204:	f7f9 f892 	bl	2401332c <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
2401a208:	6227      	str	r7, [r4, #32]
}
2401a20a:	b003      	add	sp, #12
2401a20c:	ecbd 8b0c 	vpop	{d8-d13}
2401a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401a214:	00000000 	.word	0x00000000
2401a218:	3dcccccd 	.word	0x3dcccccd
2401a21c:	461c4000 	.word	0x461c4000
2401a220:	3c23d70a 	.word	0x3c23d70a

2401a224 <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
2401a224:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
2401a228:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2401a25c <tLivingString2_setFreq+0x38>
2401a22c:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a232:	fe80 0a66 	vminnm.f32	s0, s0, s13
2401a236:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
2401a23a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a23e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401a242:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a246:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
2401a24a:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401a24e:	ee30 0a47 	vsub.f32	s0, s0, s14
2401a252:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401a256:	f7f9 bc1b 	b.w	24013a90 <tExpSmooth_setDest>
2401a25a:	bf00      	nop
2401a25c:	461c4000 	.word	0x461c4000

2401a260 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
2401a260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a264:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
2401a266:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401a280 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401a26a:	f103 0060 	add.w	r0, r3, #96	; 0x60
2401a26e:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401a272:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
2401a276:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401a27a:	f7f9 bc09 	b.w	24013a90 <tExpSmooth_setDest>
2401a27e:	bf00      	nop
2401a280:	00000000 	.word	0x00000000

2401a284 <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
2401a284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a288:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
2401a28a:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401a2a4 <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401a28e:	f103 0064 	add.w	r0, r3, #100	; 0x64
2401a292:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401a296:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
2401a29a:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401a29e:	f7f9 bbf7 	b.w	24013a90 <tExpSmooth_setDest>
2401a2a2:	bf00      	nop
2401a2a4:	00000000 	.word	0x00000000

2401a2a8 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
2401a2a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a2ac:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
2401a2ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401a2c8 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
2401a2b2:	f103 0068 	add.w	r0, r3, #104	; 0x68
2401a2b6:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401a2ba:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
2401a2be:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
2401a2c2:	f7f9 bbe5 	b.w	24013a90 <tExpSmooth_setDest>
2401a2c6:	bf00      	nop
2401a2c8:	00000000 	.word	0x00000000

2401a2cc <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
2401a2cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
2401a2d0:	eddf 7a04 	vldr	s15, [pc, #16]	; 2401a2e4 <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
2401a2d4:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
2401a2d6:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
2401a2da:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
2401a2de:	ed83 0a06 	vstr	s0, [r3, #24]
}
2401a2e2:	4770      	bx	lr
2401a2e4:	00000000 	.word	0x00000000

2401a2e8 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
2401a2e8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401a2ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
2401a2f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
2401a2f4:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
2401a2f8:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
2401a2fc:	ee37 7b40 	vsub.f64	d7, d7, d0
{
2401a300:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
2401a302:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
2401a306:	6804      	ldr	r4, [r0, #0]
{
2401a308:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401a30a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
2401a30e:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
2401a312:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401a316:	edcd 0a00 	vstr	s1, [sp]
2401a31a:	eeb0 0a41 	vmov.f32	s0, s2
2401a31e:	ed8d 1a01 	vstr	s2, [sp, #4]
2401a322:	f7f9 fc81 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
2401a326:	ed9d 1a01 	vldr	s2, [sp, #4]
2401a32a:	eddd 0a00 	vldr	s1, [sp]
2401a32e:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401a332:	eeb0 0a41 	vmov.f32	s0, s2
2401a336:	ed8d 1a00 	vstr	s2, [sp]
2401a33a:	edcd 0a01 	vstr	s1, [sp, #4]
2401a33e:	f7f9 fc73 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
2401a342:	ed9d 1a00 	vldr	s2, [sp]
2401a346:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401a34a:	eddd 0a01 	vldr	s1, [sp, #4]
2401a34e:	eeb0 0a41 	vmov.f32	s0, s2
2401a352:	f7f9 fc69 	bl	24013c28 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401a356:	ed9d 1a00 	vldr	s2, [sp]
2401a35a:	eddd 0a01 	vldr	s1, [sp, #4]
2401a35e:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401a362:	eeb0 0a41 	vmov.f32	s0, s2
}
2401a366:	b002      	add	sp, #8
2401a368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401a36c:	f7f9 bc5c 	b.w	24013c28 <tTwoZero_setCoefficients>

2401a370 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
2401a370:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
2401a372:	6804      	ldr	r4, [r0, #0]
{
2401a374:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
2401a378:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2401a37c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2401a398 <tLivingString2_setDecay+0x28>
2401a380:	ed94 7a01 	vldr	s14, [r4, #4]
2401a384:	ee67 7a87 	vmul.f32	s15, s15, s14
2401a388:	eec0 0aa7 	vdiv.f32	s1, s1, s15
2401a38c:	f000 ffb0 	bl	2401b2f0 <powf>
2401a390:	ed84 0a07 	vstr	s0, [r4, #28]
}
2401a394:	bd10      	pop	{r4, pc}
2401a396:	bf00      	nop
2401a398:	3a83126f 	.word	0x3a83126f

2401a39c <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
2401a39c:	b510      	push	{r4, lr}
2401a39e:	ed2d 8b02 	vpush	{d8}
2401a3a2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401a3a6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
2401a3a8:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401a3ac:	f7f9 f816 	bl	240133dc <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
2401a3b0:	eeb0 0a48 	vmov.f32	s0, s16
2401a3b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
2401a3b8:	ecbd 8b02 	vpop	{d8}
2401a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
2401a3c0:	f7f9 b80c 	b.w	240133dc <tFeedbackLeveler_setTargetLevel>

2401a3c4 <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
2401a3c4:	b510      	push	{r4, lr}
2401a3c6:	ed2d 8b02 	vpush	{d8}
2401a3ca:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401a3ce:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
2401a3d0:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401a3d4:	f7f8 ffd6 	bl	24013384 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
2401a3d8:	eeb0 0a48 	vmov.f32	s0, s16
2401a3dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
2401a3e0:	ecbd 8b02 	vpop	{d8}
2401a3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
2401a3e8:	f7f8 bfcc 	b.w	24013384 <tFeedbackLeveler_setFactor>

2401a3ec <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
2401a3ec:	b510      	push	{r4, lr}
2401a3ee:	ed2d 8b02 	vpush	{d8}
2401a3f2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401a3f6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
2401a3f8:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401a3fc:	f7f8 ffbe 	bl	2401337c <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
2401a400:	eeb0 0a48 	vmov.f32	s0, s16
2401a404:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
2401a408:	ecbd 8b02 	vpop	{d8}
2401a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
2401a410:	f7f8 bfb4 	b.w	2401337c <tFeedbackLeveler_setStrength>

2401a414 <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
2401a414:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
2401a416:	6805      	ldr	r5, [r0, #0]
{
2401a418:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
2401a41a:	f105 0054 	add.w	r0, r5, #84	; 0x54
2401a41e:	f7f8 ffb5 	bl	2401338c <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
2401a422:	4621      	mov	r1, r4
2401a424:	f105 0058 	add.w	r0, r5, #88	; 0x58
2401a428:	f7f8 ffb0 	bl	2401338c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
2401a42c:	622c      	str	r4, [r5, #32]
}
2401a42e:	bd38      	pop	{r3, r4, r5, pc}

2401a430 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
2401a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
2401a434:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
2401a438:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
2401a43c:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
2401a43e:	ee60 aa27 	vmul.f32	s21, s0, s15
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
2401a442:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
2401a446:	f104 005c 	add.w	r0, r4, #92	; 0x5c
2401a44a:	f7f9 fb25 	bl	24013a98 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
2401a44e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
2401a452:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
2401a456:	f7f9 fb1f 	bl	24013a98 <tExpSmooth_tick>
2401a45a:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
2401a45e:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401a462:	f7f9 fb19 	bl	24013a98 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
2401a466:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
2401a46a:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
2401a46e:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float lowLen=prepP*wLen;
2401a472:	ee28 9a80 	vmul.f32	s18, s17, s0
    float upLen=(1.0f-prepP)*wLen;
2401a476:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
2401a47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a47e:	f340 8170 	ble.w	2401a762 <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
2401a482:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a486:	f104 0930 	add.w	r9, r4, #48	; 0x30
2401a48a:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
2401a48e:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a492:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a494:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
2401a498:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
2401a49c:	f104 0638 	add.w	r6, r4, #56	; 0x38
2401a4a0:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
2401a4a4:	eebc bae6 	vcvt.u32.f32	s22, s13
        float pickPFloat = fullPickPoint - pickPInt;
2401a4a8:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a4ac:	ee1b 1a10 	vmov	r1, s22
2401a4b0:	ee77 ba2b 	vadd.f32	s23, s14, s23
        float pickPFloat = fullPickPoint - pickPInt;
2401a4b4:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
2401a4b8:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a4bc:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
2401a4c0:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a4c4:	eeb0 0a6b 	vmov.f32	s0, s23
2401a4c8:	f7f8 fd3a 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
2401a4cc:	ee1b 1a10 	vmov	r1, s22
2401a4d0:	4648      	mov	r0, r9
2401a4d2:	eeb0 0a6a 	vmov.f32	s0, s21
2401a4d6:	3101      	adds	r1, #1
2401a4d8:	f7f8 fd32 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
2401a4dc:	eefc 7ac8 	vcvt.u32.f32	s15, s16
2401a4e0:	4640      	mov	r0, r8
2401a4e2:	eeb0 0a6b 	vmov.f32	s0, s23
2401a4e6:	ee17 1a90 	vmov	r1, s15
2401a4ea:	f7f8 fd29 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
2401a4ee:	ee38 7a6c 	vsub.f32	s14, s16, s25
2401a4f2:	eeb0 0a6a 	vmov.f32	s0, s21
2401a4f6:	4640      	mov	r0, r8
2401a4f8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2401a4fc:	ee17 1a90 	vmov	r1, s15
2401a500:	f7f8 fd1e 	bl	24012f40 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
2401a504:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a506:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
2401a50a:	f7f8 fcb3 	bl	24012e74 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
2401a50e:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
2401a510:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
2401a514:	f7f8 fcae 	bl	24012e74 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
2401a518:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
2401a51a:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
2401a51e:	f7f8 fca9 	bl	24012e74 <tHermiteDelay_tickOut>
2401a522:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
2401a526:	4630      	mov	r0, r6
2401a528:	f7f8 fca4 	bl	24012e74 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401a52c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
2401a530:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401a534:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a538:	f01b fd42 	bl	24035fc0 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401a53c:	eef0 0a4b 	vmov.f32	s1, s22
2401a540:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401a544:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401a548:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a54c:	f01b fd38 	bl	24035fc0 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
2401a550:	eef0 0a48 	vmov.f32	s1, s16
2401a554:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401a558:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
2401a55c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a560:	f01b fd2e 	bl	24035fc0 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401a564:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
2401a568:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401a56c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401a570:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a574:	f01b fd24 	bl	24035fc0 <__LEAF_clip_veneer>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a578:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401a57a:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a57e:	2b00      	cmp	r3, #0
2401a580:	f040 80ec 	bne.w	2401a75c <tLivingString2_tick+0x32c>
2401a584:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401a588:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a58c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
2401a590:	eeb0 0a48 	vmov.f32	s0, s16
2401a594:	f7f9 fb2c 	bl	24013bf0 <tTwoZero_tick>
2401a598:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401a59c:	f7f9 fce2 	bl	24013f64 <tHighpass_tick>
2401a5a0:	4628      	mov	r0, r5
2401a5a2:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
2401a5a6:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a5aa:	f7f8 fef3 	bl	24013394 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
2401a5ae:	eeb0 1a6a 	vmov.f32	s2, s21
2401a5b2:	eef1 0a40 	vneg.f32	s1, s0
2401a5b6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a5ba:	f01b fd01 	bl	24035fc0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
2401a5be:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
2401a5c0:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
2401a5c4:	f7f8 fc48 	bl	24012e58 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
2401a5c8:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401a5cc:	eeb0 0a4b 	vmov.f32	s0, s22
2401a5d0:	f7f9 fb0e 	bl	24013bf0 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
2401a5d4:	eeb0 1a6a 	vmov.f32	s2, s21
2401a5d8:	eef1 0a40 	vneg.f32	s1, s0
2401a5dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a5e0:	f01b fcee 	bl	24035fc0 <__LEAF_clip_veneer>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401a5e4:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
2401a5e8:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401a5ec:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
2401a5f0:	eeb0 1a6a 	vmov.f32	s2, s21
2401a5f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401a5f8:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
2401a5fc:	eee7 0a87 	vfma.f32	s1, s15, s14
2401a600:	f01b fcde 	bl	24035fc0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
2401a604:	4630      	mov	r0, r6
2401a606:	f7f8 fc27 	bl	24012e58 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
2401a60a:	6a23      	ldr	r3, [r4, #32]
2401a60c:	b90b      	cbnz	r3, 2401a612 <tLivingString2_tick+0x1e2>
2401a60e:	edd4 aa07 	vldr	s21, [r4, #28]
2401a612:	eeb0 0a4c 	vmov.f32	s0, s24
2401a616:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401a61a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
2401a61e:	f7f9 fae7 	bl	24013bf0 <tTwoZero_tick>
2401a622:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401a626:	f7f9 fc9d 	bl	24013f64 <tHighpass_tick>
2401a62a:	4628      	mov	r0, r5
2401a62c:	ee20 0a2a 	vmul.f32	s0, s0, s21
2401a630:	f7f8 feb0 	bl	24013394 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
2401a634:	eeb0 1a4c 	vmov.f32	s2, s24
2401a638:	eef1 0a40 	vneg.f32	s1, s0
2401a63c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a640:	f01b fcbe 	bl	24035fc0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
2401a644:	4638      	mov	r0, r7
2401a646:	f7f8 fc07 	bl	24012e58 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
2401a64a:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401a64e:	eeb0 0a6b 	vmov.f32	s0, s23
2401a652:	f7f9 facd 	bl	24013bf0 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401a656:	eeb0 1a4c 	vmov.f32	s2, s24
2401a65a:	eef1 0a40 	vneg.f32	s1, s0
2401a65e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a662:	f01b fcad 	bl	24035fc0 <__LEAF_clip_veneer>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401a666:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401a66a:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401a66e:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
2401a672:	eeb0 1a4c 	vmov.f32	s2, s24
2401a676:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401a67a:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
2401a67e:	eee7 0a87 	vfma.f32	s1, s15, s14
2401a682:	f01b fc9d 	bl	24035fc0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
2401a686:	4648      	mov	r0, r9
2401a688:	f7f8 fbe6 	bl	24012e58 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
2401a68c:	eeb0 0a49 	vmov.f32	s0, s18
2401a690:	4638      	mov	r0, r7
2401a692:	f7f8 fc19 	bl	24012ec8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
2401a696:	eeb0 0a49 	vmov.f32	s0, s18
2401a69a:	4630      	mov	r0, r6
2401a69c:	f7f8 fc14 	bl	24012ec8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
2401a6a0:	eeb0 0a69 	vmov.f32	s0, s19
2401a6a4:	4648      	mov	r0, r9
2401a6a6:	f7f8 fc0f 	bl	24012ec8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
2401a6aa:	eeb0 0a69 	vmov.f32	s0, s19
2401a6ae:	4640      	mov	r0, r8
2401a6b0:	f7f8 fc0a 	bl	24012ec8 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
2401a6b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401a6b8:	f7f9 f9ee 	bl	24013a98 <tExpSmooth_tick>
    if (pupos < 0.9999f)
2401a6bc:	eddf 7a66 	vldr	s15, [pc, #408]	; 2401a858 <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
2401a6c0:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
2401a6c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a6cc:	d53e      	bpl.n	2401a74c <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
2401a6ce:	eeb4 aac0 	vcmpe.f32	s20, s0
2401a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a6d6:	f140 8082 	bpl.w	2401a7de <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
2401a6da:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
2401a6de:	4648      	mov	r0, r9
2401a6e0:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
2401a6e4:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
2401a6e8:	eea8 9aea 	vfms.f32	s18, s17, s21
2401a6ec:	eebc aac8 	vcvt.u32.f32	s20, s16
            float PUPFloat = fullPUPoint - PUPInt;
2401a6f0:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
2401a6f4:	ee1a 1a10 	vmov	r1, s20
2401a6f8:	f7f8 fc16 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
2401a6fc:	ee1a 1a10 	vmov	r1, s20
2401a700:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
2401a702:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
2401a706:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
2401a70a:	3101      	adds	r1, #1
2401a70c:	f7f8 fc0c 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
2401a710:	4640      	mov	r0, r8
            float PUPFloat = fullPUPoint - PUPInt;
2401a712:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
2401a716:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
2401a71a:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
2401a71e:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
2401a722:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
2401a726:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
2401a72a:	f7f8 fbfd 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
2401a72e:	eefc 7ae9 	vcvt.u32.f32	s15, s19
2401a732:	4640      	mov	r0, r8
2401a734:	ee3a aa00 	vadd.f32	s20, s20, s0
2401a738:	ee17 1a90 	vmov	r1, s15
2401a73c:	f7f8 fbf4 	bl	24012f28 <tHermiteDelay_tapOut>
2401a740:	ee38 8a00 	vadd.f32	s16, s16, s0
2401a744:	ee28 8a2b 	vmul.f32	s16, s16, s23
2401a748:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
2401a74c:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
2401a750:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
2401a754:	ecbd 8b0a 	vpop	{d8-d12}
2401a758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401a75c:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
2401a760:	e712      	b.n	2401a588 <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
2401a762:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a766:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
2401a76a:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401a76e:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a772:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
2401a774:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
2401a778:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a77c:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
2401a780:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a784:	ee1c 1a10 	vmov	r1, s24
2401a788:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
2401a78c:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
2401a790:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a794:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
2401a798:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401a79c:	eeb0 0a6b 	vmov.f32	s0, s23
2401a7a0:	f7f8 fbce 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
2401a7a4:	ee1c 1a10 	vmov	r1, s24
2401a7a8:	4638      	mov	r0, r7
2401a7aa:	eeb0 0a48 	vmov.f32	s0, s16
2401a7ae:	3101      	adds	r1, #1
2401a7b0:	f7f8 fbc6 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
2401a7b4:	eefc 7acb 	vcvt.u32.f32	s15, s22
2401a7b8:	4630      	mov	r0, r6
2401a7ba:	eeb0 0a6b 	vmov.f32	s0, s23
2401a7be:	ee17 1a90 	vmov	r1, s15
2401a7c2:	f7f8 fbbd 	bl	24012f40 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
2401a7c6:	ee7b 7a6c 	vsub.f32	s15, s22, s25
2401a7ca:	eeb0 0a48 	vmov.f32	s0, s16
2401a7ce:	4630      	mov	r0, r6
2401a7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401a7d4:	ee17 1a90 	vmov	r1, s15
2401a7d8:	f7f8 fbb2 	bl	24012f40 <tHermiteDelay_addTo>
2401a7dc:	e692      	b.n	2401a504 <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
2401a7de:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
2401a7e2:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
2401a7e4:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
2401a7e8:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
2401a7ec:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
2401a7f0:	ee19 1a90 	vmov	r1, s19
2401a7f4:	f7f8 fb98 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
2401a7f8:	ee19 1a90 	vmov	r1, s19
2401a7fc:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
2401a7fe:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
2401a802:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
2401a806:	3101      	adds	r1, #1
2401a808:	f7f8 fb8e 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
2401a80c:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
2401a80e:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
2401a812:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
2401a816:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
2401a81a:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
2401a81e:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
2401a822:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
2401a826:	f7f8 fb7f 	bl	24012f28 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
2401a82a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
2401a82e:	4630      	mov	r0, r6
2401a830:	ee79 9a80 	vadd.f32	s19, s19, s0
2401a834:	ee17 1a90 	vmov	r1, s15
2401a838:	f7f8 fb76 	bl	24012f28 <tHermiteDelay_tapOut>
2401a83c:	ee38 8a00 	vadd.f32	s16, s16, s0
2401a840:	ee28 8a28 	vmul.f32	s16, s16, s17
2401a844:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
2401a848:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
2401a84c:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
2401a850:	ecbd 8b0a 	vpop	{d8-d12}
2401a854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2401a858:	3f7ff972 	.word	0x3f7ff972

2401a85c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
2401a85c:	4770      	bx	lr
2401a85e:	bf00      	nop

2401a860 <LEAF_init>:
{
2401a860:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
2401a862:	6200      	str	r0, [r0, #32]
{
2401a864:	4604      	mov	r4, r0
2401a866:	461d      	mov	r5, r3
2401a868:	ed2d 8b02 	vpush	{d8}
2401a86c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
2401a870:	f7fb f8a8 	bl	240159c4 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
2401a874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401a878:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2401a8ac <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
2401a87c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
2401a87e:	4b0c      	ldr	r3, [pc, #48]	; (2401a8b0 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
2401a880:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
2401a884:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
2401a888:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
2401a88a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
2401a88c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
2401a890:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
2401a894:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401a898:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
2401a89c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401a8a0:	edc4 7a03 	vstr	s15, [r4, #12]
}
2401a8a4:	ecbd 8b02 	vpop	{d8}
2401a8a8:	bd38      	pop	{r3, r4, r5, pc}
2401a8aa:	bf00      	nop
2401a8ac:	40c90fdb 	.word	0x40c90fdb
2401a8b0:	2401a85d 	.word	0x2401a85d

2401a8b4 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
2401a8b4:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
2401a8b6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
2401a8ba:	2401      	movs	r4, #1
2401a8bc:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
2401a8be:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
2401a8c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
2401a8c4:	4718      	bx	r3
2401a8c6:	bf00      	nop

2401a8c8 <arm_sin_f32>:
2401a8c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401a948 <arm_sin_f32+0x80>
2401a8cc:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a8d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401a8d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2401a8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a8dc:	d504      	bpl.n	2401a8e8 <arm_sin_f32+0x20>
2401a8de:	ee17 3a90 	vmov	r3, s15
2401a8e2:	3b01      	subs	r3, #1
2401a8e4:	ee07 3a90 	vmov	s15, r3
2401a8e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a8ec:	eddf 6a17 	vldr	s13, [pc, #92]	; 2401a94c <arm_sin_f32+0x84>
2401a8f0:	ee70 7a67 	vsub.f32	s15, s0, s15
2401a8f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a8f8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2401a8fc:	ee17 3a10 	vmov	r3, s14
2401a900:	b29b      	uxth	r3, r3
2401a902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2401a906:	d21a      	bcs.n	2401a93e <arm_sin_f32+0x76>
2401a908:	ee07 3a10 	vmov	s14, r3
2401a90c:	1c59      	adds	r1, r3, #1
2401a90e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
2401a912:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401a916:	4a0e      	ldr	r2, [pc, #56]	; (2401a950 <arm_sin_f32+0x88>)
2401a918:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401a91c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401a920:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401a924:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a928:	edd3 6a00 	vldr	s13, [r3]
2401a92c:	ed92 7a00 	vldr	s14, [r2]
2401a930:	ee20 0a26 	vmul.f32	s0, s0, s13
2401a934:	ee67 7a87 	vmul.f32	s15, s15, s14
2401a938:	ee30 0a27 	vadd.f32	s0, s0, s15
2401a93c:	4770      	bx	lr
2401a93e:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a942:	2101      	movs	r1, #1
2401a944:	2300      	movs	r3, #0
2401a946:	e7e6      	b.n	2401a916 <arm_sin_f32+0x4e>
2401a948:	3e22f983 	.word	0x3e22f983
2401a94c:	44000000 	.word	0x44000000
2401a950:	24034318 	.word	0x24034318

2401a954 <__errno>:
2401a954:	4b01      	ldr	r3, [pc, #4]	; (2401a95c <__errno+0x8>)
2401a956:	6818      	ldr	r0, [r3, #0]
2401a958:	4770      	bx	lr
2401a95a:	bf00      	nop
2401a95c:	200007e4 	.word	0x200007e4

2401a960 <__libc_init_array>:
2401a960:	b570      	push	{r4, r5, r6, lr}
2401a962:	4d0d      	ldr	r5, [pc, #52]	; (2401a998 <__libc_init_array+0x38>)
2401a964:	4c0d      	ldr	r4, [pc, #52]	; (2401a99c <__libc_init_array+0x3c>)
2401a966:	1b64      	subs	r4, r4, r5
2401a968:	10a4      	asrs	r4, r4, #2
2401a96a:	2600      	movs	r6, #0
2401a96c:	42a6      	cmp	r6, r4
2401a96e:	d109      	bne.n	2401a984 <__libc_init_array+0x24>
2401a970:	4d0b      	ldr	r5, [pc, #44]	; (2401a9a0 <__libc_init_array+0x40>)
2401a972:	4c0c      	ldr	r4, [pc, #48]	; (2401a9a4 <__libc_init_array+0x44>)
2401a974:	f01b faf0 	bl	24035f58 <_init>
2401a978:	1b64      	subs	r4, r4, r5
2401a97a:	10a4      	asrs	r4, r4, #2
2401a97c:	2600      	movs	r6, #0
2401a97e:	42a6      	cmp	r6, r4
2401a980:	d105      	bne.n	2401a98e <__libc_init_array+0x2e>
2401a982:	bd70      	pop	{r4, r5, r6, pc}
2401a984:	f855 3b04 	ldr.w	r3, [r5], #4
2401a988:	4798      	blx	r3
2401a98a:	3601      	adds	r6, #1
2401a98c:	e7ee      	b.n	2401a96c <__libc_init_array+0xc>
2401a98e:	f855 3b04 	ldr.w	r3, [r5], #4
2401a992:	4798      	blx	r3
2401a994:	3601      	adds	r6, #1
2401a996:	e7f2      	b.n	2401a97e <__libc_init_array+0x1e>
2401a998:	24035fc8 	.word	0x24035fc8
2401a99c:	24035fc8 	.word	0x24035fc8
2401a9a0:	24035fc8 	.word	0x24035fc8
2401a9a4:	24035fcc 	.word	0x24035fcc

2401a9a8 <__itoa>:
2401a9a8:	1e93      	subs	r3, r2, #2
2401a9aa:	2b22      	cmp	r3, #34	; 0x22
2401a9ac:	b510      	push	{r4, lr}
2401a9ae:	460c      	mov	r4, r1
2401a9b0:	d904      	bls.n	2401a9bc <__itoa+0x14>
2401a9b2:	2300      	movs	r3, #0
2401a9b4:	700b      	strb	r3, [r1, #0]
2401a9b6:	461c      	mov	r4, r3
2401a9b8:	4620      	mov	r0, r4
2401a9ba:	bd10      	pop	{r4, pc}
2401a9bc:	2a0a      	cmp	r2, #10
2401a9be:	d109      	bne.n	2401a9d4 <__itoa+0x2c>
2401a9c0:	2800      	cmp	r0, #0
2401a9c2:	da07      	bge.n	2401a9d4 <__itoa+0x2c>
2401a9c4:	232d      	movs	r3, #45	; 0x2d
2401a9c6:	700b      	strb	r3, [r1, #0]
2401a9c8:	4240      	negs	r0, r0
2401a9ca:	2101      	movs	r1, #1
2401a9cc:	4421      	add	r1, r4
2401a9ce:	f000 f841 	bl	2401aa54 <__utoa>
2401a9d2:	e7f1      	b.n	2401a9b8 <__itoa+0x10>
2401a9d4:	2100      	movs	r1, #0
2401a9d6:	e7f9      	b.n	2401a9cc <__itoa+0x24>

2401a9d8 <itoa>:
2401a9d8:	f7ff bfe6 	b.w	2401a9a8 <__itoa>

2401a9dc <memcpy>:
2401a9dc:	440a      	add	r2, r1
2401a9de:	4291      	cmp	r1, r2
2401a9e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2401a9e4:	d100      	bne.n	2401a9e8 <memcpy+0xc>
2401a9e6:	4770      	bx	lr
2401a9e8:	b510      	push	{r4, lr}
2401a9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
2401a9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
2401a9f2:	4291      	cmp	r1, r2
2401a9f4:	d1f9      	bne.n	2401a9ea <memcpy+0xe>
2401a9f6:	bd10      	pop	{r4, pc}

2401a9f8 <memset>:
2401a9f8:	4402      	add	r2, r0
2401a9fa:	4603      	mov	r3, r0
2401a9fc:	4293      	cmp	r3, r2
2401a9fe:	d100      	bne.n	2401aa02 <memset+0xa>
2401aa00:	4770      	bx	lr
2401aa02:	f803 1b01 	strb.w	r1, [r3], #1
2401aa06:	e7f9      	b.n	2401a9fc <memset+0x4>

2401aa08 <frexpf>:
2401aa08:	ee10 3a10 	vmov	r3, s0
2401aa0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401aa10:	2100      	movs	r1, #0
2401aa12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401aa16:	6001      	str	r1, [r0, #0]
2401aa18:	da19      	bge.n	2401aa4e <frexpf+0x46>
2401aa1a:	b1c2      	cbz	r2, 2401aa4e <frexpf+0x46>
2401aa1c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401aa20:	d10a      	bne.n	2401aa38 <frexpf+0x30>
2401aa22:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2401aa50 <frexpf+0x48>
2401aa26:	ee60 7a27 	vmul.f32	s15, s0, s15
2401aa2a:	f06f 0118 	mvn.w	r1, #24
2401aa2e:	ee17 3a90 	vmov	r3, s15
2401aa32:	6001      	str	r1, [r0, #0]
2401aa34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401aa38:	6801      	ldr	r1, [r0, #0]
2401aa3a:	15d2      	asrs	r2, r2, #23
2401aa3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401aa40:	3a7e      	subs	r2, #126	; 0x7e
2401aa42:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
2401aa46:	440a      	add	r2, r1
2401aa48:	ee00 3a10 	vmov	s0, r3
2401aa4c:	6002      	str	r2, [r0, #0]
2401aa4e:	4770      	bx	lr
2401aa50:	4c000000 	.word	0x4c000000

2401aa54 <__utoa>:
2401aa54:	b5f0      	push	{r4, r5, r6, r7, lr}
2401aa56:	4c1f      	ldr	r4, [pc, #124]	; (2401aad4 <__utoa+0x80>)
2401aa58:	b08b      	sub	sp, #44	; 0x2c
2401aa5a:	4605      	mov	r5, r0
2401aa5c:	460b      	mov	r3, r1
2401aa5e:	466e      	mov	r6, sp
2401aa60:	f104 0c20 	add.w	ip, r4, #32
2401aa64:	6820      	ldr	r0, [r4, #0]
2401aa66:	6861      	ldr	r1, [r4, #4]
2401aa68:	4637      	mov	r7, r6
2401aa6a:	c703      	stmia	r7!, {r0, r1}
2401aa6c:	3408      	adds	r4, #8
2401aa6e:	4564      	cmp	r4, ip
2401aa70:	463e      	mov	r6, r7
2401aa72:	d1f7      	bne.n	2401aa64 <__utoa+0x10>
2401aa74:	7921      	ldrb	r1, [r4, #4]
2401aa76:	7139      	strb	r1, [r7, #4]
2401aa78:	1e91      	subs	r1, r2, #2
2401aa7a:	6820      	ldr	r0, [r4, #0]
2401aa7c:	6038      	str	r0, [r7, #0]
2401aa7e:	2922      	cmp	r1, #34	; 0x22
2401aa80:	f04f 0100 	mov.w	r1, #0
2401aa84:	d904      	bls.n	2401aa90 <__utoa+0x3c>
2401aa86:	7019      	strb	r1, [r3, #0]
2401aa88:	460b      	mov	r3, r1
2401aa8a:	4618      	mov	r0, r3
2401aa8c:	b00b      	add	sp, #44	; 0x2c
2401aa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401aa90:	1e58      	subs	r0, r3, #1
2401aa92:	4684      	mov	ip, r0
2401aa94:	fbb5 f7f2 	udiv	r7, r5, r2
2401aa98:	fb02 5617 	mls	r6, r2, r7, r5
2401aa9c:	3628      	adds	r6, #40	; 0x28
2401aa9e:	446e      	add	r6, sp
2401aaa0:	460c      	mov	r4, r1
2401aaa2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
2401aaa6:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401aaaa:	462e      	mov	r6, r5
2401aaac:	42b2      	cmp	r2, r6
2401aaae:	f101 0101 	add.w	r1, r1, #1
2401aab2:	463d      	mov	r5, r7
2401aab4:	d9ee      	bls.n	2401aa94 <__utoa+0x40>
2401aab6:	2200      	movs	r2, #0
2401aab8:	545a      	strb	r2, [r3, r1]
2401aaba:	1919      	adds	r1, r3, r4
2401aabc:	1aa5      	subs	r5, r4, r2
2401aabe:	42aa      	cmp	r2, r5
2401aac0:	dae3      	bge.n	2401aa8a <__utoa+0x36>
2401aac2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
2401aac6:	780e      	ldrb	r6, [r1, #0]
2401aac8:	7006      	strb	r6, [r0, #0]
2401aaca:	3201      	adds	r2, #1
2401aacc:	f801 5901 	strb.w	r5, [r1], #-1
2401aad0:	e7f4      	b.n	2401aabc <__utoa+0x68>
2401aad2:	bf00      	nop
2401aad4:	24034b1c 	.word	0x24034b1c

2401aad8 <sinf_poly>:
2401aad8:	07cb      	lsls	r3, r1, #31
2401aada:	d412      	bmi.n	2401ab02 <sinf_poly+0x2a>
2401aadc:	ee21 5b00 	vmul.f64	d5, d1, d0
2401aae0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
2401aae4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
2401aae8:	eea6 7b01 	vfma.f64	d7, d6, d1
2401aaec:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
2401aaf0:	ee21 1b05 	vmul.f64	d1, d1, d5
2401aaf4:	eea6 0b05 	vfma.f64	d0, d6, d5
2401aaf8:	eea7 0b01 	vfma.f64	d0, d7, d1
2401aafc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401ab00:	4770      	bx	lr
2401ab02:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
2401ab06:	ee21 5b01 	vmul.f64	d5, d1, d1
2401ab0a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
2401ab0e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
2401ab12:	eea1 7b06 	vfma.f64	d7, d1, d6
2401ab16:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
2401ab1a:	eea1 0b06 	vfma.f64	d0, d1, d6
2401ab1e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
2401ab22:	ee21 1b05 	vmul.f64	d1, d1, d5
2401ab26:	eea5 0b06 	vfma.f64	d0, d5, d6
2401ab2a:	e7e5      	b.n	2401aaf8 <sinf_poly+0x20>
2401ab2c:	0000      	movs	r0, r0
	...

2401ab30 <cosf>:
2401ab30:	b538      	push	{r3, r4, r5, lr}
2401ab32:	ee10 4a10 	vmov	r4, s0
2401ab36:	f3c4 530a 	ubfx	r3, r4, #20, #11
2401ab3a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
2401ab3e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
2401ab42:	d21f      	bcs.n	2401ab84 <cosf+0x54>
2401ab44:	ee27 0b07 	vmul.f64	d0, d7, d7
2401ab48:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
2401ab4c:	f0c0 8088 	bcc.w	2401ac60 <cosf+0x130>
2401ab50:	ee20 4b00 	vmul.f64	d4, d0, d0
2401ab54:	4b46      	ldr	r3, [pc, #280]	; (2401ac70 <cosf+0x140>)
2401ab56:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
2401ab5a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
2401ab5e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
2401ab62:	eea0 6b05 	vfma.f64	d6, d0, d5
2401ab66:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
2401ab6a:	eea0 7b05 	vfma.f64	d7, d0, d5
2401ab6e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
2401ab72:	ee20 0b04 	vmul.f64	d0, d0, d4
2401ab76:	eea4 7b05 	vfma.f64	d7, d4, d5
2401ab7a:	eea6 7b00 	vfma.f64	d7, d6, d0
2401ab7e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
2401ab82:	bd38      	pop	{r3, r4, r5, pc}
2401ab84:	f240 422e 	movw	r2, #1070	; 0x42e
2401ab88:	4293      	cmp	r3, r2
2401ab8a:	d82b      	bhi.n	2401abe4 <cosf+0xb4>
2401ab8c:	4b38      	ldr	r3, [pc, #224]	; (2401ac70 <cosf+0x140>)
2401ab8e:	ed93 6b08 	vldr	d6, [r3, #32]
2401ab92:	ee27 6b06 	vmul.f64	d6, d7, d6
2401ab96:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401ab9a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401ab9e:	ee16 1a90 	vmov	r1, s13
2401aba2:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
2401aba6:	1609      	asrs	r1, r1, #24
2401aba8:	ee06 1a90 	vmov	s13, r1
2401abac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
2401abb0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
2401abb4:	f001 0203 	and.w	r2, r1, #3
2401abb8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401abbc:	eea5 7b46 	vfms.f64	d7, d5, d6
2401abc0:	eeb0 0b47 	vmov.f64	d0, d7
2401abc4:	ed92 7b00 	vldr	d7, [r2]
2401abc8:	ee20 1b00 	vmul.f64	d1, d0, d0
2401abcc:	f011 0f02 	tst.w	r1, #2
2401abd0:	bf08      	it	eq
2401abd2:	4618      	moveq	r0, r3
2401abd4:	f081 0101 	eor.w	r1, r1, #1
2401abd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401abdc:	ee20 0b07 	vmul.f64	d0, d0, d7
2401abe0:	f7ff bf7a 	b.w	2401aad8 <sinf_poly>
2401abe4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
2401abe8:	d236      	bcs.n	2401ac58 <cosf+0x128>
2401abea:	4a22      	ldr	r2, [pc, #136]	; (2401ac74 <cosf+0x144>)
2401abec:	f3c4 6183 	ubfx	r1, r4, #26, #4
2401abf0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
2401abf4:	f3c4 0316 	ubfx	r3, r4, #0, #23
2401abf8:	f3c4 50c2 	ubfx	r0, r4, #23, #3
2401abfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2401ac00:	4083      	lsls	r3, r0
2401ac02:	6a28      	ldr	r0, [r5, #32]
2401ac04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
2401ac08:	fba3 1000 	umull	r1, r0, r3, r0
2401ac0c:	6929      	ldr	r1, [r5, #16]
2401ac0e:	435a      	muls	r2, r3
2401ac10:	fbe3 0201 	umlal	r0, r2, r3, r1
2401ac14:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
2401ac18:	0f8d      	lsrs	r5, r1, #30
2401ac1a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
2401ac1e:	1a51      	subs	r1, r2, r1
2401ac20:	f7e5 fcf0 	bl	24000604 <__aeabi_l2d>
2401ac24:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
2401ac28:	4b11      	ldr	r3, [pc, #68]	; (2401ac70 <cosf+0x140>)
2401ac2a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 2401ac68 <cosf+0x138>
2401ac2e:	ec41 0b16 	vmov	d6, r0, r1
2401ac32:	f004 0203 	and.w	r2, r4, #3
2401ac36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401ac3a:	f014 0f02 	tst.w	r4, #2
2401ac3e:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401ac42:	ee26 7b07 	vmul.f64	d7, d6, d7
2401ac46:	ed92 0b00 	vldr	d0, [r2]
2401ac4a:	ee27 1b07 	vmul.f64	d1, d7, d7
2401ac4e:	f085 0101 	eor.w	r1, r5, #1
2401ac52:	bf08      	it	eq
2401ac54:	4618      	moveq	r0, r3
2401ac56:	e7bf      	b.n	2401abd8 <cosf+0xa8>
2401ac58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401ac5c:	f000 b964 	b.w	2401af28 <__math_invalidf>
2401ac60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401ac64:	e78d      	b.n	2401ab82 <cosf+0x52>
2401ac66:	bf00      	nop
2401ac68:	54442d18 	.word	0x54442d18
2401ac6c:	3c1921fb 	.word	0x3c1921fb
2401ac70:	240358d0 	.word	0x240358d0
2401ac74:	24035870 	.word	0x24035870

2401ac78 <exp>:
2401ac78:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
2401ac7a:	ee10 3a90 	vmov	r3, s1
2401ac7e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
2401ac82:	f3c3 540a 	ubfx	r4, r3, #20, #11
2401ac86:	18a2      	adds	r2, r4, r2
2401ac88:	2a3e      	cmp	r2, #62	; 0x3e
2401ac8a:	ee10 1a10 	vmov	r1, s0
2401ac8e:	d922      	bls.n	2401acd6 <exp+0x5e>
2401ac90:	2a00      	cmp	r2, #0
2401ac92:	da06      	bge.n	2401aca2 <exp+0x2a>
2401ac94:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
2401ac98:	ee30 0b07 	vadd.f64	d0, d0, d7
2401ac9c:	b004      	add	sp, #16
2401ac9e:	bcf0      	pop	{r4, r5, r6, r7}
2401aca0:	4770      	bx	lr
2401aca2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
2401aca6:	f04f 0000 	mov.w	r0, #0
2401acaa:	d913      	bls.n	2401acd4 <exp+0x5c>
2401acac:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
2401acb0:	bf08      	it	eq
2401acb2:	4281      	cmpeq	r1, r0
2401acb4:	f000 80a0 	beq.w	2401adf8 <exp+0x180>
2401acb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401acbc:	4294      	cmp	r4, r2
2401acbe:	d0e9      	beq.n	2401ac94 <exp+0x1c>
2401acc0:	4283      	cmp	r3, r0
2401acc2:	da03      	bge.n	2401accc <exp+0x54>
2401acc4:	b004      	add	sp, #16
2401acc6:	bcf0      	pop	{r4, r5, r6, r7}
2401acc8:	f000 b8c6 	b.w	2401ae58 <__math_uflow>
2401accc:	b004      	add	sp, #16
2401acce:	bcf0      	pop	{r4, r5, r6, r7}
2401acd0:	f000 b8ca 	b.w	2401ae68 <__math_oflow>
2401acd4:	4604      	mov	r4, r0
2401acd6:	4950      	ldr	r1, [pc, #320]	; (2401ae18 <exp+0x1a0>)
2401acd8:	ed91 6b02 	vldr	d6, [r1, #8]
2401acdc:	ed91 5b00 	vldr	d5, [r1]
2401ace0:	eeb0 7b46 	vmov.f64	d7, d6
2401ace4:	eea5 7b00 	vfma.f64	d7, d5, d0
2401ace8:	ee17 5a10 	vmov	r5, s14
2401acec:	ee37 7b46 	vsub.f64	d7, d7, d6
2401acf0:	ed91 6b04 	vldr	d6, [r1, #16]
2401acf4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
2401acf8:	eea6 0b07 	vfma.f64	d0, d6, d7
2401acfc:	ed91 6b06 	vldr	d6, [r1, #24]
2401ad00:	18d8      	adds	r0, r3, r3
2401ad02:	f100 030f 	add.w	r3, r0, #15
2401ad06:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
2401ad0a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401ad0e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
2401ad12:	ee20 7b00 	vmul.f64	d7, d0, d0
2401ad16:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
2401ad1a:	ed91 5b08 	vldr	d5, [r1, #32]
2401ad1e:	ee30 6b06 	vadd.f64	d6, d0, d6
2401ad22:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
2401ad26:	eea4 5b00 	vfma.f64	d5, d4, d0
2401ad2a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
2401ad2e:	eea5 6b07 	vfma.f64	d6, d5, d7
2401ad32:	ee27 7b07 	vmul.f64	d7, d7, d7
2401ad36:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
2401ad3a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
2401ad3e:	f8d2 c004 	ldr.w	ip, [r2, #4]
2401ad42:	eea4 5b00 	vfma.f64	d5, d4, d0
2401ad46:	2600      	movs	r6, #0
2401ad48:	19f2      	adds	r2, r6, r7
2401ad4a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
2401ad4e:	eea7 6b05 	vfma.f64	d6, d7, d5
2401ad52:	2c00      	cmp	r4, #0
2401ad54:	d14b      	bne.n	2401adee <exp+0x176>
2401ad56:	42b5      	cmp	r5, r6
2401ad58:	db10      	blt.n	2401ad7c <exp+0x104>
2401ad5a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
2401ad5e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 2401ae00 <exp+0x188>
2401ad62:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
2401ad66:	4610      	mov	r0, r2
2401ad68:	ec41 0b10 	vmov	d0, r0, r1
2401ad6c:	eea6 0b00 	vfma.f64	d0, d6, d0
2401ad70:	ee20 0b07 	vmul.f64	d0, d0, d7
2401ad74:	b004      	add	sp, #16
2401ad76:	bcf0      	pop	{r4, r5, r6, r7}
2401ad78:	f000 b88a 	b.w	2401ae90 <__math_check_oflow>
2401ad7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
2401ad80:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
2401ad84:	4610      	mov	r0, r2
2401ad86:	ec41 0b17 	vmov	d7, r0, r1
2401ad8a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
2401ad8e:	ee26 6b07 	vmul.f64	d6, d6, d7
2401ad92:	ee37 5b06 	vadd.f64	d5, d7, d6
2401ad96:	eeb4 5bc4 	vcmpe.f64	d5, d4
2401ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ad9e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 2401ae08 <exp+0x190>
2401ada2:	d51e      	bpl.n	2401ade2 <exp+0x16a>
2401ada4:	ee35 3b04 	vadd.f64	d3, d5, d4
2401ada8:	ee37 7b45 	vsub.f64	d7, d7, d5
2401adac:	ee37 7b06 	vadd.f64	d7, d7, d6
2401adb0:	ee34 6b43 	vsub.f64	d6, d4, d3
2401adb4:	ee36 5b05 	vadd.f64	d5, d6, d5
2401adb8:	ee35 5b07 	vadd.f64	d5, d5, d7
2401adbc:	ee35 5b03 	vadd.f64	d5, d5, d3
2401adc0:	ee35 5b44 	vsub.f64	d5, d5, d4
2401adc4:	eeb5 5b40 	vcmp.f64	d5, #0.0
2401adc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401adcc:	d101      	bne.n	2401add2 <exp+0x15a>
2401adce:	ed9f 5b10 	vldr	d5, [pc, #64]	; 2401ae10 <exp+0x198>
2401add2:	ed8d 0b00 	vstr	d0, [sp]
2401add6:	ed9d 7b00 	vldr	d7, [sp]
2401adda:	ee27 7b00 	vmul.f64	d7, d7, d0
2401adde:	ed8d 7b02 	vstr	d7, [sp, #8]
2401ade2:	ee25 0b00 	vmul.f64	d0, d5, d0
2401ade6:	b004      	add	sp, #16
2401ade8:	bcf0      	pop	{r4, r5, r6, r7}
2401adea:	f000 b845 	b.w	2401ae78 <__math_check_uflow>
2401adee:	ec43 2b10 	vmov	d0, r2, r3
2401adf2:	eea6 0b00 	vfma.f64	d0, d6, d0
2401adf6:	e751      	b.n	2401ac9c <exp+0x24>
2401adf8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 2401ae10 <exp+0x198>
2401adfc:	e74e      	b.n	2401ac9c <exp+0x24>
2401adfe:	bf00      	nop
2401ae00:	00000000 	.word	0x00000000
2401ae04:	7f000000 	.word	0x7f000000
2401ae08:	00000000 	.word	0x00000000
2401ae0c:	00100000 	.word	0x00100000
	...
2401ae18:	24034b48 	.word	0x24034b48

2401ae1c <with_errno>:
2401ae1c:	b513      	push	{r0, r1, r4, lr}
2401ae1e:	4604      	mov	r4, r0
2401ae20:	ed8d 0b00 	vstr	d0, [sp]
2401ae24:	f7ff fd96 	bl	2401a954 <__errno>
2401ae28:	ed9d 0b00 	vldr	d0, [sp]
2401ae2c:	6004      	str	r4, [r0, #0]
2401ae2e:	b002      	add	sp, #8
2401ae30:	bd10      	pop	{r4, pc}

2401ae32 <xflow>:
2401ae32:	b082      	sub	sp, #8
2401ae34:	b158      	cbz	r0, 2401ae4e <xflow+0x1c>
2401ae36:	eeb1 7b40 	vneg.f64	d7, d0
2401ae3a:	ed8d 7b00 	vstr	d7, [sp]
2401ae3e:	ed9d 7b00 	vldr	d7, [sp]
2401ae42:	2022      	movs	r0, #34	; 0x22
2401ae44:	ee20 0b07 	vmul.f64	d0, d0, d7
2401ae48:	b002      	add	sp, #8
2401ae4a:	f7ff bfe7 	b.w	2401ae1c <with_errno>
2401ae4e:	eeb0 7b40 	vmov.f64	d7, d0
2401ae52:	e7f2      	b.n	2401ae3a <xflow+0x8>
2401ae54:	0000      	movs	r0, r0
	...

2401ae58 <__math_uflow>:
2401ae58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 2401ae60 <__math_uflow+0x8>
2401ae5c:	f7ff bfe9 	b.w	2401ae32 <xflow>
2401ae60:	00000000 	.word	0x00000000
2401ae64:	10000000 	.word	0x10000000

2401ae68 <__math_oflow>:
2401ae68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 2401ae70 <__math_oflow+0x8>
2401ae6c:	f7ff bfe1 	b.w	2401ae32 <xflow>
2401ae70:	00000000 	.word	0x00000000
2401ae74:	70000000 	.word	0x70000000

2401ae78 <__math_check_uflow>:
2401ae78:	eeb5 0b40 	vcmp.f64	d0, #0.0
2401ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ae80:	d102      	bne.n	2401ae88 <__math_check_uflow+0x10>
2401ae82:	2022      	movs	r0, #34	; 0x22
2401ae84:	f7ff bfca 	b.w	2401ae1c <with_errno>
2401ae88:	4770      	bx	lr
2401ae8a:	0000      	movs	r0, r0
2401ae8c:	0000      	movs	r0, r0
	...

2401ae90 <__math_check_oflow>:
2401ae90:	ed9f 6b07 	vldr	d6, [pc, #28]	; 2401aeb0 <__math_check_oflow+0x20>
2401ae94:	eeb0 7bc0 	vabs.f64	d7, d0
2401ae98:	eeb4 7b46 	vcmp.f64	d7, d6
2401ae9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401aea0:	dd02      	ble.n	2401aea8 <__math_check_oflow+0x18>
2401aea2:	2022      	movs	r0, #34	; 0x22
2401aea4:	f7ff bfba 	b.w	2401ae1c <with_errno>
2401aea8:	4770      	bx	lr
2401aeaa:	bf00      	nop
2401aeac:	f3af 8000 	nop.w
2401aeb0:	ffffffff 	.word	0xffffffff
2401aeb4:	7fefffff 	.word	0x7fefffff

2401aeb8 <with_errnof>:
2401aeb8:	b513      	push	{r0, r1, r4, lr}
2401aeba:	4604      	mov	r4, r0
2401aebc:	ed8d 0a01 	vstr	s0, [sp, #4]
2401aec0:	f7ff fd48 	bl	2401a954 <__errno>
2401aec4:	ed9d 0a01 	vldr	s0, [sp, #4]
2401aec8:	6004      	str	r4, [r0, #0]
2401aeca:	b002      	add	sp, #8
2401aecc:	bd10      	pop	{r4, pc}

2401aece <xflowf>:
2401aece:	b130      	cbz	r0, 2401aede <xflowf+0x10>
2401aed0:	eef1 7a40 	vneg.f32	s15, s0
2401aed4:	ee27 0a80 	vmul.f32	s0, s15, s0
2401aed8:	2022      	movs	r0, #34	; 0x22
2401aeda:	f7ff bfed 	b.w	2401aeb8 <with_errnof>
2401aede:	eef0 7a40 	vmov.f32	s15, s0
2401aee2:	e7f7      	b.n	2401aed4 <xflowf+0x6>

2401aee4 <__math_uflowf>:
2401aee4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401aeec <__math_uflowf+0x8>
2401aee8:	f7ff bff1 	b.w	2401aece <xflowf>
2401aeec:	10000000 	.word	0x10000000

2401aef0 <__math_may_uflowf>:
2401aef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401aef8 <__math_may_uflowf+0x8>
2401aef4:	f7ff bfeb 	b.w	2401aece <xflowf>
2401aef8:	1a200000 	.word	0x1a200000

2401aefc <__math_oflowf>:
2401aefc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401af04 <__math_oflowf+0x8>
2401af00:	f7ff bfe5 	b.w	2401aece <xflowf>
2401af04:	70000000 	.word	0x70000000

2401af08 <__math_divzerof>:
2401af08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401af0c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401af10:	2800      	cmp	r0, #0
2401af12:	fe40 7a27 	vseleq.f32	s15, s0, s15
2401af16:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2401af24 <__math_divzerof+0x1c>
2401af1a:	2022      	movs	r0, #34	; 0x22
2401af1c:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401af20:	f7ff bfca 	b.w	2401aeb8 <with_errnof>
2401af24:	00000000 	.word	0x00000000

2401af28 <__math_invalidf>:
2401af28:	eef0 7a40 	vmov.f32	s15, s0
2401af2c:	ee30 7a40 	vsub.f32	s14, s0, s0
2401af30:	eef4 7a67 	vcmp.f32	s15, s15
2401af34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401af38:	ee87 0a07 	vdiv.f32	s0, s14, s14
2401af3c:	d602      	bvs.n	2401af44 <__math_invalidf+0x1c>
2401af3e:	2021      	movs	r0, #33	; 0x21
2401af40:	f7ff bfba 	b.w	2401aeb8 <with_errnof>
2401af44:	4770      	bx	lr
	...

2401af48 <tan>:
2401af48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2401af4a:	eeb0 7b40 	vmov.f64	d7, d0
2401af4e:	ee17 3a90 	vmov	r3, s15
2401af52:	4a15      	ldr	r2, [pc, #84]	; (2401afa8 <tan+0x60>)
2401af54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401af58:	4293      	cmp	r3, r2
2401af5a:	dc07      	bgt.n	2401af6c <tan+0x24>
2401af5c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 2401afa0 <tan+0x58>
2401af60:	2001      	movs	r0, #1
2401af62:	b005      	add	sp, #20
2401af64:	f85d eb04 	ldr.w	lr, [sp], #4
2401af68:	f001 b93e 	b.w	2401c1e8 <__kernel_tan>
2401af6c:	4a0f      	ldr	r2, [pc, #60]	; (2401afac <tan+0x64>)
2401af6e:	4293      	cmp	r3, r2
2401af70:	dd04      	ble.n	2401af7c <tan+0x34>
2401af72:	ee30 0b40 	vsub.f64	d0, d0, d0
2401af76:	b005      	add	sp, #20
2401af78:	f85d fb04 	ldr.w	pc, [sp], #4
2401af7c:	4668      	mov	r0, sp
2401af7e:	f000 fbc3 	bl	2401b708 <__ieee754_rem_pio2>
2401af82:	0040      	lsls	r0, r0, #1
2401af84:	f000 0002 	and.w	r0, r0, #2
2401af88:	ed9d 1b02 	vldr	d1, [sp, #8]
2401af8c:	ed9d 0b00 	vldr	d0, [sp]
2401af90:	f1c0 0001 	rsb	r0, r0, #1
2401af94:	f001 f928 	bl	2401c1e8 <__kernel_tan>
2401af98:	e7ed      	b.n	2401af76 <tan+0x2e>
2401af9a:	bf00      	nop
2401af9c:	f3af 8000 	nop.w
	...
2401afa8:	3fe921fb 	.word	0x3fe921fb
2401afac:	7fefffff 	.word	0x7fefffff

2401afb0 <expf>:
2401afb0:	ee10 2a10 	vmov	r2, s0
2401afb4:	f240 412a 	movw	r1, #1066	; 0x42a
2401afb8:	f3c2 530a 	ubfx	r3, r2, #20, #11
2401afbc:	428b      	cmp	r3, r1
2401afbe:	b430      	push	{r4, r5}
2401afc0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
2401afc4:	d92a      	bls.n	2401b01c <expf+0x6c>
2401afc6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
2401afca:	d058      	beq.n	2401b07e <expf+0xce>
2401afcc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
2401afd0:	d303      	bcc.n	2401afda <expf+0x2a>
2401afd2:	ee30 0a00 	vadd.f32	s0, s0, s0
2401afd6:	bc30      	pop	{r4, r5}
2401afd8:	4770      	bx	lr
2401afda:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2401b084 <expf+0xd4>
2401afde:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401afe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401afe6:	dd03      	ble.n	2401aff0 <expf+0x40>
2401afe8:	bc30      	pop	{r4, r5}
2401afea:	2000      	movs	r0, #0
2401afec:	f7ff bf86 	b.w	2401aefc <__math_oflowf>
2401aff0:	eddf 7a25 	vldr	s15, [pc, #148]	; 2401b088 <expf+0xd8>
2401aff4:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401aff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401affc:	d503      	bpl.n	2401b006 <expf+0x56>
2401affe:	bc30      	pop	{r4, r5}
2401b000:	2000      	movs	r0, #0
2401b002:	f7ff bf6f 	b.w	2401aee4 <__math_uflowf>
2401b006:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401b08c <expf+0xdc>
2401b00a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401b00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b012:	d503      	bpl.n	2401b01c <expf+0x6c>
2401b014:	bc30      	pop	{r4, r5}
2401b016:	2000      	movs	r0, #0
2401b018:	f7ff bf6a 	b.w	2401aef0 <__math_may_uflowf>
2401b01c:	4b1c      	ldr	r3, [pc, #112]	; (2401b090 <expf+0xe0>)
2401b01e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401b022:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
2401b026:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
2401b02a:	eeb0 7b44 	vmov.f64	d7, d4
2401b02e:	eea5 7b06 	vfma.f64	d7, d5, d6
2401b032:	ee17 0a10 	vmov	r0, s14
2401b036:	ee37 7b44 	vsub.f64	d7, d7, d4
2401b03a:	f000 021f 	and.w	r2, r0, #31
2401b03e:	ee95 7b06 	vfnms.f64	d7, d5, d6
2401b042:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
2401b046:	ee27 4b07 	vmul.f64	d4, d7, d7
2401b04a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
2401b04e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
2401b052:	eea5 6b07 	vfma.f64	d6, d5, d7
2401b056:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
2401b05a:	684d      	ldr	r5, [r1, #4]
2401b05c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
2401b060:	2100      	movs	r1, #0
2401b062:	190a      	adds	r2, r1, r4
2401b064:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
2401b068:	eea5 0b07 	vfma.f64	d0, d5, d7
2401b06c:	ec43 2b17 	vmov	d7, r2, r3
2401b070:	eea6 0b04 	vfma.f64	d0, d6, d4
2401b074:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b078:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401b07c:	e7ab      	b.n	2401afd6 <expf+0x26>
2401b07e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 2401b094 <expf+0xe4>
2401b082:	e7a8      	b.n	2401afd6 <expf+0x26>
2401b084:	42b17217 	.word	0x42b17217
2401b088:	c2cff1b4 	.word	0xc2cff1b4
2401b08c:	c2ce8ecf 	.word	0xc2ce8ecf
2401b090:	240353b8 	.word	0x240353b8
2401b094:	00000000 	.word	0x00000000

2401b098 <fabsf>:
2401b098:	ee10 3a10 	vmov	r3, s0
2401b09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401b0a0:	ee00 3a10 	vmov	s0, r3
2401b0a4:	4770      	bx	lr
	...

2401b0a8 <logf>:
2401b0a8:	ee10 3a10 	vmov	r3, s0
2401b0ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401b0b0:	b410      	push	{r4}
2401b0b2:	d055      	beq.n	2401b160 <logf+0xb8>
2401b0b4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
2401b0b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
2401b0bc:	d31a      	bcc.n	2401b0f4 <logf+0x4c>
2401b0be:	005a      	lsls	r2, r3, #1
2401b0c0:	d104      	bne.n	2401b0cc <logf+0x24>
2401b0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b0c6:	2001      	movs	r0, #1
2401b0c8:	f7ff bf1e 	b.w	2401af08 <__math_divzerof>
2401b0cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401b0d0:	d043      	beq.n	2401b15a <logf+0xb2>
2401b0d2:	2b00      	cmp	r3, #0
2401b0d4:	db02      	blt.n	2401b0dc <logf+0x34>
2401b0d6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401b0da:	d303      	bcc.n	2401b0e4 <logf+0x3c>
2401b0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b0e0:	f7ff bf22 	b.w	2401af28 <__math_invalidf>
2401b0e4:	eddf 7a20 	vldr	s15, [pc, #128]	; 2401b168 <logf+0xc0>
2401b0e8:	ee20 0a27 	vmul.f32	s0, s0, s15
2401b0ec:	ee10 3a10 	vmov	r3, s0
2401b0f0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
2401b0f4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
2401b0f8:	491c      	ldr	r1, [pc, #112]	; (2401b16c <logf+0xc4>)
2401b0fa:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
2401b0fe:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401b102:	f3c2 40c3 	ubfx	r0, r2, #19, #4
2401b106:	0dd4      	lsrs	r4, r2, #23
2401b108:	eb01 1000 	add.w	r0, r1, r0, lsl #4
2401b10c:	05e4      	lsls	r4, r4, #23
2401b10e:	ed90 6b00 	vldr	d6, [r0]
2401b112:	1b1b      	subs	r3, r3, r4
2401b114:	ee07 3a90 	vmov	s15, r3
2401b118:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401b11c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401b120:	15d2      	asrs	r2, r2, #23
2401b122:	eea6 0b07 	vfma.f64	d0, d6, d7
2401b126:	ed90 6b02 	vldr	d6, [r0, #8]
2401b12a:	ee20 4b00 	vmul.f64	d4, d0, d0
2401b12e:	ee07 2a90 	vmov	s15, r2
2401b132:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401b136:	eea7 6b05 	vfma.f64	d6, d7, d5
2401b13a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
2401b13e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
2401b142:	eea5 7b00 	vfma.f64	d7, d5, d0
2401b146:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
2401b14a:	ee30 0b06 	vadd.f64	d0, d0, d6
2401b14e:	eea5 7b04 	vfma.f64	d7, d5, d4
2401b152:	eea4 0b07 	vfma.f64	d0, d4, d7
2401b156:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b15e:	4770      	bx	lr
2401b160:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2401b170 <logf+0xc8>
2401b164:	e7f9      	b.n	2401b15a <logf+0xb2>
2401b166:	bf00      	nop
2401b168:	4b000000 	.word	0x4b000000
2401b16c:	24035620 	.word	0x24035620
2401b170:	00000000 	.word	0x00000000

2401b174 <log2f>:
2401b174:	ee10 2a10 	vmov	r2, s0
2401b178:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
2401b17c:	b410      	push	{r4}
2401b17e:	d055      	beq.n	2401b22c <log2f+0xb8>
2401b180:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
2401b184:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401b188:	d31a      	bcc.n	2401b1c0 <log2f+0x4c>
2401b18a:	0053      	lsls	r3, r2, #1
2401b18c:	d104      	bne.n	2401b198 <log2f+0x24>
2401b18e:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b192:	2001      	movs	r0, #1
2401b194:	f7ff beb8 	b.w	2401af08 <__math_divzerof>
2401b198:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401b19c:	d043      	beq.n	2401b226 <log2f+0xb2>
2401b19e:	2a00      	cmp	r2, #0
2401b1a0:	db02      	blt.n	2401b1a8 <log2f+0x34>
2401b1a2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
2401b1a6:	d303      	bcc.n	2401b1b0 <log2f+0x3c>
2401b1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b1ac:	f7ff bebc 	b.w	2401af28 <__math_invalidf>
2401b1b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 2401b234 <log2f+0xc0>
2401b1b4:	ee20 0a27 	vmul.f32	s0, s0, s15
2401b1b8:	ee10 3a10 	vmov	r3, s0
2401b1bc:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
2401b1c0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
2401b1c4:	491c      	ldr	r1, [pc, #112]	; (2401b238 <log2f+0xc4>)
2401b1c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
2401b1ca:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
2401b1ce:	f3c3 40c3 	ubfx	r0, r3, #19, #4
2401b1d2:	0ddc      	lsrs	r4, r3, #23
2401b1d4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
2401b1d8:	05e4      	lsls	r4, r4, #23
2401b1da:	ed90 5b00 	vldr	d5, [r0]
2401b1de:	1b12      	subs	r2, r2, r4
2401b1e0:	ee07 2a90 	vmov	s15, r2
2401b1e4:	15db      	asrs	r3, r3, #23
2401b1e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401b1ea:	eea5 6b07 	vfma.f64	d6, d5, d7
2401b1ee:	ed90 7b02 	vldr	d7, [r0, #8]
2401b1f2:	ee26 4b06 	vmul.f64	d4, d6, d6
2401b1f6:	ee00 3a10 	vmov	s0, r3
2401b1fa:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
2401b1fe:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
2401b202:	ee30 0b07 	vadd.f64	d0, d0, d7
2401b206:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
2401b20a:	eea5 7b06 	vfma.f64	d7, d5, d6
2401b20e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401b212:	eea5 7b04 	vfma.f64	d7, d5, d4
2401b216:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
2401b21a:	eea5 0b06 	vfma.f64	d0, d5, d6
2401b21e:	eea4 0b07 	vfma.f64	d0, d4, d7
2401b222:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401b226:	f85d 4b04 	ldr.w	r4, [sp], #4
2401b22a:	4770      	bx	lr
2401b22c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2401b23c <log2f+0xc8>
2401b230:	e7f9      	b.n	2401b226 <log2f+0xb2>
2401b232:	bf00      	nop
2401b234:	4b000000 	.word	0x4b000000
2401b238:	24035500 	.word	0x24035500
2401b23c:	00000000 	.word	0x00000000

2401b240 <lrintf>:
2401b240:	ee10 3a10 	vmov	r3, s0
2401b244:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401b248:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
2401b24c:	281e      	cmp	r0, #30
2401b24e:	b082      	sub	sp, #8
2401b250:	dc2e      	bgt.n	2401b2b0 <lrintf+0x70>
2401b252:	1c41      	adds	r1, r0, #1
2401b254:	da02      	bge.n	2401b25c <lrintf+0x1c>
2401b256:	2000      	movs	r0, #0
2401b258:	b002      	add	sp, #8
2401b25a:	4770      	bx	lr
2401b25c:	2816      	cmp	r0, #22
2401b25e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
2401b262:	dd09      	ble.n	2401b278 <lrintf+0x38>
2401b264:	f3c3 0016 	ubfx	r0, r3, #0, #23
2401b268:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2401b26c:	3a96      	subs	r2, #150	; 0x96
2401b26e:	4090      	lsls	r0, r2
2401b270:	2900      	cmp	r1, #0
2401b272:	d0f1      	beq.n	2401b258 <lrintf+0x18>
2401b274:	4240      	negs	r0, r0
2401b276:	e7ef      	b.n	2401b258 <lrintf+0x18>
2401b278:	4b10      	ldr	r3, [pc, #64]	; (2401b2bc <lrintf+0x7c>)
2401b27a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
2401b27e:	ed93 7a00 	vldr	s14, [r3]
2401b282:	ee37 0a00 	vadd.f32	s0, s14, s0
2401b286:	ed8d 0a01 	vstr	s0, [sp, #4]
2401b28a:	eddd 7a01 	vldr	s15, [sp, #4]
2401b28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401b292:	ee17 3a90 	vmov	r3, s15
2401b296:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401b29a:	d0dc      	beq.n	2401b256 <lrintf+0x16>
2401b29c:	f3c3 0016 	ubfx	r0, r3, #0, #23
2401b2a0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
2401b2a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2401b2a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
2401b2ac:	40d8      	lsrs	r0, r3
2401b2ae:	e7df      	b.n	2401b270 <lrintf+0x30>
2401b2b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2401b2b4:	ee17 0a90 	vmov	r0, s15
2401b2b8:	e7ce      	b.n	2401b258 <lrintf+0x18>
2401b2ba:	bf00      	nop
2401b2bc:	24035740 	.word	0x24035740

2401b2c0 <checkint>:
2401b2c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
2401b2c4:	2b7e      	cmp	r3, #126	; 0x7e
2401b2c6:	dd10      	ble.n	2401b2ea <checkint+0x2a>
2401b2c8:	2b96      	cmp	r3, #150	; 0x96
2401b2ca:	dc0c      	bgt.n	2401b2e6 <checkint+0x26>
2401b2cc:	2201      	movs	r2, #1
2401b2ce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
2401b2d2:	fa02 f303 	lsl.w	r3, r2, r3
2401b2d6:	1e5a      	subs	r2, r3, #1
2401b2d8:	4202      	tst	r2, r0
2401b2da:	d106      	bne.n	2401b2ea <checkint+0x2a>
2401b2dc:	4203      	tst	r3, r0
2401b2de:	bf0c      	ite	eq
2401b2e0:	2002      	moveq	r0, #2
2401b2e2:	2001      	movne	r0, #1
2401b2e4:	4770      	bx	lr
2401b2e6:	2002      	movs	r0, #2
2401b2e8:	4770      	bx	lr
2401b2ea:	2000      	movs	r0, #0
2401b2ec:	4770      	bx	lr
	...

2401b2f0 <powf>:
2401b2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
2401b2f2:	ee10 1a10 	vmov	r1, s0
2401b2f6:	ee10 4a90 	vmov	r4, s1
2401b2fa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
2401b2fe:	0062      	lsls	r2, r4, #1
2401b300:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401b304:	eef0 7a40 	vmov.f32	s15, s0
2401b308:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
2401b30c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
2401b310:	d252      	bcs.n	2401b3b8 <powf+0xc8>
2401b312:	4298      	cmp	r0, r3
2401b314:	d252      	bcs.n	2401b3bc <powf+0xcc>
2401b316:	2000      	movs	r0, #0
2401b318:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
2401b31c:	4ca0      	ldr	r4, [pc, #640]	; (2401b5a0 <powf+0x2b0>)
2401b31e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
2401b322:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401b326:	f3c2 45c3 	ubfx	r5, r2, #19, #4
2401b32a:	0dd2      	lsrs	r2, r2, #23
2401b32c:	05d2      	lsls	r2, r2, #23
2401b32e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
2401b332:	1a8b      	subs	r3, r1, r2
2401b334:	ed95 6b00 	vldr	d6, [r5]
2401b338:	ee07 3a90 	vmov	s15, r3
2401b33c:	15d2      	asrs	r2, r2, #23
2401b33e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401b342:	eea6 5b07 	vfma.f64	d5, d6, d7
2401b346:	ed95 6b02 	vldr	d6, [r5, #8]
2401b34a:	ee25 2b05 	vmul.f64	d2, d5, d5
2401b34e:	ee22 1b02 	vmul.f64	d1, d2, d2
2401b352:	ee07 2a90 	vmov	s15, r2
2401b356:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
2401b35a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401b35e:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b362:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
2401b366:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
2401b36a:	eea5 3b06 	vfma.f64	d3, d5, d6
2401b36e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
2401b372:	eea5 6b04 	vfma.f64	d6, d5, d4
2401b376:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
2401b37a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
2401b37e:	eea5 7b04 	vfma.f64	d7, d5, d4
2401b382:	eea2 7b06 	vfma.f64	d7, d2, d6
2401b386:	eea3 7b01 	vfma.f64	d7, d3, d1
2401b38a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b38e:	ee10 3a90 	vmov	r3, s1
2401b392:	f3c3 32cf 	ubfx	r2, r3, #15, #16
2401b396:	f248 03bf 	movw	r3, #32959	; 0x80bf
2401b39a:	429a      	cmp	r2, r3
2401b39c:	f0c0 80b1 	bcc.w	2401b502 <powf+0x212>
2401b3a0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 2401b580 <powf+0x290>
2401b3a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401b3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b3ac:	dd79      	ble.n	2401b4a2 <powf+0x1b2>
2401b3ae:	b003      	add	sp, #12
2401b3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401b3b4:	f7ff bda2 	b.w	2401aefc <__math_oflowf>
2401b3b8:	4298      	cmp	r0, r3
2401b3ba:	d32d      	bcc.n	2401b418 <powf+0x128>
2401b3bc:	b952      	cbnz	r2, 2401b3d4 <powf+0xe4>
2401b3be:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
2401b3c2:	005b      	lsls	r3, r3, #1
2401b3c4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
2401b3c8:	f240 80c9 	bls.w	2401b55e <powf+0x26e>
2401b3cc:	ee37 0aa0 	vadd.f32	s0, s15, s1
2401b3d0:	b003      	add	sp, #12
2401b3d2:	bd30      	pop	{r4, r5, pc}
2401b3d4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
2401b3d8:	d105      	bne.n	2401b3e6 <powf+0xf6>
2401b3da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
2401b3de:	0064      	lsls	r4, r4, #1
2401b3e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
2401b3e4:	e7f0      	b.n	2401b3c8 <powf+0xd8>
2401b3e6:	004b      	lsls	r3, r1, #1
2401b3e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
2401b3ec:	d8ee      	bhi.n	2401b3cc <powf+0xdc>
2401b3ee:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401b3f2:	d1eb      	bne.n	2401b3cc <powf+0xdc>
2401b3f4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401b3f8:	f000 80b1 	beq.w	2401b55e <powf+0x26e>
2401b3fc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401b400:	ea6f 0404 	mvn.w	r4, r4
2401b404:	bf34      	ite	cc
2401b406:	2300      	movcc	r3, #0
2401b408:	2301      	movcs	r3, #1
2401b40a:	0fe4      	lsrs	r4, r4, #31
2401b40c:	42a3      	cmp	r3, r4
2401b40e:	f040 80a9 	bne.w	2401b564 <powf+0x274>
2401b412:	ee20 0aa0 	vmul.f32	s0, s1, s1
2401b416:	e7db      	b.n	2401b3d0 <powf+0xe0>
2401b418:	004d      	lsls	r5, r1, #1
2401b41a:	1e6a      	subs	r2, r5, #1
2401b41c:	429a      	cmp	r2, r3
2401b41e:	d31c      	bcc.n	2401b45a <powf+0x16a>
2401b420:	2900      	cmp	r1, #0
2401b422:	ee20 0a00 	vmul.f32	s0, s0, s0
2401b426:	da0f      	bge.n	2401b448 <powf+0x158>
2401b428:	ee10 0a90 	vmov	r0, s1
2401b42c:	f7ff ff48 	bl	2401b2c0 <checkint>
2401b430:	2801      	cmp	r0, #1
2401b432:	d109      	bne.n	2401b448 <powf+0x158>
2401b434:	eeb1 0a40 	vneg.f32	s0, s0
2401b438:	b945      	cbnz	r5, 2401b44c <powf+0x15c>
2401b43a:	2c00      	cmp	r4, #0
2401b43c:	dac8      	bge.n	2401b3d0 <powf+0xe0>
2401b43e:	b003      	add	sp, #12
2401b440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401b444:	f7ff bd60 	b.w	2401af08 <__math_divzerof>
2401b448:	2000      	movs	r0, #0
2401b44a:	e7f5      	b.n	2401b438 <powf+0x148>
2401b44c:	2c00      	cmp	r4, #0
2401b44e:	dabf      	bge.n	2401b3d0 <powf+0xe0>
2401b450:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401b454:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401b458:	e7ba      	b.n	2401b3d0 <powf+0xe0>
2401b45a:	2900      	cmp	r1, #0
2401b45c:	da1f      	bge.n	2401b49e <powf+0x1ae>
2401b45e:	ee10 0a90 	vmov	r0, s1
2401b462:	f7ff ff2d 	bl	2401b2c0 <checkint>
2401b466:	b920      	cbnz	r0, 2401b472 <powf+0x182>
2401b468:	b003      	add	sp, #12
2401b46a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401b46e:	f7ff bd5b 	b.w	2401af28 <__math_invalidf>
2401b472:	2801      	cmp	r0, #1
2401b474:	bf14      	ite	ne
2401b476:	2000      	movne	r0, #0
2401b478:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2401b47c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401b480:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2401b484:	f4bf af48 	bcs.w	2401b318 <powf+0x28>
2401b488:	ed9f 0a46 	vldr	s0, [pc, #280]	; 2401b5a4 <powf+0x2b4>
2401b48c:	ee27 0a80 	vmul.f32	s0, s15, s0
2401b490:	ee10 3a10 	vmov	r3, s0
2401b494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401b498:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
2401b49c:	e73c      	b.n	2401b318 <powf+0x28>
2401b49e:	2000      	movs	r0, #0
2401b4a0:	e7ee      	b.n	2401b480 <powf+0x190>
2401b4a2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 2401b588 <powf+0x298>
2401b4a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b4ae:	dd10      	ble.n	2401b4d2 <powf+0x1e2>
2401b4b0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
2401b4b4:	2800      	cmp	r0, #0
2401b4b6:	d158      	bne.n	2401b56a <powf+0x27a>
2401b4b8:	9300      	str	r3, [sp, #0]
2401b4ba:	eddd 7a00 	vldr	s15, [sp]
2401b4be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401b4c2:	ee77 7a87 	vadd.f32	s15, s15, s14
2401b4c6:	eef4 7a47 	vcmp.f32	s15, s14
2401b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b4ce:	f47f af6e 	bne.w	2401b3ae <powf+0xbe>
2401b4d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 2401b590 <powf+0x2a0>
2401b4d6:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401b4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b4de:	d804      	bhi.n	2401b4ea <powf+0x1fa>
2401b4e0:	b003      	add	sp, #12
2401b4e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401b4e6:	f7ff bcfd 	b.w	2401aee4 <__math_uflowf>
2401b4ea:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 2401b598 <powf+0x2a8>
2401b4ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b4f6:	d504      	bpl.n	2401b502 <powf+0x212>
2401b4f8:	b003      	add	sp, #12
2401b4fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401b4fe:	f7ff bcf7 	b.w	2401aef0 <__math_may_uflowf>
2401b502:	4b29      	ldr	r3, [pc, #164]	; (2401b5a8 <powf+0x2b8>)
2401b504:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
2401b508:	ee30 6b07 	vadd.f64	d6, d0, d7
2401b50c:	ee16 2a10 	vmov	r2, s12
2401b510:	ee36 7b47 	vsub.f64	d7, d6, d7
2401b514:	f002 011f 	and.w	r1, r2, #31
2401b518:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
2401b51c:	ee30 7b47 	vsub.f64	d7, d0, d7
2401b520:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401b524:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
2401b528:	ee27 4b07 	vmul.f64	d4, d7, d7
2401b52c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
2401b530:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
2401b534:	eea7 6b05 	vfma.f64	d6, d7, d5
2401b538:	686d      	ldr	r5, [r5, #4]
2401b53a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
2401b53e:	1882      	adds	r2, r0, r2
2401b540:	2300      	movs	r3, #0
2401b542:	1918      	adds	r0, r3, r4
2401b544:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
2401b548:	eea7 0b05 	vfma.f64	d0, d7, d5
2401b54c:	ec41 0b17 	vmov	d7, r0, r1
2401b550:	eea6 0b04 	vfma.f64	d0, d6, d4
2401b554:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b558:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401b55c:	e738      	b.n	2401b3d0 <powf+0xe0>
2401b55e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b562:	e735      	b.n	2401b3d0 <powf+0xe0>
2401b564:	ed9f 0a11 	vldr	s0, [pc, #68]	; 2401b5ac <powf+0x2bc>
2401b568:	e732      	b.n	2401b3d0 <powf+0xe0>
2401b56a:	9301      	str	r3, [sp, #4]
2401b56c:	eddd 7a01 	vldr	s15, [sp, #4]
2401b570:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401b574:	ee77 7a67 	vsub.f32	s15, s14, s15
2401b578:	e7a5      	b.n	2401b4c6 <powf+0x1d6>
2401b57a:	bf00      	nop
2401b57c:	f3af 8000 	nop.w
2401b580:	ffd1d571 	.word	0xffd1d571
2401b584:	405fffff 	.word	0x405fffff
2401b588:	ffa3aae2 	.word	0xffa3aae2
2401b58c:	405fffff 	.word	0x405fffff
2401b590:	00000000 	.word	0x00000000
2401b594:	c062c000 	.word	0xc062c000
2401b598:	00000000 	.word	0x00000000
2401b59c:	c062a000 	.word	0xc062a000
2401b5a0:	24035748 	.word	0x24035748
2401b5a4:	4b000000 	.word	0x4b000000
2401b5a8:	240353b8 	.word	0x240353b8
2401b5ac:	00000000 	.word	0x00000000

2401b5b0 <tanf>:
2401b5b0:	ee10 3a10 	vmov	r3, s0
2401b5b4:	b507      	push	{r0, r1, r2, lr}
2401b5b6:	4a12      	ldr	r2, [pc, #72]	; (2401b600 <tanf+0x50>)
2401b5b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401b5bc:	4293      	cmp	r3, r2
2401b5be:	dc07      	bgt.n	2401b5d0 <tanf+0x20>
2401b5c0:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401b604 <tanf+0x54>
2401b5c4:	2001      	movs	r0, #1
2401b5c6:	b003      	add	sp, #12
2401b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
2401b5cc:	f001 b99a 	b.w	2401c904 <__kernel_tanf>
2401b5d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401b5d4:	db04      	blt.n	2401b5e0 <tanf+0x30>
2401b5d6:	ee30 0a40 	vsub.f32	s0, s0, s0
2401b5da:	b003      	add	sp, #12
2401b5dc:	f85d fb04 	ldr.w	pc, [sp], #4
2401b5e0:	4668      	mov	r0, sp
2401b5e2:	f000 fa2d 	bl	2401ba40 <__ieee754_rem_pio2f>
2401b5e6:	0040      	lsls	r0, r0, #1
2401b5e8:	f000 0002 	and.w	r0, r0, #2
2401b5ec:	eddd 0a01 	vldr	s1, [sp, #4]
2401b5f0:	ed9d 0a00 	vldr	s0, [sp]
2401b5f4:	f1c0 0001 	rsb	r0, r0, #1
2401b5f8:	f001 f984 	bl	2401c904 <__kernel_tanf>
2401b5fc:	e7ed      	b.n	2401b5da <tanf+0x2a>
2401b5fe:	bf00      	nop
2401b600:	3f490fda 	.word	0x3f490fda
2401b604:	00000000 	.word	0x00000000

2401b608 <tanhf>:
2401b608:	b510      	push	{r4, lr}
2401b60a:	ee10 4a10 	vmov	r4, s0
2401b60e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
2401b612:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401b616:	ed2d 8b02 	vpush	{d8}
2401b61a:	eeb0 7a40 	vmov.f32	s14, s0
2401b61e:	db0c      	blt.n	2401b63a <tanhf+0x32>
2401b620:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b624:	eec0 7a07 	vdiv.f32	s15, s0, s14
2401b628:	2c00      	cmp	r4, #0
2401b62a:	bfac      	ite	ge
2401b62c:	ee37 0a80 	vaddge.f32	s0, s15, s0
2401b630:	ee37 0ac0 	vsublt.f32	s0, s15, s0
2401b634:	ecbd 8b02 	vpop	{d8}
2401b638:	bd10      	pop	{r4, pc}
2401b63a:	4a1b      	ldr	r2, [pc, #108]	; (2401b6a8 <tanhf+0xa0>)
2401b63c:	4293      	cmp	r3, r2
2401b63e:	dc30      	bgt.n	2401b6a2 <tanhf+0x9a>
2401b640:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401b644:	da06      	bge.n	2401b654 <tanhf+0x4c>
2401b646:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401b64a:	ee70 7a27 	vadd.f32	s15, s0, s15
2401b64e:	ee27 0a80 	vmul.f32	s0, s15, s0
2401b652:	e7ef      	b.n	2401b634 <tanhf+0x2c>
2401b654:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401b658:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
2401b65c:	db12      	blt.n	2401b684 <tanhf+0x7c>
2401b65e:	f7ff fd1b 	bl	2401b098 <fabsf>
2401b662:	ee30 0a00 	vadd.f32	s0, s0, s0
2401b666:	f001 fb35 	bl	2401ccd4 <expm1f>
2401b66a:	ee30 0a08 	vadd.f32	s0, s0, s16
2401b66e:	eec8 7a00 	vdiv.f32	s15, s16, s0
2401b672:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b676:	ee30 0a67 	vsub.f32	s0, s0, s15
2401b67a:	2c00      	cmp	r4, #0
2401b67c:	bfb8      	it	lt
2401b67e:	eeb1 0a40 	vneglt.f32	s0, s0
2401b682:	e7d7      	b.n	2401b634 <tanhf+0x2c>
2401b684:	f7ff fd08 	bl	2401b098 <fabsf>
2401b688:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
2401b68c:	ee20 0a27 	vmul.f32	s0, s0, s15
2401b690:	f001 fb20 	bl	2401ccd4 <expm1f>
2401b694:	ee70 7a08 	vadd.f32	s15, s0, s16
2401b698:	eeb1 7a40 	vneg.f32	s14, s0
2401b69c:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401b6a0:	e7eb      	b.n	2401b67a <tanhf+0x72>
2401b6a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b6a6:	e7e8      	b.n	2401b67a <tanhf+0x72>
2401b6a8:	41afffff 	.word	0x41afffff

2401b6ac <log10f>:
2401b6ac:	b508      	push	{r3, lr}
2401b6ae:	ed2d 8b02 	vpush	{d8}
2401b6b2:	eeb0 8a40 	vmov.f32	s16, s0
2401b6b6:	f000 f96b 	bl	2401b990 <__ieee754_log10f>
2401b6ba:	eeb4 8a48 	vcmp.f32	s16, s16
2401b6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b6c2:	d60f      	bvs.n	2401b6e4 <log10f+0x38>
2401b6c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401b6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b6cc:	d80a      	bhi.n	2401b6e4 <log10f+0x38>
2401b6ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401b6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b6d6:	d108      	bne.n	2401b6ea <log10f+0x3e>
2401b6d8:	f7ff f93c 	bl	2401a954 <__errno>
2401b6dc:	2322      	movs	r3, #34	; 0x22
2401b6de:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401b700 <log10f+0x54>
2401b6e2:	6003      	str	r3, [r0, #0]
2401b6e4:	ecbd 8b02 	vpop	{d8}
2401b6e8:	bd08      	pop	{r3, pc}
2401b6ea:	f7ff f933 	bl	2401a954 <__errno>
2401b6ee:	ecbd 8b02 	vpop	{d8}
2401b6f2:	2321      	movs	r3, #33	; 0x21
2401b6f4:	6003      	str	r3, [r0, #0]
2401b6f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401b6fa:	4802      	ldr	r0, [pc, #8]	; (2401b704 <log10f+0x58>)
2401b6fc:	f001 bc46 	b.w	2401cf8c <nanf>
2401b700:	ff800000 	.word	0xff800000
2401b704:	24034b40 	.word	0x24034b40

2401b708 <__ieee754_rem_pio2>:
2401b708:	b570      	push	{r4, r5, r6, lr}
2401b70a:	eeb0 7b40 	vmov.f64	d7, d0
2401b70e:	ee17 5a90 	vmov	r5, s15
2401b712:	4b99      	ldr	r3, [pc, #612]	; (2401b978 <__ieee754_rem_pio2+0x270>)
2401b714:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
2401b718:	429e      	cmp	r6, r3
2401b71a:	b088      	sub	sp, #32
2401b71c:	4604      	mov	r4, r0
2401b71e:	dc07      	bgt.n	2401b730 <__ieee754_rem_pio2+0x28>
2401b720:	2200      	movs	r2, #0
2401b722:	2300      	movs	r3, #0
2401b724:	ed84 0b00 	vstr	d0, [r4]
2401b728:	e9c0 2302 	strd	r2, r3, [r0, #8]
2401b72c:	2000      	movs	r0, #0
2401b72e:	e01b      	b.n	2401b768 <__ieee754_rem_pio2+0x60>
2401b730:	4b92      	ldr	r3, [pc, #584]	; (2401b97c <__ieee754_rem_pio2+0x274>)
2401b732:	429e      	cmp	r6, r3
2401b734:	dc3b      	bgt.n	2401b7ae <__ieee754_rem_pio2+0xa6>
2401b736:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401b73a:	2d00      	cmp	r5, #0
2401b73c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 2401b938 <__ieee754_rem_pio2+0x230>
2401b740:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
2401b744:	dd19      	ble.n	2401b77a <__ieee754_rem_pio2+0x72>
2401b746:	ee30 7b46 	vsub.f64	d7, d0, d6
2401b74a:	429e      	cmp	r6, r3
2401b74c:	d00e      	beq.n	2401b76c <__ieee754_rem_pio2+0x64>
2401b74e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 2401b940 <__ieee754_rem_pio2+0x238>
2401b752:	ee37 5b46 	vsub.f64	d5, d7, d6
2401b756:	ee37 7b45 	vsub.f64	d7, d7, d5
2401b75a:	ed84 5b00 	vstr	d5, [r4]
2401b75e:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b762:	ed84 7b02 	vstr	d7, [r4, #8]
2401b766:	2001      	movs	r0, #1
2401b768:	b008      	add	sp, #32
2401b76a:	bd70      	pop	{r4, r5, r6, pc}
2401b76c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401b948 <__ieee754_rem_pio2+0x240>
2401b770:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b774:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401b950 <__ieee754_rem_pio2+0x248>
2401b778:	e7eb      	b.n	2401b752 <__ieee754_rem_pio2+0x4a>
2401b77a:	429e      	cmp	r6, r3
2401b77c:	ee30 7b06 	vadd.f64	d7, d0, d6
2401b780:	d00e      	beq.n	2401b7a0 <__ieee754_rem_pio2+0x98>
2401b782:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 2401b940 <__ieee754_rem_pio2+0x238>
2401b786:	ee37 5b06 	vadd.f64	d5, d7, d6
2401b78a:	ee37 7b45 	vsub.f64	d7, d7, d5
2401b78e:	ed84 5b00 	vstr	d5, [r4]
2401b792:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401b79a:	ed84 7b02 	vstr	d7, [r4, #8]
2401b79e:	e7e3      	b.n	2401b768 <__ieee754_rem_pio2+0x60>
2401b7a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401b948 <__ieee754_rem_pio2+0x240>
2401b7a4:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b7a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401b950 <__ieee754_rem_pio2+0x248>
2401b7ac:	e7eb      	b.n	2401b786 <__ieee754_rem_pio2+0x7e>
2401b7ae:	4b74      	ldr	r3, [pc, #464]	; (2401b980 <__ieee754_rem_pio2+0x278>)
2401b7b0:	429e      	cmp	r6, r3
2401b7b2:	dc70      	bgt.n	2401b896 <__ieee754_rem_pio2+0x18e>
2401b7b4:	f001 f986 	bl	2401cac4 <fabs>
2401b7b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401b7bc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 2401b958 <__ieee754_rem_pio2+0x250>
2401b7c0:	eea0 7b06 	vfma.f64	d7, d0, d6
2401b7c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
2401b7c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401b7cc:	ee17 0a90 	vmov	r0, s15
2401b7d0:	eeb1 4b45 	vneg.f64	d4, d5
2401b7d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401b938 <__ieee754_rem_pio2+0x230>
2401b7d8:	eea5 0b47 	vfms.f64	d0, d5, d7
2401b7dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401b940 <__ieee754_rem_pio2+0x238>
2401b7e0:	281f      	cmp	r0, #31
2401b7e2:	ee25 7b07 	vmul.f64	d7, d5, d7
2401b7e6:	ee30 6b47 	vsub.f64	d6, d0, d7
2401b7ea:	dc08      	bgt.n	2401b7fe <__ieee754_rem_pio2+0xf6>
2401b7ec:	4b65      	ldr	r3, [pc, #404]	; (2401b984 <__ieee754_rem_pio2+0x27c>)
2401b7ee:	1e42      	subs	r2, r0, #1
2401b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401b7f4:	42b3      	cmp	r3, r6
2401b7f6:	d002      	beq.n	2401b7fe <__ieee754_rem_pio2+0xf6>
2401b7f8:	ed84 6b00 	vstr	d6, [r4]
2401b7fc:	e026      	b.n	2401b84c <__ieee754_rem_pio2+0x144>
2401b7fe:	ee16 3a90 	vmov	r3, s13
2401b802:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401b806:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
2401b80a:	2b10      	cmp	r3, #16
2401b80c:	ea4f 5226 	mov.w	r2, r6, asr #20
2401b810:	ddf2      	ble.n	2401b7f8 <__ieee754_rem_pio2+0xf0>
2401b812:	eeb0 6b40 	vmov.f64	d6, d0
2401b816:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 2401b948 <__ieee754_rem_pio2+0x240>
2401b81a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 2401b950 <__ieee754_rem_pio2+0x248>
2401b81e:	eea4 6b07 	vfma.f64	d6, d4, d7
2401b822:	ee30 0b46 	vsub.f64	d0, d0, d6
2401b826:	eea4 0b07 	vfma.f64	d0, d4, d7
2401b82a:	eeb0 7b40 	vmov.f64	d7, d0
2401b82e:	ee95 7b03 	vfnms.f64	d7, d5, d3
2401b832:	ee36 3b47 	vsub.f64	d3, d6, d7
2401b836:	ee13 3a90 	vmov	r3, s7
2401b83a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401b83e:	1ad3      	subs	r3, r2, r3
2401b840:	2b31      	cmp	r3, #49	; 0x31
2401b842:	dc17      	bgt.n	2401b874 <__ieee754_rem_pio2+0x16c>
2401b844:	eeb0 0b46 	vmov.f64	d0, d6
2401b848:	ed84 3b00 	vstr	d3, [r4]
2401b84c:	ed94 6b00 	vldr	d6, [r4]
2401b850:	2d00      	cmp	r5, #0
2401b852:	ee30 0b46 	vsub.f64	d0, d0, d6
2401b856:	ee30 0b47 	vsub.f64	d0, d0, d7
2401b85a:	ed84 0b02 	vstr	d0, [r4, #8]
2401b85e:	da83      	bge.n	2401b768 <__ieee754_rem_pio2+0x60>
2401b860:	eeb1 6b46 	vneg.f64	d6, d6
2401b864:	eeb1 0b40 	vneg.f64	d0, d0
2401b868:	ed84 6b00 	vstr	d6, [r4]
2401b86c:	ed84 0b02 	vstr	d0, [r4, #8]
2401b870:	4240      	negs	r0, r0
2401b872:	e779      	b.n	2401b768 <__ieee754_rem_pio2+0x60>
2401b874:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 2401b960 <__ieee754_rem_pio2+0x258>
2401b878:	eeb0 0b46 	vmov.f64	d0, d6
2401b87c:	eea4 0b03 	vfma.f64	d0, d4, d3
2401b880:	ee36 7b40 	vsub.f64	d7, d6, d0
2401b884:	ed9f 6b38 	vldr	d6, [pc, #224]	; 2401b968 <__ieee754_rem_pio2+0x260>
2401b888:	eea4 7b03 	vfma.f64	d7, d4, d3
2401b88c:	ee95 7b06 	vfnms.f64	d7, d5, d6
2401b890:	ee30 6b47 	vsub.f64	d6, d0, d7
2401b894:	e7b0      	b.n	2401b7f8 <__ieee754_rem_pio2+0xf0>
2401b896:	4b3c      	ldr	r3, [pc, #240]	; (2401b988 <__ieee754_rem_pio2+0x280>)
2401b898:	429e      	cmp	r6, r3
2401b89a:	dd06      	ble.n	2401b8aa <__ieee754_rem_pio2+0x1a2>
2401b89c:	ee30 7b40 	vsub.f64	d7, d0, d0
2401b8a0:	ed80 7b02 	vstr	d7, [r0, #8]
2401b8a4:	ed80 7b00 	vstr	d7, [r0]
2401b8a8:	e740      	b.n	2401b72c <__ieee754_rem_pio2+0x24>
2401b8aa:	1532      	asrs	r2, r6, #20
2401b8ac:	ee10 0a10 	vmov	r0, s0
2401b8b0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
2401b8b4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
2401b8b8:	ec41 0b17 	vmov	d7, r0, r1
2401b8bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401b8c0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 2401b970 <__ieee754_rem_pio2+0x268>
2401b8c4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401b8c8:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b8cc:	ed8d 6b02 	vstr	d6, [sp, #8]
2401b8d0:	ee27 7b05 	vmul.f64	d7, d7, d5
2401b8d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401b8d8:	a902      	add	r1, sp, #8
2401b8da:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401b8de:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b8e2:	ed8d 6b04 	vstr	d6, [sp, #16]
2401b8e6:	ee27 7b05 	vmul.f64	d7, d7, d5
2401b8ea:	ed8d 7b06 	vstr	d7, [sp, #24]
2401b8ee:	2603      	movs	r6, #3
2401b8f0:	4608      	mov	r0, r1
2401b8f2:	ed91 7b04 	vldr	d7, [r1, #16]
2401b8f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
2401b8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b8fe:	4633      	mov	r3, r6
2401b900:	f1a1 0108 	sub.w	r1, r1, #8
2401b904:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
2401b908:	d0f3      	beq.n	2401b8f2 <__ieee754_rem_pio2+0x1ea>
2401b90a:	4920      	ldr	r1, [pc, #128]	; (2401b98c <__ieee754_rem_pio2+0x284>)
2401b90c:	9101      	str	r1, [sp, #4]
2401b90e:	2102      	movs	r1, #2
2401b910:	9100      	str	r1, [sp, #0]
2401b912:	4621      	mov	r1, r4
2401b914:	f000 f9d0 	bl	2401bcb8 <__kernel_rem_pio2>
2401b918:	2d00      	cmp	r5, #0
2401b91a:	f6bf af25 	bge.w	2401b768 <__ieee754_rem_pio2+0x60>
2401b91e:	ed94 7b00 	vldr	d7, [r4]
2401b922:	eeb1 7b47 	vneg.f64	d7, d7
2401b926:	ed84 7b00 	vstr	d7, [r4]
2401b92a:	ed94 7b02 	vldr	d7, [r4, #8]
2401b92e:	eeb1 7b47 	vneg.f64	d7, d7
2401b932:	ed84 7b02 	vstr	d7, [r4, #8]
2401b936:	e79b      	b.n	2401b870 <__ieee754_rem_pio2+0x168>
2401b938:	54400000 	.word	0x54400000
2401b93c:	3ff921fb 	.word	0x3ff921fb
2401b940:	1a626331 	.word	0x1a626331
2401b944:	3dd0b461 	.word	0x3dd0b461
2401b948:	1a600000 	.word	0x1a600000
2401b94c:	3dd0b461 	.word	0x3dd0b461
2401b950:	2e037073 	.word	0x2e037073
2401b954:	3ba3198a 	.word	0x3ba3198a
2401b958:	6dc9c883 	.word	0x6dc9c883
2401b95c:	3fe45f30 	.word	0x3fe45f30
2401b960:	2e000000 	.word	0x2e000000
2401b964:	3ba3198a 	.word	0x3ba3198a
2401b968:	252049c1 	.word	0x252049c1
2401b96c:	397b839a 	.word	0x397b839a
2401b970:	00000000 	.word	0x00000000
2401b974:	41700000 	.word	0x41700000
2401b978:	3fe921fb 	.word	0x3fe921fb
2401b97c:	4002d97b 	.word	0x4002d97b
2401b980:	413921fb 	.word	0x413921fb
2401b984:	240359b0 	.word	0x240359b0
2401b988:	7fefffff 	.word	0x7fefffff
2401b98c:	24035a30 	.word	0x24035a30

2401b990 <__ieee754_log10f>:
2401b990:	b508      	push	{r3, lr}
2401b992:	ee10 2a10 	vmov	r2, s0
2401b996:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401b99a:	ed2d 8b02 	vpush	{d8}
2401b99e:	d108      	bne.n	2401b9b2 <__ieee754_log10f+0x22>
2401b9a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2401ba28 <__ieee754_log10f+0x98>
2401b9a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401ba2c <__ieee754_log10f+0x9c>
2401b9a8:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401b9ac:	ecbd 8b02 	vpop	{d8}
2401b9b0:	bd08      	pop	{r3, pc}
2401b9b2:	2a00      	cmp	r2, #0
2401b9b4:	da02      	bge.n	2401b9bc <__ieee754_log10f+0x2c>
2401b9b6:	ee30 7a40 	vsub.f32	s14, s0, s0
2401b9ba:	e7f3      	b.n	2401b9a4 <__ieee754_log10f+0x14>
2401b9bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401b9c0:	db02      	blt.n	2401b9c8 <__ieee754_log10f+0x38>
2401b9c2:	ee30 0a00 	vadd.f32	s0, s0, s0
2401b9c6:	e7f1      	b.n	2401b9ac <__ieee754_log10f+0x1c>
2401b9c8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
2401b9cc:	bfbf      	itttt	lt
2401b9ce:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 2401ba30 <__ieee754_log10f+0xa0>
2401b9d2:	ee60 7a27 	vmullt.f32	s15, s0, s15
2401b9d6:	f06f 0118 	mvnlt.w	r1, #24
2401b9da:	ee17 2a90 	vmovlt	r2, s15
2401b9de:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401b9e2:	bfa8      	it	ge
2401b9e4:	2100      	movge	r1, #0
2401b9e6:	3b7f      	subs	r3, #127	; 0x7f
2401b9e8:	440b      	add	r3, r1
2401b9ea:	0fd9      	lsrs	r1, r3, #31
2401b9ec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2401b9f0:	ee07 3a90 	vmov	s15, r3
2401b9f4:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401b9f8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
2401b9fc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
2401ba00:	ee00 3a10 	vmov	s0, r3
2401ba04:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
2401ba08:	f7ff fb4e 	bl	2401b0a8 <logf>
2401ba0c:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401ba34 <__ieee754_log10f+0xa4>
2401ba10:	ee20 0a27 	vmul.f32	s0, s0, s15
2401ba14:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401ba38 <__ieee754_log10f+0xa8>
2401ba18:	eea8 0a27 	vfma.f32	s0, s16, s15
2401ba1c:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401ba3c <__ieee754_log10f+0xac>
2401ba20:	eea8 0a27 	vfma.f32	s0, s16, s15
2401ba24:	e7c2      	b.n	2401b9ac <__ieee754_log10f+0x1c>
2401ba26:	bf00      	nop
2401ba28:	cc000000 	.word	0xcc000000
2401ba2c:	00000000 	.word	0x00000000
2401ba30:	4c000000 	.word	0x4c000000
2401ba34:	3ede5bd9 	.word	0x3ede5bd9
2401ba38:	355427db 	.word	0x355427db
2401ba3c:	3e9a2080 	.word	0x3e9a2080

2401ba40 <__ieee754_rem_pio2f>:
2401ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
2401ba42:	ee10 6a10 	vmov	r6, s0
2401ba46:	4b8e      	ldr	r3, [pc, #568]	; (2401bc80 <__ieee754_rem_pio2f+0x240>)
2401ba48:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
2401ba4c:	429d      	cmp	r5, r3
2401ba4e:	b087      	sub	sp, #28
2401ba50:	eef0 7a40 	vmov.f32	s15, s0
2401ba54:	4604      	mov	r4, r0
2401ba56:	dc05      	bgt.n	2401ba64 <__ieee754_rem_pio2f+0x24>
2401ba58:	2300      	movs	r3, #0
2401ba5a:	ed80 0a00 	vstr	s0, [r0]
2401ba5e:	6043      	str	r3, [r0, #4]
2401ba60:	2000      	movs	r0, #0
2401ba62:	e01a      	b.n	2401ba9a <__ieee754_rem_pio2f+0x5a>
2401ba64:	4b87      	ldr	r3, [pc, #540]	; (2401bc84 <__ieee754_rem_pio2f+0x244>)
2401ba66:	429d      	cmp	r5, r3
2401ba68:	dc46      	bgt.n	2401baf8 <__ieee754_rem_pio2f+0xb8>
2401ba6a:	2e00      	cmp	r6, #0
2401ba6c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 2401bc88 <__ieee754_rem_pio2f+0x248>
2401ba70:	4b86      	ldr	r3, [pc, #536]	; (2401bc8c <__ieee754_rem_pio2f+0x24c>)
2401ba72:	f025 050f 	bic.w	r5, r5, #15
2401ba76:	dd1f      	ble.n	2401bab8 <__ieee754_rem_pio2f+0x78>
2401ba78:	429d      	cmp	r5, r3
2401ba7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401ba7e:	d00e      	beq.n	2401ba9e <__ieee754_rem_pio2f+0x5e>
2401ba80:	ed9f 7a83 	vldr	s14, [pc, #524]	; 2401bc90 <__ieee754_rem_pio2f+0x250>
2401ba84:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401ba88:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401ba8c:	ed80 0a00 	vstr	s0, [r0]
2401ba90:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ba94:	2001      	movs	r0, #1
2401ba96:	edc4 7a01 	vstr	s15, [r4, #4]
2401ba9a:	b007      	add	sp, #28
2401ba9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401ba9e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 2401bc94 <__ieee754_rem_pio2f+0x254>
2401baa2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 2401bc98 <__ieee754_rem_pio2f+0x258>
2401baa6:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401baaa:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401baae:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401bab2:	edc0 6a00 	vstr	s13, [r0]
2401bab6:	e7eb      	b.n	2401ba90 <__ieee754_rem_pio2f+0x50>
2401bab8:	429d      	cmp	r5, r3
2401baba:	ee77 7a80 	vadd.f32	s15, s15, s0
2401babe:	d00e      	beq.n	2401bade <__ieee754_rem_pio2f+0x9e>
2401bac0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 2401bc90 <__ieee754_rem_pio2f+0x250>
2401bac4:	ee37 0a87 	vadd.f32	s0, s15, s14
2401bac8:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401bacc:	ed80 0a00 	vstr	s0, [r0]
2401bad0:	ee77 7a87 	vadd.f32	s15, s15, s14
2401bad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401bad8:	edc4 7a01 	vstr	s15, [r4, #4]
2401badc:	e7dd      	b.n	2401ba9a <__ieee754_rem_pio2f+0x5a>
2401bade:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 2401bc94 <__ieee754_rem_pio2f+0x254>
2401bae2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 2401bc98 <__ieee754_rem_pio2f+0x258>
2401bae6:	ee77 7a80 	vadd.f32	s15, s15, s0
2401baea:	ee77 6a87 	vadd.f32	s13, s15, s14
2401baee:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401baf2:	edc0 6a00 	vstr	s13, [r0]
2401baf6:	e7eb      	b.n	2401bad0 <__ieee754_rem_pio2f+0x90>
2401baf8:	4b68      	ldr	r3, [pc, #416]	; (2401bc9c <__ieee754_rem_pio2f+0x25c>)
2401bafa:	429d      	cmp	r5, r3
2401bafc:	dc72      	bgt.n	2401bbe4 <__ieee754_rem_pio2f+0x1a4>
2401bafe:	f7ff facb 	bl	2401b098 <fabsf>
2401bb02:	ed9f 7a67 	vldr	s14, [pc, #412]	; 2401bca0 <__ieee754_rem_pio2f+0x260>
2401bb06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401bb0a:	eee0 7a07 	vfma.f32	s15, s0, s14
2401bb0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401bb12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401bb16:	ee17 0a90 	vmov	r0, s15
2401bb1a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401bc88 <__ieee754_rem_pio2f+0x248>
2401bb1e:	eea7 0a67 	vfms.f32	s0, s14, s15
2401bb22:	281f      	cmp	r0, #31
2401bb24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 2401bc90 <__ieee754_rem_pio2f+0x250>
2401bb28:	ee67 7a27 	vmul.f32	s15, s14, s15
2401bb2c:	eeb1 6a47 	vneg.f32	s12, s14
2401bb30:	ee70 6a67 	vsub.f32	s13, s0, s15
2401bb34:	ee16 2a90 	vmov	r2, s13
2401bb38:	dc1c      	bgt.n	2401bb74 <__ieee754_rem_pio2f+0x134>
2401bb3a:	495a      	ldr	r1, [pc, #360]	; (2401bca4 <__ieee754_rem_pio2f+0x264>)
2401bb3c:	1e47      	subs	r7, r0, #1
2401bb3e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
2401bb42:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401bb46:	428b      	cmp	r3, r1
2401bb48:	d014      	beq.n	2401bb74 <__ieee754_rem_pio2f+0x134>
2401bb4a:	6022      	str	r2, [r4, #0]
2401bb4c:	ed94 7a00 	vldr	s14, [r4]
2401bb50:	ee30 0a47 	vsub.f32	s0, s0, s14
2401bb54:	2e00      	cmp	r6, #0
2401bb56:	ee30 0a67 	vsub.f32	s0, s0, s15
2401bb5a:	ed84 0a01 	vstr	s0, [r4, #4]
2401bb5e:	da9c      	bge.n	2401ba9a <__ieee754_rem_pio2f+0x5a>
2401bb60:	eeb1 7a47 	vneg.f32	s14, s14
2401bb64:	eeb1 0a40 	vneg.f32	s0, s0
2401bb68:	ed84 7a00 	vstr	s14, [r4]
2401bb6c:	ed84 0a01 	vstr	s0, [r4, #4]
2401bb70:	4240      	negs	r0, r0
2401bb72:	e792      	b.n	2401ba9a <__ieee754_rem_pio2f+0x5a>
2401bb74:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401bb78:	15eb      	asrs	r3, r5, #23
2401bb7a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
2401bb7e:	2d08      	cmp	r5, #8
2401bb80:	dde3      	ble.n	2401bb4a <__ieee754_rem_pio2f+0x10a>
2401bb82:	eddf 7a44 	vldr	s15, [pc, #272]	; 2401bc94 <__ieee754_rem_pio2f+0x254>
2401bb86:	eddf 5a44 	vldr	s11, [pc, #272]	; 2401bc98 <__ieee754_rem_pio2f+0x258>
2401bb8a:	eef0 6a40 	vmov.f32	s13, s0
2401bb8e:	eee6 6a27 	vfma.f32	s13, s12, s15
2401bb92:	ee30 0a66 	vsub.f32	s0, s0, s13
2401bb96:	eea6 0a27 	vfma.f32	s0, s12, s15
2401bb9a:	eef0 7a40 	vmov.f32	s15, s0
2401bb9e:	eed7 7a25 	vfnms.f32	s15, s14, s11
2401bba2:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401bba6:	ee15 2a90 	vmov	r2, s11
2401bbaa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401bbae:	1a5b      	subs	r3, r3, r1
2401bbb0:	2b19      	cmp	r3, #25
2401bbb2:	dc04      	bgt.n	2401bbbe <__ieee754_rem_pio2f+0x17e>
2401bbb4:	edc4 5a00 	vstr	s11, [r4]
2401bbb8:	eeb0 0a66 	vmov.f32	s0, s13
2401bbbc:	e7c6      	b.n	2401bb4c <__ieee754_rem_pio2f+0x10c>
2401bbbe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 2401bca8 <__ieee754_rem_pio2f+0x268>
2401bbc2:	eeb0 0a66 	vmov.f32	s0, s13
2401bbc6:	eea6 0a25 	vfma.f32	s0, s12, s11
2401bbca:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401bbce:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401bcac <__ieee754_rem_pio2f+0x26c>
2401bbd2:	eee6 7a25 	vfma.f32	s15, s12, s11
2401bbd6:	eed7 7a26 	vfnms.f32	s15, s14, s13
2401bbda:	ee30 7a67 	vsub.f32	s14, s0, s15
2401bbde:	ed84 7a00 	vstr	s14, [r4]
2401bbe2:	e7b3      	b.n	2401bb4c <__ieee754_rem_pio2f+0x10c>
2401bbe4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
2401bbe8:	db06      	blt.n	2401bbf8 <__ieee754_rem_pio2f+0x1b8>
2401bbea:	ee70 7a40 	vsub.f32	s15, s0, s0
2401bbee:	edc0 7a01 	vstr	s15, [r0, #4]
2401bbf2:	edc0 7a00 	vstr	s15, [r0]
2401bbf6:	e733      	b.n	2401ba60 <__ieee754_rem_pio2f+0x20>
2401bbf8:	15ea      	asrs	r2, r5, #23
2401bbfa:	3a86      	subs	r2, #134	; 0x86
2401bbfc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
2401bc00:	ee07 3a90 	vmov	s15, r3
2401bc04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401bc08:	eddf 6a29 	vldr	s13, [pc, #164]	; 2401bcb0 <__ieee754_rem_pio2f+0x270>
2401bc0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401bc10:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401bc14:	ed8d 7a03 	vstr	s14, [sp, #12]
2401bc18:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401bc1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401bc20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401bc24:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401bc28:	ed8d 7a04 	vstr	s14, [sp, #16]
2401bc2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401bc30:	eef5 7a40 	vcmp.f32	s15, #0.0
2401bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bc38:	edcd 7a05 	vstr	s15, [sp, #20]
2401bc3c:	d11e      	bne.n	2401bc7c <__ieee754_rem_pio2f+0x23c>
2401bc3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
2401bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bc46:	bf14      	ite	ne
2401bc48:	2302      	movne	r3, #2
2401bc4a:	2301      	moveq	r3, #1
2401bc4c:	4919      	ldr	r1, [pc, #100]	; (2401bcb4 <__ieee754_rem_pio2f+0x274>)
2401bc4e:	9101      	str	r1, [sp, #4]
2401bc50:	2102      	movs	r1, #2
2401bc52:	9100      	str	r1, [sp, #0]
2401bc54:	a803      	add	r0, sp, #12
2401bc56:	4621      	mov	r1, r4
2401bc58:	f000 fbde 	bl	2401c418 <__kernel_rem_pio2f>
2401bc5c:	2e00      	cmp	r6, #0
2401bc5e:	f6bf af1c 	bge.w	2401ba9a <__ieee754_rem_pio2f+0x5a>
2401bc62:	edd4 7a00 	vldr	s15, [r4]
2401bc66:	eef1 7a67 	vneg.f32	s15, s15
2401bc6a:	edc4 7a00 	vstr	s15, [r4]
2401bc6e:	edd4 7a01 	vldr	s15, [r4, #4]
2401bc72:	eef1 7a67 	vneg.f32	s15, s15
2401bc76:	edc4 7a01 	vstr	s15, [r4, #4]
2401bc7a:	e779      	b.n	2401bb70 <__ieee754_rem_pio2f+0x130>
2401bc7c:	2303      	movs	r3, #3
2401bc7e:	e7e5      	b.n	2401bc4c <__ieee754_rem_pio2f+0x20c>
2401bc80:	3f490fd8 	.word	0x3f490fd8
2401bc84:	4016cbe3 	.word	0x4016cbe3
2401bc88:	3fc90f80 	.word	0x3fc90f80
2401bc8c:	3fc90fd0 	.word	0x3fc90fd0
2401bc90:	37354443 	.word	0x37354443
2401bc94:	37354400 	.word	0x37354400
2401bc98:	2e85a308 	.word	0x2e85a308
2401bc9c:	43490f80 	.word	0x43490f80
2401bca0:	3f22f984 	.word	0x3f22f984
2401bca4:	24035b38 	.word	0x24035b38
2401bca8:	2e85a300 	.word	0x2e85a300
2401bcac:	248d3132 	.word	0x248d3132
2401bcb0:	43800000 	.word	0x43800000
2401bcb4:	24035bb8 	.word	0x24035bb8

2401bcb8 <__kernel_rem_pio2>:
2401bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401bcbc:	ed2d 8b06 	vpush	{d8-d10}
2401bcc0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
2401bcc4:	460f      	mov	r7, r1
2401bcc6:	9002      	str	r0, [sp, #8]
2401bcc8:	49c5      	ldr	r1, [pc, #788]	; (2401bfe0 <__kernel_rem_pio2+0x328>)
2401bcca:	98a2      	ldr	r0, [sp, #648]	; 0x288
2401bccc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
2401bcd0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
2401bcd4:	9301      	str	r3, [sp, #4]
2401bcd6:	f112 0f14 	cmn.w	r2, #20
2401bcda:	bfa8      	it	ge
2401bcdc:	2018      	movge	r0, #24
2401bcde:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
2401bce2:	bfb8      	it	lt
2401bce4:	2000      	movlt	r0, #0
2401bce6:	f06f 0417 	mvn.w	r4, #23
2401bcea:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 2401bfc8 <__kernel_rem_pio2+0x310>
2401bcee:	bfa4      	itt	ge
2401bcf0:	f1a2 0a03 	subge.w	sl, r2, #3
2401bcf4:	fb9a f0f0 	sdivge	r0, sl, r0
2401bcf8:	fb00 4404 	mla	r4, r0, r4, r4
2401bcfc:	1a46      	subs	r6, r0, r1
2401bcfe:	4414      	add	r4, r2
2401bd00:	eb09 0c01 	add.w	ip, r9, r1
2401bd04:	ad1a      	add	r5, sp, #104	; 0x68
2401bd06:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
2401bd0a:	2200      	movs	r2, #0
2401bd0c:	4562      	cmp	r2, ip
2401bd0e:	dd10      	ble.n	2401bd32 <__kernel_rem_pio2+0x7a>
2401bd10:	9a01      	ldr	r2, [sp, #4]
2401bd12:	ab1a      	add	r3, sp, #104	; 0x68
2401bd14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401bd18:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
2401bd1c:	f04f 0c00 	mov.w	ip, #0
2401bd20:	45cc      	cmp	ip, r9
2401bd22:	dc26      	bgt.n	2401bd72 <__kernel_rem_pio2+0xba>
2401bd24:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 2401bfc8 <__kernel_rem_pio2+0x310>
2401bd28:	f8dd 8008 	ldr.w	r8, [sp, #8]
2401bd2c:	4616      	mov	r6, r2
2401bd2e:	2500      	movs	r5, #0
2401bd30:	e015      	b.n	2401bd5e <__kernel_rem_pio2+0xa6>
2401bd32:	42d6      	cmn	r6, r2
2401bd34:	d409      	bmi.n	2401bd4a <__kernel_rem_pio2+0x92>
2401bd36:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
2401bd3a:	ee07 3a90 	vmov	s15, r3
2401bd3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401bd42:	eca5 7b02 	vstmia	r5!, {d7}
2401bd46:	3201      	adds	r2, #1
2401bd48:	e7e0      	b.n	2401bd0c <__kernel_rem_pio2+0x54>
2401bd4a:	eeb0 7b46 	vmov.f64	d7, d6
2401bd4e:	e7f8      	b.n	2401bd42 <__kernel_rem_pio2+0x8a>
2401bd50:	ecb8 5b02 	vldmia	r8!, {d5}
2401bd54:	ed96 6b00 	vldr	d6, [r6]
2401bd58:	3501      	adds	r5, #1
2401bd5a:	eea5 7b06 	vfma.f64	d7, d5, d6
2401bd5e:	428d      	cmp	r5, r1
2401bd60:	f1a6 0608 	sub.w	r6, r6, #8
2401bd64:	ddf4      	ble.n	2401bd50 <__kernel_rem_pio2+0x98>
2401bd66:	ecaa 7b02 	vstmia	sl!, {d7}
2401bd6a:	f10c 0c01 	add.w	ip, ip, #1
2401bd6e:	3208      	adds	r2, #8
2401bd70:	e7d6      	b.n	2401bd20 <__kernel_rem_pio2+0x68>
2401bd72:	ab06      	add	r3, sp, #24
2401bd74:	ed9f 9b96 	vldr	d9, [pc, #600]	; 2401bfd0 <__kernel_rem_pio2+0x318>
2401bd78:	ed9f ab97 	vldr	d10, [pc, #604]	; 2401bfd8 <__kernel_rem_pio2+0x320>
2401bd7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
2401bd80:	9303      	str	r3, [sp, #12]
2401bd82:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
2401bd86:	464d      	mov	r5, r9
2401bd88:	00eb      	lsls	r3, r5, #3
2401bd8a:	9304      	str	r3, [sp, #16]
2401bd8c:	ab92      	add	r3, sp, #584	; 0x248
2401bd8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401bd92:	f10d 0b18 	add.w	fp, sp, #24
2401bd96:	ab6a      	add	r3, sp, #424	; 0x1a8
2401bd98:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401bd9c:	465e      	mov	r6, fp
2401bd9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401bda2:	4628      	mov	r0, r5
2401bda4:	2800      	cmp	r0, #0
2401bda6:	f1a2 0208 	sub.w	r2, r2, #8
2401bdaa:	dc4c      	bgt.n	2401be46 <__kernel_rem_pio2+0x18e>
2401bdac:	4620      	mov	r0, r4
2401bdae:	9105      	str	r1, [sp, #20]
2401bdb0:	f000 ff06 	bl	2401cbc0 <scalbn>
2401bdb4:	eeb0 8b40 	vmov.f64	d8, d0
2401bdb8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
2401bdbc:	ee28 0b00 	vmul.f64	d0, d8, d0
2401bdc0:	f000 fe8a 	bl	2401cad8 <floor>
2401bdc4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
2401bdc8:	eea0 8b47 	vfms.f64	d8, d0, d7
2401bdcc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
2401bdd0:	2c00      	cmp	r4, #0
2401bdd2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
2401bdd6:	ee17 8a90 	vmov	r8, s15
2401bdda:	ee38 8b40 	vsub.f64	d8, d8, d0
2401bdde:	9905      	ldr	r1, [sp, #20]
2401bde0:	dd43      	ble.n	2401be6a <__kernel_rem_pio2+0x1b2>
2401bde2:	1e68      	subs	r0, r5, #1
2401bde4:	ab06      	add	r3, sp, #24
2401bde6:	f1c4 0c18 	rsb	ip, r4, #24
2401bdea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
2401bdee:	fa46 f20c 	asr.w	r2, r6, ip
2401bdf2:	4490      	add	r8, r2
2401bdf4:	fa02 f20c 	lsl.w	r2, r2, ip
2401bdf8:	1ab6      	subs	r6, r6, r2
2401bdfa:	f1c4 0217 	rsb	r2, r4, #23
2401bdfe:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
2401be02:	4116      	asrs	r6, r2
2401be04:	2e00      	cmp	r6, #0
2401be06:	dd3f      	ble.n	2401be88 <__kernel_rem_pio2+0x1d0>
2401be08:	f04f 0c00 	mov.w	ip, #0
2401be0c:	f108 0801 	add.w	r8, r8, #1
2401be10:	4660      	mov	r0, ip
2401be12:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
2401be16:	4565      	cmp	r5, ip
2401be18:	dc6e      	bgt.n	2401bef8 <__kernel_rem_pio2+0x240>
2401be1a:	2c00      	cmp	r4, #0
2401be1c:	dd04      	ble.n	2401be28 <__kernel_rem_pio2+0x170>
2401be1e:	2c01      	cmp	r4, #1
2401be20:	d07f      	beq.n	2401bf22 <__kernel_rem_pio2+0x26a>
2401be22:	2c02      	cmp	r4, #2
2401be24:	f000 8087 	beq.w	2401bf36 <__kernel_rem_pio2+0x27e>
2401be28:	2e02      	cmp	r6, #2
2401be2a:	d12d      	bne.n	2401be88 <__kernel_rem_pio2+0x1d0>
2401be2c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401be30:	ee30 8b48 	vsub.f64	d8, d0, d8
2401be34:	b340      	cbz	r0, 2401be88 <__kernel_rem_pio2+0x1d0>
2401be36:	4620      	mov	r0, r4
2401be38:	9105      	str	r1, [sp, #20]
2401be3a:	f000 fec1 	bl	2401cbc0 <scalbn>
2401be3e:	9905      	ldr	r1, [sp, #20]
2401be40:	ee38 8b40 	vsub.f64	d8, d8, d0
2401be44:	e020      	b.n	2401be88 <__kernel_rem_pio2+0x1d0>
2401be46:	ee20 7b09 	vmul.f64	d7, d0, d9
2401be4a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401be4e:	3801      	subs	r0, #1
2401be50:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401be54:	eea7 0b4a 	vfms.f64	d0, d7, d10
2401be58:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401be5c:	eca6 0a01 	vstmia	r6!, {s0}
2401be60:	ed92 0b00 	vldr	d0, [r2]
2401be64:	ee37 0b00 	vadd.f64	d0, d7, d0
2401be68:	e79c      	b.n	2401bda4 <__kernel_rem_pio2+0xec>
2401be6a:	d105      	bne.n	2401be78 <__kernel_rem_pio2+0x1c0>
2401be6c:	1e6a      	subs	r2, r5, #1
2401be6e:	ab06      	add	r3, sp, #24
2401be70:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
2401be74:	15f6      	asrs	r6, r6, #23
2401be76:	e7c5      	b.n	2401be04 <__kernel_rem_pio2+0x14c>
2401be78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401be7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
2401be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401be84:	da36      	bge.n	2401bef4 <__kernel_rem_pio2+0x23c>
2401be86:	2600      	movs	r6, #0
2401be88:	eeb5 8b40 	vcmp.f64	d8, #0.0
2401be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401be90:	f040 80aa 	bne.w	2401bfe8 <__kernel_rem_pio2+0x330>
2401be94:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
2401be98:	4658      	mov	r0, fp
2401be9a:	2200      	movs	r2, #0
2401be9c:	4548      	cmp	r0, r9
2401be9e:	da52      	bge.n	2401bf46 <__kernel_rem_pio2+0x28e>
2401bea0:	2a00      	cmp	r2, #0
2401bea2:	f000 8081 	beq.w	2401bfa8 <__kernel_rem_pio2+0x2f0>
2401bea6:	ab06      	add	r3, sp, #24
2401bea8:	3c18      	subs	r4, #24
2401beaa:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
2401beae:	2b00      	cmp	r3, #0
2401beb0:	f000 8087 	beq.w	2401bfc2 <__kernel_rem_pio2+0x30a>
2401beb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401beb8:	4620      	mov	r0, r4
2401beba:	f000 fe81 	bl	2401cbc0 <scalbn>
2401bebe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
2401bec2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 2401bfd0 <__kernel_rem_pio2+0x318>
2401bec6:	a96a      	add	r1, sp, #424	; 0x1a8
2401bec8:	f103 0208 	add.w	r2, r3, #8
2401becc:	1888      	adds	r0, r1, r2
2401bece:	4659      	mov	r1, fp
2401bed0:	2900      	cmp	r1, #0
2401bed2:	f280 80b7 	bge.w	2401c044 <__kernel_rem_pio2+0x38c>
2401bed6:	4659      	mov	r1, fp
2401bed8:	2900      	cmp	r1, #0
2401beda:	f2c0 80d5 	blt.w	2401c088 <__kernel_rem_pio2+0x3d0>
2401bede:	a86a      	add	r0, sp, #424	; 0x1a8
2401bee0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
2401bee4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 2401bfc8 <__kernel_rem_pio2+0x310>
2401bee8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 2401bfe4 <__kernel_rem_pio2+0x32c>
2401beec:	2400      	movs	r4, #0
2401beee:	ebab 0001 	sub.w	r0, fp, r1
2401bef2:	e0be      	b.n	2401c072 <__kernel_rem_pio2+0x3ba>
2401bef4:	2602      	movs	r6, #2
2401bef6:	e787      	b.n	2401be08 <__kernel_rem_pio2+0x150>
2401bef8:	f8db 2000 	ldr.w	r2, [fp]
2401befc:	b958      	cbnz	r0, 2401bf16 <__kernel_rem_pio2+0x25e>
2401befe:	b122      	cbz	r2, 2401bf0a <__kernel_rem_pio2+0x252>
2401bf00:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
2401bf04:	f8cb 2000 	str.w	r2, [fp]
2401bf08:	2201      	movs	r2, #1
2401bf0a:	f10c 0c01 	add.w	ip, ip, #1
2401bf0e:	f10b 0b04 	add.w	fp, fp, #4
2401bf12:	4610      	mov	r0, r2
2401bf14:	e77f      	b.n	2401be16 <__kernel_rem_pio2+0x15e>
2401bf16:	ebae 0202 	sub.w	r2, lr, r2
2401bf1a:	f8cb 2000 	str.w	r2, [fp]
2401bf1e:	4602      	mov	r2, r0
2401bf20:	e7f3      	b.n	2401bf0a <__kernel_rem_pio2+0x252>
2401bf22:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401bf26:	ab06      	add	r3, sp, #24
2401bf28:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401bf2c:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401bf30:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
2401bf34:	e778      	b.n	2401be28 <__kernel_rem_pio2+0x170>
2401bf36:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401bf3a:	ab06      	add	r3, sp, #24
2401bf3c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401bf40:	f3c2 0215 	ubfx	r2, r2, #0, #22
2401bf44:	e7f4      	b.n	2401bf30 <__kernel_rem_pio2+0x278>
2401bf46:	ab06      	add	r3, sp, #24
2401bf48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
2401bf4c:	3801      	subs	r0, #1
2401bf4e:	431a      	orrs	r2, r3
2401bf50:	e7a4      	b.n	2401be9c <__kernel_rem_pio2+0x1e4>
2401bf52:	f10c 0c01 	add.w	ip, ip, #1
2401bf56:	f852 0d04 	ldr.w	r0, [r2, #-4]!
2401bf5a:	2800      	cmp	r0, #0
2401bf5c:	d0f9      	beq.n	2401bf52 <__kernel_rem_pio2+0x29a>
2401bf5e:	9b04      	ldr	r3, [sp, #16]
2401bf60:	f503 7312 	add.w	r3, r3, #584	; 0x248
2401bf64:	eb0d 0203 	add.w	r2, sp, r3
2401bf68:	9b01      	ldr	r3, [sp, #4]
2401bf6a:	18e8      	adds	r0, r5, r3
2401bf6c:	ab1a      	add	r3, sp, #104	; 0x68
2401bf6e:	1c6e      	adds	r6, r5, #1
2401bf70:	3a98      	subs	r2, #152	; 0x98
2401bf72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
2401bf76:	4465      	add	r5, ip
2401bf78:	42b5      	cmp	r5, r6
2401bf7a:	f6ff af05 	blt.w	2401bd88 <__kernel_rem_pio2+0xd0>
2401bf7e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
2401bf82:	f8dd e008 	ldr.w	lr, [sp, #8]
2401bf86:	ee07 3a90 	vmov	s15, r3
2401bf8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401bf8e:	f04f 0c00 	mov.w	ip, #0
2401bf92:	eca0 7b02 	vstmia	r0!, {d7}
2401bf96:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 2401bfc8 <__kernel_rem_pio2+0x310>
2401bf9a:	4680      	mov	r8, r0
2401bf9c:	458c      	cmp	ip, r1
2401bf9e:	dd07      	ble.n	2401bfb0 <__kernel_rem_pio2+0x2f8>
2401bfa0:	eca2 7b02 	vstmia	r2!, {d7}
2401bfa4:	3601      	adds	r6, #1
2401bfa6:	e7e7      	b.n	2401bf78 <__kernel_rem_pio2+0x2c0>
2401bfa8:	9a03      	ldr	r2, [sp, #12]
2401bfaa:	f04f 0c01 	mov.w	ip, #1
2401bfae:	e7d2      	b.n	2401bf56 <__kernel_rem_pio2+0x29e>
2401bfb0:	ecbe 5b02 	vldmia	lr!, {d5}
2401bfb4:	ed38 6b02 	vldmdb	r8!, {d6}
2401bfb8:	f10c 0c01 	add.w	ip, ip, #1
2401bfbc:	eea5 7b06 	vfma.f64	d7, d5, d6
2401bfc0:	e7ec      	b.n	2401bf9c <__kernel_rem_pio2+0x2e4>
2401bfc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401bfc6:	e76e      	b.n	2401bea6 <__kernel_rem_pio2+0x1ee>
	...
2401bfd4:	3e700000 	.word	0x3e700000
2401bfd8:	00000000 	.word	0x00000000
2401bfdc:	41700000 	.word	0x41700000
2401bfe0:	24035f10 	.word	0x24035f10
2401bfe4:	24035ed0 	.word	0x24035ed0
2401bfe8:	4260      	negs	r0, r4
2401bfea:	eeb0 0b48 	vmov.f64	d0, d8
2401bfee:	f000 fde7 	bl	2401cbc0 <scalbn>
2401bff2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 2401c1d0 <__kernel_rem_pio2+0x518>
2401bff6:	eeb4 0bc6 	vcmpe.f64	d0, d6
2401bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bffe:	db18      	blt.n	2401c032 <__kernel_rem_pio2+0x37a>
2401c000:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401c1d8 <__kernel_rem_pio2+0x520>
2401c004:	ee20 7b07 	vmul.f64	d7, d0, d7
2401c008:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401c00c:	aa06      	add	r2, sp, #24
2401c00e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401c012:	eea5 0b46 	vfms.f64	d0, d5, d6
2401c016:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401c01a:	f105 0b01 	add.w	fp, r5, #1
2401c01e:	ee10 3a10 	vmov	r3, s0
2401c022:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401c026:	ee17 3a10 	vmov	r3, s14
2401c02a:	3418      	adds	r4, #24
2401c02c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
2401c030:	e740      	b.n	2401beb4 <__kernel_rem_pio2+0x1fc>
2401c032:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401c036:	aa06      	add	r2, sp, #24
2401c038:	ee10 3a10 	vmov	r3, s0
2401c03c:	46ab      	mov	fp, r5
2401c03e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401c042:	e737      	b.n	2401beb4 <__kernel_rem_pio2+0x1fc>
2401c044:	ac06      	add	r4, sp, #24
2401c046:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
2401c04a:	9401      	str	r4, [sp, #4]
2401c04c:	ee07 4a90 	vmov	s15, r4
2401c050:	3901      	subs	r1, #1
2401c052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401c056:	ee27 7b00 	vmul.f64	d7, d7, d0
2401c05a:	ee20 0b06 	vmul.f64	d0, d0, d6
2401c05e:	ed20 7b02 	vstmdb	r0!, {d7}
2401c062:	e735      	b.n	2401bed0 <__kernel_rem_pio2+0x218>
2401c064:	ecbc 5b02 	vldmia	ip!, {d5}
2401c068:	ecb5 6b02 	vldmia	r5!, {d6}
2401c06c:	3401      	adds	r4, #1
2401c06e:	eea5 7b06 	vfma.f64	d7, d5, d6
2401c072:	454c      	cmp	r4, r9
2401c074:	dc01      	bgt.n	2401c07a <__kernel_rem_pio2+0x3c2>
2401c076:	4284      	cmp	r4, r0
2401c078:	ddf4      	ble.n	2401c064 <__kernel_rem_pio2+0x3ac>
2401c07a:	ac42      	add	r4, sp, #264	; 0x108
2401c07c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
2401c080:	ed80 7b00 	vstr	d7, [r0]
2401c084:	3901      	subs	r1, #1
2401c086:	e727      	b.n	2401bed8 <__kernel_rem_pio2+0x220>
2401c088:	99a2      	ldr	r1, [sp, #648]	; 0x288
2401c08a:	2902      	cmp	r1, #2
2401c08c:	dc0a      	bgt.n	2401c0a4 <__kernel_rem_pio2+0x3ec>
2401c08e:	2900      	cmp	r1, #0
2401c090:	dc2c      	bgt.n	2401c0ec <__kernel_rem_pio2+0x434>
2401c092:	d045      	beq.n	2401c120 <__kernel_rem_pio2+0x468>
2401c094:	f008 0007 	and.w	r0, r8, #7
2401c098:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
2401c09c:	ecbd 8b06 	vpop	{d8-d10}
2401c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401c0a4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401c0a6:	2a03      	cmp	r2, #3
2401c0a8:	d1f4      	bne.n	2401c094 <__kernel_rem_pio2+0x3dc>
2401c0aa:	aa42      	add	r2, sp, #264	; 0x108
2401c0ac:	4413      	add	r3, r2
2401c0ae:	461a      	mov	r2, r3
2401c0b0:	4619      	mov	r1, r3
2401c0b2:	4658      	mov	r0, fp
2401c0b4:	2800      	cmp	r0, #0
2401c0b6:	f1a1 0108 	sub.w	r1, r1, #8
2401c0ba:	dc54      	bgt.n	2401c166 <__kernel_rem_pio2+0x4ae>
2401c0bc:	4659      	mov	r1, fp
2401c0be:	2901      	cmp	r1, #1
2401c0c0:	f1a2 0208 	sub.w	r2, r2, #8
2401c0c4:	dc5f      	bgt.n	2401c186 <__kernel_rem_pio2+0x4ce>
2401c0c6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 2401c1e0 <__kernel_rem_pio2+0x528>
2401c0ca:	3308      	adds	r3, #8
2401c0cc:	f1bb 0f01 	cmp.w	fp, #1
2401c0d0:	dc69      	bgt.n	2401c1a6 <__kernel_rem_pio2+0x4ee>
2401c0d2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
2401c0d6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
2401c0da:	2e00      	cmp	r6, #0
2401c0dc:	d16a      	bne.n	2401c1b4 <__kernel_rem_pio2+0x4fc>
2401c0de:	ed87 5b00 	vstr	d5, [r7]
2401c0e2:	ed87 6b02 	vstr	d6, [r7, #8]
2401c0e6:	ed87 7b04 	vstr	d7, [r7, #16]
2401c0ea:	e7d3      	b.n	2401c094 <__kernel_rem_pio2+0x3dc>
2401c0ec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 2401c1e0 <__kernel_rem_pio2+0x528>
2401c0f0:	ab42      	add	r3, sp, #264	; 0x108
2401c0f2:	441a      	add	r2, r3
2401c0f4:	465b      	mov	r3, fp
2401c0f6:	2b00      	cmp	r3, #0
2401c0f8:	da26      	bge.n	2401c148 <__kernel_rem_pio2+0x490>
2401c0fa:	b35e      	cbz	r6, 2401c154 <__kernel_rem_pio2+0x49c>
2401c0fc:	eeb1 7b46 	vneg.f64	d7, d6
2401c100:	ed87 7b00 	vstr	d7, [r7]
2401c104:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
2401c108:	aa44      	add	r2, sp, #272	; 0x110
2401c10a:	2301      	movs	r3, #1
2401c10c:	ee37 7b46 	vsub.f64	d7, d7, d6
2401c110:	459b      	cmp	fp, r3
2401c112:	da22      	bge.n	2401c15a <__kernel_rem_pio2+0x4a2>
2401c114:	b10e      	cbz	r6, 2401c11a <__kernel_rem_pio2+0x462>
2401c116:	eeb1 7b47 	vneg.f64	d7, d7
2401c11a:	ed87 7b02 	vstr	d7, [r7, #8]
2401c11e:	e7b9      	b.n	2401c094 <__kernel_rem_pio2+0x3dc>
2401c120:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 2401c1e0 <__kernel_rem_pio2+0x528>
2401c124:	ab42      	add	r3, sp, #264	; 0x108
2401c126:	441a      	add	r2, r3
2401c128:	f1bb 0f00 	cmp.w	fp, #0
2401c12c:	da05      	bge.n	2401c13a <__kernel_rem_pio2+0x482>
2401c12e:	b10e      	cbz	r6, 2401c134 <__kernel_rem_pio2+0x47c>
2401c130:	eeb1 7b47 	vneg.f64	d7, d7
2401c134:	ed87 7b00 	vstr	d7, [r7]
2401c138:	e7ac      	b.n	2401c094 <__kernel_rem_pio2+0x3dc>
2401c13a:	ed32 6b02 	vldmdb	r2!, {d6}
2401c13e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401c142:	ee37 7b06 	vadd.f64	d7, d7, d6
2401c146:	e7ef      	b.n	2401c128 <__kernel_rem_pio2+0x470>
2401c148:	ed32 7b02 	vldmdb	r2!, {d7}
2401c14c:	3b01      	subs	r3, #1
2401c14e:	ee36 6b07 	vadd.f64	d6, d6, d7
2401c152:	e7d0      	b.n	2401c0f6 <__kernel_rem_pio2+0x43e>
2401c154:	eeb0 7b46 	vmov.f64	d7, d6
2401c158:	e7d2      	b.n	2401c100 <__kernel_rem_pio2+0x448>
2401c15a:	ecb2 6b02 	vldmia	r2!, {d6}
2401c15e:	3301      	adds	r3, #1
2401c160:	ee37 7b06 	vadd.f64	d7, d7, d6
2401c164:	e7d4      	b.n	2401c110 <__kernel_rem_pio2+0x458>
2401c166:	ed91 7b00 	vldr	d7, [r1]
2401c16a:	ed91 5b02 	vldr	d5, [r1, #8]
2401c16e:	3801      	subs	r0, #1
2401c170:	ee37 6b05 	vadd.f64	d6, d7, d5
2401c174:	ee37 7b46 	vsub.f64	d7, d7, d6
2401c178:	ed81 6b00 	vstr	d6, [r1]
2401c17c:	ee37 7b05 	vadd.f64	d7, d7, d5
2401c180:	ed81 7b02 	vstr	d7, [r1, #8]
2401c184:	e796      	b.n	2401c0b4 <__kernel_rem_pio2+0x3fc>
2401c186:	ed92 7b00 	vldr	d7, [r2]
2401c18a:	ed92 5b02 	vldr	d5, [r2, #8]
2401c18e:	3901      	subs	r1, #1
2401c190:	ee37 6b05 	vadd.f64	d6, d7, d5
2401c194:	ee37 7b46 	vsub.f64	d7, d7, d6
2401c198:	ed82 6b00 	vstr	d6, [r2]
2401c19c:	ee37 7b05 	vadd.f64	d7, d7, d5
2401c1a0:	ed82 7b02 	vstr	d7, [r2, #8]
2401c1a4:	e78b      	b.n	2401c0be <__kernel_rem_pio2+0x406>
2401c1a6:	ed33 6b02 	vldmdb	r3!, {d6}
2401c1aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401c1ae:	ee37 7b06 	vadd.f64	d7, d7, d6
2401c1b2:	e78b      	b.n	2401c0cc <__kernel_rem_pio2+0x414>
2401c1b4:	eeb1 5b45 	vneg.f64	d5, d5
2401c1b8:	eeb1 6b46 	vneg.f64	d6, d6
2401c1bc:	ed87 5b00 	vstr	d5, [r7]
2401c1c0:	eeb1 7b47 	vneg.f64	d7, d7
2401c1c4:	ed87 6b02 	vstr	d6, [r7, #8]
2401c1c8:	e78d      	b.n	2401c0e6 <__kernel_rem_pio2+0x42e>
2401c1ca:	bf00      	nop
2401c1cc:	f3af 8000 	nop.w
2401c1d0:	00000000 	.word	0x00000000
2401c1d4:	41700000 	.word	0x41700000
2401c1d8:	00000000 	.word	0x00000000
2401c1dc:	3e700000 	.word	0x3e700000
	...

2401c1e8 <__kernel_tan>:
2401c1e8:	eeb0 7b40 	vmov.f64	d7, d0
2401c1ec:	ee17 3a90 	vmov	r3, s15
2401c1f0:	4987      	ldr	r1, [pc, #540]	; (2401c410 <__kernel_tan+0x228>)
2401c1f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401c1f6:	428a      	cmp	r2, r1
2401c1f8:	b510      	push	{r4, lr}
2401c1fa:	dc33      	bgt.n	2401c264 <__kernel_tan+0x7c>
2401c1fc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
2401c200:	ee16 1a90 	vmov	r1, s13
2401c204:	2900      	cmp	r1, #0
2401c206:	d143      	bne.n	2401c290 <__kernel_tan+0xa8>
2401c208:	ee10 4a10 	vmov	r4, s0
2401c20c:	1c43      	adds	r3, r0, #1
2401c20e:	4323      	orrs	r3, r4
2401c210:	4313      	orrs	r3, r2
2401c212:	d108      	bne.n	2401c226 <__kernel_tan+0x3e>
2401c214:	f000 fc56 	bl	2401cac4 <fabs>
2401c218:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401c21c:	ee86 7b00 	vdiv.f64	d7, d6, d0
2401c220:	eeb0 0b47 	vmov.f64	d0, d7
2401c224:	bd10      	pop	{r4, pc}
2401c226:	2801      	cmp	r0, #1
2401c228:	d0fa      	beq.n	2401c220 <__kernel_tan+0x38>
2401c22a:	ee30 6b01 	vadd.f64	d6, d0, d1
2401c22e:	ec53 2b16 	vmov	r2, r3, d6
2401c232:	460a      	mov	r2, r1
2401c234:	ec43 2b15 	vmov	d5, r2, r3
2401c238:	ee35 7b40 	vsub.f64	d7, d5, d0
2401c23c:	ee31 1b47 	vsub.f64	d1, d1, d7
2401c240:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401c244:	ee87 4b06 	vdiv.f64	d4, d7, d6
2401c248:	ec53 2b14 	vmov	r2, r3, d4
2401c24c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401c250:	460a      	mov	r2, r1
2401c252:	ec43 2b17 	vmov	d7, r2, r3
2401c256:	eea5 6b07 	vfma.f64	d6, d5, d7
2401c25a:	eea1 6b07 	vfma.f64	d6, d1, d7
2401c25e:	eea6 7b04 	vfma.f64	d7, d6, d4
2401c262:	e7dd      	b.n	2401c220 <__kernel_tan+0x38>
2401c264:	496b      	ldr	r1, [pc, #428]	; (2401c414 <__kernel_tan+0x22c>)
2401c266:	428a      	cmp	r2, r1
2401c268:	dd12      	ble.n	2401c290 <__kernel_tan+0xa8>
2401c26a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 2401c390 <__kernel_tan+0x1a8>
2401c26e:	2b00      	cmp	r3, #0
2401c270:	bfb8      	it	lt
2401c272:	eeb1 7b40 	vneglt.f64	d7, d0
2401c276:	ee36 7b47 	vsub.f64	d7, d6, d7
2401c27a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 2401c398 <__kernel_tan+0x1b0>
2401c27e:	bfb8      	it	lt
2401c280:	eeb1 1b41 	vneglt.f64	d1, d1
2401c284:	ee36 1b41 	vsub.f64	d1, d6, d1
2401c288:	ee31 7b07 	vadd.f64	d7, d1, d7
2401c28c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 2401c3a0 <__kernel_tan+0x1b8>
2401c290:	ee27 5b07 	vmul.f64	d5, d7, d7
2401c294:	ee25 6b05 	vmul.f64	d6, d5, d5
2401c298:	ed9f 3b43 	vldr	d3, [pc, #268]	; 2401c3a8 <__kernel_tan+0x1c0>
2401c29c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401c3b0 <__kernel_tan+0x1c8>
2401c2a0:	eea6 4b03 	vfma.f64	d4, d6, d3
2401c2a4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 2401c3b8 <__kernel_tan+0x1d0>
2401c2a8:	eea4 3b06 	vfma.f64	d3, d4, d6
2401c2ac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401c3c0 <__kernel_tan+0x1d8>
2401c2b0:	eea3 4b06 	vfma.f64	d4, d3, d6
2401c2b4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 2401c3c8 <__kernel_tan+0x1e0>
2401c2b8:	eea4 3b06 	vfma.f64	d3, d4, d6
2401c2bc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401c3d0 <__kernel_tan+0x1e8>
2401c2c0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401c3d8 <__kernel_tan+0x1f0>
2401c2c4:	eea3 4b06 	vfma.f64	d4, d3, d6
2401c2c8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401c3e0 <__kernel_tan+0x1f8>
2401c2cc:	eea6 3b02 	vfma.f64	d3, d6, d2
2401c2d0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401c3e8 <__kernel_tan+0x200>
2401c2d4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401c2d8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401c3f0 <__kernel_tan+0x208>
2401c2dc:	eea2 3b06 	vfma.f64	d3, d2, d6
2401c2e0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401c3f8 <__kernel_tan+0x210>
2401c2e4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401c2e8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401c400 <__kernel_tan+0x218>
2401c2ec:	4949      	ldr	r1, [pc, #292]	; (2401c414 <__kernel_tan+0x22c>)
2401c2ee:	eea2 3b06 	vfma.f64	d3, d2, d6
2401c2f2:	ee27 2b05 	vmul.f64	d2, d7, d5
2401c2f6:	eeb0 6b44 	vmov.f64	d6, d4
2401c2fa:	eeb0 4b41 	vmov.f64	d4, d1
2401c2fe:	eea3 6b05 	vfma.f64	d6, d3, d5
2401c302:	eea6 4b02 	vfma.f64	d4, d6, d2
2401c306:	ed9f 6b40 	vldr	d6, [pc, #256]	; 2401c408 <__kernel_tan+0x220>
2401c30a:	eea4 1b05 	vfma.f64	d1, d4, d5
2401c30e:	428a      	cmp	r2, r1
2401c310:	eea2 1b06 	vfma.f64	d1, d2, d6
2401c314:	ee37 5b01 	vadd.f64	d5, d7, d1
2401c318:	dd1d      	ble.n	2401c356 <__kernel_tan+0x16e>
2401c31a:	ee25 3b05 	vmul.f64	d3, d5, d5
2401c31e:	179b      	asrs	r3, r3, #30
2401c320:	ee06 0a90 	vmov	s13, r0
2401c324:	f003 0302 	and.w	r3, r3, #2
2401c328:	f1c3 0301 	rsb	r3, r3, #1
2401c32c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2401c330:	ee35 5b06 	vadd.f64	d5, d5, d6
2401c334:	ee83 4b05 	vdiv.f64	d4, d3, d5
2401c338:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401c33c:	ee34 1b41 	vsub.f64	d1, d4, d1
2401c340:	ee37 7b41 	vsub.f64	d7, d7, d1
2401c344:	eea7 6b45 	vfms.f64	d6, d7, d5
2401c348:	ee07 3a10 	vmov	s14, r3
2401c34c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401c350:	ee27 7b06 	vmul.f64	d7, d7, d6
2401c354:	e764      	b.n	2401c220 <__kernel_tan+0x38>
2401c356:	2801      	cmp	r0, #1
2401c358:	d016      	beq.n	2401c388 <__kernel_tan+0x1a0>
2401c35a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401c35e:	ec51 0b15 	vmov	r0, r1, d5
2401c362:	2000      	movs	r0, #0
2401c364:	ec41 0b13 	vmov	d3, r0, r1
2401c368:	ee33 7b47 	vsub.f64	d7, d3, d7
2401c36c:	ee31 1b47 	vsub.f64	d1, d1, d7
2401c370:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401c374:	ee87 4b05 	vdiv.f64	d4, d7, d5
2401c378:	ec53 2b14 	vmov	r2, r3, d4
2401c37c:	4602      	mov	r2, r0
2401c37e:	ec43 2b17 	vmov	d7, r2, r3
2401c382:	eea3 6b07 	vfma.f64	d6, d3, d7
2401c386:	e768      	b.n	2401c25a <__kernel_tan+0x72>
2401c388:	eeb0 7b45 	vmov.f64	d7, d5
2401c38c:	e748      	b.n	2401c220 <__kernel_tan+0x38>
2401c38e:	bf00      	nop
2401c390:	54442d18 	.word	0x54442d18
2401c394:	3fe921fb 	.word	0x3fe921fb
2401c398:	33145c07 	.word	0x33145c07
2401c39c:	3c81a626 	.word	0x3c81a626
	...
2401c3a8:	db605373 	.word	0xdb605373
2401c3ac:	bef375cb 	.word	0xbef375cb
2401c3b0:	a03792a6 	.word	0xa03792a6
2401c3b4:	3f147e88 	.word	0x3f147e88
2401c3b8:	f2f26501 	.word	0xf2f26501
2401c3bc:	3f4344d8 	.word	0x3f4344d8
2401c3c0:	c9560328 	.word	0xc9560328
2401c3c4:	3f6d6d22 	.word	0x3f6d6d22
2401c3c8:	8406d637 	.word	0x8406d637
2401c3cc:	3f9664f4 	.word	0x3f9664f4
2401c3d0:	1110fe7a 	.word	0x1110fe7a
2401c3d4:	3fc11111 	.word	0x3fc11111
2401c3d8:	74bf7ad4 	.word	0x74bf7ad4
2401c3dc:	3efb2a70 	.word	0x3efb2a70
2401c3e0:	32f0a7e9 	.word	0x32f0a7e9
2401c3e4:	3f12b80f 	.word	0x3f12b80f
2401c3e8:	1a8d1068 	.word	0x1a8d1068
2401c3ec:	3f3026f7 	.word	0x3f3026f7
2401c3f0:	fee08315 	.word	0xfee08315
2401c3f4:	3f57dbc8 	.word	0x3f57dbc8
2401c3f8:	e96e8493 	.word	0xe96e8493
2401c3fc:	3f8226e3 	.word	0x3f8226e3
2401c400:	1bb341fe 	.word	0x1bb341fe
2401c404:	3faba1ba 	.word	0x3faba1ba
2401c408:	55555563 	.word	0x55555563
2401c40c:	3fd55555 	.word	0x3fd55555
2401c410:	3e2fffff 	.word	0x3e2fffff
2401c414:	3fe59427 	.word	0x3fe59427

2401c418 <__kernel_rem_pio2f>:
2401c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401c41c:	ed2d 8b04 	vpush	{d8-d9}
2401c420:	b0d9      	sub	sp, #356	; 0x164
2401c422:	4688      	mov	r8, r1
2401c424:	9002      	str	r0, [sp, #8]
2401c426:	49bb      	ldr	r1, [pc, #748]	; (2401c714 <__kernel_rem_pio2f+0x2fc>)
2401c428:	9866      	ldr	r0, [sp, #408]	; 0x198
2401c42a:	9301      	str	r3, [sp, #4]
2401c42c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
2401c430:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
2401c434:	1e59      	subs	r1, r3, #1
2401c436:	1d13      	adds	r3, r2, #4
2401c438:	db27      	blt.n	2401c48a <__kernel_rem_pio2f+0x72>
2401c43a:	f1b2 0b03 	subs.w	fp, r2, #3
2401c43e:	bf48      	it	mi
2401c440:	f102 0b04 	addmi.w	fp, r2, #4
2401c444:	ea4f 00eb 	mov.w	r0, fp, asr #3
2401c448:	1c45      	adds	r5, r0, #1
2401c44a:	00ec      	lsls	r4, r5, #3
2401c44c:	1a47      	subs	r7, r0, r1
2401c44e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c452:	9403      	str	r4, [sp, #12]
2401c454:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
2401c458:	eb0a 0c01 	add.w	ip, sl, r1
2401c45c:	ae1c      	add	r6, sp, #112	; 0x70
2401c45e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
2401c462:	2400      	movs	r4, #0
2401c464:	4564      	cmp	r4, ip
2401c466:	dd12      	ble.n	2401c48e <__kernel_rem_pio2f+0x76>
2401c468:	9b01      	ldr	r3, [sp, #4]
2401c46a:	ac1c      	add	r4, sp, #112	; 0x70
2401c46c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
2401c470:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
2401c474:	f04f 0c00 	mov.w	ip, #0
2401c478:	45d4      	cmp	ip, sl
2401c47a:	dc27      	bgt.n	2401c4cc <__kernel_rem_pio2f+0xb4>
2401c47c:	f8dd 9008 	ldr.w	r9, [sp, #8]
2401c480:	eddf 7aa8 	vldr	s15, [pc, #672]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c484:	4627      	mov	r7, r4
2401c486:	2600      	movs	r6, #0
2401c488:	e016      	b.n	2401c4b8 <__kernel_rem_pio2f+0xa0>
2401c48a:	2000      	movs	r0, #0
2401c48c:	e7dc      	b.n	2401c448 <__kernel_rem_pio2f+0x30>
2401c48e:	42e7      	cmn	r7, r4
2401c490:	bf5d      	ittte	pl
2401c492:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
2401c496:	ee07 3a90 	vmovpl	s15, r3
2401c49a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401c49e:	eef0 7a47 	vmovmi.f32	s15, s14
2401c4a2:	ece6 7a01 	vstmia	r6!, {s15}
2401c4a6:	3401      	adds	r4, #1
2401c4a8:	e7dc      	b.n	2401c464 <__kernel_rem_pio2f+0x4c>
2401c4aa:	ecf9 6a01 	vldmia	r9!, {s13}
2401c4ae:	ed97 7a00 	vldr	s14, [r7]
2401c4b2:	eee6 7a87 	vfma.f32	s15, s13, s14
2401c4b6:	3601      	adds	r6, #1
2401c4b8:	428e      	cmp	r6, r1
2401c4ba:	f1a7 0704 	sub.w	r7, r7, #4
2401c4be:	ddf4      	ble.n	2401c4aa <__kernel_rem_pio2f+0x92>
2401c4c0:	eceb 7a01 	vstmia	fp!, {s15}
2401c4c4:	f10c 0c01 	add.w	ip, ip, #1
2401c4c8:	3404      	adds	r4, #4
2401c4ca:	e7d5      	b.n	2401c478 <__kernel_rem_pio2f+0x60>
2401c4cc:	ab08      	add	r3, sp, #32
2401c4ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
2401c4d2:	eddf 8a93 	vldr	s17, [pc, #588]	; 2401c720 <__kernel_rem_pio2f+0x308>
2401c4d6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 2401c71c <__kernel_rem_pio2f+0x304>
2401c4da:	9304      	str	r3, [sp, #16]
2401c4dc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
2401c4e0:	4656      	mov	r6, sl
2401c4e2:	00b3      	lsls	r3, r6, #2
2401c4e4:	9305      	str	r3, [sp, #20]
2401c4e6:	ab58      	add	r3, sp, #352	; 0x160
2401c4e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401c4ec:	ac08      	add	r4, sp, #32
2401c4ee:	ab44      	add	r3, sp, #272	; 0x110
2401c4f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
2401c4f4:	46a4      	mov	ip, r4
2401c4f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401c4fa:	4637      	mov	r7, r6
2401c4fc:	2f00      	cmp	r7, #0
2401c4fe:	f1a0 0004 	sub.w	r0, r0, #4
2401c502:	dc4f      	bgt.n	2401c5a4 <__kernel_rem_pio2f+0x18c>
2401c504:	4628      	mov	r0, r5
2401c506:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401c50a:	f000 fd45 	bl	2401cf98 <scalbnf>
2401c50e:	eeb0 8a40 	vmov.f32	s16, s0
2401c512:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401c516:	ee28 0a00 	vmul.f32	s0, s16, s0
2401c51a:	f000 fcf5 	bl	2401cf08 <floorf>
2401c51e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2401c522:	eea0 8a67 	vfms.f32	s16, s0, s15
2401c526:	2d00      	cmp	r5, #0
2401c528:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401c52c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
2401c530:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401c534:	ee17 9a90 	vmov	r9, s15
2401c538:	ee38 8a40 	vsub.f32	s16, s16, s0
2401c53c:	dd44      	ble.n	2401c5c8 <__kernel_rem_pio2f+0x1b0>
2401c53e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401c542:	ab08      	add	r3, sp, #32
2401c544:	f1c5 0e08 	rsb	lr, r5, #8
2401c548:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401c54c:	fa47 f00e 	asr.w	r0, r7, lr
2401c550:	4481      	add	r9, r0
2401c552:	fa00 f00e 	lsl.w	r0, r0, lr
2401c556:	1a3f      	subs	r7, r7, r0
2401c558:	f1c5 0007 	rsb	r0, r5, #7
2401c55c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
2401c560:	4107      	asrs	r7, r0
2401c562:	2f00      	cmp	r7, #0
2401c564:	dd3f      	ble.n	2401c5e6 <__kernel_rem_pio2f+0x1ce>
2401c566:	f04f 0e00 	mov.w	lr, #0
2401c56a:	f109 0901 	add.w	r9, r9, #1
2401c56e:	4673      	mov	r3, lr
2401c570:	4576      	cmp	r6, lr
2401c572:	dc6b      	bgt.n	2401c64c <__kernel_rem_pio2f+0x234>
2401c574:	2d00      	cmp	r5, #0
2401c576:	dd04      	ble.n	2401c582 <__kernel_rem_pio2f+0x16a>
2401c578:	2d01      	cmp	r5, #1
2401c57a:	d078      	beq.n	2401c66e <__kernel_rem_pio2f+0x256>
2401c57c:	2d02      	cmp	r5, #2
2401c57e:	f000 8081 	beq.w	2401c684 <__kernel_rem_pio2f+0x26c>
2401c582:	2f02      	cmp	r7, #2
2401c584:	d12f      	bne.n	2401c5e6 <__kernel_rem_pio2f+0x1ce>
2401c586:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401c58a:	ee30 8a48 	vsub.f32	s16, s0, s16
2401c58e:	b353      	cbz	r3, 2401c5e6 <__kernel_rem_pio2f+0x1ce>
2401c590:	4628      	mov	r0, r5
2401c592:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401c596:	f000 fcff 	bl	2401cf98 <scalbnf>
2401c59a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401c59e:	ee38 8a40 	vsub.f32	s16, s16, s0
2401c5a2:	e020      	b.n	2401c5e6 <__kernel_rem_pio2f+0x1ce>
2401c5a4:	ee60 7a28 	vmul.f32	s15, s0, s17
2401c5a8:	3f01      	subs	r7, #1
2401c5aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401c5ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c5b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401c5b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401c5ba:	ecac 0a01 	vstmia	ip!, {s0}
2401c5be:	ed90 0a00 	vldr	s0, [r0]
2401c5c2:	ee37 0a80 	vadd.f32	s0, s15, s0
2401c5c6:	e799      	b.n	2401c4fc <__kernel_rem_pio2f+0xe4>
2401c5c8:	d105      	bne.n	2401c5d6 <__kernel_rem_pio2f+0x1be>
2401c5ca:	1e70      	subs	r0, r6, #1
2401c5cc:	ab08      	add	r3, sp, #32
2401c5ce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
2401c5d2:	11ff      	asrs	r7, r7, #7
2401c5d4:	e7c5      	b.n	2401c562 <__kernel_rem_pio2f+0x14a>
2401c5d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401c5da:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401c5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c5e2:	da31      	bge.n	2401c648 <__kernel_rem_pio2f+0x230>
2401c5e4:	2700      	movs	r7, #0
2401c5e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401c5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c5ee:	f040 809b 	bne.w	2401c728 <__kernel_rem_pio2f+0x310>
2401c5f2:	1e74      	subs	r4, r6, #1
2401c5f4:	46a4      	mov	ip, r4
2401c5f6:	2000      	movs	r0, #0
2401c5f8:	45d4      	cmp	ip, sl
2401c5fa:	da4a      	bge.n	2401c692 <__kernel_rem_pio2f+0x27a>
2401c5fc:	2800      	cmp	r0, #0
2401c5fe:	d07a      	beq.n	2401c6f6 <__kernel_rem_pio2f+0x2de>
2401c600:	ab08      	add	r3, sp, #32
2401c602:	3d08      	subs	r5, #8
2401c604:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401c608:	2b00      	cmp	r3, #0
2401c60a:	f000 8081 	beq.w	2401c710 <__kernel_rem_pio2f+0x2f8>
2401c60e:	4628      	mov	r0, r5
2401c610:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401c614:	00a5      	lsls	r5, r4, #2
2401c616:	f000 fcbf 	bl	2401cf98 <scalbnf>
2401c61a:	aa44      	add	r2, sp, #272	; 0x110
2401c61c:	1d2b      	adds	r3, r5, #4
2401c61e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2401c720 <__kernel_rem_pio2f+0x308>
2401c622:	18d1      	adds	r1, r2, r3
2401c624:	4622      	mov	r2, r4
2401c626:	2a00      	cmp	r2, #0
2401c628:	f280 80ae 	bge.w	2401c788 <__kernel_rem_pio2f+0x370>
2401c62c:	4622      	mov	r2, r4
2401c62e:	2a00      	cmp	r2, #0
2401c630:	f2c0 80cc 	blt.w	2401c7cc <__kernel_rem_pio2f+0x3b4>
2401c634:	a944      	add	r1, sp, #272	; 0x110
2401c636:	eb01 0682 	add.w	r6, r1, r2, lsl #2
2401c63a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2401c718 <__kernel_rem_pio2f+0x300>
2401c63e:	eddf 7a39 	vldr	s15, [pc, #228]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c642:	2000      	movs	r0, #0
2401c644:	1aa1      	subs	r1, r4, r2
2401c646:	e0b6      	b.n	2401c7b6 <__kernel_rem_pio2f+0x39e>
2401c648:	2702      	movs	r7, #2
2401c64a:	e78c      	b.n	2401c566 <__kernel_rem_pio2f+0x14e>
2401c64c:	6820      	ldr	r0, [r4, #0]
2401c64e:	b94b      	cbnz	r3, 2401c664 <__kernel_rem_pio2f+0x24c>
2401c650:	b118      	cbz	r0, 2401c65a <__kernel_rem_pio2f+0x242>
2401c652:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401c656:	6020      	str	r0, [r4, #0]
2401c658:	2001      	movs	r0, #1
2401c65a:	f10e 0e01 	add.w	lr, lr, #1
2401c65e:	3404      	adds	r4, #4
2401c660:	4603      	mov	r3, r0
2401c662:	e785      	b.n	2401c570 <__kernel_rem_pio2f+0x158>
2401c664:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
2401c668:	6020      	str	r0, [r4, #0]
2401c66a:	4618      	mov	r0, r3
2401c66c:	e7f5      	b.n	2401c65a <__kernel_rem_pio2f+0x242>
2401c66e:	1e74      	subs	r4, r6, #1
2401c670:	a808      	add	r0, sp, #32
2401c672:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401c676:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401c67a:	f10d 0c20 	add.w	ip, sp, #32
2401c67e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
2401c682:	e77e      	b.n	2401c582 <__kernel_rem_pio2f+0x16a>
2401c684:	1e74      	subs	r4, r6, #1
2401c686:	a808      	add	r0, sp, #32
2401c688:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401c68c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
2401c690:	e7f3      	b.n	2401c67a <__kernel_rem_pio2f+0x262>
2401c692:	ab08      	add	r3, sp, #32
2401c694:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401c698:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401c69c:	4318      	orrs	r0, r3
2401c69e:	e7ab      	b.n	2401c5f8 <__kernel_rem_pio2f+0x1e0>
2401c6a0:	f10c 0c01 	add.w	ip, ip, #1
2401c6a4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
2401c6a8:	2c00      	cmp	r4, #0
2401c6aa:	d0f9      	beq.n	2401c6a0 <__kernel_rem_pio2f+0x288>
2401c6ac:	9b05      	ldr	r3, [sp, #20]
2401c6ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401c6b2:	eb0d 0003 	add.w	r0, sp, r3
2401c6b6:	9b01      	ldr	r3, [sp, #4]
2401c6b8:	18f4      	adds	r4, r6, r3
2401c6ba:	ab1c      	add	r3, sp, #112	; 0x70
2401c6bc:	1c77      	adds	r7, r6, #1
2401c6be:	384c      	subs	r0, #76	; 0x4c
2401c6c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2401c6c4:	4466      	add	r6, ip
2401c6c6:	42be      	cmp	r6, r7
2401c6c8:	f6ff af0b 	blt.w	2401c4e2 <__kernel_rem_pio2f+0xca>
2401c6cc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
2401c6d0:	f8dd e008 	ldr.w	lr, [sp, #8]
2401c6d4:	ee07 3a90 	vmov	s15, r3
2401c6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c6dc:	f04f 0c00 	mov.w	ip, #0
2401c6e0:	ece4 7a01 	vstmia	r4!, {s15}
2401c6e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c6e8:	46a1      	mov	r9, r4
2401c6ea:	458c      	cmp	ip, r1
2401c6ec:	dd07      	ble.n	2401c6fe <__kernel_rem_pio2f+0x2e6>
2401c6ee:	ece0 7a01 	vstmia	r0!, {s15}
2401c6f2:	3701      	adds	r7, #1
2401c6f4:	e7e7      	b.n	2401c6c6 <__kernel_rem_pio2f+0x2ae>
2401c6f6:	9804      	ldr	r0, [sp, #16]
2401c6f8:	f04f 0c01 	mov.w	ip, #1
2401c6fc:	e7d2      	b.n	2401c6a4 <__kernel_rem_pio2f+0x28c>
2401c6fe:	ecfe 6a01 	vldmia	lr!, {s13}
2401c702:	ed39 7a01 	vldmdb	r9!, {s14}
2401c706:	f10c 0c01 	add.w	ip, ip, #1
2401c70a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401c70e:	e7ec      	b.n	2401c6ea <__kernel_rem_pio2f+0x2d2>
2401c710:	3c01      	subs	r4, #1
2401c712:	e775      	b.n	2401c600 <__kernel_rem_pio2f+0x1e8>
2401c714:	24035f4c 	.word	0x24035f4c
2401c718:	24035f20 	.word	0x24035f20
2401c71c:	43800000 	.word	0x43800000
2401c720:	3b800000 	.word	0x3b800000
2401c724:	00000000 	.word	0x00000000
2401c728:	9b03      	ldr	r3, [sp, #12]
2401c72a:	eeb0 0a48 	vmov.f32	s0, s16
2401c72e:	1a98      	subs	r0, r3, r2
2401c730:	f000 fc32 	bl	2401cf98 <scalbnf>
2401c734:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401c71c <__kernel_rem_pio2f+0x304>
2401c738:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401c73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401c740:	db19      	blt.n	2401c776 <__kernel_rem_pio2f+0x35e>
2401c742:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 2401c720 <__kernel_rem_pio2f+0x308>
2401c746:	ee60 7a27 	vmul.f32	s15, s0, s15
2401c74a:	aa08      	add	r2, sp, #32
2401c74c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401c750:	1c74      	adds	r4, r6, #1
2401c752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c756:	3508      	adds	r5, #8
2401c758:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401c75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401c760:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401c764:	ee10 3a10 	vmov	r3, s0
2401c768:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401c76c:	ee17 3a90 	vmov	r3, s15
2401c770:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401c774:	e74b      	b.n	2401c60e <__kernel_rem_pio2f+0x1f6>
2401c776:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401c77a:	aa08      	add	r2, sp, #32
2401c77c:	ee10 3a10 	vmov	r3, s0
2401c780:	4634      	mov	r4, r6
2401c782:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401c786:	e742      	b.n	2401c60e <__kernel_rem_pio2f+0x1f6>
2401c788:	a808      	add	r0, sp, #32
2401c78a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401c78e:	9001      	str	r0, [sp, #4]
2401c790:	ee07 0a90 	vmov	s15, r0
2401c794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401c798:	3a01      	subs	r2, #1
2401c79a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401c79e:	ee20 0a07 	vmul.f32	s0, s0, s14
2401c7a2:	ed61 7a01 	vstmdb	r1!, {s15}
2401c7a6:	e73e      	b.n	2401c626 <__kernel_rem_pio2f+0x20e>
2401c7a8:	ecfc 6a01 	vldmia	ip!, {s13}
2401c7ac:	ecb6 7a01 	vldmia	r6!, {s14}
2401c7b0:	eee6 7a87 	vfma.f32	s15, s13, s14
2401c7b4:	3001      	adds	r0, #1
2401c7b6:	4550      	cmp	r0, sl
2401c7b8:	dc01      	bgt.n	2401c7be <__kernel_rem_pio2f+0x3a6>
2401c7ba:	4288      	cmp	r0, r1
2401c7bc:	ddf4      	ble.n	2401c7a8 <__kernel_rem_pio2f+0x390>
2401c7be:	a858      	add	r0, sp, #352	; 0x160
2401c7c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2401c7c4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
2401c7c8:	3a01      	subs	r2, #1
2401c7ca:	e730      	b.n	2401c62e <__kernel_rem_pio2f+0x216>
2401c7cc:	9a66      	ldr	r2, [sp, #408]	; 0x198
2401c7ce:	2a02      	cmp	r2, #2
2401c7d0:	dc09      	bgt.n	2401c7e6 <__kernel_rem_pio2f+0x3ce>
2401c7d2:	2a00      	cmp	r2, #0
2401c7d4:	dc2a      	bgt.n	2401c82c <__kernel_rem_pio2f+0x414>
2401c7d6:	d043      	beq.n	2401c860 <__kernel_rem_pio2f+0x448>
2401c7d8:	f009 0007 	and.w	r0, r9, #7
2401c7dc:	b059      	add	sp, #356	; 0x164
2401c7de:	ecbd 8b04 	vpop	{d8-d9}
2401c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401c7e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401c7e8:	2b03      	cmp	r3, #3
2401c7ea:	d1f5      	bne.n	2401c7d8 <__kernel_rem_pio2f+0x3c0>
2401c7ec:	ab30      	add	r3, sp, #192	; 0xc0
2401c7ee:	442b      	add	r3, r5
2401c7f0:	461a      	mov	r2, r3
2401c7f2:	4619      	mov	r1, r3
2401c7f4:	4620      	mov	r0, r4
2401c7f6:	2800      	cmp	r0, #0
2401c7f8:	f1a1 0104 	sub.w	r1, r1, #4
2401c7fc:	dc51      	bgt.n	2401c8a2 <__kernel_rem_pio2f+0x48a>
2401c7fe:	4621      	mov	r1, r4
2401c800:	2901      	cmp	r1, #1
2401c802:	f1a2 0204 	sub.w	r2, r2, #4
2401c806:	dc5c      	bgt.n	2401c8c2 <__kernel_rem_pio2f+0x4aa>
2401c808:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c80c:	3304      	adds	r3, #4
2401c80e:	2c01      	cmp	r4, #1
2401c810:	dc67      	bgt.n	2401c8e2 <__kernel_rem_pio2f+0x4ca>
2401c812:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
2401c816:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401c81a:	2f00      	cmp	r7, #0
2401c81c:	d167      	bne.n	2401c8ee <__kernel_rem_pio2f+0x4d6>
2401c81e:	edc8 6a00 	vstr	s13, [r8]
2401c822:	ed88 7a01 	vstr	s14, [r8, #4]
2401c826:	edc8 7a02 	vstr	s15, [r8, #8]
2401c82a:	e7d5      	b.n	2401c7d8 <__kernel_rem_pio2f+0x3c0>
2401c82c:	aa30      	add	r2, sp, #192	; 0xc0
2401c82e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c832:	4413      	add	r3, r2
2401c834:	4622      	mov	r2, r4
2401c836:	2a00      	cmp	r2, #0
2401c838:	da24      	bge.n	2401c884 <__kernel_rem_pio2f+0x46c>
2401c83a:	b34f      	cbz	r7, 2401c890 <__kernel_rem_pio2f+0x478>
2401c83c:	eef1 7a47 	vneg.f32	s15, s14
2401c840:	edc8 7a00 	vstr	s15, [r8]
2401c844:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401c848:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401c84c:	aa31      	add	r2, sp, #196	; 0xc4
2401c84e:	2301      	movs	r3, #1
2401c850:	429c      	cmp	r4, r3
2401c852:	da20      	bge.n	2401c896 <__kernel_rem_pio2f+0x47e>
2401c854:	b10f      	cbz	r7, 2401c85a <__kernel_rem_pio2f+0x442>
2401c856:	eef1 7a67 	vneg.f32	s15, s15
2401c85a:	edc8 7a01 	vstr	s15, [r8, #4]
2401c85e:	e7bb      	b.n	2401c7d8 <__kernel_rem_pio2f+0x3c0>
2401c860:	aa30      	add	r2, sp, #192	; 0xc0
2401c862:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 2401c724 <__kernel_rem_pio2f+0x30c>
2401c866:	4413      	add	r3, r2
2401c868:	2c00      	cmp	r4, #0
2401c86a:	da05      	bge.n	2401c878 <__kernel_rem_pio2f+0x460>
2401c86c:	b10f      	cbz	r7, 2401c872 <__kernel_rem_pio2f+0x45a>
2401c86e:	eef1 7a67 	vneg.f32	s15, s15
2401c872:	edc8 7a00 	vstr	s15, [r8]
2401c876:	e7af      	b.n	2401c7d8 <__kernel_rem_pio2f+0x3c0>
2401c878:	ed33 7a01 	vldmdb	r3!, {s14}
2401c87c:	3c01      	subs	r4, #1
2401c87e:	ee77 7a87 	vadd.f32	s15, s15, s14
2401c882:	e7f1      	b.n	2401c868 <__kernel_rem_pio2f+0x450>
2401c884:	ed73 7a01 	vldmdb	r3!, {s15}
2401c888:	3a01      	subs	r2, #1
2401c88a:	ee37 7a27 	vadd.f32	s14, s14, s15
2401c88e:	e7d2      	b.n	2401c836 <__kernel_rem_pio2f+0x41e>
2401c890:	eef0 7a47 	vmov.f32	s15, s14
2401c894:	e7d4      	b.n	2401c840 <__kernel_rem_pio2f+0x428>
2401c896:	ecb2 7a01 	vldmia	r2!, {s14}
2401c89a:	3301      	adds	r3, #1
2401c89c:	ee77 7a87 	vadd.f32	s15, s15, s14
2401c8a0:	e7d6      	b.n	2401c850 <__kernel_rem_pio2f+0x438>
2401c8a2:	edd1 7a00 	vldr	s15, [r1]
2401c8a6:	edd1 6a01 	vldr	s13, [r1, #4]
2401c8aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401c8ae:	3801      	subs	r0, #1
2401c8b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401c8b4:	ed81 7a00 	vstr	s14, [r1]
2401c8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401c8bc:	edc1 7a01 	vstr	s15, [r1, #4]
2401c8c0:	e799      	b.n	2401c7f6 <__kernel_rem_pio2f+0x3de>
2401c8c2:	edd2 7a00 	vldr	s15, [r2]
2401c8c6:	edd2 6a01 	vldr	s13, [r2, #4]
2401c8ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401c8ce:	3901      	subs	r1, #1
2401c8d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401c8d4:	ed82 7a00 	vstr	s14, [r2]
2401c8d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401c8dc:	edc2 7a01 	vstr	s15, [r2, #4]
2401c8e0:	e78e      	b.n	2401c800 <__kernel_rem_pio2f+0x3e8>
2401c8e2:	ed33 7a01 	vldmdb	r3!, {s14}
2401c8e6:	3c01      	subs	r4, #1
2401c8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401c8ec:	e78f      	b.n	2401c80e <__kernel_rem_pio2f+0x3f6>
2401c8ee:	eef1 6a66 	vneg.f32	s13, s13
2401c8f2:	eeb1 7a47 	vneg.f32	s14, s14
2401c8f6:	edc8 6a00 	vstr	s13, [r8]
2401c8fa:	ed88 7a01 	vstr	s14, [r8, #4]
2401c8fe:	eef1 7a67 	vneg.f32	s15, s15
2401c902:	e790      	b.n	2401c826 <__kernel_rem_pio2f+0x40e>

2401c904 <__kernel_tanf>:
2401c904:	b508      	push	{r3, lr}
2401c906:	ee10 3a10 	vmov	r3, s0
2401c90a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401c90e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
2401c912:	eef0 7a40 	vmov.f32	s15, s0
2401c916:	da17      	bge.n	2401c948 <__kernel_tanf+0x44>
2401c918:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401c91c:	ee17 1a10 	vmov	r1, s14
2401c920:	bb41      	cbnz	r1, 2401c974 <__kernel_tanf+0x70>
2401c922:	1c43      	adds	r3, r0, #1
2401c924:	4313      	orrs	r3, r2
2401c926:	d108      	bne.n	2401c93a <__kernel_tanf+0x36>
2401c928:	f7fe fbb6 	bl	2401b098 <fabsf>
2401c92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401c930:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401c934:	eeb0 0a67 	vmov.f32	s0, s15
2401c938:	bd08      	pop	{r3, pc}
2401c93a:	2801      	cmp	r0, #1
2401c93c:	d0fa      	beq.n	2401c934 <__kernel_tanf+0x30>
2401c93e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401c942:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401c946:	e7f5      	b.n	2401c934 <__kernel_tanf+0x30>
2401c948:	494c      	ldr	r1, [pc, #304]	; (2401ca7c <__kernel_tanf+0x178>)
2401c94a:	428a      	cmp	r2, r1
2401c94c:	db12      	blt.n	2401c974 <__kernel_tanf+0x70>
2401c94e:	2b00      	cmp	r3, #0
2401c950:	bfb8      	it	lt
2401c952:	eef1 7a40 	vneglt.f32	s15, s0
2401c956:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 2401ca80 <__kernel_tanf+0x17c>
2401c95a:	ee70 7a67 	vsub.f32	s15, s0, s15
2401c95e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 2401ca84 <__kernel_tanf+0x180>
2401c962:	bfb8      	it	lt
2401c964:	eef1 0a60 	vneglt.f32	s1, s1
2401c968:	ee70 0a60 	vsub.f32	s1, s0, s1
2401c96c:	ee70 7aa7 	vadd.f32	s15, s1, s15
2401c970:	eddf 0a45 	vldr	s1, [pc, #276]	; 2401ca88 <__kernel_tanf+0x184>
2401c974:	eddf 5a45 	vldr	s11, [pc, #276]	; 2401ca8c <__kernel_tanf+0x188>
2401c978:	ed9f 6a45 	vldr	s12, [pc, #276]	; 2401ca90 <__kernel_tanf+0x18c>
2401c97c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 2401ca94 <__kernel_tanf+0x190>
2401c980:	493e      	ldr	r1, [pc, #248]	; (2401ca7c <__kernel_tanf+0x178>)
2401c982:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401c986:	428a      	cmp	r2, r1
2401c988:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401c98c:	eea7 6a25 	vfma.f32	s12, s14, s11
2401c990:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401ca98 <__kernel_tanf+0x194>
2401c994:	eee6 5a07 	vfma.f32	s11, s12, s14
2401c998:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401ca9c <__kernel_tanf+0x198>
2401c99c:	eea5 6a87 	vfma.f32	s12, s11, s14
2401c9a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401caa0 <__kernel_tanf+0x19c>
2401c9a4:	eee6 5a07 	vfma.f32	s11, s12, s14
2401c9a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401caa4 <__kernel_tanf+0x1a0>
2401c9ac:	eea5 6a87 	vfma.f32	s12, s11, s14
2401c9b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401caa8 <__kernel_tanf+0x1a4>
2401c9b4:	eee7 5a05 	vfma.f32	s11, s14, s10
2401c9b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401caac <__kernel_tanf+0x1a8>
2401c9bc:	eea5 5a87 	vfma.f32	s10, s11, s14
2401c9c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401cab0 <__kernel_tanf+0x1ac>
2401c9c4:	eee5 5a07 	vfma.f32	s11, s10, s14
2401c9c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401cab4 <__kernel_tanf+0x1b0>
2401c9cc:	eea5 5a87 	vfma.f32	s10, s11, s14
2401c9d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401cab8 <__kernel_tanf+0x1b4>
2401c9d4:	eee5 5a07 	vfma.f32	s11, s10, s14
2401c9d8:	eeb0 7a46 	vmov.f32	s14, s12
2401c9dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
2401c9e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
2401c9e4:	eeb0 6a60 	vmov.f32	s12, s1
2401c9e8:	eea7 6a05 	vfma.f32	s12, s14, s10
2401c9ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401cabc <__kernel_tanf+0x1b8>
2401c9f0:	eee6 0a26 	vfma.f32	s1, s12, s13
2401c9f4:	eee5 0a07 	vfma.f32	s1, s10, s14
2401c9f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
2401c9fc:	db1d      	blt.n	2401ca3a <__kernel_tanf+0x136>
2401c9fe:	ee06 0a90 	vmov	s13, r0
2401ca02:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
2401ca06:	ee27 6a07 	vmul.f32	s12, s14, s14
2401ca0a:	ee37 7a00 	vadd.f32	s14, s14, s0
2401ca0e:	179b      	asrs	r3, r3, #30
2401ca10:	eec6 6a07 	vdiv.f32	s13, s12, s14
2401ca14:	f003 0302 	and.w	r3, r3, #2
2401ca18:	f1c3 0301 	rsb	r3, r3, #1
2401ca1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401ca20:	ee76 0ae0 	vsub.f32	s1, s13, s1
2401ca24:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401ca28:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401ca2c:	ee07 3a90 	vmov	s15, r3
2401ca30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401ca34:	ee67 7a80 	vmul.f32	s15, s15, s0
2401ca38:	e77c      	b.n	2401c934 <__kernel_tanf+0x30>
2401ca3a:	2801      	cmp	r0, #1
2401ca3c:	d01b      	beq.n	2401ca76 <__kernel_tanf+0x172>
2401ca3e:	4b20      	ldr	r3, [pc, #128]	; (2401cac0 <__kernel_tanf+0x1bc>)
2401ca40:	ee17 2a10 	vmov	r2, s14
2401ca44:	401a      	ands	r2, r3
2401ca46:	ee06 2a10 	vmov	s12, r2
2401ca4a:	ee76 7a67 	vsub.f32	s15, s12, s15
2401ca4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401ca52:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401ca56:	eec7 6a87 	vdiv.f32	s13, s15, s14
2401ca5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401ca5e:	ee16 2a90 	vmov	r2, s13
2401ca62:	4013      	ands	r3, r2
2401ca64:	ee07 3a90 	vmov	s15, r3
2401ca68:	eea6 7a27 	vfma.f32	s14, s12, s15
2401ca6c:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401ca70:	eee7 7a26 	vfma.f32	s15, s14, s13
2401ca74:	e75e      	b.n	2401c934 <__kernel_tanf+0x30>
2401ca76:	eef0 7a47 	vmov.f32	s15, s14
2401ca7a:	e75b      	b.n	2401c934 <__kernel_tanf+0x30>
2401ca7c:	3f2ca140 	.word	0x3f2ca140
2401ca80:	3f490fda 	.word	0x3f490fda
2401ca84:	33222168 	.word	0x33222168
2401ca88:	00000000 	.word	0x00000000
2401ca8c:	b79bae5f 	.word	0xb79bae5f
2401ca90:	38a3f445 	.word	0x38a3f445
2401ca94:	37d95384 	.word	0x37d95384
2401ca98:	3a1a26c8 	.word	0x3a1a26c8
2401ca9c:	3b6b6916 	.word	0x3b6b6916
2401caa0:	3cb327a4 	.word	0x3cb327a4
2401caa4:	3e088889 	.word	0x3e088889
2401caa8:	3895c07a 	.word	0x3895c07a
2401caac:	398137b9 	.word	0x398137b9
2401cab0:	3abede48 	.word	0x3abede48
2401cab4:	3c11371f 	.word	0x3c11371f
2401cab8:	3d5d0dd1 	.word	0x3d5d0dd1
2401cabc:	3eaaaaab 	.word	0x3eaaaaab
2401cac0:	fffff000 	.word	0xfffff000

2401cac4 <fabs>:
2401cac4:	ec51 0b10 	vmov	r0, r1, d0
2401cac8:	ee10 2a10 	vmov	r2, s0
2401cacc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401cad0:	ec43 2b10 	vmov	d0, r2, r3
2401cad4:	4770      	bx	lr
	...

2401cad8 <floor>:
2401cad8:	ee10 1a90 	vmov	r1, s1
2401cadc:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401cae0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401cae4:	2b13      	cmp	r3, #19
2401cae6:	b530      	push	{r4, r5, lr}
2401cae8:	ee10 0a10 	vmov	r0, s0
2401caec:	ee10 5a10 	vmov	r5, s0
2401caf0:	dc31      	bgt.n	2401cb56 <floor+0x7e>
2401caf2:	2b00      	cmp	r3, #0
2401caf4:	da15      	bge.n	2401cb22 <floor+0x4a>
2401caf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401cbb0 <floor+0xd8>
2401cafa:	ee30 0b07 	vadd.f64	d0, d0, d7
2401cafe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cb06:	dd07      	ble.n	2401cb18 <floor+0x40>
2401cb08:	2900      	cmp	r1, #0
2401cb0a:	da4e      	bge.n	2401cbaa <floor+0xd2>
2401cb0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401cb10:	4318      	orrs	r0, r3
2401cb12:	d001      	beq.n	2401cb18 <floor+0x40>
2401cb14:	4928      	ldr	r1, [pc, #160]	; (2401cbb8 <floor+0xe0>)
2401cb16:	2000      	movs	r0, #0
2401cb18:	460b      	mov	r3, r1
2401cb1a:	4602      	mov	r2, r0
2401cb1c:	ec43 2b10 	vmov	d0, r2, r3
2401cb20:	e020      	b.n	2401cb64 <floor+0x8c>
2401cb22:	4a26      	ldr	r2, [pc, #152]	; (2401cbbc <floor+0xe4>)
2401cb24:	411a      	asrs	r2, r3
2401cb26:	ea01 0402 	and.w	r4, r1, r2
2401cb2a:	4304      	orrs	r4, r0
2401cb2c:	d01a      	beq.n	2401cb64 <floor+0x8c>
2401cb2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 2401cbb0 <floor+0xd8>
2401cb32:	ee30 0b07 	vadd.f64	d0, d0, d7
2401cb36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401cb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cb3e:	ddeb      	ble.n	2401cb18 <floor+0x40>
2401cb40:	2900      	cmp	r1, #0
2401cb42:	bfbe      	ittt	lt
2401cb44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401cb48:	fa40 f303 	asrlt.w	r3, r0, r3
2401cb4c:	18c9      	addlt	r1, r1, r3
2401cb4e:	ea21 0102 	bic.w	r1, r1, r2
2401cb52:	2000      	movs	r0, #0
2401cb54:	e7e0      	b.n	2401cb18 <floor+0x40>
2401cb56:	2b33      	cmp	r3, #51	; 0x33
2401cb58:	dd05      	ble.n	2401cb66 <floor+0x8e>
2401cb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401cb5e:	d101      	bne.n	2401cb64 <floor+0x8c>
2401cb60:	ee30 0b00 	vadd.f64	d0, d0, d0
2401cb64:	bd30      	pop	{r4, r5, pc}
2401cb66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401cb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401cb6e:	40e2      	lsrs	r2, r4
2401cb70:	4202      	tst	r2, r0
2401cb72:	d0f7      	beq.n	2401cb64 <floor+0x8c>
2401cb74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401cbb0 <floor+0xd8>
2401cb78:	ee30 0b07 	vadd.f64	d0, d0, d7
2401cb7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cb84:	ddc8      	ble.n	2401cb18 <floor+0x40>
2401cb86:	2900      	cmp	r1, #0
2401cb88:	da02      	bge.n	2401cb90 <floor+0xb8>
2401cb8a:	2b14      	cmp	r3, #20
2401cb8c:	d103      	bne.n	2401cb96 <floor+0xbe>
2401cb8e:	3101      	adds	r1, #1
2401cb90:	ea20 0002 	bic.w	r0, r0, r2
2401cb94:	e7c0      	b.n	2401cb18 <floor+0x40>
2401cb96:	2401      	movs	r4, #1
2401cb98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401cb9c:	fa04 f303 	lsl.w	r3, r4, r3
2401cba0:	4418      	add	r0, r3
2401cba2:	42a8      	cmp	r0, r5
2401cba4:	bf38      	it	cc
2401cba6:	1909      	addcc	r1, r1, r4
2401cba8:	e7f2      	b.n	2401cb90 <floor+0xb8>
2401cbaa:	2000      	movs	r0, #0
2401cbac:	4601      	mov	r1, r0
2401cbae:	e7b3      	b.n	2401cb18 <floor+0x40>
2401cbb0:	8800759c 	.word	0x8800759c
2401cbb4:	7e37e43c 	.word	0x7e37e43c
2401cbb8:	bff00000 	.word	0xbff00000
2401cbbc:	000fffff 	.word	0x000fffff

2401cbc0 <scalbn>:
2401cbc0:	ee10 1a90 	vmov	r1, s1
2401cbc4:	b510      	push	{r4, lr}
2401cbc6:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401cbca:	b98c      	cbnz	r4, 2401cbf0 <scalbn+0x30>
2401cbcc:	ee10 3a10 	vmov	r3, s0
2401cbd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401cbd4:	430b      	orrs	r3, r1
2401cbd6:	d011      	beq.n	2401cbfc <scalbn+0x3c>
2401cbd8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 2401cca0 <scalbn+0xe0>
2401cbdc:	4b3c      	ldr	r3, [pc, #240]	; (2401ccd0 <scalbn+0x110>)
2401cbde:	ee20 0b07 	vmul.f64	d0, d0, d7
2401cbe2:	4298      	cmp	r0, r3
2401cbe4:	da0b      	bge.n	2401cbfe <scalbn+0x3e>
2401cbe6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401cca8 <scalbn+0xe8>
2401cbea:	ee20 0b07 	vmul.f64	d0, d0, d7
2401cbee:	e005      	b.n	2401cbfc <scalbn+0x3c>
2401cbf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
2401cbf4:	429c      	cmp	r4, r3
2401cbf6:	d107      	bne.n	2401cc08 <scalbn+0x48>
2401cbf8:	ee30 0b00 	vadd.f64	d0, d0, d0
2401cbfc:	bd10      	pop	{r4, pc}
2401cbfe:	ee10 1a90 	vmov	r1, s1
2401cc02:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401cc06:	3c36      	subs	r4, #54	; 0x36
2401cc08:	4404      	add	r4, r0
2401cc0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401cc0e:	429c      	cmp	r4, r3
2401cc10:	dd0d      	ble.n	2401cc2e <scalbn+0x6e>
2401cc12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 2401ccb0 <scalbn+0xf0>
2401cc16:	ed9f 5b28 	vldr	d5, [pc, #160]	; 2401ccb8 <scalbn+0xf8>
2401cc1a:	eeb0 6b47 	vmov.f64	d6, d7
2401cc1e:	ee10 3a90 	vmov	r3, s1
2401cc22:	2b00      	cmp	r3, #0
2401cc24:	fe27 7b05 	vselge.f64	d7, d7, d5
2401cc28:	ee27 0b06 	vmul.f64	d0, d7, d6
2401cc2c:	e7e6      	b.n	2401cbfc <scalbn+0x3c>
2401cc2e:	2c00      	cmp	r4, #0
2401cc30:	dd0a      	ble.n	2401cc48 <scalbn+0x88>
2401cc32:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401cc36:	ec53 2b10 	vmov	r2, r3, d0
2401cc3a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401cc3e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401cc42:	ec43 2b10 	vmov	d0, r2, r3
2401cc46:	e7d9      	b.n	2401cbfc <scalbn+0x3c>
2401cc48:	f114 0f35 	cmn.w	r4, #53	; 0x35
2401cc4c:	da19      	bge.n	2401cc82 <scalbn+0xc2>
2401cc4e:	f24c 3350 	movw	r3, #50000	; 0xc350
2401cc52:	4298      	cmp	r0, r3
2401cc54:	ee10 3a90 	vmov	r3, s1
2401cc58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401cc5c:	dd09      	ble.n	2401cc72 <scalbn+0xb2>
2401cc5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 2401ccb0 <scalbn+0xf0>
2401cc62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 2401ccb8 <scalbn+0xf8>
2401cc66:	eeb0 7b40 	vmov.f64	d7, d0
2401cc6a:	2b00      	cmp	r3, #0
2401cc6c:	fe00 0b06 	vseleq.f64	d0, d0, d6
2401cc70:	e7bb      	b.n	2401cbea <scalbn+0x2a>
2401cc72:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 2401cca8 <scalbn+0xe8>
2401cc76:	ed9f 6b12 	vldr	d6, [pc, #72]	; 2401ccc0 <scalbn+0x100>
2401cc7a:	eeb0 7b40 	vmov.f64	d7, d0
2401cc7e:	2b00      	cmp	r3, #0
2401cc80:	e7f4      	b.n	2401cc6c <scalbn+0xac>
2401cc82:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401cc86:	ec53 2b10 	vmov	r2, r3, d0
2401cc8a:	3436      	adds	r4, #54	; 0x36
2401cc8c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401cc90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401cc94:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 2401ccc8 <scalbn+0x108>
2401cc98:	ec43 2b10 	vmov	d0, r2, r3
2401cc9c:	e7a5      	b.n	2401cbea <scalbn+0x2a>
2401cc9e:	bf00      	nop
2401cca0:	00000000 	.word	0x00000000
2401cca4:	43500000 	.word	0x43500000
2401cca8:	c2f8f359 	.word	0xc2f8f359
2401ccac:	01a56e1f 	.word	0x01a56e1f
2401ccb0:	8800759c 	.word	0x8800759c
2401ccb4:	7e37e43c 	.word	0x7e37e43c
2401ccb8:	8800759c 	.word	0x8800759c
2401ccbc:	fe37e43c 	.word	0xfe37e43c
2401ccc0:	c2f8f359 	.word	0xc2f8f359
2401ccc4:	81a56e1f 	.word	0x81a56e1f
2401ccc8:	00000000 	.word	0x00000000
2401cccc:	3c900000 	.word	0x3c900000
2401ccd0:	ffff3cb0 	.word	0xffff3cb0

2401ccd4 <expm1f>:
2401ccd4:	ee10 2a10 	vmov	r2, s0
2401ccd8:	497c      	ldr	r1, [pc, #496]	; (2401cecc <expm1f+0x1f8>)
2401ccda:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401ccde:	428b      	cmp	r3, r1
2401cce0:	d920      	bls.n	2401cd24 <expm1f+0x50>
2401cce2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401cce6:	d902      	bls.n	2401ccee <expm1f+0x1a>
2401cce8:	ee30 0a00 	vadd.f32	s0, s0, s0
2401ccec:	4770      	bx	lr
2401ccee:	d105      	bne.n	2401ccfc <expm1f+0x28>
2401ccf0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401ccf4:	2a00      	cmp	r2, #0
2401ccf6:	fe20 0a27 	vselge.f32	s0, s0, s15
2401ccfa:	4770      	bx	lr
2401ccfc:	2a00      	cmp	r2, #0
2401ccfe:	db05      	blt.n	2401cd0c <expm1f+0x38>
2401cd00:	4973      	ldr	r1, [pc, #460]	; (2401ced0 <expm1f+0x1fc>)
2401cd02:	428b      	cmp	r3, r1
2401cd04:	d95c      	bls.n	2401cdc0 <expm1f+0xec>
2401cd06:	2000      	movs	r0, #0
2401cd08:	f7fe b8f8 	b.w	2401aefc <__math_oflowf>
2401cd0c:	eddf 7a71 	vldr	s15, [pc, #452]	; 2401ced4 <expm1f+0x200>
2401cd10:	ee70 7a27 	vadd.f32	s15, s0, s15
2401cd14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401cd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cd1c:	d550      	bpl.n	2401cdc0 <expm1f+0xec>
2401cd1e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401cd22:	4770      	bx	lr
2401cd24:	496c      	ldr	r1, [pc, #432]	; (2401ced8 <expm1f+0x204>)
2401cd26:	428b      	cmp	r3, r1
2401cd28:	d966      	bls.n	2401cdf8 <expm1f+0x124>
2401cd2a:	496c      	ldr	r1, [pc, #432]	; (2401cedc <expm1f+0x208>)
2401cd2c:	428b      	cmp	r3, r1
2401cd2e:	d847      	bhi.n	2401cdc0 <expm1f+0xec>
2401cd30:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 2401cee0 <expm1f+0x20c>
2401cd34:	2a00      	cmp	r2, #0
2401cd36:	bfa7      	ittee	ge
2401cd38:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401cd3c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 2401cee4 <expm1f+0x210>
2401cd40:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 2401cee8 <expm1f+0x214>
2401cd44:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401cd48:	bfac      	ite	ge
2401cd4a:	2301      	movge	r3, #1
2401cd4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401cd50:	ee37 0a67 	vsub.f32	s0, s14, s15
2401cd54:	ee37 7a40 	vsub.f32	s14, s14, s0
2401cd58:	ee77 7a67 	vsub.f32	s15, s14, s15
2401cd5c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401cd60:	ee20 4a25 	vmul.f32	s8, s0, s11
2401cd64:	ed9f 6a61 	vldr	s12, [pc, #388]	; 2401ceec <expm1f+0x218>
2401cd68:	eddf 6a61 	vldr	s13, [pc, #388]	; 2401cef0 <expm1f+0x21c>
2401cd6c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 2401cef4 <expm1f+0x220>
2401cd70:	ee20 7a04 	vmul.f32	s14, s0, s8
2401cd74:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401cd78:	eee7 6a06 	vfma.f32	s13, s14, s12
2401cd7c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 2401cef8 <expm1f+0x224>
2401cd80:	eea6 6a87 	vfma.f32	s12, s13, s14
2401cd84:	eddf 6a5d 	vldr	s13, [pc, #372]	; 2401cefc <expm1f+0x228>
2401cd88:	eee6 6a07 	vfma.f32	s13, s12, s14
2401cd8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401cd90:	eea6 5a87 	vfma.f32	s10, s13, s14
2401cd94:	eef0 6a46 	vmov.f32	s13, s12
2401cd98:	eee5 6a07 	vfma.f32	s13, s10, s14
2401cd9c:	eee4 4a66 	vfms.f32	s9, s8, s13
2401cda0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401cda4:	eea0 4a64 	vfms.f32	s8, s0, s9
2401cda8:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401cdac:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401cdb0:	ee66 6a87 	vmul.f32	s13, s13, s14
2401cdb4:	bb73      	cbnz	r3, 2401ce14 <expm1f+0x140>
2401cdb6:	eef0 7a47 	vmov.f32	s15, s14
2401cdba:	eed0 7a26 	vfnms.f32	s15, s0, s13
2401cdbe:	e024      	b.n	2401ce0a <expm1f+0x136>
2401cdc0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401cdc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401cdc8:	2a00      	cmp	r2, #0
2401cdca:	fe67 7a87 	vselge.f32	s15, s15, s14
2401cdce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2401cf00 <expm1f+0x22c>
2401cdd2:	eddf 6a43 	vldr	s13, [pc, #268]	; 2401cee0 <expm1f+0x20c>
2401cdd6:	ee40 7a07 	vmla.f32	s15, s0, s14
2401cdda:	eeb0 7a40 	vmov.f32	s14, s0
2401cdde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401cde2:	ee17 3a90 	vmov	r3, s15
2401cde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401cdea:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401cdee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2401cee4 <expm1f+0x210>
2401cdf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401cdf6:	e7ab      	b.n	2401cd50 <expm1f+0x7c>
2401cdf8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401cdfc:	d208      	bcs.n	2401ce10 <expm1f+0x13c>
2401cdfe:	eddf 7a41 	vldr	s15, [pc, #260]	; 2401cf04 <expm1f+0x230>
2401ce02:	ee70 7a27 	vadd.f32	s15, s0, s15
2401ce06:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401ce0a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401ce0e:	4770      	bx	lr
2401ce10:	2300      	movs	r3, #0
2401ce12:	e7a3      	b.n	2401cd5c <expm1f+0x88>
2401ce14:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401ce18:	1c5a      	adds	r2, r3, #1
2401ce1a:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401ce1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ce22:	d106      	bne.n	2401ce32 <expm1f+0x15e>
2401ce24:	ee70 7a67 	vsub.f32	s15, s0, s15
2401ce28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401ce2c:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401ce30:	4770      	bx	lr
2401ce32:	2b01      	cmp	r3, #1
2401ce34:	d118      	bne.n	2401ce68 <expm1f+0x194>
2401ce36:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401ce3a:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401ce3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ce42:	bf5b      	ittet	pl
2401ce44:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401ce48:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401ce4c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
2401ce50:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401ce54:	bf43      	ittte	mi
2401ce56:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
2401ce5a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401ce5e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401ce62:	eeb0 0a46 	vmovpl.f32	s0, s12
2401ce66:	4770      	bx	lr
2401ce68:	1c5a      	adds	r2, r3, #1
2401ce6a:	2a39      	cmp	r2, #57	; 0x39
2401ce6c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401ce70:	d90b      	bls.n	2401ce8a <expm1f+0x1b6>
2401ce72:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401ce76:	ee36 0a40 	vsub.f32	s0, s12, s0
2401ce7a:	ee10 3a10 	vmov	r3, s0
2401ce7e:	440b      	add	r3, r1
2401ce80:	ee00 3a10 	vmov	s0, r3
2401ce84:	ee30 0a46 	vsub.f32	s0, s0, s12
2401ce88:	4770      	bx	lr
2401ce8a:	2b16      	cmp	r3, #22
2401ce8c:	dc11      	bgt.n	2401ceb2 <expm1f+0x1de>
2401ce8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401ce92:	fa42 f303 	asr.w	r3, r2, r3
2401ce96:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401ce9a:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401ce9e:	ee07 3a90 	vmov	s15, r3
2401cea2:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401cea6:	ee10 3a10 	vmov	r3, s0
2401ceaa:	440b      	add	r3, r1
2401ceac:	ee00 3a10 	vmov	s0, r3
2401ceb0:	4770      	bx	lr
2401ceb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401ceb6:	05db      	lsls	r3, r3, #23
2401ceb8:	ee07 3a10 	vmov	s14, r3
2401cebc:	ee77 7a87 	vadd.f32	s15, s15, s14
2401cec0:	ee70 7a67 	vsub.f32	s15, s0, s15
2401cec4:	ee37 0a86 	vadd.f32	s0, s15, s12
2401cec8:	e7ed      	b.n	2401cea6 <expm1f+0x1d2>
2401ceca:	bf00      	nop
2401cecc:	4195b843 	.word	0x4195b843
2401ced0:	42b17217 	.word	0x42b17217
2401ced4:	0da24260 	.word	0x0da24260
2401ced8:	3eb17218 	.word	0x3eb17218
2401cedc:	3f851591 	.word	0x3f851591
2401cee0:	3f317180 	.word	0x3f317180
2401cee4:	3717f7d1 	.word	0x3717f7d1
2401cee8:	b717f7d1 	.word	0xb717f7d1
2401ceec:	b457edbb 	.word	0xb457edbb
2401cef0:	36867e54 	.word	0x36867e54
2401cef4:	bd088889 	.word	0xbd088889
2401cef8:	b8a670cd 	.word	0xb8a670cd
2401cefc:	3ad00d01 	.word	0x3ad00d01
2401cf00:	3fb8aa3b 	.word	0x3fb8aa3b
2401cf04:	7149f2ca 	.word	0x7149f2ca

2401cf08 <floorf>:
2401cf08:	ee10 3a10 	vmov	r3, s0
2401cf0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401cf10:	3a7f      	subs	r2, #127	; 0x7f
2401cf12:	2a16      	cmp	r2, #22
2401cf14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401cf18:	dc2a      	bgt.n	2401cf70 <floorf+0x68>
2401cf1a:	2a00      	cmp	r2, #0
2401cf1c:	da11      	bge.n	2401cf42 <floorf+0x3a>
2401cf1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401cf80 <floorf+0x78>
2401cf22:	ee30 0a27 	vadd.f32	s0, s0, s15
2401cf26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf2e:	dd05      	ble.n	2401cf3c <floorf+0x34>
2401cf30:	2b00      	cmp	r3, #0
2401cf32:	da23      	bge.n	2401cf7c <floorf+0x74>
2401cf34:	4a13      	ldr	r2, [pc, #76]	; (2401cf84 <floorf+0x7c>)
2401cf36:	2900      	cmp	r1, #0
2401cf38:	bf18      	it	ne
2401cf3a:	4613      	movne	r3, r2
2401cf3c:	ee00 3a10 	vmov	s0, r3
2401cf40:	4770      	bx	lr
2401cf42:	4911      	ldr	r1, [pc, #68]	; (2401cf88 <floorf+0x80>)
2401cf44:	4111      	asrs	r1, r2
2401cf46:	420b      	tst	r3, r1
2401cf48:	d0fa      	beq.n	2401cf40 <floorf+0x38>
2401cf4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401cf80 <floorf+0x78>
2401cf4e:	ee30 0a27 	vadd.f32	s0, s0, s15
2401cf52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401cf5a:	ddef      	ble.n	2401cf3c <floorf+0x34>
2401cf5c:	2b00      	cmp	r3, #0
2401cf5e:	bfbe      	ittt	lt
2401cf60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401cf64:	fa40 f202 	asrlt.w	r2, r0, r2
2401cf68:	189b      	addlt	r3, r3, r2
2401cf6a:	ea23 0301 	bic.w	r3, r3, r1
2401cf6e:	e7e5      	b.n	2401cf3c <floorf+0x34>
2401cf70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401cf74:	d3e4      	bcc.n	2401cf40 <floorf+0x38>
2401cf76:	ee30 0a00 	vadd.f32	s0, s0, s0
2401cf7a:	4770      	bx	lr
2401cf7c:	2300      	movs	r3, #0
2401cf7e:	e7dd      	b.n	2401cf3c <floorf+0x34>
2401cf80:	7149f2ca 	.word	0x7149f2ca
2401cf84:	bf800000 	.word	0xbf800000
2401cf88:	007fffff 	.word	0x007fffff

2401cf8c <nanf>:
2401cf8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401cf94 <nanf+0x8>
2401cf90:	4770      	bx	lr
2401cf92:	bf00      	nop
2401cf94:	7fc00000 	.word	0x7fc00000

2401cf98 <scalbnf>:
2401cf98:	ee10 3a10 	vmov	r3, s0
2401cf9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401cfa0:	d024      	beq.n	2401cfec <scalbnf+0x54>
2401cfa2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401cfa6:	d302      	bcc.n	2401cfae <scalbnf+0x16>
2401cfa8:	ee30 0a00 	vadd.f32	s0, s0, s0
2401cfac:	4770      	bx	lr
2401cfae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401cfb2:	d121      	bne.n	2401cff8 <scalbnf+0x60>
2401cfb4:	4b29      	ldr	r3, [pc, #164]	; (2401d05c <scalbnf+0xc4>)
2401cfb6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2401d060 <scalbnf+0xc8>
2401cfba:	4298      	cmp	r0, r3
2401cfbc:	ee20 0a27 	vmul.f32	s0, s0, s15
2401cfc0:	db15      	blt.n	2401cfee <scalbnf+0x56>
2401cfc2:	ee10 3a10 	vmov	r3, s0
2401cfc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401cfca:	3a19      	subs	r2, #25
2401cfcc:	4402      	add	r2, r0
2401cfce:	2afe      	cmp	r2, #254	; 0xfe
2401cfd0:	dd14      	ble.n	2401cffc <scalbnf+0x64>
2401cfd2:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401d064 <scalbnf+0xcc>
2401cfd6:	eddf 6a24 	vldr	s13, [pc, #144]	; 2401d068 <scalbnf+0xd0>
2401cfda:	ee10 3a10 	vmov	r3, s0
2401cfde:	eeb0 7a67 	vmov.f32	s14, s15
2401cfe2:	2b00      	cmp	r3, #0
2401cfe4:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401cfe8:	ee27 0a27 	vmul.f32	s0, s14, s15
2401cfec:	4770      	bx	lr
2401cfee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401d06c <scalbnf+0xd4>
2401cff2:	ee20 0a27 	vmul.f32	s0, s0, s15
2401cff6:	4770      	bx	lr
2401cff8:	0dd2      	lsrs	r2, r2, #23
2401cffa:	e7e7      	b.n	2401cfcc <scalbnf+0x34>
2401cffc:	2a00      	cmp	r2, #0
2401cffe:	dd06      	ble.n	2401d00e <scalbnf+0x76>
2401d000:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401d004:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401d008:	ee00 3a10 	vmov	s0, r3
2401d00c:	4770      	bx	lr
2401d00e:	f112 0f16 	cmn.w	r2, #22
2401d012:	da19      	bge.n	2401d048 <scalbnf+0xb0>
2401d014:	f24c 3350 	movw	r3, #50000	; 0xc350
2401d018:	4298      	cmp	r0, r3
2401d01a:	ee10 3a10 	vmov	r3, s0
2401d01e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401d022:	dd09      	ble.n	2401d038 <scalbnf+0xa0>
2401d024:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 2401d064 <scalbnf+0xcc>
2401d028:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2401d068 <scalbnf+0xd0>
2401d02c:	eef0 7a40 	vmov.f32	s15, s0
2401d030:	2b00      	cmp	r3, #0
2401d032:	fe00 0a07 	vseleq.f32	s0, s0, s14
2401d036:	e7dc      	b.n	2401cff2 <scalbnf+0x5a>
2401d038:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 2401d06c <scalbnf+0xd4>
2401d03c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2401d070 <scalbnf+0xd8>
2401d040:	eef0 7a40 	vmov.f32	s15, s0
2401d044:	2b00      	cmp	r3, #0
2401d046:	e7f4      	b.n	2401d032 <scalbnf+0x9a>
2401d048:	3219      	adds	r2, #25
2401d04a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401d04e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401d052:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401d074 <scalbnf+0xdc>
2401d056:	ee07 3a10 	vmov	s14, r3
2401d05a:	e7c5      	b.n	2401cfe8 <scalbnf+0x50>
2401d05c:	ffff3cb0 	.word	0xffff3cb0
2401d060:	4c000000 	.word	0x4c000000
2401d064:	7149f2ca 	.word	0x7149f2ca
2401d068:	f149f2ca 	.word	0xf149f2ca
2401d06c:	0da24260 	.word	0x0da24260
2401d070:	8da24260 	.word	0x8da24260
2401d074:	33000000 	.word	0x33000000

2401d078 <syncMap>:
2401d078:	00000002 00000000 00000001 7062652e     .............ebp
2401d088:	00000000                                ....

2401d08c <D1CorePrescTable>:
2401d08c:	00000000 04030201 04030201 09080706     ................

2401d09c <flagBitshiftOffset.0>:
2401d09c:	16100600 16100600                       ........

2401d0a4 <SD_Driver>:
2401d0a4:	2400f975 2400f9a5 2400f9c5 2400fa55     u..$...$...$U..$
2401d0b4:	2400f9ed 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
2401d0c4:	3d3b2c2b 00005d5b                       +,;=[]..

2401d0cc <ExCvt>:
2401d0cc:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401d0dc:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401d0ec:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401d0fc:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401d10c:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401d11c:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401d12c:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401d13c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401d14c <LfnOfs>:
2401d14c:	07050301 12100e09 1c181614 0000001e     ................

2401d15c <Tbl>:
2401d15c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401d16c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401d17c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401d18c:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401d19c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401d1ac:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401d1bc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401d1cc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401d1dc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401d1ec:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401d1fc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401d20c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401d21c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401d22c:	00da00de 00d900db 00dd00fd 00b400af     ................
2401d23c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401d24c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401d25c <cvt1.1>:
2401d25c:	031a0061 031700e0 030700f8 000100ff     a...............
2401d26c:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401d27c:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401d28c:	01840182 01860184 01870187 018a0189     ................
2401d29c:	018b018b 018e018d 0190018f 01910191     ................
2401d2ac:	01940193 019601f6 01980197 023d0198     ..............=.
2401d2bc:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401d2cc:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401d2dc:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401d2ec:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401d2fc:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401d30c:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401d31c:	01ca01cb 011001cd 000101dd 01de018e     ................
2401d32c:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401d33c:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401d34c:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401d35c:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401d36c:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401d37c:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401d38c:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401d39c:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401d3ac:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401d3bc:	01a90282 02850284 02870286 024401ae     ..............D.
2401d3cc:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401d3dc:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401d3ec:	03880386 038a0389 031103b1 000203c2     ................
2401d3fc:	03a303a3 030803c4 000303cc 038e038c     ................
2401d40c:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401d41c:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401d42c:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401d43c:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401d44c:	00000000                                ....

2401d450 <cvt2.0>:
2401d450:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401d460:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401d470:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401d480:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401d490:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401d4a0:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401d4b0:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401d4c0:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401d4d0:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401d4e0:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401d4f0:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401d500:	2d000164 ff410826 0000031a              d..-&.A.....

2401d50c <__leaf_table_filtertan>:
2401d50c:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
2401d51c:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
2401d52c:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
2401d53c:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
2401d54c:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
2401d55c:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
2401d56c:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
2401d57c:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
2401d58c:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
2401d59c:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
2401d5ac:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
2401d5bc:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
2401d5cc:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
2401d5dc:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
2401d5ec:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
2401d5fc:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
2401d60c:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
2401d61c:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
2401d62c:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
2401d63c:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
2401d64c:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
2401d65c:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
2401d66c:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
2401d67c:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
2401d68c:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
2401d69c:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
2401d6ac:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
2401d6bc:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
2401d6cc:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
2401d6dc:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
2401d6ec:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
2401d6fc:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
2401d70c:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
2401d71c:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
2401d72c:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
2401d73c:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
2401d74c:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
2401d75c:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
2401d76c:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
2401d77c:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
2401d78c:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
2401d79c:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
2401d7ac:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
2401d7bc:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
2401d7cc:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
2401d7dc:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
2401d7ec:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
2401d7fc:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
2401d80c:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
2401d81c:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
2401d82c:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
2401d83c:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
2401d84c:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
2401d85c:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
2401d86c:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
2401d87c:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
2401d88c:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
2401d89c:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
2401d8ac:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
2401d8bc:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
2401d8cc:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
2401d8dc:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
2401d8ec:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
2401d8fc:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
2401d90c:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
2401d91c:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
2401d92c:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
2401d93c:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
2401d94c:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
2401d95c:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
2401d96c:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
2401d97c:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
2401d98c:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
2401d99c:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
2401d9ac:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
2401d9bc:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
2401d9cc:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
2401d9dc:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
2401d9ec:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
2401d9fc:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
2401da0c:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
2401da1c:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
2401da2c:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
2401da3c:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
2401da4c:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
2401da5c:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
2401da6c:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
2401da7c:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
2401da8c:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
2401da9c:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
2401daac:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
2401dabc:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
2401dacc:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
2401dadc:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
2401daec:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
2401dafc:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
2401db0c:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
2401db1c:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
2401db2c:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
2401db3c:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
2401db4c:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
2401db5c:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
2401db6c:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
2401db7c:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
2401db8c:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
2401db9c:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
2401dbac:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
2401dbbc:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
2401dbcc:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
2401dbdc:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
2401dbec:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
2401dbfc:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
2401dc0c:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
2401dc1c:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
2401dc2c:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
2401dc3c:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
2401dc4c:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
2401dc5c:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
2401dc6c:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
2401dc7c:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
2401dc8c:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
2401dc9c:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
2401dcac:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
2401dcbc:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
2401dccc:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
2401dcdc:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
2401dcec:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
2401dcfc:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
2401dd0c:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
2401dd1c:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
2401dd2c:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
2401dd3c:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
2401dd4c:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
2401dd5c:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
2401dd6c:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
2401dd7c:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
2401dd8c:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
2401dd9c:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
2401ddac:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
2401ddbc:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
2401ddcc:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
2401dddc:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
2401ddec:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
2401ddfc:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
2401de0c:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
2401de1c:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
2401de2c:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
2401de3c:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
2401de4c:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
2401de5c:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
2401de6c:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
2401de7c:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
2401de8c:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
2401de9c:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
2401deac:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
2401debc:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
2401decc:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
2401dedc:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
2401deec:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
2401defc:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
2401df0c:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
2401df1c:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
2401df2c:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
2401df3c:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
2401df4c:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
2401df5c:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
2401df6c:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
2401df7c:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
2401df8c:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
2401df9c:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
2401dfac:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
2401dfbc:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
2401dfcc:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
2401dfdc:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
2401dfec:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
2401dffc:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
2401e00c:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
2401e01c:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
2401e02c:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
2401e03c:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
2401e04c:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
2401e05c:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
2401e06c:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
2401e07c:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
2401e08c:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
2401e09c:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
2401e0ac:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
2401e0bc:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
2401e0cc:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
2401e0dc:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
2401e0ec:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
2401e0fc:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
2401e10c:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
2401e11c:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
2401e12c:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
2401e13c:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
2401e14c:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
2401e15c:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
2401e16c:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
2401e17c:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
2401e18c:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
2401e19c:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
2401e1ac:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
2401e1bc:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
2401e1cc:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
2401e1dc:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
2401e1ec:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
2401e1fc:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
2401e20c:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
2401e21c:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
2401e22c:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
2401e23c:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
2401e24c:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
2401e25c:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
2401e26c:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
2401e27c:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
2401e28c:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
2401e29c:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
2401e2ac:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
2401e2bc:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
2401e2cc:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
2401e2dc:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
2401e2ec:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
2401e2fc:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
2401e30c:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
2401e31c:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
2401e32c:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
2401e33c:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
2401e34c:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
2401e35c:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
2401e36c:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
2401e37c:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
2401e38c:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
2401e39c:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
2401e3ac:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
2401e3bc:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
2401e3cc:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
2401e3dc:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
2401e3ec:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
2401e3fc:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
2401e40c:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
2401e41c:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
2401e42c:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
2401e43c:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
2401e44c:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
2401e45c:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
2401e46c:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
2401e47c:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
2401e48c:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
2401e49c:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
2401e4ac:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
2401e4bc:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
2401e4cc:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
2401e4dc:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
2401e4ec:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
2401e4fc:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
2401e50c:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
2401e51c:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
2401e52c:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
2401e53c:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
2401e54c:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
2401e55c:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
2401e56c:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
2401e57c:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
2401e58c:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
2401e59c:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
2401e5ac:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
2401e5bc:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
2401e5cc:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
2401e5dc:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
2401e5ec:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
2401e5fc:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
2401e60c:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
2401e61c:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
2401e62c:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
2401e63c:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
2401e64c:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
2401e65c:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
2401e66c:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
2401e67c:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
2401e68c:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
2401e69c:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
2401e6ac:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
2401e6bc:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
2401e6cc:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
2401e6dc:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
2401e6ec:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
2401e6fc:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
2401e70c:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
2401e71c:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
2401e72c:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
2401e73c:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
2401e74c:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
2401e75c:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
2401e76c:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
2401e77c:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
2401e78c:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
2401e79c:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
2401e7ac:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
2401e7bc:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
2401e7cc:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
2401e7dc:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
2401e7ec:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
2401e7fc:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
2401e80c:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
2401e81c:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
2401e82c:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
2401e83c:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
2401e84c:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
2401e85c:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
2401e86c:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
2401e87c:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
2401e88c:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
2401e89c:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
2401e8ac:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
2401e8bc:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
2401e8cc:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
2401e8dc:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
2401e8ec:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
2401e8fc:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
2401e90c:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
2401e91c:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
2401e92c:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
2401e93c:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
2401e94c:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
2401e95c:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
2401e96c:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
2401e97c:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
2401e98c:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
2401e99c:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
2401e9ac:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
2401e9bc:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
2401e9cc:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
2401e9dc:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
2401e9ec:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
2401e9fc:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
2401ea0c:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
2401ea1c:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
2401ea2c:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
2401ea3c:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
2401ea4c:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
2401ea5c:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
2401ea6c:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
2401ea7c:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
2401ea8c:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
2401ea9c:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
2401eaac:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
2401eabc:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
2401eacc:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
2401eadc:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
2401eaec:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
2401eafc:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
2401eb0c:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
2401eb1c:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
2401eb2c:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
2401eb3c:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
2401eb4c:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
2401eb5c:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
2401eb6c:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
2401eb7c:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
2401eb8c:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
2401eb9c:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
2401ebac:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
2401ebbc:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
2401ebcc:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
2401ebdc:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
2401ebec:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
2401ebfc:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
2401ec0c:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
2401ec1c:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
2401ec2c:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
2401ec3c:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
2401ec4c:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
2401ec5c:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
2401ec6c:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
2401ec7c:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
2401ec8c:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
2401ec9c:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
2401ecac:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
2401ecbc:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
2401eccc:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
2401ecdc:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
2401ecec:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
2401ecfc:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
2401ed0c:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
2401ed1c:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
2401ed2c:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
2401ed3c:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
2401ed4c:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
2401ed5c:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
2401ed6c:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
2401ed7c:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
2401ed8c:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
2401ed9c:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
2401edac:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
2401edbc:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
2401edcc:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
2401eddc:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
2401edec:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
2401edfc:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
2401ee0c:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
2401ee1c:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
2401ee2c:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
2401ee3c:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
2401ee4c:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
2401ee5c:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
2401ee6c:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
2401ee7c:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
2401ee8c:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
2401ee9c:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
2401eeac:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
2401eebc:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
2401eecc:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
2401eedc:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
2401eeec:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
2401eefc:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
2401ef0c:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
2401ef1c:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
2401ef2c:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
2401ef3c:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
2401ef4c:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
2401ef5c:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
2401ef6c:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
2401ef7c:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
2401ef8c:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
2401ef9c:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
2401efac:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
2401efbc:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
2401efcc:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
2401efdc:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
2401efec:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
2401effc:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
2401f00c:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
2401f01c:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
2401f02c:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
2401f03c:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
2401f04c:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
2401f05c:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
2401f06c:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
2401f07c:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
2401f08c:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
2401f09c:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
2401f0ac:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
2401f0bc:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
2401f0cc:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
2401f0dc:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
2401f0ec:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
2401f0fc:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
2401f10c:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
2401f11c:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
2401f12c:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
2401f13c:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
2401f14c:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
2401f15c:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
2401f16c:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
2401f17c:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
2401f18c:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
2401f19c:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
2401f1ac:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
2401f1bc:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
2401f1cc:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
2401f1dc:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
2401f1ec:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
2401f1fc:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
2401f20c:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
2401f21c:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
2401f22c:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
2401f23c:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
2401f24c:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
2401f25c:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
2401f26c:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
2401f27c:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
2401f28c:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
2401f29c:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
2401f2ac:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
2401f2bc:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
2401f2cc:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
2401f2dc:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
2401f2ec:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
2401f2fc:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
2401f30c:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
2401f31c:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
2401f32c:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
2401f33c:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
2401f34c:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
2401f35c:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
2401f36c:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
2401f37c:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
2401f38c:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
2401f39c:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
2401f3ac:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
2401f3bc:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
2401f3cc:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
2401f3dc:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
2401f3ec:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
2401f3fc:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
2401f40c:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
2401f41c:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
2401f42c:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
2401f43c:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
2401f44c:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
2401f45c:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
2401f46c:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
2401f47c:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
2401f48c:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
2401f49c:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
2401f4ac:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
2401f4bc:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
2401f4cc:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
2401f4dc:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
2401f4ec:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
2401f4fc:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
2401f50c:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
2401f51c:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
2401f52c:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
2401f53c:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
2401f54c:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
2401f55c:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
2401f56c:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
2401f57c:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
2401f58c:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
2401f59c:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
2401f5ac:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
2401f5bc:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
2401f5cc:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
2401f5dc:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
2401f5ec:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
2401f5fc:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
2401f60c:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
2401f61c:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
2401f62c:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
2401f63c:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
2401f64c:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
2401f65c:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
2401f66c:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
2401f67c:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
2401f68c:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
2401f69c:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
2401f6ac:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
2401f6bc:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
2401f6cc:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
2401f6dc:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
2401f6ec:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
2401f6fc:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
2401f70c:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
2401f71c:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
2401f72c:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
2401f73c:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
2401f74c:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
2401f75c:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
2401f76c:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
2401f77c:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
2401f78c:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
2401f79c:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
2401f7ac:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
2401f7bc:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
2401f7cc:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
2401f7dc:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
2401f7ec:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
2401f7fc:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
2401f80c:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
2401f81c:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
2401f82c:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
2401f83c:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
2401f84c:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
2401f85c:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
2401f86c:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
2401f87c:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
2401f88c:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
2401f89c:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
2401f8ac:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
2401f8bc:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
2401f8cc:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
2401f8dc:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
2401f8ec:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
2401f8fc:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
2401f90c:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
2401f91c:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
2401f92c:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
2401f93c:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
2401f94c:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
2401f95c:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
2401f96c:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
2401f97c:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
2401f98c:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
2401f99c:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
2401f9ac:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
2401f9bc:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
2401f9cc:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
2401f9dc:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
2401f9ec:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
2401f9fc:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
2401fa0c:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
2401fa1c:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
2401fa2c:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
2401fa3c:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
2401fa4c:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
2401fa5c:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
2401fa6c:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
2401fa7c:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
2401fa8c:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
2401fa9c:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
2401faac:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
2401fabc:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
2401facc:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
2401fadc:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
2401faec:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
2401fafc:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
2401fb0c:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
2401fb1c:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
2401fb2c:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
2401fb3c:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
2401fb4c:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
2401fb5c:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
2401fb6c:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
2401fb7c:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
2401fb8c:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
2401fb9c:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
2401fbac:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
2401fbbc:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401fbcc:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401fbdc:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401fbec:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401fbfc:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401fc0c:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401fc1c:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401fc2c:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401fc3c:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401fc4c:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401fc5c:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401fc6c:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401fc7c:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401fc8c:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401fc9c:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401fcac:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401fcbc:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401fccc:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401fcdc:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401fcec:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401fcfc:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401fd0c:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401fd1c:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401fd2c:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401fd3c:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401fd4c:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401fd5c:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401fd6c:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401fd7c:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401fd8c:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401fd9c:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401fdac:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401fdbc:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401fdcc:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401fddc:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401fdec:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401fdfc:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401fe0c:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401fe1c:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401fe2c:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401fe3c:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401fe4c:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401fe5c:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401fe6c:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401fe7c:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401fe8c:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401fe9c:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401feac:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401febc:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401fecc:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401fedc:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401feec:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401fefc:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401ff0c:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401ff1c:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401ff2c:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401ff3c:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401ff4c:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401ff5c:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401ff6c:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401ff7c:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401ff8c:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401ff9c:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401ffac:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401ffbc:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401ffcc:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401ffdc:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401ffec:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401fffc:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2402000c:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2402001c:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2402002c:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2402003c:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2402004c:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2402005c:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2402006c:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2402007c:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2402008c:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2402009c:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
240200ac:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
240200bc:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
240200cc:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
240200dc:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
240200ec:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
240200fc:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2402010c:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2402011c:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2402012c:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2402013c:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2402014c:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2402015c:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2402016c:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2402017c:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2402018c:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2402019c:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
240201ac:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
240201bc:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
240201cc:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
240201dc:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
240201ec:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
240201fc:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2402020c:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2402021c:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2402022c:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2402023c:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2402024c:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2402025c:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2402026c:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2402027c:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2402028c:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2402029c:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
240202ac:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
240202bc:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
240202cc:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
240202dc:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
240202ec:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
240202fc:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2402030c:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2402031c:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2402032c:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2402033c:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2402034c:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2402035c:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2402036c:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2402037c:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2402038c:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2402039c:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
240203ac:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
240203bc:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
240203cc:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
240203dc:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
240203ec:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
240203fc:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2402040c:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2402041c:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2402042c:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2402043c:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2402044c:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2402045c:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2402046c:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2402047c:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2402048c:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2402049c:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
240204ac:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
240204bc:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
240204cc:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
240204dc:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
240204ec:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
240204fc:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2402050c:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2402051c:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2402052c:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2402053c:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2402054c:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2402055c:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2402056c:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2402057c:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2402058c:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2402059c:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
240205ac:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
240205bc:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
240205cc:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
240205dc:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
240205ec:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
240205fc:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2402060c:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2402061c:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2402062c:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2402063c:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2402064c:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2402065c:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2402066c:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2402067c:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2402068c:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2402069c:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
240206ac:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
240206bc:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
240206cc:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
240206dc:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
240206ec:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
240206fc:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2402070c:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2402071c:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2402072c:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2402073c:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2402074c:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2402075c:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2402076c:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2402077c:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2402078c:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2402079c:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
240207ac:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
240207bc:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
240207cc:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
240207dc:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
240207ec:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
240207fc:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2402080c:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2402081c:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2402082c:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2402083c:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2402084c:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2402085c:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2402086c:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2402087c:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2402088c:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2402089c:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
240208ac:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
240208bc:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
240208cc:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
240208dc:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
240208ec:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
240208fc:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2402090c:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2402091c:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2402092c:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2402093c:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2402094c:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2402095c:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2402096c:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2402097c:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2402098c:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2402099c:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
240209ac:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
240209bc:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
240209cc:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
240209dc:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
240209ec:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
240209fc:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
24020a0c:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
24020a1c:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
24020a2c:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
24020a3c:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
24020a4c:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
24020a5c:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
24020a6c:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
24020a7c:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
24020a8c:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
24020a9c:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
24020aac:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
24020abc:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
24020acc:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
24020adc:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
24020aec:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
24020afc:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
24020b0c:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
24020b1c:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
24020b2c:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
24020b3c:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
24020b4c:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
24020b5c:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
24020b6c:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
24020b7c:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
24020b8c:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
24020b9c:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
24020bac:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
24020bbc:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
24020bcc:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
24020bdc:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
24020bec:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
24020bfc:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
24020c0c:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
24020c1c:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
24020c2c:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
24020c3c:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
24020c4c:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
24020c5c:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
24020c6c:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
24020c7c:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
24020c8c:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
24020c9c:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
24020cac:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
24020cbc:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
24020ccc:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
24020cdc:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
24020cec:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
24020cfc:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
24020d0c:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
24020d1c:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
24020d2c:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
24020d3c:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
24020d4c:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
24020d5c:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
24020d6c:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
24020d7c:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
24020d8c:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
24020d9c:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
24020dac:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
24020dbc:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
24020dcc:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
24020ddc:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
24020dec:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
24020dfc:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
24020e0c:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
24020e1c:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
24020e2c:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
24020e3c:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
24020e4c:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
24020e5c:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
24020e6c:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
24020e7c:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
24020e8c:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
24020e9c:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
24020eac:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
24020ebc:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
24020ecc:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
24020edc:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
24020eec:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
24020efc:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
24020f0c:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
24020f1c:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
24020f2c:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
24020f3c:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
24020f4c:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
24020f5c:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
24020f6c:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
24020f7c:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
24020f8c:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
24020f9c:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
24020fac:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
24020fbc:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
24020fcc:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
24020fdc:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
24020fec:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
24020ffc:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2402100c:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2402101c:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2402102c:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2402103c:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2402104c:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2402105c:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2402106c:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2402107c:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2402108c:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2402109c:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
240210ac:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
240210bc:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
240210cc:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
240210dc:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
240210ec:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
240210fc:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2402110c:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2402111c:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2402112c:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2402113c:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2402114c:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2402115c:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2402116c:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2402117c:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2402118c:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2402119c:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
240211ac:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
240211bc:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
240211cc:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
240211dc:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
240211ec:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
240211fc:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2402120c:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2402121c:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2402122c:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2402123c:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2402124c:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2402125c:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2402126c:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2402127c:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2402128c:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2402129c:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
240212ac:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
240212bc:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
240212cc:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
240212dc:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
240212ec:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
240212fc:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2402130c:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2402131c:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2402132c:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2402133c:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2402134c:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2402135c:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2402136c:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2402137c:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2402138c:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2402139c:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
240213ac:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
240213bc:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
240213cc:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
240213dc:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
240213ec:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
240213fc:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2402140c:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2402141c:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2402142c:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2402143c:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2402144c:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2402145c:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2402146c:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2402147c:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2402148c:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2402149c:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
240214ac:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
240214bc:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
240214cc:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
240214dc:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
240214ec:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
240214fc:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2402150c <__leaf_table_fir16XHigh>:
2402150c:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
2402151c:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
2402152c:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
2402153c:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
2402154c:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
2402155c:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
2402156c:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
2402157c:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
2402158c:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
2402159c:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
240215ac:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
240215bc:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
240215cc:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
240215dc:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
240215ec:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
240215fc:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
2402160c:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
2402161c:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
2402162c:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
2402163c:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
2402164c:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
2402165c:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
2402166c:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
2402167c:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
2402168c:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
2402169c:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
240216ac:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
240216bc:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
240216cc:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
240216dc:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
240216ec:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
240216fc:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
2402170c:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
2402171c:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
2402172c:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
2402173c:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
2402174c:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
2402175c:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
2402176c:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
2402177c:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
2402178c:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
2402179c:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
240217ac:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
240217bc:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
240217cc:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
240217dc:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
240217ec:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
240217fc:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
2402180c:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
2402181c:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
2402182c:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
2402183c:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
2402184c:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
2402185c:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
2402186c:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
2402187c:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
2402188c:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
2402189c:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
240218ac:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
240218bc:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
240218cc:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
240218dc:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
240218ec:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
240218fc:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
2402190c:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
2402191c:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
2402192c:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
2402193c:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
2402194c:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
2402195c:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
2402196c:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
2402197c:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
2402198c:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
2402199c:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
240219ac:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
240219bc:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
240219cc:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
240219dc:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
240219ec:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
240219fc:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
24021a0c:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
24021a1c:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
24021a2c:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
24021a3c:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
24021a4c:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
24021a5c:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
24021a6c:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
24021a7c:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
24021a8c:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
24021a9c:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
24021aac:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
24021abc:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
24021acc:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
24021adc:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
24021aec:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
24021afc:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
24021b0c:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
24021b1c:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
24021b2c:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
24021b3c:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
24021b4c:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
24021b5c:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
24021b6c:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
24021b7c:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
24021b8c:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
24021b9c:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
24021bac:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
24021bbc:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
24021bcc:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
24021bdc:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
24021bec:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
24021bfc:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
24021c0c:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
24021c1c:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
24021c2c:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
24021c3c:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
24021c4c:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
24021c5c:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
24021c6c:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
24021c7c:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
24021c8c:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
24021c9c:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
24021cac:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
24021cbc:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
24021ccc:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
24021cdc:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
24021cec:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
24021cfc:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

24021d0c <__leaf_table_fir16XLow>:
24021d0c:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
24021d1c:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
24021d2c:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
24021d3c:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
24021d4c:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
24021d5c:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
24021d6c:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
24021d7c:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
24021d8c:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
24021d9c:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
24021dac:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
24021dbc:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
24021dcc:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
24021ddc:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
24021dec:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
24021dfc:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
24021e0c:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
24021e1c:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
24021e2c:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
24021e3c:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
24021e4c:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
24021e5c:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
24021e6c:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
24021e7c:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
24021e8c:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
24021e9c:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
24021eac:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
24021ebc:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
24021ecc:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
24021edc:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
24021eec:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
24021efc:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

24021f0c <__leaf_table_fir2XHigh>:
24021f0c:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
24021f1c:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
24021f2c:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
24021f3c:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
24021f4c:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
24021f5c:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
24021f6c:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
24021f7c:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
24021f8c:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
24021f9c:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
24021fac:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
24021fbc:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
24021fcc:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
24021fdc:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
24021fec:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
24021ffc:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
2402200c:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
2402201c:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
2402202c:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
2402203c:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
2402204c:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
2402205c:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
2402206c:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
2402207c:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
2402208c:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
2402209c:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
240220ac:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
240220bc:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
240220cc:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
240220dc:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
240220ec:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
240220fc:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

2402210c <__leaf_table_fir2XLow>:
2402210c:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2402211c:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2402212c:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2402213c:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2402214c:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2402215c:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2402216c:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2402217c:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2402218c <__leaf_table_fir32XHigh>:
2402218c:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
2402219c:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
240221ac:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
240221bc:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
240221cc:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
240221dc:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
240221ec:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
240221fc:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
2402220c:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
2402221c:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
2402222c:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
2402223c:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
2402224c:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
2402225c:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
2402226c:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
2402227c:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
2402228c:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
2402229c:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
240222ac:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
240222bc:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
240222cc:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
240222dc:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
240222ec:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
240222fc:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
2402230c:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
2402231c:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
2402232c:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
2402233c:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
2402234c:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
2402235c:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
2402236c:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
2402237c:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
2402238c:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
2402239c:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
240223ac:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
240223bc:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
240223cc:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
240223dc:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
240223ec:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
240223fc:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
2402240c:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
2402241c:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
2402242c:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
2402243c:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
2402244c:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
2402245c:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
2402246c:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
2402247c:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
2402248c:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
2402249c:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
240224ac:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
240224bc:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
240224cc:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
240224dc:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
240224ec:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
240224fc:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
2402250c:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
2402251c:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
2402252c:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
2402253c:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
2402254c:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
2402255c:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
2402256c:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
2402257c:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
2402258c:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
2402259c:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
240225ac:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
240225bc:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
240225cc:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
240225dc:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
240225ec:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
240225fc:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
2402260c:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
2402261c:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
2402262c:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
2402263c:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
2402264c:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
2402265c:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
2402266c:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
2402267c:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
2402268c:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
2402269c:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
240226ac:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
240226bc:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
240226cc:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
240226dc:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
240226ec:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
240226fc:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
2402270c:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
2402271c:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
2402272c:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
2402273c:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
2402274c:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
2402275c:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
2402276c:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
2402277c:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
2402278c:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
2402279c:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
240227ac:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
240227bc:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
240227cc:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
240227dc:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
240227ec:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
240227fc:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
2402280c:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
2402281c:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
2402282c:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
2402283c:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
2402284c:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
2402285c:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
2402286c:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
2402287c:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
2402288c:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
2402289c:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
240228ac:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
240228bc:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
240228cc:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
240228dc:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
240228ec:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
240228fc:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
2402290c:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
2402291c:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
2402292c:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
2402293c:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
2402294c:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
2402295c:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
2402296c:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
2402297c:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

2402298c <__leaf_table_fir32XLow>:
2402298c:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
2402299c:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
240229ac:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
240229bc:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
240229cc:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
240229dc:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
240229ec:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
240229fc:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
24022a0c:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
24022a1c:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
24022a2c:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
24022a3c:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
24022a4c:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
24022a5c:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
24022a6c:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
24022a7c:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
24022a8c:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
24022a9c:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
24022aac:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
24022abc:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
24022acc:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
24022adc:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
24022aec:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
24022afc:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
24022b0c:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
24022b1c:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
24022b2c:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
24022b3c:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
24022b4c:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
24022b5c:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
24022b6c:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
24022b7c:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
24022b8c:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
24022b9c:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
24022bac:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
24022bbc:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
24022bcc:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
24022bdc:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
24022bec:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
24022bfc:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
24022c0c:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
24022c1c:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
24022c2c:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
24022c3c:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
24022c4c:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
24022c5c:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
24022c6c:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
24022c7c:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
24022c8c:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
24022c9c:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
24022cac:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
24022cbc:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
24022ccc:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
24022cdc:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
24022cec:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
24022cfc:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
24022d0c:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
24022d1c:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
24022d2c:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
24022d3c:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
24022d4c:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
24022d5c:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
24022d6c:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
24022d7c:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

24022d8c <__leaf_table_fir4XHigh>:
24022d8c:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
24022d9c:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
24022dac:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
24022dbc:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
24022dcc:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
24022ddc:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
24022dec:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
24022dfc:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
24022e0c:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
24022e1c:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
24022e2c:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
24022e3c:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
24022e4c:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
24022e5c:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
24022e6c:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
24022e7c:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
24022e8c:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
24022e9c:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
24022eac:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
24022ebc:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
24022ecc:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
24022edc:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
24022eec:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
24022efc:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
24022f0c:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
24022f1c:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
24022f2c:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
24022f3c:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
24022f4c:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
24022f5c:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
24022f6c:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
24022f7c:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
24022f8c:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
24022f9c:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
24022fac:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
24022fbc:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
24022fcc:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
24022fdc:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
24022fec:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
24022ffc:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
2402300c:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
2402301c:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
2402302c:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
2402303c:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
2402304c:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
2402305c:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
2402306c:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
2402307c:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
2402308c:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
2402309c:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
240230ac:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
240230bc:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
240230cc:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
240230dc:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
240230ec:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
240230fc:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
2402310c:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
2402311c:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
2402312c:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
2402313c:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
2402314c:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
2402315c:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
2402316c:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
2402317c:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

2402318c <__leaf_table_fir4XLow>:
2402318c:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
2402319c:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
240231ac:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
240231bc:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
240231cc:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
240231dc:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
240231ec:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
240231fc:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
2402320c:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
2402321c:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
2402322c:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
2402323c:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
2402324c:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
2402325c:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
2402326c:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
2402327c:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

2402328c <__leaf_table_fir64XHigh>:
2402328c:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
2402329c:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
240232ac:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
240232bc:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
240232cc:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
240232dc:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
240232ec:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
240232fc:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
2402330c:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
2402331c:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
2402332c:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
2402333c:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
2402334c:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
2402335c:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
2402336c:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
2402337c:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
2402338c:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
2402339c:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
240233ac:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
240233bc:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
240233cc:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
240233dc:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
240233ec:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
240233fc:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
2402340c:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
2402341c:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
2402342c:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
2402343c:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
2402344c:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
2402345c:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
2402346c:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
2402347c:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
2402348c:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
2402349c:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
240234ac:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
240234bc:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
240234cc:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
240234dc:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
240234ec:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
240234fc:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
2402350c:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
2402351c:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
2402352c:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
2402353c:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
2402354c:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
2402355c:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
2402356c:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
2402357c:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
2402358c:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
2402359c:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
240235ac:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
240235bc:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
240235cc:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
240235dc:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
240235ec:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
240235fc:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
2402360c:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
2402361c:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
2402362c:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
2402363c:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
2402364c:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
2402365c:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
2402366c:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
2402367c:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
2402368c:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
2402369c:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
240236ac:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
240236bc:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
240236cc:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
240236dc:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
240236ec:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
240236fc:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
2402370c:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
2402371c:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
2402372c:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
2402373c:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
2402374c:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
2402375c:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
2402376c:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
2402377c:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
2402378c:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
2402379c:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
240237ac:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
240237bc:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
240237cc:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
240237dc:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
240237ec:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
240237fc:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
2402380c:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
2402381c:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
2402382c:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
2402383c:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
2402384c:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
2402385c:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
2402386c:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
2402387c:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
2402388c:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
2402389c:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
240238ac:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
240238bc:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
240238cc:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
240238dc:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
240238ec:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
240238fc:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
2402390c:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
2402391c:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
2402392c:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
2402393c:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
2402394c:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
2402395c:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
2402396c:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
2402397c:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
2402398c:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
2402399c:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
240239ac:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
240239bc:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
240239cc:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
240239dc:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
240239ec:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
240239fc:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
24023a0c:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
24023a1c:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
24023a2c:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
24023a3c:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
24023a4c:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
24023a5c:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
24023a6c:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
24023a7c:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
24023a8c:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
24023a9c:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
24023aac:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
24023abc:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
24023acc:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
24023adc:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
24023aec:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
24023afc:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
24023b0c:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
24023b1c:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
24023b2c:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
24023b3c:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
24023b4c:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
24023b5c:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
24023b6c:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
24023b7c:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
24023b8c:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
24023b9c:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
24023bac:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
24023bbc:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
24023bcc:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
24023bdc:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
24023bec:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
24023bfc:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
24023c0c:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
24023c1c:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
24023c2c:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
24023c3c:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
24023c4c:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
24023c5c:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
24023c6c:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
24023c7c:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
24023c8c:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
24023c9c:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
24023cac:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
24023cbc:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
24023ccc:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
24023cdc:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
24023cec:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
24023cfc:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
24023d0c:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
24023d1c:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
24023d2c:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
24023d3c:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
24023d4c:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
24023d5c:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
24023d6c:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
24023d7c:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
24023d8c:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
24023d9c:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
24023dac:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
24023dbc:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
24023dcc:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
24023ddc:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
24023dec:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
24023dfc:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
24023e0c:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
24023e1c:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
24023e2c:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
24023e3c:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
24023e4c:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
24023e5c:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
24023e6c:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
24023e7c:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
24023e8c:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
24023e9c:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
24023eac:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
24023ebc:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
24023ecc:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
24023edc:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
24023eec:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
24023efc:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
24023f0c:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
24023f1c:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
24023f2c:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
24023f3c:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
24023f4c:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
24023f5c:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
24023f6c:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
24023f7c:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
24023f8c:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
24023f9c:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
24023fac:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
24023fbc:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
24023fcc:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
24023fdc:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
24023fec:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
24023ffc:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
2402400c:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
2402401c:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
2402402c:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
2402403c:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
2402404c:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
2402405c:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
2402406c:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
2402407c:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
2402408c:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
2402409c:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
240240ac:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
240240bc:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
240240cc:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
240240dc:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
240240ec:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
240240fc:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
2402410c:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
2402411c:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
2402412c:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
2402413c:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
2402414c:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
2402415c:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
2402416c:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
2402417c:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
2402418c:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
2402419c:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
240241ac:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
240241bc:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
240241cc:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
240241dc:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
240241ec:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
240241fc:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
2402420c:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
2402421c:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
2402422c:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
2402423c:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
2402424c:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
2402425c:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
2402426c:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
2402427c:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

2402428c <__leaf_table_fir64XLow>:
2402428c:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
2402429c:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
240242ac:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
240242bc:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
240242cc:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
240242dc:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
240242ec:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
240242fc:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
2402430c:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
2402431c:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
2402432c:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
2402433c:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
2402434c:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
2402435c:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
2402436c:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
2402437c:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
2402438c:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
2402439c:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
240243ac:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
240243bc:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
240243cc:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
240243dc:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
240243ec:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
240243fc:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
2402440c:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
2402441c:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
2402442c:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
2402443c:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
2402444c:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
2402445c:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
2402446c:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
2402447c:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
2402448c:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
2402449c:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
240244ac:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
240244bc:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
240244cc:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
240244dc:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
240244ec:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
240244fc:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
2402450c:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
2402451c:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
2402452c:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
2402453c:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
2402454c:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
2402455c:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
2402456c:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
2402457c:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
2402458c:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
2402459c:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
240245ac:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
240245bc:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
240245cc:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
240245dc:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
240245ec:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
240245fc:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
2402460c:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
2402461c:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
2402462c:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
2402463c:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
2402464c:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
2402465c:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
2402466c:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
2402467c:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

2402468c <__leaf_table_fir8XHigh>:
2402468c:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
2402469c:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
240246ac:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
240246bc:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
240246cc:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
240246dc:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
240246ec:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
240246fc:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
2402470c:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
2402471c:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
2402472c:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
2402473c:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
2402474c:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
2402475c:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
2402476c:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
2402477c:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
2402478c:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
2402479c:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
240247ac:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
240247bc:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
240247cc:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
240247dc:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
240247ec:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
240247fc:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
2402480c:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
2402481c:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
2402482c:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
2402483c:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
2402484c:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
2402485c:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
2402486c:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
2402487c:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
2402488c:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
2402489c:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
240248ac:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
240248bc:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
240248cc:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
240248dc:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
240248ec:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
240248fc:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
2402490c:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
2402491c:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
2402492c:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
2402493c:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
2402494c:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
2402495c:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
2402496c:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
2402497c:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
2402498c:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
2402499c:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
240249ac:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
240249bc:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
240249cc:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
240249dc:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
240249ec:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
240249fc:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
24024a0c:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
24024a1c:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
24024a2c:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
24024a3c:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
24024a4c:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
24024a5c:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
24024a6c:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
24024a7c:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

24024a8c <__leaf_table_fir8XLow>:
24024a8c:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
24024a9c:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
24024aac:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
24024abc:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
24024acc:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
24024adc:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
24024aec:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
24024afc:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
24024b0c:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
24024b1c:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
24024b2c:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
24024b3c:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
24024b4c:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
24024b5c:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
24024b6c:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
24024b7c:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

24024b8c <__leaf_table_sinewave>:
24024b8c:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24024b9c:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
24024bac:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
24024bbc:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
24024bcc:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
24024bdc:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
24024bec:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
24024bfc:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
24024c0c:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
24024c1c:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
24024c2c:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
24024c3c:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
24024c4c:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24024c5c:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24024c6c:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24024c7c:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24024c8c:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24024c9c:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
24024cac:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
24024cbc:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
24024ccc:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
24024cdc:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
24024cec:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
24024cfc:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
24024d0c:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
24024d1c:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
24024d2c:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
24024d3c:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
24024d4c:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24024d5c:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24024d6c:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24024d7c:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24024d8c:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24024d9c:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
24024dac:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
24024dbc:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
24024dcc:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
24024ddc:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
24024dec:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
24024dfc:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
24024e0c:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
24024e1c:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
24024e2c:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
24024e3c:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
24024e4c:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24024e5c:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24024e6c:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24024e7c:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24024e8c:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24024e9c:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
24024eac:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
24024ebc:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
24024ecc:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
24024edc:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
24024eec:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
24024efc:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
24024f0c:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
24024f1c:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
24024f2c:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
24024f3c:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
24024f4c:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24024f5c:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24024f6c:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24024f7c:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24024f8c:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24024f9c:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
24024fac:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
24024fbc:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
24024fcc:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
24024fdc:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
24024fec:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
24024ffc:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2402500c:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2402501c:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2402502c:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2402503c:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2402504c:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2402505c:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2402506c:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2402507c:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2402508c:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2402509c:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
240250ac:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
240250bc:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
240250cc:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
240250dc:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
240250ec:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
240250fc:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2402510c:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2402511c:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2402512c:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2402513c:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2402514c:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2402515c:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2402516c:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2402517c:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2402518c:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2402519c:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
240251ac:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
240251bc:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
240251cc:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
240251dc:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
240251ec:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
240251fc:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2402520c:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2402521c:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2402522c:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2402523c:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2402524c:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2402525c:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2402526c:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2402527c:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2402528c:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2402529c:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
240252ac:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
240252bc:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
240252cc:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
240252dc:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
240252ec:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
240252fc:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2402530c:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2402531c:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2402532c:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2402533c:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2402534c:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2402535c:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2402536c:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2402537c:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2402538c:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2402539c:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
240253ac:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
240253bc:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
240253cc:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
240253dc:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
240253ec:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
240253fc:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2402540c:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2402541c:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2402542c:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2402543c:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2402544c:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2402545c:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2402546c:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2402547c:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2402548c:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2402549c:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
240254ac:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
240254bc:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
240254cc:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
240254dc:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
240254ec:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
240254fc:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2402550c:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2402551c:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2402552c:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2402553c:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2402554c:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2402555c:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2402556c:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2402557c:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2402558c:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2402559c:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
240255ac:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
240255bc:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
240255cc:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
240255dc:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
240255ec:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
240255fc:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2402560c:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2402561c:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2402562c:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2402563c:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2402564c:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2402565c:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2402566c:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2402567c:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2402568c:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2402569c:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
240256ac:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
240256bc:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
240256cc:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
240256dc:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
240256ec:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
240256fc:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2402570c:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2402571c:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2402572c:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2402573c:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2402574c:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2402575c:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2402576c:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2402577c:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2402578c:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2402579c:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
240257ac:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
240257bc:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
240257cc:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
240257dc:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
240257ec:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
240257fc:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2402580c:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2402581c:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2402582c:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2402583c:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2402584c:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2402585c:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2402586c:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2402587c:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2402588c:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2402589c:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
240258ac:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
240258bc:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
240258cc:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
240258dc:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
240258ec:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
240258fc:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2402590c:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2402591c:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2402592c:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2402593c:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2402594c:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2402595c:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2402596c:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2402597c:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2402598c:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2402599c:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
240259ac:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
240259bc:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
240259cc:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
240259dc:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
240259ec:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
240259fc:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
24025a0c:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
24025a1c:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
24025a2c:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
24025a3c:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24025a4c:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24025a5c:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24025a6c:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24025a7c:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24025a8c:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24025a9c:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
24025aac:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
24025abc:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
24025acc:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
24025adc:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
24025aec:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
24025afc:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
24025b0c:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
24025b1c:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
24025b2c:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
24025b3c:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
24025b4c:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24025b5c:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24025b6c:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24025b7c:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24025b8c:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24025b9c:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
24025bac:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
24025bbc:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
24025bcc:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
24025bdc:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
24025bec:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
24025bfc:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
24025c0c:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
24025c1c:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
24025c2c:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
24025c3c:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
24025c4c:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24025c5c:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24025c6c:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24025c7c:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24025c8c:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24025c9c:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
24025cac:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
24025cbc:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
24025ccc:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
24025cdc:	be827fa2 be84039b be858794 be870b8d     ................
24025cec:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
24025cfc:	be8e9b7c be901b86 be919f80 be931f8a     |...............
24025d0c:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
24025d1c:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
24025d2c:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
24025d3c:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
24025d4c:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24025d5c:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24025d6c:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24025d7c:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24025d8c:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24025d9c:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
24025dac:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
24025dbc:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
24025dcc:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
24025ddc:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
24025dec:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
24025dfc:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
24025e0c:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
24025e1c:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
24025e2c:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
24025e3c:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
24025e4c:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24025e5c:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24025e6c:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24025e7c:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24025e8c:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24025e9c:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
24025eac:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
24025ebc:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
24025ecc:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
24025edc:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
24025eec:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
24025efc:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
24025f0c:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
24025f1c:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
24025f2c:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
24025f3c:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
24025f4c:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24025f5c:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24025f6c:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24025f7c:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24025f8c:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24025f9c:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
24025fac:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
24025fbc:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
24025fcc:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
24025fdc:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
24025fec:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
24025ffc:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2402600c:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2402601c:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2402602c:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2402603c:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2402604c:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2402605c:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2402606c:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2402607c:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2402608c:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2402609c:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
240260ac:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
240260bc:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
240260cc:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
240260dc:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
240260ec:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
240260fc:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2402610c:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2402611c:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2402612c:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2402613c:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2402614c:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2402615c:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2402616c:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2402617c:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2402618c:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2402619c:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
240261ac:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
240261bc:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
240261cc:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
240261dc:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
240261ec:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
240261fc:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2402620c:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2402621c:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2402622c:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2402623c:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2402624c:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2402625c:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2402626c:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2402627c:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2402628c:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2402629c:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
240262ac:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
240262bc:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
240262cc:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
240262dc:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
240262ec:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
240262fc:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2402630c:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2402631c:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2402632c:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2402633c:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2402634c:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2402635c:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2402636c:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2402637c:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2402638c:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2402639c:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
240263ac:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
240263bc:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
240263cc:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
240263dc:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
240263ec:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
240263fc:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2402640c:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2402641c:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2402642c:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2402643c:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2402644c:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2402645c:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2402646c:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2402647c:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2402648c:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2402649c:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
240264ac:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
240264bc:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
240264cc:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
240264dc:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
240264ec:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
240264fc:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2402650c:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2402651c:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2402652c:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2402653c:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2402654c:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2402655c:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2402656c:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2402657c:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2402658c:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2402659c:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
240265ac:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
240265bc:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
240265cc:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
240265dc:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
240265ec:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
240265fc:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2402660c:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2402661c:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2402662c:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2402663c:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2402664c:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2402665c:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2402666c:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2402667c:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2402668c:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2402669c:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
240266ac:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
240266bc:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
240266cc:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
240266dc:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
240266ec:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
240266fc:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2402670c:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2402671c:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2402672c:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2402673c:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2402674c:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2402675c:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2402676c:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2402677c:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2402678c:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2402679c:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
240267ac:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
240267bc:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
240267cc:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
240267dc:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
240267ec:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
240267fc:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2402680c:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2402681c:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2402682c:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2402683c:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2402684c:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2402685c:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2402686c:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2402687c:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2402688c:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2402689c:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
240268ac:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
240268bc:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
240268cc:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
240268dc:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
240268ec:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
240268fc:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2402690c:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2402691c:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2402692c:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2402693c:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2402694c:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2402695c:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2402696c:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2402697c:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2402698c:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2402699c:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
240269ac:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
240269bc:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
240269cc:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
240269dc:	bea69058 bea5143c bea39820 bea21816     X...<... .......
240269ec:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
240269fc:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
24026a0c:	be949f95 be931f8a be919f80 be901b86     ................
24026a1c:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
24026a2c:	be888f86 be870b8d be858794 be84039b     ................
24026a3c:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
24026a4c:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
24026a5c:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
24026a6c:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
24026a7c:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
24026a8c:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
24026a9c:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
24026aac:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
24026abc:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
24026acc:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
24026adc:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
24026aec:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
24026afc:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
24026b0c:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
24026b1c:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
24026b2c:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
24026b3c:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
24026b4c:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
24026b5c:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
24026b6c:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
24026b7c:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

24026b8c <__leaf_tablesize_firNumTaps>:
24026b8c:	42000000 42800000 42800000 43000000     ...B...B...B...C
24026b9c:	43800000 43800000 43000000 43800000     ...C...C...C...C
24026bac:	43800000 44000000 44000000 44800000     ...C...D...D...D
	...

24026c0c <slope_dd_table>:
	...
24026ca8:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
24026cb8:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
24026cc8:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
24026cd8:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
24026ce8:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
24026cf8:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
24026d08:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
24026d18:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
24026d28:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
24026d38:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
24026d48:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
24026d58:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
24026d68:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
24026d78:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
24026d88:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
24026d98:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
24026da8:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
24026db8:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
24026dc8:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
24026dd8:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
24026de8:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
24026df8:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
24026e08:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
24026e18:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
24026e28:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
24026e38:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
24026e48:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
24026e58:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
24026e68:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
24026e78:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
24026e88:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
24026e98:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
24026ea8:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
24026eb8:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
24026ec8:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
24026ed8:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
24026ee8:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
24026ef8:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
24026f08:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
24026f18:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
24026f28:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
24026f38:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
24026f48:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
24026f58:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
24026f68:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
24026f78:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
24026f88:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
24026f98:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
24026fa8:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
24026fb8:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
24026fc8:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
24026fd8:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
24026fe8:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
24026ff8:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
24027008:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
24027018:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
24027028:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
24027038:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
24027048:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
24027058:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
24027068:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
24027078:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
24027088:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
24027098:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
240270a8:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
240270b8:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
240270c8:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
240270d8:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
240270e8:	be0eae12 be10148d be1152be be1268fb     .........R...h..
240270f8:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
24027108:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
24027118:	be15718f be15109e be148cff be13e73e     .q..........>...
24027128:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
24027138:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
24027148:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
24027158:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
24027168:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
24027178:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
24027188:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
24027198:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
240271a8:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
240271b8:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
240271c8:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
240271d8:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
240271e8:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
240271f8:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
24027208:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
24027218:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
24027228:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
24027238:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
24027248:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
24027258:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
24027268:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
24027278:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
24027288:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
24027298:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
240272a8:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
240272b8:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
240272c8:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
240272d8:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
240272e8:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
240272f8:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
24027308:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
24027318:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
24027328:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
24027338:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
24027348:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
24027358:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
24027368:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
24027378:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
24027388:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
24027398:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
240273a8:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
240273b8:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
240273c8:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
240273d8:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
240273e8:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
240273f8:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
24027408:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
24027418:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
24027428:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
24027438:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
24027448:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
24027458:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
24027468:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
24027478:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
24027488:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
24027498:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
240274a8:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
240274b8:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
240274c8:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
240274d8:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
240274e8:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
240274f8:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
24027508:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
24027518:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
24027528:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
24027538:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
24027548:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
24027558:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
24027568:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
24027578:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
24027588:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
24027598:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
240275a8:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
240275b8:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
240275c8:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
240275d8:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
240275e8:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
240275f8:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
24027608:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
24027618:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
24027628:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
24027638:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
24027648:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
24027658:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
24027668:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
24027678:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
24027688:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
24027698:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
240276a8:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
240276b8:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
240276c8:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
240276d8:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
240276e8:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
240276f8:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
24027708:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
24027718:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
24027728:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
24027738:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
24027748:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
24027758:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
24027768:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
24027778:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
24027788:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
24027798:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
240277a8:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
240277b8:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
240277c8:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
240277d8:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
240277e8:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
240277f8:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
24027808:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
24027818:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
24027828:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
24027838:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
24027848:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
24027858:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
24027868:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
24027878:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
24027888:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
24027898:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
240278a8:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
240278b8:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
240278c8:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
240278d8:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
240278e8:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
240278f8:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
24027908:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
24027918:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
24027928:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
24027938:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
24027948:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
24027958:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
24027968:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
24027978:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
24027988:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
24027998:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
240279a8:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
240279b8:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
240279c8:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
240279d8:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
240279e8:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
240279f8:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
24027a08:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
24027a18:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
24027a28:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
24027a38:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
24027a48:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
24027a58:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
24027a68:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
24027a78:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
24027a88:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
24027a98:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
24027aa8:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
24027ab8:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
24027ac8:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
24027ad8:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
24027ae8:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
24027af8:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
24027b08:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
24027b18:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
24027b28:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
24027b38:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
24027b48:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
24027b58:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
24027b68:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
24027b78:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
24027b88:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
24027b98:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
24027ba8:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
24027bb8:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
24027bc8:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
24027bd8:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
24027be8:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
24027bf8:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
24027c08:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
24027c18:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
24027c28:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
24027c38:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
24027c48:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
24027c58:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
24027c68:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
24027c78:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
24027c88:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
24027c98:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
24027ca8:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
24027cb8:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
24027cc8:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
24027cd8:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
24027ce8:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
24027cf8:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
24027d08:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
24027d18:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
24027d28:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
24027d38:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
24027d48:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
24027d58:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
24027d68:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
24027d78:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
24027d88:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
24027d98:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
24027da8:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
24027db8:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
24027dc8:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
24027dd8:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
24027de8:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
24027df8:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
24027e08:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
24027e18:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
24027e28:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
24027e38:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
24027e48:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
24027e58:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
24027e68:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
24027e78:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
24027e88:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
24027e98:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
24027ea8:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
24027eb8:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
24027ec8:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
24027ed8:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
24027ee8:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
24027ef8:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
24027f08:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
24027f18:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
24027f28:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
24027f38:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
24027f48:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
24027f58:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
24027f68:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
24027f78:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
24027f88:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
24027f98:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
24027fa8:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
24027fb8:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
24027fc8:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
24027fd8:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
24027fe8:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
24027ff8:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
24028008:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
24028018:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
24028028:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
24028038:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
24028048:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
24028058:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
24028068:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
24028078:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
24028088:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
24028098:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
240280a8:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
240280b8:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
240280c8:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
240280d8:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
240280e8:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
240280f8:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
24028108:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
24028118:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
24028128:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
24028138:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
24028148:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
24028158:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
24028168:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
24028178:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
24028188:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
24028198:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
240281a8:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
240281b8:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
240281c8:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
240281d8:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
240281e8:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
240281f8:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
24028208:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
24028218:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
24028228:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
24028238:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
24028248:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
24028258:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
24028268:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
24028278:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
24028288:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
24028298:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
240282a8:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
240282b8:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
240282c8:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
240282d8:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
240282e8:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
240282f8:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
24028308:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
24028318:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
24028328:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
24028338:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
24028348:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
24028358:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
24028368:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
24028378:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
24028388:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
24028398:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
240283a8:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
240283b8:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
240283c8:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
240283d8:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
240283e8:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
240283f8:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
24028408:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
24028418:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
24028428:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
24028438:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
24028448:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
24028458:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
24028468:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
24028478:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
24028488:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
24028498:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
240284a8:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
240284b8:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
240284c8:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
240284d8:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
240284e8:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
240284f8:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
24028508:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
24028518:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
24028528:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
24028538:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
24028548:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
24028558:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
24028568:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
24028578:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
24028588:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
24028598:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
240285a8:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
240285b8:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
240285c8:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
240285d8:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
240285e8:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
240285f8:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
24028608:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
24028618:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
24028628:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
24028638:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
24028648:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
24028658:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
24028668:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
24028678:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
24028688:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
24028698:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
240286a8:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
240286b8:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
240286c8:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
240286d8:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
240286e8:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
240286f8:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
24028708:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
24028718:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
24028728:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
24028738:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
24028748:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
24028758:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
24028768:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
24028778:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
24028788:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
24028798:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
240287a8:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
240287b8:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
240287c8:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
240287d8:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
240287e8:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
240287f8:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
24028808:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
24028818:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
24028828:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
24028838:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
24028848:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
24028858:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
24028868:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
24028878:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
24028888:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
24028898:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
240288a8:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
240288b8:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
240288c8:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
240288d8:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
240288e8:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
240288f8:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
24028908:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
24028918:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
24028928:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
24028938:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
24028948:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
24028958:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
24028968:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
24028978:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
24028988:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
24028998:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
240289a8:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
240289b8:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
240289c8:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
240289d8:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
240289e8:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
240289f8:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
24028a08:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
24028a18:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
24028a28:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
24028a38:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
24028a48:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
24028a58:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
24028a68:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
24028a78:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
24028a88:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
24028a98:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
24028aa8:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
24028ab8:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
24028ac8:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
24028ad8:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
24028ae8:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
24028af8:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
24028b08:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
24028b18:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
24028b28:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
24028b38:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
24028b48:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
24028b58:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
24028b68:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
24028b78:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
24028b88:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
24028b98:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
24028ba8:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
24028bb8:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
24028bc8:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
24028bd8:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
24028be8:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
24028bf8:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
24028c08:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
24028c18:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
24028c28:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
24028c38:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
24028c48:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
24028c58:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
24028c68:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
24028c78:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
24028c88:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
24028c98:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
24028ca8:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
24028cb8:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24028cc8:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24028cd8:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24028ce8:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
24028cf8:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
24028d08:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
24028d18:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
24028d28:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
24028d38:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
24028d48:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
24028d58:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
24028d68:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
24028d78:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
24028d88:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
24028d98:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
24028da8:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
24028db8:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24028dc8:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24028dd8:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24028de8:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
24028df8:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
24028e08:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
24028e18:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
24028e28:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
24028e38:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
24028e48:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
24028e58:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
24028e68:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
24028e78:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
24028e88:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
24028e98:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
24028ea8:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
24028eb8:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24028ec8:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24028ed8:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24028ee8:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
24028ef8:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
24028f08:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
24028f18:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
24028f28:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
24028f38:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
24028f48:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
24028f58:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
24028f68:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
24028f78:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
24028f88:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
24028f98:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
24028fa8:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
24028fb8:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24028fc8:	babf16bd babb96cd bab7bd01 bab38bab     ................
24028fd8:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24028fe8:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
24028ff8:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
24029008:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
24029018:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
24029028:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
24029038:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
24029048:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
24029058:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24029068:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24029078:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24029088:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24029098:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
240290a8:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
240290b8:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
240290c8:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
240290d8:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
240290e8:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
240290f8:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
24029108:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
24029118:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
24029128:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
24029138:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
24029148:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
24029158:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
24029168:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
24029178:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
24029188:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
24029198:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
240291a8:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
240291b8:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
240291c8:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
240291d8:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
240291e8:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
240291f8:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24029208:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
24029218:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
24029228:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
24029238:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
24029248:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24029258:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
24029268:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
24029278:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
24029288:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
24029298:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
240292a8:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
240292b8:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
240292c8:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
240292d8:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
240292e8:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
240292f8:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
24029308:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
24029318:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
24029328:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
24029338:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
24029348:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24029358:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
24029368:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
24029378:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
24029388:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
24029398:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
240293a8:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
240293b8:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
240293c8:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
240293d8:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
240293e8:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
240293f8:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
24029408:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
24029418:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
24029428:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
24029438:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
24029448:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24029458:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
24029468:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
24029478:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
24029488:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
24029498:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
240294a8:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
240294b8:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
240294c8:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
240294d8:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
240294e8:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
240294f8:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24029508:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24029518:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24029528:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24029538:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24029548:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24029558:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
24029568:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
24029578:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
24029588:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
24029598:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
240295a8:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
240295b8:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
240295c8:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
240295d8:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
240295e8:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
240295f8:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24029608:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24029618:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24029628:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24029638:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24029648:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24029658:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
24029668:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
24029678:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
24029688:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
24029698:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
240296a8:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
240296b8:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
240296c8:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
240296d8:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
240296e8:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
240296f8:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24029708:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24029718:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24029728:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24029738:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24029748:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24029758:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
24029768:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
24029778:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
24029788:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
24029798:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
240297a8:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
240297b8:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
240297c8:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
240297d8:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
240297e8:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
240297f8:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
24029808:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
24029818:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
24029828:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
24029838:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
24029848:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
24029858:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
24029868:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
24029878:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
24029888:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
24029898:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
240298a8:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
240298b8:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
240298c8:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
240298d8:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
240298e8:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
240298f8:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
24029908:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
24029918:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
24029928:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
24029938:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
24029948:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
24029958:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
24029968:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
24029978:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
24029988:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
24029998:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
240299a8:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
240299b8:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
240299c8:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
240299d8:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
240299e8:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
240299f8:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
24029a08:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
24029a18:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
24029a28:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
24029a38:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
24029a48:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
24029a58:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
24029a68:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
24029a78:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
24029a88:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
24029a98:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
24029aa8:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
24029ab8:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
24029ac8:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
24029ad8:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
24029ae8:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
24029af8:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
24029b08:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
24029b18:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
24029b28:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
24029b38:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
24029b48:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
24029b58:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
24029b68:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
24029b78:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
24029b88:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
24029b98:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
24029ba8:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
24029bb8:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
24029bc8:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
24029bd8:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
24029be8:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
24029bf8:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
24029c08:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
24029c18:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
24029c28:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
24029c38:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
24029c48:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24029c58:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24029c68:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24029c78:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24029c88:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24029c98:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24029ca8:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24029cb8:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24029cc8:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24029cd8:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24029ce8:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24029cf8:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
24029d08:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
24029d18:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
24029d28:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
24029d38:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
24029d48:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24029d58:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24029d68:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24029d78:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24029d88:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24029d98:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24029da8:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24029db8:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24029dc8:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24029dd8:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24029de8:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24029df8:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
24029e08:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
24029e18:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
24029e28:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
24029e38:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
24029e48:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24029e58:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24029e68:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24029e78:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24029e88:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24029e98:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24029ea8:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24029eb8:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24029ec8:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24029ed8:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24029ee8:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24029ef8:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
24029f08:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
24029f18:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
24029f28:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
24029f38:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
24029f48:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24029f58:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24029f68:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24029f78:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24029f88:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24029f98:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24029fa8:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24029fb8:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24029fc8:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24029fd8:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24029fe8:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24029ff8:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
2402a008:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
2402a018:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
2402a028:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
2402a038:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
2402a048:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
2402a058:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
2402a068:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
2402a078:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
2402a088:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
2402a098:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
2402a0a8:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
2402a0b8:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
2402a0c8:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
2402a0d8:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
2402a0e8:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
2402a0f8:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
2402a108:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
2402a118:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
2402a128:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
2402a138:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
2402a148:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
2402a158:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
2402a168:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
2402a178:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
2402a188:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
2402a198:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
2402a1a8:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
2402a1b8:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
2402a1c8:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
2402a1d8:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
2402a1e8:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
2402a1f8:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
2402a208:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
2402a218:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
2402a228:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
2402a238:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
2402a248:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
2402a258:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
2402a268:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
2402a278:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
2402a288:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
2402a298:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
2402a2a8:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
2402a2b8:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
2402a2c8:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
2402a2d8:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
2402a2e8:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
2402a2f8:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
2402a308:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
2402a318:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
2402a328:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
2402a338:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
2402a348:	b808d82b b80a8abf b80befed b80d078a     +...............
2402a358:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
2402a368:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
2402a378:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
2402a388:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
2402a398:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
2402a3a8:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
2402a3b8:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
2402a3c8:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
2402a3d8:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
2402a3e8:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
2402a3f8:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
2402a408:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
2402a418:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
2402a428:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
2402a438:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
2402a448:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
2402a458:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
2402a468:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
2402a478:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
2402a488:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
2402a498:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
2402a4a8:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
2402a4b8:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
2402a4c8:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
2402a4d8:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
2402a4e8:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
2402a4f8:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
2402a508:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
2402a518:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
2402a528:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
2402a538:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
2402a548:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
2402a558:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
2402a568:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
2402a578:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
2402a588:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
2402a598:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
2402a5a8:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
2402a5b8:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
2402a5c8:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
2402a5d8:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
2402a5e8:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
2402a5f8:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
2402a608:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
2402a618:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
2402a628:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
2402a638:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
2402a648:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
2402a658:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
2402a668:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
2402a678:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
2402a688:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
2402a698:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
2402a6a8:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
2402a6b8:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
2402a6c8:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
2402a6d8:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
2402a6e8:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
2402a6f8:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
2402a708:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
2402a718:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
2402a728:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
2402a738:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
2402a748:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
2402a758:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
2402a768:	b7087574 b70df990 b713221d b717ed03     tu......."......
2402a778:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
2402a788:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
2402a798:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
2402a7a8:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
2402a7b8:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
2402a7c8:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
2402a7d8:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
2402a7e8:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
2402a7f8:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
2402a808:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
2402a818:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
2402a828:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
2402a838:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
2402a848:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
2402a858:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
2402a868:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
2402a878:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
2402a888:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
2402a898:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
2402a8a8:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
2402a8b8:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
2402a8c8:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
2402a8d8:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
2402a8e8:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
2402a8f8:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
2402a908:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
2402a918:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
2402a928:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
2402a938:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
2402a948:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
2402a958:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
2402a968:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
2402a978:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
2402a988:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
2402a998:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
2402a9a8:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
2402a9b8:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
2402a9c8:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
2402a9d8:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
2402a9e8:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
2402a9f8:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
2402aa08:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
2402aa18:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
2402aa28:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
2402aa38:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
2402aa48:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
2402aa58:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
2402aa68:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
2402aa78:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
2402aa88:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
2402aa98:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
2402aaa8:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
2402aab8:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
2402aac8:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
2402aad8:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
2402aae8:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
2402aaf8:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
2402ab08:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
2402ab18:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
2402ab28:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
2402ab38:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
2402ab48:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
2402ab58:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
2402ab68:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
2402ab78:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
2402ab88:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
2402ab98:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
2402aba8:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
2402abb8:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
2402abc8:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
2402abd8:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
2402abe8:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
2402abf8:	b610f5d3 b60be886 b60694c9 b600fec9     ................
2402ac08:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
2402ac18:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
2402ac28:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
2402ac38:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
2402ac48:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
2402ac58:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
2402ac68:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
2402ac78:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
2402ac88:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
2402ac98:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
2402aca8:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
2402acb8:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
2402acc8:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
2402acd8:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
2402ace8:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
2402acf8:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
2402ad08:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
2402ad18:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
2402ad28:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
2402ad38:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
2402ad48:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
2402ad58:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
2402ad68:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
2402ad78:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
2402ad88:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
2402ad98:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
2402ada8:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
2402adb8:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
2402adc8:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
2402add8:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
2402ade8:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
2402adf8:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
2402ae08:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
2402ae18:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
2402ae28:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
2402ae38:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
2402ae48:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
2402ae58:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
2402ae68:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
2402ae78:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
2402ae88:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
2402ae98:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
2402aea8:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
2402aeb8:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
2402aec8:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
2402aed8:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
2402aee8:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
2402aef8:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
2402af08:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
2402af18:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
2402af28:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
2402af38:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
2402af48:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
2402af58:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
2402af68:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
2402af78:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
2402af88:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
2402af98:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
2402afa8:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
2402afb8:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
2402afc8:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
2402afd8:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
2402afe8:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
2402aff8:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
2402b008:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
2402b018:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
2402b028:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
2402b038:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
2402b048:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
2402b058:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
2402b068:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
2402b078:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
2402b088:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
2402b098:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
2402b0a8:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
2402b0b8:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
2402b0c8:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
2402b0d8:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
2402b0e8:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
2402b0f8:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
2402b108:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
2402b118:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
2402b128:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
2402b138:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
2402b148:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
2402b158:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
2402b168:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
2402b178:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
2402b188:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
2402b198:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
2402b1a8:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
2402b1b8:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
2402b1c8:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
2402b1d8:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
2402b1e8:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
2402b1f8:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
2402b208:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
2402b218:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
2402b228:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
2402b238:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
2402b248:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
2402b258:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
2402b268:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
2402b278:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
2402b288:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

2402b310 <step_dd_table>:
	...
2402b444:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
2402b454:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
2402b464:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
2402b474:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
2402b484:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
2402b494:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
2402b4a4:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
2402b4b4:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
2402b4c4:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
2402b4d4:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
2402b4e4:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
2402b4f4:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
2402b504:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
2402b514:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
2402b524:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
2402b534:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
2402b544:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
2402b554:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
2402b564:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
2402b574:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
2402b584:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
2402b594:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
2402b5a4:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
2402b5b4:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
2402b5c4:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
2402b5d4:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
2402b5e4:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
2402b5f4:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
2402b604:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
2402b614:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
2402b624:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
2402b634:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
2402b644:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
2402b654:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
2402b664:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
2402b674:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
2402b684:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
2402b694:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
2402b6a4:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
2402b6b4:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
2402b6c4:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
2402b6d4:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
2402b6e4:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
2402b6f4:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
2402b704:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
2402b714:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
2402b724:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
2402b734:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
2402b744:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
2402b754:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
2402b764:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
2402b774:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
2402b784:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
2402b794:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
2402b7a4:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
2402b7b4:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
2402b7c4:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
2402b7d4:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
2402b7e4:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
2402b7f4:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
2402b804:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
2402b814:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
2402b824:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
2402b834:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
2402b844:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
2402b854:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
2402b864:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
2402b874:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
2402b884:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
2402b894:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
2402b8a4:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
2402b8b4:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
2402b8c4:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
2402b8d4:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
2402b8e4:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
2402b8f4:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
2402b904:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
2402b914:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
2402b924:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
2402b934:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
2402b944:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
2402b954:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
2402b964:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
2402b974:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
2402b984:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
2402b994:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
2402b9a4:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
2402b9b4:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
2402b9c4:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
2402b9d4:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
2402b9e4:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
2402b9f4:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
2402ba04:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
2402ba14:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
2402ba24:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
2402ba34:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
2402ba44:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
2402ba54:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
2402ba64:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
2402ba74:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
2402ba84:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
2402ba94:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
2402baa4:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
2402bab4:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
2402bac4:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
2402bad4:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
2402bae4:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
2402baf4:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
2402bb04:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
2402bb14:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
2402bb24:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
2402bb34:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
2402bb44:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
2402bb54:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
2402bb64:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
2402bb74:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
2402bb84:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
2402bb94:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
2402bba4:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
2402bbb4:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
2402bbc4:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
2402bbd4:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
2402bbe4:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
2402bbf4:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
2402bc04:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
2402bc14:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
2402bc24:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
2402bc34:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
2402bc44:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
2402bc54:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
2402bc64:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
2402bc74:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
2402bc84:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
2402bc94:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
2402bca4:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
2402bcb4:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
2402bcc4:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
2402bcd4:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
2402bce4:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
2402bcf4:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
2402bd04:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
2402bd14:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
2402bd24:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
2402bd34:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
2402bd44:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
2402bd54:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
2402bd64:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
2402bd74:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
2402bd84:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
2402bd94:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
2402bda4:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
2402bdb4:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
2402bdc4:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
2402bdd4:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
2402bde4:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
2402bdf4:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
2402be04:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
2402be14:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
2402be24:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
2402be34:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
2402be44:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
2402be54:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
2402be64:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
2402be74:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
2402be84:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
2402be94:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
2402bea4:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
2402beb4:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
2402bec4:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
2402bed4:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
2402bee4:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
2402bef4:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
2402bf04:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
2402bf14:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
2402bf24:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
2402bf34:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
2402bf44:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
2402bf54:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
2402bf64:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
2402bf74:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
2402bf84:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
2402bf94:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
2402bfa4:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
2402bfb4:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
2402bfc4:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
2402bfd4:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
2402bfe4:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
2402bff4:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
2402c004:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
2402c014:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
2402c024:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
2402c034:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
2402c044:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
2402c054:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
2402c064:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
2402c074:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
2402c084:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
2402c094:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
2402c0a4:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
2402c0b4:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
2402c0c4:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
2402c0d4:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
2402c0e4:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
2402c0f4:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
2402c104:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
2402c114:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
2402c124:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
2402c134:	bae718f6 be02f380 bad0894d be049492     ........M.......
2402c144:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
2402c154:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
2402c164:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
2402c174:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
2402c184:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
2402c194:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
2402c1a4:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
2402c1b4:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
2402c1c4:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
2402c1d4:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
2402c1e4:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
2402c1f4:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
2402c204:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
2402c214:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
2402c224:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
2402c234:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
2402c244:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
2402c254:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
2402c264:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
2402c274:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
2402c284:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
2402c294:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
2402c2a4:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
2402c2b4:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
2402c2c4:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
2402c2d4:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
2402c2e4:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
2402c2f4:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
2402c304:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
2402c314:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
2402c324:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
2402c334:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
2402c344:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
2402c354:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
2402c364:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
2402c374:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
2402c384:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
2402c394:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
2402c3a4:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
2402c3b4:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
2402c3c4:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
2402c3d4:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
2402c3e4:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
2402c3f4:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
2402c404:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
2402c414:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
2402c424:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
2402c434:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
2402c444:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
2402c454:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
2402c464:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
2402c474:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
2402c484:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
2402c494:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
2402c4a4:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
2402c4b4:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
2402c4c4:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
2402c4d4:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
2402c4e4:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
2402c4f4:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
2402c504:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
2402c514:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
2402c524:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
2402c534:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
2402c544:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
2402c554:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
2402c564:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
2402c574:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
2402c584:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
2402c594:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
2402c5a4:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
2402c5b4:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
2402c5c4:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
2402c5d4:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
2402c5e4:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
2402c5f4:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
2402c604:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
2402c614:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
2402c624:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
2402c634:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
2402c644:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
2402c654:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
2402c664:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
2402c674:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
2402c684:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
2402c694:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
2402c6a4:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
2402c6b4:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
2402c6c4:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
2402c6d4:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
2402c6e4:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
2402c6f4:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
2402c704:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
2402c714:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
2402c724:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
2402c734:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
2402c744:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
2402c754:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
2402c764:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
2402c774:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
2402c784:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
2402c794:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
2402c7a4:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
2402c7b4:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
2402c7c4:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
2402c7d4:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
2402c7e4:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
2402c7f4:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
2402c804:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
2402c814:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
2402c824:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
2402c834:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
2402c844:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
2402c854:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
2402c864:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
2402c874:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
2402c884:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
2402c894:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
2402c8a4:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
2402c8b4:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
2402c8c4:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
2402c8d4:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
2402c8e4:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
2402c8f4:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
2402c904:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
2402c914:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
2402c924:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
2402c934:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
2402c944:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
2402c954:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
2402c964:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
2402c974:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
2402c984:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
2402c994:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
2402c9a4:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
2402c9b4:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
2402c9c4:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
2402c9d4:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
2402c9e4:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
2402c9f4:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
2402ca04:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
2402ca14:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
2402ca24:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
2402ca34:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
2402ca44:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
2402ca54:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
2402ca64:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
2402ca74:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
2402ca84:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
2402ca94:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
2402caa4:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
2402cab4:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
2402cac4:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
2402cad4:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
2402cae4:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
2402caf4:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
2402cb04:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
2402cb14:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
2402cb24:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
2402cb34:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
2402cb44:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
2402cb54:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
2402cb64:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
2402cb74:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
2402cb84:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
2402cb94:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
2402cba4:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
2402cbb4:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
2402cbc4:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
2402cbd4:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
2402cbe4:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
2402cbf4:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
2402cc04:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
2402cc14:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
2402cc24:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
2402cc34:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
2402cc44:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
2402cc54:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
2402cc64:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
2402cc74:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
2402cc84:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
2402cc94:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
2402cca4:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
2402ccb4:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
2402ccc4:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
2402ccd4:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
2402cce4:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
2402ccf4:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
2402cd04:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
2402cd14:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
2402cd24:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
2402cd34:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
2402cd44:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
2402cd54:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
2402cd64:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
2402cd74:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
2402cd84:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
2402cd94:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
2402cda4:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
2402cdb4:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
2402cdc4:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
2402cdd4:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
2402cde4:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
2402cdf4:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
2402ce04:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
2402ce14:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
2402ce24:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
2402ce34:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
2402ce44:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
2402ce54:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
2402ce64:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
2402ce74:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
2402ce84:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
2402ce94:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
2402cea4:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
2402ceb4:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
2402cec4:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
2402ced4:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
2402cee4:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
2402cef4:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
2402cf04:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
2402cf14:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
2402cf24:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
2402cf34:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
2402cf44:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
2402cf54:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
2402cf64:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
2402cf74:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
2402cf84:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
2402cf94:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
2402cfa4:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
2402cfb4:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
2402cfc4:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
2402cfd4:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
2402cfe4:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
2402cff4:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
2402d004:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
2402d014:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
2402d024:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
2402d034:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
2402d044:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
2402d054:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
2402d064:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
2402d074:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
2402d084:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
2402d094:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
2402d0a4:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
2402d0b4:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
2402d0c4:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
2402d0d4:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
2402d0e4:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
2402d0f4:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
2402d104:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
2402d114:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
2402d124:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
2402d134:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
2402d144:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
2402d154:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
2402d164:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
2402d174:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
2402d184:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
2402d194:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
2402d1a4:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
2402d1b4:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
2402d1c4:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
2402d1d4:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
2402d1e4:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
2402d1f4:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
2402d204:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
2402d214:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
2402d224:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
2402d234:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
2402d244:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
2402d254:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
2402d264:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
2402d274:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
2402d284:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
2402d294:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
2402d2a4:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
2402d2b4:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
2402d2c4:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
2402d2d4:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
2402d2e4:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
2402d2f4:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
2402d304:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
2402d314:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
2402d324:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
2402d334:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
2402d344:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
2402d354:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
2402d364:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
2402d374:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
2402d384:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
2402d394:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
2402d3a4:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
2402d3b4:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
2402d3c4:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
2402d3d4:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
2402d3e4:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
2402d3f4:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
2402d404:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
2402d414:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
2402d424:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
2402d434:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
2402d444:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
2402d454:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
2402d464:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
2402d474:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
2402d484:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
2402d494:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
2402d4a4:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
2402d4b4:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
2402d4c4:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
2402d4d4:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
2402d4e4:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
2402d4f4:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
2402d504:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
2402d514:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
2402d524:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
2402d534:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
2402d544:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
2402d554:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
2402d564:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
2402d574:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
2402d584:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
2402d594:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
2402d5a4:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
2402d5b4:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
2402d5c4:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
2402d5d4:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
2402d5e4:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
2402d5f4:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
2402d604:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
2402d614:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
2402d624:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
2402d634:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
2402d644:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
2402d654:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
2402d664:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
2402d674:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
2402d684:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
2402d694:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
2402d6a4:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
2402d6b4:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
2402d6c4:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
2402d6d4:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
2402d6e4:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
2402d6f4:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
2402d704:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
2402d714:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
2402d724:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
2402d734:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
2402d744:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
2402d754:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
2402d764:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
2402d774:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
2402d784:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
2402d794:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
2402d7a4:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
2402d7b4:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
2402d7c4:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
2402d7d4:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
2402d7e4:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
2402d7f4:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
2402d804:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
2402d814:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
2402d824:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
2402d834:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
2402d844:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
2402d854:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
2402d864:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
2402d874:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
2402d884:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
2402d894:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
2402d8a4:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
2402d8b4:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
2402d8c4:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
2402d8d4:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
2402d8e4:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
2402d8f4:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
2402d904:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
2402d914:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
2402d924:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
2402d934:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
2402d944:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
2402d954:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
2402d964:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
2402d974:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
2402d984:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
2402d994:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
2402d9a4:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
2402d9b4:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
2402d9c4:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
2402d9d4:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
2402d9e4:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
2402d9f4:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
2402da04:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
2402da14:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
2402da24:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
2402da34:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
2402da44:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
2402da54:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
2402da64:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
2402da74:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
2402da84:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
2402da94:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
2402daa4:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
2402dab4:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
2402dac4:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
2402dad4:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
2402dae4:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
2402daf4:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
2402db04:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
2402db14:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
2402db24:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
2402db34:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
2402db44:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
2402db54:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
2402db64:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
2402db74:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
2402db84:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
2402db94:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
2402dba4:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
2402dbb4:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
2402dbc4:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
2402dbd4:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
2402dbe4:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
2402dbf4:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
2402dc04:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
2402dc14:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
2402dc24:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
2402dc34:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
2402dc44:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
2402dc54:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
2402dc64:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
2402dc74:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
2402dc84:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
2402dc94:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
2402dca4:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
2402dcb4:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
2402dcc4:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
2402dcd4:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
2402dce4:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
2402dcf4:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
2402dd04:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
2402dd14:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
2402dd24:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
2402dd34:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
2402dd44:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
2402dd54:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
2402dd64:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
2402dd74:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
2402dd84:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
2402dd94:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
2402dda4:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
2402ddb4:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
2402ddc4:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
2402ddd4:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
2402dde4:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
2402ddf4:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
2402de04:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
2402de14:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
2402de24:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
2402de34:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
2402de44:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
2402de54:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
2402de64:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
2402de74:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
2402de84:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
2402de94:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
2402dea4:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
2402deb4:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
2402dec4:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
2402ded4:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
2402dee4:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
2402def4:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
2402df04:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
2402df14:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
2402df24:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
2402df34:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
2402df44:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
2402df54:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
2402df64:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
2402df74:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
2402df84:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
2402df94:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
2402dfa4:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
2402dfb4:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
2402dfc4:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
2402dfd4:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
2402dfe4:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
2402dff4:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
2402e004:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
2402e014:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
2402e024:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
2402e034:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
2402e044:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
2402e054:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
2402e064:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
2402e074:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
2402e084:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
2402e094:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
2402e0a4:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
2402e0b4:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
2402e0c4:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
2402e0d4:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
2402e0e4:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
2402e0f4:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
2402e104:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
2402e114:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
2402e124:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
2402e134:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
2402e144:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
2402e154:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
2402e164:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
2402e174:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
2402e184:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
2402e194:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
2402e1a4:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
2402e1b4:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
2402e1c4:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
2402e1d4:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
2402e1e4:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
2402e1f4:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
2402e204:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
2402e214:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
2402e224:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
2402e234:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
2402e244:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
2402e254:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
2402e264:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
2402e274:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
2402e284:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
2402e294:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
2402e2a4:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
2402e2b4:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
2402e2c4:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
2402e2d4:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
2402e2e4:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
2402e2f4:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
2402e304:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
2402e314:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
2402e324:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
2402e334:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
2402e344:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
2402e354:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
2402e364:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
2402e374:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
2402e384:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
2402e394:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
2402e3a4:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
2402e3b4:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
2402e3c4:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
2402e3d4:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
2402e3e4:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
2402e3f4:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
2402e404:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
2402e414:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
2402e424:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
2402e434:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
2402e444:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
2402e454:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
2402e464:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
2402e474:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
2402e484:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
2402e494:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
2402e4a4:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
2402e4b4:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
2402e4c4:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
2402e4d4:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
2402e4e4:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
2402e4f4:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
2402e504:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
2402e514:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
2402e524:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
2402e534:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
2402e544:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
2402e554:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
2402e564:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
2402e574:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
2402e584:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
2402e594:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
2402e5a4:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
2402e5b4:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
2402e5c4:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
2402e5d4:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
2402e5e4:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
2402e5f4:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
2402e604:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
2402e614:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
2402e624:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
2402e634:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
2402e644:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
2402e654:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
2402e664:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
2402e674:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
2402e684:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
2402e694:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
2402e6a4:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
2402e6b4:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
2402e6c4:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
2402e6d4:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
2402e6e4:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
2402e6f4:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
2402e704:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
2402e714:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
2402e724:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
2402e734:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
2402e744:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
2402e754:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
2402e764:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
2402e774:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
2402e784:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
2402e794:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
2402e7a4:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
2402e7b4:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
2402e7c4:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
2402e7d4:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
2402e7e4:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
2402e7f4:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
2402e804:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
2402e814:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
2402e824:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
2402e834:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
2402e844:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
2402e854:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
2402e864:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
2402e874:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
2402e884:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
2402e894:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
2402e8a4:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
2402e8b4:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
2402e8c4:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
2402e8d4:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
2402e8e4:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
2402e8f4:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
2402e904:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
2402e914:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
2402e924:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
2402e934:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
2402e944:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
2402e954:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
2402e964:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
2402e974:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
2402e984:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
2402e994:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
2402e9a4:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
2402e9b4:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
2402e9c4:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
2402e9d4:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
2402e9e4:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
2402e9f4:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
2402ea04:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
2402ea14:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
2402ea24:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
2402ea34:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
2402ea44:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
2402ea54:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
2402ea64:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
2402ea74:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
2402ea84:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
2402ea94:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
2402eaa4:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
2402eab4:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
2402eac4:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
2402ead4:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
2402eae4:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
2402eaf4:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
2402eb04:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
2402eb14:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
2402eb24:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
2402eb34:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
2402eb44:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
2402eb54:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
2402eb64:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
2402eb74:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
2402eb84:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
2402eb94:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
2402eba4:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
2402ebb4:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
2402ebc4:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
2402ebd4:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
2402ebe4:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
2402ebf4:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
2402ec04:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
2402ec14:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
2402ec24:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
2402ec34:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
2402ec44:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
2402ec54:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
2402ec64:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
2402ec74:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
2402ec84:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
2402ec94:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
2402eca4:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
2402ecb4:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
2402ecc4:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
2402ecd4:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
2402ece4:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
2402ecf4:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
2402ed04:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
2402ed14:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
2402ed24:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
2402ed34:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
2402ed44:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
2402ed54:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
2402ed64:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
2402ed74:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
2402ed84:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
2402ed94:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
2402eda4:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
2402edb4:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
2402edc4:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
2402edd4:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
2402ede4:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
2402edf4:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
2402ee04:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
2402ee14:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
2402ee24:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
2402ee34:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
2402ee44:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
2402ee54:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
2402ee64:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
2402ee74:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
2402ee84:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
2402ee94:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
2402eea4:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
2402eeb4:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
2402eec4:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
2402eed4:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
2402eee4:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
2402eef4:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
2402ef04:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
2402ef14:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
2402ef24:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
2402ef34:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
2402ef44:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
2402ef54:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
2402ef64:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
2402ef74:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
2402ef84:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
2402ef94:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
2402efa4:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
2402efb4:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
2402efc4:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
2402efd4:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
2402efe4:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
2402eff4:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
2402f004:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
2402f014:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
2402f024:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
2402f034:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
2402f044:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
2402f054:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
2402f064:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
2402f074:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
2402f084:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
2402f094:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
2402f0a4:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
2402f0b4:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
2402f0c4:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
2402f0d4:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
2402f0e4:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
2402f0f4:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
2402f104:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
2402f114:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
2402f124:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
2402f134:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
2402f144:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
2402f154:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
2402f164:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
2402f174:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
2402f184:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
2402f194:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
2402f1a4:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
2402f1b4:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
2402f1c4:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
2402f1d4:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
2402f1e4:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
2402f1f4:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
2402f204:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
2402f214:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
2402f224:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
2402f234:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
2402f244:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
2402f254:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
2402f264:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
2402f274:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
2402f284:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
2402f294:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
2402f2a4:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
2402f2b4:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
2402f2c4:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
2402f2d4:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
2402f2e4:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
2402f2f4:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
2402f304:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
2402f314:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
2402f324:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
2402f334:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
2402f344:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
2402f354:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
2402f364:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
2402f374:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
2402f384:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
2402f394:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
2402f3a4:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
2402f3b4:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
2402f3c4:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
2402f3d4:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
2402f3e4:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
2402f3f4:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
2402f404:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
2402f414:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
2402f424:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
2402f434:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
2402f444:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
2402f454:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
2402f464:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
2402f474:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
2402f484:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
2402f494:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
2402f4a4:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
2402f4b4:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
2402f4c4:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
2402f4d4:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
2402f4e4:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
2402f4f4:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
2402f504:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
2402f514:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
2402f524:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
2402f534:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
2402f544:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
2402f554:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
2402f564:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
2402f574:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
2402f584:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
2402f594:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
2402f5a4:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
2402f5b4:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
2402f5c4:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
2402f5d4:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
2402f5e4:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
2402f5f4:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
2402f604:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
2402f614:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
2402f624:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
2402f634:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
2402f644:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
2402f654:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
2402f664:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
2402f674:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
2402f684:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
2402f694:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
2402f6a4:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
2402f6b4:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
2402f6c4:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
2402f6d4:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
2402f6e4:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
2402f6f4:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
2402f704:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
2402f714:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
2402f724:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
2402f734:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
2402f744:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
2402f754:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
2402f764:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
2402f774:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
2402f784:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
2402f794:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
2402f7a4:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
2402f7b4:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
2402f7c4:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
2402f7d4:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
2402f7e4:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
2402f7f4:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
2402f804:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
2402f814:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
2402f824:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
2402f834:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
2402f844:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
2402f854:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
2402f864:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
2402f874:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
2402f884:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
2402f894:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
2402f8a4:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
2402f8b4:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
2402f8c4:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
2402f8d4:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
2402f8e4:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
2402f8f4:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
2402f904:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
2402f914:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
2402f924:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
2402f934:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
2402f944:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
2402f954:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
2402f964:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
2402f974:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
2402f984:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
2402f994:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
2402f9a4:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
2402f9b4:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
2402f9c4:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
2402f9d4:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
2402f9e4:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
2402f9f4:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
2402fa04:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
2402fa14:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
2402fa24:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
2402fa34:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
2402fa44:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
2402fa54:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
2402fa64:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
2402fa74:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
2402fa84:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
2402fa94:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
2402faa4:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
2402fab4:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
2402fac4:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
2402fad4:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
2402fae4:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
2402faf4:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
2402fb04:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
2402fb14:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
2402fb24:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
2402fb34:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
2402fb44:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
2402fb54:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
2402fb64:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
2402fb74:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
2402fb84:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
2402fb94:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
2402fba4:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
2402fbb4:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
2402fbc4:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
2402fbd4:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
2402fbe4:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
2402fbf4:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
2402fc04:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
2402fc14:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
2402fc24:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
2402fc34:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
2402fc44:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
2402fc54:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
2402fc64:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
2402fc74:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
2402fc84:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
2402fc94:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
2402fca4:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
2402fcb4:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
2402fcc4:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
2402fcd4:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
2402fce4:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
2402fcf4:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
2402fd04:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
2402fd14:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
2402fd24:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
2402fd34:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
2402fd44:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
2402fd54:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
2402fd64:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
2402fd74:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
2402fd84:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
2402fd94:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
2402fda4:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
2402fdb4:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
2402fdc4:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
2402fdd4:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
2402fde4:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
2402fdf4:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
2402fe04:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
2402fe14:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
2402fe24:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
2402fe34:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
2402fe44:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
2402fe54:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
2402fe64:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
2402fe74:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
2402fe84:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
2402fe94:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
2402fea4:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
2402feb4:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
2402fec4:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
2402fed4:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
2402fee4:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
2402fef4:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
2402ff04:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
2402ff14:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
2402ff24:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
2402ff34:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
2402ff44:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
2402ff54:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
2402ff64:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
2402ff74:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
2402ff84:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
2402ff94:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
2402ffa4:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
2402ffb4:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
2402ffc4:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
2402ffd4:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
2402ffe4:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
2402fff4:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
24030004:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
24030014:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
24030024:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
24030034:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
24030044:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
24030054:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
24030064:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
24030074:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
24030084:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
24030094:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
240300a4:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
240300b4:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
240300c4:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
240300d4:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
240300e4:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
240300f4:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
24030104:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
24030114:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
24030124:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
24030134:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
24030144:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
24030154:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
24030164:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
24030174:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
24030184:	b89cc6ac bafe109a b89407ce bb03a88e     ................
24030194:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
240301a4:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
240301b4:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
240301c4:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
240301d4:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
240301e4:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
240301f4:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
24030204:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
24030214:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
24030224:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
24030234:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
24030244:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
24030254:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
24030264:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
24030274:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
24030284:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
24030294:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
240302a4:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
240302b4:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
240302c4:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
240302d4:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
240302e4:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
240302f4:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
24030304:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
24030314:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
24030324:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
24030334:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
24030344:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
24030354:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
24030364:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
24030374:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
24030384:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
24030394:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
240303a4:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
240303b4:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
240303c4:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
240303d4:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
240303e4:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
240303f4:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
24030404:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
24030414:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
24030424:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
24030434:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
24030444:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
24030454:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
24030464:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
24030474:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
24030484:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
24030494:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
240304a4:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
240304b4:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
240304c4:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
240304d4:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
240304e4:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
240304f4:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
24030504:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
24030514:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
24030524:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
24030534:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
24030544:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
24030554:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
24030564:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
24030574:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
24030584:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
24030594:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
240305a4:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
240305b4:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
240305c4:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
240305d4:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
240305e4:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
240305f4:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
24030604:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
24030614:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
24030624:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
24030634:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
24030644:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
24030654:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
24030664:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
24030674:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
24030684:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
24030694:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
240306a4:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
240306b4:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
240306c4:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
240306d4:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
240306e4:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
240306f4:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
24030704:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
24030714:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
24030724:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
24030734:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
24030744:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
24030754:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
24030764:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
24030774:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
24030784:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
24030794:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
240307a4:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
240307b4:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
240307c4:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
240307d4:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
240307e4:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
240307f4:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
24030804:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
24030814:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
24030824:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
24030834:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
24030844:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
24030854:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
24030864:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
24030874:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
24030884:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
24030894:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
240308a4:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
240308b4:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
240308c4:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
240308d4:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
240308e4:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
240308f4:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
24030904:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
24030914:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
24030924:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
24030934:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
24030944:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
24030954:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
24030964:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
24030974:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
24030984:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
24030994:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
240309a4:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
240309b4:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
240309c4:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
240309d4:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
240309e4:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
240309f4:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
24030a04:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
24030a14:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
24030a24:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
24030a34:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
24030a44:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
24030a54:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
24030a64:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
24030a74:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
24030a84:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
24030a94:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
24030aa4:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
24030ab4:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
24030ac4:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24030ad4:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24030ae4:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
24030af4:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
24030b04:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
24030b14:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
24030b24:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
24030b34:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
24030b44:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
24030b54:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
24030b64:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
24030b74:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
24030b84:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
24030b94:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
24030ba4:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
24030bb4:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
24030bc4:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24030bd4:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24030be4:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
24030bf4:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
24030c04:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
24030c14:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
24030c24:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
24030c34:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
24030c44:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
24030c54:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
24030c64:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
24030c74:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
24030c84:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
24030c94:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
24030ca4:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
24030cb4:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
24030cc4:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24030cd4:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24030ce4:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24030cf4:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
24030d04:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
24030d14:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
24030d24:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
24030d34:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
24030d44:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
24030d54:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
24030d64:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
24030d74:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
24030d84:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
24030d94:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
24030da4:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
24030db4:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
24030dc4:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24030dd4:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24030de4:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24030df4:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
24030e04:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
24030e14:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
24030e24:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
24030e34:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
24030e44:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
24030e54:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
24030e64:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
24030e74:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
24030e84:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
24030e94:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
24030ea4:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
24030eb4:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
24030ec4:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24030ed4:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24030ee4:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24030ef4:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
24030f04:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
24030f14:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
24030f24:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
24030f34:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
24030f44:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
24030f54:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
24030f64:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
24030f74:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
24030f84:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
24030f94:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
24030fa4:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
24030fb4:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
24030fc4:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24030fd4:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24030fe4:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24030ff4:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
24031004:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
24031014:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
24031024:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
24031034:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
24031044:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
24031054:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
24031064:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
24031074:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
24031084:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
24031094:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
240310a4:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
240310b4:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
240310c4:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
240310d4:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
240310e4:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
240310f4:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
24031104:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
24031114:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
24031124:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
24031134:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
24031144:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
24031154:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
24031164:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
24031174:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
24031184:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
24031194:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
240311a4:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
240311b4:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
240311c4:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
240311d4:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
240311e4:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
240311f4:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
24031204:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
24031214:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
24031224:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
24031234:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
24031244:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
24031254:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
24031264:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
24031274:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
24031284:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
24031294:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
240312a4:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
240312b4:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
240312c4:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
240312d4:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
240312e4:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
240312f4:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
24031304:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
24031314:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
24031324:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
24031334:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
24031344:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
24031354:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
24031364:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
24031374:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
24031384:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
24031394:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
240313a4:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
240313b4:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
240313c4:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
240313d4:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
240313e4:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
240313f4:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
24031404:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
24031414:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
24031424:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
24031434:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
24031444:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
24031454:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
24031464:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
24031474:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
24031484:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
24031494:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
240314a4:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
240314b4:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
240314c4:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
240314d4:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
240314e4:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
240314f4:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
24031504:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
24031514:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
24031524:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
24031534:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
24031544:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
24031554:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
24031564:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
24031574:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
24031584:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
24031594:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
240315a4:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
240315b4:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
240315c4:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
240315d4:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
240315e4:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
240315f4:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
24031604:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
24031614:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
24031624:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
24031634:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
24031644:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
24031654:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
24031664:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
24031674:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
24031684:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
24031694:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
240316a4:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
240316b4:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
240316c4:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
240316d4:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
240316e4:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
240316f4:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
24031704:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
24031714:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
24031724:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
24031734:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
24031744:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
24031754:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
24031764:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
24031774:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
24031784:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
24031794:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
240317a4:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
240317b4:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
240317c4:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
240317d4:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
240317e4:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
240317f4:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
24031804:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
24031814:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
24031824:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
24031834:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
24031844:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
24031854:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
24031864:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
24031874:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
24031884:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
24031894:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
240318a4:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
240318b4:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
240318c4:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
240318d4:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
240318e4:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
240318f4:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
24031904:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
24031914:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
24031924:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
24031934:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
24031944:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
24031954:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
24031964:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
24031974:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
24031984:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
24031994:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
240319a4:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
240319b4:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
240319c4:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
240319d4:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
240319e4:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
240319f4:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
24031a04:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
24031a14:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
24031a24:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
24031a34:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
24031a44:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
24031a54:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
24031a64:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
24031a74:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
24031a84:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
24031a94:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
24031aa4:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
24031ab4:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
24031ac4:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
24031ad4:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
24031ae4:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
24031af4:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
24031b04:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
24031b14:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
24031b24:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
24031b34:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
24031b44:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
24031b54:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
24031b64:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
24031b74:	b7168bbf b8839904 b7135056 b896030f     ........VP......
24031b84:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
24031b94:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
24031ba4:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
24031bb4:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
24031bc4:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
24031bd4:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
24031be4:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
24031bf4:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
24031c04:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
24031c14:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
24031c24:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
24031c34:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
24031c44:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
24031c54:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
24031c64:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
24031c74:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
24031c84:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
24031c94:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
24031ca4:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
24031cb4:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
24031cc4:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
24031cd4:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
24031ce4:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
24031cf4:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
24031d04:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
24031d14:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
24031d24:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
24031d34:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
24031d44:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
24031d54:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
24031d64:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
24031d74:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
24031d84:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
24031d94:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
24031da4:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
24031db4:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
24031dc4:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
24031dd4:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
24031de4:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
24031df4:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
24031e04:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
24031e14:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
24031e24:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
24031e34:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
24031e44:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
24031e54:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
24031e64:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
24031e74:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
24031e84:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
24031e94:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
24031ea4:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
24031eb4:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
24031ec4:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
24031ed4:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
24031ee4:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
24031ef4:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
24031f04:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
24031f14:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
24031f24:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
24031f34:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
24031f44:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
24031f54:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
24031f64:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
24031f74:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
24031f84:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
24031f94:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
24031fa4:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
24031fb4:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
24031fc4:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
24031fd4:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
24031fe4:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
24031ff4:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
24032004:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
24032014:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
24032024:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
24032034:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
24032044:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
24032054:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
24032064:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
24032074:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
24032084:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
24032094:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
240320a4:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
240320b4:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
240320c4:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
240320d4:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
240320e4:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
240320f4:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
24032104:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
24032114:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
24032124:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
24032134:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
24032144:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
24032154:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
24032164:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
24032174:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
24032184:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
24032194:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
240321a4:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
240321b4:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
240321c4:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
240321d4:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
240321e4:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
240321f4:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
24032204:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24032214:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24032224:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24032234:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24032244:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24032254:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24032264:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24032274:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24032284:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24032294:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
240322a4:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
240322b4:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
240322c4:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
240322d4:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
240322e4:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
240322f4:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
24032304:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
24032314:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
24032324:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
24032334:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
24032344:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24032354:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24032364:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24032374:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24032384:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24032394:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
240323a4:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
240323b4:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
240323c4:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
240323d4:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
240323e4:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
240323f4:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
24032404:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
24032414:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
24032424:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
24032434:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
24032444:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24032454:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24032464:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24032474:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24032484:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24032494:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
240324a4:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
240324b4:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
240324c4:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
240324d4:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
240324e4:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
240324f4:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
24032504:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
24032514:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
24032524:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
24032534:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
24032544:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24032554:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24032564:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24032574:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24032584:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24032594:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
240325a4:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
240325b4:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
240325c4:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
240325d4:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
240325e4:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
240325f4:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
24032604:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24032614:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24032624:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24032634:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24032644:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24032654:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24032664:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24032674:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24032684:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24032694:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
240326a4:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
240326b4:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
240326c4:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
240326d4:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
240326e4:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
240326f4:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
24032704:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24032714:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
24032724:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
24032734:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
24032744:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24032754:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
24032764:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
24032774:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
24032784:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
24032794:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
240327a4:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
240327b4:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
240327c4:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
240327d4:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
240327e4:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
240327f4:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
24032804:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
24032814:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
24032824:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
24032834:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
24032844:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
24032854:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
24032864:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
24032874:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
24032884:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
24032894:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
240328a4:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
240328b4:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
240328c4:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
240328d4:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
240328e4:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
240328f4:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
24032904:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
24032914:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
24032924:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
24032934:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
24032944:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
24032954:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
24032964:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
24032974:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
24032984:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
24032994:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
240329a4:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
240329b4:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
240329c4:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
240329d4:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
240329e4:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
240329f4:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
24032a04:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
24032a14:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
24032a24:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
24032a34:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
24032a44:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
24032a54:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
24032a64:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
24032a74:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
24032a84:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
24032a94:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
24032aa4:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
24032ab4:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
24032ac4:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
24032ad4:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
24032ae4:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
24032af4:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
24032b04:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
24032b14:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
24032b24:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
24032b34:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
24032b44:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
24032b54:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
24032b64:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
24032b74:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
24032b84:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
24032b94:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
24032ba4:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
24032bb4:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
24032bc4:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
24032bd4:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
24032be4:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
24032bf4:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
24032c04:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
24032c14:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
24032c24:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
24032c34:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
24032c44:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
24032c54:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
24032c64:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
24032c74:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
24032c84:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
24032c94:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
24032ca4:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
24032cb4:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24032cc4:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24032cd4:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24032ce4:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
24032cf4:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
24032d04:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
24032d14:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
24032d24:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
24032d34:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
24032d44:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
24032d54:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
24032d64:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
24032d74:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
24032d84:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
24032d94:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
24032da4:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
24032db4:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24032dc4:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24032dd4:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24032de4:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
24032df4:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
24032e04:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
24032e14:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
24032e24:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
24032e34:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
24032e44:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
24032e54:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
24032e64:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
24032e74:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
24032e84:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
24032e94:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
24032ea4:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
24032eb4:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24032ec4:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24032ed4:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24032ee4:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
24032ef4:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
24032f04:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
24032f14:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
24032f24:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
24032f34:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
24032f44:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
24032f54:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
24032f64:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
24032f74:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
24032f84:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
24032f94:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
24032fa4:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
24032fb4:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24032fc4:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24032fd4:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24032fe4:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
24032ff4:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
24033004:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
24033014:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
24033024:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
24033034:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
24033044:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
24033054:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
24033064:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
24033074:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24033084:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24033094:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
240330a4:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
240330b4:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
240330c4:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
240330d4:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
240330e4:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
240330f4:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
24033104:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
24033114:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
24033124:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
24033134:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
24033144:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24033154:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24033164:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24033174:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24033184:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24033194:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
240331a4:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
240331b4:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
240331c4:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
240331d4:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
240331e4:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
240331f4:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
24033204:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
24033214:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
24033224:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
24033234:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
24033244:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
24033254:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
24033264:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
24033274:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
24033284:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
24033294:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
240332a4:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
240332b4:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
240332c4:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
240332d4:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
240332e4:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
240332f4:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
24033304:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
24033314:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
24033324:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
24033334:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
24033344:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
24033354:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
24033364:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
24033374:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
24033384:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
24033394:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
240333a4:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
240333b4:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
240333c4:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
240333d4:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
240333e4:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
240333f4:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
24033404:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
24033414:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
24033424:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
24033434:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
24033444:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
24033454:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
24033464:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
24033474:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
24033484:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
24033494:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
240334a4:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
240334b4:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
240334c4:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
240334d4:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
240334e4:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
240334f4:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
24033504:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
24033514:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
24033524:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
24033534:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
24033544:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
24033554:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
24033564:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
24033574:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
24033584:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
24033594:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
240335a4:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
240335b4:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
240335c4:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
240335d4:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
240335e4:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
240335f4:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
24033604:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
24033614:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
24033624:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
24033634:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
24033644:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
24033654:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
24033664:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
24033674:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
24033684:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
24033694:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
240336a4:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
240336b4:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
240336c4:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
240336d4:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
240336e4:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
240336f4:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
24033704:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
24033714:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
24033724:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
24033734:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
24033744:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
24033754:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
24033764:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
24033774:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
24033784:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
24033794:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
240337a4:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
240337b4:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
240337c4:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
240337d4:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
240337e4:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
240337f4:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
24033804:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
24033814:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
24033824:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
24033834:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
24033844:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
24033854:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
24033864:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
24033874:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
24033884:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
24033894:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
240338a4:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
240338b4:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
240338c4:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
240338d4:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
240338e4:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
240338f4:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
24033904:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
24033914:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
24033924:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
24033934:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
24033944:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
24033954:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
24033964:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
24033974:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
24033984:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
24033994:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
240339a4:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
240339b4:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
240339c4:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
240339d4:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
240339e4:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
240339f4:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
24033a04:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
24033a14:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
24033a24:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
24033a34:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
24033a44:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
24033a54:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
24033a64:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
24033a74:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
24033a84:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
24033a94:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
24033aa4:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
24033ab4:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
24033ac4:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
24033ad4:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
24033ae4:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
24033af4:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
24033b04:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
24033b14:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
24033b24:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
24033b34:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
24033b44:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
24033b54:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
24033b64:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
24033b74:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
24033b84:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
24033b94:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
24033ba4:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
24033bb4:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
24033bc4:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
24033bd4:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
24033be4:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
24033bf4:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
24033c04:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
24033c14:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
24033c24:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
24033c34:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
24033c44:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
24033c54:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
24033c64:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
24033c74:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
24033c84:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
24033c94:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
24033ca4:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
24033cb4:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
24033cc4:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
24033cd4:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
24033ce4:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
24033cf4:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
24033d04:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
24033d14:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
24033d24:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
24033d34:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
24033d44:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
24033d54:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
24033d64:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
24033d74:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
24033d84:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
24033d94:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
24033da4:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
24033db4:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
24033dc4:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
24033dd4:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
24033de4:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
24033df4:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
24033e04:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
24033e14:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
24033e24:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
24033e34:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
24033e44:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
24033e54:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
24033e64:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
24033e74:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
24033e84:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
24033e94:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
24033ea4:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
24033eb4:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
24033ec4:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
24033ed4:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
24033ee4:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
24033ef4:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
24033f04:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
24033f14:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
24033f24:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
24033f34:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
24033f44:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
24033f54:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
24033f64:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
24033f74:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
24033f84:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
24033f94:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
24033fa4:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
24033fb4:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
24033fc4:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
24033fd4:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
24033fe4:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
24033ff4:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
24034004:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
24034014:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
24034024:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
24034034:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
24034044:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
24034054:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
24034064:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
24034074:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
24034084:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
24034094:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
240340a4:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
240340b4:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
240340c4:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
240340d4:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
240340e4:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
240340f4:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
24034104:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
24034114:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
24034124:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
24034134:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
24034144:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
24034154:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
24034164:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
24034174:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
24034184:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
24034194:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
240341a4:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
240341b4:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
240341c4:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
240341d4:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
240341e4:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
240341f4:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
24034204:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
24034214:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
24034224:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
24034234:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
24034244:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
24034254:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
24034264:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
24034274:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
24034284:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
24034294:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
240342a4:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
240342b4:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
240342c4:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
240342d4:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
240342e4:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
240342f4:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

24034318 <sinTable_f32>:
24034318:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
24034328:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
24034338:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
24034348:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
24034358:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
24034368:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
24034378:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
24034388:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
24034398:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
240343a8:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
240343b8:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
240343c8:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
240343d8:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
240343e8:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
240343f8:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
24034408:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
24034418:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
24034428:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
24034438:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
24034448:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
24034458:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
24034468:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
24034478:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
24034488:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
24034498:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
240344a8:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
240344b8:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
240344c8:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
240344d8:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
240344e8:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
240344f8:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
24034508:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
24034518:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
24034528:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
24034538:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
24034548:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
24034558:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
24034568:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
24034578:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
24034588:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
24034598:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
240345a8:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
240345b8:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
240345c8:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
240345d8:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
240345e8:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
240345f8:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
24034608:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
24034618:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
24034628:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
24034638:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
24034648:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
24034658:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
24034668:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
24034678:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
24034688:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
24034698:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
240346a8:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
240346b8:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
240346c8:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
240346d8:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
240346e8:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
240346f8:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
24034708:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
24034718:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
24034728:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
24034738:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
24034748:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
24034758:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
24034768:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
24034778:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
24034788:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
24034798:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
240347a8:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
240347b8:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
240347c8:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
240347d8:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
240347e8:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
240347f8:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
24034808:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
24034818:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
24034828:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
24034838:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
24034848:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
24034858:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
24034868:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
24034878:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
24034888:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
24034898:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
240348a8:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
240348b8:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
240348c8:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
240348d8:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
240348e8:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
240348f8:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
24034908:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
24034918:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
24034928:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
24034938:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
24034948:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
24034958:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
24034968:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
24034978:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
24034988:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
24034998:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
240349a8:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
240349b8:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
240349c8:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
240349d8:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
240349e8:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
240349f8:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
24034a08:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
24034a18:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
24034a28:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
24034a38:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
24034a48:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
24034a58:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
24034a68:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
24034a78:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
24034a88:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
24034a98:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
24034aa8:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
24034ab8:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
24034ac8:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
24034ad8:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
24034ae8:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
24034af8:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
24034b08:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
24034b18:	80000000 33323130 37363534 62613938     ....0123456789ab
24034b28:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
24034b38:	76757473 7a797877 00000000 00000000     stuvwxyz........

24034b48 <__exp_data>:
24034b48:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
24034b58:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
24034b68:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
24034b78:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
24034b88:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
24034b98:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
24034ba8:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
24034bc4:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
24034bd4:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
24034be4:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
24034bf4:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
24034c04:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
24034c14:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
24034c24:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
24034c34:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
24034c44:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
24034c54:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
24034c64:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
24034c74:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
24034c84:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
24034c94:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
24034ca4:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
24034cb4:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
24034cc4:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
24034cd4:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
24034ce4:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
24034cf4:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
24034d04:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
24034d14:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
24034d24:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
24034d34:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
24034d44:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
24034d54:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
24034d64:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
24034d74:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
24034d84:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
24034d94:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
24034da4:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
24034db4:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
24034dc4:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
24034dd4:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
24034de4:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
24034df4:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
24034e04:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
24034e14:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
24034e24:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
24034e34:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
24034e44:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
24034e54:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
24034e64:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
24034e74:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
24034e84:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
24034e94:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
24034ea4:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
24034eb4:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
24034ec4:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
24034ed4:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
24034ee4:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
24034ef4:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
24034f04:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
24034f14:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
24034f24:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
24034f34:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
24034f44:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
24034f54:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
24034f64:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
24034f74:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
24034f84:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
24034f94:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
24034fa4:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
24034fb4:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
24034fc4:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
24034fd4:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
24034fe4:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
24034ff4:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
24035004:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
24035014:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
24035024:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
24035034:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
24035044:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
24035054:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
24035064:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
24035074:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
24035084:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
24035094:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
240350a4:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
240350b4:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
240350c4:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
240350d4:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
240350e4:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
240350f4:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
24035104:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
24035114:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
24035124:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
24035134:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
24035144:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
24035154:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
24035164:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
24035174:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
24035184:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
24035194:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
240351a4:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
240351b4:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
240351c4:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
240351d4:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
240351e4:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
240351f4:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
24035204:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
24035214:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
24035224:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
24035234:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
24035244:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
24035254:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
24035264:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
24035274:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
24035284:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
24035294:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
240352a4:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
240352b4:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
240352c4:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
240352d4:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
240352e4:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
240352f4:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
24035304:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
24035314:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
24035324:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
24035334:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
24035344:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
24035354:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
24035364:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
24035374:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
24035384:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
24035394:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
240353a4:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
240353b4:	3feff3c2                                ...?

240353b8 <__exp2f_data>:
240353b8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
240353c8:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
240353d8:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
240353e8:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
240353f8:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
24035408:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
24035418:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
24035428:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
24035438:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
24035448:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24035458:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24035468:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24035478:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24035488:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
24035498:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
240354a8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
240354b8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
240354c8:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
240354d8:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
240354e8:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
240354f8:	ff0c52d6 3f962e42                       .R..B..?

24035500 <__log2f_data>:
24035500:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24035510:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24035520:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24035530:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24035540:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24035550:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24035560:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24035570:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24035580:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24035590:	00000000 3ff00000 00000000 00000000     .......?........
240355a0:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
240355b0:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
240355c0:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
240355d0:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
240355e0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
240355f0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24035600:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
24035610:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

24035620 <__logf_data>:
24035620:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
24035630:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
24035640:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
24035650:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24035660:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24035670:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24035680:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24035690:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
240356a0:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
240356b0:	00000000 3ff00000 00000000 00000000     .......?........
240356c0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
240356d0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
240356e0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
240356f0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
24035700:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
24035710:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
24035720:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
24035730:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

24035740 <TWO23>:
24035740:	4b000000 cb000000                       ...K....

24035748 <__powf_log2_data>:
24035748:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24035758:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24035768:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24035778:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24035788:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24035798:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
240357a8:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
240357b8:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
240357c8:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
240357d8:	00000000 3ff00000 00000000 00000000     .......?........
240357e8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
240357f8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24035808:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24035818:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24035828:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24035838:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24035848:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
24035858:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
24035868:	652ab82b 3ff71547                       +.*eG..?

24035870 <__inv_pio4>:
24035870:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
24035880:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
24035890:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
240358a0:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
240358b0:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
240358c0:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

240358d0 <__sincosf_table>:
240358d0:	00000000 3ff00000 00000000 bff00000     .......?........
240358e0:	00000000 bff00000 00000000 3ff00000     ...............?
240358f0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24035900:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
24035910:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
24035920:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
24035930:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
24035940:	00000000 3ff00000 00000000 bff00000     .......?........
24035950:	00000000 bff00000 00000000 3ff00000     ...............?
24035960:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24035970:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
24035980:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
24035990:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
240359a0:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

240359b0 <npio2_hw>:
240359b0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
240359c0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
240359d0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
240359e0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
240359f0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
24035a00:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
24035a10:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
24035a20:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

24035a30 <two_over_pi>:
24035a30:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
24035a40:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
24035a50:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
24035a60:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
24035a70:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
24035a80:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
24035a90:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
24035aa0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
24035ab0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
24035ac0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
24035ad0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
24035ae0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
24035af0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
24035b00:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
24035b10:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
24035b20:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
24035b30:	0060e27b 00c08c6b                       {.`.k...

24035b38 <npio2_hw>:
24035b38:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
24035b48:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
24035b58:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
24035b68:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
24035b78:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
24035b88:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
24035b98:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
24035ba8:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

24035bb8 <two_over_pi>:
24035bb8:	000000a2 000000f9 00000083 0000006e     ............n...
24035bc8:	0000004e 00000044 00000015 00000029     N...D.......)...
24035bd8:	000000fc 00000027 00000057 000000d1     ....'...W.......
24035be8:	000000f5 00000034 000000dd 000000c0     ....4...........
24035bf8:	000000db 00000062 00000095 00000099     ....b...........
24035c08:	0000003c 00000043 00000090 00000041     <...C.......A...
24035c18:	000000fe 00000051 00000063 000000ab     ....Q...c.......
24035c28:	000000de 000000bb 000000c5 00000061     ............a...
24035c38:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
24035c48:	00000042 0000004d 000000d2 000000e0     B...M...........
24035c58:	00000006 00000049 0000002e 000000ea     ....I...........
24035c68:	00000009 000000d1 00000092 0000001c     ................
24035c78:	000000fe 0000001d 000000eb 0000001c     ................
24035c88:	000000b1 00000029 000000a7 0000003e     ....).......>...
24035c98:	000000e8 00000082 00000035 000000f5     ........5.......
24035ca8:	0000002e 000000bb 00000044 00000084     ........D.......
24035cb8:	000000e9 0000009c 00000070 00000026     ........p...&...
24035cc8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
24035cd8:	00000039 00000091 000000d6 00000039     9...........9...
24035ce8:	00000083 00000053 00000039 000000f4     ....S...9.......
24035cf8:	0000009c 00000084 0000005f 0000008b     ........_.......
24035d08:	000000bd 000000f9 00000028 0000003b     ........(...;...
24035d18:	0000001f 000000f8 00000097 000000ff     ................
24035d28:	000000de 00000005 00000098 0000000f     ................
24035d38:	000000ef 0000002f 00000011 0000008b     ..../...........
24035d48:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
24035d58:	0000006d 00000036 0000007e 000000cf     m...6...~.......
24035d68:	00000027 000000cb 00000009 000000b7     '...............
24035d78:	0000004f 00000046 0000003f 00000066     O...F...?...f...
24035d88:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24035d98:	00000075 00000027 000000ba 000000c7     u...'...........
24035da8:	000000eb 000000e5 000000f1 0000007b     ............{...
24035db8:	0000003d 00000007 00000039 000000f7     =.......9.......
24035dc8:	0000008a 00000052 00000092 000000ea     ....R...........
24035dd8:	0000006b 000000fb 0000005f 000000b1     k......._.......
24035de8:	0000001f 0000008d 0000005d 00000008     ........].......
24035df8:	00000056 00000003 00000030 00000046     V.......0...F...
24035e08:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
24035e18:	000000f0 000000cf 000000bc 00000020     ............ ...
24035e28:	0000009a 000000f4 00000036 0000001d     ........6.......
24035e38:	000000a9 000000e3 00000091 00000061     ............a...
24035e48:	0000005e 000000e6 0000001b 00000008     ^...............
24035e58:	00000065 00000099 00000085 0000005f     e..........._...
24035e68:	00000014 000000a0 00000068 00000040     ........h...@...
24035e78:	0000008d 000000ff 000000d8 00000080     ................
24035e88:	0000004d 00000073 00000027 00000031     M...s...'...1...
24035e98:	00000006 00000006 00000015 00000056     ............V...
24035ea8:	000000ca 00000073 000000a8 000000c9     ....s...........
24035eb8:	00000060 000000e2 0000007b 000000c0     `.......{.......
24035ec8:	0000008c 0000006b                       ....k...

24035ed0 <PIo2>:
24035ed0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
24035ee0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
24035ef0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
24035f00:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

24035f10 <init_jk>:
24035f10:	00000002 00000003 00000004 00000006     ................

24035f20 <PIo2>:
24035f20:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
24035f30:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
24035f40:	1fc40000 1bc60000 17440000              ..........D.

24035f4c <init_jk>:
24035f4c:	00000004 00000007 00000009              ............

24035f58 <_init>:
24035f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24035f5a:	bf00      	nop
24035f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
24035f5e:	bc08      	pop	{r3}
24035f60:	469e      	mov	lr, r3
24035f62:	4770      	bx	lr

24035f64 <_fini>:
24035f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24035f66:	bf00      	nop
24035f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
24035f6a:	bc08      	pop	{r3}
24035f6c:	469e      	mov	lr, r3
24035f6e:	4770      	bx	lr

24035f70 <__tickMappings_veneer>:
24035f70:	f85f f000 	ldr.w	pc, [pc]	; 24035f74 <__tickMappings_veneer+0x4>
24035f74:	000014c1 	.word	0x000014c1

24035f78 <__tOversampler_upsample_veneer>:
24035f78:	f85f f000 	ldr.w	pc, [pc]	; 24035f7c <__tOversampler_upsample_veneer+0x4>
24035f7c:	00004641 	.word	0x00004641

24035f80 <__oscillator_tick_veneer>:
24035f80:	f85f f000 	ldr.w	pc, [pc]	; 24035f84 <__oscillator_tick_veneer+0x4>
24035f84:	00000401 	.word	0x00000401

24035f88 <__HAL_SAI_TxCpltCallback_veneer>:
24035f88:	f85f f000 	ldr.w	pc, [pc]	; 24035f8c <__HAL_SAI_TxCpltCallback_veneer+0x4>
24035f8c:	00002421 	.word	0x00002421

24035f90 <__handleSPI_veneer>:
24035f90:	f85f f000 	ldr.w	pc, [pc]	; 24035f94 <__handleSPI_veneer+0x4>
24035f94:	00002781 	.word	0x00002781

24035f98 <__tOversampler_downsample_veneer>:
24035f98:	f85f f000 	ldr.w	pc, [pc]	; 24035f9c <__tOversampler_downsample_veneer+0x4>
24035f9c:	00004721 	.word	0x00004721

24035fa0 <__noise_tick_veneer>:
24035fa0:	f85f f000 	ldr.w	pc, [pc]	; 24035fa4 <__noise_tick_veneer+0x4>
24035fa4:	00002341 	.word	0x00002341

24035fa8 <__HAL_SAI_TxHalfCpltCallback_veneer>:
24035fa8:	f85f f000 	ldr.w	pc, [pc]	; 24035fac <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
24035fac:	00002441 	.word	0x00002441

24035fb0 <__filter_tick_veneer>:
24035fb0:	f85f f000 	ldr.w	pc, [pc]	; 24035fb4 <__filter_tick_veneer+0x4>
24035fb4:	00000901 	.word	0x00000901

24035fb8 <__parsePreset_veneer>:
24035fb8:	f85f f000 	ldr.w	pc, [pc]	; 24035fbc <__parsePreset_veneer+0x4>
24035fbc:	00002d41 	.word	0x00002d41

24035fc0 <__LEAF_clip_veneer>:
24035fc0:	f85f f000 	ldr.w	pc, [pc]	; 24035fc4 <__LEAF_clip_veneer+0x4>
24035fc4:	000048a1 	.word	0x000048a1

Disassembly of section .itcmram:

00000400 <oscillator_tick>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	496f      	ldr	r1, [pc, #444]	; (5c4 <oscillator_tick+0x1c4>)
     406:	2500      	movs	r5, #0
     408:	4a6f      	ldr	r2, [pc, #444]	; (5c8 <oscillator_tick+0x1c8>)
     40a:	ed2d 8b0c 	vpush	{d8-d13}
    __HAL_DMA_ENABLE(hdma);
     40e:	700d      	strb	r5, [r1, #0]
     410:	b089      	sub	sp, #36	; 0x24
     412:	496e      	ldr	r1, [pc, #440]	; (5cc <oscillator_tick+0x1cc>)
     414:	eb02 0680 	add.w	r6, r2, r0, lsl #2
     418:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 5d0 <oscillator_tick+0x1d0>
     41c:	684b      	ldr	r3, [r1, #4]
     41e:	ed86 9a00 	vstr	s18, [r6]
     422:	9305      	str	r3, [sp, #20]
     424:	4b6b      	ldr	r3, [pc, #428]	; (5d4 <oscillator_tick+0x1d4>)
     426:	ed86 9a06 	vstr	s18, [r6, #24]
     42a:	781a      	ldrb	r2, [r3, #0]
     42c:	ed86 9a02 	vstr	s18, [r6, #8]
     430:	ed86 9a08 	vstr	s18, [r6, #32]
     434:	ed86 9a04 	vstr	s18, [r6, #16]
     438:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
     43c:	2a00      	cmp	r2, #0
     43e:	f000 80b6 	beq.w	5ae <oscillator_tick+0x1ae>
     442:	ea4f 0a80 	mov.w	sl, r0, lsl #2
     446:	4a64      	ldr	r2, [pc, #400]	; (5d8 <oscillator_tick+0x1d8>)
     448:	4c64      	ldr	r4, [pc, #400]	; (5dc <oscillator_tick+0x1dc>)
     44a:	eef0 9a40 	vmov.f32	s19, s0
     44e:	eb02 0b0a 	add.w	fp, r2, sl
     452:	4a63      	ldr	r2, [pc, #396]	; (5e0 <oscillator_tick+0x1e0>)
     454:	4f63      	ldr	r7, [pc, #396]	; (5e4 <oscillator_tick+0x1e4>)
     456:	4681      	mov	r9, r0
     458:	eb02 030a 	add.w	r3, r2, sl
     45c:	ed9f ca62 	vldr	s24, [pc, #392]	; 5e8 <oscillator_tick+0x1e8>
     460:	eddf ba62 	vldr	s23, [pc, #392]	; 5ec <oscillator_tick+0x1ec>
     464:	4454      	add	r4, sl
     466:	9301      	str	r3, [sp, #4]
     468:	4457      	add	r7, sl
     46a:	4b61      	ldr	r3, [pc, #388]	; (5f0 <oscillator_tick+0x1f0>)
     46c:	ed9f ba61 	vldr	s22, [pc, #388]	; 5f4 <oscillator_tick+0x1f4>
     470:	eddf aa61 	vldr	s21, [pc, #388]	; 5f8 <oscillator_tick+0x1f8>
     474:	ed9f aa61 	vldr	s20, [pc, #388]	; 5fc <oscillator_tick+0x1fc>
     478:	9302      	str	r3, [sp, #8]
     47a:	f8cd a010 	str.w	sl, [sp, #16]
     47e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     482:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
     486:	eeb0 0a69 	vmov.f32	s0, s19
     48a:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
     48e:	4638      	mov	r0, r7
     490:	f8df 8138 	ldr.w	r8, [pc, #312]	; 5cc <oscillator_tick+0x1cc>
     494:	eef4 6ac7 	vcmpe.f32	s13, s14
     498:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
     49c:	eea7 0a8c 	vfma.f32	s0, s15, s24
     4a0:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
     4a4:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
     4a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
     4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b0:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
    return HAL_ERROR;
     4b4:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
}
     4b8:	f106 0608 	add.w	r6, r6, #8
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4bc:	bfcc      	ite	gt
     4be:	2201      	movgt	r2, #1
     4c0:	2200      	movle	r2, #0
     4c2:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hdma);
     4c4:	f005 fb74 	bl	5bb0 <__tExpSmooth_setDest_veneer>
    __HAL_DMA_ENABLE(hdma);
     4c8:	4638      	mov	r0, r7
     4ca:	f8d8 a004 	ldr.w	sl, [r8, #4]
     4ce:	f005 fb8f 	bl	5bf0 <__tExpSmooth_tick_veneer>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d2:	eeb0 1a6a 	vmov.f32	s2, s21
     4d6:	eef0 0a40 	vmov.f32	s1, s0
     4da:	3708      	adds	r7, #8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	eeb0 0a4a 	vmov.f32	s0, s20
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	f004 f9de 	bl	48a0 <LEAF_clip>
     4e4:	eef0 7a4b 	vmov.f32	s15, s22
     4e8:	465b      	mov	r3, fp
     4ea:	4a45      	ldr	r2, [pc, #276]	; (600 <oscillator_tick+0x200>)
     4ec:	4845      	ldr	r0, [pc, #276]	; (604 <oscillator_tick+0x204>)
     4ee:	eef0 0a6d 	vmov.f32	s1, s27
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f2:	eee0 7a2b 	vfma.f32	s15, s0, s23
     4f6:	edd3 5a00 	vldr	s11, [r3]
     4fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fe:	eeb0 0a4d 	vmov.f32	s0, s26
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     502:	ed8d 9a07 	vstr	s18, [sp, #28]
     506:	f10b 0b08 	add.w	fp, fp, #8
     50a:	eba3 030a 	sub.w	r3, r3, sl
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50e:	6013      	str	r3, [r2, #0]
     510:	eebd 7ae7 	vcvt.s32.f32	s14, s15
     514:	9a03      	ldr	r2, [sp, #12]
     516:	ee78 6a67 	vsub.f32	s13, s16, s15
     51a:	ee38 8a68 	vsub.f32	s16, s16, s17
     51e:	ee17 3a10 	vmov	r3, s14
     522:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
     526:	1c59      	adds	r1, r3, #1
     528:	f3c3 030e 	ubfx	r3, r3, #0, #15
     52c:	ee77 7ac6 	vsub.f32	s15, s15, s12
                for (int j = i + 1; j != n; ++j)
                {
                    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&p->_zc, j);
                    if (next->_peak >= threshold)
                    {
                        int period = tZeroCrossingInfo_period(&curr, &next);
     530:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     534:	f3c1 010e 	ubfx	r1, r1, #0, #15
     538:	ee76 6a86 	vadd.f32	s13, s13, s12
     53c:	ed93 7a00 	vldr	s14, [r3]
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     540:	eb00 0381 	add.w	r3, r0, r1, lsl #2
        if (info._periodicity > collector->_fundamental._periodicity &&
     544:	9904      	ldr	r1, [sp, #16]
     546:	a807      	add	r0, sp, #28
     548:	ed93 6a00 	vldr	s12, [r3]
     54c:	4b2e      	ldr	r3, [pc, #184]	; (608 <oscillator_tick+0x208>)
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     54e:	ee67 7a86 	vmul.f32	s15, s15, s12
        if (info._periodicity > collector->_fundamental._periodicity &&
     552:	440b      	add	r3, r1
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     554:	4629      	mov	r1, r5
     556:	3501      	adds	r5, #1
     558:	eee6 7a87 	vfma.f32	s15, s13, s14
     55c:	ed93 7a00 	vldr	s14, [r3]
        if (info._periodicity > collector->_fundamental._periodicity &&
     560:	9b02      	ldr	r3, [sp, #8]
     562:	ee27 7a25 	vmul.f32	s14, s14, s11
            float periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     566:	f853 8b04 	ldr.w	r8, [r3], #4
     56a:	9302      	str	r3, [sp, #8]
     56c:	464b      	mov	r3, r9
            if (periodicity_diff <= collector->_harmonic_threshold)
     56e:	eea7 0a87 	vfma.f32	s0, s15, s14
     572:	47c0      	blx	r8
     574:	eddd 7a07 	vldr	s15, [sp, #28]
                collector->_fundamental._i1 = info._i1;
     578:	9b01      	ldr	r3, [sp, #4]
            if (periodicity_diff <= collector->_harmonic_threshold)
     57a:	ee6c 7aa7 	vmul.f32	s15, s25, s15
                            float periodicity = 1.0f - (count * p->_weight);
     57e:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
            if (periodicity_diff <= collector->_harmonic_threshold)
     582:	461a      	mov	r2, r3
                collector->_fundamental._i2 = info._i2;
     584:	3308      	adds	r3, #8
                collector->_fundamental._i1 = info._i1;
     586:	ee67 8a28 	vmul.f32	s17, s14, s17
                            if (count == 0)
     58a:	9301      	str	r3, [sp, #4]
     58c:	ee27 7a87 	vmul.f32	s14, s15, s14
    unsigned int trailing_edge = 0;
     590:	4b10      	ldr	r3, [pc, #64]	; (5d4 <oscillator_tick+0x1d4>)
     592:	ee68 8aa7 	vmul.f32	s17, s17, s15
    if (info._period != -1.0f)
     596:	edc2 7a00 	vstr	s15, [r2]
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	ee28 8a07 	vmul.f32	s16, s16, s14
     5a0:	42ab      	cmp	r3, r5
     5a2:	ed46 8a02 	vstr	s17, [r6, #-8]
                                for (int d = start - 1; d > p->_min_period; --d)
     5a6:	ed86 8a04 	vstr	s16, [r6, #16]
                                for (int d = start + 1; d < mid; ++d)
     5aa:	f73f af68 	bgt.w	47e <oscillator_tick+0x7e>
                            float periodicity = 1.0f - (count * p->_weight);
     5ae:	4b07      	ldr	r3, [pc, #28]	; (5cc <oscillator_tick+0x1cc>)
     5b0:	9905      	ldr	r1, [sp, #20]
            if (periodicity_diff <= collector->_harmonic_threshold)
     5b2:	685b      	ldr	r3, [r3, #4]
     5b4:	4a15      	ldr	r2, [pc, #84]	; (60c <oscillator_tick+0x20c>)
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5b6:	1a5b      	subs	r3, r3, r1
     5b8:	6013      	str	r3, [r2, #0]
     5ba:	b009      	add	sp, #36	; 0x24
     5bc:	ecbd 8b0c 	vpop	{d8-d13}
     5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	20019e36 	.word	0x20019e36
     5c8:	200054fc 	.word	0x200054fc
     5cc:	e0001000 	.word	0xe0001000
	*ptr++ = (BYTE)val; val >>= 8;
     5d0:	00000000 	.word	0x00000000
     5d4:	20000068 	.word	0x20000068
     5d8:	200050c0 	.word	0x200050c0
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5dc:	2001a7fc 	.word	0x2001a7fc
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	20017888 	.word	0x20017888
     5e4:	20005600 	.word	0x20005600
     5e8:	3c23d70a 	.word	0x3c23d70a
		*d++ = (BYTE)val;
     5ec:	42c80000 	.word	0x42c80000
     5f0:	20005ae4 	.word	0x20005ae4
     5f4:	46800000 	.word	0x46800000
	*ptr++ = (BYTE)val; val >>= 8;
     5f8:	43480000 	.word	0x43480000
     5fc:	c3480000 	.word	0xc3480000
     600:	20017a04 	.word	0x20017a04
     604:	3001a000 	.word	0x3001a000
}
     608:	20005178 	.word	0x20005178
	*ptr++ = (BYTE)val; val >>= 8;
     60c:	20017a1c 	.word	0x20017a1c
	*ptr++ = (BYTE)val; val >>= 8;
     610:	f3af 8000 	nop.w
     614:	f3af 8000 	nop.w
	*ptr++ = (BYTE)val; val >>= 8;
     618:	f3af 8000 	nop.w
	*ptr++ = (BYTE)val;
     61c:	f3af 8000 	nop.w

00000620 <sawSquareTick>:
}
     620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const BYTE *s = (const BYTE*)src;
     624:	4605      	mov	r5, r0
     626:	4c1a      	ldr	r4, [pc, #104]	; (690 <sawSquareTick+0x70>)
     628:	eb03 0041 	add.w	r0, r3, r1, lsl #1
			*d++ = *s++;
     62c:	4617      	mov	r7, r2
		} while (--cnt);
     62e:	4688      	mov	r8, r1
			*d++ = *s++;
     630:	461e      	mov	r6, r3
     632:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		} while (--cnt);
     636:	ed2d 8b02 	vpush	{d8}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     63a:	eeb0 8a60 	vmov.f32	s16, s1
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     63e:	b082      	sub	sp, #8
     640:	9001      	str	r0, [sp, #4]
     642:	f005 f9ad 	bl	59a0 <tMBSawPulse_setFreq>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     646:	9801      	ldr	r0, [sp, #4]
     648:	eeb0 0a48 	vmov.f32	s0, s16
     64c:	f005 faf8 	bl	5c40 <__tMBSawPulse_setShape_veneer>
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     650:	9801      	ldr	r0, [sp, #4]
     652:	b977      	cbnz	r7, 672 <sawSquareTick+0x52>
		*d++ = (BYTE)val;
     654:	f004 faa4 	bl	4ba0 <tMBSawPulse_tick>
     658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     65c:	edd5 7a00 	vldr	s15, [r5]
     660:	eee0 7a07 	vfma.f32	s15, s0, s14
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	edc5 7a00 	vstr	s15, [r5]
			pte[PTE_System] = sys;				/* System type */
     668:	b002      	add	sp, #8
     66a:	ecbd 8b02 	vpop	{d8}
	*ptr++ = (BYTE)val; val >>= 8;
     66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     672:	4a08      	ldr	r2, [pc, #32]	; (694 <sawSquareTick+0x74>)
     674:	4b08      	ldr	r3, [pc, #32]	; (698 <sawSquareTick+0x78>)
	*ptr++ = (BYTE)val; val >>= 8;
     676:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     67a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
     67e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	ed96 0a00 	vldr	s0, [r6]
			pte[PTE_EdHead] = 254;				/* End head */
     686:	f005 f9cb 	bl	5a20 <tMBSawPulse_sync>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     68a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
     68c:	e7e2      	b.n	654 <sawSquareTick+0x34>
     68e:	bf00      	nop
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     690:	20005a8c 	.word	0x20005a8c
			pte[PTE_EdHead] = 254;				/* End head */
     694:	2401d078 	.word	0x2401d078
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     698:	20017888 	.word	0x20017888
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	f3af 8000 	nop.w

000006a0 <sineTriTick>:
	*ptr++ = (BYTE)val;
     6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*ptr++ = (BYTE)val; val >>= 8;
     6a4:	4605      	mov	r5, r0
     6a6:	4c1a      	ldr	r4, [pc, #104]	; (710 <sineTriTick+0x70>)
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ac:	4617      	mov	r7, r2
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	4688      	mov	r8, r1
     6b0:	461e      	mov	r6, r3
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     6b6:	ed2d 8b02 	vpush	{d8}
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ba:	eeb0 8a60 	vmov.f32	s16, s1
     6be:	b082      	sub	sp, #8
     6c0:	9001      	str	r0, [sp, #4]
     6c2:	f005 f9e1 	bl	5a88 <__tMBSineTri_setFreq_veneer>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c6:	9801      	ldr	r0, [sp, #4]
     6c8:	eeb0 0a48 	vmov.f32	s0, s16
     6cc:	f005 fa50 	bl	5b70 <__tMBSineTri_setShape_veneer>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6d0:	9801      	ldr	r0, [sp, #4]
     6d2:	b977      	cbnz	r7, 6f2 <sineTriTick+0x52>
     6d4:	f005 fa84 	bl	5be0 <__tMBSineTri_tick_veneer>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			sys = 0x0C;		/* FAT32X */
     6dc:	edd5 7a00 	vldr	s15, [r5]
	const BYTE *s = (const BYTE*)src;
     6e0:	eee0 7a07 	vfma.f32	s15, s0, s14
     6e4:	edc5 7a00 	vstr	s15, [r5]
			*d++ = *s++;
     6e8:	b002      	add	sp, #8
		} while (--cnt);
     6ea:	ecbd 8b02 	vpop	{d8}
			*d++ = *s++;
     6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} while (--cnt);
     6f2:	4a08      	ldr	r2, [pc, #32]	; (714 <sineTriTick+0x74>)
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f4:	4b08      	ldr	r3, [pc, #32]	; (718 <sineTriTick+0x78>)
     6f6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     6fa:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     6fe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     702:	ed96 0a00 	vldr	s0, [r6]
     706:	f005 f9ff 	bl	5b08 <__tMBSineTri_sync_veneer>
     70a:	9801      	ldr	r0, [sp, #4]
     70c:	e7e2      	b.n	6d4 <sineTriTick+0x34>
     70e:	bf00      	nop
     710:	20005b48 	.word	0x20005b48
     714:	2401d078 	.word	0x2401d078
     718:	20017888 	.word	0x20017888
     71c:	f3af 8000 	nop.w

00000720 <sawTick>:
     720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     724:	4c14      	ldr	r4, [pc, #80]	; (778 <sawTick+0x58>)
     726:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
     728:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     72c:	b082      	sub	sp, #8
     72e:	4617      	mov	r7, r2
     730:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
     732:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     736:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
     738:	9001      	str	r0, [sp, #4]
     73a:	f005 f9c1 	bl	5ac0 <__tMBSaw_setFreq_veneer>
    if (sync)
     73e:	9801      	ldr	r0, [sp, #4]
     740:	b967      	cbnz	r7, 75c <sawTick+0x3c>
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
     742:	f005 fa1d 	bl	5b80 <__tMBSaw_tick_veneer>
     746:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     74a:	edd5 7a00 	vldr	s15, [r5]
     74e:	eee0 7a07 	vfma.f32	s15, s0, s14
     752:	edc5 7a00 	vstr	s15, [r5]
}
     756:	b002      	add	sp, #8
     758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     75c:	4a07      	ldr	r2, [pc, #28]	; (77c <sawTick+0x5c>)
     75e:	4b08      	ldr	r3, [pc, #32]	; (780 <sawTick+0x60>)
     760:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     764:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     768:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     76c:	ed96 0a00 	vldr	s0, [r6]
     770:	f005 f9ba 	bl	5ae8 <__tMBSaw_sync_veneer>
     774:	9801      	ldr	r0, [sp, #4]
     776:	e7e4      	b.n	742 <sawTick+0x22>
     778:	20005a74 	.word	0x20005a74
     77c:	2401d078 	.word	0x2401d078
     780:	20017888 	.word	0x20017888
     784:	f3af 8000 	nop.w
     788:	f3af 8000 	nop.w
     78c:	f3af 8000 	nop.w
     790:	f3af 8000 	nop.w
     794:	f3af 8000 	nop.w
     798:	f3af 8000 	nop.w
     79c:	f3af 8000 	nop.w

000007a0 <pulseTick>:
{
     7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7a4:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
     7a6:	4c1a      	ldr	r4, [pc, #104]	; (810 <pulseTick+0x70>)
     7a8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     7ac:	4617      	mov	r7, r2
     7ae:	4688      	mov	r8, r1
     7b0:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
     7b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     7b6:	ed2d 8b02 	vpush	{d8}
     7ba:	eeb0 8a60 	vmov.f32	s16, s1
     7be:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
     7c0:	9001      	str	r0, [sp, #4]
     7c2:	f005 f9f9 	bl	5bb8 <__tMBPulse_setFreq_veneer>
    tMBPulse_setWidth(&pulse[v][string], shape);
     7c6:	9801      	ldr	r0, [sp, #4]
     7c8:	eeb0 0a48 	vmov.f32	s0, s16
     7cc:	f005 fa30 	bl	5c30 <__tMBPulse_setWidth_veneer>
    if (sync)
     7d0:	9801      	ldr	r0, [sp, #4]
     7d2:	b977      	cbnz	r7, 7f2 <pulseTick+0x52>
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
     7d4:	f005 fa14 	bl	5c00 <__tMBPulse_tick_veneer>
     7d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     7dc:	edd5 7a00 	vldr	s15, [r5]
     7e0:	eee0 7a07 	vfma.f32	s15, s0, s14
     7e4:	edc5 7a00 	vstr	s15, [r5]
}
     7e8:	b002      	add	sp, #8
     7ea:	ecbd 8b02 	vpop	{d8}
     7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     7f2:	4a08      	ldr	r2, [pc, #32]	; (814 <pulseTick+0x74>)
     7f4:	4b08      	ldr	r3, [pc, #32]	; (818 <pulseTick+0x78>)
     7f6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     7fa:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     7fe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     802:	ed96 0a00 	vldr	s0, [r6]
     806:	f005 f95f 	bl	5ac8 <__tMBPulse_sync_veneer>
     80a:	9801      	ldr	r0, [sp, #4]
     80c:	e7e2      	b.n	7d4 <pulseTick+0x34>
     80e:	bf00      	nop
     810:	20005658 	.word	0x20005658
     814:	2401d078 	.word	0x2401d078
     818:	20017888 	.word	0x20017888
     81c:	f3af 8000 	nop.w

00000820 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
     820:	4a0a      	ldr	r2, [pc, #40]	; (84c <sineTick+0x2c>)
     822:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
     826:	b510      	push	{r4, lr}
     828:	4604      	mov	r4, r0
     82a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
     82c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
     830:	9001      	str	r0, [sp, #4]
     832:	f005 f999 	bl	5b68 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
     836:	9801      	ldr	r0, [sp, #4]
     838:	f005 f9a6 	bl	5b88 <__tCycle_tick_veneer>
     83c:	edd4 7a00 	vldr	s15, [r4]
     840:	ee37 0a80 	vadd.f32	s0, s15, s0
     844:	ed84 0a00 	vstr	s0, [r4]
}
     848:	b002      	add	sp, #8
     84a:	bd10      	pop	{r4, pc}
     84c:	20005b30 	.word	0x20005b30
     850:	f3af 8000 	nop.w
     854:	f3af 8000 	nop.w
     858:	f3af 8000 	nop.w
     85c:	f3af 8000 	nop.w

00000860 <triTick>:
{
     860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     864:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
     866:	4c1a      	ldr	r4, [pc, #104]	; (8d0 <triTick+0x70>)
     868:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     86c:	4617      	mov	r7, r2
     86e:	4688      	mov	r8, r1
     870:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
     872:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     876:	ed2d 8b02 	vpush	{d8}
     87a:	eeb0 8a60 	vmov.f32	s16, s1
     87e:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
     880:	9001      	str	r0, [sp, #4]
     882:	f005 f939 	bl	5af8 <__tMBTriangle_setFreq_veneer>
    tMBTriangle_setWidth(&tri[v][string], shape);
     886:	9801      	ldr	r0, [sp, #4]
     888:	eeb0 0a48 	vmov.f32	s0, s16
     88c:	f005 f980 	bl	5b90 <__tMBTriangle_setWidth_veneer>
    if (sync)
     890:	9801      	ldr	r0, [sp, #4]
     892:	b977      	cbnz	r7, 8b2 <triTick+0x52>
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
     894:	f005 f908 	bl	5aa8 <__tMBTriangle_tick_veneer>
     898:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     89c:	edd5 7a00 	vldr	s15, [r5]
     8a0:	eee0 7a07 	vfma.f32	s15, s0, s14
     8a4:	edc5 7a00 	vstr	s15, [r5]
}
     8a8:	b002      	add	sp, #8
     8aa:	ecbd 8b02 	vpop	{d8}
     8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     8b2:	4a08      	ldr	r2, [pc, #32]	; (8d4 <triTick+0x74>)
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <triTick+0x78>)
     8b6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     8ba:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     8be:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     8c2:	ed96 0a00 	vldr	s0, [r6]
     8c6:	f005 f927 	bl	5b18 <__tMBTriangle_sync_veneer>
     8ca:	9801      	ldr	r0, [sp, #4]
     8cc:	e7e2      	b.n	894 <triTick+0x34>
     8ce:	bf00      	nop
     8d0:	20017a5c 	.word	0x20017a5c
     8d4:	2401d078 	.word	0x2401d078
     8d8:	20017888 	.word	0x20017888
     8dc:	f3af 8000 	nop.w

000008e0 <userTick>:
}
     8e0:	4770      	bx	lr
     8e2:	bf00      	nop
     8e4:	f3af 8000 	nop.w
     8e8:	f3af 8000 	nop.w
     8ec:	f3af 8000 	nop.w
     8f0:	f3af 8000 	nop.w
     8f4:	f3af 8000 	nop.w
     8f8:	f3af 8000 	nop.w
     8fc:	f3af 8000 	nop.w

00000900 <filter_tick>:
	interruptChecker = 0;
     900:	2300      	movs	r3, #0
     902:	4a72      	ldr	r2, [pc, #456]	; (acc <filter_tick+0x1cc>)
{
     904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int f = 0; f < filterToTick; f++)
     908:	f8df 81ec 	ldr.w	r8, [pc, #492]	; af8 <filter_tick+0x1f8>
{
     90c:	4604      	mov	r4, r0
     90e:	460d      	mov	r5, r1
     910:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
     914:	7013      	strb	r3, [r2, #0]
{
     916:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
     918:	4a6d      	ldr	r2, [pc, #436]	; (ad0 <filter_tick+0x1d0>)
     91a:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
     91c:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
     920:	f898 3000 	ldrb.w	r3, [r8]
     924:	2b00      	cmp	r3, #0
     926:	f000 80bc 	beq.w	aa2 <filter_tick+0x1a2>
		float enabled = filtParams[FilterEnabled].realVal[string];
     92a:	4e6a      	ldr	r6, [pc, #424]	; (ad4 <filter_tick+0x1d4>)
     92c:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
     930:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     934:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     938:	eeb0 8a40 	vmov.f32	s16, s0
     93c:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
     940:	eef4 8ae7 	vcmpe.f32	s17, s15
     944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     948:	d87b      	bhi.n	a42 <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
     94a:	2b01      	cmp	r3, #1
     94c:	d93b      	bls.n	9c6 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
     94e:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
     952:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     956:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     95a:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
     95e:	eeb4 7ae7 	vcmpe.f32	s14, s15
     962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     966:	bfcc      	ite	gt
     968:	2301      	movgt	r3, #1
     96a:	2300      	movle	r3, #0
     96c:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
     970:	d929      	bls.n	9c6 <filter_tick+0xc6>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     972:	4b59      	ldr	r3, [pc, #356]	; (ad8 <filter_tick+0x1d8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     974:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     978:	eddf 0a58 	vldr	s1, [pc, #352]	; adc <filter_tick+0x1dc>
     97c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     980:	ed9f 1a57 	vldr	s2, [pc, #348]	; ae0 <filter_tick+0x1e0>
     984:	ed9f 0a57 	vldr	s0, [pc, #348]	; ae4 <filter_tick+0x1e4>
     988:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
     98c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     990:	4b55      	ldr	r3, [pc, #340]	; (ae8 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     992:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     996:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     99a:	edd3 6a00 	vldr	s13, [r3]
     99e:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     9a2:	eee8 7a07 	vfma.f32	s15, s16, s14
     9a6:	ee67 0aa0 	vmul.f32	s1, s15, s1
     9aa:	f003 ff79 	bl	48a0 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     9ae:	1cab      	adds	r3, r5, #2
     9b0:	484e      	ldr	r0, [pc, #312]	; (aec <filter_tick+0x1ec>)
     9b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     9b6:	9001      	str	r0, [sp, #4]
     9b8:	f005 f8fa 	bl	5bb0 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     9bc:	9801      	ldr	r0, [sp, #4]
     9be:	f005 f917 	bl	5bf0 <__tExpSmooth_tick_veneer>
     9c2:	ed8d 0a05 	vstr	s0, [sp, #20]
	if (enabledFilt[0])
     9c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     9ca:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
	if (enabledFilt[1])
     9ce:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     9d2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
     9d6:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     9da:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
     9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9e2:	dd07      	ble.n	9f4 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
     9e4:	4b42      	ldr	r3, [pc, #264]	; (af0 <filter_tick+0x1f0>)
     9e6:	462a      	mov	r2, r5
     9e8:	ed9d 0a04 	vldr	s0, [sp, #16]
     9ec:	2100      	movs	r1, #0
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	4620      	mov	r0, r4
     9f2:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
     9f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     9f8:	ed94 0a01 	vldr	s0, [r4, #4]
     9fc:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     a00:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
     a04:	eea7 0a27 	vfma.f32	s0, s14, s15
     a08:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
     a0c:	f1b8 0f00 	cmp.w	r8, #0
     a10:	d009      	beq.n	a26 <filter_tick+0x126>
		filterTick[1](&samples[1], 1, cutoff[1], string);
     a12:	4b37      	ldr	r3, [pc, #220]	; (af0 <filter_tick+0x1f0>)
     a14:	462a      	mov	r2, r5
     a16:	ed9d 0a05 	vldr	s0, [sp, #20]
     a1a:	2101      	movs	r1, #1
     a1c:	685b      	ldr	r3, [r3, #4]
     a1e:	1d20      	adds	r0, r4, #4
     a20:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
     a22:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
     a26:	4b2a      	ldr	r3, [pc, #168]	; (ad0 <filter_tick+0x1d0>)
     a28:	4a32      	ldr	r2, [pc, #200]	; (af4 <filter_tick+0x1f4>)
     a2a:	685b      	ldr	r3, [r3, #4]
     a2c:	1bdb      	subs	r3, r3, r7
     a2e:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
     a30:	edd4 7a00 	vldr	s15, [r4]
}
     a34:	eea7 0a88 	vfma.f32	s0, s15, s16
     a38:	b006      	add	sp, #24
     a3a:	ecbd 8b02 	vpop	{d8}
     a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     a42:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     a46:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
     a4a:	eddf 0a24 	vldr	s1, [pc, #144]	; adc <filter_tick+0x1dc>
     a4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     a52:	ed9f 1a23 	vldr	s2, [pc, #140]	; ae0 <filter_tick+0x1e0>
     a56:	ed9f 0a23 	vldr	s0, [pc, #140]	; ae4 <filter_tick+0x1e4>
     a5a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
     a5e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     a62:	4b21      	ldr	r3, [pc, #132]	; (ae8 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     a68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     a6c:	ed93 7a00 	vldr	s14, [r3]
     a70:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     a74:	eee7 7a26 	vfma.f32	s15, s14, s13
     a78:	ee67 0aa0 	vmul.f32	s1, s15, s1
     a7c:	f003 ff10 	bl	48a0 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     a80:	481a      	ldr	r0, [pc, #104]	; (aec <filter_tick+0x1ec>)
     a82:	00ab      	lsls	r3, r5, #2
     a84:	4418      	add	r0, r3
     a86:	9001      	str	r0, [sp, #4]
     a88:	f005 f892 	bl	5bb0 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     a8c:	9801      	ldr	r0, [sp, #4]
     a8e:	f005 f8af 	bl	5bf0 <__tExpSmooth_tick_veneer>
	for (int f = 0; f < filterToTick; f++)
     a92:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     a96:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
     a9a:	2b01      	cmp	r3, #1
     a9c:	f63f af57 	bhi.w	94e <filter_tick+0x4e>
     aa0:	e791      	b.n	9c6 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <filter_tick+0x1d4>)
     aa4:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
     aa8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     aac:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     ab0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
     ab4:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     ab8:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     abc:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
     ac0:	eea7 0a87 	vfma.f32	s0, s15, s14
     ac4:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
     ac8:	e7ad      	b.n	a26 <filter_tick+0x126>
     aca:	bf00      	nop
     acc:	20019e36 	.word	0x20019e36
     ad0:	e0001000 	.word	0xe0001000
     ad4:	2001a7fc 	.word	0x2001a7fc
     ad8:	2001b308 	.word	0x2001b308
     adc:	420fb824 	.word	0x420fb824
     ae0:	457ff000 	.word	0x457ff000
     ae4:	00000000 	.word	0x00000000
     ae8:	20000b0c 	.word	0x20000b0c
     aec:	20005080 	.word	0x20005080
     af0:	200050a0 	.word	0x200050a0
     af4:	20017a0c 	.word	0x20017a0c
     af8:	20000004 	.word	0x20000004
     afc:	f3af 8000 	nop.w

00000b00 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     b00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     b04:	4b0d      	ldr	r3, [pc, #52]	; (b3c <lowpassTick+0x3c>)
{
     b06:	b530      	push	{r4, r5, lr}
     b08:	4605      	mov	r5, r0
     b0a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     b0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     b10:	0094      	lsls	r4, r2, #2
     b12:	9001      	str	r0, [sp, #4]
     b14:	f004 ffdc 	bl	5ad0 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     b18:	ed95 0a00 	vldr	s0, [r5]
     b1c:	9801      	ldr	r0, [sp, #4]
     b1e:	f005 f817 	bl	5b50 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     b22:	4a07      	ldr	r2, [pc, #28]	; (b40 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     b24:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     b28:	4422      	add	r2, r4
     b2a:	edd2 7a00 	vldr	s15, [r2]
     b2e:	ee27 0a80 	vmul.f32	s0, s15, s0
     b32:	ed85 0a00 	vstr	s0, [r5]
}
     b36:	b003      	add	sp, #12
     b38:	bd30      	pop	{r4, r5, pc}
     b3a:	bf00      	nop
     b3c:	20005358 	.word	0x20005358
     b40:	20005090 	.word	0x20005090
     b44:	f3af 8000 	nop.w
     b48:	f3af 8000 	nop.w
     b4c:	f3af 8000 	nop.w
     b50:	f3af 8000 	nop.w
     b54:	f3af 8000 	nop.w
     b58:	f3af 8000 	nop.w
     b5c:	f3af 8000 	nop.w

00000b60 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     b60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     b64:	4b0d      	ldr	r3, [pc, #52]	; (b9c <highpassTick+0x3c>)
{
     b66:	b530      	push	{r4, r5, lr}
     b68:	4605      	mov	r5, r0
     b6a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     b6c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     b70:	0094      	lsls	r4, r2, #2
     b72:	9001      	str	r0, [sp, #4]
     b74:	f004 ffac 	bl	5ad0 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
     b78:	ed95 0a00 	vldr	s0, [r5]
     b7c:	9801      	ldr	r0, [sp, #4]
     b7e:	f004 ffe7 	bl	5b50 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     b82:	4a07      	ldr	r2, [pc, #28]	; (ba0 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
     b84:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     b88:	4422      	add	r2, r4
     b8a:	edd2 7a00 	vldr	s15, [r2]
     b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
     b92:	ed85 0a00 	vstr	s0, [r5]
}
     b96:	b003      	add	sp, #12
     b98:	bd30      	pop	{r4, r5, pc}
     b9a:	bf00      	nop
     b9c:	20005144 	.word	0x20005144
     ba0:	20005090 	.word	0x20005090
     ba4:	f3af 8000 	nop.w
     ba8:	f3af 8000 	nop.w
     bac:	f3af 8000 	nop.w
     bb0:	f3af 8000 	nop.w
     bb4:	f3af 8000 	nop.w
     bb8:	f3af 8000 	nop.w
     bbc:	f3af 8000 	nop.w

00000bc0 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     bc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     bc4:	4b0d      	ldr	r3, [pc, #52]	; (bfc <bandpassTick+0x3c>)
{
     bc6:	b530      	push	{r4, r5, lr}
     bc8:	4605      	mov	r5, r0
     bca:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     bcc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     bd0:	0094      	lsls	r4, r2, #2
     bd2:	9001      	str	r0, [sp, #4]
     bd4:	f004 ff7c 	bl	5ad0 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     bd8:	ed95 0a00 	vldr	s0, [r5]
     bdc:	9801      	ldr	r0, [sp, #4]
     bde:	f004 ffb7 	bl	5b50 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     be2:	4a07      	ldr	r2, [pc, #28]	; (c00 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     be4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     be8:	4422      	add	r2, r4
     bea:	edd2 7a00 	vldr	s15, [r2]
     bee:	ee27 0a80 	vmul.f32	s0, s15, s0
     bf2:	ed85 0a00 	vstr	s0, [r5]
}
     bf6:	b003      	add	sp, #12
     bf8:	bd30      	pop	{r4, r5, pc}
     bfa:	bf00      	nop
     bfc:	20000afc 	.word	0x20000afc
     c00:	20005090 	.word	0x20005090
     c04:	f3af 8000 	nop.w
     c08:	f3af 8000 	nop.w
     c0c:	f3af 8000 	nop.w
     c10:	f3af 8000 	nop.w
     c14:	f3af 8000 	nop.w
     c18:	f3af 8000 	nop.w
     c1c:	f3af 8000 	nop.w

00000c20 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     c20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     c24:	4b0d      	ldr	r3, [pc, #52]	; (c5c <diodeLowpassTick+0x3c>)
{
     c26:	b530      	push	{r4, r5, lr}
     c28:	4605      	mov	r5, r0
     c2a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     c2c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     c30:	0094      	lsls	r4, r2, #2
     c32:	9001      	str	r0, [sp, #4]
     c34:	f004 ff90 	bl	5b58 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     c38:	ed95 0a00 	vldr	s0, [r5]
     c3c:	9801      	ldr	r0, [sp, #4]
     c3e:	f004 ffd3 	bl	5be8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     c42:	4a07      	ldr	r2, [pc, #28]	; (c60 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     c44:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     c48:	4422      	add	r2, r4
     c4a:	edd2 7a00 	vldr	s15, [r2]
     c4e:	ee27 0a80 	vmul.f32	s0, s15, s0
     c52:	ed85 0a00 	vstr	s0, [r5]
}
     c56:	b003      	add	sp, #12
     c58:	bd30      	pop	{r4, r5, pc}
     c5a:	bf00      	nop
     c5c:	20005030 	.word	0x20005030
     c60:	20005090 	.word	0x20005090
     c64:	f3af 8000 	nop.w
     c68:	f3af 8000 	nop.w
     c6c:	f3af 8000 	nop.w
     c70:	f3af 8000 	nop.w
     c74:	f3af 8000 	nop.w
     c78:	f3af 8000 	nop.w
     c7c:	f3af 8000 	nop.w

00000c80 <VZpeakTick>:
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     c80:	4b09      	ldr	r3, [pc, #36]	; (ca8 <VZpeakTick+0x28>)
     c82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     c86:	b510      	push	{r4, lr}
     c88:	4604      	mov	r4, r0
     c8a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     c8c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c90:	9001      	str	r0, [sp, #4]
     c92:	f004 fefd 	bl	5a90 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
     c96:	9801      	ldr	r0, [sp, #4]
     c98:	ed94 0a00 	vldr	s0, [r4]
     c9c:	f004 ff44 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
     ca0:	ed84 0a00 	vstr	s0, [r4]
}
     ca4:	b002      	add	sp, #8
     ca6:	bd10      	pop	{r4, pc}
     ca8:	200009c4 	.word	0x200009c4
     cac:	f3af 8000 	nop.w
     cb0:	f3af 8000 	nop.w
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <VZlowshelfTick>:
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <VZlowshelfTick+0x28>)
     cc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     cc6:	b510      	push	{r4, lr}
     cc8:	4604      	mov	r4, r0
     cca:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     ccc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     cd0:	9001      	str	r0, [sp, #4]
     cd2:	f004 fedd 	bl	5a90 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
     cd6:	9801      	ldr	r0, [sp, #4]
     cd8:	ed94 0a00 	vldr	s0, [r4]
     cdc:	f004 ff24 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
     ce0:	ed84 0a00 	vstr	s0, [r4]
}
     ce4:	b002      	add	sp, #8
     ce6:	bd10      	pop	{r4, pc}
     ce8:	200009b4 	.word	0x200009b4
     cec:	f3af 8000 	nop.w
     cf0:	f3af 8000 	nop.w
     cf4:	f3af 8000 	nop.w
     cf8:	f3af 8000 	nop.w
     cfc:	f3af 8000 	nop.w

00000d00 <VZhighshelfTick>:
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     d00:	4b09      	ldr	r3, [pc, #36]	; (d28 <VZhighshelfTick+0x28>)
     d02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     d06:	b510      	push	{r4, lr}
     d08:	4604      	mov	r4, r0
     d0a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     d0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     d10:	9001      	str	r0, [sp, #4]
     d12:	f004 febd 	bl	5a90 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
     d16:	9801      	ldr	r0, [sp, #4]
     d18:	ed94 0a00 	vldr	s0, [r4]
     d1c:	f004 ff04 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
     d20:	ed84 0a00 	vstr	s0, [r4]
}
     d24:	b002      	add	sp, #8
     d26:	bd10      	pop	{r4, pc}
     d28:	200009a4 	.word	0x200009a4
     d2c:	f3af 8000 	nop.w
     d30:	f3af 8000 	nop.w
     d34:	f3af 8000 	nop.w
     d38:	f3af 8000 	nop.w
     d3c:	f3af 8000 	nop.w

00000d40 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     d40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d44:	4b0d      	ldr	r3, [pc, #52]	; (d7c <VZbandrejectTick+0x3c>)
{
     d46:	b530      	push	{r4, r5, lr}
     d48:	4605      	mov	r5, r0
     d4a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     d4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     d50:	0094      	lsls	r4, r2, #2
     d52:	9001      	str	r0, [sp, #4]
     d54:	f004 fe9c 	bl	5a90 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     d58:	ed95 0a00 	vldr	s0, [r5]
     d5c:	9801      	ldr	r0, [sp, #4]
     d5e:	f004 fee3 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     d64:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     d68:	4422      	add	r2, r4
     d6a:	edd2 7a00 	vldr	s15, [r2]
     d6e:	ee27 0a80 	vmul.f32	s0, s15, s0
     d72:	ed85 0a00 	vstr	s0, [r5]
}
     d76:	b003      	add	sp, #12
     d78:	bd30      	pop	{r4, r5, pc}
     d7a:	bf00      	nop
     d7c:	20000994 	.word	0x20000994
     d80:	20005090 	.word	0x20005090
     d84:	f3af 8000 	nop.w
     d88:	f3af 8000 	nop.w
     d8c:	f3af 8000 	nop.w
     d90:	f3af 8000 	nop.w
     d94:	f3af 8000 	nop.w
     d98:	f3af 8000 	nop.w
     d9c:	f3af 8000 	nop.w

00000da0 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     da0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     da4:	4b0d      	ldr	r3, [pc, #52]	; (ddc <LadderLowpassTick+0x3c>)
{
     da6:	b530      	push	{r4, r5, lr}
     da8:	4605      	mov	r5, r0
     daa:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     dac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     db0:	0094      	lsls	r4, r2, #2
     db2:	9001      	str	r0, [sp, #4]
     db4:	f004 fec8 	bl	5b48 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     db8:	ed95 0a00 	vldr	s0, [r5]
     dbc:	9801      	ldr	r0, [sp, #4]
     dbe:	f004 feaf 	bl	5b20 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
     dc2:	4a07      	ldr	r2, [pc, #28]	; (de0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     dc4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     dc8:	4422      	add	r2, r4
     dca:	edd2 7a00 	vldr	s15, [r2]
     dce:	ee27 0a80 	vmul.f32	s0, s15, s0
     dd2:	ed85 0a00 	vstr	s0, [r5]
}
     dd6:	b003      	add	sp, #12
     dd8:	bd30      	pop	{r4, r5, pc}
     dda:	bf00      	nop
     ddc:	20000984 	.word	0x20000984
     de0:	20005090 	.word	0x20005090
     de4:	f3af 8000 	nop.w
     de8:	f3af 8000 	nop.w
     dec:	f3af 8000 	nop.w
     df0:	f3af 8000 	nop.w
     df4:	f3af 8000 	nop.w
     df8:	f3af 8000 	nop.w
     dfc:	f3af 8000 	nop.w

00000e00 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     e00:	eb00 0240 	add.w	r2, r0, r0, lsl #1
     e04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
     e08:	eef0 0a40 	vmov.f32	s1, s0
     e0c:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     e0e:	0045      	lsls	r5, r0, #1
     e10:	4b0e      	ldr	r3, [pc, #56]	; (e4c <setFreqMultPitch+0x4c>)
     e12:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
     e16:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     e18:	3020      	adds	r0, #32
     e1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     e1e:	4408      	add	r0, r1
     e20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e24:	ed90 7a02 	vldr	s14, [r0, #8]
     e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
     e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e30:	dd01      	ble.n	e36 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
     e32:	fef8 0a40 	vrinta.f32	s1, s0
	freqMult[osc][string] = powf(1.059463094359295f, pitch);
     e36:	ed9f 0a06 	vldr	s0, [pc, #24]	; e50 <setFreqMultPitch+0x50>
     e3a:	442c      	add	r4, r5
     e3c:	f004 fec4 	bl	5bc8 <__powf_veneer>
     e40:	4b04      	ldr	r3, [pc, #16]	; (e54 <setFreqMultPitch+0x54>)
     e42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     e46:	ed84 0a00 	vstr	s0, [r4]
}
     e4a:	bd38      	pop	{r3, r4, r5, pc}
     e4c:	2001a7fc 	.word	0x2001a7fc
     e50:	3f879c7d 	.word	0x3f879c7d
     e54:	200050c0 	.word	0x200050c0
     e58:	f3af 8000 	nop.w
     e5c:	f3af 8000 	nop.w

00000e60 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     e60:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
     e64:	4b15      	ldr	r3, [pc, #84]	; (ebc <setFreqMultHarm+0x5c>)
     e66:	0042      	lsls	r2, r0, #1
     e68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     e6c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
     e70:	3020      	adds	r0, #32
     e72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     e76:	4408      	add	r0, r1
     e78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e7c:	ed90 7a02 	vldr	s14, [r0, #8]
     e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
     e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e88:	dd01      	ble.n	e8e <setFreqMultHarm+0x2e>
		harm = roundf(harm);
     e8a:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
     e8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
     e92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
     e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e9a:	db08      	blt.n	eae <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
     e9c:	ee30 0a27 	vadd.f32	s0, s0, s15
     ea0:	4b07      	ldr	r3, [pc, #28]	; (ec0 <setFreqMultHarm+0x60>)
     ea2:	4411      	add	r1, r2
     ea4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     ea8:	ed81 0a00 	vstr	s0, [r1]
}
     eac:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
     eae:	ee30 0a67 	vsub.f32	s0, s0, s15
     eb2:	eeb0 7ac0 	vabs.f32	s14, s0
     eb6:	ee87 0a87 	vdiv.f32	s0, s15, s14
     eba:	e7f1      	b.n	ea0 <setFreqMultHarm+0x40>
     ebc:	2001a7fc 	.word	0x2001a7fc
     ec0:	200050c0 	.word	0x200050c0
     ec4:	f3af 8000 	nop.w
     ec8:	f3af 8000 	nop.w
     ecc:	f3af 8000 	nop.w
     ed0:	f3af 8000 	nop.w
     ed4:	f3af 8000 	nop.w
     ed8:	f3af 8000 	nop.w
     edc:	f3af 8000 	nop.w

00000ee0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <lowpassSetQ+0x10>)
     ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eea:	f004 be25 	b.w	5b38 <__tSVF_setQ_veneer>
     eee:	bf00      	nop
     ef0:	20005358 	.word	0x20005358
     ef4:	f3af 8000 	nop.w
     ef8:	f3af 8000 	nop.w
     efc:	f3af 8000 	nop.w

00000f00 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
     f00:	4b03      	ldr	r3, [pc, #12]	; (f10 <highpassSetQ+0x10>)
     f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f0a:	f004 be15 	b.w	5b38 <__tSVF_setQ_veneer>
     f0e:	bf00      	nop
     f10:	20005144 	.word	0x20005144
     f14:	f3af 8000 	nop.w
     f18:	f3af 8000 	nop.w
     f1c:	f3af 8000 	nop.w

00000f20 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
     f20:	4b03      	ldr	r3, [pc, #12]	; (f30 <bandpassSetQ+0x10>)
     f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f2a:	f004 be05 	b.w	5b38 <__tSVF_setQ_veneer>
     f2e:	bf00      	nop
     f30:	20000afc 	.word	0x20000afc
     f34:	f3af 8000 	nop.w
     f38:	f3af 8000 	nop.w
     f3c:	f3af 8000 	nop.w

00000f40 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
     f40:	4b03      	ldr	r3, [pc, #12]	; (f50 <diodeLowpassSetQ+0x10>)
     f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f4a:	f004 bda5 	b.w	5a98 <__tDiodeFilter_setQ_veneer>
     f4e:	bf00      	nop
     f50:	20005030 	.word	0x20005030
     f54:	f3af 8000 	nop.w
     f58:	f3af 8000 	nop.w
     f5c:	f3af 8000 	nop.w

00000f60 <VZpeakSetQ>:
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
     f60:	4b03      	ldr	r3, [pc, #12]	; (f70 <VZpeakSetQ+0x10>)
     f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f6a:	f004 be71 	b.w	5c50 <__tVZFilter_setResonance_veneer>
     f6e:	bf00      	nop
     f70:	200009c4 	.word	0x200009c4
     f74:	f3af 8000 	nop.w
     f78:	f3af 8000 	nop.w
     f7c:	f3af 8000 	nop.w

00000f80 <VZlowshelfSetQ>:
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
     f80:	4b03      	ldr	r3, [pc, #12]	; (f90 <VZlowshelfSetQ+0x10>)
     f82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f8a:	f004 be61 	b.w	5c50 <__tVZFilter_setResonance_veneer>
     f8e:	bf00      	nop
     f90:	200009b4 	.word	0x200009b4
     f94:	f3af 8000 	nop.w
     f98:	f3af 8000 	nop.w
     f9c:	f3af 8000 	nop.w

00000fa0 <VZhighshelfSetQ>:
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
     fa0:	4b03      	ldr	r3, [pc, #12]	; (fb0 <VZhighshelfSetQ+0x10>)
     fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     faa:	f004 be51 	b.w	5c50 <__tVZFilter_setResonance_veneer>
     fae:	bf00      	nop
     fb0:	200009a4 	.word	0x200009a4
     fb4:	f3af 8000 	nop.w
     fb8:	f3af 8000 	nop.w
     fbc:	f3af 8000 	nop.w

00000fc0 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
     fc0:	4b03      	ldr	r3, [pc, #12]	; (fd0 <VZbandrejectSetQ+0x10>)
     fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     fca:	f004 be41 	b.w	5c50 <__tVZFilter_setResonance_veneer>
     fce:	bf00      	nop
     fd0:	20000994 	.word	0x20000994
     fd4:	f3af 8000 	nop.w
     fd8:	f3af 8000 	nop.w
     fdc:	f3af 8000 	nop.w

00000fe0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
     fe0:	4b03      	ldr	r3, [pc, #12]	; (ff0 <LadderLowpassSetQ+0x10>)
     fe2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     fe6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     fea:	f004 bda9 	b.w	5b40 <__tLadderFilter_setQ_veneer>
     fee:	bf00      	nop
     ff0:	20000984 	.word	0x20000984
     ff4:	f3af 8000 	nop.w
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <lowpassSetGain>:
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1000:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1004:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1008:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    100a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    100e:	4605      	mov	r5, r0
    1010:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1012:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1016:	eeb0 0a67 	vmov.f32	s0, s15
    101a:	f004 fd89 	bl	5b30 <__fasterdbtoa_veneer>
    101e:	4b03      	ldr	r3, [pc, #12]	; (102c <lowpassSetGain+0x2c>)
    1020:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1024:	ed84 0a00 	vstr	s0, [r4]
}
    1028:	bd38      	pop	{r3, r4, r5, pc}
    102a:	bf00      	nop
    102c:	20005090 	.word	0x20005090
    1030:	f3af 8000 	nop.w
    1034:	f3af 8000 	nop.w
    1038:	f3af 8000 	nop.w
    103c:	f3af 8000 	nop.w

00001040 <highpassSetGain>:
    1040:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1044:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1048:	b538      	push	{r3, r4, r5, lr}
    104a:	eee0 7a07 	vfma.f32	s15, s0, s14
    104e:	4605      	mov	r5, r0
    1050:	460c      	mov	r4, r1
    1052:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1056:	eeb0 0a67 	vmov.f32	s0, s15
    105a:	f004 fd69 	bl	5b30 <__fasterdbtoa_veneer>
    105e:	4b03      	ldr	r3, [pc, #12]	; (106c <highpassSetGain+0x2c>)
    1060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1064:	ed84 0a00 	vstr	s0, [r4]
    1068:	bd38      	pop	{r3, r4, r5, pc}
    106a:	bf00      	nop
    106c:	20005090 	.word	0x20005090
    1070:	f3af 8000 	nop.w
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <bandpassSetGain>:
    1080:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1084:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1088:	b538      	push	{r3, r4, r5, lr}
    108a:	eee0 7a07 	vfma.f32	s15, s0, s14
    108e:	4605      	mov	r5, r0
    1090:	460c      	mov	r4, r1
    1092:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1096:	eeb0 0a67 	vmov.f32	s0, s15
    109a:	f004 fd49 	bl	5b30 <__fasterdbtoa_veneer>
    109e:	4b03      	ldr	r3, [pc, #12]	; (10ac <bandpassSetGain+0x2c>)
    10a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    10a4:	ed84 0a00 	vstr	s0, [r4]
    10a8:	bd38      	pop	{r3, r4, r5, pc}
    10aa:	bf00      	nop
    10ac:	20005090 	.word	0x20005090
    10b0:	f3af 8000 	nop.w
    10b4:	f3af 8000 	nop.w
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <diodeLowpassSetGain>:
    10c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    10c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    10c8:	b538      	push	{r3, r4, r5, lr}
    10ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    10ce:	4605      	mov	r5, r0
    10d0:	460c      	mov	r4, r1
    10d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    10d6:	eeb0 0a67 	vmov.f32	s0, s15
    10da:	f004 fd29 	bl	5b30 <__fasterdbtoa_veneer>
    10de:	4b03      	ldr	r3, [pc, #12]	; (10ec <diodeLowpassSetGain+0x2c>)
    10e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    10e4:	ed84 0a00 	vstr	s0, [r4]
    10e8:	bd38      	pop	{r3, r4, r5, pc}
    10ea:	bf00      	nop
    10ec:	20005090 	.word	0x20005090
    10f0:	f3af 8000 	nop.w
    10f4:	f3af 8000 	nop.w
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <VZpeakSetGain>:
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1100:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1104:	ed9f 7a09 	vldr	s14, [pc, #36]	; 112c <VZpeakSetGain+0x2c>
{
    1108:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    110a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    110e:	4605      	mov	r5, r0
    1110:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1116:	eeb0 0a67 	vmov.f32	s0, s15
    111a:	f004 fd09 	bl	5b30 <__fasterdbtoa_veneer>
    111e:	4804      	ldr	r0, [pc, #16]	; (1130 <VZpeakSetGain+0x30>)
    1120:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1128:	f004 bcd6 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    112c:	42480000 	.word	0x42480000
    1130:	200009c4 	.word	0x200009c4
    1134:	f3af 8000 	nop.w
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <VZlowshelfSetGain>:
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1140:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1144:	ed9f 7a09 	vldr	s14, [pc, #36]	; 116c <VZlowshelfSetGain+0x2c>
{
    1148:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    114a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    114e:	4605      	mov	r5, r0
    1150:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1156:	eeb0 0a67 	vmov.f32	s0, s15
    115a:	f004 fce9 	bl	5b30 <__fasterdbtoa_veneer>
    115e:	4804      	ldr	r0, [pc, #16]	; (1170 <VZlowshelfSetGain+0x30>)
    1160:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1168:	f004 bcb6 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    116c:	42480000 	.word	0x42480000
    1170:	200009b4 	.word	0x200009b4
    1174:	f3af 8000 	nop.w
    1178:	f3af 8000 	nop.w
    117c:	f3af 8000 	nop.w

00001180 <VZhighshelfSetGain>:
    1180:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1184:	ed9f 7a09 	vldr	s14, [pc, #36]	; 11ac <VZhighshelfSetGain+0x2c>
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	eee0 7a07 	vfma.f32	s15, s0, s14
    118e:	4605      	mov	r5, r0
    1190:	460c      	mov	r4, r1
    1192:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1196:	eeb0 0a67 	vmov.f32	s0, s15
    119a:	f004 fcc9 	bl	5b30 <__fasterdbtoa_veneer>
    119e:	4804      	ldr	r0, [pc, #16]	; (11b0 <VZhighshelfSetGain+0x30>)
    11a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    11a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    11a8:	f004 bc96 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    11ac:	42480000 	.word	0x42480000
    11b0:	200009b4 	.word	0x200009b4
    11b4:	f3af 8000 	nop.w
    11b8:	f3af 8000 	nop.w
    11bc:	f3af 8000 	nop.w

000011c0 <VZbandrejectSetGain>:
    11c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    11c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    11c8:	b538      	push	{r3, r4, r5, lr}
    11ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    11ce:	4605      	mov	r5, r0
    11d0:	460c      	mov	r4, r1
    11d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11d6:	eeb0 0a67 	vmov.f32	s0, s15
    11da:	f004 fca9 	bl	5b30 <__fasterdbtoa_veneer>
    11de:	4b03      	ldr	r3, [pc, #12]	; (11ec <VZbandrejectSetGain+0x2c>)
    11e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    11e4:	ed84 0a00 	vstr	s0, [r4]
    11e8:	bd38      	pop	{r3, r4, r5, pc}
    11ea:	bf00      	nop
    11ec:	20005090 	.word	0x20005090
    11f0:	f3af 8000 	nop.w
    11f4:	f3af 8000 	nop.w
    11f8:	f3af 8000 	nop.w
    11fc:	f3af 8000 	nop.w

00001200 <LadderLowpassSetGain>:
    1200:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1204:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1208:	b538      	push	{r3, r4, r5, lr}
    120a:	eee0 7a07 	vfma.f32	s15, s0, s14
    120e:	4605      	mov	r5, r0
    1210:	460c      	mov	r4, r1
    1212:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1216:	eeb0 0a67 	vmov.f32	s0, s15
    121a:	f004 fc89 	bl	5b30 <__fasterdbtoa_veneer>
    121e:	4b03      	ldr	r3, [pc, #12]	; (122c <LadderLowpassSetGain+0x2c>)
    1220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1224:	ed84 0a00 	vstr	s0, [r4]
    1228:	bd38      	pop	{r3, r4, r5, pc}
    122a:	bf00      	nop
    122c:	20005090 	.word	0x20005090
    1230:	f3af 8000 	nop.w
    1234:	f3af 8000 	nop.w
    1238:	f3af 8000 	nop.w
    123c:	f3af 8000 	nop.w

00001240 <envelope_tick>:
{
    1240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interruptChecker = 0;
    1242:	490e      	ldr	r1, [pc, #56]	; (127c <envelope_tick+0x3c>)
    1244:	2400      	movs	r4, #0
    1246:	4b0e      	ldr	r3, [pc, #56]	; (1280 <envelope_tick+0x40>)
    1248:	700c      	strb	r4, [r1, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    124a:	4a0e      	ldr	r2, [pc, #56]	; (1284 <envelope_tick+0x44>)
    124c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    1250:	4d0d      	ldr	r5, [pc, #52]	; (1288 <envelope_tick+0x48>)
    1252:	3320      	adds	r3, #32
    1254:	6857      	ldr	r7, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
    1256:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    125a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
    125e:	3408      	adds	r4, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    1260:	4628      	mov	r0, r5
    1262:	f004 fc3d 	bl	5ae0 <__tADSRT_tickNoInterp_veneer>
	for (int v = 0; v < NUM_ENV; v++)
    1266:	3508      	adds	r5, #8
    1268:	42b4      	cmp	r4, r6
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    126a:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
    126e:	d1f6      	bne.n	125e <envelope_tick+0x1e>
	timeEnv = DWT->CYCCNT - tempCount1;
    1270:	4b04      	ldr	r3, [pc, #16]	; (1284 <envelope_tick+0x44>)
    1272:	4a06      	ldr	r2, [pc, #24]	; (128c <envelope_tick+0x4c>)
    1274:	685b      	ldr	r3, [r3, #4]
    1276:	1bdb      	subs	r3, r3, r7
    1278:	6013      	str	r3, [r2, #0]
}
    127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    127c:	20019e36 	.word	0x20019e36
    1280:	20017888 	.word	0x20017888
    1284:	e0001000 	.word	0xe0001000
    1288:	20005058 	.word	0x20005058
    128c:	20017a08 	.word	0x20017a08
    1290:	f3af 8000 	nop.w
    1294:	f3af 8000 	nop.w
    1298:	f3af 8000 	nop.w
    129c:	f3af 8000 	nop.w

000012a0 <lfo_tick>:
{
    12a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	interruptChecker = 0;
    12a4:	4a18      	ldr	r2, [pc, #96]	; (1308 <lfo_tick+0x68>)
    12a6:	2400      	movs	r4, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    12a8:	4b18      	ldr	r3, [pc, #96]	; (130c <lfo_tick+0x6c>)
{
    12aa:	b082      	sub	sp, #8
    12ac:	4d18      	ldr	r5, [pc, #96]	; (1310 <lfo_tick+0x70>)
    12ae:	4607      	mov	r7, r0
	interruptChecker = 0;
    12b0:	7014      	strb	r4, [r2, #0]
		float sample = 0.0f;
    12b2:	f04f 0800 	mov.w	r8, #0
    12b6:	4e17      	ldr	r6, [pc, #92]	; (1314 <lfo_tick+0x74>)
    12b8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	uint32_t tempCount1 = DWT->CYCCNT;
    12bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
			lfoShapeTick[i](&sample,i, string);
    12c0:	f8df a058 	ldr.w	sl, [pc, #88]	; 131c <lfo_tick+0x7c>
		if (lfoOn[i])
    12c4:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
    12c8:	4621      	mov	r1, r4
    12ca:	463a      	mov	r2, r7
    12cc:	a801      	add	r0, sp, #4
		float sample = 0.0f;
    12ce:	f8cd 8004 	str.w	r8, [sp, #4]
		if (lfoOn[i])
    12d2:	b193      	cbz	r3, 12fa <lfo_tick+0x5a>
			lfoShapeTick[i](&sample,i, string);
    12d4:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    12d8:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
    12da:	4798      	blx	r3
	for (int i = 0; i < NUM_LFOS; i++)
    12dc:	3508      	adds	r5, #8
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    12de:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    12e0:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    12e2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
    12e6:	d1ed      	bne.n	12c4 <lfo_tick+0x24>
	timeLFO = DWT->CYCCNT - tempCount1;
    12e8:	4b08      	ldr	r3, [pc, #32]	; (130c <lfo_tick+0x6c>)
    12ea:	4a0b      	ldr	r2, [pc, #44]	; (1318 <lfo_tick+0x78>)
    12ec:	685b      	ldr	r3, [r3, #4]
    12ee:	eba3 0309 	sub.w	r3, r3, r9
    12f2:	6013      	str	r3, [r2, #0]
}
    12f4:	b002      	add	sp, #8
    12f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    12fa:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    12fc:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    1300:	3508      	adds	r5, #8
    1302:	2c04      	cmp	r4, #4
    1304:	d1de      	bne.n	12c4 <lfo_tick+0x24>
    1306:	e7ef      	b.n	12e8 <lfo_tick+0x48>
    1308:	20019e36 	.word	0x20019e36
    130c:	e0001000 	.word	0xe0001000
    1310:	20017888 	.word	0x20017888
    1314:	2000527c 	.word	0x2000527c
    1318:	20017a14 	.word	0x20017a14
    131c:	200052e0 	.word	0x200052e0

00001320 <setEnvelopeAttack>:
	a = a + 0.01f;
    1320:	eddf 7a05 	vldr	s15, [pc, #20]	; 1338 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    1324:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <setEnvelopeAttack+0x1c>)
    132a:	ee30 0a27 	vadd.f32	s0, s0, s15
    132e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1332:	f004 bba5 	b.w	5a80 <__tADSRT_setAttack_veneer>
    1336:	bf00      	nop
    1338:	3c23d70a 	.word	0x3c23d70a
    133c:	20005058 	.word	0x20005058

00001340 <setEnvelopeDecay>:
	d = d + 0.01f;
    1340:	eddf 7a05 	vldr	s15, [pc, #20]	; 1358 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    1344:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1348:	4b04      	ldr	r3, [pc, #16]	; (135c <setEnvelopeDecay+0x1c>)
    134a:	ee30 0a27 	vadd.f32	s0, s0, s15
    134e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1352:	f004 bc3d 	b.w	5bd0 <__tADSRT_setDecay_veneer>
    1356:	bf00      	nop
    1358:	3c23d70a 	.word	0x3c23d70a
    135c:	20005058 	.word	0x20005058

00001360 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    1360:	4b03      	ldr	r3, [pc, #12]	; (1370 <setEnvelopeSustain+0x10>)
    1362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    136a:	f004 bc29 	b.w	5bc0 <__tADSRT_setSustain_veneer>
    136e:	bf00      	nop
    1370:	20005058 	.word	0x20005058
    1374:	f3af 8000 	nop.w
    1378:	f3af 8000 	nop.w
    137c:	f3af 8000 	nop.w

00001380 <setEnvelopeRelease>:
	r = r + 0.01f;
    1380:	eddf 7a05 	vldr	s15, [pc, #20]	; 1398 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    1384:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1388:	4b04      	ldr	r3, [pc, #16]	; (139c <setEnvelopeRelease+0x1c>)
    138a:	ee30 0a27 	vadd.f32	s0, s0, s15
    138e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1392:	f004 bc51 	b.w	5c38 <__tADSRT_setRelease_veneer>
    1396:	bf00      	nop
    1398:	3c23d70a 	.word	0x3c23d70a
    139c:	20005058 	.word	0x20005058

000013a0 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    13a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    13a4:	eddf 6a08 	vldr	s13, [pc, #32]	; 13c8 <setEnvelopeLeak+0x28>
    13a8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 13cc <setEnvelopeLeak+0x2c>
    13ac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    13b0:	4b07      	ldr	r3, [pc, #28]	; (13d0 <setEnvelopeLeak+0x30>)
    13b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    13b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    13ba:	eea7 7aa6 	vfma.f32	s14, s15, s13
    13be:	eeb0 0a47 	vmov.f32	s0, s14
    13c2:	f004 bbcd 	b.w	5b60 <__tADSRT_setLeakFactor_veneer>
    13c6:	bf00      	nop
    13c8:	3851b717 	.word	0x3851b717
    13cc:	3f7ffcb9 	.word	0x3f7ffcb9
    13d0:	20005058 	.word	0x20005058
    13d4:	f3af 8000 	nop.w
    13d8:	f3af 8000 	nop.w
    13dc:	f3af 8000 	nop.w

000013e0 <setAmp>:
	amplitude[string] = amp;
    13e0:	4b02      	ldr	r3, [pc, #8]	; (13ec <setAmp+0xc>)
    13e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    13e6:	ed81 0a00 	vstr	s0, [r1]
}
    13ea:	4770      	bx	lr
    13ec:	20000af4 	.word	0x20000af4
    13f0:	f3af 8000 	nop.w
    13f4:	f3af 8000 	nop.w
    13f8:	f3af 8000 	nop.w
    13fc:	f3af 8000 	nop.w

00001400 <setMaster>:
	finalMaster[string] = amp;
    1400:	4b02      	ldr	r3, [pc, #8]	; (140c <setMaster+0xc>)
    1402:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1406:	ed81 0a00 	vstr	s0, [r1]
}
    140a:	4770      	bx	lr
    140c:	200050b0 	.word	0x200050b0
    1410:	f3af 8000 	nop.w
    1414:	f3af 8000 	nop.w
    1418:	f3af 8000 	nop.w
    141c:	f3af 8000 	nop.w

00001420 <setTranspose>:
	transpose = in;
    1420:	4b01      	ldr	r3, [pc, #4]	; (1428 <setTranspose+0x8>)
    1422:	ed83 0a00 	vstr	s0, [r3]
}
    1426:	4770      	bx	lr
    1428:	20017a58 	.word	0x20017a58
    142c:	f3af 8000 	nop.w
    1430:	f3af 8000 	nop.w
    1434:	f3af 8000 	nop.w
    1438:	f3af 8000 	nop.w
    143c:	f3af 8000 	nop.w

00001440 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    1440:	eddf 7a03 	vldr	s15, [pc, #12]	; 1450 <setPitchBendRange+0x10>
    1444:	4b03      	ldr	r3, [pc, #12]	; (1454 <setPitchBendRange+0x14>)
    1446:	ee20 0a27 	vmul.f32	s0, s0, s15
    144a:	ed83 0a00 	vstr	s0, [r3]
}
    144e:	4770      	bx	lr
    1450:	39000200 	.word	0x39000200
    1454:	20000000 	.word	0x20000000
    1458:	f3af 8000 	nop.w
    145c:	f3af 8000 	nop.w

00001460 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1460:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1464:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1494 <setFinalLowpass+0x34>
{
    1468:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    146c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 1498 <setFinalLowpass+0x38>
    1470:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 149c <setFinalLowpass+0x3c>
    1474:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    1478:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    147a:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
    147e:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1480:	f003 fa0e 	bl	48a0 <LEAF_clip>
    1484:	4806      	ldr	r0, [pc, #24]	; (14a0 <setFinalLowpass+0x40>)
    1486:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    148a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    148e:	f004 bb1f 	b.w	5ad0 <__tSVF_setFreqFast_veneer>
    1492:	bf00      	nop
    1494:	420fb824 	.word	0x420fb824
    1498:	457ff000 	.word	0x457ff000
    149c:	00000000 	.word	0x00000000
    14a0:	200050a8 	.word	0x200050a8
    14a4:	f3af 8000 	nop.w
    14a8:	f3af 8000 	nop.w
    14ac:	f3af 8000 	nop.w
    14b0:	f3af 8000 	nop.w
    14b4:	f3af 8000 	nop.w
    14b8:	f3af 8000 	nop.w
    14bc:	f3af 8000 	nop.w

000014c0 <tickMappings>:
{
    14c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
    14c4:	4956      	ldr	r1, [pc, #344]	; (1620 <tickMappings+0x160>)
    14c6:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    14c8:	4a56      	ldr	r2, [pc, #344]	; (1624 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
    14ca:	4b57      	ldr	r3, [pc, #348]	; (1628 <tickMappings+0x168>)
{
    14cc:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    14d0:	700f      	strb	r7, [r1, #0]
{
    14d2:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
    14d4:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
    14d6:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    14d8:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
    14da:	2b00      	cmp	r3, #0
    14dc:	f000 8086 	beq.w	15ec <tickMappings+0x12c>
		for (int v = 0; v < numStringsThisBoard; v++)
    14e0:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1638 <tickMappings+0x178>
    14e4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 163c <tickMappings+0x17c>
    14e8:	f898 2000 	ldrb.w	r2, [r8]
    14ec:	4c4f      	ldr	r4, [pc, #316]	; (162c <tickMappings+0x16c>)
    14ee:	2a00      	cmp	r2, #0
    14f0:	d07c      	beq.n	15ec <tickMappings+0x12c>
    14f2:	46a3      	mov	fp, r4
    14f4:	464e      	mov	r6, r9
    14f6:	2500      	movs	r5, #0
			for (int j = 0; j < mappings[i].numHooks; j++)
    14f8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    14fc:	2800      	cmp	r0, #0
    14fe:	f000 8086 	beq.w	160e <tickMappings+0x14e>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1502:	f8db 101c 	ldr.w	r1, [fp, #28]
    1506:	f8db 2000 	ldr.w	r2, [fp]
    150a:	edd1 7a00 	vldr	s15, [r1]
    150e:	ed92 7a00 	vldr	s14, [r2]
    1512:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    1516:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
    151a:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    151c:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
    1520:	2b00      	cmp	r3, #0
    1522:	d16e      	bne.n	1602 <tickMappings+0x142>
					unsmoothedValue += sum;
    1524:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
    1528:	eddf 7a41 	vldr	s15, [pc, #260]	; 1630 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
    152c:	2801      	cmp	r0, #1
    152e:	d027      	beq.n	1580 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1530:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    1534:	f8db 2008 	ldr.w	r2, [fp, #8]
    1538:	ed91 7a00 	vldr	s14, [r1]
    153c:	ed92 6a00 	vldr	s12, [r2]
    1540:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    1544:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    1548:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    154a:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    154e:	2b00      	cmp	r3, #0
    1550:	d15a      	bne.n	1608 <tickMappings+0x148>
					unsmoothedValue += sum;
    1552:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    1556:	2802      	cmp	r0, #2
    1558:	d012      	beq.n	1580 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    155a:	f8db 1010 	ldr.w	r1, [fp, #16]
    155e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    1562:	ed91 7a00 	vldr	s14, [r1]
    1566:	ed92 6a00 	vldr	s12, [r2]
    156a:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    156e:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    1572:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1574:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    1578:	2800      	cmp	r0, #0
    157a:	d04d      	beq.n	1618 <tickMappings+0x158>
					smoothedValue += sum;
    157c:	ee77 7a87 	vadd.f32	s15, s15, s14
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    1580:	f854 2c04 	ldr.w	r2, [r4, #-4]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    1584:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
    1586:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    158a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    158e:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    1592:	ee37 0a80 	vadd.f32	s0, s15, s0
    1596:	f004 fb0b 	bl	5bb0 <__tExpSmooth_setDest_veneer>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    159a:	4630      	mov	r0, r6
    159c:	f004 fb28 	bl	5bf0 <__tExpSmooth_tick_veneer>
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    15a0:	f854 ac04 	ldr.w	sl, [r4, #-4]
    15a4:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
    15a8:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    15aa:	f8da 2010 	ldr.w	r2, [sl, #16]
    15ae:	4790      	blx	r2
    15b0:	1caa      	adds	r2, r5, #2
    15b2:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
    15b6:	ed81 0a00 	vstr	s0, [r1]
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    15ba:	4629      	mov	r1, r5
    15bc:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
    15c0:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    15c2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    15c6:	6942      	ldr	r2, [r0, #20]
    15c8:	7e00      	ldrb	r0, [r0, #24]
    15ca:	ed9c 0a00 	vldr	s0, [ip]
    15ce:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
    15d0:	f898 2000 	ldrb.w	r2, [r8]
    15d4:	42aa      	cmp	r2, r5
    15d6:	dc8f      	bgt.n	14f8 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
    15d8:	4b13      	ldr	r3, [pc, #76]	; (1628 <tickMappings+0x168>)
    15da:	3701      	adds	r7, #1
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	429f      	cmp	r7, r3
    15e0:	da04      	bge.n	15ec <tickMappings+0x12c>
    15e2:	f109 0908 	add.w	r9, r9, #8
    15e6:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
    15e8:	2a00      	cmp	r2, #0
    15ea:	d182      	bne.n	14f2 <tickMappings+0x32>
	timeMap = DWT->CYCCNT - tempCount1;
    15ec:	4b0d      	ldr	r3, [pc, #52]	; (1624 <tickMappings+0x164>)
    15ee:	9901      	ldr	r1, [sp, #4]
    15f0:	685b      	ldr	r3, [r3, #4]
    15f2:	4a10      	ldr	r2, [pc, #64]	; (1634 <tickMappings+0x174>)
    15f4:	1a5b      	subs	r3, r3, r1
    15f6:	6013      	str	r3, [r2, #0]
}
    15f8:	b003      	add	sp, #12
    15fa:	ecbd 8b02 	vpop	{d8}
    15fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
    1602:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 1630 <tickMappings+0x170>
    1606:	e791      	b.n	152c <tickMappings+0x6c>
					smoothedValue += sum;
    1608:	ee77 7a87 	vadd.f32	s15, s15, s14
    160c:	e7a3      	b.n	1556 <tickMappings+0x96>
			float smoothedValue = 0.0f;
    160e:	eddf 7a08 	vldr	s15, [pc, #32]	; 1630 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
    1612:	eeb0 8a67 	vmov.f32	s16, s15
    1616:	e7b3      	b.n	1580 <tickMappings+0xc0>
					unsmoothedValue += sum;
    1618:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    161c:	e7b0      	b.n	1580 <tickMappings+0xc0>
    161e:	bf00      	nop
    1620:	20019e36 	.word	0x20019e36
    1624:	e0001000 	.word	0xe0001000
    1628:	2001a7f8 	.word	0x2001a7f8
    162c:	20019e74 	.word	0x20019e74
    1630:	00000000 	.word	0x00000000
    1634:	20017a18 	.word	0x20017a18
    1638:	20000052 	.word	0x20000052
    163c:	2000536c 	.word	0x2000536c

00001640 <clipperGainSet>:
	param1[v][string] = fasterdbtoa(value * 24.0f);
    1640:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    1644:	b538      	push	{r3, r4, r5, lr}
    1646:	4605      	mov	r5, r0
    1648:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    164a:	ee20 0a27 	vmul.f32	s0, s0, s15
    164e:	f004 fa6f 	bl	5b30 <__fasterdbtoa_veneer>
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <clipperGainSet+0x24>)
    1654:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    165c:	ed84 0a00 	vstr	s0, [r4]
}
    1660:	bd38      	pop	{r3, r4, r5, pc}
    1662:	bf00      	nop
    1664:	20005538 	.word	0x20005538
    1668:	f3af 8000 	nop.w
    166c:	f3af 8000 	nop.w
    1670:	f3af 8000 	nop.w
    1674:	f3af 8000 	nop.w
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <wavefolderParam1>:
	param1[v][string] = fasterdbtoa(value * 12.0f);
    1680:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    1684:	b538      	push	{r3, r4, r5, lr}
    1686:	4605      	mov	r5, r0
    1688:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    168a:	ee20 0a27 	vmul.f32	s0, s0, s15
    168e:	f004 fa4f 	bl	5b30 <__fasterdbtoa_veneer>
    1692:	4b04      	ldr	r3, [pc, #16]	; (16a4 <wavefolderParam1+0x24>)
    1694:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1698:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    169c:	ed84 0a00 	vstr	s0, [r4]
}
    16a0:	bd38      	pop	{r3, r4, r5, pc}
    16a2:	bf00      	nop
    16a4:	20005538 	.word	0x20005538
    16a8:	f3af 8000 	nop.w
    16ac:	f3af 8000 	nop.w
    16b0:	f3af 8000 	nop.w
    16b4:	f3af 8000 	nop.w
    16b8:	f3af 8000 	nop.w
    16bc:	f3af 8000 	nop.w

000016c0 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    16c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    16c4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    16ca:	4808      	ldr	r0, [pc, #32]	; (16ec <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    16cc:	ee70 6a27 	vadd.f32	s13, s0, s15
    16d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    16d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    16d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    16dc:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    16e0:	ed83 7a00 	vstr	s14, [r3]
}
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	20005158 	.word	0x20005158
    16ec:	20005578 	.word	0x20005578
    16f0:	f3af 8000 	nop.w
    16f4:	f3af 8000 	nop.w
    16f8:	f3af 8000 	nop.w
    16fc:	f3af 8000 	nop.w

00001700 <tiltParam1>:
{
    1700:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1702:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1706:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    170a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    170e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    1712:	0084      	lsls	r4, r0, #2
{
    1714:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1718:	eee0 7a68 	vfms.f32	s15, s0, s17
    171c:	eeb0 0a67 	vmov.f32	s0, s15
    1720:	f004 fa06 	bl	5b30 <__fasterdbtoa_veneer>
    1724:	4808      	ldr	r0, [pc, #32]	; (1748 <tiltParam1+0x48>)
    1726:	4420      	add	r0, r4
    1728:	f004 f9d6 	bl	5ad8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    172c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    1730:	eea8 0a28 	vfma.f32	s0, s16, s17
    1734:	f004 f9fc 	bl	5b30 <__fasterdbtoa_veneer>
    1738:	4804      	ldr	r0, [pc, #16]	; (174c <tiltParam1+0x4c>)
}
    173a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    173e:	4420      	add	r0, r4
}
    1740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    1744:	f004 b9c8 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    1748:	20005af0 	.word	0x20005af0
    174c:	20005b10 	.word	0x20005b10
    1750:	f3af 8000 	nop.w
    1754:	f3af 8000 	nop.w
    1758:	f3af 8000 	nop.w
    175c:	f3af 8000 	nop.w

00001760 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    1760:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    1764:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1798 <tiltParam2+0x38>
    1768:	eddf 0a0c 	vldr	s1, [pc, #48]	; 179c <tiltParam2+0x3c>
    176c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 17a0 <tiltParam2+0x40>
    1770:	eee0 7a07 	vfma.f32	s15, s0, s14
    1774:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 17a4 <tiltParam2+0x44>
{
    1778:	b538      	push	{r3, r4, r5, lr}
    177a:	4605      	mov	r5, r0
    177c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    177e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
    1782:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    1786:	f003 f88b 	bl	48a0 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    178a:	4807      	ldr	r0, [pc, #28]	; (17a8 <tiltParam2+0x48>)
    178c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    1794:	f004 b97c 	b.w	5a90 <__tVZFilter_setFreqFast_veneer>
    1798:	429a0000 	.word	0x429a0000
    179c:	420fb824 	.word	0x420fb824
    17a0:	457ff000 	.word	0x457ff000
    17a4:	00000000 	.word	0x00000000
    17a8:	20000b34 	.word	0x20000b34
    17ac:	f3af 8000 	nop.w
    17b0:	f3af 8000 	nop.w
    17b4:	f3af 8000 	nop.w
    17b8:	f3af 8000 	nop.w
    17bc:	f3af 8000 	nop.w

000017c0 <tiltParam3>:
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    17c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    17c4:	4b06      	ldr	r3, [pc, #24]	; (17e0 <tiltParam3+0x20>)
    17c6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    17ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    17ce:	ee30 0a07 	vadd.f32	s0, s0, s14
    17d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    17d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    17da:	f004 ba39 	b.w	5c50 <__tVZFilter_setResonance_veneer>
    17de:	bf00      	nop
    17e0:	20000b34 	.word	0x20000b34
    17e4:	f3af 8000 	nop.w
    17e8:	f3af 8000 	nop.w
    17ec:	f3af 8000 	nop.w
    17f0:	f3af 8000 	nop.w
    17f4:	f3af 8000 	nop.w
    17f8:	f3af 8000 	nop.w
    17fc:	f3af 8000 	nop.w

00001800 <tiltParam4>:
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1800:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    1804:	ed9f 7a09 	vldr	s14, [pc, #36]	; 182c <tiltParam4+0x2c>
{
    1808:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    180a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    180e:	4605      	mov	r5, r0
    1810:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1812:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1816:	eeb0 0a67 	vmov.f32	s0, s15
    181a:	f004 f9fd 	bl	5c18 <__fastdbtoa_veneer>
    181e:	4804      	ldr	r0, [pc, #16]	; (1830 <tiltParam4+0x30>)
    1820:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1828:	f004 b956 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    182c:	42080000 	.word	0x42080000
    1830:	20000b34 	.word	0x20000b34
    1834:	f3af 8000 	nop.w
    1838:	f3af 8000 	nop.w
    183c:	f3af 8000 	nop.w

00001840 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    1840:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <compressorParam1+0x18>)
    1846:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    184a:	ee20 0a27 	vmul.f32	s0, s0, s15
    184e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1852:	ed83 0a03 	vstr	s0, [r3, #12]
}
    1856:	4770      	bx	lr
    1858:	20000b54 	.word	0x20000b54
    185c:	f3af 8000 	nop.w

00001860 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    1860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1864:	4b0a      	ldr	r3, [pc, #40]	; (1890 <compressorParam2+0x30>)
    1866:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    186a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    186e:	eeb0 7a67 	vmov.f32	s14, s15
    1872:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    1876:	eea0 7a26 	vfma.f32	s14, s0, s13
    187a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    187e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1882:	edd3 6a04 	vldr	s13, [r3, #16]
    1886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    188a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    188e:	4770      	bx	lr
    1890:	20000b54 	.word	0x20000b54
    1894:	f3af 8000 	nop.w
    1898:	f3af 8000 	nop.w
    189c:	f3af 8000 	nop.w

000018a0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    18a0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    18a4:	4b04      	ldr	r3, [pc, #16]	; (18b8 <compressorParam3+0x18>)
    18a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    18aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    18ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    18b2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    18b6:	4770      	bx	lr
    18b8:	20000b54 	.word	0x20000b54
    18bc:	f3af 8000 	nop.w

000018c0 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <compressorParam4+0x30>)
    18c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    18c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 18f4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    18ca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    18ce:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    18d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    18d4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    18d8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    18dc:	ee20 0a07 	vmul.f32	s0, s0, s14
    18e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    18e4:	f004 f9b8 	bl	5c58 <__fasterexpf_veneer>
    18e8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    18ec:	bd10      	pop	{r4, pc}
    18ee:	bf00      	nop
    18f0:	20000b54 	.word	0x20000b54
    18f4:	3a83126f 	.word	0x3a83126f
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1900:	4b0b      	ldr	r3, [pc, #44]	; (1930 <compressorParam5+0x30>)
    1902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    1906:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1934 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    190a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    190e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1910:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    1914:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1918:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    191c:	ee20 0a07 	vmul.f32	s0, s0, s14
    1920:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1924:	f004 f998 	bl	5c58 <__fasterexpf_veneer>
    1928:	ed84 0a02 	vstr	s0, [r4, #8]
}
    192c:	bd10      	pop	{r4, pc}
    192e:	bf00      	nop
    1930:	20000b54 	.word	0x20000b54
    1934:	3a83126f 	.word	0x3a83126f
    1938:	f3af 8000 	nop.w
    193c:	f3af 8000 	nop.w

00001940 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    1940:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1944:	4b05      	ldr	r3, [pc, #20]	; (195c <offsetParam2+0x1c>)
    1946:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    194a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    194e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1952:	eee0 7a07 	vfma.f32	s15, s0, s14
    1956:	edc3 7a00 	vstr	s15, [r3]
}
    195a:	4770      	bx	lr
    195c:	20005558 	.word	0x20005558

00001960 <param2Linear>:
	param2[v][string] = value;
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <param2Linear+0x10>)
    1962:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1966:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    196a:	ed83 0a00 	vstr	s0, [r3]
}
    196e:	4770      	bx	lr
    1970:	20005558 	.word	0x20005558
    1974:	f3af 8000 	nop.w
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <param3Linear>:
	param3[v][string] = value;
    1980:	4b03      	ldr	r3, [pc, #12]	; (1990 <param3Linear+0x10>)
    1982:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1986:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    198a:	ed83 0a00 	vstr	s0, [r3]
}
    198e:	4770      	bx	lr
    1990:	20005578 	.word	0x20005578
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    19a0:	eddf 6a10 	vldr	s13, [pc, #64]	; 19e4 <param3Soft+0x44>
    19a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    19a8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 19e8 <param3Soft+0x48>
    19ac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    19b0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 19ec <param3Soft+0x4c>
    19b4:	eee0 7a26 	vfma.f32	s15, s0, s13
    19b8:	4a0d      	ldr	r2, [pc, #52]	; (19f0 <param3Soft+0x50>)
    19ba:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    19be:	4b0d      	ldr	r3, [pc, #52]	; (19f4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    19c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    19c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    19c8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    19cc:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    19d0:	eee5 6a86 	vfma.f32	s13, s11, s12
    19d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    19d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    19dc:	edc1 6a00 	vstr	s13, [r1]
}
    19e0:	4770      	bx	lr
    19e2:	bf00      	nop
    19e4:	3f7d70a4 	.word	0x3f7d70a4
    19e8:	3c23d70a 	.word	0x3c23d70a
    19ec:	3eaaaaaa 	.word	0x3eaaaaaa
    19f0:	20005578 	.word	0x20005578
    19f4:	20005ac4 	.word	0x20005ac4
    19f8:	f3af 8000 	nop.w
    19fc:	f3af 8000 	nop.w

00001a00 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1a00:	eddf 6a17 	vldr	s13, [pc, #92]	; 1a60 <param3Hard+0x60>
    1a04:	eddf 7a17 	vldr	s15, [pc, #92]	; 1a64 <param3Hard+0x64>
    1a08:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1a68 <param3Hard+0x68>
    1a0c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    1a10:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1a12:	4b16      	ldr	r3, [pc, #88]	; (1a6c <param3Hard+0x6c>)
    1a14:	0045      	lsls	r5, r0, #1
    1a16:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    1a1a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1a1c:	ee27 0a87 	vmul.f32	s0, s15, s14
    1a20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a24:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
    1a28:	f004 f8fe 	bl	5c28 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    1a2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    1a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a34:	d00a      	beq.n	1a4c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    1a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1a3a:	4b0d      	ldr	r3, [pc, #52]	; (1a70 <param3Hard+0x70>)
    1a3c:	442c      	add	r4, r5
    1a3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    1a42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a46:	edc4 7a00 	vstr	s15, [r4]
}
    1a4a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    1a4c:	4b08      	ldr	r3, [pc, #32]	; (1a70 <param3Hard+0x70>)
    1a4e:	442c      	add	r4, r5
    1a50:	eddf 7a08 	vldr	s15, [pc, #32]	; 1a74 <param3Hard+0x74>
    1a54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a58:	edc4 7a00 	vstr	s15, [r4]
}
    1a5c:	bd38      	pop	{r3, r4, r5, pc}
    1a5e:	bf00      	nop
    1a60:	3f7d70a4 	.word	0x3f7d70a4
    1a64:	3c23d70a 	.word	0x3c23d70a
    1a68:	3fc90fdb 	.word	0x3fc90fdb
    1a6c:	20005578 	.word	0x20005578
    1a70:	20005aa4 	.word	0x20005aa4
    1a74:	4479ffff 	.word	0x4479ffff
    1a78:	f3af 8000 	nop.w
    1a7c:	f3af 8000 	nop.w

00001a80 <param4Linear>:
	param4[v][string] = value;
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <param4Linear+0x10>)
    1a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1a86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1a8a:	ed83 0a00 	vstr	s0, [r3]
}
    1a8e:	4770      	bx	lr
    1a90:	20005598 	.word	0x20005598
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <param5Linear>:
	param5[v][string] = value;
    1aa0:	4b03      	ldr	r3, [pc, #12]	; (1ab0 <param5Linear+0x10>)
    1aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1aa6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1aaa:	ed83 0a00 	vstr	s0, [r3]
}
    1aae:	4770      	bx	lr
    1ab0:	200055b8 	.word	0x200055b8
    1ab4:	f3af 8000 	nop.w
    1ab8:	f3af 8000 	nop.w
    1abc:	f3af 8000 	nop.w

00001ac0 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    1ac0:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <param2BC+0x10>)
    1ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1aca:	f004 b8bd 	b.w	5c48 <__tCrusher_setQuality_veneer>
    1ace:	bf00      	nop
    1ad0:	20000b14 	.word	0x20000b14
    1ad4:	f3af 8000 	nop.w
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    1ae0:	4a07      	ldr	r2, [pc, #28]	; (1b00 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    1ae6:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b04 <param3BC+0x24>
    1aea:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1aee:	4b06      	ldr	r3, [pc, #24]	; (1b08 <param3BC+0x28>)
    1af0:	eee7 7a00 	vfma.f32	s15, s14, s0
    1af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1af8:	eeb0 0a67 	vmov.f32	s0, s15
    1afc:	f003 bfd8 	b.w	5ab0 <__tCrusher_setSamplingRatio_veneer>
    1b00:	20000048 	.word	0x20000048
    1b04:	3c23d70a 	.word	0x3c23d70a
    1b08:	20000b14 	.word	0x20000b14
    1b0c:	f3af 8000 	nop.w
    1b10:	f3af 8000 	nop.w
    1b14:	f3af 8000 	nop.w
    1b18:	f3af 8000 	nop.w
    1b1c:	f3af 8000 	nop.w

00001b20 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    1b20:	4b03      	ldr	r3, [pc, #12]	; (1b30 <param4BC+0x10>)
    1b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b2a:	f003 bfc5 	b.w	5ab8 <__tCrusher_setRound_veneer>
    1b2e:	bf00      	nop
    1b30:	20000b14 	.word	0x20000b14
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    1b40:	4b03      	ldr	r3, [pc, #12]	; (1b50 <param5BC+0x10>)
    1b42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b4a:	f003 bfd1 	b.w	5af0 <__tCrusher_setOperation_veneer>
    1b4e:	bf00      	nop
    1b50:	20000b14 	.word	0x20000b14
    1b54:	f3af 8000 	nop.w
    1b58:	f3af 8000 	nop.w
    1b5c:	f3af 8000 	nop.w

00001b60 <fxMixSet>:
	fxMix[v][string] = value;
    1b60:	4b03      	ldr	r3, [pc, #12]	; (1b70 <fxMixSet+0x10>)
    1b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1b66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1b6a:	ed83 0a00 	vstr	s0, [r3]
}
    1b6e:	4770      	bx	lr
    1b70:	200050d8 	.word	0x200050d8
    1b74:	f3af 8000 	nop.w
    1b78:	f3af 8000 	nop.w
    1b7c:	f3af 8000 	nop.w

00001b80 <fxPostGainSet>:
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1b84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1b88:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    1b8e:	4605      	mov	r5, r0
    1b90:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1b96:	eeb0 0a67 	vmov.f32	s0, s15
    1b9a:	f003 ffc9 	bl	5b30 <__fasterdbtoa_veneer>
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <fxPostGainSet+0x2c>)
    1ba0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ba4:	ed84 0a00 	vstr	s0, [r4]
}
    1ba8:	bd38      	pop	{r3, r4, r5, pc}
    1baa:	bf00      	nop
    1bac:	200050f8 	.word	0x200050f8
    1bb0:	f3af 8000 	nop.w
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <wavefolderTick>:
{
    1bc0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1bc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    1bc6:	4d36      	ldr	r5, [pc, #216]	; (1ca0 <wavefolderTick+0xe0>)
    1bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1bcc:	4b35      	ldr	r3, [pc, #212]	; (1ca4 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    1bce:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    1bd2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1bd6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1bda:	4a33      	ldr	r2, [pc, #204]	; (1ca8 <wavefolderTick+0xe8>)
    1bdc:	ed9f 4a33 	vldr	s8, [pc, #204]	; 1cac <wavefolderTick+0xec>
    1be0:	0084      	lsls	r4, r0, #2
    1be2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    1be6:	eddf 3a32 	vldr	s7, [pc, #200]	; 1cb0 <wavefolderTick+0xf0>
{
    1bea:	ed2d 8b02 	vpush	{d8}
    1bee:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1bf2:	ed93 6a00 	vldr	s12, [r3]
    1bf6:	fe88 8a66 	vminnm.f32	s16, s16, s13
    1bfa:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1bfe:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
    1c02:	4b2c      	ldr	r3, [pc, #176]	; (1cb4 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1c04:	ee30 0a06 	vadd.f32	s0, s0, s12
    1c08:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
    1c0c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    1c10:	4a29      	ldr	r2, [pc, #164]	; (1cb8 <wavefolderTick+0xf8>)
    1c12:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1c16:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
    1c1a:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
    1c1e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c22:	4b26      	ldr	r3, [pc, #152]	; (1cbc <wavefolderTick+0xfc>)
    1c24:	ee76 5ae5 	vsub.f32	s11, s13, s11
    1c28:	ed9f 0a25 	vldr	s0, [pc, #148]	; 1cc0 <wavefolderTick+0x100>
    1c2c:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
    1c30:	ee67 7aa3 	vmul.f32	s15, s15, s7
    1c34:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1c38:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1c3c:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
    1c40:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1c48:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    1c4c:	ee36 3ac5 	vsub.f32	s6, s13, s10
    1c50:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c54:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    1c58:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c5c:	ee25 5a23 	vmul.f32	s10, s10, s7
    1c60:	ee76 6ae5 	vsub.f32	s13, s13, s11
    1c64:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1c68:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c6c:	eee7 7a05 	vfma.f32	s15, s14, s10
    1c70:	eeb0 8a67 	vmov.f32	s16, s15
    1c74:	f003 ffd8 	bl	5c28 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    1c78:	4b12      	ldr	r3, [pc, #72]	; (1cc4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c7a:	4813      	ldr	r0, [pc, #76]	; (1cc8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c7c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    1c80:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c82:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    1c84:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c88:	eee8 7ac0 	vfms.f32	s15, s17, s0
    1c8c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c90:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    1c94:	ecbd 8b02 	vpop	{d8}
    1c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c9c:	f003 bf80 	b.w	5ba0 <__tHighpass_tick_veneer>
    1ca0:	20017a88 	.word	0x20017a88
    1ca4:	20005558 	.word	0x20005558
    1ca8:	20005538 	.word	0x20005538
    1cac:	3eaaaaaa 	.word	0x3eaaaaaa
    1cb0:	3fbffff8 	.word	0x3fbffff8
    1cb4:	20005578 	.word	0x20005578
    1cb8:	20005598 	.word	0x20005598
    1cbc:	200055b8 	.word	0x200055b8
    1cc0:	40c90fdb 	.word	0x40c90fdb
    1cc4:	20005158 	.word	0x20005158
    1cc8:	20000ed4 	.word	0x20000ed4
    1ccc:	f3af 8000 	nop.w
    1cd0:	f3af 8000 	nop.w
    1cd4:	f3af 8000 	nop.w
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    1ce0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1ce4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1cfc <chorusParam1+0x1c>
    1ce8:	4b05      	ldr	r3, [pc, #20]	; (1d00 <chorusParam1+0x20>)
    1cea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1cee:	eee0 7a07 	vfma.f32	s15, s0, s14
    1cf2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1cf6:	edc3 7a00 	vstr	s15, [r3]
}
    1cfa:	4770      	bx	lr
    1cfc:	45b4a000 	.word	0x45b4a000
    1d00:	20005538 	.word	0x20005538
    1d04:	f3af 8000 	nop.w
    1d08:	f3af 8000 	nop.w
    1d0c:	f3af 8000 	nop.w
    1d10:	f3af 8000 	nop.w
    1d14:	f3af 8000 	nop.w
    1d18:	f3af 8000 	nop.w
    1d1c:	f3af 8000 	nop.w

00001d20 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    1d20:	eddf 7a05 	vldr	s15, [pc, #20]	; 1d38 <chorusParam2+0x18>
    1d24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1d28:	4b04      	ldr	r3, [pc, #16]	; (1d3c <chorusParam2+0x1c>)
    1d2a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1d2e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1d32:	ed83 0a00 	vstr	s0, [r3]
}
    1d36:	4770      	bx	lr
    1d38:	3dcccccd 	.word	0x3dcccccd
    1d3c:	20005558 	.word	0x20005558

00001d40 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    1d40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1d60 <chorusParam3+0x20>
    1d44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1d48:	eddf 7a06 	vldr	s15, [pc, #24]	; 1d64 <chorusParam3+0x24>
    1d4c:	4b06      	ldr	r3, [pc, #24]	; (1d68 <chorusParam3+0x28>)
    1d4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1d52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d56:	eeb0 0a67 	vmov.f32	s0, s15
    1d5a:	f003 bf05 	b.w	5b68 <__tCycle_setFreq_veneer>
    1d5e:	bf00      	nop
    1d60:	3ecccccd 	.word	0x3ecccccd
    1d64:	3c23d70a 	.word	0x3c23d70a
    1d68:	20005470 	.word	0x20005470
    1d6c:	f3af 8000 	nop.w
    1d70:	f3af 8000 	nop.w
    1d74:	f3af 8000 	nop.w
    1d78:	f3af 8000 	nop.w
    1d7c:	f3af 8000 	nop.w

00001d80 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    1d80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1da0 <chorusParam4+0x20>
    1d84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1d88:	eddf 7a06 	vldr	s15, [pc, #24]	; 1da4 <chorusParam4+0x24>
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <chorusParam4+0x28>)
    1d8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1d92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d96:	eeb0 0a67 	vmov.f32	s0, s15
    1d9a:	f003 bee5 	b.w	5b68 <__tCycle_setFreq_veneer>
    1d9e:	bf00      	nop
    1da0:	3ee38e37 	.word	0x3ee38e37
    1da4:	3c343958 	.word	0x3c343958
    1da8:	20005490 	.word	0x20005490
    1dac:	f3af 8000 	nop.w
    1db0:	f3af 8000 	nop.w
    1db4:	f3af 8000 	nop.w
    1db8:	f3af 8000 	nop.w
    1dbc:	f3af 8000 	nop.w

00001dc0 <chorusTick>:
}
    1dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1dc8 <chorusTick+0x8>
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	80000000 	.word	0x80000000
    1dcc:	f3af 8000 	nop.w
    1dd0:	f3af 8000 	nop.w
    1dd4:	f3af 8000 	nop.w
    1dd8:	f3af 8000 	nop.w
    1ddc:	f3af 8000 	nop.w

00001de0 <shaperTick>:
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1de0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1de4:	4a0e      	ldr	r2, [pc, #56]	; (1e20 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    1de6:	4b0f      	ldr	r3, [pc, #60]	; (1e24 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1de8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    1dec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    1df0:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1df2:	edd2 7a00 	vldr	s15, [r2]
    1df6:	008c      	lsls	r4, r1, #2
    1df8:	ee30 0a27 	vadd.f32	s0, s0, s15
    1dfc:	edd3 7a00 	vldr	s15, [r3]
    1e00:	4b09      	ldr	r3, [pc, #36]	; (1e28 <shaperTick+0x48>)
    1e02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1e06:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e0a:	edd1 0a00 	vldr	s1, [r1]
    1e0e:	f003 fee3 	bl	5bd8 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1e12:	4806      	ldr	r0, [pc, #24]	; (1e2c <shaperTick+0x4c>)
    1e14:	4420      	add	r0, r4
}
    1e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1e1a:	f003 bec1 	b.w	5ba0 <__tHighpass_tick_veneer>
    1e1e:	bf00      	nop
    1e20:	20005558 	.word	0x20005558
    1e24:	20005538 	.word	0x20005538
    1e28:	20005578 	.word	0x20005578
    1e2c:	20000ed4 	.word	0x20000ed4
    1e30:	f3af 8000 	nop.w
    1e34:	f3af 8000 	nop.w
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <blankTick>:
}
    1e40:	4770      	bx	lr
    1e42:	bf00      	nop
    1e44:	f3af 8000 	nop.w
    1e48:	f3af 8000 	nop.w
    1e4c:	f3af 8000 	nop.w
    1e50:	f3af 8000 	nop.w
    1e54:	f3af 8000 	nop.w
    1e58:	f3af 8000 	nop.w
    1e5c:	f3af 8000 	nop.w

00001e60 <tiltFilterTick>:
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1e60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <tiltFilterTick+0x28>)
{
    1e66:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1e68:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1e6c:	008c      	lsls	r4, r1, #2
    1e6e:	f003 fe5b 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    1e72:	4806      	ldr	r0, [pc, #24]	; (1e8c <tiltFilterTick+0x2c>)
    1e74:	4420      	add	r0, r4
    1e76:	f003 fe57 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1e7a:	4805      	ldr	r0, [pc, #20]	; (1e90 <tiltFilterTick+0x30>)
    1e7c:	4420      	add	r0, r4
}
    1e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1e82:	f003 be51 	b.w	5b28 <__tVZFilter_tickEfficient_veneer>
    1e86:	bf00      	nop
    1e88:	20005af0 	.word	0x20005af0
    1e8c:	20005b10 	.word	0x20005b10
    1e90:	20000b34 	.word	0x20000b34
    1e94:	f3af 8000 	nop.w
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <tanhTick>:
    float gain = param1[v][string];
    1ea0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = tanhf(sample + (param2[v][string]*gain));
    1ea4:	4b10      	ldr	r3, [pc, #64]	; (1ee8 <tanhTick+0x48>)
    1ea6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    1eaa:	4810      	ldr	r0, [pc, #64]	; (1eec <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    1eac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    1eb0:	b510      	push	{r4, lr}
    1eb2:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
    1eb6:	008c      	lsls	r4, r1, #2
    1eb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1ebc:	eea6 0a87 	vfma.f32	s0, s13, s14
    1ec0:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
    1ec4:	ee27 0a80 	vmul.f32	s0, s15, s0
    1ec8:	f003 feaa 	bl	5c20 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1ecc:	4808      	ldr	r0, [pc, #32]	; (1ef0 <tanhTick+0x50>)
    1ece:	4420      	add	r0, r4
    1ed0:	f003 fe66 	bl	5ba0 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    1ed4:	4b07      	ldr	r3, [pc, #28]	; (1ef4 <tanhTick+0x54>)
    1ed6:	4423      	add	r3, r4
    1ed8:	edd3 7a00 	vldr	s15, [r3]
}
    1edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    1ee0:	ee20 0a27 	vmul.f32	s0, s0, s15
    1ee4:	f003 be9c 	b.w	5c20 <__tanhf_veneer>
    1ee8:	20005558 	.word	0x20005558
    1eec:	20005538 	.word	0x20005538
    1ef0:	20000ed4 	.word	0x20000ed4
    1ef4:	20005598 	.word	0x20005598
    1ef8:	f3af 8000 	nop.w
    1efc:	f3af 8000 	nop.w

00001f00 <softClipTick>:
    sample = sample * param1[v][string];
    1f00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    1f04:	4a19      	ldr	r2, [pc, #100]	; (1f6c <softClipTick+0x6c>)
    float shape = param3[v][string];
    1f06:	4b1a      	ldr	r3, [pc, #104]	; (1f70 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    1f08:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1f0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f10:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1f74 <softClipTick+0x74>
    float shape = param3[v][string];
    1f14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1f18:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1f1c:	4816      	ldr	r0, [pc, #88]	; (1f78 <softClipTick+0x78>)
{
    1f1e:	b410      	push	{r4}
    sample = sample * param1[v][string];
    1f20:	4c16      	ldr	r4, [pc, #88]	; (1f7c <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1f22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    1f26:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    1f2a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
    1f2e:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    1f32:	4b13      	ldr	r3, [pc, #76]	; (1f80 <softClipTick+0x80>)
    sample = sample + param2[v][string];
    1f34:	ed94 5a00 	vldr	s10, [r4]
    1f38:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
    1f3c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
}
    1f40:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    1f44:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    1f48:	ed93 0a00 	vldr	s0, [r3]
    1f4c:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    1f50:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    1f54:	ee27 7a27 	vmul.f32	s14, s14, s15
    1f58:	ee27 7a27 	vmul.f32	s14, s14, s15
    1f5c:	ee36 7ac7 	vsub.f32	s14, s13, s14
    1f60:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1f64:	ee27 0a80 	vmul.f32	s0, s15, s0
    1f68:	f003 be1a 	b.w	5ba0 <__tHighpass_tick_veneer>
    1f6c:	20005558 	.word	0x20005558
    1f70:	20005578 	.word	0x20005578
    1f74:	3eaaaaaa 	.word	0x3eaaaaaa
    1f78:	20000ed4 	.word	0x20000ed4
    1f7c:	20005538 	.word	0x20005538
    1f80:	20005ac4 	.word	0x20005ac4
    1f84:	f3af 8000 	nop.w
    1f88:	f3af 8000 	nop.w
    1f8c:	f3af 8000 	nop.w
    1f90:	f3af 8000 	nop.w
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <hardClipTick>:
    sample = sample * param1[v][string];
    1fa0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fa4:	4a1a      	ldr	r2, [pc, #104]	; (2010 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    1fa6:	4b1b      	ldr	r3, [pc, #108]	; (2014 <hardClipTick+0x74>)
    1fa8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    1fac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1fb0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    1fb4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    1fb8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    1fba:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    1fbe:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
    1fc0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1fc4:	4e14      	ldr	r6, [pc, #80]	; (2018 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    1fc6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1fca:	4d14      	ldr	r5, [pc, #80]	; (201c <hardClipTick+0x7c>)
    1fcc:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    1fd0:	4425      	add	r5, r4
    1fd2:	ed96 7a00 	vldr	s14, [r6]
    1fd6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    1fda:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    1fde:	ee27 0a87 	vmul.f32	s0, s15, s14
    1fe2:	f003 fe21 	bl	5c28 <__arm_sin_f32_veneer>
    1fe6:	ed96 7a00 	vldr	s14, [r6]
    1fea:	edd5 7a00 	vldr	s15, [r5]
    1fee:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ff2:	ee27 0a80 	vmul.f32	s0, s15, s0
    1ff6:	f003 fe17 	bl	5c28 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    1ffa:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1ffe:	4808      	ldr	r0, [pc, #32]	; (2020 <hardClipTick+0x80>)
    2000:	ee20 0a27 	vmul.f32	s0, s0, s15
    2004:	4420      	add	r0, r4
}
    2006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    200a:	f003 bdc9 	b.w	5ba0 <__tHighpass_tick_veneer>
    200e:	bf00      	nop
    2010:	20005538 	.word	0x20005538
    2014:	20005558 	.word	0x20005558
    2018:	20005578 	.word	0x20005578
    201c:	20005aa4 	.word	0x20005aa4
    2020:	20000ed4 	.word	0x20000ed4
    2024:	f3af 8000 	nop.w
    2028:	f3af 8000 	nop.w
    202c:	f3af 8000 	nop.w
    2030:	f3af 8000 	nop.w
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <satTick>:
    sample = sample * param1[v][string];
    2040:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2044:	4b17      	ldr	r3, [pc, #92]	; (20a4 <satTick+0x64>)
    sample = sample * param1[v][string];
    2046:	4a18      	ldr	r2, [pc, #96]	; (20a8 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2048:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    204c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2050:	4816      	ldr	r0, [pc, #88]	; (20ac <satTick+0x6c>)
    sample = sample * param1[v][string];
    2052:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2056:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    205a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    205c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    2060:	008c      	lsls	r4, r1, #2
    2062:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2066:	eeb0 6a47 	vmov.f32	s12, s14
    206a:	ee27 7a87 	vmul.f32	s14, s15, s14
    206e:	eea7 6a80 	vfma.f32	s12, s15, s0
    2072:	eea7 7a80 	vfma.f32	s14, s15, s0
    2076:	eeb0 6ac6 	vabs.f32	s12, s12
    207a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    207e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2082:	ee36 6b05 	vadd.f64	d6, d6, d5
    2086:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    208a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    208e:	f003 fd87 	bl	5ba0 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    2092:	4807      	ldr	r0, [pc, #28]	; (20b0 <satTick+0x70>)
    2094:	4420      	add	r0, r4
    2096:	f003 fd83 	bl	5ba0 <__tHighpass_tick_veneer>
}
    209a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    209e:	f003 bdab 	b.w	5bf8 <__LEAF_tanh_veneer>
    20a2:	bf00      	nop
    20a4:	20005558 	.word	0x20005558
    20a8:	20005538 	.word	0x20005538
    20ac:	20000ed4 	.word	0x20000ed4
    20b0:	20000ef4 	.word	0x20000ef4
    20b4:	f3af 8000 	nop.w
    20b8:	f3af 8000 	nop.w
    20bc:	f3af 8000 	nop.w

000020c0 <bcTick>:
    sample = sample * param1[v][string];
    20c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    20c6:	4806      	ldr	r0, [pc, #24]	; (20e0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    20c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    20cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    20d0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    20d4:	ee20 0a27 	vmul.f32	s0, s0, s15
    20d8:	f003 bd12 	b.w	5b00 <__tCrusher_tick_veneer>
    20dc:	20005538 	.word	0x20005538
    20e0:	20000b14 	.word	0x20000b14
    20e4:	f3af 8000 	nop.w
    20e8:	f3af 8000 	nop.w
    20ec:	f3af 8000 	nop.w
    20f0:	f3af 8000 	nop.w
    20f4:	f3af 8000 	nop.w
    20f8:	f3af 8000 	nop.w
    20fc:	f3af 8000 	nop.w

00002100 <compressorTick>:
	return tCompressor_tick(&comp[v][string], sample);
    2100:	4b03      	ldr	r3, [pc, #12]	; (2110 <compressorTick+0x10>)
    2102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    210a:	f003 bd4d 	b.w	5ba8 <__tCompressor_tick_veneer>
    210e:	bf00      	nop
    2110:	20000b54 	.word	0x20000b54
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <FXlowpassTick>:
	return tSVF_tick(&FXlowpass[v][string], sample);
    2120:	4b03      	ldr	r3, [pc, #12]	; (2130 <FXlowpassTick+0x10>)
    2122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    212a:	f003 bd11 	b.w	5b50 <__tSVF_tick_veneer>
    212e:	bf00      	nop
    2130:	20000964 	.word	0x20000964
    2134:	f3af 8000 	nop.w
    2138:	f3af 8000 	nop.w
    213c:	f3af 8000 	nop.w

00002140 <FXhighpassTick>:
	return tSVF_tick(&FXhighpass[v][string], sample);
    2140:	4b03      	ldr	r3, [pc, #12]	; (2150 <FXhighpassTick+0x10>)
    2142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    214a:	f003 bd01 	b.w	5b50 <__tSVF_tick_veneer>
    214e:	bf00      	nop
    2150:	20000944 	.word	0x20000944
    2154:	f3af 8000 	nop.w
    2158:	f3af 8000 	nop.w
    215c:	f3af 8000 	nop.w

00002160 <FXbandpassTick>:
	return tSVF_tick(&FXbandpass[v][string], sample);
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <FXbandpassTick+0x10>)
    2162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    216a:	f003 bcf1 	b.w	5b50 <__tSVF_tick_veneer>
    216e:	bf00      	nop
    2170:	20000904 	.word	0x20000904
    2174:	f3af 8000 	nop.w
    2178:	f3af 8000 	nop.w
    217c:	f3af 8000 	nop.w

00002180 <FXdiodeLowpassTick>:
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    2180:	4b03      	ldr	r3, [pc, #12]	; (2190 <FXdiodeLowpassTick+0x10>)
    2182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    218a:	f003 bcf5 	b.w	5b78 <__tDiodeFilter_tick_veneer>
    218e:	bf00      	nop
    2190:	20000924 	.word	0x20000924
    2194:	f3af 8000 	nop.w
    2198:	f3af 8000 	nop.w
    219c:	f3af 8000 	nop.w

000021a0 <FXVZpeakTick>:
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    21a0:	4b03      	ldr	r3, [pc, #12]	; (21b0 <FXVZpeakTick+0x10>)
    21a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21aa:	f003 bcbd 	b.w	5b28 <__tVZFilter_tickEfficient_veneer>
    21ae:	bf00      	nop
    21b0:	200008e4 	.word	0x200008e4
    21b4:	f3af 8000 	nop.w
    21b8:	f3af 8000 	nop.w
    21bc:	f3af 8000 	nop.w

000021c0 <FXVZlowshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    21c0:	4b03      	ldr	r3, [pc, #12]	; (21d0 <FXVZlowshelfTick+0x10>)
    21c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21ca:	f003 bcad 	b.w	5b28 <__tVZFilter_tickEfficient_veneer>
    21ce:	bf00      	nop
    21d0:	200008c4 	.word	0x200008c4
    21d4:	f3af 8000 	nop.w
    21d8:	f3af 8000 	nop.w
    21dc:	f3af 8000 	nop.w

000021e0 <FXVZhighshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    21e0:	4b03      	ldr	r3, [pc, #12]	; (21f0 <FXVZhighshelfTick+0x10>)
    21e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21ea:	f003 bc9d 	b.w	5b28 <__tVZFilter_tickEfficient_veneer>
    21ee:	bf00      	nop
    21f0:	200008a4 	.word	0x200008a4
    21f4:	f3af 8000 	nop.w
    21f8:	f3af 8000 	nop.w
    21fc:	f3af 8000 	nop.w

00002200 <FXVZbandrejectTick>:
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2200:	4b03      	ldr	r3, [pc, #12]	; (2210 <FXVZbandrejectTick+0x10>)
    2202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    220a:	f003 bc8d 	b.w	5b28 <__tVZFilter_tickEfficient_veneer>
    220e:	bf00      	nop
    2210:	20000884 	.word	0x20000884
    2214:	f3af 8000 	nop.w
    2218:	f3af 8000 	nop.w
    221c:	f3af 8000 	nop.w

00002220 <FXLadderLowpassTick>:
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    2220:	4b03      	ldr	r3, [pc, #12]	; (2230 <FXLadderLowpassTick+0x10>)
    2222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    222a:	f003 bc79 	b.w	5b20 <__tLadderFilter_tick_veneer>
    222e:	bf00      	nop
    2230:	20000864 	.word	0x20000864
    2234:	f3af 8000 	nop.w
    2238:	f3af 8000 	nop.w
    223c:	f3af 8000 	nop.w

00002240 <noiseSetTilt>:
{
    2240:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2242:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    2246:	008c      	lsls	r4, r1, #2
{
    2248:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    224c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    2250:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2254:	eee0 7a68 	vfms.f32	s15, s0, s17
    2258:	eeb0 0a67 	vmov.f32	s0, s15
    225c:	f003 fcdc 	bl	5c18 <__fastdbtoa_veneer>
    2260:	4808      	ldr	r0, [pc, #32]	; (2284 <noiseSetTilt+0x44>)
    2262:	4420      	add	r0, r4
    2264:	f003 fc38 	bl	5ad8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    2268:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    226c:	eea8 0a28 	vfma.f32	s0, s16, s17
    2270:	f003 fcd2 	bl	5c18 <__fastdbtoa_veneer>
    2274:	4804      	ldr	r0, [pc, #16]	; (2288 <noiseSetTilt+0x48>)
}
    2276:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    227a:	4420      	add	r0, r4
}
    227c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    2280:	f003 bc2a 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    2284:	200054e0 	.word	0x200054e0
    2288:	200054e8 	.word	0x200054e8
    228c:	f3af 8000 	nop.w
    2290:	f3af 8000 	nop.w
    2294:	f3af 8000 	nop.w
    2298:	f3af 8000 	nop.w
    229c:	f3af 8000 	nop.w

000022a0 <noiseSetGain>:
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    22a0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    22a4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 22c8 <noiseSetGain+0x28>
{
    22a8:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    22aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    22ae:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    22b0:	eeb0 0a67 	vmov.f32	s0, s15
    22b4:	f003 fcb0 	bl	5c18 <__fastdbtoa_veneer>
    22b8:	4804      	ldr	r0, [pc, #16]	; (22cc <noiseSetGain+0x2c>)
    22ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    22be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    22c2:	f003 bc09 	b.w	5ad8 <__tVZFilter_setGain_veneer>
    22c6:	bf00      	nop
    22c8:	42080000 	.word	0x42080000
    22cc:	200054c0 	.word	0x200054c0
    22d0:	f3af 8000 	nop.w
    22d4:	f3af 8000 	nop.w
    22d8:	f3af 8000 	nop.w
    22dc:	f3af 8000 	nop.w

000022e0 <noiseSetFreq>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    22e0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    22e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2314 <noiseSetFreq+0x34>
    22e8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2318 <noiseSetFreq+0x38>
    22ec:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 231c <noiseSetFreq+0x3c>
    22f0:	eee0 7a07 	vfma.f32	s15, s0, s14
    22f4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2320 <noiseSetFreq+0x40>
{
    22f8:	b510      	push	{r4, lr}
    22fa:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    22fc:	ee67 0aa0 	vmul.f32	s1, s15, s1
    2300:	f002 face 	bl	48a0 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    2304:	4807      	ldr	r0, [pc, #28]	; (2324 <noiseSetFreq+0x44>)
    2306:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    230a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    230e:	f003 bbbf 	b.w	5a90 <__tVZFilter_setFreqFast_veneer>
    2312:	bf00      	nop
    2314:	429a0000 	.word	0x429a0000
    2318:	420fb824 	.word	0x420fb824
    231c:	457ff000 	.word	0x457ff000
    2320:	00000000 	.word	0x00000000
    2324:	200054c0 	.word	0x200054c0
    2328:	f3af 8000 	nop.w
    232c:	f3af 8000 	nop.w
    2330:	f3af 8000 	nop.w
    2334:	f3af 8000 	nop.w
    2338:	f3af 8000 	nop.w
    233c:	f3af 8000 	nop.w

00002340 <noise_tick>:
{
    2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float sample = random_values[randomValPointer++];
    2342:	4d27      	ldr	r5, [pc, #156]	; (23e0 <noise_tick+0xa0>)
{
    2344:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
    2346:	4927      	ldr	r1, [pc, #156]	; (23e4 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
    2348:	4b27      	ldr	r3, [pc, #156]	; (23e8 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
    234a:	4f28      	ldr	r7, [pc, #160]	; (23ec <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    234c:	4828      	ldr	r0, [pc, #160]	; (23f0 <noise_tick+0xb0>)
{
    234e:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
    2352:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    2354:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
    2358:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
    235a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    235e:	3201      	adds	r2, #1
    2360:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
    2362:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    2366:	ed91 0a00 	vldr	s0, [r1]
    236a:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
    236c:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
    2370:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
    2374:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    2378:	f003 fbd6 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    237c:	481d      	ldr	r0, [pc, #116]	; (23f4 <noise_tick+0xb4>)
    237e:	4428      	add	r0, r5
    2380:	f003 fbd2 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    2384:	481c      	ldr	r0, [pc, #112]	; (23f8 <noise_tick+0xb8>)
    2386:	4428      	add	r0, r5
    2388:	f003 fbce 	bl	5b28 <__tVZFilter_tickEfficient_veneer>
	float normSample = (sample + 1.f) * 0.5f;
    238c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    2390:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 23fc <noise_tick+0xbc>
	noiseOuts[0][string] = sample * filterSend *  enabled;
    2394:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    2398:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    239c:	4b18      	ldr	r3, [pc, #96]	; (2400 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    239e:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    23a2:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    23a6:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
    23aa:	4816      	ldr	r0, [pc, #88]	; (2404 <noise_tick+0xc4>)
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    23ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	timeRandom = tempCount10-tempCount9;
    23b0:	4a15      	ldr	r2, [pc, #84]	; (2408 <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    23b2:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
    23b6:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
    23b8:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    23bc:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    23c0:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    23c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    23c8:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    23cc:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    23d0:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
    23d4:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
    23d6:	1b9b      	subs	r3, r3, r6
    23d8:	6013      	str	r3, [r2, #0]
}
    23da:	ecbd 8b04 	vpop	{d8-d9}
    23de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23e0:	20005a70 	.word	0x20005a70
    23e4:	2001b90c 	.word	0x2001b90c
    23e8:	2001a7fc 	.word	0x2001a7fc
    23ec:	e0001000 	.word	0xe0001000
    23f0:	200054e0 	.word	0x200054e0
    23f4:	200054e8 	.word	0x200054e8
    23f8:	200054c0 	.word	0x200054c0
    23fc:	00000000 	.word	0x00000000
    2400:	20017888 	.word	0x20017888
    2404:	200054d0 	.word	0x200054d0
    2408:	20017a20 	.word	0x20017a20
    240c:	f3af 8000 	nop.w
    2410:	f3af 8000 	nop.w
    2414:	f3af 8000 	nop.w
    2418:	f3af 8000 	nop.w
    241c:	f3af 8000 	nop.w

00002420 <HAL_SAI_TxCpltCallback>:
	if (!diskBusy)
    2420:	4b03      	ldr	r3, [pc, #12]	; (2430 <HAL_SAI_TxCpltCallback+0x10>)
    2422:	781b      	ldrb	r3, [r3, #0]
    2424:	b103      	cbz	r3, 2428 <HAL_SAI_TxCpltCallback+0x8>
}
    2426:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
    2428:	2040      	movs	r0, #64	; 0x40
    242a:	f003 bb39 	b.w	5aa0 <__audioFrame_veneer>
    242e:	bf00      	nop
    2430:	20017cb8 	.word	0x20017cb8
    2434:	f3af 8000 	nop.w
    2438:	f3af 8000 	nop.w
    243c:	f3af 8000 	nop.w

00002440 <HAL_SAI_TxHalfCpltCallback>:
	if (!diskBusy)
    2440:	4b02      	ldr	r3, [pc, #8]	; (244c <HAL_SAI_TxHalfCpltCallback+0xc>)
    2442:	7818      	ldrb	r0, [r3, #0]
    2444:	b100      	cbz	r0, 2448 <HAL_SAI_TxHalfCpltCallback+0x8>
}
    2446:	4770      	bx	lr
	audioFrame(0);
    2448:	f003 bb2a 	b.w	5aa0 <__audioFrame_veneer>
    244c:	20017cb8 	.word	0x20017cb8
	...

00002460 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    2460:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    2464:	ed9f 7a03 	vldr	s14, [pc, #12]	; 2474 <scaleOscPitch+0x14>
}
    2468:	eee0 7a07 	vfma.f32	s15, s0, s14
    246c:	eeb0 0a67 	vmov.f32	s0, s15
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	42400000 	.word	0x42400000
    2478:	f3af 8000 	nop.w
    247c:	f3af 8000 	nop.w

00002480 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    2480:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2494 <scaleOscFine+0x14>
    2484:	eddf 7a04 	vldr	s15, [pc, #16]	; 2498 <scaleOscFine+0x18>
}
    2488:	eee0 7a07 	vfma.f32	s15, s0, s14
    248c:	eeb0 0a67 	vmov.f32	s0, s15
    2490:	4770      	bx	lr
    2492:	bf00      	nop
    2494:	43480000 	.word	0x43480000
    2498:	c2c80000 	.word	0xc2c80000
    249c:	f3af 8000 	nop.w

000024a0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    24a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24b4 <scaleOscFreq+0x14>
    24a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 24b8 <scaleOscFreq+0x18>
}
    24a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    24ac:	eeb0 0a67 	vmov.f32	s0, s15
    24b0:	4770      	bx	lr
    24b2:	bf00      	nop
    24b4:	457a0000 	.word	0x457a0000
    24b8:	c4fa0000 	.word	0xc4fa0000
    24bc:	f3af 8000 	nop.w

000024c0 <scaleFilterCutoff>:
	return (input * 127.0f);
    24c0:	eddf 7a02 	vldr	s15, [pc, #8]	; 24cc <scaleFilterCutoff+0xc>
}
    24c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    24c8:	4770      	bx	lr
    24ca:	bf00      	nop
    24cc:	42fe0000 	.word	0x42fe0000
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    24e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24f4 <scaleFinalLowpass+0x14>
    24e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 24f8 <scaleFinalLowpass+0x18>
}
    24e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    24ec:	eeb0 0a67 	vmov.f32	s0, s15
    24f0:	4770      	bx	lr
    24f2:	bf00      	nop
    24f4:	428c0000 	.word	0x428c0000
    24f8:	42680000 	.word	0x42680000
    24fc:	f3af 8000 	nop.w

00002500 <scaleDefault>:
{
    2500:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2504:	ed9f 0a02 	vldr	s0, [pc, #8]	; 2510 <scaleDefault+0x10>
    2508:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    250c:	f002 b9c8 	b.w	48a0 <LEAF_clip>
    2510:	00000000 	.word	0x00000000
    2514:	f3af 8000 	nop.w
    2518:	f3af 8000 	nop.w
    251c:	f3af 8000 	nop.w

00002520 <scaleTranspose>:
{
    2520:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    2524:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2544 <scaleTranspose+0x24>
    2528:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    252c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    252e:	f002 f9b7 	bl	48a0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    2532:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2548 <scaleTranspose+0x28>
    2536:	eddf 7a05 	vldr	s15, [pc, #20]	; 254c <scaleTranspose+0x2c>
}
    253a:	eee0 7a07 	vfma.f32	s15, s0, s14
    253e:	eeb0 0a67 	vmov.f32	s0, s15
    2542:	bd08      	pop	{r3, pc}
    2544:	00000000 	.word	0x00000000
    2548:	42c00000 	.word	0x42c00000
    254c:	c2400000 	.word	0xc2400000
    2550:	f3af 8000 	nop.w
    2554:	f3af 8000 	nop.w
    2558:	f3af 8000 	nop.w
    255c:	f3af 8000 	nop.w

00002560 <scalePitchBend>:
{
    2560:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2564:	ed9f 0a05 	vldr	s0, [pc, #20]	; 257c <scalePitchBend+0x1c>
    2568:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    256c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    256e:	f002 f997 	bl	48a0 <LEAF_clip>
	return (input * 48.0f);
    2572:	eddf 7a03 	vldr	s15, [pc, #12]	; 2580 <scalePitchBend+0x20>
}
    2576:	ee20 0a27 	vmul.f32	s0, s0, s15
    257a:	bd08      	pop	{r3, pc}
    257c:	00000000 	.word	0x00000000
    2580:	42400000 	.word	0x42400000
    2584:	f3af 8000 	nop.w
    2588:	f3af 8000 	nop.w
    258c:	f3af 8000 	nop.w
    2590:	f3af 8000 	nop.w
    2594:	f3af 8000 	nop.w
    2598:	f3af 8000 	nop.w
    259c:	f3af 8000 	nop.w

000025a0 <scaleFilterResonance>:
{
    25a0:	b510      	push	{r4, lr}
    25a2:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    25a6:	ed9f 9a21 	vldr	s18, [pc, #132]	; 262c <scaleFilterResonance+0x8c>
{
    25aa:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    25ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    25b2:	eeb0 0a49 	vmov.f32	s0, s18
    25b6:	f002 f973 	bl	48a0 <LEAF_clip>
    25ba:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    25be:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 2630 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    25c2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 2634 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    25c6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    25ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    25ce:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    25d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    25d6:	1c63      	adds	r3, r4, #1
    25d8:	ee00 3a90 	vmov	s1, r3
    25dc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    25e0:	f002 f95e 	bl	48a0 <LEAF_clip>
    25e4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    25e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    25ec:	4b12      	ldr	r3, [pc, #72]	; (2638 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    25ee:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    25f2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    25f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    25fa:	ee38 8a27 	vadd.f32	s16, s16, s15
    25fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2602:	edd4 7a00 	vldr	s15, [r4]
    2606:	eeb0 0a49 	vmov.f32	s0, s18
    260a:	ed93 7a00 	vldr	s14, [r3]
    260e:	ee38 8a68 	vsub.f32	s16, s16, s17
    2612:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    2616:	ee60 0a87 	vmul.f32	s1, s1, s14
    261a:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    261e:	ecbd 8b04 	vpop	{d8-d9}
    2622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2626:	f002 b93b 	b.w	48a0 <LEAF_clip>
    262a:	bf00      	nop
    262c:	3dcccccd 	.word	0x3dcccccd
    2630:	44ffe000 	.word	0x44ffe000
    2634:	00000000 	.word	0x00000000
    2638:	2001bd0c 	.word	0x2001bd0c
    263c:	f3af 8000 	nop.w

00002640 <scaleEnvTimes>:
{
    2640:	b510      	push	{r4, lr}
    2642:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    2646:	eddf 8a1d 	vldr	s17, [pc, #116]	; 26bc <scaleEnvTimes+0x7c>
{
    264a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    264e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2652:	eeb0 0a68 	vmov.f32	s0, s17
    2656:	f002 f923 	bl	48a0 <LEAF_clip>
    265a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    265e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 26c0 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2662:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    2666:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    266a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    266e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2672:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2676:	1c63      	adds	r3, r4, #1
    2678:	ee00 3a90 	vmov	s1, r3
    267c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2680:	f002 f90e 	bl	48a0 <LEAF_clip>
    2684:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    268c:	4b0d      	ldr	r3, [pc, #52]	; (26c4 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    268e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2692:	ee10 2a10 	vmov	r2, s0
    2696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    269a:	ee38 8a07 	vadd.f32	s16, s16, s14
    269e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    26a2:	ed94 7a00 	vldr	s14, [r4]
    26a6:	ed93 0a00 	vldr	s0, [r3]
    26aa:	ee38 8a68 	vsub.f32	s16, s16, s17
    26ae:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    26b2:	eea7 0a08 	vfma.f32	s0, s14, s16
    26b6:	ecbd 8b02 	vpop	{d8}
    26ba:	bd10      	pop	{r4, pc}
    26bc:	00000000 	.word	0x00000000
    26c0:	44ffe000 	.word	0x44ffe000
    26c4:	20017d0c 	.word	0x20017d0c
    26c8:	f3af 8000 	nop.w
    26cc:	f3af 8000 	nop.w
    26d0:	f3af 8000 	nop.w
    26d4:	f3af 8000 	nop.w
    26d8:	f3af 8000 	nop.w
    26dc:	f3af 8000 	nop.w

000026e0 <scaleLFORates>:
{
    26e0:	b510      	push	{r4, lr}
    26e2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    26e6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 275c <scaleLFORates+0x7c>
{
    26ea:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    26ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    26f2:	eeb0 0a68 	vmov.f32	s0, s17
    26f6:	f002 f8d3 	bl	48a0 <LEAF_clip>
    26fa:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    26fe:	ed9f 1a18 	vldr	s2, [pc, #96]	; 2760 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2702:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    2706:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    270a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    270e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2712:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2716:	1c63      	adds	r3, r4, #1
    2718:	ee00 3a90 	vmov	s1, r3
    271c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2720:	f002 f8be 	bl	48a0 <LEAF_clip>
    2724:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    2728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    272c:	4b0d      	ldr	r3, [pc, #52]	; (2764 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    272e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    2732:	ee10 2a10 	vmov	r2, s0
    2736:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    273a:	ee38 8a07 	vadd.f32	s16, s16, s14
    273e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2742:	ed94 7a00 	vldr	s14, [r4]
    2746:	ed93 0a00 	vldr	s0, [r3]
    274a:	ee38 8a68 	vsub.f32	s16, s16, s17
    274e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    2752:	eea7 0a08 	vfma.f32	s0, s14, s16
    2756:	ecbd 8b02 	vpop	{d8}
    275a:	bd10      	pop	{r4, pc}
    275c:	00000000 	.word	0x00000000
    2760:	44ffe000 	.word	0x44ffe000
    2764:	3003a380 	.word	0x3003a380
    2768:	f3af 8000 	nop.w
    276c:	f3af 8000 	nop.w
    2770:	f3af 8000 	nop.w
    2774:	f3af 8000 	nop.w
    2778:	f3af 8000 	nop.w
    277c:	f3af 8000 	nop.w

00002780 <handleSPI>:
{
    2780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
    2784:	49ba      	ldr	r1, [pc, #744]	; (2a70 <handleSPI+0x2f0>)
    2786:	2601      	movs	r6, #1
{
    2788:	4604      	mov	r4, r0
	if (SPI_LEVERS[offset] == ReceivingPitches)
    278a:	4dba      	ldr	r5, [pc, #744]	; (2a74 <handleSPI+0x2f4>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    278c:	48ba      	ldr	r0, [pc, #744]	; (2a78 <handleSPI+0x2f8>)
    278e:	4632      	mov	r2, r6
{
    2790:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
    2794:	700e      	strb	r6, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    2796:	4631      	mov	r1, r6
    2798:	f003 f9fe 	bl	5b98 <__HAL_GPIO_WritePin_veneer>
	if (SPI_LEVERS[offset] == ReceivingPitches)
    279c:	5d2b      	ldrb	r3, [r5, r4]
    279e:	42b3      	cmp	r3, r6
    27a0:	f000 8186 	beq.w	2ab0 <handleSPI+0x330>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
    27a4:	2b02      	cmp	r3, #2
    27a6:	f000 813c 	beq.w	2a22 <handleSPI+0x2a2>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
    27aa:	2b03      	cmp	r3, #3
    27ac:	f000 8266 	beq.w	2c7c <handleSPI+0x4fc>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
    27b0:	2bfd      	cmp	r3, #253	; 0xfd
    27b2:	f000 824b 	beq.w	2c4c <handleSPI+0x4cc>
		if (boardNumber == 0)
    27b6:	4bb1      	ldr	r3, [pc, #708]	; (2a7c <handleSPI+0x2fc>)
    27b8:	781e      	ldrb	r6, [r3, #0]
    27ba:	2e00      	cmp	r6, #0
    27bc:	f040 8122 	bne.w	2a04 <handleSPI+0x284>
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    27c0:	192b      	adds	r3, r5, r4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    27c2:	4aaf      	ldr	r2, [pc, #700]	; (2a80 <handleSPI+0x300>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    27c4:	20fd      	movs	r0, #253	; 0xfd
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    27c6:	4daf      	ldr	r5, [pc, #700]	; (2a84 <handleSPI+0x304>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    27c8:	7811      	ldrb	r1, [r2, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    27ca:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    27ce:	7810      	ldrb	r0, [r2, #0]
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    27d0:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    27d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    27d8:	49ab      	ldr	r1, [pc, #684]	; (2a88 <handleSPI+0x308>)
    27da:	0040      	lsls	r0, r0, #1
    27dc:	5c08      	ldrb	r0, [r1, r0]
    27de:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    27e2:	7810      	ldrb	r0, [r2, #0]
    27e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    27e8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    27ec:	7840      	ldrb	r0, [r0, #1]
    27ee:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    27f2:	7810      	ldrb	r0, [r2, #0]
    27f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    27f8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    27fc:	7880      	ldrb	r0, [r0, #2]
    27fe:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2802:	7810      	ldrb	r0, [r2, #0]
    2804:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2808:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    280c:	78c0      	ldrb	r0, [r0, #3]
    280e:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2812:	7810      	ldrb	r0, [r2, #0]
    2814:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2818:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    281c:	7900      	ldrb	r0, [r0, #4]
    281e:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2822:	7810      	ldrb	r0, [r2, #0]
    2824:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2828:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    282c:	7940      	ldrb	r0, [r0, #5]
    282e:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2832:	7810      	ldrb	r0, [r2, #0]
    2834:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2838:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    283c:	7980      	ldrb	r0, [r0, #6]
    283e:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    2842:	7810      	ldrb	r0, [r2, #0]
    2844:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2848:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    284c:	79c0      	ldrb	r0, [r0, #7]
    284e:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    2852:	7810      	ldrb	r0, [r2, #0]
    2854:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2858:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    285c:	7a00      	ldrb	r0, [r0, #8]
    285e:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    2862:	7810      	ldrb	r0, [r2, #0]
    2864:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2868:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    286c:	7a40      	ldrb	r0, [r0, #9]
    286e:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2872:	7810      	ldrb	r0, [r2, #0]
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2874:	782f      	ldrb	r7, [r5, #0]
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2876:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    287a:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    287e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2882:	7a80      	ldrb	r0, [r0, #10]
    2884:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    2888:	7810      	ldrb	r0, [r2, #0]
    288a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    288e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2892:	7ac0      	ldrb	r0, [r0, #11]
    2894:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    2898:	7810      	ldrb	r0, [r2, #0]
    289a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    289e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    28a2:	7b00      	ldrb	r0, [r0, #12]
    28a4:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    28a8:	7810      	ldrb	r0, [r2, #0]
    28aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    28ae:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    28b2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
			whichMacroToSendName = (whichMacroToSendName + 1);
    28b6:	3701      	adds	r7, #1
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    28b8:	7b49      	ldrb	r1, [r1, #13]
			whichMacroToSendName = (whichMacroToSendName + 1);
    28ba:	b2ff      	uxtb	r7, r7
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    28bc:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    28c0:	7811      	ldrb	r1, [r2, #0]
			if (whichMacroToSendName >= 8)
    28c2:	2f07      	cmp	r7, #7
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    28c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    28c8:	ea4f 1401 	mov.w	r4, r1, lsl #4
    28cc:	496f      	ldr	r1, [pc, #444]	; (2a8c <handleSPI+0x30c>)
    28ce:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    28d2:	5d0c      	ldrb	r4, [r1, r4]
    28d4:	f883 4051 	strb.w	r4, [r3, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    28d8:	7814      	ldrb	r4, [r2, #0]
    28da:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    28de:	ea4f 1404 	mov.w	r4, r4, lsl #4
    28e2:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    28e6:	440c      	add	r4, r1
    28e8:	7864      	ldrb	r4, [r4, #1]
    28ea:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    28ee:	7814      	ldrb	r4, [r2, #0]
    28f0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    28f4:	ea4f 1404 	mov.w	r4, r4, lsl #4
    28f8:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    28fc:	440c      	add	r4, r1
    28fe:	78a4      	ldrb	r4, [r4, #2]
    2900:	f883 4053 	strb.w	r4, [r3, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    2904:	7814      	ldrb	r4, [r2, #0]
    2906:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    290a:	ea4f 1404 	mov.w	r4, r4, lsl #4
    290e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    2912:	440c      	add	r4, r1
    2914:	78e4      	ldrb	r4, [r4, #3]
    2916:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    291a:	7814      	ldrb	r4, [r2, #0]
    291c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2920:	ea4f 1404 	mov.w	r4, r4, lsl #4
    2924:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    2928:	440c      	add	r4, r1
    292a:	7924      	ldrb	r4, [r4, #4]
    292c:	f883 4055 	strb.w	r4, [r3, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    2930:	7814      	ldrb	r4, [r2, #0]
    2932:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2936:	ea4f 1404 	mov.w	r4, r4, lsl #4
    293a:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    293e:	440c      	add	r4, r1
    2940:	7964      	ldrb	r4, [r4, #5]
    2942:	f883 4056 	strb.w	r4, [r3, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    2946:	7814      	ldrb	r4, [r2, #0]
    2948:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    294c:	ea4f 1404 	mov.w	r4, r4, lsl #4
    2950:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    2954:	440c      	add	r4, r1
    2956:	79a4      	ldrb	r4, [r4, #6]
    2958:	f883 4057 	strb.w	r4, [r3, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    295c:	7814      	ldrb	r4, [r2, #0]
    295e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2962:	ea4f 1404 	mov.w	r4, r4, lsl #4
    2966:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    296a:	440c      	add	r4, r1
    296c:	79e4      	ldrb	r4, [r4, #7]
    296e:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    2972:	7814      	ldrb	r4, [r2, #0]
    2974:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2978:	ea4f 1404 	mov.w	r4, r4, lsl #4
    297c:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    2980:	440c      	add	r4, r1
    2982:	7a24      	ldrb	r4, [r4, #8]
    2984:	f883 4059 	strb.w	r4, [r3, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    2988:	7814      	ldrb	r4, [r2, #0]
    298a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    298e:	ea4f 1404 	mov.w	r4, r4, lsl #4
    2992:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    2996:	440c      	add	r4, r1
    2998:	7a64      	ldrb	r4, [r4, #9]
    299a:	f883 405a 	strb.w	r4, [r3, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    299e:	7814      	ldrb	r4, [r2, #0]
    29a0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    29a4:	ea4f 1404 	mov.w	r4, r4, lsl #4
    29a8:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    29ac:	440c      	add	r4, r1
    29ae:	7aa4      	ldrb	r4, [r4, #10]
    29b0:	f883 405b 	strb.w	r4, [r3, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    29b4:	7814      	ldrb	r4, [r2, #0]
    29b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    29ba:	ea4f 1404 	mov.w	r4, r4, lsl #4
    29be:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    29c2:	440c      	add	r4, r1
    29c4:	7ae4      	ldrb	r4, [r4, #11]
    29c6:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    29ca:	7814      	ldrb	r4, [r2, #0]
    29cc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    29d0:	ea4f 1404 	mov.w	r4, r4, lsl #4
    29d4:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    29d8:	440c      	add	r4, r1
    29da:	7b24      	ldrb	r4, [r4, #12]
    29dc:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    29e0:	7814      	ldrb	r4, [r2, #0]
    29e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    29e6:	ea4f 1404 	mov.w	r4, r4, lsl #4
    29ea:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    29ee:	4401      	add	r1, r0
    29f0:	7b49      	ldrb	r1, [r1, #13]
    29f2:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
    29f6:	f04f 01fe 	mov.w	r1, #254	; 0xfe
    29fa:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
    29fe:	f200 811e 	bhi.w	2c3e <handleSPI+0x4be>
			whichMacroToSendName = (whichMacroToSendName + 1);
    2a02:	702f      	strb	r7, [r5, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    2a04:	2200      	movs	r2, #0
    2a06:	2101      	movs	r1, #1
    2a08:	481b      	ldr	r0, [pc, #108]	; (2a78 <handleSPI+0x2f8>)
    2a0a:	f003 f8c5 	bl	5b98 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    2a0e:	2200      	movs	r2, #0
    2a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2a14:	481e      	ldr	r0, [pc, #120]	; (2a90 <handleSPI+0x310>)
}
    2a16:	ecbd 8b02 	vpop	{d8}
    2a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    2a1e:	f003 b8bb 	b.w	5b98 <__HAL_GPIO_WritePin_veneer>
		 if (writingState != ReceivingPreset)
    2a22:	4a1c      	ldr	r2, [pc, #112]	; (2a94 <handleSPI+0x314>)
    2a24:	7811      	ldrb	r1, [r2, #0]
    2a26:	2902      	cmp	r1, #2
    2a28:	f000 8126 	beq.w	2c78 <handleSPI+0x4f8>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    2a2c:	7013      	strb	r3, [r2, #0]
			 diskBusy = 1;
    2a2e:	4a1a      	ldr	r2, [pc, #104]	; (2a98 <handleSPI+0x318>)
			 audioMasterLevel = 0.0f;
    2a30:	4b1a      	ldr	r3, [pc, #104]	; (2a9c <handleSPI+0x31c>)
			 diskBusy = 1;
    2a32:	7016      	strb	r6, [r2, #0]
			 audioMasterLevel = 0.0f;
    2a34:	2200      	movs	r2, #0
			 bufferPos = 0;
    2a36:	481a      	ldr	r0, [pc, #104]	; (2aa0 <handleSPI+0x320>)
			 audioMasterLevel = 0.0f;
    2a38:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
    2a3a:	2300      	movs	r3, #0
    2a3c:	8003      	strh	r3, [r0, #0]
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    2a3e:	192b      	adds	r3, r5, r4
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    2a40:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    2a42:	4a18      	ldr	r2, [pc, #96]	; (2aa4 <handleSPI+0x324>)
    2a44:	785b      	ldrb	r3, [r3, #1]
    2a46:	4f18      	ldr	r7, [pc, #96]	; (2aa8 <handleSPI+0x328>)
    2a48:	7013      	strb	r3, [r2, #0]
		 for (int i = 0; i < 28; i++)
    2a4a:	b2f3      	uxtb	r3, r6
    2a4c:	4e17      	ldr	r6, [pc, #92]	; (2aac <handleSPI+0x32c>)
    2a4e:	1e59      	subs	r1, r3, #1
    2a50:	441e      	add	r6, r3
    2a52:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    2a54:	8803      	ldrh	r3, [r0, #0]
    2a56:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    2a5a:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
    2a5c:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    2a5e:	f103 0201 	add.w	r2, r3, #1
    2a62:	f807 c003 	strb.w	ip, [r7, r3]
    2a66:	b293      	uxth	r3, r2
    2a68:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
    2a6a:	d1f3      	bne.n	2a54 <handleSPI+0x2d4>
    2a6c:	e6a3      	b.n	27b6 <handleSPI+0x36>
    2a6e:	bf00      	nop
    2a70:	20019e36 	.word	0x20019e36
    2a74:	30000400 	.word	0x30000400
    2a78:	58020000 	.word	0x58020000
    2a7c:	20017c79 	.word	0x20017c79
    2a80:	2001dd0d 	.word	0x2001dd0d
    2a84:	2001dd0c 	.word	0x2001dd0c
    2a88:	3003a000 	.word	0x3003a000
    2a8c:	3003c380 	.word	0x3003c380
    2a90:	58020c00 	.word	0x58020c00
    2a94:	2001dd0e 	.word	0x2001dd0e
    2a98:	20017cb8 	.word	0x20017cb8
    2a9c:	20000744 	.word	0x20000744
    2aa0:	20017c7a 	.word	0x20017c7a
    2aa4:	2001b8fe 	.word	0x2001b8fe
    2aa8:	30000480 	.word	0x30000480
    2aac:	3000041b 	.word	0x3000041b
		 for (int i = 0; i < numStringsThisBoard; i++)
    2ab0:	4b8a      	ldr	r3, [pc, #552]	; (2cdc <handleSPI+0x55c>)
    2ab2:	7818      	ldrb	r0, [r3, #0]
    2ab4:	2800      	cmp	r0, #0
    2ab6:	f000 80b2 	beq.w	2c1e <handleSPI+0x49e>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2aba:	4989      	ldr	r1, [pc, #548]	; (2ce0 <handleSPI+0x560>)
		 uint8_t currentByte = offset+1;
    2abc:	19a3      	adds	r3, r4, r6
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2abe:	eddf 6a89 	vldr	s13, [pc, #548]	; 2ce4 <handleSPI+0x564>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2ac2:	680a      	ldr	r2, [r1, #0]
    2ac4:	b2db      	uxtb	r3, r3
    2ac6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2aca:	5cd2      	ldrb	r2, [r2, r3]
    2acc:	0212      	lsls	r2, r2, #8
    2ace:	ee07 2a90 	vmov	s15, r2
    2ad2:	680a      	ldr	r2, [r1, #0]
    2ad4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2adc:	441a      	add	r2, r3
    2ade:	7852      	ldrb	r2, [r2, #1]
    2ae0:	ee07 2a90 	vmov	s15, r2
    2ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2aec:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2af0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    2af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2af8:	dd09      	ble.n	2b0e <handleSPI+0x38e>
    2afa:	eddf 6a7b 	vldr	s13, [pc, #492]	; 2ce8 <handleSPI+0x568>
    2afe:	eef4 7a66 	vcmp.f32	s15, s13
    2b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b06:	d502      	bpl.n	2b0e <handleSPI+0x38e>
				stringMIDIPitches[i] = myPitch;
    2b08:	4a78      	ldr	r2, [pc, #480]	; (2cec <handleSPI+0x56c>)
    2b0a:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2b0e:	2801      	cmp	r0, #1
    2b10:	f000 8085 	beq.w	2c1e <handleSPI+0x49e>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2b14:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2b16:	eddf 6a73 	vldr	s13, [pc, #460]	; 2ce4 <handleSPI+0x564>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2b1a:	3201      	adds	r2, #1
    2b1c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b20:	5cd2      	ldrb	r2, [r2, r3]
    2b22:	0212      	lsls	r2, r2, #8
    2b24:	ee07 2a90 	vmov	s15, r2
    2b28:	680a      	ldr	r2, [r1, #0]
    2b2a:	3201      	adds	r2, #1
    2b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2b30:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b34:	441a      	add	r2, r3
    2b36:	7852      	ldrb	r2, [r2, #1]
    2b38:	ee07 2a90 	vmov	s15, r2
    2b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b40:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2b44:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2b48:	eeb5 7a40 	vcmp.f32	s14, #0.0
    2b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b50:	dd09      	ble.n	2b66 <handleSPI+0x3e6>
    2b52:	eddf 6a65 	vldr	s13, [pc, #404]	; 2ce8 <handleSPI+0x568>
    2b56:	eef4 7a66 	vcmp.f32	s15, s13
    2b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b5e:	d502      	bpl.n	2b66 <handleSPI+0x3e6>
				stringMIDIPitches[i] = myPitch;
    2b60:	4a62      	ldr	r2, [pc, #392]	; (2cec <handleSPI+0x56c>)
    2b62:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2b66:	2802      	cmp	r0, #2
    2b68:	d059      	beq.n	2c1e <handleSPI+0x49e>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2b6a:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2b6c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 2ce4 <handleSPI+0x564>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2b70:	3202      	adds	r2, #2
    2b72:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b76:	5cd2      	ldrb	r2, [r2, r3]
    2b78:	0212      	lsls	r2, r2, #8
    2b7a:	ee07 2a90 	vmov	s15, r2
    2b7e:	680a      	ldr	r2, [r1, #0]
    2b80:	3202      	adds	r2, #2
    2b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2b86:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b8a:	441a      	add	r2, r3
    2b8c:	7852      	ldrb	r2, [r2, #1]
    2b8e:	ee07 2a90 	vmov	s15, r2
    2b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b96:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2b9a:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2b9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    2ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ba6:	dd09      	ble.n	2bbc <handleSPI+0x43c>
    2ba8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2ce8 <handleSPI+0x568>
    2bac:	eef4 7a66 	vcmp.f32	s15, s13
    2bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bb4:	d502      	bpl.n	2bbc <handleSPI+0x43c>
				stringMIDIPitches[i] = myPitch;
    2bb6:	4a4d      	ldr	r2, [pc, #308]	; (2cec <handleSPI+0x56c>)
    2bb8:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2bbc:	2803      	cmp	r0, #3
    2bbe:	d02e      	beq.n	2c1e <handleSPI+0x49e>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2bc0:	eddf 6a48 	vldr	s13, [pc, #288]	; 2ce4 <handleSPI+0x564>
		 for (int i = 0; i < numStringsThisBoard; i++)
    2bc4:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2bc6:	ed9f 6a48 	vldr	s12, [pc, #288]	; 2ce8 <handleSPI+0x568>
    2bca:	4f48      	ldr	r7, [pc, #288]	; (2cec <handleSPI+0x56c>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2bcc:	680a      	ldr	r2, [r1, #0]
    2bce:	4432      	add	r2, r6
    2bd0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2bd4:	5cd2      	ldrb	r2, [r2, r3]
    2bd6:	0212      	lsls	r2, r2, #8
    2bd8:	ee07 2a90 	vmov	s15, r2
    2bdc:	680a      	ldr	r2, [r1, #0]
    2bde:	4432      	add	r2, r6
    2be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2be4:	3601      	adds	r6, #1
    2be6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2bea:	441a      	add	r2, r3
    2bec:	7852      	ldrb	r2, [r2, #1]
    2bee:	ee07 2a90 	vmov	s15, r2
    2bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2bfa:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2bfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
    2c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c06:	dd06      	ble.n	2c16 <handleSPI+0x496>
    2c08:	eef4 7a46 	vcmp.f32	s15, s12
    2c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
    2c10:	bf48      	it	mi
    2c12:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2c16:	42b0      	cmp	r0, r6
    2c18:	f107 0704 	add.w	r7, r7, #4
    2c1c:	dcd6      	bgt.n	2bcc <handleSPI+0x44c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    2c1e:	2201      	movs	r2, #1
    2c20:	f44f 7100 	mov.w	r1, #512	; 0x200
    2c24:	4832      	ldr	r0, [pc, #200]	; (2cf0 <handleSPI+0x570>)
    2c26:	f002 ffb7 	bl	5b98 <__HAL_GPIO_WritePin_veneer>
		 updateStateFromSPIMessage(offset);
    2c2a:	4620      	mov	r0, r4
    2c2c:	f002 ff70 	bl	5b10 <__updateStateFromSPIMessage_veneer>
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    2c30:	2200      	movs	r2, #0
    2c32:	f44f 7100 	mov.w	r1, #512	; 0x200
    2c36:	482e      	ldr	r0, [pc, #184]	; (2cf0 <handleSPI+0x570>)
    2c38:	f002 ffae 	bl	5b98 <__HAL_GPIO_WritePin_veneer>
    2c3c:	e5bb      	b.n	27b6 <handleSPI+0x36>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2c3e:	7813      	ldrb	r3, [r2, #0]
				whichMacroToSendName = 0;
    2c40:	702e      	strb	r6, [r5, #0]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2c42:	3301      	adds	r3, #1
    2c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2c48:	7013      	strb	r3, [r2, #0]
    2c4a:	e6db      	b.n	2a04 <handleSPI+0x284>
		if(writingState == ReceivingPreset)
    2c4c:	4b29      	ldr	r3, [pc, #164]	; (2cf4 <handleSPI+0x574>)
    2c4e:	781a      	ldrb	r2, [r3, #0]
    2c50:	2a02      	cmp	r2, #2
    2c52:	f47f adb0 	bne.w	27b6 <handleSPI+0x36>
			 writingState = 0;
    2c56:	2100      	movs	r1, #0
			 presetNumberToLoad = presetNumberToSave;
    2c58:	4a27      	ldr	r2, [pc, #156]	; (2cf8 <handleSPI+0x578>)
			 writingState = 0;
    2c5a:	7019      	strb	r1, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
    2c5c:	7813      	ldrb	r3, [r2, #0]
    2c5e:	4927      	ldr	r1, [pc, #156]	; (2cfc <handleSPI+0x57c>)
			 presetWaitingToParse = bufferPos;
    2c60:	4a27      	ldr	r2, [pc, #156]	; (2d00 <handleSPI+0x580>)
			 presetNumberToLoad = presetNumberToSave;
    2c62:	b2db      	uxtb	r3, r3
    2c64:	700b      	strb	r3, [r1, #0]
			 presetWaitingToParse = bufferPos;
    2c66:	8813      	ldrh	r3, [r2, #0]
    2c68:	4926      	ldr	r1, [pc, #152]	; (2d04 <handleSPI+0x584>)
    2c6a:	b29b      	uxth	r3, r3
    2c6c:	600b      	str	r3, [r1, #0]
			 presetWaitingToWrite = bufferPos;
    2c6e:	8813      	ldrh	r3, [r2, #0]
    2c70:	4a25      	ldr	r2, [pc, #148]	; (2d08 <handleSPI+0x588>)
    2c72:	b29b      	uxth	r3, r3
    2c74:	6013      	str	r3, [r2, #0]
    2c76:	e59e      	b.n	27b6 <handleSPI+0x36>
    2c78:	4821      	ldr	r0, [pc, #132]	; (2d00 <handleSPI+0x580>)
    2c7a:	e6e0      	b.n	2a3e <handleSPI+0x2be>
		 uint8_t currentByte = offset+1;
    2c7c:	1c67      	adds	r7, r4, #1
    2c7e:	4e23      	ldr	r6, [pc, #140]	; (2d0c <handleSPI+0x58c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2c80:	ed9f 8a23 	vldr	s16, [pc, #140]	; 2d10 <handleSPI+0x590>
    2c84:	fa55 f787 	uxtab	r7, r5, r7
    2c88:	f106 0830 	add.w	r8, r6, #48	; 0x30
    2c8c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2c90:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
    2c92:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2c94:	ee00 3a10 	vmov	s0, r3
    2c98:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    2c9c:	ee20 0a08 	vmul.f32	s0, s0, s16
    2ca0:	f002 ff86 	bl	5bb0 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 12; i++)
    2ca4:	4546      	cmp	r6, r8
    2ca6:	d1f1      	bne.n	2c8c <handleSPI+0x50c>
			currentByte += 12;
    2ca8:	f104 070d 	add.w	r7, r4, #13
    2cac:	4e19      	ldr	r6, [pc, #100]	; (2d14 <handleSPI+0x594>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2cae:	ed9f 8a18 	vldr	s16, [pc, #96]	; 2d10 <handleSPI+0x590>
    2cb2:	b2ff      	uxtb	r7, r7
    2cb4:	f106 0828 	add.w	r8, r6, #40	; 0x28
    2cb8:	3f01      	subs	r7, #1
    2cba:	442f      	add	r7, r5
    2cbc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2cc0:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    2cc2:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2cc4:	ee00 3a10 	vmov	s0, r3
    2cc8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    2ccc:	ee20 0a08 	vmul.f32	s0, s0, s16
    2cd0:	f002 ff6e 	bl	5bb0 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    2cd4:	4546      	cmp	r6, r8
    2cd6:	d1f1      	bne.n	2cbc <handleSPI+0x53c>
    2cd8:	e7a1      	b.n	2c1e <handleSPI+0x49e>
    2cda:	bf00      	nop
    2cdc:	20000052 	.word	0x20000052
    2ce0:	200050b8 	.word	0x200050b8
    2ce4:	3b000080 	.word	0x3b000080
    2ce8:	478bff74 	.word	0x478bff74
    2cec:	200179c8 	.word	0x200179c8
    2cf0:	58021800 	.word	0x58021800
    2cf4:	2001dd0e 	.word	0x2001dd0e
    2cf8:	2001b8fe 	.word	0x2001b8fe
    2cfc:	2000074c 	.word	0x2000074c
    2d00:	20017c7a 	.word	0x20017c7a
    2d04:	2001b904 	.word	0x2001b904
    2d08:	2001b908 	.word	0x2001b908
    2d0c:	200051f8 	.word	0x200051f8
    2d10:	3b808081 	.word	0x3b808081
    2d14:	200055d8 	.word	0x200055d8
    2d18:	f3af 8000 	nop.w
    2d1c:	f3af 8000 	nop.w

00002d20 <scaleTwo>:
{
    2d20:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2d24:	ed9f 0a04 	vldr	s0, [pc, #16]	; 2d38 <scaleTwo+0x18>
    2d28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    2d2c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    2d2e:	f001 fdb7 	bl	48a0 <LEAF_clip>
}
    2d32:	ee30 0a00 	vadd.f32	s0, s0, s0
    2d36:	bd08      	pop	{r3, pc}
    2d38:	00000000 	.word	0x00000000
    2d3c:	f3af 8000 	nop.w

00002d40 <parsePreset>:
{
    2d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d44:	b087      	sub	sp, #28
    2d46:	460e      	mov	r6, r1
    2d48:	9000      	str	r0, [sp, #0]
    2d4a:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2d4c:	b672      	cpsid	i
	 presetReady = 0;
    2d4e:	2500      	movs	r5, #0
		presetName[i] = buffer[bufferIndex];
    2d50:	4ceb      	ldr	r4, [pc, #940]	; (3100 <parsePreset+0x3c0>)
	 presetReady = 0;
    2d52:	4bec      	ldr	r3, [pc, #944]	; (3104 <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
    2d54:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d58:	4629      	mov	r1, r5
    2d5a:	48eb      	ldr	r0, [pc, #940]	; (3108 <parsePreset+0x3c8>)
	 presetReady = 0;
    2d5c:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    2d5e:	f002 ff57 	bl	5c10 <__memset_veneer>
		presetName[i] = buffer[bufferIndex];
    2d62:	7921      	ldrb	r1, [r4, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2d64:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
	audioMasterLevel = 0.0f;
    2d68:	f04f 0b00 	mov.w	fp, #0
		presetName[i] = buffer[bufferIndex];
    2d6c:	4be7      	ldr	r3, [pc, #924]	; (310c <parsePreset+0x3cc>)
    2d6e:	9101      	str	r1, [sp, #4]
	audioMasterLevel = 0.0f;
    2d70:	49e7      	ldr	r1, [pc, #924]	; (3110 <parsePreset+0x3d0>)
		presetName[i] = buffer[bufferIndex];
    2d72:	f894 a000 	ldrb.w	sl, [r4]
	audioMasterLevel = 0.0f;
    2d76:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2d7a:	ea4f 0b40 	mov.w	fp, r0, lsl #1
    2d7e:	49e5      	ldr	r1, [pc, #916]	; (3114 <parsePreset+0x3d4>)
    2d80:	4ae4      	ldr	r2, [pc, #912]	; (3114 <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
    2d82:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2d86:	eb02 0240 	add.w	r2, r2, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
    2d8a:	f883 a000 	strb.w	sl, [r3]
    2d8e:	78a7      	ldrb	r7, [r4, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2d90:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
    2d94:	78e6      	ldrb	r6, [r4, #3]
    2d96:	9901      	ldr	r1, [sp, #4]
    2d98:	f894 8001 	ldrb.w	r8, [r4, #1]
    2d9c:	f8cd c008 	str.w	ip, [sp, #8]
    2da0:	f894 c006 	ldrb.w	ip, [r4, #6]
    2da4:	f883 8001 	strb.w	r8, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2da8:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
    2dac:	709f      	strb	r7, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2dae:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
    2db0:	70de      	strb	r6, [r3, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2db2:	70d6      	strb	r6, [r2, #3]
		presetName[i] = buffer[bufferIndex];
    2db4:	7119      	strb	r1, [r3, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2db6:	7111      	strb	r1, [r2, #4]
		presetName[i] = buffer[bufferIndex];
    2db8:	9902      	ldr	r1, [sp, #8]
    2dba:	f8cd c00c 	str.w	ip, [sp, #12]
    2dbe:	7159      	strb	r1, [r3, #5]
    2dc0:	f894 c007 	ldrb.w	ip, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2dc4:	7151      	strb	r1, [r2, #5]
		presetName[i] = buffer[bufferIndex];
    2dc6:	9903      	ldr	r1, [sp, #12]
    2dc8:	f894 9008 	ldrb.w	r9, [r4, #8]
    2dcc:	f894 e009 	ldrb.w	lr, [r4, #9]
    2dd0:	7199      	strb	r1, [r3, #6]
    2dd2:	f8cd c010 	str.w	ip, [sp, #16]
    2dd6:	f894 c00a 	ldrb.w	ip, [r4, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2dda:	7191      	strb	r1, [r2, #6]
		presetName[i] = buffer[bufferIndex];
    2ddc:	9904      	ldr	r1, [sp, #16]
    2dde:	7ae7      	ldrb	r7, [r4, #11]
    2de0:	71d9      	strb	r1, [r3, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2de2:	71d1      	strb	r1, [r2, #7]
		presetName[i] = buffer[bufferIndex];
    2de4:	f883 9008 	strb.w	r9, [r3, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2de8:	f882 9008 	strb.w	r9, [r2, #8]
		presetName[i] = buffer[bufferIndex];
    2dec:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2df0:	f882 e009 	strb.w	lr, [r2, #9]
		presetName[i] = buffer[bufferIndex];
    2df4:	f883 c00a 	strb.w	ip, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2df8:	f882 c00a 	strb.w	ip, [r2, #10]
		presetName[i] = buffer[bufferIndex];
    2dfc:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2dfe:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
    2e00:	7b27      	ldrb	r7, [r4, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2e02:	49c5      	ldr	r1, [pc, #788]	; (3118 <parsePreset+0x3d8>)
		presetName[i] = buffer[bufferIndex];
    2e04:	731f      	strb	r7, [r3, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2e06:	7317      	strb	r7, [r2, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2e08:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    2e0c:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2e0e:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
    2e10:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2e12:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2e14:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2e16:	540b      	strb	r3, [r1, r0]
    2e18:	7be3      	ldrb	r3, [r4, #15]
    2e1a:	7073      	strb	r3, [r6, #1]
    2e1c:	7c23      	ldrb	r3, [r4, #16]
    2e1e:	70b3      	strb	r3, [r6, #2]
    2e20:	7c63      	ldrb	r3, [r4, #17]
    2e22:	70f3      	strb	r3, [r6, #3]
    2e24:	7ca3      	ldrb	r3, [r4, #18]
    2e26:	7133      	strb	r3, [r6, #4]
    2e28:	7ce3      	ldrb	r3, [r4, #19]
    2e2a:	7173      	strb	r3, [r6, #5]
    2e2c:	7d23      	ldrb	r3, [r4, #20]
    2e2e:	71b3      	strb	r3, [r6, #6]
    2e30:	7d63      	ldrb	r3, [r4, #21]
    2e32:	71f3      	strb	r3, [r6, #7]
    2e34:	7da3      	ldrb	r3, [r4, #22]
    2e36:	7233      	strb	r3, [r6, #8]
    2e38:	7de3      	ldrb	r3, [r4, #23]
    2e3a:	7273      	strb	r3, [r6, #9]
    2e3c:	7e23      	ldrb	r3, [r4, #24]
    2e3e:	72b3      	strb	r3, [r6, #10]
    2e40:	7e63      	ldrb	r3, [r4, #25]
    2e42:	72f3      	strb	r3, [r6, #11]
    2e44:	7ea3      	ldrb	r3, [r4, #26]
    2e46:	7333      	strb	r3, [r6, #12]
    2e48:	7ee3      	ldrb	r3, [r4, #27]
    2e4a:	7373      	strb	r3, [r6, #13]
    2e4c:	7f23      	ldrb	r3, [r4, #28]
    2e4e:	73b3      	strb	r3, [r6, #14]
    2e50:	7f63      	ldrb	r3, [r4, #29]
    2e52:	73f3      	strb	r3, [r6, #15]
    2e54:	7fa3      	ldrb	r3, [r4, #30]
    2e56:	7433      	strb	r3, [r6, #16]
    2e58:	7fe3      	ldrb	r3, [r4, #31]
    2e5a:	7473      	strb	r3, [r6, #17]
    2e5c:	f894 3020 	ldrb.w	r3, [r4, #32]
    2e60:	74b3      	strb	r3, [r6, #18]
    2e62:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    2e66:	74f3      	strb	r3, [r6, #19]
    2e68:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    2e6c:	7533      	strb	r3, [r6, #20]
    2e6e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    2e72:	7573      	strb	r3, [r6, #21]
    2e74:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    2e78:	75b3      	strb	r3, [r6, #22]
    2e7a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    2e7e:	75f3      	strb	r3, [r6, #23]
    2e80:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    2e84:	7633      	strb	r3, [r6, #24]
    2e86:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2e8a:	7673      	strb	r3, [r6, #25]
    2e8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2e90:	76b3      	strb	r3, [r6, #26]
    2e92:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    2e96:	76f3      	strb	r3, [r6, #27]
    2e98:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    2e9c:	7733      	strb	r3, [r6, #28]
    2e9e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2ea2:	7773      	strb	r3, [r6, #29]
    2ea4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2ea8:	77b3      	strb	r3, [r6, #30]
    2eaa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    2eae:	77f3      	strb	r3, [r6, #31]
    2eb0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2eb4:	f886 3020 	strb.w	r3, [r6, #32]
    2eb8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2ebc:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    2ec0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2ec4:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    2ec8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    2ecc:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
    2ed0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    2ed4:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    2ed8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2edc:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
    2ee0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2ee4:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
    2ee8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    2eec:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
    2ef0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    2ef4:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
    2ef8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    2efc:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
    2f00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    2f04:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
    2f08:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2f0c:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
    2f10:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    2f14:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    2f18:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    2f1c:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    2f20:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    2f24:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    2f28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    2f2c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    2f30:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    2f34:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    2f38:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2f3c:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
    2f40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    2f44:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
    2f48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2f4c:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
    2f50:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2f54:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    2f58:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2f5c:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    2f60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2f64:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    2f68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2f6c:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    2f70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    2f74:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
    2f78:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    2f7c:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    2f80:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    2f84:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
    2f88:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    2f8c:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
    2f90:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    2f94:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    2f98:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2f9c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    2fa0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    2fa4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    2fa8:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
    2fac:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
    2fb0:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    2fb4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    2fb8:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    2fbc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    2fc0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    2fc4:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
    2fc8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    2fcc:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
    2fd0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    2fd4:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
    2fd8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
    2fdc:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
    2fe0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    2fe4:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
    2fe8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    2fec:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
    2ff0:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    2ff4:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
    2ff8:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    2ffc:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
    3000:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    3004:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
    3008:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    300c:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
    3010:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    3014:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
    3018:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    301c:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    3020:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    3024:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
    3028:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    302c:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
    3030:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    3034:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    3038:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    303c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
    3040:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    3044:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
    3048:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    304c:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
    3050:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    3054:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
    3058:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
    305c:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
    3060:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    3064:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
    3068:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    306c:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
    3070:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    3074:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
    3078:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    307c:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
    3080:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    3084:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
    3088:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    308c:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
    3090:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    3094:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
    3098:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    309c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    30a0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    30a4:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
    30a8:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    30ac:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
    30b0:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
    30b4:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
    30b8:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
    30bc:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
    30c0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    30c4:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
    30c8:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    30cc:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
    30d0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    30d4:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
    30d8:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
    30dc:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
    30e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    30e4:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
    30e8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    30ec:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    30f0:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
    30f4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    30f8:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
    30fc:	e00e      	b.n	311c <parsePreset+0x3dc>
    30fe:	bf00      	nop
    3100:	30000480 	.word	0x30000480
    3104:	20005618 	.word	0x20005618
    3108:	30000000 	.word	0x30000000
    310c:	2001b8f0 	.word	0x2001b8f0
    3110:	20000744 	.word	0x20000744
    3114:	3003a000 	.word	0x3003a000
    3118:	3003c380 	.word	0x3003c380
    311c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    3120:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
    3124:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3128:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
    312c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    3130:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    3134:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3138:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    313c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    3140:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    3144:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3146:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
    314a:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
    314e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
    3152:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
    3156:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
    315a:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
    315e:	9a00      	ldr	r2, [sp, #0]
    3160:	4293      	cmp	r3, r2
    3162:	dc0d      	bgt.n	3180 <parsePreset+0x440>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    3164:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
    3168:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    316c:	005f      	lsls	r7, r3, #1
    316e:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
    3172:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
    3176:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
    317a:	b292      	uxth	r2, r2
    317c:	4282      	cmp	r2, r0
    317e:	d00c      	beq.n	319a <parsePreset+0x45a>
		audioMasterLevel = 1.0f;
    3180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    3184:	4ac4      	ldr	r2, [pc, #784]	; (3498 <parsePreset+0x758>)
		audioMasterLevel = 1.0f;
    3186:	49c5      	ldr	r1, [pc, #788]	; (349c <parsePreset+0x75c>)
    3188:	600b      	str	r3, [r1, #0]
		 presetReady = 1;
    318a:	2301      	movs	r3, #1
		presetWaitingToParse = 0;
    318c:	6015      	str	r5, [r2, #0]
		 presetReady = 1;
    318e:	4ac4      	ldr	r2, [pc, #784]	; (34a0 <parsePreset+0x760>)
    3190:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3192:	b662      	cpsie	i
}
    3194:	b007      	add	sp, #28
    3196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    319a:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    319e:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    31a0:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    31a4:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    31a8:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
    31ac:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    31b0:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
    31b4:	b280      	uxth	r0, r0
    31b6:	4401      	add	r1, r0
    31b8:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
    31ba:	9800      	ldr	r0, [sp, #0]
    31bc:	b289      	uxth	r1, r1
    31be:	4281      	cmp	r1, r0
    31c0:	dcde      	bgt.n	3180 <parsePreset+0x440>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    31c2:	1866      	adds	r6, r4, r1
    31c4:	5c60      	ldrb	r0, [r4, r1]
    31c6:	7871      	ldrb	r1, [r6, #1]
    31c8:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    31cc:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    31d0:	b289      	uxth	r1, r1
    31d2:	4281      	cmp	r1, r0
    31d4:	d1d4      	bne.n	3180 <parsePreset+0x440>
	for (int i = 0; i < paramCount; i++)
    31d6:	2b00      	cmp	r3, #0
    31d8:	f001 81ac 	beq.w	4534 <parsePreset+0x17f4>
    31dc:	48b1      	ldr	r0, [pc, #708]	; (34a4 <parsePreset+0x764>)
    31de:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    31e0:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 34a8 <parsePreset+0x768>
	bufferIndex = bufferIndex + 2;
    31e4:	2180      	movs	r1, #128	; 0x80
    31e6:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
    31e8:	4606      	mov	r6, r0
    31ea:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    31ec:	1c4a      	adds	r2, r1, #1
    31ee:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
    31f2:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
    31f4:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    31f6:	b292      	uxth	r2, r2
		bufferIndex += 2;
    31f8:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    31fa:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
    31fc:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    31fe:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    3202:	ee07 2a90 	vmov	s15, r2
    3206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    320a:	ee67 7a87 	vmul.f32	s15, s15, s14
    320e:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
    3212:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    3216:	d1e9      	bne.n	31ec <parsePreset+0x4ac>
    3218:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    321c:	4aa1      	ldr	r2, [pc, #644]	; (34a4 <parsePreset+0x764>)
    321e:	49a3      	ldr	r1, [pc, #652]	; (34ac <parsePreset+0x76c>)
    3220:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
    3224:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    3226:	321c      	adds	r2, #28
    3228:	42aa      	cmp	r2, r5
    322a:	d1fb      	bne.n	3224 <parsePreset+0x4e4>
    322c:	4aa0      	ldr	r2, [pc, #640]	; (34b0 <parsePreset+0x770>)
		params[i].scaleFunc = &scaleDefault;
    322e:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    3230:	301c      	adds	r0, #28
    3232:	42a8      	cmp	r0, r5
    3234:	d1fb      	bne.n	322e <parsePreset+0x4ee>
	bufferIndex += 2;
    3236:	ea4f 0843 	mov.w	r8, r3, lsl #1
    323a:	f108 0884 	add.w	r8, r8, #132	; 0x84
    323e:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
    3242:	2b9a      	cmp	r3, #154	; 0x9a
    3244:	f301 8173 	bgt.w	452e <parsePreset+0x17ee>
    3248:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    324c:	4d99      	ldr	r5, [pc, #612]	; (34b4 <parsePreset+0x774>)
    324e:	4997      	ldr	r1, [pc, #604]	; (34ac <parsePreset+0x76c>)
			params[i].zeroToOneVal[v] = 0.0f;
    3250:	2000      	movs	r0, #0
    3252:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3256:	4a96      	ldr	r2, [pc, #600]	; (34b0 <parsePreset+0x770>)
    3258:	6018      	str	r0, [r3, #0]
    325a:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
    325c:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    3260:	331c      	adds	r3, #28
    3262:	42ab      	cmp	r3, r5
    3264:	d1f8      	bne.n	3258 <parsePreset+0x518>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    3266:	4b94      	ldr	r3, [pc, #592]	; (34b8 <parsePreset+0x778>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3268:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
    326c:	4993      	ldr	r1, [pc, #588]	; (34bc <parsePreset+0x77c>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    326e:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    3272:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    3276:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    327a:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    327e:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    3282:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    3286:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    328a:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    328e:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    3292:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    3296:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    329a:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    329e:	4b88      	ldr	r3, [pc, #544]	; (34c0 <parsePreset+0x780>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    32a0:	4a88      	ldr	r2, [pc, #544]	; (34c4 <parsePreset+0x784>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    32a2:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    32a6:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    32aa:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    32ae:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    32b2:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    32b6:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    32ba:	4b83      	ldr	r3, [pc, #524]	; (34c8 <parsePreset+0x788>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    32bc:	f8df a23c 	ldr.w	sl, [pc, #572]	; 34fc <parsePreset+0x7bc>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    32c0:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    32c4:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    32c8:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    32cc:	4b7f      	ldr	r3, [pc, #508]	; (34cc <parsePreset+0x78c>)
	params[Transpose].scaleFunc = &scaleTranspose;
    32ce:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    32d2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    32d6:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    32da:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    32de:	4b7c      	ldr	r3, [pc, #496]	; (34d0 <parsePreset+0x790>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    32e0:	497c      	ldr	r1, [pc, #496]	; (34d4 <parsePreset+0x794>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    32e2:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    32e6:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    32ea:	4b7b      	ldr	r3, [pc, #492]	; (34d8 <parsePreset+0x798>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    32ec:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    32f0:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    32f4:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    32f8:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    32fc:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    3300:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    3304:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3308:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
    330c:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    3310:	4a72      	ldr	r2, [pc, #456]	; (34dc <parsePreset+0x79c>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3312:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    3316:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    331a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    331e:	fef8 7a67 	vrinta.f32	s15, s15
    3322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3326:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    332a:	f89d 2000 	ldrb.w	r2, [sp]
    332e:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3330:	4a6b      	ldr	r2, [pc, #428]	; (34e0 <parsePreset+0x7a0>)
    3332:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3336:	bf88      	it	hi
    3338:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    333c:	ee67 7a87 	vmul.f32	s15, s15, s14
    3340:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    3344:	fef8 7a67 	vrinta.f32	s15, s15
    3348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    334c:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3350:	f89d 2000 	ldrb.w	r2, [sp]
    3354:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3356:	4a63      	ldr	r2, [pc, #396]	; (34e4 <parsePreset+0x7a4>)
    3358:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    335c:	bf88      	it	hi
    335e:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3362:	ee67 7a87 	vmul.f32	s15, s15, s14
    3366:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    336a:	fef8 7a67 	vrinta.f32	s15, s15
    336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3372:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3376:	f89d 2000 	ldrb.w	r2, [sp]
    337a:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    337c:	4a5a      	ldr	r2, [pc, #360]	; (34e8 <parsePreset+0x7a8>)
    337e:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3382:	bf88      	it	hi
    3384:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3388:	ee67 7a87 	vmul.f32	s15, s15, s14
    338c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    3390:	fef8 7a67 	vrinta.f32	s15, s15
    3394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3398:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    339c:	f89d 2000 	ldrb.w	r2, [sp]
    33a0:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33a2:	4a52      	ldr	r2, [pc, #328]	; (34ec <parsePreset+0x7ac>)
    33a4:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    33a8:	bf88      	it	hi
    33aa:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    33b2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    33b6:	fef8 7a67 	vrinta.f32	s15, s15
    33ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    33be:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    33c2:	f89d 2000 	ldrb.w	r2, [sp]
    33c6:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33c8:	4a49      	ldr	r2, [pc, #292]	; (34f0 <parsePreset+0x7b0>)
    33ca:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    33ce:	bf88      	it	hi
    33d0:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    33d8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    33dc:	fef8 7a67 	vrinta.f32	s15, s15
    33e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    33e4:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    33e8:	f89d 2000 	ldrb.w	r2, [sp]
    33ec:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33ee:	4a41      	ldr	r2, [pc, #260]	; (34f4 <parsePreset+0x7b4>)
    33f0:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    33f4:	bf88      	it	hi
    33f6:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    33fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    33fe:	fef8 7a67 	vrinta.f32	s15, s15
    3402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3406:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    340a:	f89d 2000 	ldrb.w	r2, [sp]
    340e:	2a0b      	cmp	r2, #11
    3410:	d901      	bls.n	3416 <parsePreset+0x6d6>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3412:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3416:	4a38      	ldr	r2, [pc, #224]	; (34f8 <parsePreset+0x7b8>)
    3418:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    341c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 34a4 <parsePreset+0x764>
    3420:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
    3424:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3426:	ee67 7a87 	vmul.f32	s15, s15, s14
    342a:	fef8 7a67 	vrinta.f32	s15, s15
    342e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3432:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3436:	f89d 2000 	ldrb.w	r2, [sp]
    343a:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    343c:	bf88      	it	hi
    343e:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
    3442:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3444:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    3446:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3448:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
    344c:	4798      	blx	r3
    344e:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    3452:	42af      	cmp	r7, r5
    3454:	d1f6      	bne.n	3444 <parsePreset+0x704>
    3456:	4f13      	ldr	r7, [pc, #76]	; (34a4 <parsePreset+0x764>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3458:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    345a:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    345c:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
    3460:	4798      	blx	r3
    3462:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    3466:	42af      	cmp	r7, r5
    3468:	d1f6      	bne.n	3458 <parsePreset+0x718>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    346a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    346e:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
    3472:	ee67 7a87 	vmul.f32	s15, s15, s14
    3476:	fef8 7a67 	vrinta.f32	s15, s15
    347a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    347e:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    3482:	2b06      	cmp	r3, #6
    3484:	d83f      	bhi.n	3506 <parsePreset+0x7c6>
    3486:	e8df f013 	tbh	[pc, r3, lsl #1]
    348a:	003b      	.short	0x003b
    348c:	081f0824 	.word	0x081f0824
    3490:	0815081a 	.word	0x0815081a
    3494:	080b0810 	.word	0x080b0810
    3498:	2001b904 	.word	0x2001b904
    349c:	20000744 	.word	0x20000744
    34a0:	20005618 	.word	0x20005618
    34a4:	2001a7fc 	.word	0x2001a7fc
    34a8:	377ffff6 	.word	0x377ffff6
    34ac:	24004505 	.word	0x24004505
    34b0:	00002501 	.word	0x00002501
    34b4:	2001b8f0 	.word	0x2001b8f0
    34b8:	00002641 	.word	0x00002641
    34bc:	00002521 	.word	0x00002521
    34c0:	00002461 	.word	0x00002461
    34c4:	000026e1 	.word	0x000026e1
    34c8:	00002481 	.word	0x00002481
    34cc:	000024a1 	.word	0x000024a1
    34d0:	000024c1 	.word	0x000024c1
    34d4:	00002561 	.word	0x00002561
    34d8:	000025a1 	.word	0x000025a1
    34dc:	000024e1 	.word	0x000024e1
    34e0:	2001aeec 	.word	0x2001aeec
    34e4:	2001afc8 	.word	0x2001afc8
    34e8:	2001afcc 	.word	0x2001afcc
    34ec:	2001b0a8 	.word	0x2001b0a8
    34f0:	2001b0ac 	.word	0x2001b0ac
    34f4:	2001b188 	.word	0x2001b188
    34f8:	2001b18c 	.word	0x2001b18c
    34fc:	2001b7fc 	.word	0x2001b7fc
				  shapeTick[i] = &sawSquareTick;
    3500:	4b8e      	ldr	r3, [pc, #568]	; (373c <parsePreset+0x9fc>)
    3502:	4a8f      	ldr	r2, [pc, #572]	; (3740 <parsePreset+0xa00>)
    3504:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3506:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    350a:	4b8e      	ldr	r3, [pc, #568]	; (3744 <parsePreset+0xa04>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    350c:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3510:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3514:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3518:	edd3 7a00 	vldr	s15, [r3]
    351c:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3524:	fef8 7a67 	vrinta.f32	s15, s15
    3528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
    352c:	bfcc      	ite	gt
    352e:	2301      	movgt	r3, #1
    3530:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3532:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    3536:	2a06      	cmp	r2, #6
    3538:	d80b      	bhi.n	3552 <parsePreset+0x812>
    353a:	e8df f012 	tbh	[pc, r2, lsl #1]
    353e:	0007      	.short	0x0007
    3540:	07a707ac 	.word	0x07a707ac
    3544:	079d07a2 	.word	0x079d07a2
    3548:	07930798 	.word	0x07930798
				  shapeTick[i] = &sawSquareTick;
    354c:	4a7b      	ldr	r2, [pc, #492]	; (373c <parsePreset+0x9fc>)
    354e:	497c      	ldr	r1, [pc, #496]	; (3740 <parsePreset+0xa00>)
    3550:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3552:	4a7d      	ldr	r2, [pc, #500]	; (3748 <parsePreset+0xa08>)
    3554:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3558:	ed92 7a00 	vldr	s14, [r2]
    355c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3564:	dd01      	ble.n	356a <parsePreset+0x82a>
			enabledCount++;
    3566:	3301      	adds	r3, #1
    3568:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    356a:	4a78      	ldr	r2, [pc, #480]	; (374c <parsePreset+0xa0c>)
    356c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    3570:	edd2 7a00 	vldr	s15, [r2]
    3574:	ee67 7a87 	vmul.f32	s15, s15, s14
    3578:	fef8 7a67 	vrinta.f32	s15, s15
    357c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3580:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    3584:	2a06      	cmp	r2, #6
    3586:	d80b      	bhi.n	35a0 <parsePreset+0x860>
    3588:	e8df f012 	tbh	[pc, r2, lsl #1]
    358c:	07670007 	.word	0x07670007
    3590:	075d0762 	.word	0x075d0762
    3594:	07530758 	.word	0x07530758
    3598:	074e      	.short	0x074e
				  shapeTick[i] = &sawSquareTick;
    359a:	4a68      	ldr	r2, [pc, #416]	; (373c <parsePreset+0x9fc>)
    359c:	4968      	ldr	r1, [pc, #416]	; (3740 <parsePreset+0xa00>)
    359e:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    35a0:	4a6b      	ldr	r2, [pc, #428]	; (3750 <parsePreset+0xa10>)
    35a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    35a6:	ed92 7a00 	vldr	s14, [r2]
    35aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
    35ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35b2:	dd01      	ble.n	35b8 <parsePreset+0x878>
			enabledCount++;
    35b4:	3301      	adds	r3, #1
    35b6:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    35b8:	4a66      	ldr	r2, [pc, #408]	; (3754 <parsePreset+0xa14>)
    35ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    35be:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    35c2:	4a65      	ldr	r2, [pc, #404]	; (3758 <parsePreset+0xa18>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    35c4:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
    35c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35cc:	4a63      	ldr	r2, [pc, #396]	; (375c <parsePreset+0xa1c>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    35ce:	fef8 7a67 	vrinta.f32	s15, s15
    35d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    35d6:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    35d8:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    35dc:	6011      	str	r1, [r2, #0]
		switch (filterType)
    35de:	4960      	ldr	r1, [pc, #384]	; (3760 <parsePreset+0xa20>)
    35e0:	2b08      	cmp	r3, #8
    35e2:	d811      	bhi.n	3608 <parsePreset+0x8c8>
    35e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    35e8:	07170009 	.word	0x07170009
    35ec:	0705070e 	.word	0x0705070e
    35f0:	06f306fc 	.word	0x06f306fc
    35f4:	06e106ea 	.word	0x06e106ea
    35f8:	06d8      	.short	0x06d8
				  filterTick[i] = &lowpassTick;
    35fa:	4b5a      	ldr	r3, [pc, #360]	; (3764 <parsePreset+0xa24>)
    35fc:	4a5a      	ldr	r2, [pc, #360]	; (3768 <parsePreset+0xa28>)
    35fe:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
    3600:	4b5a      	ldr	r3, [pc, #360]	; (376c <parsePreset+0xa2c>)
    3602:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
    3604:	4b5a      	ldr	r3, [pc, #360]	; (3770 <parsePreset+0xa30>)
    3606:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    3608:	4b5a      	ldr	r3, [pc, #360]	; (3774 <parsePreset+0xa34>)
    360a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    360e:	edd3 7a00 	vldr	s15, [r3]
    3612:	ee67 7a87 	vmul.f32	s15, s15, s14
    3616:	fef8 7a67 	vrinta.f32	s15, s15
    361a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    361e:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
    3622:	2b08      	cmp	r3, #8
    3624:	d811      	bhi.n	364a <parsePreset+0x90a>
    3626:	e8df f013 	tbh	[pc, r3, lsl #1]
    362a:	0009      	.short	0x0009
    362c:	06a506ae 	.word	0x06a506ae
    3630:	0693069c 	.word	0x0693069c
    3634:	0681068a 	.word	0x0681068a
    3638:	066f0678 	.word	0x066f0678
				  filterTick[i] = &lowpassTick;
    363c:	4b49      	ldr	r3, [pc, #292]	; (3764 <parsePreset+0xa24>)
    363e:	4a4a      	ldr	r2, [pc, #296]	; (3768 <parsePreset+0xa28>)
    3640:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
    3642:	4b4a      	ldr	r3, [pc, #296]	; (376c <parsePreset+0xa2c>)
    3644:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
    3646:	4b4a      	ldr	r3, [pc, #296]	; (3770 <parsePreset+0xa30>)
    3648:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    364a:	4b4b      	ldr	r3, [pc, #300]	; (3778 <parsePreset+0xa38>)
    364c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3650:	edd3 7a00 	vldr	s15, [r3]
    3654:	ee67 7a87 	vmul.f32	s15, s15, s14
    3658:	fef8 7a67 	vrinta.f32	s15, s15
    365c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3660:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3664:	2b05      	cmp	r3, #5
    3666:	f200 87e2 	bhi.w	462e <parsePreset+0x18ee>
    366a:	e8df f013 	tbh	[pc, r3, lsl #1]
    366e:	0641      	.short	0x0641
    3670:	05cf0635 	.word	0x05cf0635
    3674:	05b705c3 	.word	0x05b705c3
    3678:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    367a:	4b40      	ldr	r3, [pc, #256]	; (377c <parsePreset+0xa3c>)
    367c:	4840      	ldr	r0, [pc, #256]	; (3780 <parsePreset+0xa40>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
    367e:	4a41      	ldr	r2, [pc, #260]	; (3784 <parsePreset+0xa44>)
				lfoShapeTick[i] = &lfoPulseTick;
    3680:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    3682:	4b41      	ldr	r3, [pc, #260]	; (3788 <parsePreset+0xa48>)
    3684:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    3686:	4b41      	ldr	r3, [pc, #260]	; (378c <parsePreset+0xa4c>)
    3688:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    368a:	4b41      	ldr	r3, [pc, #260]	; (3790 <parsePreset+0xa50>)
    368c:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    368e:	4b41      	ldr	r3, [pc, #260]	; (3794 <parsePreset+0xa54>)
    3690:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3694:	edd3 7a00 	vldr	s15, [r3]
    3698:	ee67 7a87 	vmul.f32	s15, s15, s14
    369c:	fef8 7a67 	vrinta.f32	s15, s15
    36a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    36a4:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    36a8:	2b05      	cmp	r3, #5
    36aa:	d810      	bhi.n	36ce <parsePreset+0x98e>
    36ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    36b0:	0580058b 	.word	0x0580058b
    36b4:	056a0575 	.word	0x056a0575
    36b8:	00060554 	.word	0x00060554
				lfoShapeTick[i] = &lfoPulseTick;
    36bc:	4b2f      	ldr	r3, [pc, #188]	; (377c <parsePreset+0xa3c>)
    36be:	4830      	ldr	r0, [pc, #192]	; (3780 <parsePreset+0xa40>)
    36c0:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    36c2:	4b31      	ldr	r3, [pc, #196]	; (3788 <parsePreset+0xa48>)
    36c4:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    36c6:	4b31      	ldr	r3, [pc, #196]	; (378c <parsePreset+0xa4c>)
    36c8:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    36ca:	4b31      	ldr	r3, [pc, #196]	; (3790 <parsePreset+0xa50>)
    36cc:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    36ce:	4b32      	ldr	r3, [pc, #200]	; (3798 <parsePreset+0xa58>)
    36d0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    36d4:	edd3 7a00 	vldr	s15, [r3]
    36d8:	ee67 7a87 	vmul.f32	s15, s15, s14
    36dc:	fef8 7a67 	vrinta.f32	s15, s15
    36e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    36e4:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    36e8:	2b05      	cmp	r3, #5
    36ea:	d810      	bhi.n	370e <parsePreset+0x9ce>
    36ec:	e8df f013 	tbh	[pc, r3, lsl #1]
    36f0:	0529053f 	.word	0x0529053f
    36f4:	0513051e 	.word	0x0513051e
    36f8:	000604f2 	.word	0x000604f2
				lfoShapeTick[i] = &lfoPulseTick;
    36fc:	4b1f      	ldr	r3, [pc, #124]	; (377c <parsePreset+0xa3c>)
    36fe:	4820      	ldr	r0, [pc, #128]	; (3780 <parsePreset+0xa40>)
    3700:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    3702:	4b21      	ldr	r3, [pc, #132]	; (3788 <parsePreset+0xa48>)
    3704:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    3706:	4b21      	ldr	r3, [pc, #132]	; (378c <parsePreset+0xa4c>)
    3708:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    370a:	4b21      	ldr	r3, [pc, #132]	; (3790 <parsePreset+0xa50>)
    370c:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    370e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3712:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
    3716:	ee67 7a87 	vmul.f32	s15, s15, s14
    371a:	fef8 7a67 	vrinta.f32	s15, s15
    371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3722:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3726:	2b05      	cmp	r3, #5
    3728:	d841      	bhi.n	37ae <parsePreset+0xa6e>
    372a:	e8df f013 	tbh	[pc, r3, lsl #1]
    372e:	04e9      	.short	0x04e9
    3730:	04c804de 	.word	0x04c804de
    3734:	04b204bd 	.word	0x04b204bd
    3738:	0037      	.short	0x0037
    373a:	bf00      	nop
    373c:	20005ae4 	.word	0x20005ae4
    3740:	00000621 	.word	0x00000621
    3744:	2001ad44 	.word	0x2001ad44
    3748:	2001ac10 	.word	0x2001ac10
    374c:	2001aeb0 	.word	0x2001aeb0
    3750:	2001ad7c 	.word	0x2001ad7c
    3754:	2001b284 	.word	0x2001b284
    3758:	20000058 	.word	0x20000058
    375c:	20000054 	.word	0x20000054
    3760:	20019d0c 	.word	0x20019d0c
    3764:	200050a0 	.word	0x200050a0
    3768:	00000b01 	.word	0x00000b01
    376c:	00000ee1 	.word	0x00000ee1
    3770:	00001001 	.word	0x00001001
    3774:	2001b32c 	.word	0x2001b32c
    3778:	2001b6c8 	.word	0x2001b6c8
    377c:	200052e0 	.word	0x200052e0
    3780:	24001eb9 	.word	0x24001eb9
    3784:	20019e38 	.word	0x20019e38
    3788:	24001f39 	.word	0x24001f39
    378c:	24001ff9 	.word	0x24001ff9
    3790:	24001fb1 	.word	0x24001fb1
    3794:	2001b754 	.word	0x2001b754
    3798:	2001b7e0 	.word	0x2001b7e0
				lfoShapeTick[i] = &lfoPulseTick;
    379c:	4b8e      	ldr	r3, [pc, #568]	; (39d8 <parsePreset+0xc98>)
    379e:	488f      	ldr	r0, [pc, #572]	; (39dc <parsePreset+0xc9c>)
    37a0:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    37a2:	4b8f      	ldr	r3, [pc, #572]	; (39e0 <parsePreset+0xca0>)
    37a4:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
    37a6:	4b8f      	ldr	r3, [pc, #572]	; (39e4 <parsePreset+0xca4>)
    37a8:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    37aa:	4b8f      	ldr	r3, [pc, #572]	; (39e8 <parsePreset+0xca8>)
    37ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
    37ae:	2304      	movs	r3, #4
    37b0:	4f8e      	ldr	r7, [pc, #568]	; (39ec <parsePreset+0xcac>)
    37b2:	4d8f      	ldr	r5, [pc, #572]	; (39f0 <parsePreset+0xcb0>)
    37b4:	9301      	str	r3, [sp, #4]
    37b6:	463b      	mov	r3, r7
    37b8:	f8df e290 	ldr.w	lr, [pc, #656]	; 3a4c <parsePreset+0xd0c>
				  effectSetters[i].setParam2 = &blankFunction;;
    37bc:	488d      	ldr	r0, [pc, #564]	; (39f4 <parsePreset+0xcb4>)
				  effectTick[i] = FXVZhighshelfTick;
    37be:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
    37c0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    37c4:	edde 7a00 	vldr	s15, [lr]
    37c8:	ee67 7a87 	vmul.f32	s15, s15, s14
    37cc:	fef8 7a67 	vrinta.f32	s15, s15
    37d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    37d4:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
    37d8:	f89d c000 	ldrb.w	ip, [sp]
    37dc:	f1bc 0f13 	cmp.w	ip, #19
    37e0:	d81e      	bhi.n	3820 <parsePreset+0xae0>
    37e2:	e8df f01c 	tbh	[pc, ip, lsl #1]
    37e6:	0445      	.short	0x0445
    37e8:	0417042e 	.word	0x0417042e
    37ec:	040f0413 	.word	0x040f0413
    37f0:	031503f9 	.word	0x031503f9
    37f4:	02f002ff 	.word	0x02f002ff
    37f8:	02be02d7 	.word	0x02be02d7
    37fc:	029e02ae 	.word	0x029e02ae
    3800:	03de028e 	.word	0x03de028e
    3804:	033f03cb 	.word	0x033f03cb
    3808:	03ee032e 	.word	0x03ee032e
    380c:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
    380e:	4a7a      	ldr	r2, [pc, #488]	; (39f8 <parsePreset+0xcb8>)
    3810:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
    3812:	4a7a      	ldr	r2, [pc, #488]	; (39fc <parsePreset+0xcbc>)
				  effectSetters[i].setParam5 = &blankFunction;;
    3814:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
    3816:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
    381a:	4a79      	ldr	r2, [pc, #484]	; (3a00 <parsePreset+0xcc0>)
				  effectSetters[i].setParam4 = &blankFunction;;
    381c:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
    3820:	3504      	adds	r5, #4
    3822:	4a78      	ldr	r2, [pc, #480]	; (3a04 <parsePreset+0xcc4>)
    3824:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
    3828:	3314      	adds	r3, #20
    382a:	4295      	cmp	r5, r2
    382c:	d1c8      	bne.n	37c0 <parsePreset+0xa80>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    382e:	4876      	ldr	r0, [pc, #472]	; (3a08 <parsePreset+0xcc8>)
	params[Effect1Mix].setParam = &fxMixSet;
    3830:	4b76      	ldr	r3, [pc, #472]	; (3a0c <parsePreset+0xccc>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    3832:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    3836:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    383a:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    383e:	4874      	ldr	r0, [pc, #464]	; (3a10 <parsePreset+0xcd0>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
    3840:	4d74      	ldr	r5, [pc, #464]	; (3a14 <parsePreset+0xcd4>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    3842:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    3846:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    384a:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    384e:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    3850:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    3852:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    3856:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    3858:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    385c:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    3860:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    3862:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    3866:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    386a:	68f8      	ldr	r0, [r7, #12]
    386c:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    3870:	6938      	ldr	r0, [r7, #16]
    3872:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    3876:	6978      	ldr	r0, [r7, #20]
    3878:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    387c:	69b8      	ldr	r0, [r7, #24]
    387e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    3882:	69f8      	ldr	r0, [r7, #28]
    3884:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    3888:	4863      	ldr	r0, [pc, #396]	; (3a18 <parsePreset+0xcd8>)
    388a:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    388e:	4863      	ldr	r0, [pc, #396]	; (3a1c <parsePreset+0xcdc>)
    3890:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    3894:	4862      	ldr	r0, [pc, #392]	; (3a20 <parsePreset+0xce0>)
    3896:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
    389a:	4862      	ldr	r0, [pc, #392]	; (3a24 <parsePreset+0xce4>)
    389c:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    389e:	4862      	ldr	r0, [pc, #392]	; (3a28 <parsePreset+0xce8>)
    38a0:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    38a4:	4861      	ldr	r0, [pc, #388]	; (3a2c <parsePreset+0xcec>)
    38a6:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    38aa:	4861      	ldr	r0, [pc, #388]	; (3a30 <parsePreset+0xcf0>)
    38ac:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    38b0:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
    38b2:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    38b6:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    38ba:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    38be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    38c0:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    38c4:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    38c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
    38ca:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    38ce:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    38d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
    38d4:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    38d8:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    38dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
    38de:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
    38e2:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    38e4:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    38e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    38ea:	4852      	ldr	r0, [pc, #328]	; (3a34 <parsePreset+0xcf4>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    38ec:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    38f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    38f2:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    38f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38f8:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    38fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    38fe:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    3902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3904:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    3908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    390a:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
    3910:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    3912:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    3916:	680b      	ldr	r3, [r1, #0]
    3918:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    391c:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    391e:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    3922:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    3926:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    3928:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    392c:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    3930:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    3932:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    3936:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    393a:	4b3f      	ldr	r3, [pc, #252]	; (3a38 <parsePreset+0xcf8>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    393c:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    3940:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    3944:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    3948:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    394c:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    3950:	4b3a      	ldr	r3, [pc, #232]	; (3a3c <parsePreset+0xcfc>)
    3952:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    3956:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    395a:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    395e:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    3962:	4b37      	ldr	r3, [pc, #220]	; (3a40 <parsePreset+0xd00>)
    3964:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    3968:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    396c:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    3970:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    3974:	4b33      	ldr	r3, [pc, #204]	; (3a44 <parsePreset+0xd04>)
    3976:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    397a:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    397e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    3982:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    3986:	6813      	ldr	r3, [r2, #0]
    3988:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    398c:	68d3      	ldr	r3, [r2, #12]
    398e:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    3992:	6993      	ldr	r3, [r2, #24]
    3994:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    3998:	6a53      	ldr	r3, [r2, #36]	; 0x24
    399a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    399e:	6853      	ldr	r3, [r2, #4]
    39a0:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    39a4:	6913      	ldr	r3, [r2, #16]
    39a6:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    39aa:	69d3      	ldr	r3, [r2, #28]
    39ac:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    39b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    39b2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    39b6:	6893      	ldr	r3, [r2, #8]
    39b8:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    39bc:	6953      	ldr	r3, [r2, #20]
    39be:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    39c2:	6a13      	ldr	r3, [r2, #32]
    39c4:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    39c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    39ca:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    39ce:	4b1e      	ldr	r3, [pc, #120]	; (3a48 <parsePreset+0xd08>)
    39d0:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    39d4:	46aa      	mov	sl, r5
    39d6:	e042      	b.n	3a5e <parsePreset+0xd1e>
    39d8:	200052e0 	.word	0x200052e0
    39dc:	24001eb9 	.word	0x24001eb9
    39e0:	24001f39 	.word	0x24001f39
    39e4:	24001ff9 	.word	0x24001ff9
    39e8:	24001fb1 	.word	0x24001fb1
    39ec:	20017cbc 	.word	0x20017cbc
    39f0:	20005048 	.word	0x20005048
    39f4:	24004505 	.word	0x24004505
    39f8:	00002221 	.word	0x00002221
    39fc:	2400226d 	.word	0x2400226d
    3a00:	24002429 	.word	0x24002429
    3a04:	20005058 	.word	0x20005058
    3a08:	00000e01 	.word	0x00000e01
    3a0c:	00001b61 	.word	0x00001b61
    3a10:	00000e61 	.word	0x00000e61
    3a14:	00001b81 	.word	0x00001b81
    3a18:	00002241 	.word	0x00002241
    3a1c:	000022e1 	.word	0x000022e1
    3a20:	000022a1 	.word	0x000022a1
    3a24:	00001401 	.word	0x00001401
    3a28:	00001421 	.word	0x00001421
    3a2c:	00001441 	.word	0x00001441
    3a30:	00001461 	.word	0x00001461
    3a34:	00001321 	.word	0x00001321
    3a38:	00001341 	.word	0x00001341
    3a3c:	00001361 	.word	0x00001361
    3a40:	00001381 	.word	0x00001381
    3a44:	000013a1 	.word	0x000013a1
    3a48:	000013e1 	.word	0x000013e1
    3a4c:	2001aee8 	.word	0x2001aee8
    3a50:	42fe0000 	.word	0x42fe0000
    3a54:	3c010204 	.word	0x3c010204
    3a58:	f109 091c 	add.w	r9, r9, #28
    3a5c:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
    3a5e:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
    3a62:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
    3a66:	2b0c      	cmp	r3, #12
    3a68:	d94b      	bls.n	3b02 <parsePreset+0xdc2>
		else if ((i >= Osc2) && (i < Osc3))
    3a6a:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
    3a6e:	2b0c      	cmp	r3, #12
    3a70:	f240 85da 	bls.w	4628 <parsePreset+0x18e8>
		else if ((i >= Osc3) && (i < Effect1FXType))
    3a74:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
    3a78:	2b0c      	cmp	r3, #12
    3a7a:	f240 85d1 	bls.w	4620 <parsePreset+0x18e0>
		else if ((i >= Filter1) && (i < Filter2))
    3a7e:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    3a82:	2b05      	cmp	r3, #5
    3a84:	d93d      	bls.n	3b02 <parsePreset+0xdc2>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    3a86:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
    3a8a:	2b06      	cmp	r3, #6
    3a8c:	f240 85cc 	bls.w	4628 <parsePreset+0x18e8>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    3a90:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
    3a94:	2b05      	cmp	r3, #5
    3a96:	d934      	bls.n	3b02 <parsePreset+0xdc2>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    3a98:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
    3a9c:	2b05      	cmp	r3, #5
    3a9e:	f240 85c3 	bls.w	4628 <parsePreset+0x18e8>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    3aa2:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
    3aa6:	2b05      	cmp	r3, #5
    3aa8:	f240 85ba 	bls.w	4620 <parsePreset+0x18e0>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    3aac:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
    3ab0:	2b05      	cmp	r3, #5
    3ab2:	f240 859f 	bls.w	45f4 <parsePreset+0x18b4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    3ab6:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
    3aba:	2b04      	cmp	r3, #4
    3abc:	d921      	bls.n	3b02 <parsePreset+0xdc2>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    3abe:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
    3ac2:	2b04      	cmp	r3, #4
    3ac4:	f240 85b0 	bls.w	4628 <parsePreset+0x18e8>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    3ac8:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
    3acc:	2b04      	cmp	r3, #4
    3ace:	f240 85a7 	bls.w	4620 <parsePreset+0x18e0>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    3ad2:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
    3ad6:	2b04      	cmp	r3, #4
    3ad8:	f240 858c 	bls.w	45f4 <parsePreset+0x18b4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    3adc:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
    3ae0:	2b07      	cmp	r3, #7
    3ae2:	d90e      	bls.n	3b02 <parsePreset+0xdc2>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    3ae4:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
    3ae8:	2b07      	cmp	r3, #7
    3aea:	f240 859d 	bls.w	4628 <parsePreset+0x18e8>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    3aee:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
    3af2:	2b07      	cmp	r3, #7
    3af4:	f240 8594 	bls.w	4620 <parsePreset+0x18e0>
		else if ((i >= Effect4FXType) && (i < Filter1))
    3af8:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    3afc:	2b07      	cmp	r3, #7
    3afe:	f240 8579 	bls.w	45f4 <parsePreset+0x18b4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    3b02:	2100      	movs	r1, #0
    3b04:	ed99 0a02 	vldr	s0, [r9, #8]
    3b08:	f8d9 3014 	ldr.w	r3, [r9, #20]
    3b0c:	4608      	mov	r0, r1
    3b0e:	4798      	blx	r3
    3b10:	ed99 0a03 	vldr	s0, [r9, #12]
    3b14:	f8d9 3014 	ldr.w	r3, [r9, #20]
    3b18:	2101      	movs	r1, #1
    3b1a:	f899 0018 	ldrb.w	r0, [r9, #24]
    3b1e:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    3b20:	2d9b      	cmp	r5, #155	; 0x9b
    3b22:	d199      	bne.n	3a58 <parsePreset+0xd18>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3b24:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	numMappings = 0;
    3b28:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3b2a:	ed96 7a02 	vldr	s14, [r6, #8]
		mappings[i].destNumber = 255;
    3b2e:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3b30:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 3a50 <parsePreset+0xd10>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3b34:	ee37 7a67 	vsub.f32	s14, s14, s15
    3b38:	ed1f 6a3a 	vldr	s12, [pc, #-232]	; 3a54 <parsePreset+0xd14>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3b3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3b40:	4bd2      	ldr	r3, [pc, #840]	; (3e8c <parsePreset+0x114c>)
    3b42:	f8df e388 	ldr.w	lr, [pc, #904]	; 3ecc <parsePreset+0x118c>
    3b46:	eec6 6a07 	vdiv.f32	s13, s12, s14
    3b4a:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
    3b4e:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3b52:	4bcf      	ldr	r3, [pc, #828]	; (3e90 <parsePreset+0x1150>)
    3b54:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
    3b58:	4bce      	ldr	r3, [pc, #824]	; (3e94 <parsePreset+0x1154>)
    3b5a:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    3b5c:	4bce      	ldr	r3, [pc, #824]	; (3e98 <parsePreset+0x1158>)
    3b5e:	601a      	str	r2, [r3, #0]
    3b60:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
    3b62:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    3b64:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
    3b66:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    3b6a:	4283      	cmp	r3, r0
    3b6c:	d1f9      	bne.n	3b62 <parsePreset+0xe22>
	for (int i = 0; i < mappingCount; i++)
    3b6e:	f1bb 0f00 	cmp.w	fp, #0
    3b72:	f000 8094 	beq.w	3c9e <parsePreset+0xf5e>
    3b76:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
    3b78:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3b7c:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 3e9c <parsePreset+0x115c>
			mappings[whichMapping].destNumber = destNumber;
    3b80:	f04f 094c 	mov.w	r9, #76	; 0x4c
    3b84:	4443      	add	r3, r8
    3b86:	f8df a348 	ldr.w	sl, [pc, #840]	; 3ed0 <parsePreset+0x1190>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3b8a:	9602      	str	r6, [sp, #8]
    3b8c:	b29b      	uxth	r3, r3
    3b8e:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
    3b90:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3b92:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3b94:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
    3b96:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
    3b9a:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    3b9c:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
    3b9e:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    3ba0:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
    3ba2:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
    3ba4:	7811      	ldrb	r1, [r2, #0]
    3ba6:	4281      	cmp	r1, r0
    3ba8:	d103      	bne.n	3bb2 <parsePreset+0xe72>
				whichHook = mappings[j].numHooks;
    3baa:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
    3bae:	b2de      	uxtb	r6, r3
				foundOne = 1;
    3bb0:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bb2:	3301      	adds	r3, #1
    3bb4:	324c      	adds	r2, #76	; 0x4c
    3bb6:	2b20      	cmp	r3, #32
    3bb8:	d1f4      	bne.n	3ba4 <parsePreset+0xe64>
		if (foundOne == 0)
    3bba:	2d00      	cmp	r5, #0
    3bbc:	f000 848e 	beq.w	44dc <parsePreset+0x179c>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    3bc0:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
    3bc2:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    3bc6:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3bca:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    3bcc:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3bd0:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
    3bd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    3bd8:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3bda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    3bde:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    3be2:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3be4:	4473      	add	r3, lr
    3be6:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    3be8:	bfcc      	ite	gt
    3bea:	465b      	movgt	r3, fp
    3bec:	2300      	movle	r3, #0
    3bee:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3bf2:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
    3bf6:	00e9      	lsls	r1, r5, #3
    3bf8:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3bfc:	f1a2 0318 	sub.w	r3, r2, #24
    3c00:	2b03      	cmp	r3, #3
    3c02:	d803      	bhi.n	3c0c <parsePreset+0xecc>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3c04:	4ba4      	ldr	r3, [pc, #656]	; (3e98 <parsePreset+0x1158>)
    3c06:	441a      	add	r2, r3
    3c08:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
    3c0c:	eb04 0308 	add.w	r3, r4, r8
    3c10:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
    3c12:	2bff      	cmp	r3, #255	; 0xff
    3c14:	f000 8475 	beq.w	4502 <parsePreset+0x17c2>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3c18:	fb09 f006 	mul.w	r0, r9, r6
    3c1c:	1d2a      	adds	r2, r5, #4
    3c1e:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
    3c22:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    3c26:	4472      	add	r2, lr
    3c28:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3c2a:	f1a3 0218 	sub.w	r2, r3, #24
    3c2e:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3c30:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3c34:	f200 8472 	bhi.w	451c <parsePreset+0x17dc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3c38:	2004      	movs	r0, #4
    3c3a:	2108      	movs	r1, #8
    3c3c:	4472      	add	r2, lr
    3c3e:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3c42:	4895      	ldr	r0, [pc, #596]	; (3e98 <parsePreset+0x1158>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3c44:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3c46:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3c48:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3c4a:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3c4e:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
    3c52:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3c56:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
    3c58:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3c5c:	791b      	ldrb	r3, [r3, #4]
    3c5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3c62:	b21b      	sxth	r3, r3
    3c64:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3c68:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3c70:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
    3c74:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3c78:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3c7e:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
    3c82:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    3c86:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    3c8a:	3301      	adds	r3, #1
    3c8c:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
    3c90:	9b00      	ldr	r3, [sp, #0]
    3c92:	4598      	cmp	r8, r3
    3c94:	f47f af7e 	bne.w	3b94 <parsePreset+0xe54>
    3c98:	4b7e      	ldr	r3, [pc, #504]	; (3e94 <parsePreset+0x1154>)
    3c9a:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
    3c9e:	4b80      	ldr	r3, [pc, #512]	; (3ea0 <parsePreset+0x1160>)
	presetWaitingToParse = 0;
    3ca0:	2100      	movs	r1, #0
    3ca2:	4c80      	ldr	r4, [pc, #512]	; (3ea4 <parsePreset+0x1164>)
	audioMasterLevel = 1.0f;
    3ca4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	if (params[Filter1].zeroToOneVal[0])
    3ca8:	ed93 7a00 	vldr	s14, [r3]
    3cac:	461a      	mov	r2, r3
	presetWaitingToParse = 0;
    3cae:	6021      	str	r1, [r4, #0]
	if (params[Filter2].zeroToOneVal[0])
    3cb0:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
	if (params[Filter1].zeroToOneVal[0])
    3cb4:	eeb5 7a40 	vcmp.f32	s14, #0.0
	currentActivePreset = presetNumber;
    3cb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3cbc:	4c7a      	ldr	r4, [pc, #488]	; (3ea8 <parsePreset+0x1168>)
	if (params[Filter1].zeroToOneVal[0])
    3cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
    3cc2:	7023      	strb	r3, [r4, #0]
	if (params[Filter2].zeroToOneVal[0])
    3cc4:	eef5 7a40 	vcmp.f32	s15, #0.0
	audioMasterLevel = 1.0f;
    3cc8:	4b78      	ldr	r3, [pc, #480]	; (3eac <parsePreset+0x116c>)
	uint8_t totalFilters = 0;
    3cca:	bf14      	ite	ne
    3ccc:	2201      	movne	r2, #1
    3cce:	2200      	moveq	r2, #0
	audioMasterLevel = 1.0f;
    3cd0:	6018      	str	r0, [r3, #0]
	oscToTick = NUM_OSC;
    3cd2:	2003      	movs	r0, #3
    3cd4:	4b76      	ldr	r3, [pc, #472]	; (3eb0 <parsePreset+0x1170>)
	if (params[Filter2].zeroToOneVal[0])
    3cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
    3cda:	9c01      	ldr	r4, [sp, #4]
	oscToTick = NUM_OSC;
    3cdc:	7018      	strb	r0, [r3, #0]
	overSampled = 1;
    3cde:	f04f 0301 	mov.w	r3, #1
    3ce2:	4874      	ldr	r0, [pc, #464]	; (3eb4 <parsePreset+0x1174>)
		totalFilters++;
    3ce4:	bf18      	it	ne
    3ce6:	3201      	addne	r2, #1
	overSampled = 1;
    3ce8:	7003      	strb	r3, [r0, #0]
	numEffectToTick = totalEffects;
    3cea:	4873      	ldr	r0, [pc, #460]	; (3eb8 <parsePreset+0x1178>)
    3cec:	7004      	strb	r4, [r0, #0]
	filterToTick = totalFilters;
    3cee:	4873      	ldr	r0, [pc, #460]	; (3ebc <parsePreset+0x117c>)
    3cf0:	7002      	strb	r2, [r0, #0]
    3cf2:	b662      	cpsie	i
	diskBusy = 0;
    3cf4:	4a72      	ldr	r2, [pc, #456]	; (3ec0 <parsePreset+0x1180>)
	presetReady = 1;
    3cf6:	4873      	ldr	r0, [pc, #460]	; (3ec4 <parsePreset+0x1184>)
	diskBusy = 0;
    3cf8:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    3cfa:	6003      	str	r3, [r0, #0]
}
    3cfc:	b007      	add	sp, #28
    3cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
    3d02:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 3ed4 <parsePreset+0x1194>
				  effectSetters[i].setParam2 = &blankFunction;
    3d06:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
    3d08:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
    3d0c:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 3ed8 <parsePreset+0x1198>
    3d10:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    3d14:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 3edc <parsePreset+0x119c>
				  effectSetters[i].setParam5 = &blankFunction;
    3d18:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    3d1c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3d20:	e57e      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &FXhighpassTick;
    3d22:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3ee0 <parsePreset+0x11a0>
				  effectSetters[i].setParam2 = &blankFunction;
    3d26:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
    3d28:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
    3d2c:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 3ee4 <parsePreset+0x11a4>
    3d30:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    3d34:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 3ee8 <parsePreset+0x11a8>
				  effectSetters[i].setParam5 = &blankFunction;
    3d38:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    3d3c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3d40:	e56e      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &FXlowpassTick;
    3d42:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 3eec <parsePreset+0x11ac>
				  effectSetters[i].setParam2 = &blankFunction;
    3d46:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
    3d48:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
    3d4c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 3ef0 <parsePreset+0x11b0>
    3d50:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    3d54:	f8df c19c 	ldr.w	ip, [pc, #412]	; 3ef4 <parsePreset+0x11b4>
				  effectSetters[i].setParam5 = &blankFunction;;
    3d58:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    3d5c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3d60:	e55e      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &wavefolderTick;
    3d62:	f8df c194 	ldr.w	ip, [pc, #404]	; 3ef8 <parsePreset+0x11b8>
    3d66:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
    3d6a:	f8df c190 	ldr.w	ip, [pc, #400]	; 3efc <parsePreset+0x11bc>
    3d6e:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3d72:	f8df c18c 	ldr.w	ip, [pc, #396]	; 3f00 <parsePreset+0x11c0>
    3d76:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
    3d7a:	f8df c188 	ldr.w	ip, [pc, #392]	; 3f04 <parsePreset+0x11c4>
    3d7e:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3d82:	f8df c184 	ldr.w	ip, [pc, #388]	; 3f08 <parsePreset+0x11c8>
    3d86:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    3d8a:	f8df c180 	ldr.w	ip, [pc, #384]	; 3f0c <parsePreset+0x11cc>
    3d8e:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3d92:	e545      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &tiltFilterTick;
    3d94:	f8df c178 	ldr.w	ip, [pc, #376]	; 3f10 <parsePreset+0x11d0>
    3d98:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
    3d9c:	f8df c174 	ldr.w	ip, [pc, #372]	; 3f14 <parsePreset+0x11d4>
    3da0:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
    3da4:	f8df c170 	ldr.w	ip, [pc, #368]	; 3f18 <parsePreset+0x11d8>
    3da8:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
    3dac:	f8df c16c 	ldr.w	ip, [pc, #364]	; 3f1c <parsePreset+0x11dc>
    3db0:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
    3db4:	f8df c168 	ldr.w	ip, [pc, #360]	; 3f20 <parsePreset+0x11e0>
    3db8:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    3dbc:	f8df c14c 	ldr.w	ip, [pc, #332]	; 3f0c <parsePreset+0x11cc>
    3dc0:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3dc4:	e52c      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &bcTick;
    3dc6:	f8df c15c 	ldr.w	ip, [pc, #348]	; 3f24 <parsePreset+0x11e4>
    3dca:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3dce:	f8df c158 	ldr.w	ip, [pc, #344]	; 3f28 <parsePreset+0x11e8>
    3dd2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
    3dd6:	f8df c154 	ldr.w	ip, [pc, #340]	; 3f2c <parsePreset+0x11ec>
    3dda:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
    3dde:	f8df c150 	ldr.w	ip, [pc, #336]	; 3f30 <parsePreset+0x11f0>
    3de2:	e7cc      	b.n	3d7e <parsePreset+0x103e>
				  effectTick[i] = &chorusTick;
    3de4:	f8df c14c 	ldr.w	ip, [pc, #332]	; 3f34 <parsePreset+0x11f4>
				  effectSetters[i].setParam5 = &blankFunction;
    3de8:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
    3dea:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
    3dee:	f8df c148 	ldr.w	ip, [pc, #328]	; 3f38 <parsePreset+0x11f8>
    3df2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
    3df6:	f8df c144 	ldr.w	ip, [pc, #324]	; 3f3c <parsePreset+0x11fc>
    3dfa:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
    3dfe:	f8df c140 	ldr.w	ip, [pc, #320]	; 3f40 <parsePreset+0x1200>
    3e02:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
    3e06:	f8df c13c 	ldr.w	ip, [pc, #316]	; 3f44 <parsePreset+0x1204>
    3e0a:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    3e0e:	e507      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &compressorTick;
    3e10:	f8df c134 	ldr.w	ip, [pc, #308]	; 3f48 <parsePreset+0x1208>
    3e14:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
    3e18:	f8df c130 	ldr.w	ip, [pc, #304]	; 3f4c <parsePreset+0x120c>
    3e1c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
    3e20:	f8df c12c 	ldr.w	ip, [pc, #300]	; 3f50 <parsePreset+0x1210>
    3e24:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
    3e28:	f8df c128 	ldr.w	ip, [pc, #296]	; 3f54 <parsePreset+0x1214>
    3e2c:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
    3e30:	f8df c124 	ldr.w	ip, [pc, #292]	; 3f58 <parsePreset+0x1218>
    3e34:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
    3e38:	f8df c120 	ldr.w	ip, [pc, #288]	; 3f5c <parsePreset+0x121c>
    3e3c:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3e40:	e4ee      	b.n	3820 <parsePreset+0xae0>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    3e42:	f8df c11c 	ldr.w	ip, [pc, #284]	; 3f60 <parsePreset+0x1220>
				  effectTick[i] = FXVZhighshelfTick;
    3e46:	4a20      	ldr	r2, [pc, #128]	; (3ec8 <parsePreset+0x1188>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    3e48:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    3e4c:	f8df c114 	ldr.w	ip, [pc, #276]	; 3f64 <parsePreset+0x1224>
				  effectTick[i] = FXVZhighshelfTick;
    3e50:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    3e52:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    3e56:	f8df c110 	ldr.w	ip, [pc, #272]	; 3f68 <parsePreset+0x1228>
				  effectSetters[i].setParam5 = &blankFunction;;
    3e5a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    3e5e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3e62:	e4dd      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &FXVZlowshelfTick;
    3e64:	f8df c104 	ldr.w	ip, [pc, #260]	; 3f6c <parsePreset+0x122c>
    3e68:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
    3e6c:	f8df c100 	ldr.w	ip, [pc, #256]	; 3f70 <parsePreset+0x1230>
    3e70:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
    3e74:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 3f74 <parsePreset+0x1234>
    3e78:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    3e7c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 3f78 <parsePreset+0x1238>
				  effectSetters[i].setParam5 = &blankFunction;
    3e80:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    3e84:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3e88:	e4ca      	b.n	3820 <parsePreset+0xae0>
    3e8a:	bf00      	nop
    3e8c:	2001a7ec 	.word	0x2001a7ec
    3e90:	2001a7f0 	.word	0x2001a7f0
    3e94:	2001a7f8 	.word	0x2001a7f8
    3e98:	2000527c 	.word	0x2000527c
    3e9c:	37fffffc 	.word	0x37fffffc
    3ea0:	2001b260 	.word	0x2001b260
    3ea4:	2001b904 	.word	0x2001b904
    3ea8:	20017c7d 	.word	0x20017c7d
    3eac:	20000744 	.word	0x20000744
    3eb0:	20000068 	.word	0x20000068
    3eb4:	20000069 	.word	0x20000069
    3eb8:	20000050 	.word	0x20000050
    3ebc:	20000004 	.word	0x20000004
    3ec0:	20017cb8 	.word	0x20017cb8
    3ec4:	20005618 	.word	0x20005618
    3ec8:	000021e1 	.word	0x000021e1
    3ecc:	20019e6c 	.word	0x20019e6c
    3ed0:	20017888 	.word	0x20017888
    3ed4:	00002161 	.word	0x00002161
    3ed8:	240020a5 	.word	0x240020a5
    3edc:	240023b1 	.word	0x240023b1
    3ee0:	00002141 	.word	0x00002141
    3ee4:	24002059 	.word	0x24002059
    3ee8:	2400239d 	.word	0x2400239d
    3eec:	00002121 	.word	0x00002121
    3ef0:	2400200d 	.word	0x2400200d
    3ef4:	24002389 	.word	0x24002389
    3ef8:	00001bc1 	.word	0x00001bc1
    3efc:	00001681 	.word	0x00001681
    3f00:	00001941 	.word	0x00001941
    3f04:	000016c1 	.word	0x000016c1
    3f08:	00001a81 	.word	0x00001a81
    3f0c:	00001aa1 	.word	0x00001aa1
    3f10:	00001e61 	.word	0x00001e61
    3f14:	00001701 	.word	0x00001701
    3f18:	00001761 	.word	0x00001761
    3f1c:	000017c1 	.word	0x000017c1
    3f20:	00001801 	.word	0x00001801
    3f24:	000020c1 	.word	0x000020c1
    3f28:	00001641 	.word	0x00001641
    3f2c:	00001961 	.word	0x00001961
    3f30:	00001ae1 	.word	0x00001ae1
    3f34:	00001dc1 	.word	0x00001dc1
    3f38:	00001ce1 	.word	0x00001ce1
    3f3c:	00001d21 	.word	0x00001d21
    3f40:	00001d41 	.word	0x00001d41
    3f44:	00001d81 	.word	0x00001d81
    3f48:	00002101 	.word	0x00002101
    3f4c:	00001841 	.word	0x00001841
    3f50:	00001861 	.word	0x00001861
    3f54:	000018a1 	.word	0x000018a1
    3f58:	000018c1 	.word	0x000018c1
    3f5c:	00001901 	.word	0x00001901
    3f60:	240021d5 	.word	0x240021d5
    3f64:	24002321 	.word	0x24002321
    3f68:	24002401 	.word	0x24002401
    3f6c:	000021c1 	.word	0x000021c1
    3f70:	24002189 	.word	0x24002189
    3f74:	240022ed 	.word	0x240022ed
    3f78:	240023ed 	.word	0x240023ed
				  effectTick[i] = &FXVZpeakTick;
    3f7c:	f8df c30c 	ldr.w	ip, [pc, #780]	; 428c <parsePreset+0x154c>
    3f80:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
    3f84:	f8df c308 	ldr.w	ip, [pc, #776]	; 4290 <parsePreset+0x1550>
    3f88:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
    3f8c:	f8df c304 	ldr.w	ip, [pc, #772]	; 4294 <parsePreset+0x1554>
    3f90:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    3f94:	f8df c300 	ldr.w	ip, [pc, #768]	; 4298 <parsePreset+0x1558>
				  effectSetters[i].setParam5 = &blankFunction;
    3f98:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    3f9c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3fa0:	e43e      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &FXdiodeLowpassTick;
    3fa2:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 429c <parsePreset+0x155c>
				  effectSetters[i].setParam2 = &blankFunction;
    3fa6:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
    3fa8:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
    3fac:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 42a0 <parsePreset+0x1560>
    3fb0:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    3fb4:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 42a4 <parsePreset+0x1564>
				  effectSetters[i].setParam5 = &blankFunction;
    3fb8:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    3fbc:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3fc0:	e42e      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = FXVZbandrejectTick;
    3fc2:	4a98      	ldr	r2, [pc, #608]	; (4224 <parsePreset+0x14e4>)
    3fc4:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    3fc6:	4a98      	ldr	r2, [pc, #608]	; (4228 <parsePreset+0x14e8>)
				  effectSetters[i].setParam5 = &blankFunction;;
    3fc8:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    3fca:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
    3fcc:	4a97      	ldr	r2, [pc, #604]	; (422c <parsePreset+0x14ec>)
    3fce:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
    3fd0:	4a97      	ldr	r2, [pc, #604]	; (4230 <parsePreset+0x14f0>)
				  effectSetters[i].setParam4 = &blankFunction;;
    3fd2:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
    3fd6:	e423      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &shaperTick;
    3fd8:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 42a8 <parsePreset+0x1568>
				  effectSetters[i].setParam5 = &blankFunction;
    3fdc:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
    3fde:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3fe2:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 42ac <parsePreset+0x156c>
    3fe6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3fea:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 42b0 <parsePreset+0x1570>
    3fee:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
    3ff2:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 42b4 <parsePreset+0x1574>
    3ff6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3ffa:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 42b8 <parsePreset+0x1578>
    3ffe:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    4002:	e40d      	b.n	3820 <parsePreset+0xae0>
				  effectTick[i] = &tanhTick;
    4004:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 42bc <parsePreset+0x157c>
				  effectSetters[i].setParam5 = &blankFunction;
    4008:	6118      	str	r0, [r3, #16]
    400a:	e7e8      	b.n	3fde <parsePreset+0x129e>
				  effectTick[i] = &satTick;
    400c:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 42c0 <parsePreset+0x1580>
				  effectSetters[i].setParam5 = &blankFunction;
    4010:	6118      	str	r0, [r3, #16]
    4012:	e7e4      	b.n	3fde <parsePreset+0x129e>
				  effectTick[i] = &hardClipTick;
    4014:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 42c4 <parsePreset+0x1584>
				  effectSetters[i].setParam5 = &blankFunction;
    4018:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
    401a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    401e:	f8df c28c 	ldr.w	ip, [pc, #652]	; 42ac <parsePreset+0x156c>
    4022:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    4026:	f8df c288 	ldr.w	ip, [pc, #648]	; 42b0 <parsePreset+0x1570>
    402a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
    402e:	f8df c298 	ldr.w	ip, [pc, #664]	; 42c8 <parsePreset+0x1588>
    4032:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    4036:	f8df c280 	ldr.w	ip, [pc, #640]	; 42b8 <parsePreset+0x1578>
    403a:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    403e:	f7ff bbef 	b.w	3820 <parsePreset+0xae0>
				  effectTick[i] = &softClipTick;
    4042:	f8df c288 	ldr.w	ip, [pc, #648]	; 42cc <parsePreset+0x158c>
				  effectSetters[i].setParam5 = &blankFunction;
    4046:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
    4048:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    404c:	f8df c25c 	ldr.w	ip, [pc, #604]	; 42ac <parsePreset+0x156c>
    4050:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    4054:	f8df c258 	ldr.w	ip, [pc, #600]	; 42b0 <parsePreset+0x1570>
    4058:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
    405c:	f8df c270 	ldr.w	ip, [pc, #624]	; 42d0 <parsePreset+0x1590>
    4060:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    4064:	f8df c250 	ldr.w	ip, [pc, #592]	; 42b8 <parsePreset+0x1578>
    4068:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    406c:	f7ff bbd8 	b.w	3820 <parsePreset+0xae0>
				  totalEffects--;
    4070:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
    4072:	6098      	str	r0, [r3, #8]
				  totalEffects--;
    4074:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    4078:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
    407c:	f8df c254 	ldr.w	ip, [pc, #596]	; 42d4 <parsePreset+0x1594>
				  effectSetters[i].setParam2 = &blankFunction;
    4080:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
    4084:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
    4086:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
    408a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
    408e:	f7ff bbc7 	b.w	3820 <parsePreset+0xae0>
				lfoShapeTick[i] = &lfoSawTick;
    4092:	4b68      	ldr	r3, [pc, #416]	; (4234 <parsePreset+0x14f4>)
    4094:	4868      	ldr	r0, [pc, #416]	; (4238 <parsePreset+0x14f8>)
    4096:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
    4098:	4b68      	ldr	r3, [pc, #416]	; (423c <parsePreset+0x14fc>)
    409a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
    409c:	4b68      	ldr	r3, [pc, #416]	; (4240 <parsePreset+0x1500>)
    409e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    40a0:	4b68      	ldr	r3, [pc, #416]	; (4244 <parsePreset+0x1504>)
    40a2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    40a4:	f7ff bb83 	b.w	37ae <parsePreset+0xa6e>
				lfoShapeTick[i] = &lfoTriTick;
    40a8:	4b62      	ldr	r3, [pc, #392]	; (4234 <parsePreset+0x14f4>)
    40aa:	4867      	ldr	r0, [pc, #412]	; (4248 <parsePreset+0x1508>)
    40ac:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
    40ae:	4b67      	ldr	r3, [pc, #412]	; (424c <parsePreset+0x150c>)
    40b0:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
    40b2:	4b67      	ldr	r3, [pc, #412]	; (4250 <parsePreset+0x1510>)
    40b4:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    40b6:	4b67      	ldr	r3, [pc, #412]	; (4254 <parsePreset+0x1514>)
    40b8:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    40ba:	f7ff bb78 	b.w	37ae <parsePreset+0xa6e>
				lfoShapeTick[i] = &lfoSineTick;
    40be:	4b5d      	ldr	r3, [pc, #372]	; (4234 <parsePreset+0x14f4>)
    40c0:	4865      	ldr	r0, [pc, #404]	; (4258 <parsePreset+0x1518>)
    40c2:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
    40c4:	4b65      	ldr	r3, [pc, #404]	; (425c <parsePreset+0x151c>)
    40c6:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
    40c8:	4b65      	ldr	r3, [pc, #404]	; (4260 <parsePreset+0x1520>)
    40ca:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    40cc:	4b65      	ldr	r3, [pc, #404]	; (4264 <parsePreset+0x1524>)
    40ce:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    40d0:	f7ff bb6d 	b.w	37ae <parsePreset+0xa6e>
				lfoShapeTick[i] = &lfoSawTick;
    40d4:	4b57      	ldr	r3, [pc, #348]	; (4234 <parsePreset+0x14f4>)
    40d6:	4858      	ldr	r0, [pc, #352]	; (4238 <parsePreset+0x14f8>)
    40d8:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
    40da:	4b58      	ldr	r3, [pc, #352]	; (423c <parsePreset+0x14fc>)
    40dc:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
    40de:	4b58      	ldr	r3, [pc, #352]	; (4240 <parsePreset+0x1500>)
    40e0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    40e2:	4b58      	ldr	r3, [pc, #352]	; (4244 <parsePreset+0x1504>)
    40e4:	6213      	str	r3, [r2, #32]
				break;
    40e6:	f7ff bb12 	b.w	370e <parsePreset+0x9ce>
				lfoShapeTick[i] = &lfoSawSquareTick;
    40ea:	4b52      	ldr	r3, [pc, #328]	; (4234 <parsePreset+0x14f4>)
    40ec:	485e      	ldr	r0, [pc, #376]	; (4268 <parsePreset+0x1528>)
    40ee:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    40f0:	4b5e      	ldr	r3, [pc, #376]	; (426c <parsePreset+0x152c>)
    40f2:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    40f4:	4b5e      	ldr	r3, [pc, #376]	; (4270 <parsePreset+0x1530>)
    40f6:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    40f8:	4b5e      	ldr	r3, [pc, #376]	; (4274 <parsePreset+0x1534>)
    40fa:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    40fc:	f7ff bb57 	b.w	37ae <parsePreset+0xa6e>
				lfoShapeTick[i] = &lfoSineTriTick;
    4100:	4b4c      	ldr	r3, [pc, #304]	; (4234 <parsePreset+0x14f4>)
    4102:	485d      	ldr	r0, [pc, #372]	; (4278 <parsePreset+0x1538>)
    4104:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    4106:	4b5d      	ldr	r3, [pc, #372]	; (427c <parsePreset+0x153c>)
    4108:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    410a:	4b5d      	ldr	r3, [pc, #372]	; (4280 <parsePreset+0x1540>)
    410c:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    410e:	4b5d      	ldr	r3, [pc, #372]	; (4284 <parsePreset+0x1544>)
    4110:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    4112:	f7ff bb4c 	b.w	37ae <parsePreset+0xa6e>
				lfoShapeTick[i] = &lfoTriTick;
    4116:	4b47      	ldr	r3, [pc, #284]	; (4234 <parsePreset+0x14f4>)
    4118:	484b      	ldr	r0, [pc, #300]	; (4248 <parsePreset+0x1508>)
    411a:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
    411c:	4b4b      	ldr	r3, [pc, #300]	; (424c <parsePreset+0x150c>)
    411e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
    4120:	4b4b      	ldr	r3, [pc, #300]	; (4250 <parsePreset+0x1510>)
    4122:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    4124:	4b4b      	ldr	r3, [pc, #300]	; (4254 <parsePreset+0x1514>)
    4126:	6213      	str	r3, [r2, #32]
				break;
    4128:	f7ff baf1 	b.w	370e <parsePreset+0x9ce>
				lfoShapeTick[i] = &lfoSineTick;
    412c:	4b41      	ldr	r3, [pc, #260]	; (4234 <parsePreset+0x14f4>)
    412e:	484a      	ldr	r0, [pc, #296]	; (4258 <parsePreset+0x1518>)
    4130:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
    4132:	4b4a      	ldr	r3, [pc, #296]	; (425c <parsePreset+0x151c>)
    4134:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
    4136:	4b4a      	ldr	r3, [pc, #296]	; (4260 <parsePreset+0x1520>)
    4138:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    413a:	4b4a      	ldr	r3, [pc, #296]	; (4264 <parsePreset+0x1524>)
    413c:	6213      	str	r3, [r2, #32]
				break;
    413e:	f7ff bae6 	b.w	370e <parsePreset+0x9ce>
				lfoShapeTick[i] = &lfoSawSquareTick;
    4142:	4b3c      	ldr	r3, [pc, #240]	; (4234 <parsePreset+0x14f4>)
    4144:	4848      	ldr	r0, [pc, #288]	; (4268 <parsePreset+0x1528>)
    4146:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    4148:	4b48      	ldr	r3, [pc, #288]	; (426c <parsePreset+0x152c>)
    414a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    414c:	4b48      	ldr	r3, [pc, #288]	; (4270 <parsePreset+0x1530>)
    414e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    4150:	4b48      	ldr	r3, [pc, #288]	; (4274 <parsePreset+0x1534>)
    4152:	6213      	str	r3, [r2, #32]
				break;
    4154:	f7ff badb 	b.w	370e <parsePreset+0x9ce>
				lfoShapeTick[i] = &lfoSawTick;
    4158:	4b36      	ldr	r3, [pc, #216]	; (4234 <parsePreset+0x14f4>)
    415a:	4837      	ldr	r0, [pc, #220]	; (4238 <parsePreset+0x14f8>)
    415c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
    415e:	4b37      	ldr	r3, [pc, #220]	; (423c <parsePreset+0x14fc>)
    4160:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
    4162:	4b37      	ldr	r3, [pc, #220]	; (4240 <parsePreset+0x1500>)
    4164:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    4166:	4b37      	ldr	r3, [pc, #220]	; (4244 <parsePreset+0x1504>)
    4168:	6153      	str	r3, [r2, #20]
				break;
    416a:	f7ff bab0 	b.w	36ce <parsePreset+0x98e>
				lfoShapeTick[i] = &lfoSineTriTick;
    416e:	4b31      	ldr	r3, [pc, #196]	; (4234 <parsePreset+0x14f4>)
    4170:	4841      	ldr	r0, [pc, #260]	; (4278 <parsePreset+0x1538>)
    4172:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    4174:	4b41      	ldr	r3, [pc, #260]	; (427c <parsePreset+0x153c>)
    4176:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    4178:	4b41      	ldr	r3, [pc, #260]	; (4280 <parsePreset+0x1540>)
    417a:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    417c:	4b41      	ldr	r3, [pc, #260]	; (4284 <parsePreset+0x1544>)
    417e:	6213      	str	r3, [r2, #32]
				break;
    4180:	f7ff bac5 	b.w	370e <parsePreset+0x9ce>
				lfoShapeTick[i] = &lfoTriTick;
    4184:	4b2b      	ldr	r3, [pc, #172]	; (4234 <parsePreset+0x14f4>)
    4186:	4830      	ldr	r0, [pc, #192]	; (4248 <parsePreset+0x1508>)
    4188:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
    418a:	4b30      	ldr	r3, [pc, #192]	; (424c <parsePreset+0x150c>)
    418c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
    418e:	4b30      	ldr	r3, [pc, #192]	; (4250 <parsePreset+0x1510>)
    4190:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    4192:	4b30      	ldr	r3, [pc, #192]	; (4254 <parsePreset+0x1514>)
    4194:	6153      	str	r3, [r2, #20]
				break;
    4196:	f7ff ba9a 	b.w	36ce <parsePreset+0x98e>
				lfoShapeTick[i] = &lfoSineTick;
    419a:	4b26      	ldr	r3, [pc, #152]	; (4234 <parsePreset+0x14f4>)
    419c:	482e      	ldr	r0, [pc, #184]	; (4258 <parsePreset+0x1518>)
    419e:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
    41a0:	4b2e      	ldr	r3, [pc, #184]	; (425c <parsePreset+0x151c>)
    41a2:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
    41a4:	4b2e      	ldr	r3, [pc, #184]	; (4260 <parsePreset+0x1520>)
    41a6:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    41a8:	4b2e      	ldr	r3, [pc, #184]	; (4264 <parsePreset+0x1524>)
    41aa:	6153      	str	r3, [r2, #20]
				break;
    41ac:	f7ff ba8f 	b.w	36ce <parsePreset+0x98e>
				lfoShapeTick[i] = &lfoSawSquareTick;
    41b0:	4b20      	ldr	r3, [pc, #128]	; (4234 <parsePreset+0x14f4>)
    41b2:	482d      	ldr	r0, [pc, #180]	; (4268 <parsePreset+0x1528>)
    41b4:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    41b6:	4b2d      	ldr	r3, [pc, #180]	; (426c <parsePreset+0x152c>)
    41b8:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    41ba:	4b2d      	ldr	r3, [pc, #180]	; (4270 <parsePreset+0x1530>)
    41bc:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    41be:	4b2d      	ldr	r3, [pc, #180]	; (4274 <parsePreset+0x1534>)
    41c0:	6153      	str	r3, [r2, #20]
				break;
    41c2:	f7ff ba84 	b.w	36ce <parsePreset+0x98e>
				lfoShapeTick[i] = &lfoSineTriTick;
    41c6:	4b1b      	ldr	r3, [pc, #108]	; (4234 <parsePreset+0x14f4>)
    41c8:	482b      	ldr	r0, [pc, #172]	; (4278 <parsePreset+0x1538>)
    41ca:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    41cc:	4b2b      	ldr	r3, [pc, #172]	; (427c <parsePreset+0x153c>)
    41ce:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    41d0:	4b2b      	ldr	r3, [pc, #172]	; (4280 <parsePreset+0x1540>)
    41d2:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    41d4:	4b2b      	ldr	r3, [pc, #172]	; (4284 <parsePreset+0x1544>)
    41d6:	6153      	str	r3, [r2, #20]
				break;
    41d8:	f7ff ba79 	b.w	36ce <parsePreset+0x98e>
				lfoShapeTick[i] = &lfoSawTick;
    41dc:	4b15      	ldr	r3, [pc, #84]	; (4234 <parsePreset+0x14f4>)
    41de:	4816      	ldr	r0, [pc, #88]	; (4238 <parsePreset+0x14f8>)
				lfoSetters[i].setRate = &lfoSawSetRate;
    41e0:	4a29      	ldr	r2, [pc, #164]	; (4288 <parsePreset+0x1548>)
				lfoShapeTick[i] = &lfoSawTick;
    41e2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
    41e4:	4b15      	ldr	r3, [pc, #84]	; (423c <parsePreset+0x14fc>)
    41e6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
    41e8:	4b15      	ldr	r3, [pc, #84]	; (4240 <parsePreset+0x1500>)
    41ea:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    41ec:	4b15      	ldr	r3, [pc, #84]	; (4244 <parsePreset+0x1504>)
    41ee:	6093      	str	r3, [r2, #8]
				break;
    41f0:	f7ff ba4d 	b.w	368e <parsePreset+0x94e>
				lfoShapeTick[i] = &lfoTriTick;
    41f4:	4b0f      	ldr	r3, [pc, #60]	; (4234 <parsePreset+0x14f4>)
    41f6:	4814      	ldr	r0, [pc, #80]	; (4248 <parsePreset+0x1508>)
				lfoSetters[i].setRate = &lfoTriSetRate;
    41f8:	4a23      	ldr	r2, [pc, #140]	; (4288 <parsePreset+0x1548>)
				lfoShapeTick[i] = &lfoTriTick;
    41fa:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
    41fc:	4b13      	ldr	r3, [pc, #76]	; (424c <parsePreset+0x150c>)
    41fe:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
    4200:	4b13      	ldr	r3, [pc, #76]	; (4250 <parsePreset+0x1510>)
    4202:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    4204:	4b13      	ldr	r3, [pc, #76]	; (4254 <parsePreset+0x1514>)
    4206:	6093      	str	r3, [r2, #8]
				break;
    4208:	f7ff ba41 	b.w	368e <parsePreset+0x94e>
				lfoShapeTick[i] = &lfoSineTick;
    420c:	4b09      	ldr	r3, [pc, #36]	; (4234 <parsePreset+0x14f4>)
    420e:	4812      	ldr	r0, [pc, #72]	; (4258 <parsePreset+0x1518>)
				lfoSetters[i].setRate = &lfoSineSetRate;
    4210:	4a1d      	ldr	r2, [pc, #116]	; (4288 <parsePreset+0x1548>)
				lfoShapeTick[i] = &lfoSineTick;
    4212:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
    4214:	4b11      	ldr	r3, [pc, #68]	; (425c <parsePreset+0x151c>)
    4216:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
    4218:	4b11      	ldr	r3, [pc, #68]	; (4260 <parsePreset+0x1520>)
    421a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    421c:	4b11      	ldr	r3, [pc, #68]	; (4264 <parsePreset+0x1524>)
    421e:	6093      	str	r3, [r2, #8]
				break;
    4220:	f7ff ba35 	b.w	368e <parsePreset+0x94e>
    4224:	00002201 	.word	0x00002201
    4228:	24002221 	.word	0x24002221
    422c:	24002355 	.word	0x24002355
    4230:	24002415 	.word	0x24002415
    4234:	200052e0 	.word	0x200052e0
    4238:	24001e91 	.word	0x24001e91
    423c:	24001f25 	.word	0x24001f25
    4240:	24001ff5 	.word	0x24001ff5
    4244:	24001f9d 	.word	0x24001f9d
    4248:	24001e75 	.word	0x24001e75
    424c:	24001f11 	.word	0x24001f11
    4250:	24001ff1 	.word	0x24001ff1
    4254:	24001f89 	.word	0x24001f89
    4258:	24001e59 	.word	0x24001e59
    425c:	24001efd 	.word	0x24001efd
    4260:	24001fed 	.word	0x24001fed
    4264:	24001f75 	.word	0x24001f75
    4268:	24001e21 	.word	0x24001e21
    426c:	24001ed5 	.word	0x24001ed5
    4270:	24001fc5 	.word	0x24001fc5
    4274:	24001f4d 	.word	0x24001f4d
    4278:	24001e3d 	.word	0x24001e3d
    427c:	24001ee9 	.word	0x24001ee9
    4280:	24001fd9 	.word	0x24001fd9
    4284:	24001f61 	.word	0x24001f61
    4288:	20019e38 	.word	0x20019e38
    428c:	000021a1 	.word	0x000021a1
    4290:	2400213d 	.word	0x2400213d
    4294:	240022b9 	.word	0x240022b9
    4298:	240023d9 	.word	0x240023d9
    429c:	00002181 	.word	0x00002181
    42a0:	240020f1 	.word	0x240020f1
    42a4:	240023c5 	.word	0x240023c5
    42a8:	00001de1 	.word	0x00001de1
    42ac:	00001641 	.word	0x00001641
    42b0:	00001941 	.word	0x00001941
    42b4:	00001981 	.word	0x00001981
    42b8:	00001a81 	.word	0x00001a81
    42bc:	00001ea1 	.word	0x00001ea1
    42c0:	00002041 	.word	0x00002041
    42c4:	00001fa1 	.word	0x00001fa1
    42c8:	00001a01 	.word	0x00001a01
    42cc:	00001f01 	.word	0x00001f01
    42d0:	000019a1 	.word	0x000019a1
    42d4:	00001e41 	.word	0x00001e41
				lfoShapeTick[i] = &lfoSawSquareTick;
    42d8:	4b99      	ldr	r3, [pc, #612]	; (4540 <parsePreset+0x1800>)
    42da:	489a      	ldr	r0, [pc, #616]	; (4544 <parsePreset+0x1804>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    42dc:	4a9a      	ldr	r2, [pc, #616]	; (4548 <parsePreset+0x1808>)
				lfoShapeTick[i] = &lfoSawSquareTick;
    42de:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    42e0:	4b9a      	ldr	r3, [pc, #616]	; (454c <parsePreset+0x180c>)
    42e2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    42e4:	4b9a      	ldr	r3, [pc, #616]	; (4550 <parsePreset+0x1810>)
    42e6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    42e8:	4b9a      	ldr	r3, [pc, #616]	; (4554 <parsePreset+0x1814>)
    42ea:	6093      	str	r3, [r2, #8]
				break;
    42ec:	f7ff b9cf 	b.w	368e <parsePreset+0x94e>
				lfoShapeTick[i] = &lfoSineTriTick;
    42f0:	4b93      	ldr	r3, [pc, #588]	; (4540 <parsePreset+0x1800>)
    42f2:	4899      	ldr	r0, [pc, #612]	; (4558 <parsePreset+0x1818>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    42f4:	4a94      	ldr	r2, [pc, #592]	; (4548 <parsePreset+0x1808>)
				lfoShapeTick[i] = &lfoSineTriTick;
    42f6:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    42f8:	4b98      	ldr	r3, [pc, #608]	; (455c <parsePreset+0x181c>)
    42fa:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    42fc:	4b98      	ldr	r3, [pc, #608]	; (4560 <parsePreset+0x1820>)
    42fe:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    4300:	4b98      	ldr	r3, [pc, #608]	; (4564 <parsePreset+0x1824>)
    4302:	6093      	str	r3, [r2, #8]
				break;
    4304:	f7ff b9c3 	b.w	368e <parsePreset+0x94e>
				  filterTick[i] = &LadderLowpassTick;
    4308:	4b97      	ldr	r3, [pc, #604]	; (4568 <parsePreset+0x1828>)
    430a:	4a98      	ldr	r2, [pc, #608]	; (456c <parsePreset+0x182c>)
    430c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    430e:	4b98      	ldr	r3, [pc, #608]	; (4570 <parsePreset+0x1830>)
    4310:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    4312:	4b98      	ldr	r3, [pc, #608]	; (4574 <parsePreset+0x1834>)
    4314:	60cb      	str	r3, [r1, #12]
				  break;
    4316:	f7ff b998 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &VZbandrejectTick;
    431a:	4b93      	ldr	r3, [pc, #588]	; (4568 <parsePreset+0x1828>)
    431c:	4a96      	ldr	r2, [pc, #600]	; (4578 <parsePreset+0x1838>)
    431e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    4320:	4b96      	ldr	r3, [pc, #600]	; (457c <parsePreset+0x183c>)
    4322:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    4324:	4b96      	ldr	r3, [pc, #600]	; (4580 <parsePreset+0x1840>)
    4326:	60cb      	str	r3, [r1, #12]
				  break;
    4328:	f7ff b98f 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &VZhighshelfTick;
    432c:	4b8e      	ldr	r3, [pc, #568]	; (4568 <parsePreset+0x1828>)
    432e:	4a95      	ldr	r2, [pc, #596]	; (4584 <parsePreset+0x1844>)
    4330:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    4332:	4b95      	ldr	r3, [pc, #596]	; (4588 <parsePreset+0x1848>)
    4334:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    4336:	4b95      	ldr	r3, [pc, #596]	; (458c <parsePreset+0x184c>)
    4338:	60cb      	str	r3, [r1, #12]
				  break;
    433a:	f7ff b986 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &VZlowshelfTick;
    433e:	4b8a      	ldr	r3, [pc, #552]	; (4568 <parsePreset+0x1828>)
    4340:	4a93      	ldr	r2, [pc, #588]	; (4590 <parsePreset+0x1850>)
    4342:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    4344:	4b93      	ldr	r3, [pc, #588]	; (4594 <parsePreset+0x1854>)
    4346:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    4348:	4b93      	ldr	r3, [pc, #588]	; (4598 <parsePreset+0x1858>)
    434a:	60cb      	str	r3, [r1, #12]
				  break;
    434c:	f7ff b97d 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &VZpeakTick;
    4350:	4b85      	ldr	r3, [pc, #532]	; (4568 <parsePreset+0x1828>)
    4352:	4a92      	ldr	r2, [pc, #584]	; (459c <parsePreset+0x185c>)
    4354:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
    4356:	4b92      	ldr	r3, [pc, #584]	; (45a0 <parsePreset+0x1860>)
    4358:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
    435a:	4b92      	ldr	r3, [pc, #584]	; (45a4 <parsePreset+0x1864>)
    435c:	60cb      	str	r3, [r1, #12]
				  break;
    435e:	f7ff b974 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &diodeLowpassTick;
    4362:	4b81      	ldr	r3, [pc, #516]	; (4568 <parsePreset+0x1828>)
    4364:	4a90      	ldr	r2, [pc, #576]	; (45a8 <parsePreset+0x1868>)
    4366:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    4368:	4b90      	ldr	r3, [pc, #576]	; (45ac <parsePreset+0x186c>)
    436a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    436c:	4b90      	ldr	r3, [pc, #576]	; (45b0 <parsePreset+0x1870>)
    436e:	60cb      	str	r3, [r1, #12]
				  break;
    4370:	f7ff b96b 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &bandpassTick;
    4374:	4b7c      	ldr	r3, [pc, #496]	; (4568 <parsePreset+0x1828>)
    4376:	4a8f      	ldr	r2, [pc, #572]	; (45b4 <parsePreset+0x1874>)
    4378:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
    437a:	4b8f      	ldr	r3, [pc, #572]	; (45b8 <parsePreset+0x1878>)
    437c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
    437e:	4b8f      	ldr	r3, [pc, #572]	; (45bc <parsePreset+0x187c>)
    4380:	60cb      	str	r3, [r1, #12]
				  break;
    4382:	f7ff b962 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &highpassTick;
    4386:	4b78      	ldr	r3, [pc, #480]	; (4568 <parsePreset+0x1828>)
    4388:	4a8d      	ldr	r2, [pc, #564]	; (45c0 <parsePreset+0x1880>)
    438a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
    438c:	4b8d      	ldr	r3, [pc, #564]	; (45c4 <parsePreset+0x1884>)
    438e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
    4390:	4b8d      	ldr	r3, [pc, #564]	; (45c8 <parsePreset+0x1888>)
    4392:	60cb      	str	r3, [r1, #12]
				  break;
    4394:	f7ff b959 	b.w	364a <parsePreset+0x90a>
				  filterTick[i] = &LadderLowpassTick;
    4398:	4b73      	ldr	r3, [pc, #460]	; (4568 <parsePreset+0x1828>)
    439a:	4a74      	ldr	r2, [pc, #464]	; (456c <parsePreset+0x182c>)
    439c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    439e:	4b74      	ldr	r3, [pc, #464]	; (4570 <parsePreset+0x1830>)
    43a0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    43a2:	4b74      	ldr	r3, [pc, #464]	; (4574 <parsePreset+0x1834>)
    43a4:	604b      	str	r3, [r1, #4]
				  break;
    43a6:	f7ff b92f 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &VZbandrejectTick;
    43aa:	4b6f      	ldr	r3, [pc, #444]	; (4568 <parsePreset+0x1828>)
    43ac:	4a72      	ldr	r2, [pc, #456]	; (4578 <parsePreset+0x1838>)
    43ae:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    43b0:	4b72      	ldr	r3, [pc, #456]	; (457c <parsePreset+0x183c>)
    43b2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    43b4:	4b72      	ldr	r3, [pc, #456]	; (4580 <parsePreset+0x1840>)
    43b6:	604b      	str	r3, [r1, #4]
				  break;
    43b8:	f7ff b926 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &VZhighshelfTick;
    43bc:	4b6a      	ldr	r3, [pc, #424]	; (4568 <parsePreset+0x1828>)
    43be:	4a71      	ldr	r2, [pc, #452]	; (4584 <parsePreset+0x1844>)
    43c0:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    43c2:	4b71      	ldr	r3, [pc, #452]	; (4588 <parsePreset+0x1848>)
    43c4:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    43c6:	4b71      	ldr	r3, [pc, #452]	; (458c <parsePreset+0x184c>)
    43c8:	604b      	str	r3, [r1, #4]
				  break;
    43ca:	f7ff b91d 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &VZlowshelfTick;
    43ce:	4b66      	ldr	r3, [pc, #408]	; (4568 <parsePreset+0x1828>)
    43d0:	4a6f      	ldr	r2, [pc, #444]	; (4590 <parsePreset+0x1850>)
    43d2:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    43d4:	4b6f      	ldr	r3, [pc, #444]	; (4594 <parsePreset+0x1854>)
    43d6:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    43d8:	4b6f      	ldr	r3, [pc, #444]	; (4598 <parsePreset+0x1858>)
    43da:	604b      	str	r3, [r1, #4]
				  break;
    43dc:	f7ff b914 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &VZpeakTick;
    43e0:	4b61      	ldr	r3, [pc, #388]	; (4568 <parsePreset+0x1828>)
    43e2:	4a6e      	ldr	r2, [pc, #440]	; (459c <parsePreset+0x185c>)
    43e4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
    43e6:	4b6e      	ldr	r3, [pc, #440]	; (45a0 <parsePreset+0x1860>)
    43e8:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
    43ea:	4b6e      	ldr	r3, [pc, #440]	; (45a4 <parsePreset+0x1864>)
    43ec:	604b      	str	r3, [r1, #4]
				  break;
    43ee:	f7ff b90b 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &diodeLowpassTick;
    43f2:	4b5d      	ldr	r3, [pc, #372]	; (4568 <parsePreset+0x1828>)
    43f4:	4a6c      	ldr	r2, [pc, #432]	; (45a8 <parsePreset+0x1868>)
    43f6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    43f8:	4b6c      	ldr	r3, [pc, #432]	; (45ac <parsePreset+0x186c>)
    43fa:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    43fc:	4b6c      	ldr	r3, [pc, #432]	; (45b0 <parsePreset+0x1870>)
    43fe:	604b      	str	r3, [r1, #4]
				  break;
    4400:	f7ff b902 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &bandpassTick;
    4404:	4b58      	ldr	r3, [pc, #352]	; (4568 <parsePreset+0x1828>)
    4406:	4a6b      	ldr	r2, [pc, #428]	; (45b4 <parsePreset+0x1874>)
    4408:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
    440a:	4b6b      	ldr	r3, [pc, #428]	; (45b8 <parsePreset+0x1878>)
    440c:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
    440e:	4b6b      	ldr	r3, [pc, #428]	; (45bc <parsePreset+0x187c>)
    4410:	604b      	str	r3, [r1, #4]
				  break;
    4412:	f7ff b8f9 	b.w	3608 <parsePreset+0x8c8>
				  filterTick[i] = &highpassTick;
    4416:	4b54      	ldr	r3, [pc, #336]	; (4568 <parsePreset+0x1828>)
    4418:	4a69      	ldr	r2, [pc, #420]	; (45c0 <parsePreset+0x1880>)
    441a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
    441c:	4b69      	ldr	r3, [pc, #420]	; (45c4 <parsePreset+0x1884>)
    441e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
    4420:	4b69      	ldr	r3, [pc, #420]	; (45c8 <parsePreset+0x1888>)
    4422:	604b      	str	r3, [r1, #4]
				  break;
    4424:	f7ff b8f0 	b.w	3608 <parsePreset+0x8c8>
				  shapeTick[i] = &userTick;
    4428:	4a68      	ldr	r2, [pc, #416]	; (45cc <parsePreset+0x188c>)
    442a:	4969      	ldr	r1, [pc, #420]	; (45d0 <parsePreset+0x1890>)
    442c:	6091      	str	r1, [r2, #8]
				  break;
    442e:	f7ff b8b7 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &triTick;
    4432:	4a66      	ldr	r2, [pc, #408]	; (45cc <parsePreset+0x188c>)
    4434:	4967      	ldr	r1, [pc, #412]	; (45d4 <parsePreset+0x1894>)
    4436:	6091      	str	r1, [r2, #8]
				  break;
    4438:	f7ff b8b2 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &sineTick;
    443c:	4a63      	ldr	r2, [pc, #396]	; (45cc <parsePreset+0x188c>)
    443e:	4966      	ldr	r1, [pc, #408]	; (45d8 <parsePreset+0x1898>)
    4440:	6091      	str	r1, [r2, #8]
				  break;
    4442:	f7ff b8ad 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &pulseTick;
    4446:	4a61      	ldr	r2, [pc, #388]	; (45cc <parsePreset+0x188c>)
    4448:	4964      	ldr	r1, [pc, #400]	; (45dc <parsePreset+0x189c>)
    444a:	6091      	str	r1, [r2, #8]
				  break;
    444c:	f7ff b8a8 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &sawTick;
    4450:	4a5e      	ldr	r2, [pc, #376]	; (45cc <parsePreset+0x188c>)
    4452:	4963      	ldr	r1, [pc, #396]	; (45e0 <parsePreset+0x18a0>)
    4454:	6091      	str	r1, [r2, #8]
				  break;
    4456:	f7ff b8a3 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &sineTriTick;
    445a:	4a5c      	ldr	r2, [pc, #368]	; (45cc <parsePreset+0x188c>)
    445c:	4961      	ldr	r1, [pc, #388]	; (45e4 <parsePreset+0x18a4>)
    445e:	6091      	str	r1, [r2, #8]
				  break;
    4460:	f7ff b89e 	b.w	35a0 <parsePreset+0x860>
				  shapeTick[i] = &userTick;
    4464:	4a59      	ldr	r2, [pc, #356]	; (45cc <parsePreset+0x188c>)
    4466:	495a      	ldr	r1, [pc, #360]	; (45d0 <parsePreset+0x1890>)
    4468:	6051      	str	r1, [r2, #4]
				  break;
    446a:	f7ff b872 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &triTick;
    446e:	4a57      	ldr	r2, [pc, #348]	; (45cc <parsePreset+0x188c>)
    4470:	4958      	ldr	r1, [pc, #352]	; (45d4 <parsePreset+0x1894>)
    4472:	6051      	str	r1, [r2, #4]
				  break;
    4474:	f7ff b86d 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &sineTick;
    4478:	4a54      	ldr	r2, [pc, #336]	; (45cc <parsePreset+0x188c>)
    447a:	4957      	ldr	r1, [pc, #348]	; (45d8 <parsePreset+0x1898>)
    447c:	6051      	str	r1, [r2, #4]
				  break;
    447e:	f7ff b868 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &pulseTick;
    4482:	4a52      	ldr	r2, [pc, #328]	; (45cc <parsePreset+0x188c>)
    4484:	4955      	ldr	r1, [pc, #340]	; (45dc <parsePreset+0x189c>)
    4486:	6051      	str	r1, [r2, #4]
				  break;
    4488:	f7ff b863 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &sawTick;
    448c:	4a4f      	ldr	r2, [pc, #316]	; (45cc <parsePreset+0x188c>)
    448e:	4954      	ldr	r1, [pc, #336]	; (45e0 <parsePreset+0x18a0>)
    4490:	6051      	str	r1, [r2, #4]
				  break;
    4492:	f7ff b85e 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &sineTriTick;
    4496:	4a4d      	ldr	r2, [pc, #308]	; (45cc <parsePreset+0x188c>)
    4498:	4952      	ldr	r1, [pc, #328]	; (45e4 <parsePreset+0x18a4>)
    449a:	6051      	str	r1, [r2, #4]
				  break;
    449c:	f7ff b859 	b.w	3552 <parsePreset+0x812>
				  shapeTick[i] = &userTick;
    44a0:	4b4a      	ldr	r3, [pc, #296]	; (45cc <parsePreset+0x188c>)
    44a2:	4a4b      	ldr	r2, [pc, #300]	; (45d0 <parsePreset+0x1890>)
    44a4:	601a      	str	r2, [r3, #0]
				  break;
    44a6:	f7ff b82e 	b.w	3506 <parsePreset+0x7c6>
				  shapeTick[i] = &triTick;
    44aa:	4b48      	ldr	r3, [pc, #288]	; (45cc <parsePreset+0x188c>)
    44ac:	4a49      	ldr	r2, [pc, #292]	; (45d4 <parsePreset+0x1894>)
    44ae:	601a      	str	r2, [r3, #0]
				  break;
    44b0:	f7ff b829 	b.w	3506 <parsePreset+0x7c6>
				  shapeTick[i] = &sineTick;
    44b4:	4b45      	ldr	r3, [pc, #276]	; (45cc <parsePreset+0x188c>)
    44b6:	4a48      	ldr	r2, [pc, #288]	; (45d8 <parsePreset+0x1898>)
    44b8:	601a      	str	r2, [r3, #0]
				  break;
    44ba:	f7ff b824 	b.w	3506 <parsePreset+0x7c6>
				  shapeTick[i] = &pulseTick;
    44be:	4b43      	ldr	r3, [pc, #268]	; (45cc <parsePreset+0x188c>)
    44c0:	4a46      	ldr	r2, [pc, #280]	; (45dc <parsePreset+0x189c>)
    44c2:	601a      	str	r2, [r3, #0]
				  break;
    44c4:	f7ff b81f 	b.w	3506 <parsePreset+0x7c6>
				  shapeTick[i] = &sawTick;
    44c8:	4b40      	ldr	r3, [pc, #256]	; (45cc <parsePreset+0x188c>)
    44ca:	4a45      	ldr	r2, [pc, #276]	; (45e0 <parsePreset+0x18a0>)
    44cc:	601a      	str	r2, [r3, #0]
				  break;
    44ce:	f7ff b81a 	b.w	3506 <parsePreset+0x7c6>
				  shapeTick[i] = &sineTriTick;
    44d2:	4b3e      	ldr	r3, [pc, #248]	; (45cc <parsePreset+0x188c>)
    44d4:	4a43      	ldr	r2, [pc, #268]	; (45e4 <parsePreset+0x18a4>)
    44d6:	601a      	str	r2, [r3, #0]
				  break;
    44d8:	f7ff b815 	b.w	3506 <parsePreset+0x7c6>
			mappings[whichMapping].destNumber = destNumber;
    44dc:	fb09 f30c 	mul.w	r3, r9, ip
    44e0:	4666      	mov	r6, ip
    44e2:	eb0e 0203 	add.w	r2, lr, r3
    44e6:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
    44ea:	9b02      	ldr	r3, [sp, #8]
    44ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    44f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    44f4:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
    44f8:	6050      	str	r0, [r2, #4]
			numMappings++;
    44fa:	fa5f fc83 	uxtb.w	ip, r3
    44fe:	f7ff bb60 	b.w	3bc2 <parsePreset+0xe82>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    4502:	fb09 f306 	mul.w	r3, r9, r6
    4506:	18ca      	adds	r2, r1, r3
    4508:	4937      	ldr	r1, [pc, #220]	; (45e8 <parsePreset+0x18a8>)
    450a:	4472      	add	r2, lr
    450c:	6291      	str	r1, [r2, #40]	; 0x28
    450e:	1d2a      	adds	r2, r5, #4
    4510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4514:	4473      	add	r3, lr
    4516:	6059      	str	r1, [r3, #4]
    4518:	f7ff bb99 	b.w	3c4e <parsePreset+0xf0e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    451c:	2108      	movs	r1, #8
    451e:	2004      	movs	r0, #4
    4520:	4472      	add	r2, lr
    4522:	fb11 0303 	smlabb	r3, r1, r3, r0
    4526:	4453      	add	r3, sl
    4528:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    452a:	f7ff bb90 	b.w	3c4e <parsePreset+0xf0e>
    452e:	4d2f      	ldr	r5, [pc, #188]	; (45ec <parsePreset+0x18ac>)
    4530:	f7fe be99 	b.w	3266 <parsePreset+0x526>
	for (int i = 0; i < paramCount; i++)
    4534:	f04f 0884 	mov.w	r8, #132	; 0x84
    4538:	4e2d      	ldr	r6, [pc, #180]	; (45f0 <parsePreset+0x18b0>)
    453a:	f7fe be82 	b.w	3242 <parsePreset+0x502>
    453e:	bf00      	nop
    4540:	200052e0 	.word	0x200052e0
    4544:	24001e21 	.word	0x24001e21
    4548:	20019e38 	.word	0x20019e38
    454c:	24001ed5 	.word	0x24001ed5
    4550:	24001fc5 	.word	0x24001fc5
    4554:	24001f4d 	.word	0x24001f4d
    4558:	24001e3d 	.word	0x24001e3d
    455c:	24001ee9 	.word	0x24001ee9
    4560:	24001fd9 	.word	0x24001fd9
    4564:	24001f61 	.word	0x24001f61
    4568:	200050a0 	.word	0x200050a0
    456c:	00000da1 	.word	0x00000da1
    4570:	00000fe1 	.word	0x00000fe1
    4574:	00001201 	.word	0x00001201
    4578:	00000d41 	.word	0x00000d41
    457c:	00000fc1 	.word	0x00000fc1
    4580:	000011c1 	.word	0x000011c1
    4584:	00000d01 	.word	0x00000d01
    4588:	00000fa1 	.word	0x00000fa1
    458c:	00001181 	.word	0x00001181
    4590:	00000cc1 	.word	0x00000cc1
    4594:	00000f81 	.word	0x00000f81
    4598:	00001141 	.word	0x00001141
    459c:	00000c81 	.word	0x00000c81
    45a0:	00000f61 	.word	0x00000f61
    45a4:	00001101 	.word	0x00001101
    45a8:	00000c21 	.word	0x00000c21
    45ac:	00000f41 	.word	0x00000f41
    45b0:	000010c1 	.word	0x000010c1
    45b4:	00000bc1 	.word	0x00000bc1
    45b8:	00000f21 	.word	0x00000f21
    45bc:	00001081 	.word	0x00001081
    45c0:	00000b61 	.word	0x00000b61
    45c4:	00000f01 	.word	0x00000f01
    45c8:	00001041 	.word	0x00001041
    45cc:	20005ae4 	.word	0x20005ae4
    45d0:	000008e1 	.word	0x000008e1
    45d4:	00000861 	.word	0x00000861
    45d8:	00000821 	.word	0x00000821
    45dc:	000007a1 	.word	0x000007a1
    45e0:	00000721 	.word	0x00000721
    45e4:	000006a1 	.word	0x000006a1
    45e8:	20000748 	.word	0x20000748
    45ec:	2001b8f0 	.word	0x2001b8f0
    45f0:	2001a7fc 	.word	0x2001a7fc
			params[i].objectNumber = 3;
    45f4:	f04f 0303 	mov.w	r3, #3
    45f8:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    45fc:	ed99 0a02 	vldr	s0, [r9, #8]
    4600:	2100      	movs	r1, #0
    4602:	f899 0018 	ldrb.w	r0, [r9, #24]
    4606:	f8d9 3014 	ldr.w	r3, [r9, #20]
    460a:	4798      	blx	r3
    460c:	ed99 0a03 	vldr	s0, [r9, #12]
    4610:	f8d9 3014 	ldr.w	r3, [r9, #20]
    4614:	2101      	movs	r1, #1
    4616:	f899 0018 	ldrb.w	r0, [r9, #24]
    461a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    461c:	f7ff ba1c 	b.w	3a58 <parsePreset+0xd18>
			params[i].objectNumber = 2;
    4620:	2302      	movs	r3, #2
    4622:	f889 3018 	strb.w	r3, [r9, #24]
    4626:	e7e9      	b.n	45fc <parsePreset+0x18bc>
			params[i].objectNumber = 1;
    4628:	f889 a018 	strb.w	sl, [r9, #24]
    462c:	e7e6      	b.n	45fc <parsePreset+0x18bc>
    462e:	4a01      	ldr	r2, [pc, #4]	; (4634 <parsePreset+0x18f4>)
    4630:	f7ff b82d 	b.w	368e <parsePreset+0x94e>
    4634:	20019e38 	.word	0x20019e38
	...

00004640 <tOversampler_upsample>:
{
    4640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
    4644:	6807      	ldr	r7, [r0, #0]
    if (os->ratio == 1)
    4646:	68fb      	ldr	r3, [r7, #12]
    4648:	2b01      	cmp	r3, #1
    464a:	d05b      	beq.n	4704 <tOversampler_upsample+0xc4>
    float *pState = os->upState;                 /* State pointer */
    464c:	69be      	ldr	r6, [r7, #24]
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
    464e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    4650:	f8d7 8014 	ldr.w	r8, [r7, #20]
    *pStateCur = input;
    4654:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    4658:	ed03 0a01 	vstr	s0, [r3, #-4]
    i = os->ratio;
    465c:	68fc      	ldr	r4, [r7, #12]
    465e:	46a1      	mov	r9, r4
    while (i > 0U)
    4660:	b3ac      	cbz	r4, 46ce <tOversampler_upsample+0x8e>
    j = 1U;
    4662:	f04f 0e01 	mov.w	lr, #1
        while (tapCnt > 0U)
    4666:	ed9f 6a29 	vldr	s12, [pc, #164]	; 470c <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
    466a:	eba4 030e 	sub.w	r3, r4, lr
    466e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
    4672:	b325      	cbz	r5, 46be <tOversampler_upsample+0x7e>
    4674:	2c01      	cmp	r4, #1
            ptr2 += os->ratio;
    4676:	ea4f 0c84 	mov.w	ip, r4, lsl #2
    467a:	d135      	bne.n	46e8 <tOversampler_upsample+0xa8>
    467c:	462a      	mov	r2, r5
        ptr1 = pState;
    467e:	4630      	mov	r0, r6
        sum0 = 0.0f;
    4680:	eddf 7a22 	vldr	s15, [pc, #136]	; 470c <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
    4684:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
    4688:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
    468a:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
    468e:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
    4690:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
    4694:	d1f6      	bne.n	4684 <tOversampler_upsample+0x44>
        *output++ = sum0 * os->ratio;
    4696:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
    469a:	45f1      	cmp	r9, lr
        j++;
    469c:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
    46a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    46a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    46a8:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
    46ac:	d00f      	beq.n	46ce <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
    46ae:	68fc      	ldr	r4, [r7, #12]
    46b0:	469e      	mov	lr, r3
    46b2:	eba4 030e 	sub.w	r3, r4, lr
    46b6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
    46ba:	2d00      	cmp	r5, #0
    46bc:	d1da      	bne.n	4674 <tOversampler_upsample+0x34>
    46be:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
    46c2:	45f1      	cmp	r9, lr
        j++;
    46c4:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
    46c8:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
    46cc:	d1ef      	bne.n	46ae <tOversampler_upsample+0x6e>
    while (tapCnt > 0U)
    46ce:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
    46d0:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
    46d4:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
    46d6:	d005      	beq.n	46e4 <tOversampler_upsample+0xa4>
        *pStateCur++ = *pState++;
    46d8:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
    46dc:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
    46de:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
    46e2:	d1f9      	bne.n	46d8 <tOversampler_upsample+0x98>
}
    46e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
    46e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 470c <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
    46ec:	462a      	mov	r2, r5
        ptr1 = pState;
    46ee:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
    46f0:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
    46f4:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
    46f6:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
    46fa:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
    46fc:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
    4700:	d1f6      	bne.n	46f0 <tOversampler_upsample+0xb0>
    4702:	e7c8      	b.n	4696 <tOversampler_upsample+0x56>
        output[0] = input;
    4704:	ed81 0a00 	vstr	s0, [r1]
}
    4708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    470c:	00000000 	.word	0x00000000
    4710:	f3af 8000 	nop.w
    4714:	f3af 8000 	nop.w
    4718:	f3af 8000 	nop.w
    471c:	f3af 8000 	nop.w

00004720 <tOversampler_downsample>:
{
    4720:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
    4722:	6806      	ldr	r6, [r0, #0]
    if (os->ratio == 1) return input[0];
    4724:	68f3      	ldr	r3, [r6, #12]
    4726:	2b01      	cmp	r3, #1
    4728:	d029      	beq.n	477e <tOversampler_downsample+0x5e>
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
    472a:	6a32      	ldr	r2, [r6, #32]
    pStateCur = os->downState + (numTaps - 1U);
    472c:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
    4730:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
    4732:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    4734:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
    4736:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        *pStateCur++ = *input++;
    473a:	f851 cb04 	ldr.w	ip, [r1], #4
    } while (--i);
    473e:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
    4740:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
    4744:	d1f9      	bne.n	473a <tOversampler_downsample+0x1a>
    while (tapCnt > 0U)
    4746:	b1f2      	cbz	r2, 4786 <tOversampler_downsample+0x66>
    4748:	4613      	mov	r3, r2
    acc0 = 0.0f;
    474a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 4798 <tOversampler_downsample+0x78>
    px0 = pState;
    474e:	4621      	mov	r1, r4
        acc0 += x0 * c0;
    4750:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
    4754:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
    4756:	ecf1 7a01 	vldmia	r1!, {s15}
    475a:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
    475e:	d1f7      	bne.n	4750 <tOversampler_downsample+0x30>
    pState = pState + os->ratio;
    4760:	68f1      	ldr	r1, [r6, #12]
    while (tapCnt > 0U)
    4762:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
    4764:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
    4766:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
    476a:	d006      	beq.n	477a <tOversampler_downsample+0x5a>
    476c:	4602      	mov	r2, r0
        *pStateCur++ = *pState++;
    476e:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
    4772:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
    4774:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
    4778:	d1f9      	bne.n	476e <tOversampler_downsample+0x4e>
}
    477a:	bc70      	pop	{r4, r5, r6}
    477c:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
    477e:	ed91 0a00 	vldr	s0, [r1]
}
    4782:	bc70      	pop	{r4, r5, r6}
    4784:	4770      	bx	lr
    pState = pState + os->ratio;
    4786:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
    4788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
    478c:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
    478e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 4798 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
    4792:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
    4796:	e7e9      	b.n	476c <tOversampler_downsample+0x4c>
	...

000047a0 <place_step_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    47a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 480c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    47a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    47a8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    47ac:	b538      	push	{r3, r4, r5, lr}
    47ae:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    47b2:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    47b6:	460d      	mov	r5, r1
    47b8:	4604      	mov	r4, r0
    47ba:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    47be:	ee38 0a67 	vsub.f32	s0, s16, s15
    47c2:	f001 fa21 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    47c6:	ee07 0a90 	vmov	s15, r0
    47ca:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    47ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    47d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    47d6:	4b0e      	ldr	r3, [pc, #56]	; (4810 <place_step_dd+0x70>)
    47d8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    47dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    47e0:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    47e4:	edd3 6a01 	vldr	s13, [r3, #4]
    47e8:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    47ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    47f0:	edd2 7a00 	vldr	s15, [r2]
    47f4:	eea6 7a86 	vfma.f32	s14, s13, s12
    47f8:	eee7 7a28 	vfma.f32	s15, s14, s17
    47fc:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    4800:	4291      	cmp	r1, r2
    4802:	d1ef      	bne.n	47e4 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    4804:	ecbd 8b02 	vpop	{d8}
    4808:	bd38      	pop	{r3, r4, r5, pc}
    480a:	bf00      	nop
    480c:	42800000 	.word	0x42800000
    4810:	2402b310 	.word	0x2402b310
    4814:	f3af 8000 	nop.w
    4818:	f3af 8000 	nop.w
    481c:	f3af 8000 	nop.w

00004820 <place_slope_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    4820:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 4898 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    4824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    4828:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    482c:	b538      	push	{r3, r4, r5, lr}
    482e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    4832:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    4836:	460d      	mov	r5, r1
    4838:	4604      	mov	r4, r0
    483a:	eeb0 8a60 	vmov.f32	s16, s1
    483e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    4842:	ee38 0ae7 	vsub.f32	s0, s17, s15
    4846:	f001 f9df 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    484a:	ee07 0a90 	vmov	s15, r0
    484e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4852:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4856:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    485a:	4b10      	ldr	r3, [pc, #64]	; (489c <place_slope_dd+0x7c>)

	slope_delta *= w;
    485c:	ee28 1a09 	vmul.f32	s2, s16, s18
    4860:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    4864:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (float)i;
    4868:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    486c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    4870:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    4874:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    4878:	ed92 7a00 	vldr	s14, [r2]
    487c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    4880:	eee6 7a86 	vfma.f32	s15, s13, s12
    4884:	eea7 7a81 	vfma.f32	s14, s15, s2
    4888:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    488c:	4291      	cmp	r1, r2
    488e:	d1ed      	bne.n	486c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    4890:	ecbd 8b04 	vpop	{d8-d9}
    4894:	bd38      	pop	{r3, r4, r5, pc}
    4896:	bf00      	nop
    4898:	42800000 	.word	0x42800000
    489c:	24026c0c 	.word	0x24026c0c

000048a0 <LEAF_clip>:
    if (min > max)
    48a0:	eeb4 0ac1 	vcmpe.f32	s0, s2
    48a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48a8:	dd05      	ble.n	48b6 <LEAF_clip+0x16>
    48aa:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
    48ae:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
    48b2:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
    48b6:	eeb4 0ae0 	vcmpe.f32	s0, s1
    48ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48be:	dc01      	bgt.n	48c4 <LEAF_clip+0x24>
    else if (val > tempmax)
    48c0:	fe81 0a60 	vminnm.f32	s0, s2, s1
}
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
	...

000048e0 <tMBPulse_place_step_dd_noBuffer>:
{
    48e0:	b510      	push	{r4, lr}
    48e2:	ed2d 8b04 	vpush	{d8-d9}
    48e6:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 4950 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    48ea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    48ee:	eef0 8a40 	vmov.f32	s17, s0
	_tMBPulse* c = *osc;
    48f2:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    48f4:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    48f8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    48fc:	eee0 7a08 	vfma.f32	s15, s0, s16
    4900:	eeb0 0a67 	vmov.f32	s0, s15
    4904:	f001 f980 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    4908:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    490c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4910:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4918:	3301      	adds	r3, #1
	r -= (float)i;
    491a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    491e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4922:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4926:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    492a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    492e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4932:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4936:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    493a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    493e:	3301      	adds	r3, #1
    4940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4944:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    4948:	ecbd 8b04 	vpop	{d8-d9}
    494c:	bd10      	pop	{r4, pc}
    494e:	bf00      	nop
    4950:	42800000 	.word	0x42800000
    4954:	f3af 8000 	nop.w
    4958:	f3af 8000 	nop.w
    495c:	f3af 8000 	nop.w

00004960 <tMBTriangle_place_dd_noBuffer>:
{
    4960:	b510      	push	{r4, lr}
    4962:	ed2d 8b06 	vpush	{d8-d10}
    4966:	eddf 8a1f 	vldr	s17, [pc, #124]	; 49e4 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    496a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    496e:	6804      	ldr	r4, [r0, #0]
{
    4970:	eeb0 9a40 	vmov.f32	s18, s0
    4974:	ee60 8aa8 	vmul.f32	s17, s1, s17
    4978:	eeb0 8a41 	vmov.f32	s16, s2
    497c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    4980:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    4984:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    4988:	eeb0 0a67 	vmov.f32	s0, s15
    498c:	f001 f93c 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    4990:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4994:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    4998:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (float)i;
    499c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    49a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    49a4:	3301      	adds	r3, #1
	r -= (float)i;
    49a6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    49aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    49b2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    49b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    49ba:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    49be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    49c2:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    49c6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    49ca:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    49ce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    49d2:	3301      	adds	r3, #1
    49d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49d8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    49dc:	ecbd 8b06 	vpop	{d8-d10}
    49e0:	bd10      	pop	{r4, pc}
    49e2:	bf00      	nop
    49e4:	42800000 	.word	0x42800000
    49e8:	f3af 8000 	nop.w
    49ec:	f3af 8000 	nop.w
    49f0:	f3af 8000 	nop.w
    49f4:	f3af 8000 	nop.w
    49f8:	f3af 8000 	nop.w
    49fc:	f3af 8000 	nop.w

00004a00 <tMBSineTri_place_dd_noBuffer>:
{
    4a00:	b510      	push	{r4, lr}
    4a02:	ed2d 8b06 	vpush	{d8-d10}
    4a06:	eddf 8a1f 	vldr	s17, [pc, #124]	; 4a84 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    4a0a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    4a0e:	6804      	ldr	r4, [r0, #0]
{
    4a10:	eeb0 9a40 	vmov.f32	s18, s0
    4a14:	ee60 8aa8 	vmul.f32	s17, s1, s17
    4a18:	eeb0 8a41 	vmov.f32	s16, s2
    4a1c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    4a20:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    4a24:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    4a28:	eeb0 0a67 	vmov.f32	s0, s15
    4a2c:	f001 f8ec 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    4a30:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a34:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    4a38:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (float)i;
    4a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4a40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a44:	3301      	adds	r3, #1
	r -= (float)i;
    4a46:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4a4e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    4a52:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4a56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    4a5a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4a5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4a62:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    4a66:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4a6a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4a6e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    4a72:	3301      	adds	r3, #1
    4a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4a78:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    4a7c:	ecbd 8b06 	vpop	{d8-d10}
    4a80:	bd10      	pop	{r4, pc}
    4a82:	bf00      	nop
    4a84:	42800000 	.word	0x42800000
    4a88:	f3af 8000 	nop.w
    4a8c:	f3af 8000 	nop.w
    4a90:	f3af 8000 	nop.w
    4a94:	f3af 8000 	nop.w
    4a98:	f3af 8000 	nop.w
    4a9c:	f3af 8000 	nop.w

00004aa0 <tMBSaw_place_step_dd_noBuffer>:
{
    4aa0:	b510      	push	{r4, lr}
    4aa2:	ed2d 8b04 	vpush	{d8-d9}
    4aa6:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 4b10 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    4aaa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    4aae:	eef0 8a40 	vmov.f32	s17, s0
	_tMBSaw* c = *osc;
    4ab2:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    4ab4:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    4ab8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    4abc:	eee0 7a08 	vfma.f32	s15, s0, s16
    4ac0:	eeb0 0a67 	vmov.f32	s0, s15
    4ac4:	f001 f8a0 	bl	5c08 <__lrintf_veneer>
	r -= (float)i;
    4ac8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4acc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4ad0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ad8:	3301      	adds	r3, #1
	r -= (float)i;
    4ada:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4ae2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ae6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    4aea:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4aee:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4af2:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4af6:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4afa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    4afe:	3301      	adds	r3, #1
    4b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b04:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    4b08:	ecbd 8b04 	vpop	{d8-d9}
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	bf00      	nop
    4b10:	42800000 	.word	0x42800000
    4b14:	f3af 8000 	nop.w
    4b18:	f3af 8000 	nop.w
    4b1c:	f3af 8000 	nop.w

00004b20 <tMBSawPulse_place_step_dd_noBuffer>:
{
    4b20:	b510      	push	{r4, lr}
    4b22:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    4b26:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    4b28:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    4b2c:	b36b      	cbz	r3, 4b8a <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    4b2e:	ed9f 8a18 	vldr	s16, [pc, #96]	; 4b90 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    4b32:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    4b36:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    4b3a:	ee20 8a88 	vmul.f32	s16, s1, s16
    4b3e:	eeb0 9a41 	vmov.f32	s18, s2
    4b42:	eea8 0a88 	vfma.f32	s0, s17, s16
    4b46:	f001 f85f 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    4b4a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b4e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4b52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b5a:	3301      	adds	r3, #1
		r -= (float)i;
    4b5c:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4b64:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b68:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4b6c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4b70:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4b74:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4b78:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4b7c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    4b80:	3301      	adds	r3, #1
    4b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b86:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    4b8a:	ecbd 8b04 	vpop	{d8-d9}
    4b8e:	bd10      	pop	{r4, pc}
    4b90:	42800000 	.word	0x42800000
    4b94:	f3af 8000 	nop.w
    4b98:	f3af 8000 	nop.w
    4b9c:	f3af 8000 	nop.w

00004ba0 <tMBSawPulse_tick>:
{
    4ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba4:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    4ba8:	6804      	ldr	r4, [r0, #0]
    float sawShape = 1.0f - c->shape;
    4baa:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    4bae:	b084      	sub	sp, #16
    4bb0:	4607      	mov	r7, r0
    sync = c->sync;
    4bb2:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
    4bb6:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4bba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    4bbe:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
    4bc2:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    4bc6:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    4bca:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    4bce:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    4bd6:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    4bda:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    4bde:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    4be2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4be4:	f340 80d8 	ble.w	4d98 <tMBSawPulse_tick+0x1f8>
    4be8:	69a3      	ldr	r3, [r4, #24]
    4bea:	2b00      	cmp	r3, #0
    4bec:	dd65      	ble.n	4cba <tMBSawPulse_tick+0x11a>
    4bee:	edd4 6a05 	vldr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4bf2:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4bf6:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    4bfa:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4bfe:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4c02:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    4c06:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    4c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
    4c0e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4c12:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    4c16:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    4c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    4c1e:	2b00      	cmp	r3, #0
    4c20:	f040 80d1 	bne.w	4dc6 <tMBSawPulse_tick+0x226>
		if (sw > 0)
    4c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c28:	f340 8210 	ble.w	504c <tMBSawPulse_tick+0x4ac>
			if (p >= b) {
    4c2c:	eeb4 8acb 	vcmpe.f32	s16, s22
    4c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c34:	f280 81cc 	bge.w	4fd0 <tMBSawPulse_tick+0x430>
    4c38:	eddf 5ae3 	vldr	s11, [pc, #908]	; 4fc8 <tMBSawPulse_tick+0x428>
			if (p >= 1.0f) {
    4c3c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4c40:	eeb4 8ae8 	vcmpe.f32	s16, s17
    4c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c48:	f2c0 80cb 	blt.w	4de2 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
    4c4c:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    4c4e:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    4c52:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    4c56:	2b00      	cmp	r3, #0
    4c58:	f000 81f3 	beq.w	5042 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    4c5c:	eddf 7adb 	vldr	s15, [pc, #876]	; 4fcc <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    4c60:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    4c64:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    4c68:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    4c6c:	eea9 0a08 	vfma.f32	s0, s18, s16
    4c70:	f000 ffca 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    4c74:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c78:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4c7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c84:	eddf 5ad0 	vldr	s11, [pc, #832]	; 4fc8 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c88:	3301      	adds	r3, #1
		r -= (float)i;
    4c8a:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    4c92:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c96:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4c9a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4c9e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    4ca2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4ca6:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4caa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    4cae:	3301      	adds	r3, #1
    4cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4cb4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    4cb8:	e093      	b.n	4de2 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    4cba:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4cbe:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    4cc2:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
    4cc6:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    4cca:	eefd 8ae7 	vcvt.s32.f32	s17, s15
    4cce:	ee37 7a87 	vadd.f32	s14, s15, s14
    4cd2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    4cd6:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
    4cda:	f040 8639 	bne.w	5950 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
    4cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4ce2:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
    4ce4:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    4ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
    4cec:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    4cf0:	f340 8117 	ble.w	4f22 <tMBSawPulse_tick+0x382>
		 if (!k)
    4cf4:	ee1c 2a90 	vmov	r2, s25
    4cf8:	2a00      	cmp	r2, #0
    4cfa:	f040 8274 	bne.w	51e6 <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
    4cfe:	eeb4 baed 	vcmpe.f32	s22, s27
    4d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d06:	f240 83c0 	bls.w	548a <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
    4d0a:	46a0      	mov	r8, r4
    if (c->active)
    4d0c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    4d10:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
    4d14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4d18:	eef4 dae8 	vcmpe.f32	s27, s17
    4d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d20:	f280 82ad 	bge.w	527e <tMBSawPulse_tick+0x6de>
    if (c->active)
    4d24:	b35a      	cbz	r2, 4d7e <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    4d26:	eddf 8aa9 	vldr	s17, [pc, #676]	; 4fcc <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    4d2a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    4d2e:	ee6d da8d 	vmul.f32	s27, s27, s26
    4d32:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    4d36:	eea8 0a28 	vfma.f32	s0, s16, s17
    4d3a:	f000 ff65 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    4d3e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d42:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4d46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d4e:	3301      	adds	r3, #1
		r -= (float)i;
    4d50:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    4d58:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d5c:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4d60:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4d64:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    4d68:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4d6c:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d70:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    4d74:	3301      	adds	r3, #1
    4d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d7a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
    4d7e:	f1b9 0f00 	cmp.w	r9, #0
    4d82:	f040 8419 	bne.w	55b8 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
    4d86:	eeb4 bac8 	vcmpe.f32	s22, s16
    4d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d8e:	f240 80df 	bls.w	4f50 <tMBSawPulse_tick+0x3b0>
		 if (!k)
    4d92:	eddf 5a8d 	vldr	s11, [pc, #564]	; 4fc8 <tMBSawPulse_tick+0x428>
    4d96:	e024      	b.n	4de2 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    4d98:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    4d9c:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
    4da0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    4da4:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
    4da8:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    4dac:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    4db0:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    4db4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    4db8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4dbc:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	f43f af2f 	beq.w	4c24 <tMBSawPulse_tick+0x84>
		if (sw > 0)
    4dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dca:	f340 81bd 	ble.w	5148 <tMBSawPulse_tick+0x5a8>
			if (p >= 1.0f) {
    4dce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4dd2:	eeb4 8ae8 	vcmpe.f32	s16, s17
    4dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dda:	f280 80ac 	bge.w	4f36 <tMBSawPulse_tick+0x396>
    c->_k = k;
    4dde:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4de2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    4de6:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    4de8:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    4dec:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4df0:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    4df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4df8:	eea6 7a8d 	vfma.f32	s14, s13, s26
    4dfc:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4e00:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    4e04:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4e08:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	f000 81e5 	beq.w	51dc <tMBSawPulse_tick+0x63c>
    4e12:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    4e16:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4e1a:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4e1e:	2000      	movs	r0, #0
    4e20:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    4e24:	4d67      	ldr	r5, [pc, #412]	; (4fc4 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    4e26:	ebae 0300 	sub.w	r3, lr, r0
    4e2a:	b29b      	uxth	r3, r3
    4e2c:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
    4e30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e38:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4e3c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    4e40:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    4e44:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    4e48:	b289      	uxth	r1, r1
    4e4a:	f8bd 900e 	ldrh.w	r9, [sp, #14]
    4e4e:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4e50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4e54:	fa1f f888 	uxth.w	r8, r8
    4e58:	fa1f f989 	uxth.w	r9, r9
    4e5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4e60:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    4e64:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    4e68:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    4e6c:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4e70:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4e72:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    4e76:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    4e7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4e7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4e82:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    4e86:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4e8a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4e8c:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4e90:	edd9 6a01 	vldr	s13, [r9, #4]
    4e94:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4e98:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4e9c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4ea0:	eee6 7a26 	vfma.f32	s15, s12, s13
    4ea4:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4ea8:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4eac:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    4eb0:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4eb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4eb6:	d32e      	bcc.n	4f16 <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
    4eb8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4ebc:	3001      	adds	r0, #1
    4ebe:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
    4ec2:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4ec4:	4282      	cmp	r2, r0
			c->numBLEPs--;
    4ec6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4eca:	dcac      	bgt.n	4e26 <tMBSawPulse_tick+0x286>
    4ecc:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4ed0:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    4ed4:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4ed8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    4edc:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4ede:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    4ee2:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    4ee6:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    4eea:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    4eee:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4ef2:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    4ef6:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    4efa:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    4efc:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    4f00:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    4f04:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    4f08:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    4f0c:	b004      	add	sp, #16
    4f0e:	ecbd 8b0e 	vpop	{d8-d14}
    4f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4f16:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4f1a:	3001      	adds	r0, #1
    4f1c:	4283      	cmp	r3, r0
    4f1e:	dc82      	bgt.n	4e26 <tMBSawPulse_tick+0x286>
    4f20:	e7d4      	b.n	4ecc <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
    4f22:	f100 8229 	bmi.w	5378 <tMBSawPulse_tick+0x7d8>
		 if (!k)
    4f26:	ee1c 2a90 	vmov	r2, s25
    4f2a:	2a00      	cmp	r2, #0
    4f2c:	f040 8197 	bne.w	525e <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
    4f30:	eeb0 8a68 	vmov.f32	s16, s17
    4f34:	e72d      	b.n	4d92 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    4f36:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    4f38:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    4f3c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    4f40:	2b00      	cmp	r3, #0
    4f42:	f040 8161 	bne.w	5208 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
    4f46:	eeb4 bac8 	vcmpe.f32	s22, s16
    4f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f4e:	d878      	bhi.n	5042 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
    4f50:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    4f52:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    4f56:	2b00      	cmp	r3, #0
    4f58:	f000 8151 	beq.w	51fe <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
    4f5c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 4fcc <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4f60:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    4f64:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    4f68:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
    4f6c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    4f70:	eea8 0a89 	vfma.f32	s0, s17, s18
    4f74:	f000 fe48 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    4f78:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4f7c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4f80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4f88:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4f8a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4f8e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    4f96:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    4f9a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4f9e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4fa2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4fa6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    4faa:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4fae:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4fb2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    4fb6:	3301      	adds	r3, #1
    4fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fbc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    4fc0:	e70f      	b.n	4de2 <tMBSawPulse_tick+0x242>
    4fc2:	bf00      	nop
    4fc4:	2402b310 	.word	0x2402b310
    4fc8:	00000000 	.word	0x00000000
    4fcc:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    4fd0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    4fd2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	f000 814c 	beq.w	5274 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
    4fdc:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 4fcc <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4fe0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    4fe4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    4fe8:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    4fec:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    4ff0:	eea9 0aa8 	vfma.f32	s0, s19, s17
    4ff4:	f000 fe08 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    4ff8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ffc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5000:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5008:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    500a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    500e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    5016:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    501a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    501e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5022:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5026:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    502a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    502e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5032:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5036:	3301      	adds	r3, #1
    5038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    503c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    5040:	e5fc      	b.n	4c3c <tMBSawPulse_tick+0x9c>
				x = 0.5f;
    5042:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    5046:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 4fc8 <tMBSawPulse_tick+0x428>
    504a:	e6ca      	b.n	4de2 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
    504c:	eeb5 8a40 	vcmp.f32	s16, #0.0
    5050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5054:	f57f ae9d 	bpl.w	4d92 <tMBSawPulse_tick+0x1f2>
    5058:	eef5 7a40 	vcmp.f32	s15, #0.0
    505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5060:	f57f ae97 	bpl.w	4d92 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    5064:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    5066:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    506a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    506e:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    5072:	b353      	cbz	r3, 50ca <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
    5074:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    5078:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 4fcc <tMBSawPulse_tick+0x42c>
    507c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5080:	eea8 0a29 	vfma.f32	s0, s16, s19
    5084:	f000 fdc0 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5088:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    508c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5090:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5098:	4ab2      	ldr	r2, [pc, #712]	; (5364 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    509a:	3301      	adds	r3, #1
		r -= (float)i;
    509c:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    50a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    50a4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    50a8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    50ac:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    50b0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    50b4:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    50b8:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    50bc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    50c0:	3301      	adds	r3, #1
    50c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    50c6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    50ca:	eeb4 bae8 	vcmpe.f32	s22, s17
    50ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50d2:	f340 8446 	ble.w	5962 <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
    50d6:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    50d8:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    50dc:	2b00      	cmp	r3, #0
    50de:	f000 8327 	beq.w	5730 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
    50e2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 5374 <tMBSawPulse_tick+0x7d4>
    50e6:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    50ea:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    50ee:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    50f2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    50f6:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    50fa:	eea9 0a29 	vfma.f32	s0, s18, s19
    50fe:	f000 fd83 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5102:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5106:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    510a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    510e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5112:	eddf 5a97 	vldr	s11, [pc, #604]	; 5370 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5116:	3301      	adds	r3, #1
		r -= (float)i;
    5118:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    511c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    5120:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5124:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5128:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    512c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    5130:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5134:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5138:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    513c:	3301      	adds	r3, #1
    513e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5142:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    5146:	e64c      	b.n	4de2 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
    5148:	f57f ae49 	bpl.w	4dde <tMBSawPulse_tick+0x23e>
			if (p < b) {
    514c:	eeb4 8acb 	vcmpe.f32	s16, s22
    5150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5154:	f100 80cd 	bmi.w	52f2 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
    5158:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5160:	f57f ae3d 	bpl.w	4dde <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    5164:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    5166:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    516a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    516e:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    5172:	2b00      	cmp	r3, #0
    5174:	f000 8302 	beq.w	577c <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
    5178:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    517c:	eddf 9a7d 	vldr	s19, [pc, #500]	; 5374 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
    5180:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    5184:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    5188:	eeb0 0a6a 	vmov.f32	s0, s21
    518c:	eea9 0a29 	vfma.f32	s0, s18, s19
    5190:	f000 fd3a 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5194:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5198:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    519c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    51a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    51a4:	4a6f      	ldr	r2, [pc, #444]	; (5364 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51a6:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    51a8:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    51b0:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    51b4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51b8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    51bc:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    51c0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    51c4:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    51c8:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    51cc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    51d0:	3301      	adds	r3, #1
    51d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51d6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    51da:	e602      	b.n	4de2 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    51dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    51e0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    51e4:	e674      	b.n	4ed0 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
    51e6:	eef4 dae9 	vcmpe.f32	s27, s19
    51ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51ee:	f280 8159 	bge.w	54a4 <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
    51f2:	46a0      	mov	r8, r4
    if (c->active)
    51f4:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    51f8:	ee1c 9a90 	vmov	r9, s25
    51fc:	e592      	b.n	4d24 <tMBSawPulse_tick+0x184>
    51fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    5202:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    5206:	e5ec      	b.n	4de2 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
    5208:	eddf 9a5a 	vldr	s19, [pc, #360]	; 5374 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    520c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5210:	ee69 9a29 	vmul.f32	s19, s18, s19
    5214:	eea9 0a88 	vfma.f32	s0, s19, s16
    5218:	f000 fcf6 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    521c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5220:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5224:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    522c:	3301      	adds	r3, #1
		r -= (float)i;
    522e:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    5236:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    523a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    523e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5242:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    5246:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    524a:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    524e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5252:	3301      	adds	r3, #1
    5254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5258:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    525c:	e673      	b.n	4f46 <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
    525e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5266:	f100 815b 	bmi.w	5520 <tMBSawPulse_tick+0x980>
    c->_k = k;
    526a:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    526e:	eeb0 8a68 	vmov.f32	s16, s17
    5272:	e5b6      	b.n	4de2 <tMBSawPulse_tick+0x242>
    5274:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    5278:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    527c:	e4de      	b.n	4c3c <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
    527e:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    5282:	2a00      	cmp	r2, #0
    5284:	f000 810b 	beq.w	549e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
    5288:	eddf 9a3a 	vldr	s19, [pc, #232]	; 5374 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    528c:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
    5290:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    5294:	f04f 0900 	mov.w	r9, #0
    5298:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
    529c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    52a0:	eeac 0aa9 	vfma.f32	s0, s25, s19
    52a4:	f000 fcb0 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    52a8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52ac:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    52b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    52b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52b8:	3301      	adds	r3, #1
		r -= (float)i;
    52ba:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    52c2:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52c6:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    52ca:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    52ce:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    52d2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    52d6:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    52da:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    52de:	3301      	adds	r3, #1
    52e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    52e4:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    52e8:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    52ec:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    52f0:	e518      	b.n	4d24 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
    52f2:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    52f4:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    52f8:	ee1c 3a90 	vmov	r3, s25
    52fc:	2b00      	cmp	r3, #0
    52fe:	f000 820d 	beq.w	571c <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
    5302:	eddf 9a1c 	vldr	s19, [pc, #112]	; 5374 <tMBSawPulse_tick+0x7d4>
    5306:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    530a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    530e:	eddf ca16 	vldr	s25, [pc, #88]	; 5368 <tMBSawPulse_tick+0x7c8>
    5312:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    5316:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    531a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    531e:	f000 fc73 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5322:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5326:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    532a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    532e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5332:	3301      	adds	r3, #1
		r -= (float)i;
    5334:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    533c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5340:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5344:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5348:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    534c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5350:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5354:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5358:	3301      	adds	r3, #1
    535a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    535e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    5362:	e6f9      	b.n	5158 <tMBSawPulse_tick+0x5b8>
    5364:	bf800000 	.word	0xbf800000
    5368:	00000000 	.word	0x00000000
    536c:	00000001 	.word	0x00000001
    5370:	00000000 	.word	0x00000000
    5374:	42800000 	.word	0x42800000
		 if (!k)
    5378:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    537c:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    5380:	2a00      	cmp	r2, #0
    5382:	f040 80cf 	bne.w	5524 <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
    5386:	eef5 da40 	vcmp.f32	s27, #0.0
    538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    538e:	d571      	bpl.n	5474 <tMBSawPulse_tick+0x8d4>
    if (c->active)
    5390:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    5394:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    5398:	2b00      	cmp	r3, #0
    539a:	f040 8231 	bne.w	5800 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
    539e:	eeb4 baed 	vcmpe.f32	s22, s27
    53a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53a6:	f340 82d7 	ble.w	5958 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
    53aa:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    53ae:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    53b2:	2b00      	cmp	r3, #0
    53b4:	f000 81d6 	beq.w	5764 <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
    53b8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    53bc:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 5374 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    53c0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    53c4:	ed5f ca17 	vldr	s25, [pc, #-92]	; 536c <tMBSawPulse_tick+0x7cc>
    53c8:	ee69 9a29 	vmul.f32	s19, s18, s19
    53cc:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    53d0:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    53d4:	eea9 0aa8 	vfma.f32	s0, s19, s17
    53d8:	f000 fc16 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    53dc:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    53e0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    53e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    53e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    53ec:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    53ee:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    53f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    53f6:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    53fa:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    53fe:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5402:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5406:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    540a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    540e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5412:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5416:	3301      	adds	r3, #1
    5418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    541c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    5420:	eeb4 bace 	vcmpe.f32	s22, s28
    5424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5428:	f77f acd9 	ble.w	4dde <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    542c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    542e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    5432:	2b00      	cmp	r3, #0
    5434:	f43f ae05 	beq.w	5042 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    5438:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 5374 <tMBSawPulse_tick+0x7d4>
    543c:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    5440:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5444:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    5448:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    544c:	eea9 0a0e 	vfma.f32	s0, s18, s28
    5450:	f000 fbda 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5454:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5458:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    545c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5464:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 5370 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5468:	3301      	adds	r3, #1
		r -= (float)i;
    546a:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    546e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5472:	e655      	b.n	5120 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
    5474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    547c:	f100 814b 	bmi.w	5716 <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
    5480:	eeb0 8a4e 	vmov.f32	s16, s28
    5484:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 5370 <tMBSawPulse_tick+0x7d0>
    5488:	e4ab      	b.n	4de2 <tMBSawPulse_tick+0x242>
    if (c->active)
    548a:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    548e:	2b00      	cmp	r3, #0
    5490:	f040 8109 	bne.w	56a6 <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
    5494:	eef4 dae9 	vcmpe.f32	s27, s19
    5498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    549c:	db0f      	blt.n	54be <tMBSawPulse_tick+0x91e>
				x = 0.5f;
    549e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    54a2:	e470      	b.n	4d86 <tMBSawPulse_tick+0x1e6>
    if (c->active)
    54a4:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    54a8:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    54ac:	f1b9 0f00 	cmp.w	r9, #0
    54b0:	f040 8084 	bne.w	55bc <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
    54b4:	eeb4 baed 	vcmpe.f32	s22, s27
    54b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54bc:	d8ef      	bhi.n	549e <tMBSawPulse_tick+0x8fe>
    if (c->active)
    54be:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    54c2:	2b00      	cmp	r3, #0
    54c4:	d0eb      	beq.n	549e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
    54c6:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 5374 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    54ca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    54ce:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    54d2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    54d6:	eea8 0a28 	vfma.f32	s0, s16, s17
    54da:	f000 fb95 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    54de:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54e2:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    54e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    54ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54ee:	3301      	adds	r3, #1
		r -= (float)i;
    54f0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    54f8:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54fc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5500:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5504:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    5508:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    550c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5510:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5514:	3301      	adds	r3, #1
    5516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    551a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    551e:	e432      	b.n	4d86 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    5520:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    5524:	eeb4 baed 	vcmpe.f32	s22, s27
    5528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    552c:	f300 8108 	bgt.w	5740 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
    5530:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    5534:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    5538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    553c:	f100 8126 	bmi.w	578c <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
    5540:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    5544:	b38b      	cbz	r3, 55aa <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
    5546:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    554a:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 5374 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    554e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5552:	ee69 9a29 	vmul.f32	s19, s18, s19
    5556:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    555a:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
    555e:	eea9 0aae 	vfma.f32	s0, s19, s29
    5562:	f000 fb51 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5566:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    556a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    556e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5576:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    5578:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    557c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    5580:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    5584:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5588:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    558c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5590:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    5594:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5598:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    559c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    55a0:	3301      	adds	r3, #1
    55a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    55a6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    55aa:	ee1c 3a90 	vmov	r3, s25
    55ae:	2b00      	cmp	r3, #0
    55b0:	f47f af36 	bne.w	5420 <tMBSawPulse_tick+0x880>
    55b4:	683d      	ldr	r5, [r7, #0]
    55b6:	e6fa      	b.n	53ae <tMBSawPulse_tick+0x80e>
    55b8:	683d      	ldr	r5, [r7, #0]
    55ba:	e780      	b.n	54be <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
    55bc:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    55c0:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 5374 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    55c4:	ee78 aa2d 	vadd.f32	s21, s16, s27
    55c8:	9301      	str	r3, [sp, #4]
    55ca:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    55ce:	eeb0 0a6c 	vmov.f32	s0, s25
    55d2:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    55d6:	f000 fb17 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    55da:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55de:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    55e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    55e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
    55ea:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55ec:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    55ee:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
    55f6:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    55fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    55fe:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5602:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5606:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    560a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    560e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5612:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5616:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    561a:	f102 0201 	add.w	r2, r2, #1
    561e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    5622:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    5626:	f8d7 8000 	ldr.w	r8, [r7]
    562a:	4645      	mov	r5, r8
    if (c->active)
    562c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    5630:	f200 8175 	bhi.w	591e <tMBSawPulse_tick+0xd7e>
    if (c->active)
    5634:	2a00      	cmp	r2, #0
    5636:	f43f af42 	beq.w	54be <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    563a:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
    563e:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
    5642:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
    5646:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    564a:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    564e:	eea9 0aa8 	vfma.f32	s0, s19, s17
    5652:	f000 fad9 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5656:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    565a:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    565e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5666:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    5668:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    5670:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    5674:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5678:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    567c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5680:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    5684:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5688:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    568c:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    5690:	444b      	add	r3, r9
    5692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5696:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    569a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    569e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    56a2:	f7ff bb3f 	b.w	4d24 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
    56a6:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 5374 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    56aa:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    56ae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    56b2:	f04f 0901 	mov.w	r9, #1
    56b6:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    56ba:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    56be:	eea8 0aa9 	vfma.f32	s0, s17, s19
    56c2:	f000 faa1 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    56c6:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56ca:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    56ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    56d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56d6:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    56d8:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    56e0:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    56e4:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56e8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    56ec:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    56f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    56f4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    56f8:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    56fc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    5700:	444b      	add	r3, r9
    5702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5706:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    570a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    570e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    5712:	f7ff baff 	b.w	4d14 <tMBSawPulse_tick+0x174>
    5716:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    571a:	e711      	b.n	5540 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
    571c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    5720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5724:	f100 8100 	bmi.w	5928 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
    5728:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    572c:	f7ff bb57 	b.w	4dde <tMBSawPulse_tick+0x23e>
				x = 0.5f;
    5730:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    5734:	eddf 5a8f 	vldr	s11, [pc, #572]	; 5974 <tMBSawPulse_tick+0xdd4>
    5738:	eeb0 8a68 	vmov.f32	s16, s17
    573c:	f7ff bb51 	b.w	4de2 <tMBSawPulse_tick+0x242>
    if (c->active)
    5740:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    5744:	ee1c 2a90 	vmov	r2, s25
    5748:	2a00      	cmp	r2, #0
    574a:	f040 80b6 	bne.w	58ba <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
    574e:	eef5 dac0 	vcmpe.f32	s27, #0.0
    5752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5756:	f100 80ef 	bmi.w	5938 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
    575a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    575e:	eeb0 8a4e 	vmov.f32	s16, s28
    5762:	e722      	b.n	55aa <tMBSawPulse_tick+0xa0a>
			if (p < b) {
    5764:	eeb4 bace 	vcmpe.f32	s22, s28
    5768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    576c:	f73f ac69 	bgt.w	5042 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
    5770:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    5774:	eddf ca80 	vldr	s25, [pc, #512]	; 5978 <tMBSawPulse_tick+0xdd8>
    5778:	f7ff bb31 	b.w	4dde <tMBSawPulse_tick+0x23e>
				x = -0.5f;
    577c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    5780:	eeb0 8a67 	vmov.f32	s16, s15
    5784:	eef0 5a68 	vmov.f32	s11, s17
    5788:	f7ff bb2b 	b.w	4de2 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
    578c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5790:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    5794:	2b00      	cmp	r3, #0
    5796:	f000 80cf 	beq.w	5938 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
    579a:	ed9f 8a78 	vldr	s16, [pc, #480]	; 597c <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
    579e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    57a2:	eddf ca75 	vldr	s25, [pc, #468]	; 5978 <tMBSawPulse_tick+0xdd8>
    57a6:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    57aa:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    57ae:	eea8 0a28 	vfma.f32	s0, s16, s17
    57b2:	f000 fa29 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    57b6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    57ba:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    57be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    57c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    57c6:	4a6e      	ldr	r2, [pc, #440]	; (5980 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    57c8:	3301      	adds	r3, #1
		r -= (float)i;
    57ca:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    57ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    57d2:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    57d6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    57da:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    57de:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    57e2:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    57e6:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    57ea:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    57ee:	3301      	adds	r3, #1
    57f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    57f4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    57f8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    57fa:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    57fe:	e69f      	b.n	5540 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
    5800:	eddf 9a5e 	vldr	s19, [pc, #376]	; 597c <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
    5804:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5808:	ee69 9a29 	vmul.f32	s19, s18, s19
    580c:	eea9 0aa8 	vfma.f32	s0, s19, s17
    5810:	f000 f9fa 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5814:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5818:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    581c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5824:	4a56      	ldr	r2, [pc, #344]	; (5980 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5826:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    5828:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    5830:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    5834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    5838:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    583c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5840:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5844:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    5848:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    584c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5850:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    5854:	f103 0301 	add.w	r3, r3, #1
    5858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    585c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    5860:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    5862:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    5866:	dd6e      	ble.n	5946 <tMBSawPulse_tick+0xda6>
    if (c->active)
    5868:	2b00      	cmp	r3, #0
    586a:	f43f ad9e 	beq.w	53aa <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
    586e:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    5872:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    5876:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    587a:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    587e:	eea8 0a29 	vfma.f32	s0, s16, s19
    5882:	f000 f9c1 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    5886:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    588a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    588e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5896:	3301      	adds	r3, #1
		r -= (float)i;
    5898:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    58a0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    58a4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    58a8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    58ac:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    58b0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    58b4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    58b8:	e797      	b.n	57ea <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
    58ba:	ed9f 8a30 	vldr	s16, [pc, #192]	; 597c <tMBSawPulse_tick+0xddc>
    58be:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    58c2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    58c6:	ee0c 3a90 	vmov	s25, r3
    58ca:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    58ce:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    58d2:	eea9 0a88 	vfma.f32	s0, s19, s16
    58d6:	f000 f997 	bl	5c08 <__lrintf_veneer>
		r -= (float)i;
    58da:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    58de:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    58e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    58e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    58ea:	3301      	adds	r3, #1
		r -= (float)i;
    58ec:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    58f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    58f4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    58f8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    58fc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5900:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    5904:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5908:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    590c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    5910:	3301      	adds	r3, #1
    5912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5916:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    591a:	683d      	ldr	r5, [r7, #0]
    591c:	e608      	b.n	5530 <tMBSawPulse_tick+0x990>
    591e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    5922:	4699      	mov	r9, r3
    5924:	f7ff b9fe 	b.w	4d24 <tMBSawPulse_tick+0x184>
				p += 1.0f;
    5928:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    592c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    5930:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    5934:	f7ff ba55 	b.w	4de2 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
    5938:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    593c:	eddf ca0e 	vldr	s25, [pc, #56]	; 5978 <tMBSawPulse_tick+0xdd8>
    5940:	eeb0 8a4e 	vmov.f32	s16, s28
    5944:	e56c      	b.n	5420 <tMBSawPulse_tick+0x880>
    5946:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    594a:	eddf ca0b 	vldr	s25, [pc, #44]	; 5978 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
    594e:	e5f7      	b.n	5540 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
    5950:	eeb0 8a68 	vmov.f32	s16, s17
    5954:	f7ff b95f 	b.w	4c16 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
    5958:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    595c:	eddf ca06 	vldr	s25, [pc, #24]	; 5978 <tMBSawPulse_tick+0xdd8>
    5960:	e6fd      	b.n	575e <tMBSawPulse_tick+0xbbe>
    5962:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    5966:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    596a:	eeb0 8a68 	vmov.f32	s16, s17
    596e:	f7ff ba38 	b.w	4de2 <tMBSawPulse_tick+0x242>
    5972:	bf00      	nop
    5974:	00000000 	.word	0x00000000
    5978:	00000001 	.word	0x00000001
    597c:	42800000 	.word	0x42800000
    5980:	bf800000 	.word	0xbf800000
    5984:	f3af 8000 	nop.w
    5988:	f3af 8000 	nop.w
    598c:	f3af 8000 	nop.w
    5990:	f3af 8000 	nop.w
    5994:	f3af 8000 	nop.w
    5998:	f3af 8000 	nop.w
    599c:	f3af 8000 	nop.w

000059a0 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    59a0:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    59a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    59a6:	eddf 6a14 	vldr	s13, [pc, #80]	; 59f8 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    59aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    59ae:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    59b2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    59b6:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    59ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    59be:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    59c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    59c6:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    59ca:	dc0c      	bgt.n	59e6 <tMBSawPulse_setFreq+0x46>
    59cc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 59fc <tMBSawPulse_setFreq+0x5c>
    59d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
    59d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59d8:	d405      	bmi.n	59e6 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    59da:	2201      	movs	r2, #1
    59dc:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    59e0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    59e4:	4770      	bx	lr
    	c->gain = 0.0f;
    59e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 5a00 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    59ea:	2200      	movs	r2, #0
    59ec:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    59f0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    59f4:	4770      	bx	lr
    59f6:	bf00      	nop
    59f8:	45bb8000 	.word	0x45bb8000
    59fc:	c5bb8000 	.word	0xc5bb8000
    5a00:	00000000 	.word	0x00000000
    5a04:	f3af 8000 	nop.w
    5a08:	f3af 8000 	nop.w
    5a0c:	f3af 8000 	nop.w
    5a10:	f3af 8000 	nop.w
    5a14:	f3af 8000 	nop.w
    5a18:	f3af 8000 	nop.w
    5a1c:	f3af 8000 	nop.w

00005a20 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    5a20:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    5a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
    5a26:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    5a2a:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
    5a2e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
    5a32:	eef1 7a67 	vneg.f32	s15, s15
    5a36:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    5a3a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    5a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a42:	eef4 6ac7 	vcmpe.f32	s13, s14
    5a46:	bfcc      	ite	gt
    5a48:	2201      	movgt	r2, #1
    5a4a:	2200      	movle	r2, #0
    5a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a50:	f002 0201 	and.w	r2, r2, #1
    5a54:	bf88      	it	hi
    5a56:	2200      	movhi	r2, #0
    5a58:	b122      	cbz	r2, 5a64 <tMBSawPulse_sync+0x44>
    5a5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
    5a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a62:	da04      	bge.n	5a6e <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    5a64:	ed9f 7a05 	vldr	s14, [pc, #20]	; 5a7c <tMBSawPulse_sync+0x5c>
    5a68:	ed83 7a04 	vstr	s14, [r3, #16]
}
    5a6c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    5a6e:	ee37 7a66 	vsub.f32	s14, s14, s13
    5a72:	ee27 7a06 	vmul.f32	s14, s14, s12
    5a76:	ed83 7a04 	vstr	s14, [r3, #16]
}
    5a7a:	4770      	bx	lr
    5a7c:	00000000 	.word	0x00000000

00005a80 <__tADSRT_setAttack_veneer>:
    5a80:	f85f f000 	ldr.w	pc, [pc]	; 5a84 <__tADSRT_setAttack_veneer+0x4>
    5a84:	240134ad 	.word	0x240134ad

00005a88 <__tMBSineTri_setFreq_veneer>:
    5a88:	f85f f000 	ldr.w	pc, [pc]	; 5a8c <__tMBSineTri_setFreq_veneer+0x4>
    5a8c:	24018bb1 	.word	0x24018bb1

00005a90 <__tVZFilter_setFreqFast_veneer>:
    5a90:	f85f f000 	ldr.w	pc, [pc]	; 5a94 <__tVZFilter_setFreqFast_veneer+0x4>
    5a94:	240143e5 	.word	0x240143e5

00005a98 <__tDiodeFilter_setQ_veneer>:
    5a98:	f85f f000 	ldr.w	pc, [pc]	; 5a9c <__tDiodeFilter_setQ_veneer+0x4>
    5a9c:	24015095 	.word	0x24015095

00005aa0 <__audioFrame_veneer>:
    5aa0:	f85f f000 	ldr.w	pc, [pc]	; 5aa4 <__audioFrame_veneer+0x4>
    5aa4:	24002971 	.word	0x24002971

00005aa8 <__tMBTriangle_tick_veneer>:
    5aa8:	f85f f000 	ldr.w	pc, [pc]	; 5aac <__tMBTriangle_tick_veneer+0x4>
    5aac:	24016a59 	.word	0x24016a59

00005ab0 <__tCrusher_setSamplingRatio_veneer>:
    5ab0:	f85f f000 	ldr.w	pc, [pc]	; 5ab4 <__tCrusher_setSamplingRatio_veneer+0x4>
    5ab4:	2401315d 	.word	0x2401315d

00005ab8 <__tCrusher_setRound_veneer>:
    5ab8:	f85f f000 	ldr.w	pc, [pc]	; 5abc <__tCrusher_setRound_veneer+0x4>
    5abc:	24013155 	.word	0x24013155

00005ac0 <__tMBSaw_setFreq_veneer>:
    5ac0:	f85f f000 	ldr.w	pc, [pc]	; 5ac4 <__tMBSaw_setFreq_veneer+0x4>
    5ac4:	24019135 	.word	0x24019135

00005ac8 <__tMBPulse_sync_veneer>:
    5ac8:	f85f f000 	ldr.w	pc, [pc]	; 5acc <__tMBPulse_sync_veneer+0x4>
    5acc:	2401696d 	.word	0x2401696d

00005ad0 <__tSVF_setFreqFast_veneer>:
    5ad0:	f85f f000 	ldr.w	pc, [pc]	; 5ad4 <__tSVF_setFreqFast_veneer+0x4>
    5ad4:	24013e25 	.word	0x24013e25

00005ad8 <__tVZFilter_setGain_veneer>:
    5ad8:	f85f f000 	ldr.w	pc, [pc]	; 5adc <__tVZFilter_setGain_veneer+0x4>
    5adc:	240146a1 	.word	0x240146a1

00005ae0 <__tADSRT_tickNoInterp_veneer>:
    5ae0:	f85f f000 	ldr.w	pc, [pc]	; 5ae4 <__tADSRT_tickNoInterp_veneer+0x4>
    5ae4:	24013855 	.word	0x24013855

00005ae8 <__tMBSaw_sync_veneer>:
    5ae8:	f85f f000 	ldr.w	pc, [pc]	; 5aec <__tMBSaw_sync_veneer+0x4>
    5aec:	24019155 	.word	0x24019155

00005af0 <__tCrusher_setOperation_veneer>:
    5af0:	f85f f000 	ldr.w	pc, [pc]	; 5af4 <__tCrusher_setOperation_veneer+0x4>
    5af4:	240130f5 	.word	0x240130f5

00005af8 <__tMBTriangle_setFreq_veneer>:
    5af8:	f85f f000 	ldr.w	pc, [pc]	; 5afc <__tMBTriangle_setFreq_veneer+0x4>
    5afc:	24017a15 	.word	0x24017a15

00005b00 <__tCrusher_tick_veneer>:
    5b00:	f85f f000 	ldr.w	pc, [pc]	; 5b04 <__tCrusher_tick_veneer+0x4>
    5b04:	24013075 	.word	0x24013075

00005b08 <__tMBSineTri_sync_veneer>:
    5b08:	f85f f000 	ldr.w	pc, [pc]	; 5b0c <__tMBSineTri_sync_veneer+0x4>
    5b0c:	24018bd1 	.word	0x24018bd1

00005b10 <__updateStateFromSPIMessage_veneer>:
    5b10:	f85f f000 	ldr.w	pc, [pc]	; 5b14 <__updateStateFromSPIMessage_veneer+0x4>
    5b14:	240017b5 	.word	0x240017b5

00005b18 <__tMBTriangle_sync_veneer>:
    5b18:	f85f f000 	ldr.w	pc, [pc]	; 5b1c <__tMBTriangle_sync_veneer+0x4>
    5b1c:	24017a59 	.word	0x24017a59

00005b20 <__tLadderFilter_tick_veneer>:
    5b20:	f85f f000 	ldr.w	pc, [pc]	; 5b24 <__tLadderFilter_tick_veneer+0x4>
    5b24:	24015145 	.word	0x24015145

00005b28 <__tVZFilter_tickEfficient_veneer>:
    5b28:	f85f f000 	ldr.w	pc, [pc]	; 5b2c <__tVZFilter_tickEfficient_veneer+0x4>
    5b2c:	24013fa9 	.word	0x24013fa9

00005b30 <__fasterdbtoa_veneer>:
    5b30:	f85f f000 	ldr.w	pc, [pc]	; 5b34 <__fasterdbtoa_veneer+0x4>
    5b34:	24015981 	.word	0x24015981

00005b38 <__tSVF_setQ_veneer>:
    5b38:	f85f f000 	ldr.w	pc, [pc]	; 5b3c <__tSVF_setQ_veneer+0x4>
    5b3c:	24013e91 	.word	0x24013e91

00005b40 <__tLadderFilter_setQ_veneer>:
    5b40:	f85f f000 	ldr.w	pc, [pc]	; 5b44 <__tLadderFilter_setQ_veneer+0x4>
    5b44:	240153d9 	.word	0x240153d9

00005b48 <__tLadderFilter_setFreqFast_veneer>:
    5b48:	f85f f000 	ldr.w	pc, [pc]	; 5b4c <__tLadderFilter_setFreqFast_veneer+0x4>
    5b4c:	24015391 	.word	0x24015391

00005b50 <__tSVF_tick_veneer>:
    5b50:	f85f f000 	ldr.w	pc, [pc]	; 5b54 <__tSVF_tick_veneer+0x4>
    5b54:	24013db9 	.word	0x24013db9

00005b58 <__tDiodeFilter_setFreqFast_veneer>:
    5b58:	f85f f000 	ldr.w	pc, [pc]	; 5b5c <__tDiodeFilter_setFreqFast_veneer+0x4>
    5b5c:	24015055 	.word	0x24015055

00005b60 <__tADSRT_setLeakFactor_veneer>:
    5b60:	f85f f000 	ldr.w	pc, [pc]	; 5b64 <__tADSRT_setLeakFactor_veneer+0x4>
    5b64:	24013551 	.word	0x24013551

00005b68 <__tCycle_setFreq_veneer>:
    5b68:	f85f f000 	ldr.w	pc, [pc]	; 5b6c <__tCycle_setFreq_veneer+0x4>
    5b6c:	24015cf9 	.word	0x24015cf9

00005b70 <__tMBSineTri_setShape_veneer>:
    5b70:	f85f f000 	ldr.w	pc, [pc]	; 5b74 <__tMBSineTri_setShape_veneer+0x4>
    5b74:	24018c31 	.word	0x24018c31

00005b78 <__tDiodeFilter_tick_veneer>:
    5b78:	f85f f000 	ldr.w	pc, [pc]	; 5b7c <__tDiodeFilter_tick_veneer+0x4>
    5b7c:	24014a4d 	.word	0x24014a4d

00005b80 <__tMBSaw_tick_veneer>:
    5b80:	f85f f000 	ldr.w	pc, [pc]	; 5b84 <__tMBSaw_tick_veneer+0x4>
    5b84:	24018cb9 	.word	0x24018cb9

00005b88 <__tCycle_tick_veneer>:
    5b88:	f85f f000 	ldr.w	pc, [pc]	; 5b8c <__tCycle_tick_veneer+0x4>
    5b8c:	24015cad 	.word	0x24015cad

00005b90 <__tMBTriangle_setWidth_veneer>:
    5b90:	f85f f000 	ldr.w	pc, [pc]	; 5b94 <__tMBTriangle_setWidth_veneer+0x4>
    5b94:	24017a35 	.word	0x24017a35

00005b98 <__HAL_GPIO_WritePin_veneer>:
    5b98:	f85f f000 	ldr.w	pc, [pc]	; 5b9c <__HAL_GPIO_WritePin_veneer+0x4>
    5b9c:	240081b9 	.word	0x240081b9

00005ba0 <__tHighpass_tick_veneer>:
    5ba0:	f85f f000 	ldr.w	pc, [pc]	; 5ba4 <__tHighpass_tick_veneer+0x4>
    5ba4:	24013f65 	.word	0x24013f65

00005ba8 <__tCompressor_tick_veneer>:
    5ba8:	f85f f000 	ldr.w	pc, [pc]	; 5bac <__tCompressor_tick_veneer+0x4>
    5bac:	2401320d 	.word	0x2401320d

00005bb0 <__tExpSmooth_setDest_veneer>:
    5bb0:	f85f f000 	ldr.w	pc, [pc]	; 5bb4 <__tExpSmooth_setDest_veneer+0x4>
    5bb4:	24013a91 	.word	0x24013a91

00005bb8 <__tMBPulse_setFreq_veneer>:
    5bb8:	f85f f000 	ldr.w	pc, [pc]	; 5bbc <__tMBPulse_setFreq_veneer+0x4>
    5bbc:	24016931 	.word	0x24016931

00005bc0 <__tADSRT_setSustain_veneer>:
    5bc0:	f85f f000 	ldr.w	pc, [pc]	; 5bc4 <__tADSRT_setSustain_veneer+0x4>
    5bc4:	240134fd 	.word	0x240134fd

00005bc8 <__powf_veneer>:
    5bc8:	f85f f000 	ldr.w	pc, [pc]	; 5bcc <__powf_veneer+0x4>
    5bcc:	2401b2f1 	.word	0x2401b2f1

00005bd0 <__tADSRT_setDecay_veneer>:
    5bd0:	f85f f000 	ldr.w	pc, [pc]	; 5bd4 <__tADSRT_setDecay_veneer+0x4>
    5bd4:	240134d5 	.word	0x240134d5

00005bd8 <__LEAF_shaper_veneer>:
    5bd8:	f85f f000 	ldr.w	pc, [pc]	; 5bdc <__LEAF_shaper_veneer+0x4>
    5bdc:	240154d5 	.word	0x240154d5

00005be0 <__tMBSineTri_tick_veneer>:
    5be0:	f85f f000 	ldr.w	pc, [pc]	; 5be4 <__tMBSineTri_tick_veneer+0x4>
    5be4:	24017b51 	.word	0x24017b51

00005be8 <__tDiodeFilter_tickEfficient_veneer>:
    5be8:	f85f f000 	ldr.w	pc, [pc]	; 5bec <__tDiodeFilter_tickEfficient_veneer+0x4>
    5bec:	24014d51 	.word	0x24014d51

00005bf0 <__tExpSmooth_tick_veneer>:
    5bf0:	f85f f000 	ldr.w	pc, [pc]	; 5bf4 <__tExpSmooth_tick_veneer+0x4>
    5bf4:	24013a99 	.word	0x24013a99

00005bf8 <__LEAF_tanh_veneer>:
    5bf8:	f85f f000 	ldr.w	pc, [pc]	; 5bfc <__LEAF_tanh_veneer+0x4>
    5bfc:	2401559d 	.word	0x2401559d

00005c00 <__tMBPulse_tick_veneer>:
    5c00:	f85f f000 	ldr.w	pc, [pc]	; 5c04 <__tMBPulse_tick_veneer+0x4>
    5c04:	24015e81 	.word	0x24015e81

00005c08 <__lrintf_veneer>:
    5c08:	f85f f000 	ldr.w	pc, [pc]	; 5c0c <__lrintf_veneer+0x4>
    5c0c:	2401b241 	.word	0x2401b241

00005c10 <__memset_veneer>:
    5c10:	f85f f000 	ldr.w	pc, [pc]	; 5c14 <__memset_veneer+0x4>
    5c14:	2401a9f9 	.word	0x2401a9f9

00005c18 <__fastdbtoa_veneer>:
    5c18:	f85f f000 	ldr.w	pc, [pc]	; 5c1c <__fastdbtoa_veneer+0x4>
    5c1c:	24015971 	.word	0x24015971

00005c20 <__tanhf_veneer>:
    5c20:	f85f f000 	ldr.w	pc, [pc]	; 5c24 <__tanhf_veneer+0x4>
    5c24:	2401b609 	.word	0x2401b609

00005c28 <__arm_sin_f32_veneer>:
    5c28:	f85f f000 	ldr.w	pc, [pc]	; 5c2c <__arm_sin_f32_veneer+0x4>
    5c2c:	2401a8c9 	.word	0x2401a8c9

00005c30 <__tMBPulse_setWidth_veneer>:
    5c30:	f85f f000 	ldr.w	pc, [pc]	; 5c34 <__tMBPulse_setWidth_veneer+0x4>
    5c34:	24016951 	.word	0x24016951

00005c38 <__tADSRT_setRelease_veneer>:
    5c38:	f85f f000 	ldr.w	pc, [pc]	; 5c3c <__tADSRT_setRelease_veneer+0x4>
    5c3c:	24013529 	.word	0x24013529

00005c40 <__tMBSawPulse_setShape_veneer>:
    5c40:	f85f f000 	ldr.w	pc, [pc]	; 5c44 <__tMBSawPulse_setShape_veneer+0x4>
    5c44:	24019249 	.word	0x24019249

00005c48 <__tCrusher_setQuality_veneer>:
    5c48:	f85f f000 	ldr.w	pc, [pc]	; 5c4c <__tCrusher_setQuality_veneer+0x4>
    5c4c:	24013109 	.word	0x24013109

00005c50 <__tVZFilter_setResonance_veneer>:
    5c50:	f85f f000 	ldr.w	pc, [pc]	; 5c54 <__tVZFilter_setResonance_veneer+0x4>
    5c54:	240146d9 	.word	0x240146d9

00005c58 <__fasterexpf_veneer>:
    5c58:	f85f f000 	ldr.w	pc, [pc]	; 5c5c <__fasterexpf_veneer+0x4>
    5c5c:	24015475 	.word	0x24015475
